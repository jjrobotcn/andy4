# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from . import nav_pb2 as nav__pb2


class NavControllerStub(object):
    """navService.NavController 导航控制器

    导航控制器以充电为最高优先级，处于充电相关时，一切其它控制请求均返回Reject错误，
    需取得控制权时，请取消充电以恢复控制。

    开发管理平台功能参考: http://10.10.10.2/nav
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Move = channel.stream_stream(
                '/navService.NavController/Move',
                request_serializer=nav__pb2.MoveRequest.SerializeToString,
                response_deserializer=nav__pb2.MoveResponse.FromString,
                )
        self.NavTo = channel.unary_unary(
                '/navService.NavController/NavTo',
                request_serializer=nav__pb2.NavToRequest.SerializeToString,
                response_deserializer=nav__pb2.NavToResponse.FromString,
                )
        self.NavStop = channel.unary_unary(
                '/navService.NavController/NavStop',
                request_serializer=nav__pb2.NavStopRequest.SerializeToString,
                response_deserializer=nav__pb2.NavStopResponse.FromString,
                )
        self.AutoCharge = channel.unary_unary(
                '/navService.NavController/AutoCharge',
                request_serializer=nav__pb2.AutoChargeRequest.SerializeToString,
                response_deserializer=nav__pb2.AutoChargeResponse.FromString,
                )
        self.Rotate = channel.unary_unary(
                '/navService.NavController/Rotate',
                request_serializer=nav__pb2.RotateRequest.SerializeToString,
                response_deserializer=nav__pb2.RotateResponse.FromString,
                )
        self.OnNavEventChange = channel.unary_stream(
                '/navService.NavController/OnNavEventChange',
                request_serializer=nav__pb2.OnNavEventChangeRequest.SerializeToString,
                response_deserializer=nav__pb2.OnNavEventChangeResponse.FromString,
                )
        self.NewRoute = channel.unary_unary(
                '/navService.NavController/NewRoute',
                request_serializer=nav__pb2.NewRouteRequest.SerializeToString,
                response_deserializer=nav__pb2.NewRouteResponse.FromString,
                )
        self.ListRoutes = channel.unary_unary(
                '/navService.NavController/ListRoutes',
                request_serializer=nav__pb2.ListRoutesRequest.SerializeToString,
                response_deserializer=nav__pb2.ListRoutesResponse.FromString,
                )
        self.UpdateRoute = channel.unary_unary(
                '/navService.NavController/UpdateRoute',
                request_serializer=nav__pb2.UpdateRouteRequest.SerializeToString,
                response_deserializer=nav__pb2.UpdateRouteResponse.FromString,
                )
        self.DeleteRoutes = channel.unary_unary(
                '/navService.NavController/DeleteRoutes',
                request_serializer=nav__pb2.DeleteRoutesRequest.SerializeToString,
                response_deserializer=nav__pb2.DeleteRoutesResponse.FromString,
                )


class NavControllerServicer(object):
    """navService.NavController 导航控制器

    导航控制器以充电为最高优先级，处于充电相关时，一切其它控制请求均返回Reject错误，
    需取得控制权时，请取消充电以恢复控制。

    开发管理平台功能参考: http://10.10.10.2/nav
    """

    def Move(self, request_iterator, context):
        """Move 遥控移动

        遥控移动需持续发送移动指令，通常为300ms
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NavTo(self, request, context):
        """NavTo 导航
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NavStop(self, request, context):
        """NavStop 中止

        支持导航、旋转的中止

        导航中止后，可通过NavTo中CONTINUE恢复该目标导航
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AutoCharge(self, request, context):
        """AutoCharge 自动充电

        开发管理平台功能参考: http://10.10.10.2/power
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Rotate(self, request, context):
        """Rotate 原地旋转
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OnNavEventChange(self, request, context):
        """OnNavEventChange 导航事件监听

        监听导航模块中各类事件的变动更新，详见OnNavEventChangeResponse
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NewRoute(self, request, context):
        """NewRoute 新建线路

        无线导航不支持通过此方法构建
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListRoutes(self, request, context):
        """ListRoutes 获取线路列表

        无线导航此数据为地图数据的预设点数据，
        可通过navService.Map获取更明细数据
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateRoute(self, request, context):
        """UpdateRoute 更新线路信息

        无线导航不支持通过此方法更新
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteRoutes(self, request, context):
        """DeleteRoutes 删除多个线路

        无线导航不支持通过此方法删除
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_NavControllerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Move': grpc.stream_stream_rpc_method_handler(
                    servicer.Move,
                    request_deserializer=nav__pb2.MoveRequest.FromString,
                    response_serializer=nav__pb2.MoveResponse.SerializeToString,
            ),
            'NavTo': grpc.unary_unary_rpc_method_handler(
                    servicer.NavTo,
                    request_deserializer=nav__pb2.NavToRequest.FromString,
                    response_serializer=nav__pb2.NavToResponse.SerializeToString,
            ),
            'NavStop': grpc.unary_unary_rpc_method_handler(
                    servicer.NavStop,
                    request_deserializer=nav__pb2.NavStopRequest.FromString,
                    response_serializer=nav__pb2.NavStopResponse.SerializeToString,
            ),
            'AutoCharge': grpc.unary_unary_rpc_method_handler(
                    servicer.AutoCharge,
                    request_deserializer=nav__pb2.AutoChargeRequest.FromString,
                    response_serializer=nav__pb2.AutoChargeResponse.SerializeToString,
            ),
            'Rotate': grpc.unary_unary_rpc_method_handler(
                    servicer.Rotate,
                    request_deserializer=nav__pb2.RotateRequest.FromString,
                    response_serializer=nav__pb2.RotateResponse.SerializeToString,
            ),
            'OnNavEventChange': grpc.unary_stream_rpc_method_handler(
                    servicer.OnNavEventChange,
                    request_deserializer=nav__pb2.OnNavEventChangeRequest.FromString,
                    response_serializer=nav__pb2.OnNavEventChangeResponse.SerializeToString,
            ),
            'NewRoute': grpc.unary_unary_rpc_method_handler(
                    servicer.NewRoute,
                    request_deserializer=nav__pb2.NewRouteRequest.FromString,
                    response_serializer=nav__pb2.NewRouteResponse.SerializeToString,
            ),
            'ListRoutes': grpc.unary_unary_rpc_method_handler(
                    servicer.ListRoutes,
                    request_deserializer=nav__pb2.ListRoutesRequest.FromString,
                    response_serializer=nav__pb2.ListRoutesResponse.SerializeToString,
            ),
            'UpdateRoute': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateRoute,
                    request_deserializer=nav__pb2.UpdateRouteRequest.FromString,
                    response_serializer=nav__pb2.UpdateRouteResponse.SerializeToString,
            ),
            'DeleteRoutes': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteRoutes,
                    request_deserializer=nav__pb2.DeleteRoutesRequest.FromString,
                    response_serializer=nav__pb2.DeleteRoutesResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'navService.NavController', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class NavController(object):
    """navService.NavController 导航控制器

    导航控制器以充电为最高优先级，处于充电相关时，一切其它控制请求均返回Reject错误，
    需取得控制权时，请取消充电以恢复控制。

    开发管理平台功能参考: http://10.10.10.2/nav
    """

    @staticmethod
    def Move(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/navService.NavController/Move',
            nav__pb2.MoveRequest.SerializeToString,
            nav__pb2.MoveResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NavTo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/navService.NavController/NavTo',
            nav__pb2.NavToRequest.SerializeToString,
            nav__pb2.NavToResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NavStop(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/navService.NavController/NavStop',
            nav__pb2.NavStopRequest.SerializeToString,
            nav__pb2.NavStopResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AutoCharge(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/navService.NavController/AutoCharge',
            nav__pb2.AutoChargeRequest.SerializeToString,
            nav__pb2.AutoChargeResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Rotate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/navService.NavController/Rotate',
            nav__pb2.RotateRequest.SerializeToString,
            nav__pb2.RotateResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def OnNavEventChange(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/navService.NavController/OnNavEventChange',
            nav__pb2.OnNavEventChangeRequest.SerializeToString,
            nav__pb2.OnNavEventChangeResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NewRoute(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/navService.NavController/NewRoute',
            nav__pb2.NewRouteRequest.SerializeToString,
            nav__pb2.NewRouteResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListRoutes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/navService.NavController/ListRoutes',
            nav__pb2.ListRoutesRequest.SerializeToString,
            nav__pb2.ListRoutesResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateRoute(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/navService.NavController/UpdateRoute',
            nav__pb2.UpdateRouteRequest.SerializeToString,
            nav__pb2.UpdateRouteResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteRoutes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/navService.NavController/DeleteRoutes',
            nav__pb2.DeleteRoutesRequest.SerializeToString,
            nav__pb2.DeleteRoutesResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
