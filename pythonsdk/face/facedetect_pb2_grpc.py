# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from . import facedetect_pb2 as facedetect__pb2


class FaceDetectStub(object):
    """faceRecognition.FaceDetect 人脸检测服务
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.FromImage = channel.unary_unary(
                '/faceRecognition.FaceDetect/FromImage',
                request_serializer=facedetect__pb2.FromImageRequest.SerializeToString,
                response_deserializer=facedetect__pb2.FromImageResponse.FromString,
                )
        self.OnFaceDetect = channel.unary_stream(
                '/faceRecognition.FaceDetect/OnFaceDetect',
                request_serializer=facedetect__pb2.OnFaceDetectRequest.SerializeToString,
                response_deserializer=facedetect__pb2.OnFaceDetectResponse.FromString,
                )
        self.OnFaceSetFaceDetect = channel.unary_stream(
                '/faceRecognition.FaceDetect/OnFaceSetFaceDetect',
                request_serializer=facedetect__pb2.OnFaceSetFaceDetectRequest.SerializeToString,
                response_deserializer=facedetect__pb2.OnFaceSetFaceDetectResponse.FromString,
                )


class FaceDetectServicer(object):
    """faceRecognition.FaceDetect 人脸检测服务
    """

    def FromImage(self, request, context):
        """FromImage 检测人脸图片返回检测结果列表

        开发管理平台功能参考: http://10.10.10.2/face/compare
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OnFaceDetect(self, request, context):
        """OnFaceDetect 通过主摄像头动态检测人脸，持续返回检测结果列表

        开发管理平台功能参考: http://10.10.10.2/face/detect
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OnFaceSetFaceDetect(self, request, context):
        """OnFaceSetFaceDetect 通过主摄像头动态检测人脸并与指定FaceSet进行搜索，持续返回检测结果列表

        为提搜索效率，FaceSet数据将在初始加载时获取快照数据，
        因此在使用过程中修改FaceSet无法影响快照中的Face结果，
        修改数据后可通过重新调用此方法以更新快照数据。

        此方法为OnFaceDetect与Search的组合，用于内部FaceSet的识别搜索。

        开发管理平台功能参考: http://10.10.10.2/face/face-set-detect
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FaceDetectServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'FromImage': grpc.unary_unary_rpc_method_handler(
                    servicer.FromImage,
                    request_deserializer=facedetect__pb2.FromImageRequest.FromString,
                    response_serializer=facedetect__pb2.FromImageResponse.SerializeToString,
            ),
            'OnFaceDetect': grpc.unary_stream_rpc_method_handler(
                    servicer.OnFaceDetect,
                    request_deserializer=facedetect__pb2.OnFaceDetectRequest.FromString,
                    response_serializer=facedetect__pb2.OnFaceDetectResponse.SerializeToString,
            ),
            'OnFaceSetFaceDetect': grpc.unary_stream_rpc_method_handler(
                    servicer.OnFaceSetFaceDetect,
                    request_deserializer=facedetect__pb2.OnFaceSetFaceDetectRequest.FromString,
                    response_serializer=facedetect__pb2.OnFaceSetFaceDetectResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'faceRecognition.FaceDetect', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class FaceDetect(object):
    """faceRecognition.FaceDetect 人脸检测服务
    """

    @staticmethod
    def FromImage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/faceRecognition.FaceDetect/FromImage',
            facedetect__pb2.FromImageRequest.SerializeToString,
            facedetect__pb2.FromImageResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def OnFaceDetect(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/faceRecognition.FaceDetect/OnFaceDetect',
            facedetect__pb2.OnFaceDetectRequest.SerializeToString,
            facedetect__pb2.OnFaceDetectResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def OnFaceSetFaceDetect(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/faceRecognition.FaceDetect/OnFaceSetFaceDetect',
            facedetect__pb2.OnFaceSetFaceDetectRequest.SerializeToString,
            facedetect__pb2.OnFaceSetFaceDetectResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
