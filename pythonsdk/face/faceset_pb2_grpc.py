# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from . import faceset_pb2 as faceset__pb2


class FaceSetServiceStub(object):
    """faceRecognition.FaceSetService FaceSet数据的管理

    FaceSet用于存储管理Face数据以支持相关匹配与搜索功能

    开发管理平台功能参考: http://10.10.10.2/face/face-set
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.NewFaceSet = channel.unary_unary(
                '/faceRecognition.FaceSetService/NewFaceSet',
                request_serializer=faceset__pb2.NewFaceSetRequest.SerializeToString,
                response_deserializer=faceset__pb2.NewFaceSetResponse.FromString,
                )
        self.DeleteFaceSet = channel.unary_unary(
                '/faceRecognition.FaceSetService/DeleteFaceSet',
                request_serializer=faceset__pb2.DeleteFaceSetRequest.SerializeToString,
                response_deserializer=faceset__pb2.DeleteFaceSetResponse.FromString,
                )
        self.UpdateFaceSet = channel.unary_unary(
                '/faceRecognition.FaceSetService/UpdateFaceSet',
                request_serializer=faceset__pb2.UpdateFaceSetRequest.SerializeToString,
                response_deserializer=faceset__pb2.UpdateFaceSetResponse.FromString,
                )
        self.ListFaceSets = channel.unary_unary(
                '/faceRecognition.FaceSetService/ListFaceSets',
                request_serializer=faceset__pb2.ListFaceSetsRequest.SerializeToString,
                response_deserializer=faceset__pb2.ListFaceSetsResponse.FromString,
                )
        self.AddFace = channel.unary_unary(
                '/faceRecognition.FaceSetService/AddFace',
                request_serializer=faceset__pb2.AddFaceRequest.SerializeToString,
                response_deserializer=faceset__pb2.AddFaceResponse.FromString,
                )
        self.RemoveFace = channel.unary_unary(
                '/faceRecognition.FaceSetService/RemoveFace',
                request_serializer=faceset__pb2.RemoveFaceRequest.SerializeToString,
                response_deserializer=faceset__pb2.RemoveFaceResponse.FromString,
                )
        self.FaceDetail = channel.unary_unary(
                '/faceRecognition.FaceSetService/FaceDetail',
                request_serializer=faceset__pb2.FaceDetailRequest.SerializeToString,
                response_deserializer=faceset__pb2.FaceDetailResponse.FromString,
                )
        self.ListFaceDetails = channel.unary_unary(
                '/faceRecognition.FaceSetService/ListFaceDetails',
                request_serializer=faceset__pb2.ListFaceDetailsRequest.SerializeToString,
                response_deserializer=faceset__pb2.ListFaceDetailsResponse.FromString,
                )


class FaceSetServiceServicer(object):
    """faceRecognition.FaceSetService FaceSet数据的管理

    FaceSet用于存储管理Face数据以支持相关匹配与搜索功能

    开发管理平台功能参考: http://10.10.10.2/face/face-set
    """

    def NewFaceSet(self, request, context):
        """NewFaceSet 创建一个FaceSet
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteFaceSet(self, request, context):
        """DeleteFaceSet 删除FaceSet
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateFaceSet(self, request, context):
        """UpdateFaceSet 更新FaceSet信息
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListFaceSets(self, request, context):
        """ListFaceSets 获取FaceSet列表
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddFace(self, request, context):
        """AddFace 识别人脸图片并将结果添加至FaceSet中
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveFace(self, request, context):
        """RemoveFace 从FaceSet中移除Face
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FaceDetail(self, request, context):
        """FaceDetail 获取FaceSet中的Face
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListFaceDetails(self, request, context):
        """ListFaceDetails 获取FaceSet中的Face列表
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FaceSetServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'NewFaceSet': grpc.unary_unary_rpc_method_handler(
                    servicer.NewFaceSet,
                    request_deserializer=faceset__pb2.NewFaceSetRequest.FromString,
                    response_serializer=faceset__pb2.NewFaceSetResponse.SerializeToString,
            ),
            'DeleteFaceSet': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteFaceSet,
                    request_deserializer=faceset__pb2.DeleteFaceSetRequest.FromString,
                    response_serializer=faceset__pb2.DeleteFaceSetResponse.SerializeToString,
            ),
            'UpdateFaceSet': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateFaceSet,
                    request_deserializer=faceset__pb2.UpdateFaceSetRequest.FromString,
                    response_serializer=faceset__pb2.UpdateFaceSetResponse.SerializeToString,
            ),
            'ListFaceSets': grpc.unary_unary_rpc_method_handler(
                    servicer.ListFaceSets,
                    request_deserializer=faceset__pb2.ListFaceSetsRequest.FromString,
                    response_serializer=faceset__pb2.ListFaceSetsResponse.SerializeToString,
            ),
            'AddFace': grpc.unary_unary_rpc_method_handler(
                    servicer.AddFace,
                    request_deserializer=faceset__pb2.AddFaceRequest.FromString,
                    response_serializer=faceset__pb2.AddFaceResponse.SerializeToString,
            ),
            'RemoveFace': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveFace,
                    request_deserializer=faceset__pb2.RemoveFaceRequest.FromString,
                    response_serializer=faceset__pb2.RemoveFaceResponse.SerializeToString,
            ),
            'FaceDetail': grpc.unary_unary_rpc_method_handler(
                    servicer.FaceDetail,
                    request_deserializer=faceset__pb2.FaceDetailRequest.FromString,
                    response_serializer=faceset__pb2.FaceDetailResponse.SerializeToString,
            ),
            'ListFaceDetails': grpc.unary_unary_rpc_method_handler(
                    servicer.ListFaceDetails,
                    request_deserializer=faceset__pb2.ListFaceDetailsRequest.FromString,
                    response_serializer=faceset__pb2.ListFaceDetailsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'faceRecognition.FaceSetService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class FaceSetService(object):
    """faceRecognition.FaceSetService FaceSet数据的管理

    FaceSet用于存储管理Face数据以支持相关匹配与搜索功能

    开发管理平台功能参考: http://10.10.10.2/face/face-set
    """

    @staticmethod
    def NewFaceSet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/faceRecognition.FaceSetService/NewFaceSet',
            faceset__pb2.NewFaceSetRequest.SerializeToString,
            faceset__pb2.NewFaceSetResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteFaceSet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/faceRecognition.FaceSetService/DeleteFaceSet',
            faceset__pb2.DeleteFaceSetRequest.SerializeToString,
            faceset__pb2.DeleteFaceSetResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateFaceSet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/faceRecognition.FaceSetService/UpdateFaceSet',
            faceset__pb2.UpdateFaceSetRequest.SerializeToString,
            faceset__pb2.UpdateFaceSetResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListFaceSets(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/faceRecognition.FaceSetService/ListFaceSets',
            faceset__pb2.ListFaceSetsRequest.SerializeToString,
            faceset__pb2.ListFaceSetsResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddFace(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/faceRecognition.FaceSetService/AddFace',
            faceset__pb2.AddFaceRequest.SerializeToString,
            faceset__pb2.AddFaceResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RemoveFace(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/faceRecognition.FaceSetService/RemoveFace',
            faceset__pb2.RemoveFaceRequest.SerializeToString,
            faceset__pb2.RemoveFaceResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FaceDetail(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/faceRecognition.FaceSetService/FaceDetail',
            faceset__pb2.FaceDetailRequest.SerializeToString,
            faceset__pb2.FaceDetailResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListFaceDetails(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/faceRecognition.FaceSetService/ListFaceDetails',
            faceset__pb2.ListFaceDetailsRequest.SerializeToString,
            faceset__pb2.ListFaceDetailsResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
