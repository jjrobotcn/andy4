# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from . import expression_pb2 as expression__pb2


class ExpressionServiceStub(object):
    """expressionService.ExpressionService 表情管理

    开发管理平台功能参考: http://10.10.10.2/expression/
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.PlayExpressions = channel.unary_unary(
                '/expressionService.ExpressionService/PlayExpressions',
                request_serializer=expression__pb2.PlayExpressionsRequest.SerializeToString,
                response_deserializer=expression__pb2.PlayExpressionsResponse.FromString,
                )
        self.StopExpression = channel.unary_unary(
                '/expressionService.ExpressionService/StopExpression',
                request_serializer=expression__pb2.StopExpressionRequest.SerializeToString,
                response_deserializer=expression__pb2.StopExpressionResponse.FromString,
                )
        self.UploadExpressionFile = channel.unary_unary(
                '/expressionService.ExpressionService/UploadExpressionFile',
                request_serializer=expression__pb2.UploadExpressionFileRequest.SerializeToString,
                response_deserializer=expression__pb2.UploadExpressionFileResponse.FromString,
                )
        self.Rename = channel.unary_unary(
                '/expressionService.ExpressionService/Rename',
                request_serializer=expression__pb2.RenameRequest.SerializeToString,
                response_deserializer=expression__pb2.RenameResponse.FromString,
                )
        self.ListExpressions = channel.unary_unary(
                '/expressionService.ExpressionService/ListExpressions',
                request_serializer=expression__pb2.ListExpressionsRequest.SerializeToString,
                response_deserializer=expression__pb2.ListExpressionsResponse.FromString,
                )
        self.DeleteExpressions = channel.unary_unary(
                '/expressionService.ExpressionService/DeleteExpressions',
                request_serializer=expression__pb2.DeleteExpressionsRequest.SerializeToString,
                response_deserializer=expression__pb2.DeleteExpressionsResponse.FromString,
                )
        self.State = channel.unary_unary(
                '/expressionService.ExpressionService/State',
                request_serializer=expression__pb2.StateRequest.SerializeToString,
                response_deserializer=expression__pb2.StateResponse.FromString,
                )
        self.Switch = channel.unary_unary(
                '/expressionService.ExpressionService/Switch',
                request_serializer=expression__pb2.SwitchRequest.SerializeToString,
                response_deserializer=expression__pb2.SwitchResponse.FromString,
                )


class ExpressionServiceServicer(object):
    """expressionService.ExpressionService 表情管理

    开发管理平台功能参考: http://10.10.10.2/expression/
    """

    def PlayExpressions(self, request, context):
        """PlayExpressions 播放表情组合

        单套表情限制请参考UploadExpressionFile方法，
        更为复杂的表情设计可基于多个最小化表情进行组合
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StopExpression(self, request, context):
        """StopExpression 停止表情播放

        此方法将表现为播放至当前帧终止，不会恢复为当前表情的首帧
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UploadExpressionFile(self, request, context):
        """UploadExpressionFile 上传表情文件

        上传表情图片zip文件，用于构建新的表情

        表情文件为zip格式数据，如Example.zip文件上传后该表情将命名为"Example"，命名可通过Rename方法进行更改

        windows用户请在表情目录中选中preview.png, left目录，right目录，直接压缩为zip文件，不支持包含父目录

        表情包目录示例：
        left与right目录图片数量最大限制为各10张
        ├── preview.png # 表情预览文件，与表情数据无关，仅作为预览图用
        │
        ├── left # 左眼表情数据
        │   ├── 1.png
        │   ├── 2.png
        │   ├── 3.png
        │   ├── 4.png
        │   └── 5.png
        │
        └── right # 右眼表情数据
        ├── 1.png
        ├── 2.png
        ├── 3.png
        ├── 4.png
        └── 5.png

        网关不包含当前方法，HTTP上传请使用以下接口
        POST /api/v2/expression/upload_expression_file
        Content-Type: application/x-www-form-urlencoded
        Body:
        - name: String
        - e: File, e.g. Example.zip
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Rename(self, request, context):
        """Rename 对已上传的表情进行重命名
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListExpressions(self, request, context):
        """ListExpressions 获取表情列表
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteExpressions(self, request, context):
        """DeleteExpressions 删除表情列表
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def State(self, request, context):
        """State 获取当前表情模块状态
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Switch(self, request, context):
        """Switch 控制表情的开关
        关闭时将表现为黑屏
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ExpressionServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'PlayExpressions': grpc.unary_unary_rpc_method_handler(
                    servicer.PlayExpressions,
                    request_deserializer=expression__pb2.PlayExpressionsRequest.FromString,
                    response_serializer=expression__pb2.PlayExpressionsResponse.SerializeToString,
            ),
            'StopExpression': grpc.unary_unary_rpc_method_handler(
                    servicer.StopExpression,
                    request_deserializer=expression__pb2.StopExpressionRequest.FromString,
                    response_serializer=expression__pb2.StopExpressionResponse.SerializeToString,
            ),
            'UploadExpressionFile': grpc.unary_unary_rpc_method_handler(
                    servicer.UploadExpressionFile,
                    request_deserializer=expression__pb2.UploadExpressionFileRequest.FromString,
                    response_serializer=expression__pb2.UploadExpressionFileResponse.SerializeToString,
            ),
            'Rename': grpc.unary_unary_rpc_method_handler(
                    servicer.Rename,
                    request_deserializer=expression__pb2.RenameRequest.FromString,
                    response_serializer=expression__pb2.RenameResponse.SerializeToString,
            ),
            'ListExpressions': grpc.unary_unary_rpc_method_handler(
                    servicer.ListExpressions,
                    request_deserializer=expression__pb2.ListExpressionsRequest.FromString,
                    response_serializer=expression__pb2.ListExpressionsResponse.SerializeToString,
            ),
            'DeleteExpressions': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteExpressions,
                    request_deserializer=expression__pb2.DeleteExpressionsRequest.FromString,
                    response_serializer=expression__pb2.DeleteExpressionsResponse.SerializeToString,
            ),
            'State': grpc.unary_unary_rpc_method_handler(
                    servicer.State,
                    request_deserializer=expression__pb2.StateRequest.FromString,
                    response_serializer=expression__pb2.StateResponse.SerializeToString,
            ),
            'Switch': grpc.unary_unary_rpc_method_handler(
                    servicer.Switch,
                    request_deserializer=expression__pb2.SwitchRequest.FromString,
                    response_serializer=expression__pb2.SwitchResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'expressionService.ExpressionService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ExpressionService(object):
    """expressionService.ExpressionService 表情管理

    开发管理平台功能参考: http://10.10.10.2/expression/
    """

    @staticmethod
    def PlayExpressions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/expressionService.ExpressionService/PlayExpressions',
            expression__pb2.PlayExpressionsRequest.SerializeToString,
            expression__pb2.PlayExpressionsResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StopExpression(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/expressionService.ExpressionService/StopExpression',
            expression__pb2.StopExpressionRequest.SerializeToString,
            expression__pb2.StopExpressionResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UploadExpressionFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/expressionService.ExpressionService/UploadExpressionFile',
            expression__pb2.UploadExpressionFileRequest.SerializeToString,
            expression__pb2.UploadExpressionFileResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Rename(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/expressionService.ExpressionService/Rename',
            expression__pb2.RenameRequest.SerializeToString,
            expression__pb2.RenameResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListExpressions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/expressionService.ExpressionService/ListExpressions',
            expression__pb2.ListExpressionsRequest.SerializeToString,
            expression__pb2.ListExpressionsResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteExpressions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/expressionService.ExpressionService/DeleteExpressions',
            expression__pb2.DeleteExpressionsRequest.SerializeToString,
            expression__pb2.DeleteExpressionsResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def State(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/expressionService.ExpressionService/State',
            expression__pb2.StateRequest.SerializeToString,
            expression__pb2.StateResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Switch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/expressionService.ExpressionService/Switch',
            expression__pb2.SwitchRequest.SerializeToString,
            expression__pb2.SwitchResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
