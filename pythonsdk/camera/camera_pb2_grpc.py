# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from . import camera_pb2 as camera__pb2


class CameraServiceStub(object):
    """cameraService.CameraService 主摄像头视频流与图片的获取
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.LiveH264Stream = channel.unary_stream(
                '/cameraService.CameraService/LiveH264Stream',
                request_serializer=camera__pb2.LiveH264StreamRequest.SerializeToString,
                response_deserializer=camera__pb2.LiveH264StreamResponse.FromString,
                )
        self.LatestImage = channel.unary_unary(
                '/cameraService.CameraService/LatestImage',
                request_serializer=camera__pb2.LatestImageRequest.SerializeToString,
                response_deserializer=camera__pb2.LatestImageResponse.FromString,
                )


class CameraServiceServicer(object):
    """cameraService.CameraService 主摄像头视频流与图片的获取
    """

    def LiveH264Stream(self, request, context):
        """LiveH264Stream 获取主摄像头视频流数据

        输出数据为H264裸流，无音频，分辨率为960*720

        网关不包含当前方法，WebSocket用户请使用独立接口
        ws://10.10.10.2(:81)/api/v2/camera/ws/h264/live(?token=)
        web应用中需调整数据类型: ws.binaryType = 'arraybuffer';

        开发管理平台功能参考: http://10.10.10.2/camera/live/ws
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LatestImage(self, request, context):
        """LatestImage 获取主摄像头实时图片数据

        开发管理平台功能参考: http://10.10.10.2/camera/live/image
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CameraServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'LiveH264Stream': grpc.unary_stream_rpc_method_handler(
                    servicer.LiveH264Stream,
                    request_deserializer=camera__pb2.LiveH264StreamRequest.FromString,
                    response_serializer=camera__pb2.LiveH264StreamResponse.SerializeToString,
            ),
            'LatestImage': grpc.unary_unary_rpc_method_handler(
                    servicer.LatestImage,
                    request_deserializer=camera__pb2.LatestImageRequest.FromString,
                    response_serializer=camera__pb2.LatestImageResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'cameraService.CameraService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CameraService(object):
    """cameraService.CameraService 主摄像头视频流与图片的获取
    """

    @staticmethod
    def LiveH264Stream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/cameraService.CameraService/LiveH264Stream',
            camera__pb2.LiveH264StreamRequest.SerializeToString,
            camera__pb2.LiveH264StreamResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LatestImage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cameraService.CameraService/LatestImage',
            camera__pb2.LatestImageRequest.SerializeToString,
            camera__pb2.LatestImageResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
