# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from . import messaging_pb2 as messaging__pb2


class MessagingServiceStub(object):
    """messagingService.MessagingService 消息服务

    用于扩展内部应用的消息通信广播
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Messaging = channel.stream_stream(
                '/messagingService.MessagingService/Messaging',
                request_serializer=messaging__pb2.MessagingRequest.SerializeToString,
                response_deserializer=messaging__pb2.MessagingResponse.FromString,
                )


class MessagingServiceServicer(object):
    """messagingService.MessagingService 消息服务

    用于扩展内部应用的消息通信广播
    """

    def Messaging(self, request_iterator, context):
        """Messaging 消息的发布与订阅方法
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MessagingServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Messaging': grpc.stream_stream_rpc_method_handler(
                    servicer.Messaging,
                    request_deserializer=messaging__pb2.MessagingRequest.FromString,
                    response_serializer=messaging__pb2.MessagingResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'messagingService.MessagingService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MessagingService(object):
    """messagingService.MessagingService 消息服务

    用于扩展内部应用的消息通信广播
    """

    @staticmethod
    def Messaging(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/messagingService.MessagingService/Messaging',
            messaging__pb2.MessagingRequest.SerializeToString,
            messaging__pb2.MessagingResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
