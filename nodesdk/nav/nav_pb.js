// source: nav.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var map_pb = require('./map_pb.js');
goog.object.extend(proto, map_pb);
goog.exportSymbol('proto.navService.AutoChargeEvent', null, global);
goog.exportSymbol('proto.navService.AutoChargeRequest', null, global);
goog.exportSymbol('proto.navService.AutoChargeRequest.ChargeOptionOneofCase', null, global);
goog.exportSymbol('proto.navService.AutoChargeResponse', null, global);
goog.exportSymbol('proto.navService.ChargeStatusCode', null, global);
goog.exportSymbol('proto.navService.DeleteRoutesRequest', null, global);
goog.exportSymbol('proto.navService.DeleteRoutesResponse', null, global);
goog.exportSymbol('proto.navService.GetRouteRequest', null, global);
goog.exportSymbol('proto.navService.GetRouteResponse', null, global);
goog.exportSymbol('proto.navService.ListRoutesRequest', null, global);
goog.exportSymbol('proto.navService.ListRoutesResponse', null, global);
goog.exportSymbol('proto.navService.MoveDirection', null, global);
goog.exportSymbol('proto.navService.MoveEvent', null, global);
goog.exportSymbol('proto.navService.MoveRequest', null, global);
goog.exportSymbol('proto.navService.MoveResponse', null, global);
goog.exportSymbol('proto.navService.NavEvent', null, global);
goog.exportSymbol('proto.navService.NavEventType', null, global);
goog.exportSymbol('proto.navService.NavRoaming', null, global);
goog.exportSymbol('proto.navService.NavStopRequest', null, global);
goog.exportSymbol('proto.navService.NavStopResponse', null, global);
goog.exportSymbol('proto.navService.NavTarget', null, global);
goog.exportSymbol('proto.navService.NavToRequest', null, global);
goog.exportSymbol('proto.navService.NavToRequest.TargetOneofCase', null, global);
goog.exportSymbol('proto.navService.NavToResponse', null, global);
goog.exportSymbol('proto.navService.NavToResponse.TargetOneofCase', null, global);
goog.exportSymbol('proto.navService.NewRouteRequest', null, global);
goog.exportSymbol('proto.navService.NewRouteResponse', null, global);
goog.exportSymbol('proto.navService.OnNavEventChangeRequest', null, global);
goog.exportSymbol('proto.navService.OnNavEventChangeResponse', null, global);
goog.exportSymbol('proto.navService.OnNavEventChangeResponse.ChangeOneofCase', null, global);
goog.exportSymbol('proto.navService.RoamingType', null, global);
goog.exportSymbol('proto.navService.RotateEvent', null, global);
goog.exportSymbol('proto.navService.RotateRequest', null, global);
goog.exportSymbol('proto.navService.RotateRequest.RotateOneofCase', null, global);
goog.exportSymbol('proto.navService.RotateResponse', null, global);
goog.exportSymbol('proto.navService.Route', null, global);
goog.exportSymbol('proto.navService.RoutePoint', null, global);
goog.exportSymbol('proto.navService.StatusCode', null, global);
goog.exportSymbol('proto.navService.UpdateRouteRequest', null, global);
goog.exportSymbol('proto.navService.UpdateRouteResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.navService.MoveRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.navService.MoveRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.navService.MoveRequest.displayName = 'proto.navService.MoveRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.navService.MoveResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.navService.MoveResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.navService.MoveResponse.displayName = 'proto.navService.MoveResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.navService.NavTarget = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.navService.NavTarget, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.navService.NavTarget.displayName = 'proto.navService.NavTarget';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.navService.NavRoaming = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.navService.NavRoaming.repeatedFields_, null);
};
goog.inherits(proto.navService.NavRoaming, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.navService.NavRoaming.displayName = 'proto.navService.NavRoaming';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.navService.NavToRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.navService.NavToRequest.oneofGroups_);
};
goog.inherits(proto.navService.NavToRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.navService.NavToRequest.displayName = 'proto.navService.NavToRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.navService.NavToResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.navService.NavToResponse.oneofGroups_);
};
goog.inherits(proto.navService.NavToResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.navService.NavToResponse.displayName = 'proto.navService.NavToResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.navService.NavStopRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.navService.NavStopRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.navService.NavStopRequest.displayName = 'proto.navService.NavStopRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.navService.NavStopResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.navService.NavStopResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.navService.NavStopResponse.displayName = 'proto.navService.NavStopResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.navService.AutoChargeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.navService.AutoChargeRequest.oneofGroups_);
};
goog.inherits(proto.navService.AutoChargeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.navService.AutoChargeRequest.displayName = 'proto.navService.AutoChargeRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.navService.AutoChargeResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.navService.AutoChargeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.navService.AutoChargeResponse.displayName = 'proto.navService.AutoChargeResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.navService.RotateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.navService.RotateRequest.oneofGroups_);
};
goog.inherits(proto.navService.RotateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.navService.RotateRequest.displayName = 'proto.navService.RotateRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.navService.RotateResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.navService.RotateResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.navService.RotateResponse.displayName = 'proto.navService.RotateResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.navService.OnNavEventChangeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.navService.OnNavEventChangeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.navService.OnNavEventChangeRequest.displayName = 'proto.navService.OnNavEventChangeRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.navService.MoveEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.navService.MoveEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.navService.MoveEvent.displayName = 'proto.navService.MoveEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.navService.NavEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.navService.NavEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.navService.NavEvent.displayName = 'proto.navService.NavEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.navService.AutoChargeEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.navService.AutoChargeEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.navService.AutoChargeEvent.displayName = 'proto.navService.AutoChargeEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.navService.RotateEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.navService.RotateEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.navService.RotateEvent.displayName = 'proto.navService.RotateEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.navService.OnNavEventChangeResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.navService.OnNavEventChangeResponse.oneofGroups_);
};
goog.inherits(proto.navService.OnNavEventChangeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.navService.OnNavEventChangeResponse.displayName = 'proto.navService.OnNavEventChangeResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.navService.Route = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.navService.Route.repeatedFields_, null);
};
goog.inherits(proto.navService.Route, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.navService.Route.displayName = 'proto.navService.Route';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.navService.RoutePoint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.navService.RoutePoint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.navService.RoutePoint.displayName = 'proto.navService.RoutePoint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.navService.NewRouteRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.navService.NewRouteRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.navService.NewRouteRequest.displayName = 'proto.navService.NewRouteRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.navService.NewRouteResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.navService.NewRouteResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.navService.NewRouteResponse.displayName = 'proto.navService.NewRouteResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.navService.ListRoutesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.navService.ListRoutesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.navService.ListRoutesRequest.displayName = 'proto.navService.ListRoutesRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.navService.ListRoutesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.navService.ListRoutesResponse.repeatedFields_, null);
};
goog.inherits(proto.navService.ListRoutesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.navService.ListRoutesResponse.displayName = 'proto.navService.ListRoutesResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.navService.GetRouteRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.navService.GetRouteRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.navService.GetRouteRequest.displayName = 'proto.navService.GetRouteRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.navService.GetRouteResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.navService.GetRouteResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.navService.GetRouteResponse.displayName = 'proto.navService.GetRouteResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.navService.UpdateRouteRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.navService.UpdateRouteRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.navService.UpdateRouteRequest.displayName = 'proto.navService.UpdateRouteRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.navService.UpdateRouteResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.navService.UpdateRouteResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.navService.UpdateRouteResponse.displayName = 'proto.navService.UpdateRouteResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.navService.DeleteRoutesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.navService.DeleteRoutesRequest.repeatedFields_, null);
};
goog.inherits(proto.navService.DeleteRoutesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.navService.DeleteRoutesRequest.displayName = 'proto.navService.DeleteRoutesRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.navService.DeleteRoutesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.navService.DeleteRoutesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.navService.DeleteRoutesResponse.displayName = 'proto.navService.DeleteRoutesResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.navService.MoveRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.navService.MoveRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.navService.MoveRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.navService.MoveRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    speed: jspb.Message.getFieldWithDefault(msg, 1, 0),
    rspeed: jspb.Message.getFieldWithDefault(msg, 2, 0),
    direction: jspb.Message.getFieldWithDefault(msg, 3, 0),
    mode: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.navService.MoveRequest}
 */
proto.navService.MoveRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.navService.MoveRequest;
  return proto.navService.MoveRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.navService.MoveRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.navService.MoveRequest}
 */
proto.navService.MoveRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSpeed(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRspeed(value);
      break;
    case 3:
      var value = /** @type {!proto.navService.MoveDirection} */ (reader.readEnum());
      msg.setDirection(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.navService.MoveRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.navService.MoveRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.navService.MoveRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.navService.MoveRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSpeed();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getRspeed();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getDirection();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getMode();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional uint32 speed = 1;
 * @return {number}
 */
proto.navService.MoveRequest.prototype.getSpeed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.navService.MoveRequest} returns this
 */
proto.navService.MoveRequest.prototype.setSpeed = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 rspeed = 2;
 * @return {number}
 */
proto.navService.MoveRequest.prototype.getRspeed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.navService.MoveRequest} returns this
 */
proto.navService.MoveRequest.prototype.setRspeed = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional MoveDirection direction = 3;
 * @return {!proto.navService.MoveDirection}
 */
proto.navService.MoveRequest.prototype.getDirection = function() {
  return /** @type {!proto.navService.MoveDirection} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.navService.MoveDirection} value
 * @return {!proto.navService.MoveRequest} returns this
 */
proto.navService.MoveRequest.prototype.setDirection = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional string mode = 4;
 * @return {string}
 */
proto.navService.MoveRequest.prototype.getMode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.navService.MoveRequest} returns this
 */
proto.navService.MoveRequest.prototype.setMode = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.navService.MoveResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.navService.MoveResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.navService.MoveResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.navService.MoveResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    statusCode: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.navService.MoveResponse}
 */
proto.navService.MoveResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.navService.MoveResponse;
  return proto.navService.MoveResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.navService.MoveResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.navService.MoveResponse}
 */
proto.navService.MoveResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.navService.StatusCode} */ (reader.readEnum());
      msg.setStatusCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.navService.MoveResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.navService.MoveResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.navService.MoveResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.navService.MoveResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatusCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional StatusCode status_code = 1;
 * @return {!proto.navService.StatusCode}
 */
proto.navService.MoveResponse.prototype.getStatusCode = function() {
  return /** @type {!proto.navService.StatusCode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.navService.StatusCode} value
 * @return {!proto.navService.MoveResponse} returns this
 */
proto.navService.MoveResponse.prototype.setStatusCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.navService.NavTarget.prototype.toObject = function(opt_includeInstance) {
  return proto.navService.NavTarget.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.navService.NavTarget} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.navService.NavTarget.toObject = function(includeInstance, msg) {
  var f, obj = {
    index: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.navService.NavTarget}
 */
proto.navService.NavTarget.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.navService.NavTarget;
  return proto.navService.NavTarget.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.navService.NavTarget} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.navService.NavTarget}
 */
proto.navService.NavTarget.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIndex(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.navService.NavTarget.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.navService.NavTarget.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.navService.NavTarget} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.navService.NavTarget.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIndex();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string index = 1;
 * @return {string}
 */
proto.navService.NavTarget.prototype.getIndex = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.navService.NavTarget} returns this
 */
proto.navService.NavTarget.prototype.setIndex = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.navService.NavTarget.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.navService.NavTarget} returns this
 */
proto.navService.NavTarget.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.navService.NavRoaming.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.navService.NavRoaming.prototype.toObject = function(opt_includeInstance) {
  return proto.navService.NavRoaming.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.navService.NavRoaming} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.navService.NavRoaming.toObject = function(includeInstance, msg) {
  var f, obj = {
    navRoamingType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    waitSec: jspb.Message.getFieldWithDefault(msg, 2, 0),
    roamingTargetIndexesList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    orderLoop: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.navService.NavRoaming}
 */
proto.navService.NavRoaming.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.navService.NavRoaming;
  return proto.navService.NavRoaming.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.navService.NavRoaming} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.navService.NavRoaming}
 */
proto.navService.NavRoaming.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.navService.RoamingType} */ (reader.readEnum());
      msg.setNavRoamingType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWaitSec(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addRoamingTargetIndexes(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOrderLoop(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.navService.NavRoaming.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.navService.NavRoaming.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.navService.NavRoaming} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.navService.NavRoaming.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNavRoamingType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getWaitSec();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getRoamingTargetIndexesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getOrderLoop();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional RoamingType nav_roaming_type = 1;
 * @return {!proto.navService.RoamingType}
 */
proto.navService.NavRoaming.prototype.getNavRoamingType = function() {
  return /** @type {!proto.navService.RoamingType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.navService.RoamingType} value
 * @return {!proto.navService.NavRoaming} returns this
 */
proto.navService.NavRoaming.prototype.setNavRoamingType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional int32 wait_sec = 2;
 * @return {number}
 */
proto.navService.NavRoaming.prototype.getWaitSec = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.navService.NavRoaming} returns this
 */
proto.navService.NavRoaming.prototype.setWaitSec = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated string roaming_target_indexes = 3;
 * @return {!Array<string>}
 */
proto.navService.NavRoaming.prototype.getRoamingTargetIndexesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.navService.NavRoaming} returns this
 */
proto.navService.NavRoaming.prototype.setRoamingTargetIndexesList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.navService.NavRoaming} returns this
 */
proto.navService.NavRoaming.prototype.addRoamingTargetIndexes = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.navService.NavRoaming} returns this
 */
proto.navService.NavRoaming.prototype.clearRoamingTargetIndexesList = function() {
  return this.setRoamingTargetIndexesList([]);
};


/**
 * optional bool order_loop = 4;
 * @return {boolean}
 */
proto.navService.NavRoaming.prototype.getOrderLoop = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.navService.NavRoaming} returns this
 */
proto.navService.NavRoaming.prototype.setOrderLoop = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.navService.NavToRequest.oneofGroups_ = [[1,3,5]];

/**
 * @enum {number}
 */
proto.navService.NavToRequest.TargetOneofCase = {
  TARGET_ONEOF_NOT_SET: 0,
  TARGET: 1,
  ROAMING: 3,
  MAP_POSITION: 5
};

/**
 * @return {proto.navService.NavToRequest.TargetOneofCase}
 */
proto.navService.NavToRequest.prototype.getTargetOneofCase = function() {
  return /** @type {proto.navService.NavToRequest.TargetOneofCase} */(jspb.Message.computeOneofCase(this, proto.navService.NavToRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.navService.NavToRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.navService.NavToRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.navService.NavToRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.navService.NavToRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    target: (f = msg.getTarget()) && proto.navService.NavTarget.toObject(includeInstance, f),
    roaming: (f = msg.getRoaming()) && proto.navService.NavRoaming.toObject(includeInstance, f),
    mapPosition: (f = msg.getMapPosition()) && map_pb.MapPosition.toObject(includeInstance, f),
    speed: jspb.Message.getFieldWithDefault(msg, 2, 0),
    syncMode: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.navService.NavToRequest}
 */
proto.navService.NavToRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.navService.NavToRequest;
  return proto.navService.NavToRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.navService.NavToRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.navService.NavToRequest}
 */
proto.navService.NavToRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.navService.NavTarget;
      reader.readMessage(value,proto.navService.NavTarget.deserializeBinaryFromReader);
      msg.setTarget(value);
      break;
    case 3:
      var value = new proto.navService.NavRoaming;
      reader.readMessage(value,proto.navService.NavRoaming.deserializeBinaryFromReader);
      msg.setRoaming(value);
      break;
    case 5:
      var value = new map_pb.MapPosition;
      reader.readMessage(value,map_pb.MapPosition.deserializeBinaryFromReader);
      msg.setMapPosition(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSpeed(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSyncMode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.navService.NavToRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.navService.NavToRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.navService.NavToRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.navService.NavToRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTarget();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.navService.NavTarget.serializeBinaryToWriter
    );
  }
  f = message.getRoaming();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.navService.NavRoaming.serializeBinaryToWriter
    );
  }
  f = message.getMapPosition();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      map_pb.MapPosition.serializeBinaryToWriter
    );
  }
  f = message.getSpeed();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getSyncMode();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional NavTarget target = 1;
 * @return {?proto.navService.NavTarget}
 */
proto.navService.NavToRequest.prototype.getTarget = function() {
  return /** @type{?proto.navService.NavTarget} */ (
    jspb.Message.getWrapperField(this, proto.navService.NavTarget, 1));
};


/**
 * @param {?proto.navService.NavTarget|undefined} value
 * @return {!proto.navService.NavToRequest} returns this
*/
proto.navService.NavToRequest.prototype.setTarget = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.navService.NavToRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.navService.NavToRequest} returns this
 */
proto.navService.NavToRequest.prototype.clearTarget = function() {
  return this.setTarget(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.navService.NavToRequest.prototype.hasTarget = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional NavRoaming roaming = 3;
 * @return {?proto.navService.NavRoaming}
 */
proto.navService.NavToRequest.prototype.getRoaming = function() {
  return /** @type{?proto.navService.NavRoaming} */ (
    jspb.Message.getWrapperField(this, proto.navService.NavRoaming, 3));
};


/**
 * @param {?proto.navService.NavRoaming|undefined} value
 * @return {!proto.navService.NavToRequest} returns this
*/
proto.navService.NavToRequest.prototype.setRoaming = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.navService.NavToRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.navService.NavToRequest} returns this
 */
proto.navService.NavToRequest.prototype.clearRoaming = function() {
  return this.setRoaming(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.navService.NavToRequest.prototype.hasRoaming = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional MapPosition map_position = 5;
 * @return {?proto.navService.MapPosition}
 */
proto.navService.NavToRequest.prototype.getMapPosition = function() {
  return /** @type{?proto.navService.MapPosition} */ (
    jspb.Message.getWrapperField(this, map_pb.MapPosition, 5));
};


/**
 * @param {?proto.navService.MapPosition|undefined} value
 * @return {!proto.navService.NavToRequest} returns this
*/
proto.navService.NavToRequest.prototype.setMapPosition = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.navService.NavToRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.navService.NavToRequest} returns this
 */
proto.navService.NavToRequest.prototype.clearMapPosition = function() {
  return this.setMapPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.navService.NavToRequest.prototype.hasMapPosition = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional uint32 speed = 2;
 * @return {number}
 */
proto.navService.NavToRequest.prototype.getSpeed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.navService.NavToRequest} returns this
 */
proto.navService.NavToRequest.prototype.setSpeed = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bool sync_mode = 4;
 * @return {boolean}
 */
proto.navService.NavToRequest.prototype.getSyncMode = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.navService.NavToRequest} returns this
 */
proto.navService.NavToRequest.prototype.setSyncMode = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.navService.NavToResponse.oneofGroups_ = [[2,3,4]];

/**
 * @enum {number}
 */
proto.navService.NavToResponse.TargetOneofCase = {
  TARGET_ONEOF_NOT_SET: 0,
  TARGET: 2,
  IS_ROAMING: 3,
  MAP_POSITION: 4
};

/**
 * @return {proto.navService.NavToResponse.TargetOneofCase}
 */
proto.navService.NavToResponse.prototype.getTargetOneofCase = function() {
  return /** @type {proto.navService.NavToResponse.TargetOneofCase} */(jspb.Message.computeOneofCase(this, proto.navService.NavToResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.navService.NavToResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.navService.NavToResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.navService.NavToResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.navService.NavToResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    statusCode: jspb.Message.getFieldWithDefault(msg, 1, 0),
    target: (f = msg.getTarget()) && proto.navService.NavTarget.toObject(includeInstance, f),
    isRoaming: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    mapPosition: (f = msg.getMapPosition()) && map_pb.MapPosition.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.navService.NavToResponse}
 */
proto.navService.NavToResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.navService.NavToResponse;
  return proto.navService.NavToResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.navService.NavToResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.navService.NavToResponse}
 */
proto.navService.NavToResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.navService.StatusCode} */ (reader.readEnum());
      msg.setStatusCode(value);
      break;
    case 2:
      var value = new proto.navService.NavTarget;
      reader.readMessage(value,proto.navService.NavTarget.deserializeBinaryFromReader);
      msg.setTarget(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsRoaming(value);
      break;
    case 4:
      var value = new map_pb.MapPosition;
      reader.readMessage(value,map_pb.MapPosition.deserializeBinaryFromReader);
      msg.setMapPosition(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.navService.NavToResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.navService.NavToResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.navService.NavToResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.navService.NavToResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatusCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getTarget();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.navService.NavTarget.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getMapPosition();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      map_pb.MapPosition.serializeBinaryToWriter
    );
  }
};


/**
 * optional StatusCode status_code = 1;
 * @return {!proto.navService.StatusCode}
 */
proto.navService.NavToResponse.prototype.getStatusCode = function() {
  return /** @type {!proto.navService.StatusCode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.navService.StatusCode} value
 * @return {!proto.navService.NavToResponse} returns this
 */
proto.navService.NavToResponse.prototype.setStatusCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional NavTarget target = 2;
 * @return {?proto.navService.NavTarget}
 */
proto.navService.NavToResponse.prototype.getTarget = function() {
  return /** @type{?proto.navService.NavTarget} */ (
    jspb.Message.getWrapperField(this, proto.navService.NavTarget, 2));
};


/**
 * @param {?proto.navService.NavTarget|undefined} value
 * @return {!proto.navService.NavToResponse} returns this
*/
proto.navService.NavToResponse.prototype.setTarget = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.navService.NavToResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.navService.NavToResponse} returns this
 */
proto.navService.NavToResponse.prototype.clearTarget = function() {
  return this.setTarget(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.navService.NavToResponse.prototype.hasTarget = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool is_roaming = 3;
 * @return {boolean}
 */
proto.navService.NavToResponse.prototype.getIsRoaming = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.navService.NavToResponse} returns this
 */
proto.navService.NavToResponse.prototype.setIsRoaming = function(value) {
  return jspb.Message.setOneofField(this, 3, proto.navService.NavToResponse.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.navService.NavToResponse} returns this
 */
proto.navService.NavToResponse.prototype.clearIsRoaming = function() {
  return jspb.Message.setOneofField(this, 3, proto.navService.NavToResponse.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.navService.NavToResponse.prototype.hasIsRoaming = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional MapPosition map_position = 4;
 * @return {?proto.navService.MapPosition}
 */
proto.navService.NavToResponse.prototype.getMapPosition = function() {
  return /** @type{?proto.navService.MapPosition} */ (
    jspb.Message.getWrapperField(this, map_pb.MapPosition, 4));
};


/**
 * @param {?proto.navService.MapPosition|undefined} value
 * @return {!proto.navService.NavToResponse} returns this
*/
proto.navService.NavToResponse.prototype.setMapPosition = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.navService.NavToResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.navService.NavToResponse} returns this
 */
proto.navService.NavToResponse.prototype.clearMapPosition = function() {
  return this.setMapPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.navService.NavToResponse.prototype.hasMapPosition = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.navService.NavStopRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.navService.NavStopRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.navService.NavStopRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.navService.NavStopRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.navService.NavStopRequest}
 */
proto.navService.NavStopRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.navService.NavStopRequest;
  return proto.navService.NavStopRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.navService.NavStopRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.navService.NavStopRequest}
 */
proto.navService.NavStopRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.navService.NavStopRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.navService.NavStopRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.navService.NavStopRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.navService.NavStopRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.navService.NavStopResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.navService.NavStopResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.navService.NavStopResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.navService.NavStopResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    statusCode: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.navService.NavStopResponse}
 */
proto.navService.NavStopResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.navService.NavStopResponse;
  return proto.navService.NavStopResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.navService.NavStopResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.navService.NavStopResponse}
 */
proto.navService.NavStopResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.navService.StatusCode} */ (reader.readEnum());
      msg.setStatusCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.navService.NavStopResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.navService.NavStopResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.navService.NavStopResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.navService.NavStopResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatusCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional StatusCode status_code = 1;
 * @return {!proto.navService.StatusCode}
 */
proto.navService.NavStopResponse.prototype.getStatusCode = function() {
  return /** @type {!proto.navService.StatusCode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.navService.StatusCode} value
 * @return {!proto.navService.NavStopResponse} returns this
 */
proto.navService.NavStopResponse.prototype.setStatusCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.navService.AutoChargeRequest.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.navService.AutoChargeRequest.ChargeOptionOneofCase = {
  CHARGE_OPTION_ONEOF_NOT_SET: 0,
  CHARGE: 1,
  CANCEL: 2,
  CHARGE_PRESET: 3
};

/**
 * @return {proto.navService.AutoChargeRequest.ChargeOptionOneofCase}
 */
proto.navService.AutoChargeRequest.prototype.getChargeOptionOneofCase = function() {
  return /** @type {proto.navService.AutoChargeRequest.ChargeOptionOneofCase} */(jspb.Message.computeOneofCase(this, proto.navService.AutoChargeRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.navService.AutoChargeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.navService.AutoChargeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.navService.AutoChargeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.navService.AutoChargeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    charge: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    cancel: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    chargePreset: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    timeoutSec: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.navService.AutoChargeRequest}
 */
proto.navService.AutoChargeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.navService.AutoChargeRequest;
  return proto.navService.AutoChargeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.navService.AutoChargeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.navService.AutoChargeRequest}
 */
proto.navService.AutoChargeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCharge(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCancel(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setChargePreset(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTimeoutSec(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.navService.AutoChargeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.navService.AutoChargeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.navService.AutoChargeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.navService.AutoChargeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getTimeoutSec();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * optional bool charge = 1;
 * @return {boolean}
 */
proto.navService.AutoChargeRequest.prototype.getCharge = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.navService.AutoChargeRequest} returns this
 */
proto.navService.AutoChargeRequest.prototype.setCharge = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.navService.AutoChargeRequest.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.navService.AutoChargeRequest} returns this
 */
proto.navService.AutoChargeRequest.prototype.clearCharge = function() {
  return jspb.Message.setOneofField(this, 1, proto.navService.AutoChargeRequest.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.navService.AutoChargeRequest.prototype.hasCharge = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool cancel = 2;
 * @return {boolean}
 */
proto.navService.AutoChargeRequest.prototype.getCancel = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.navService.AutoChargeRequest} returns this
 */
proto.navService.AutoChargeRequest.prototype.setCancel = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.navService.AutoChargeRequest.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.navService.AutoChargeRequest} returns this
 */
proto.navService.AutoChargeRequest.prototype.clearCancel = function() {
  return jspb.Message.setOneofField(this, 2, proto.navService.AutoChargeRequest.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.navService.AutoChargeRequest.prototype.hasCancel = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool charge_preset = 3;
 * @return {boolean}
 */
proto.navService.AutoChargeRequest.prototype.getChargePreset = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.navService.AutoChargeRequest} returns this
 */
proto.navService.AutoChargeRequest.prototype.setChargePreset = function(value) {
  return jspb.Message.setOneofField(this, 3, proto.navService.AutoChargeRequest.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.navService.AutoChargeRequest} returns this
 */
proto.navService.AutoChargeRequest.prototype.clearChargePreset = function() {
  return jspb.Message.setOneofField(this, 3, proto.navService.AutoChargeRequest.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.navService.AutoChargeRequest.prototype.hasChargePreset = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 timeout_sec = 4;
 * @return {number}
 */
proto.navService.AutoChargeRequest.prototype.getTimeoutSec = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.navService.AutoChargeRequest} returns this
 */
proto.navService.AutoChargeRequest.prototype.setTimeoutSec = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.navService.AutoChargeResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.navService.AutoChargeResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.navService.AutoChargeResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.navService.AutoChargeResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    chargeStatusCode: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.navService.AutoChargeResponse}
 */
proto.navService.AutoChargeResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.navService.AutoChargeResponse;
  return proto.navService.AutoChargeResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.navService.AutoChargeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.navService.AutoChargeResponse}
 */
proto.navService.AutoChargeResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.navService.ChargeStatusCode} */ (reader.readEnum());
      msg.setChargeStatusCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.navService.AutoChargeResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.navService.AutoChargeResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.navService.AutoChargeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.navService.AutoChargeResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChargeStatusCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional ChargeStatusCode charge_status_code = 1;
 * @return {!proto.navService.ChargeStatusCode}
 */
proto.navService.AutoChargeResponse.prototype.getChargeStatusCode = function() {
  return /** @type {!proto.navService.ChargeStatusCode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.navService.ChargeStatusCode} value
 * @return {!proto.navService.AutoChargeResponse} returns this
 */
proto.navService.AutoChargeResponse.prototype.setChargeStatusCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.navService.RotateRequest.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.navService.RotateRequest.RotateOneofCase = {
  ROTATE_ONEOF_NOT_SET: 0,
  ANGLE: 1,
  ROLLBACK: 2
};

/**
 * @return {proto.navService.RotateRequest.RotateOneofCase}
 */
proto.navService.RotateRequest.prototype.getRotateOneofCase = function() {
  return /** @type {proto.navService.RotateRequest.RotateOneofCase} */(jspb.Message.computeOneofCase(this, proto.navService.RotateRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.navService.RotateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.navService.RotateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.navService.RotateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.navService.RotateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    angle: jspb.Message.getFieldWithDefault(msg, 1, 0),
    rollback: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.navService.RotateRequest}
 */
proto.navService.RotateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.navService.RotateRequest;
  return proto.navService.RotateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.navService.RotateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.navService.RotateRequest}
 */
proto.navService.RotateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAngle(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRollback(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.navService.RotateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.navService.RotateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.navService.RotateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.navService.RotateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional int32 angle = 1;
 * @return {number}
 */
proto.navService.RotateRequest.prototype.getAngle = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.navService.RotateRequest} returns this
 */
proto.navService.RotateRequest.prototype.setAngle = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.navService.RotateRequest.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.navService.RotateRequest} returns this
 */
proto.navService.RotateRequest.prototype.clearAngle = function() {
  return jspb.Message.setOneofField(this, 1, proto.navService.RotateRequest.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.navService.RotateRequest.prototype.hasAngle = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool rollback = 2;
 * @return {boolean}
 */
proto.navService.RotateRequest.prototype.getRollback = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.navService.RotateRequest} returns this
 */
proto.navService.RotateRequest.prototype.setRollback = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.navService.RotateRequest.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.navService.RotateRequest} returns this
 */
proto.navService.RotateRequest.prototype.clearRollback = function() {
  return jspb.Message.setOneofField(this, 2, proto.navService.RotateRequest.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.navService.RotateRequest.prototype.hasRollback = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.navService.RotateResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.navService.RotateResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.navService.RotateResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.navService.RotateResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    statusCode: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.navService.RotateResponse}
 */
proto.navService.RotateResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.navService.RotateResponse;
  return proto.navService.RotateResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.navService.RotateResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.navService.RotateResponse}
 */
proto.navService.RotateResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.navService.StatusCode} */ (reader.readEnum());
      msg.setStatusCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.navService.RotateResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.navService.RotateResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.navService.RotateResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.navService.RotateResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatusCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional StatusCode status_code = 1;
 * @return {!proto.navService.StatusCode}
 */
proto.navService.RotateResponse.prototype.getStatusCode = function() {
  return /** @type {!proto.navService.StatusCode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.navService.StatusCode} value
 * @return {!proto.navService.RotateResponse} returns this
 */
proto.navService.RotateResponse.prototype.setStatusCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.navService.OnNavEventChangeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.navService.OnNavEventChangeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.navService.OnNavEventChangeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.navService.OnNavEventChangeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.navService.OnNavEventChangeRequest}
 */
proto.navService.OnNavEventChangeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.navService.OnNavEventChangeRequest;
  return proto.navService.OnNavEventChangeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.navService.OnNavEventChangeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.navService.OnNavEventChangeRequest}
 */
proto.navService.OnNavEventChangeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.navService.OnNavEventChangeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.navService.OnNavEventChangeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.navService.OnNavEventChangeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.navService.OnNavEventChangeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.navService.MoveEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.navService.MoveEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.navService.MoveEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.navService.MoveEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    statusCode: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.navService.MoveEvent}
 */
proto.navService.MoveEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.navService.MoveEvent;
  return proto.navService.MoveEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.navService.MoveEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.navService.MoveEvent}
 */
proto.navService.MoveEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.navService.StatusCode} */ (reader.readEnum());
      msg.setStatusCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.navService.MoveEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.navService.MoveEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.navService.MoveEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.navService.MoveEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatusCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional StatusCode status_code = 1;
 * @return {!proto.navService.StatusCode}
 */
proto.navService.MoveEvent.prototype.getStatusCode = function() {
  return /** @type {!proto.navService.StatusCode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.navService.StatusCode} value
 * @return {!proto.navService.MoveEvent} returns this
 */
proto.navService.MoveEvent.prototype.setStatusCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.navService.NavEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.navService.NavEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.navService.NavEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.navService.NavEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    statusCode: jspb.Message.getFieldWithDefault(msg, 1, 0),
    navTarget: (f = msg.getNavTarget()) && proto.navService.NavTarget.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.navService.NavEvent}
 */
proto.navService.NavEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.navService.NavEvent;
  return proto.navService.NavEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.navService.NavEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.navService.NavEvent}
 */
proto.navService.NavEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.navService.StatusCode} */ (reader.readEnum());
      msg.setStatusCode(value);
      break;
    case 2:
      var value = new proto.navService.NavTarget;
      reader.readMessage(value,proto.navService.NavTarget.deserializeBinaryFromReader);
      msg.setNavTarget(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.navService.NavEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.navService.NavEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.navService.NavEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.navService.NavEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatusCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getNavTarget();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.navService.NavTarget.serializeBinaryToWriter
    );
  }
};


/**
 * optional StatusCode status_code = 1;
 * @return {!proto.navService.StatusCode}
 */
proto.navService.NavEvent.prototype.getStatusCode = function() {
  return /** @type {!proto.navService.StatusCode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.navService.StatusCode} value
 * @return {!proto.navService.NavEvent} returns this
 */
proto.navService.NavEvent.prototype.setStatusCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional NavTarget nav_target = 2;
 * @return {?proto.navService.NavTarget}
 */
proto.navService.NavEvent.prototype.getNavTarget = function() {
  return /** @type{?proto.navService.NavTarget} */ (
    jspb.Message.getWrapperField(this, proto.navService.NavTarget, 2));
};


/**
 * @param {?proto.navService.NavTarget|undefined} value
 * @return {!proto.navService.NavEvent} returns this
*/
proto.navService.NavEvent.prototype.setNavTarget = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.navService.NavEvent} returns this
 */
proto.navService.NavEvent.prototype.clearNavTarget = function() {
  return this.setNavTarget(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.navService.NavEvent.prototype.hasNavTarget = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.navService.AutoChargeEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.navService.AutoChargeEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.navService.AutoChargeEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.navService.AutoChargeEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    chargeStatusCode: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.navService.AutoChargeEvent}
 */
proto.navService.AutoChargeEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.navService.AutoChargeEvent;
  return proto.navService.AutoChargeEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.navService.AutoChargeEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.navService.AutoChargeEvent}
 */
proto.navService.AutoChargeEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.navService.ChargeStatusCode} */ (reader.readEnum());
      msg.setChargeStatusCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.navService.AutoChargeEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.navService.AutoChargeEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.navService.AutoChargeEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.navService.AutoChargeEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChargeStatusCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional ChargeStatusCode charge_status_code = 1;
 * @return {!proto.navService.ChargeStatusCode}
 */
proto.navService.AutoChargeEvent.prototype.getChargeStatusCode = function() {
  return /** @type {!proto.navService.ChargeStatusCode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.navService.ChargeStatusCode} value
 * @return {!proto.navService.AutoChargeEvent} returns this
 */
proto.navService.AutoChargeEvent.prototype.setChargeStatusCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.navService.RotateEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.navService.RotateEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.navService.RotateEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.navService.RotateEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    statusCode: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.navService.RotateEvent}
 */
proto.navService.RotateEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.navService.RotateEvent;
  return proto.navService.RotateEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.navService.RotateEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.navService.RotateEvent}
 */
proto.navService.RotateEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.navService.StatusCode} */ (reader.readEnum());
      msg.setStatusCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.navService.RotateEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.navService.RotateEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.navService.RotateEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.navService.RotateEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatusCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional StatusCode status_code = 1;
 * @return {!proto.navService.StatusCode}
 */
proto.navService.RotateEvent.prototype.getStatusCode = function() {
  return /** @type {!proto.navService.StatusCode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.navService.StatusCode} value
 * @return {!proto.navService.RotateEvent} returns this
 */
proto.navService.RotateEvent.prototype.setStatusCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.navService.OnNavEventChangeResponse.oneofGroups_ = [[2,3,4,5]];

/**
 * @enum {number}
 */
proto.navService.OnNavEventChangeResponse.ChangeOneofCase = {
  CHANGE_ONEOF_NOT_SET: 0,
  MOVE_EVENT: 2,
  NAV_EVENT: 3,
  ROTATE_EVENT: 4,
  AUTO_CHARGE_EVENT: 5
};

/**
 * @return {proto.navService.OnNavEventChangeResponse.ChangeOneofCase}
 */
proto.navService.OnNavEventChangeResponse.prototype.getChangeOneofCase = function() {
  return /** @type {proto.navService.OnNavEventChangeResponse.ChangeOneofCase} */(jspb.Message.computeOneofCase(this, proto.navService.OnNavEventChangeResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.navService.OnNavEventChangeResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.navService.OnNavEventChangeResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.navService.OnNavEventChangeResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.navService.OnNavEventChangeResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    navEventType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    moveEvent: (f = msg.getMoveEvent()) && proto.navService.MoveEvent.toObject(includeInstance, f),
    navEvent: (f = msg.getNavEvent()) && proto.navService.NavEvent.toObject(includeInstance, f),
    rotateEvent: (f = msg.getRotateEvent()) && proto.navService.RotateEvent.toObject(includeInstance, f),
    autoChargeEvent: (f = msg.getAutoChargeEvent()) && proto.navService.AutoChargeEvent.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.navService.OnNavEventChangeResponse}
 */
proto.navService.OnNavEventChangeResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.navService.OnNavEventChangeResponse;
  return proto.navService.OnNavEventChangeResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.navService.OnNavEventChangeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.navService.OnNavEventChangeResponse}
 */
proto.navService.OnNavEventChangeResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.navService.NavEventType} */ (reader.readEnum());
      msg.setNavEventType(value);
      break;
    case 2:
      var value = new proto.navService.MoveEvent;
      reader.readMessage(value,proto.navService.MoveEvent.deserializeBinaryFromReader);
      msg.setMoveEvent(value);
      break;
    case 3:
      var value = new proto.navService.NavEvent;
      reader.readMessage(value,proto.navService.NavEvent.deserializeBinaryFromReader);
      msg.setNavEvent(value);
      break;
    case 4:
      var value = new proto.navService.RotateEvent;
      reader.readMessage(value,proto.navService.RotateEvent.deserializeBinaryFromReader);
      msg.setRotateEvent(value);
      break;
    case 5:
      var value = new proto.navService.AutoChargeEvent;
      reader.readMessage(value,proto.navService.AutoChargeEvent.deserializeBinaryFromReader);
      msg.setAutoChargeEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.navService.OnNavEventChangeResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.navService.OnNavEventChangeResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.navService.OnNavEventChangeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.navService.OnNavEventChangeResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNavEventType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getMoveEvent();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.navService.MoveEvent.serializeBinaryToWriter
    );
  }
  f = message.getNavEvent();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.navService.NavEvent.serializeBinaryToWriter
    );
  }
  f = message.getRotateEvent();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.navService.RotateEvent.serializeBinaryToWriter
    );
  }
  f = message.getAutoChargeEvent();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.navService.AutoChargeEvent.serializeBinaryToWriter
    );
  }
};


/**
 * optional NavEventType nav_event_type = 1;
 * @return {!proto.navService.NavEventType}
 */
proto.navService.OnNavEventChangeResponse.prototype.getNavEventType = function() {
  return /** @type {!proto.navService.NavEventType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.navService.NavEventType} value
 * @return {!proto.navService.OnNavEventChangeResponse} returns this
 */
proto.navService.OnNavEventChangeResponse.prototype.setNavEventType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional MoveEvent move_event = 2;
 * @return {?proto.navService.MoveEvent}
 */
proto.navService.OnNavEventChangeResponse.prototype.getMoveEvent = function() {
  return /** @type{?proto.navService.MoveEvent} */ (
    jspb.Message.getWrapperField(this, proto.navService.MoveEvent, 2));
};


/**
 * @param {?proto.navService.MoveEvent|undefined} value
 * @return {!proto.navService.OnNavEventChangeResponse} returns this
*/
proto.navService.OnNavEventChangeResponse.prototype.setMoveEvent = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.navService.OnNavEventChangeResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.navService.OnNavEventChangeResponse} returns this
 */
proto.navService.OnNavEventChangeResponse.prototype.clearMoveEvent = function() {
  return this.setMoveEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.navService.OnNavEventChangeResponse.prototype.hasMoveEvent = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional NavEvent nav_event = 3;
 * @return {?proto.navService.NavEvent}
 */
proto.navService.OnNavEventChangeResponse.prototype.getNavEvent = function() {
  return /** @type{?proto.navService.NavEvent} */ (
    jspb.Message.getWrapperField(this, proto.navService.NavEvent, 3));
};


/**
 * @param {?proto.navService.NavEvent|undefined} value
 * @return {!proto.navService.OnNavEventChangeResponse} returns this
*/
proto.navService.OnNavEventChangeResponse.prototype.setNavEvent = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.navService.OnNavEventChangeResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.navService.OnNavEventChangeResponse} returns this
 */
proto.navService.OnNavEventChangeResponse.prototype.clearNavEvent = function() {
  return this.setNavEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.navService.OnNavEventChangeResponse.prototype.hasNavEvent = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional RotateEvent rotate_event = 4;
 * @return {?proto.navService.RotateEvent}
 */
proto.navService.OnNavEventChangeResponse.prototype.getRotateEvent = function() {
  return /** @type{?proto.navService.RotateEvent} */ (
    jspb.Message.getWrapperField(this, proto.navService.RotateEvent, 4));
};


/**
 * @param {?proto.navService.RotateEvent|undefined} value
 * @return {!proto.navService.OnNavEventChangeResponse} returns this
*/
proto.navService.OnNavEventChangeResponse.prototype.setRotateEvent = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.navService.OnNavEventChangeResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.navService.OnNavEventChangeResponse} returns this
 */
proto.navService.OnNavEventChangeResponse.prototype.clearRotateEvent = function() {
  return this.setRotateEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.navService.OnNavEventChangeResponse.prototype.hasRotateEvent = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional AutoChargeEvent auto_charge_event = 5;
 * @return {?proto.navService.AutoChargeEvent}
 */
proto.navService.OnNavEventChangeResponse.prototype.getAutoChargeEvent = function() {
  return /** @type{?proto.navService.AutoChargeEvent} */ (
    jspb.Message.getWrapperField(this, proto.navService.AutoChargeEvent, 5));
};


/**
 * @param {?proto.navService.AutoChargeEvent|undefined} value
 * @return {!proto.navService.OnNavEventChangeResponse} returns this
*/
proto.navService.OnNavEventChangeResponse.prototype.setAutoChargeEvent = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.navService.OnNavEventChangeResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.navService.OnNavEventChangeResponse} returns this
 */
proto.navService.OnNavEventChangeResponse.prototype.clearAutoChargeEvent = function() {
  return this.setAutoChargeEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.navService.OnNavEventChangeResponse.prototype.hasAutoChargeEvent = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.navService.Route.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.navService.Route.prototype.toObject = function(opt_includeInstance) {
  return proto.navService.Route.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.navService.Route} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.navService.Route.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    isActive: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    routePointsList: jspb.Message.toObjectList(msg.getRoutePointsList(),
    proto.navService.RoutePoint.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.navService.Route}
 */
proto.navService.Route.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.navService.Route;
  return proto.navService.Route.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.navService.Route} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.navService.Route}
 */
proto.navService.Route.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsActive(value);
      break;
    case 4:
      var value = new proto.navService.RoutePoint;
      reader.readMessage(value,proto.navService.RoutePoint.deserializeBinaryFromReader);
      msg.addRoutePoints(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.navService.Route.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.navService.Route.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.navService.Route} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.navService.Route.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getIsActive();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getRoutePointsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.navService.RoutePoint.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.navService.Route.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.navService.Route} returns this
 */
proto.navService.Route.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.navService.Route.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.navService.Route} returns this
 */
proto.navService.Route.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool is_active = 3;
 * @return {boolean}
 */
proto.navService.Route.prototype.getIsActive = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.navService.Route} returns this
 */
proto.navService.Route.prototype.setIsActive = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * repeated RoutePoint route_points = 4;
 * @return {!Array<!proto.navService.RoutePoint>}
 */
proto.navService.Route.prototype.getRoutePointsList = function() {
  return /** @type{!Array<!proto.navService.RoutePoint>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.navService.RoutePoint, 4));
};


/**
 * @param {!Array<!proto.navService.RoutePoint>} value
 * @return {!proto.navService.Route} returns this
*/
proto.navService.Route.prototype.setRoutePointsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.navService.RoutePoint=} opt_value
 * @param {number=} opt_index
 * @return {!proto.navService.RoutePoint}
 */
proto.navService.Route.prototype.addRoutePoints = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.navService.RoutePoint, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.navService.Route} returns this
 */
proto.navService.Route.prototype.clearRoutePointsList = function() {
  return this.setRoutePointsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.navService.RoutePoint.prototype.toObject = function(opt_includeInstance) {
  return proto.navService.RoutePoint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.navService.RoutePoint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.navService.RoutePoint.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    rotate: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.navService.RoutePoint}
 */
proto.navService.RoutePoint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.navService.RoutePoint;
  return proto.navService.RoutePoint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.navService.RoutePoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.navService.RoutePoint}
 */
proto.navService.RoutePoint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRotate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.navService.RoutePoint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.navService.RoutePoint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.navService.RoutePoint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.navService.RoutePoint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRotate();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.navService.RoutePoint.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.navService.RoutePoint} returns this
 */
proto.navService.RoutePoint.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 rotate = 2;
 * @return {number}
 */
proto.navService.RoutePoint.prototype.getRotate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.navService.RoutePoint} returns this
 */
proto.navService.RoutePoint.prototype.setRotate = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.navService.NewRouteRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.navService.NewRouteRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.navService.NewRouteRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.navService.NewRouteRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    route: (f = msg.getRoute()) && proto.navService.Route.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.navService.NewRouteRequest}
 */
proto.navService.NewRouteRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.navService.NewRouteRequest;
  return proto.navService.NewRouteRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.navService.NewRouteRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.navService.NewRouteRequest}
 */
proto.navService.NewRouteRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.navService.Route;
      reader.readMessage(value,proto.navService.Route.deserializeBinaryFromReader);
      msg.setRoute(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.navService.NewRouteRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.navService.NewRouteRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.navService.NewRouteRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.navService.NewRouteRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoute();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.navService.Route.serializeBinaryToWriter
    );
  }
};


/**
 * optional Route route = 1;
 * @return {?proto.navService.Route}
 */
proto.navService.NewRouteRequest.prototype.getRoute = function() {
  return /** @type{?proto.navService.Route} */ (
    jspb.Message.getWrapperField(this, proto.navService.Route, 1));
};


/**
 * @param {?proto.navService.Route|undefined} value
 * @return {!proto.navService.NewRouteRequest} returns this
*/
proto.navService.NewRouteRequest.prototype.setRoute = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.navService.NewRouteRequest} returns this
 */
proto.navService.NewRouteRequest.prototype.clearRoute = function() {
  return this.setRoute(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.navService.NewRouteRequest.prototype.hasRoute = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.navService.NewRouteResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.navService.NewRouteResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.navService.NewRouteResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.navService.NewRouteResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    route: (f = msg.getRoute()) && proto.navService.Route.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.navService.NewRouteResponse}
 */
proto.navService.NewRouteResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.navService.NewRouteResponse;
  return proto.navService.NewRouteResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.navService.NewRouteResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.navService.NewRouteResponse}
 */
proto.navService.NewRouteResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.navService.Route;
      reader.readMessage(value,proto.navService.Route.deserializeBinaryFromReader);
      msg.setRoute(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.navService.NewRouteResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.navService.NewRouteResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.navService.NewRouteResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.navService.NewRouteResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoute();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.navService.Route.serializeBinaryToWriter
    );
  }
};


/**
 * optional Route route = 1;
 * @return {?proto.navService.Route}
 */
proto.navService.NewRouteResponse.prototype.getRoute = function() {
  return /** @type{?proto.navService.Route} */ (
    jspb.Message.getWrapperField(this, proto.navService.Route, 1));
};


/**
 * @param {?proto.navService.Route|undefined} value
 * @return {!proto.navService.NewRouteResponse} returns this
*/
proto.navService.NewRouteResponse.prototype.setRoute = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.navService.NewRouteResponse} returns this
 */
proto.navService.NewRouteResponse.prototype.clearRoute = function() {
  return this.setRoute(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.navService.NewRouteResponse.prototype.hasRoute = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.navService.ListRoutesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.navService.ListRoutesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.navService.ListRoutesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.navService.ListRoutesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.navService.ListRoutesRequest}
 */
proto.navService.ListRoutesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.navService.ListRoutesRequest;
  return proto.navService.ListRoutesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.navService.ListRoutesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.navService.ListRoutesRequest}
 */
proto.navService.ListRoutesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.navService.ListRoutesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.navService.ListRoutesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.navService.ListRoutesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.navService.ListRoutesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.navService.ListRoutesResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.navService.ListRoutesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.navService.ListRoutesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.navService.ListRoutesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.navService.ListRoutesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    routesList: jspb.Message.toObjectList(msg.getRoutesList(),
    proto.navService.Route.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.navService.ListRoutesResponse}
 */
proto.navService.ListRoutesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.navService.ListRoutesResponse;
  return proto.navService.ListRoutesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.navService.ListRoutesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.navService.ListRoutesResponse}
 */
proto.navService.ListRoutesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.navService.Route;
      reader.readMessage(value,proto.navService.Route.deserializeBinaryFromReader);
      msg.addRoutes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.navService.ListRoutesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.navService.ListRoutesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.navService.ListRoutesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.navService.ListRoutesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoutesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.navService.Route.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Route routes = 1;
 * @return {!Array<!proto.navService.Route>}
 */
proto.navService.ListRoutesResponse.prototype.getRoutesList = function() {
  return /** @type{!Array<!proto.navService.Route>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.navService.Route, 1));
};


/**
 * @param {!Array<!proto.navService.Route>} value
 * @return {!proto.navService.ListRoutesResponse} returns this
*/
proto.navService.ListRoutesResponse.prototype.setRoutesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.navService.Route=} opt_value
 * @param {number=} opt_index
 * @return {!proto.navService.Route}
 */
proto.navService.ListRoutesResponse.prototype.addRoutes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.navService.Route, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.navService.ListRoutesResponse} returns this
 */
proto.navService.ListRoutesResponse.prototype.clearRoutesList = function() {
  return this.setRoutesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.navService.GetRouteRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.navService.GetRouteRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.navService.GetRouteRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.navService.GetRouteRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.navService.GetRouteRequest}
 */
proto.navService.GetRouteRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.navService.GetRouteRequest;
  return proto.navService.GetRouteRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.navService.GetRouteRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.navService.GetRouteRequest}
 */
proto.navService.GetRouteRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.navService.GetRouteRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.navService.GetRouteRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.navService.GetRouteRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.navService.GetRouteRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.navService.GetRouteRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.navService.GetRouteRequest} returns this
 */
proto.navService.GetRouteRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.navService.GetRouteResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.navService.GetRouteResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.navService.GetRouteResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.navService.GetRouteResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    route: (f = msg.getRoute()) && proto.navService.Route.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.navService.GetRouteResponse}
 */
proto.navService.GetRouteResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.navService.GetRouteResponse;
  return proto.navService.GetRouteResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.navService.GetRouteResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.navService.GetRouteResponse}
 */
proto.navService.GetRouteResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.navService.Route;
      reader.readMessage(value,proto.navService.Route.deserializeBinaryFromReader);
      msg.setRoute(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.navService.GetRouteResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.navService.GetRouteResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.navService.GetRouteResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.navService.GetRouteResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoute();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.navService.Route.serializeBinaryToWriter
    );
  }
};


/**
 * optional Route route = 1;
 * @return {?proto.navService.Route}
 */
proto.navService.GetRouteResponse.prototype.getRoute = function() {
  return /** @type{?proto.navService.Route} */ (
    jspb.Message.getWrapperField(this, proto.navService.Route, 1));
};


/**
 * @param {?proto.navService.Route|undefined} value
 * @return {!proto.navService.GetRouteResponse} returns this
*/
proto.navService.GetRouteResponse.prototype.setRoute = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.navService.GetRouteResponse} returns this
 */
proto.navService.GetRouteResponse.prototype.clearRoute = function() {
  return this.setRoute(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.navService.GetRouteResponse.prototype.hasRoute = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.navService.UpdateRouteRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.navService.UpdateRouteRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.navService.UpdateRouteRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.navService.UpdateRouteRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    route: (f = msg.getRoute()) && proto.navService.Route.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.navService.UpdateRouteRequest}
 */
proto.navService.UpdateRouteRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.navService.UpdateRouteRequest;
  return proto.navService.UpdateRouteRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.navService.UpdateRouteRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.navService.UpdateRouteRequest}
 */
proto.navService.UpdateRouteRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.navService.Route;
      reader.readMessage(value,proto.navService.Route.deserializeBinaryFromReader);
      msg.setRoute(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.navService.UpdateRouteRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.navService.UpdateRouteRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.navService.UpdateRouteRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.navService.UpdateRouteRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoute();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.navService.Route.serializeBinaryToWriter
    );
  }
};


/**
 * optional Route route = 1;
 * @return {?proto.navService.Route}
 */
proto.navService.UpdateRouteRequest.prototype.getRoute = function() {
  return /** @type{?proto.navService.Route} */ (
    jspb.Message.getWrapperField(this, proto.navService.Route, 1));
};


/**
 * @param {?proto.navService.Route|undefined} value
 * @return {!proto.navService.UpdateRouteRequest} returns this
*/
proto.navService.UpdateRouteRequest.prototype.setRoute = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.navService.UpdateRouteRequest} returns this
 */
proto.navService.UpdateRouteRequest.prototype.clearRoute = function() {
  return this.setRoute(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.navService.UpdateRouteRequest.prototype.hasRoute = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.navService.UpdateRouteResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.navService.UpdateRouteResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.navService.UpdateRouteResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.navService.UpdateRouteResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    route: (f = msg.getRoute()) && proto.navService.Route.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.navService.UpdateRouteResponse}
 */
proto.navService.UpdateRouteResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.navService.UpdateRouteResponse;
  return proto.navService.UpdateRouteResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.navService.UpdateRouteResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.navService.UpdateRouteResponse}
 */
proto.navService.UpdateRouteResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.navService.Route;
      reader.readMessage(value,proto.navService.Route.deserializeBinaryFromReader);
      msg.setRoute(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.navService.UpdateRouteResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.navService.UpdateRouteResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.navService.UpdateRouteResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.navService.UpdateRouteResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoute();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.navService.Route.serializeBinaryToWriter
    );
  }
};


/**
 * optional Route route = 1;
 * @return {?proto.navService.Route}
 */
proto.navService.UpdateRouteResponse.prototype.getRoute = function() {
  return /** @type{?proto.navService.Route} */ (
    jspb.Message.getWrapperField(this, proto.navService.Route, 1));
};


/**
 * @param {?proto.navService.Route|undefined} value
 * @return {!proto.navService.UpdateRouteResponse} returns this
*/
proto.navService.UpdateRouteResponse.prototype.setRoute = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.navService.UpdateRouteResponse} returns this
 */
proto.navService.UpdateRouteResponse.prototype.clearRoute = function() {
  return this.setRoute(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.navService.UpdateRouteResponse.prototype.hasRoute = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.navService.DeleteRoutesRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.navService.DeleteRoutesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.navService.DeleteRoutesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.navService.DeleteRoutesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.navService.DeleteRoutesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    routesIdList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.navService.DeleteRoutesRequest}
 */
proto.navService.DeleteRoutesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.navService.DeleteRoutesRequest;
  return proto.navService.DeleteRoutesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.navService.DeleteRoutesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.navService.DeleteRoutesRequest}
 */
proto.navService.DeleteRoutesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addRoutesId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.navService.DeleteRoutesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.navService.DeleteRoutesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.navService.DeleteRoutesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.navService.DeleteRoutesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoutesIdList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string routes_id = 1;
 * @return {!Array<string>}
 */
proto.navService.DeleteRoutesRequest.prototype.getRoutesIdList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.navService.DeleteRoutesRequest} returns this
 */
proto.navService.DeleteRoutesRequest.prototype.setRoutesIdList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.navService.DeleteRoutesRequest} returns this
 */
proto.navService.DeleteRoutesRequest.prototype.addRoutesId = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.navService.DeleteRoutesRequest} returns this
 */
proto.navService.DeleteRoutesRequest.prototype.clearRoutesIdList = function() {
  return this.setRoutesIdList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.navService.DeleteRoutesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.navService.DeleteRoutesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.navService.DeleteRoutesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.navService.DeleteRoutesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.navService.DeleteRoutesResponse}
 */
proto.navService.DeleteRoutesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.navService.DeleteRoutesResponse;
  return proto.navService.DeleteRoutesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.navService.DeleteRoutesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.navService.DeleteRoutesResponse}
 */
proto.navService.DeleteRoutesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.navService.DeleteRoutesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.navService.DeleteRoutesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.navService.DeleteRoutesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.navService.DeleteRoutesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * @enum {number}
 */
proto.navService.StatusCode = {
  UNKNOWN: 0,
  STOPPED: 1,
  MOVING: 2,
  PREPARING: 3,
  CANCEL: 4,
  RELEASED: 5,
  ERR_OBSTACLE: 10,
  ERR_NOT_READY: 11,
  ERR_MOTOR_FAIL: 12,
  ERR_WRONG_TARGET: 13,
  REJ_MOVING: 20,
  REJ_NAVING: 21,
  REJ_CHARGING: 22,
  REJ_ROTATING: 23
};

/**
 * @enum {number}
 */
proto.navService.MoveDirection = {
  RELEASE: 0,
  FORWARD: 1,
  BACKWARD: 2,
  LEFT: 3,
  RIGHT: 4,
  LEFT_FORWARD: 5,
  RIGHT_FORWARD: 6,
  LEFT_BACKWARD: 7,
  RIGHT_BACKWARD: 8
};

/**
 * @enum {number}
 */
proto.navService.RoamingType = {
  ROAMING_TYPE_CONTINUE: 0,
  ROAMING_TYPE_ORDER: 1,
  ROAMING_TYPE_RANDOM: 2
};

/**
 * @enum {number}
 */
proto.navService.ChargeStatusCode = {
  CHARGE_STATUS_UNKNOWN: 0,
  CHARGE_STATUS_PREPARING: 1,
  CHARGE_STATUS_RELEASED: 2,
  CHARGE_STATUS_CONNECTING: 3,
  CHARGE_STATUS_CHARGING: 4,
  CHARGE_STATUS_DISCONNECTING: 5,
  CHARGE_CONNECT_FAIL: 6,
  CHARGE_STATUS_NAV_OBSTACLE: 7
};

/**
 * @enum {number}
 */
proto.navService.NavEventType = {
  NAV_EVENT_REVERSED: 0,
  MOVE_EVENT: 1,
  NAV_EVENT: 2,
  AUTO_CHARGE_EVENT: 3,
  ROTATE_EVENT: 4
};

goog.object.extend(exports, proto.navService);
