// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: escpos.proto
#ifndef GRPC_escpos_2eproto__INCLUDED
#define GRPC_escpos_2eproto__INCLUDED

#include "escpos.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc_impl {
class Channel;
class CompletionQueue;
class ServerCompletionQueue;
}  // namespace grpc_impl

namespace grpc {
namespace experimental {
template <typename RequestT, typename ResponseT>
class MessageAllocator;
}  // namespace experimental
}  // namespace grpc_impl

namespace grpc {
class ServerContext;
}  // namespace grpc

namespace escposService {

class EscPosService final {
 public:
  static constexpr char const* service_full_name() {
    return "escposService.EscPosService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // 打印bytes数据
    // 打印模板与打印对象方式不满足业务需求
    // 或希望接入其它已外部业务实现的打印组件时, 可通过此方法直接
    // 传入打印内容
    virtual ::grpc::Status PrintRaw(::grpc::ClientContext* context, const ::escposService::PrintRawRequest& request, ::escposService::PrintRawResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::escposService::PrintRawResponse>> AsyncPrintRaw(::grpc::ClientContext* context, const ::escposService::PrintRawRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::escposService::PrintRawResponse>>(AsyncPrintRawRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::escposService::PrintRawResponse>> PrepareAsyncPrintRaw(::grpc::ClientContext* context, const ::escposService::PrintRawRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::escposService::PrintRawResponse>>(PrepareAsyncPrintRawRaw(context, request, cq));
    }
    // 打印对象
    virtual ::grpc::Status PrintElements(::grpc::ClientContext* context, const ::escposService::PrintElementsRequest& request, ::escposService::PrintElementsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::escposService::PrintElementsResponse>> AsyncPrintElements(::grpc::ClientContext* context, const ::escposService::PrintElementsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::escposService::PrintElementsResponse>>(AsyncPrintElementsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::escposService::PrintElementsResponse>> PrepareAsyncPrintElements(::grpc::ClientContext* context, const ::escposService::PrintElementsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::escposService::PrintElementsResponse>>(PrepareAsyncPrintElementsRaw(context, request, cq));
    }
    // 打印预设的html模板内容
    virtual ::grpc::Status PrintHtmlTemplate(::grpc::ClientContext* context, const ::escposService::PrintHtmlTemplateRequest& request, ::escposService::PrintHtmlTemplateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::escposService::PrintHtmlTemplateResponse>> AsyncPrintHtmlTemplate(::grpc::ClientContext* context, const ::escposService::PrintHtmlTemplateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::escposService::PrintHtmlTemplateResponse>>(AsyncPrintHtmlTemplateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::escposService::PrintHtmlTemplateResponse>> PrepareAsyncPrintHtmlTemplate(::grpc::ClientContext* context, const ::escposService::PrintHtmlTemplateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::escposService::PrintHtmlTemplateResponse>>(PrepareAsyncPrintHtmlTemplateRaw(context, request, cq));
    }
    // 创建html模板
    virtual ::grpc::Status NewHtmlTemplate(::grpc::ClientContext* context, const ::escposService::NewHtmlTemplateRequest& request, ::escposService::NewHtmlTemplateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::escposService::NewHtmlTemplateResponse>> AsyncNewHtmlTemplate(::grpc::ClientContext* context, const ::escposService::NewHtmlTemplateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::escposService::NewHtmlTemplateResponse>>(AsyncNewHtmlTemplateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::escposService::NewHtmlTemplateResponse>> PrepareAsyncNewHtmlTemplate(::grpc::ClientContext* context, const ::escposService::NewHtmlTemplateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::escposService::NewHtmlTemplateResponse>>(PrepareAsyncNewHtmlTemplateRaw(context, request, cq));
    }
    // 获取html模板列表
    virtual ::grpc::Status ListHtmlTemplates(::grpc::ClientContext* context, const ::escposService::ListHtmlTemplatesRequest& request, ::escposService::ListHtmlTemplatesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::escposService::ListHtmlTemplatesResponse>> AsyncListHtmlTemplates(::grpc::ClientContext* context, const ::escposService::ListHtmlTemplatesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::escposService::ListHtmlTemplatesResponse>>(AsyncListHtmlTemplatesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::escposService::ListHtmlTemplatesResponse>> PrepareAsyncListHtmlTemplates(::grpc::ClientContext* context, const ::escposService::ListHtmlTemplatesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::escposService::ListHtmlTemplatesResponse>>(PrepareAsyncListHtmlTemplatesRaw(context, request, cq));
    }
    // 获取指定html模板内容
    virtual ::grpc::Status GetHtmlTemplate(::grpc::ClientContext* context, const ::escposService::GetHtmlTemplateRequest& request, ::escposService::GetHtmlTemplateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::escposService::GetHtmlTemplateResponse>> AsyncGetHtmlTemplate(::grpc::ClientContext* context, const ::escposService::GetHtmlTemplateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::escposService::GetHtmlTemplateResponse>>(AsyncGetHtmlTemplateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::escposService::GetHtmlTemplateResponse>> PrepareAsyncGetHtmlTemplate(::grpc::ClientContext* context, const ::escposService::GetHtmlTemplateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::escposService::GetHtmlTemplateResponse>>(PrepareAsyncGetHtmlTemplateRaw(context, request, cq));
    }
    // 更新html模板
    virtual ::grpc::Status UpdateHtmlTemplate(::grpc::ClientContext* context, const ::escposService::UpdateHtmlTemplateRequest& request, ::escposService::UpdateHtmlTemplateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::escposService::UpdateHtmlTemplateResponse>> AsyncUpdateHtmlTemplate(::grpc::ClientContext* context, const ::escposService::UpdateHtmlTemplateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::escposService::UpdateHtmlTemplateResponse>>(AsyncUpdateHtmlTemplateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::escposService::UpdateHtmlTemplateResponse>> PrepareAsyncUpdateHtmlTemplate(::grpc::ClientContext* context, const ::escposService::UpdateHtmlTemplateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::escposService::UpdateHtmlTemplateResponse>>(PrepareAsyncUpdateHtmlTemplateRaw(context, request, cq));
    }
    // 删除html模板
    virtual ::grpc::Status DeleteHtmlTemplates(::grpc::ClientContext* context, const ::escposService::DeleteHtmlTemplatesRequest& request, ::escposService::DeleteHtmlTemplatesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::escposService::DeleteHtmlTemplatesResponse>> AsyncDeleteHtmlTemplates(::grpc::ClientContext* context, const ::escposService::DeleteHtmlTemplatesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::escposService::DeleteHtmlTemplatesResponse>>(AsyncDeleteHtmlTemplatesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::escposService::DeleteHtmlTemplatesResponse>> PrepareAsyncDeleteHtmlTemplates(::grpc::ClientContext* context, const ::escposService::DeleteHtmlTemplatesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::escposService::DeleteHtmlTemplatesResponse>>(PrepareAsyncDeleteHtmlTemplatesRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // 打印bytes数据
      // 打印模板与打印对象方式不满足业务需求
      // 或希望接入其它已外部业务实现的打印组件时, 可通过此方法直接
      // 传入打印内容
      virtual void PrintRaw(::grpc::ClientContext* context, const ::escposService::PrintRawRequest* request, ::escposService::PrintRawResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PrintRaw(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::escposService::PrintRawResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PrintRaw(::grpc::ClientContext* context, const ::escposService::PrintRawRequest* request, ::escposService::PrintRawResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void PrintRaw(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::escposService::PrintRawResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // 打印对象
      virtual void PrintElements(::grpc::ClientContext* context, const ::escposService::PrintElementsRequest* request, ::escposService::PrintElementsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PrintElements(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::escposService::PrintElementsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PrintElements(::grpc::ClientContext* context, const ::escposService::PrintElementsRequest* request, ::escposService::PrintElementsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void PrintElements(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::escposService::PrintElementsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // 打印预设的html模板内容
      virtual void PrintHtmlTemplate(::grpc::ClientContext* context, const ::escposService::PrintHtmlTemplateRequest* request, ::escposService::PrintHtmlTemplateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PrintHtmlTemplate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::escposService::PrintHtmlTemplateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PrintHtmlTemplate(::grpc::ClientContext* context, const ::escposService::PrintHtmlTemplateRequest* request, ::escposService::PrintHtmlTemplateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void PrintHtmlTemplate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::escposService::PrintHtmlTemplateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // 创建html模板
      virtual void NewHtmlTemplate(::grpc::ClientContext* context, const ::escposService::NewHtmlTemplateRequest* request, ::escposService::NewHtmlTemplateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void NewHtmlTemplate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::escposService::NewHtmlTemplateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void NewHtmlTemplate(::grpc::ClientContext* context, const ::escposService::NewHtmlTemplateRequest* request, ::escposService::NewHtmlTemplateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void NewHtmlTemplate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::escposService::NewHtmlTemplateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // 获取html模板列表
      virtual void ListHtmlTemplates(::grpc::ClientContext* context, const ::escposService::ListHtmlTemplatesRequest* request, ::escposService::ListHtmlTemplatesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListHtmlTemplates(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::escposService::ListHtmlTemplatesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListHtmlTemplates(::grpc::ClientContext* context, const ::escposService::ListHtmlTemplatesRequest* request, ::escposService::ListHtmlTemplatesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void ListHtmlTemplates(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::escposService::ListHtmlTemplatesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // 获取指定html模板内容
      virtual void GetHtmlTemplate(::grpc::ClientContext* context, const ::escposService::GetHtmlTemplateRequest* request, ::escposService::GetHtmlTemplateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetHtmlTemplate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::escposService::GetHtmlTemplateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetHtmlTemplate(::grpc::ClientContext* context, const ::escposService::GetHtmlTemplateRequest* request, ::escposService::GetHtmlTemplateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetHtmlTemplate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::escposService::GetHtmlTemplateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // 更新html模板
      virtual void UpdateHtmlTemplate(::grpc::ClientContext* context, const ::escposService::UpdateHtmlTemplateRequest* request, ::escposService::UpdateHtmlTemplateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateHtmlTemplate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::escposService::UpdateHtmlTemplateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateHtmlTemplate(::grpc::ClientContext* context, const ::escposService::UpdateHtmlTemplateRequest* request, ::escposService::UpdateHtmlTemplateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void UpdateHtmlTemplate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::escposService::UpdateHtmlTemplateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // 删除html模板
      virtual void DeleteHtmlTemplates(::grpc::ClientContext* context, const ::escposService::DeleteHtmlTemplatesRequest* request, ::escposService::DeleteHtmlTemplatesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteHtmlTemplates(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::escposService::DeleteHtmlTemplatesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteHtmlTemplates(::grpc::ClientContext* context, const ::escposService::DeleteHtmlTemplatesRequest* request, ::escposService::DeleteHtmlTemplatesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void DeleteHtmlTemplates(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::escposService::DeleteHtmlTemplatesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::escposService::PrintRawResponse>* AsyncPrintRawRaw(::grpc::ClientContext* context, const ::escposService::PrintRawRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::escposService::PrintRawResponse>* PrepareAsyncPrintRawRaw(::grpc::ClientContext* context, const ::escposService::PrintRawRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::escposService::PrintElementsResponse>* AsyncPrintElementsRaw(::grpc::ClientContext* context, const ::escposService::PrintElementsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::escposService::PrintElementsResponse>* PrepareAsyncPrintElementsRaw(::grpc::ClientContext* context, const ::escposService::PrintElementsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::escposService::PrintHtmlTemplateResponse>* AsyncPrintHtmlTemplateRaw(::grpc::ClientContext* context, const ::escposService::PrintHtmlTemplateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::escposService::PrintHtmlTemplateResponse>* PrepareAsyncPrintHtmlTemplateRaw(::grpc::ClientContext* context, const ::escposService::PrintHtmlTemplateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::escposService::NewHtmlTemplateResponse>* AsyncNewHtmlTemplateRaw(::grpc::ClientContext* context, const ::escposService::NewHtmlTemplateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::escposService::NewHtmlTemplateResponse>* PrepareAsyncNewHtmlTemplateRaw(::grpc::ClientContext* context, const ::escposService::NewHtmlTemplateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::escposService::ListHtmlTemplatesResponse>* AsyncListHtmlTemplatesRaw(::grpc::ClientContext* context, const ::escposService::ListHtmlTemplatesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::escposService::ListHtmlTemplatesResponse>* PrepareAsyncListHtmlTemplatesRaw(::grpc::ClientContext* context, const ::escposService::ListHtmlTemplatesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::escposService::GetHtmlTemplateResponse>* AsyncGetHtmlTemplateRaw(::grpc::ClientContext* context, const ::escposService::GetHtmlTemplateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::escposService::GetHtmlTemplateResponse>* PrepareAsyncGetHtmlTemplateRaw(::grpc::ClientContext* context, const ::escposService::GetHtmlTemplateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::escposService::UpdateHtmlTemplateResponse>* AsyncUpdateHtmlTemplateRaw(::grpc::ClientContext* context, const ::escposService::UpdateHtmlTemplateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::escposService::UpdateHtmlTemplateResponse>* PrepareAsyncUpdateHtmlTemplateRaw(::grpc::ClientContext* context, const ::escposService::UpdateHtmlTemplateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::escposService::DeleteHtmlTemplatesResponse>* AsyncDeleteHtmlTemplatesRaw(::grpc::ClientContext* context, const ::escposService::DeleteHtmlTemplatesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::escposService::DeleteHtmlTemplatesResponse>* PrepareAsyncDeleteHtmlTemplatesRaw(::grpc::ClientContext* context, const ::escposService::DeleteHtmlTemplatesRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status PrintRaw(::grpc::ClientContext* context, const ::escposService::PrintRawRequest& request, ::escposService::PrintRawResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::escposService::PrintRawResponse>> AsyncPrintRaw(::grpc::ClientContext* context, const ::escposService::PrintRawRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::escposService::PrintRawResponse>>(AsyncPrintRawRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::escposService::PrintRawResponse>> PrepareAsyncPrintRaw(::grpc::ClientContext* context, const ::escposService::PrintRawRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::escposService::PrintRawResponse>>(PrepareAsyncPrintRawRaw(context, request, cq));
    }
    ::grpc::Status PrintElements(::grpc::ClientContext* context, const ::escposService::PrintElementsRequest& request, ::escposService::PrintElementsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::escposService::PrintElementsResponse>> AsyncPrintElements(::grpc::ClientContext* context, const ::escposService::PrintElementsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::escposService::PrintElementsResponse>>(AsyncPrintElementsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::escposService::PrintElementsResponse>> PrepareAsyncPrintElements(::grpc::ClientContext* context, const ::escposService::PrintElementsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::escposService::PrintElementsResponse>>(PrepareAsyncPrintElementsRaw(context, request, cq));
    }
    ::grpc::Status PrintHtmlTemplate(::grpc::ClientContext* context, const ::escposService::PrintHtmlTemplateRequest& request, ::escposService::PrintHtmlTemplateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::escposService::PrintHtmlTemplateResponse>> AsyncPrintHtmlTemplate(::grpc::ClientContext* context, const ::escposService::PrintHtmlTemplateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::escposService::PrintHtmlTemplateResponse>>(AsyncPrintHtmlTemplateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::escposService::PrintHtmlTemplateResponse>> PrepareAsyncPrintHtmlTemplate(::grpc::ClientContext* context, const ::escposService::PrintHtmlTemplateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::escposService::PrintHtmlTemplateResponse>>(PrepareAsyncPrintHtmlTemplateRaw(context, request, cq));
    }
    ::grpc::Status NewHtmlTemplate(::grpc::ClientContext* context, const ::escposService::NewHtmlTemplateRequest& request, ::escposService::NewHtmlTemplateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::escposService::NewHtmlTemplateResponse>> AsyncNewHtmlTemplate(::grpc::ClientContext* context, const ::escposService::NewHtmlTemplateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::escposService::NewHtmlTemplateResponse>>(AsyncNewHtmlTemplateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::escposService::NewHtmlTemplateResponse>> PrepareAsyncNewHtmlTemplate(::grpc::ClientContext* context, const ::escposService::NewHtmlTemplateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::escposService::NewHtmlTemplateResponse>>(PrepareAsyncNewHtmlTemplateRaw(context, request, cq));
    }
    ::grpc::Status ListHtmlTemplates(::grpc::ClientContext* context, const ::escposService::ListHtmlTemplatesRequest& request, ::escposService::ListHtmlTemplatesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::escposService::ListHtmlTemplatesResponse>> AsyncListHtmlTemplates(::grpc::ClientContext* context, const ::escposService::ListHtmlTemplatesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::escposService::ListHtmlTemplatesResponse>>(AsyncListHtmlTemplatesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::escposService::ListHtmlTemplatesResponse>> PrepareAsyncListHtmlTemplates(::grpc::ClientContext* context, const ::escposService::ListHtmlTemplatesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::escposService::ListHtmlTemplatesResponse>>(PrepareAsyncListHtmlTemplatesRaw(context, request, cq));
    }
    ::grpc::Status GetHtmlTemplate(::grpc::ClientContext* context, const ::escposService::GetHtmlTemplateRequest& request, ::escposService::GetHtmlTemplateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::escposService::GetHtmlTemplateResponse>> AsyncGetHtmlTemplate(::grpc::ClientContext* context, const ::escposService::GetHtmlTemplateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::escposService::GetHtmlTemplateResponse>>(AsyncGetHtmlTemplateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::escposService::GetHtmlTemplateResponse>> PrepareAsyncGetHtmlTemplate(::grpc::ClientContext* context, const ::escposService::GetHtmlTemplateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::escposService::GetHtmlTemplateResponse>>(PrepareAsyncGetHtmlTemplateRaw(context, request, cq));
    }
    ::grpc::Status UpdateHtmlTemplate(::grpc::ClientContext* context, const ::escposService::UpdateHtmlTemplateRequest& request, ::escposService::UpdateHtmlTemplateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::escposService::UpdateHtmlTemplateResponse>> AsyncUpdateHtmlTemplate(::grpc::ClientContext* context, const ::escposService::UpdateHtmlTemplateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::escposService::UpdateHtmlTemplateResponse>>(AsyncUpdateHtmlTemplateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::escposService::UpdateHtmlTemplateResponse>> PrepareAsyncUpdateHtmlTemplate(::grpc::ClientContext* context, const ::escposService::UpdateHtmlTemplateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::escposService::UpdateHtmlTemplateResponse>>(PrepareAsyncUpdateHtmlTemplateRaw(context, request, cq));
    }
    ::grpc::Status DeleteHtmlTemplates(::grpc::ClientContext* context, const ::escposService::DeleteHtmlTemplatesRequest& request, ::escposService::DeleteHtmlTemplatesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::escposService::DeleteHtmlTemplatesResponse>> AsyncDeleteHtmlTemplates(::grpc::ClientContext* context, const ::escposService::DeleteHtmlTemplatesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::escposService::DeleteHtmlTemplatesResponse>>(AsyncDeleteHtmlTemplatesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::escposService::DeleteHtmlTemplatesResponse>> PrepareAsyncDeleteHtmlTemplates(::grpc::ClientContext* context, const ::escposService::DeleteHtmlTemplatesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::escposService::DeleteHtmlTemplatesResponse>>(PrepareAsyncDeleteHtmlTemplatesRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void PrintRaw(::grpc::ClientContext* context, const ::escposService::PrintRawRequest* request, ::escposService::PrintRawResponse* response, std::function<void(::grpc::Status)>) override;
      void PrintRaw(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::escposService::PrintRawResponse* response, std::function<void(::grpc::Status)>) override;
      void PrintRaw(::grpc::ClientContext* context, const ::escposService::PrintRawRequest* request, ::escposService::PrintRawResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void PrintRaw(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::escposService::PrintRawResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void PrintElements(::grpc::ClientContext* context, const ::escposService::PrintElementsRequest* request, ::escposService::PrintElementsResponse* response, std::function<void(::grpc::Status)>) override;
      void PrintElements(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::escposService::PrintElementsResponse* response, std::function<void(::grpc::Status)>) override;
      void PrintElements(::grpc::ClientContext* context, const ::escposService::PrintElementsRequest* request, ::escposService::PrintElementsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void PrintElements(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::escposService::PrintElementsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void PrintHtmlTemplate(::grpc::ClientContext* context, const ::escposService::PrintHtmlTemplateRequest* request, ::escposService::PrintHtmlTemplateResponse* response, std::function<void(::grpc::Status)>) override;
      void PrintHtmlTemplate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::escposService::PrintHtmlTemplateResponse* response, std::function<void(::grpc::Status)>) override;
      void PrintHtmlTemplate(::grpc::ClientContext* context, const ::escposService::PrintHtmlTemplateRequest* request, ::escposService::PrintHtmlTemplateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void PrintHtmlTemplate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::escposService::PrintHtmlTemplateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void NewHtmlTemplate(::grpc::ClientContext* context, const ::escposService::NewHtmlTemplateRequest* request, ::escposService::NewHtmlTemplateResponse* response, std::function<void(::grpc::Status)>) override;
      void NewHtmlTemplate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::escposService::NewHtmlTemplateResponse* response, std::function<void(::grpc::Status)>) override;
      void NewHtmlTemplate(::grpc::ClientContext* context, const ::escposService::NewHtmlTemplateRequest* request, ::escposService::NewHtmlTemplateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void NewHtmlTemplate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::escposService::NewHtmlTemplateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void ListHtmlTemplates(::grpc::ClientContext* context, const ::escposService::ListHtmlTemplatesRequest* request, ::escposService::ListHtmlTemplatesResponse* response, std::function<void(::grpc::Status)>) override;
      void ListHtmlTemplates(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::escposService::ListHtmlTemplatesResponse* response, std::function<void(::grpc::Status)>) override;
      void ListHtmlTemplates(::grpc::ClientContext* context, const ::escposService::ListHtmlTemplatesRequest* request, ::escposService::ListHtmlTemplatesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void ListHtmlTemplates(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::escposService::ListHtmlTemplatesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetHtmlTemplate(::grpc::ClientContext* context, const ::escposService::GetHtmlTemplateRequest* request, ::escposService::GetHtmlTemplateResponse* response, std::function<void(::grpc::Status)>) override;
      void GetHtmlTemplate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::escposService::GetHtmlTemplateResponse* response, std::function<void(::grpc::Status)>) override;
      void GetHtmlTemplate(::grpc::ClientContext* context, const ::escposService::GetHtmlTemplateRequest* request, ::escposService::GetHtmlTemplateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetHtmlTemplate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::escposService::GetHtmlTemplateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void UpdateHtmlTemplate(::grpc::ClientContext* context, const ::escposService::UpdateHtmlTemplateRequest* request, ::escposService::UpdateHtmlTemplateResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateHtmlTemplate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::escposService::UpdateHtmlTemplateResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateHtmlTemplate(::grpc::ClientContext* context, const ::escposService::UpdateHtmlTemplateRequest* request, ::escposService::UpdateHtmlTemplateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void UpdateHtmlTemplate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::escposService::UpdateHtmlTemplateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void DeleteHtmlTemplates(::grpc::ClientContext* context, const ::escposService::DeleteHtmlTemplatesRequest* request, ::escposService::DeleteHtmlTemplatesResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteHtmlTemplates(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::escposService::DeleteHtmlTemplatesResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteHtmlTemplates(::grpc::ClientContext* context, const ::escposService::DeleteHtmlTemplatesRequest* request, ::escposService::DeleteHtmlTemplatesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void DeleteHtmlTemplates(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::escposService::DeleteHtmlTemplatesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::escposService::PrintRawResponse>* AsyncPrintRawRaw(::grpc::ClientContext* context, const ::escposService::PrintRawRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::escposService::PrintRawResponse>* PrepareAsyncPrintRawRaw(::grpc::ClientContext* context, const ::escposService::PrintRawRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::escposService::PrintElementsResponse>* AsyncPrintElementsRaw(::grpc::ClientContext* context, const ::escposService::PrintElementsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::escposService::PrintElementsResponse>* PrepareAsyncPrintElementsRaw(::grpc::ClientContext* context, const ::escposService::PrintElementsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::escposService::PrintHtmlTemplateResponse>* AsyncPrintHtmlTemplateRaw(::grpc::ClientContext* context, const ::escposService::PrintHtmlTemplateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::escposService::PrintHtmlTemplateResponse>* PrepareAsyncPrintHtmlTemplateRaw(::grpc::ClientContext* context, const ::escposService::PrintHtmlTemplateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::escposService::NewHtmlTemplateResponse>* AsyncNewHtmlTemplateRaw(::grpc::ClientContext* context, const ::escposService::NewHtmlTemplateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::escposService::NewHtmlTemplateResponse>* PrepareAsyncNewHtmlTemplateRaw(::grpc::ClientContext* context, const ::escposService::NewHtmlTemplateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::escposService::ListHtmlTemplatesResponse>* AsyncListHtmlTemplatesRaw(::grpc::ClientContext* context, const ::escposService::ListHtmlTemplatesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::escposService::ListHtmlTemplatesResponse>* PrepareAsyncListHtmlTemplatesRaw(::grpc::ClientContext* context, const ::escposService::ListHtmlTemplatesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::escposService::GetHtmlTemplateResponse>* AsyncGetHtmlTemplateRaw(::grpc::ClientContext* context, const ::escposService::GetHtmlTemplateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::escposService::GetHtmlTemplateResponse>* PrepareAsyncGetHtmlTemplateRaw(::grpc::ClientContext* context, const ::escposService::GetHtmlTemplateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::escposService::UpdateHtmlTemplateResponse>* AsyncUpdateHtmlTemplateRaw(::grpc::ClientContext* context, const ::escposService::UpdateHtmlTemplateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::escposService::UpdateHtmlTemplateResponse>* PrepareAsyncUpdateHtmlTemplateRaw(::grpc::ClientContext* context, const ::escposService::UpdateHtmlTemplateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::escposService::DeleteHtmlTemplatesResponse>* AsyncDeleteHtmlTemplatesRaw(::grpc::ClientContext* context, const ::escposService::DeleteHtmlTemplatesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::escposService::DeleteHtmlTemplatesResponse>* PrepareAsyncDeleteHtmlTemplatesRaw(::grpc::ClientContext* context, const ::escposService::DeleteHtmlTemplatesRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_PrintRaw_;
    const ::grpc::internal::RpcMethod rpcmethod_PrintElements_;
    const ::grpc::internal::RpcMethod rpcmethod_PrintHtmlTemplate_;
    const ::grpc::internal::RpcMethod rpcmethod_NewHtmlTemplate_;
    const ::grpc::internal::RpcMethod rpcmethod_ListHtmlTemplates_;
    const ::grpc::internal::RpcMethod rpcmethod_GetHtmlTemplate_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateHtmlTemplate_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteHtmlTemplates_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // 打印bytes数据
    // 打印模板与打印对象方式不满足业务需求
    // 或希望接入其它已外部业务实现的打印组件时, 可通过此方法直接
    // 传入打印内容
    virtual ::grpc::Status PrintRaw(::grpc::ServerContext* context, const ::escposService::PrintRawRequest* request, ::escposService::PrintRawResponse* response);
    // 打印对象
    virtual ::grpc::Status PrintElements(::grpc::ServerContext* context, const ::escposService::PrintElementsRequest* request, ::escposService::PrintElementsResponse* response);
    // 打印预设的html模板内容
    virtual ::grpc::Status PrintHtmlTemplate(::grpc::ServerContext* context, const ::escposService::PrintHtmlTemplateRequest* request, ::escposService::PrintHtmlTemplateResponse* response);
    // 创建html模板
    virtual ::grpc::Status NewHtmlTemplate(::grpc::ServerContext* context, const ::escposService::NewHtmlTemplateRequest* request, ::escposService::NewHtmlTemplateResponse* response);
    // 获取html模板列表
    virtual ::grpc::Status ListHtmlTemplates(::grpc::ServerContext* context, const ::escposService::ListHtmlTemplatesRequest* request, ::escposService::ListHtmlTemplatesResponse* response);
    // 获取指定html模板内容
    virtual ::grpc::Status GetHtmlTemplate(::grpc::ServerContext* context, const ::escposService::GetHtmlTemplateRequest* request, ::escposService::GetHtmlTemplateResponse* response);
    // 更新html模板
    virtual ::grpc::Status UpdateHtmlTemplate(::grpc::ServerContext* context, const ::escposService::UpdateHtmlTemplateRequest* request, ::escposService::UpdateHtmlTemplateResponse* response);
    // 删除html模板
    virtual ::grpc::Status DeleteHtmlTemplates(::grpc::ServerContext* context, const ::escposService::DeleteHtmlTemplatesRequest* request, ::escposService::DeleteHtmlTemplatesResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_PrintRaw : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_PrintRaw() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_PrintRaw() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PrintRaw(::grpc::ServerContext* context, const ::escposService::PrintRawRequest* request, ::escposService::PrintRawResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPrintRaw(::grpc::ServerContext* context, ::escposService::PrintRawRequest* request, ::grpc::ServerAsyncResponseWriter< ::escposService::PrintRawResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PrintElements : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_PrintElements() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_PrintElements() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PrintElements(::grpc::ServerContext* context, const ::escposService::PrintElementsRequest* request, ::escposService::PrintElementsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPrintElements(::grpc::ServerContext* context, ::escposService::PrintElementsRequest* request, ::grpc::ServerAsyncResponseWriter< ::escposService::PrintElementsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PrintHtmlTemplate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_PrintHtmlTemplate() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_PrintHtmlTemplate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PrintHtmlTemplate(::grpc::ServerContext* context, const ::escposService::PrintHtmlTemplateRequest* request, ::escposService::PrintHtmlTemplateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPrintHtmlTemplate(::grpc::ServerContext* context, ::escposService::PrintHtmlTemplateRequest* request, ::grpc::ServerAsyncResponseWriter< ::escposService::PrintHtmlTemplateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_NewHtmlTemplate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_NewHtmlTemplate() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_NewHtmlTemplate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewHtmlTemplate(::grpc::ServerContext* context, const ::escposService::NewHtmlTemplateRequest* request, ::escposService::NewHtmlTemplateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNewHtmlTemplate(::grpc::ServerContext* context, ::escposService::NewHtmlTemplateRequest* request, ::grpc::ServerAsyncResponseWriter< ::escposService::NewHtmlTemplateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListHtmlTemplates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListHtmlTemplates() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_ListHtmlTemplates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListHtmlTemplates(::grpc::ServerContext* context, const ::escposService::ListHtmlTemplatesRequest* request, ::escposService::ListHtmlTemplatesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListHtmlTemplates(::grpc::ServerContext* context, ::escposService::ListHtmlTemplatesRequest* request, ::grpc::ServerAsyncResponseWriter< ::escposService::ListHtmlTemplatesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetHtmlTemplate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetHtmlTemplate() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_GetHtmlTemplate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetHtmlTemplate(::grpc::ServerContext* context, const ::escposService::GetHtmlTemplateRequest* request, ::escposService::GetHtmlTemplateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetHtmlTemplate(::grpc::ServerContext* context, ::escposService::GetHtmlTemplateRequest* request, ::grpc::ServerAsyncResponseWriter< ::escposService::GetHtmlTemplateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateHtmlTemplate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_UpdateHtmlTemplate() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_UpdateHtmlTemplate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateHtmlTemplate(::grpc::ServerContext* context, const ::escposService::UpdateHtmlTemplateRequest* request, ::escposService::UpdateHtmlTemplateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateHtmlTemplate(::grpc::ServerContext* context, ::escposService::UpdateHtmlTemplateRequest* request, ::grpc::ServerAsyncResponseWriter< ::escposService::UpdateHtmlTemplateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteHtmlTemplates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DeleteHtmlTemplates() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_DeleteHtmlTemplates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteHtmlTemplates(::grpc::ServerContext* context, const ::escposService::DeleteHtmlTemplatesRequest* request, ::escposService::DeleteHtmlTemplatesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteHtmlTemplates(::grpc::ServerContext* context, ::escposService::DeleteHtmlTemplatesRequest* request, ::grpc::ServerAsyncResponseWriter< ::escposService::DeleteHtmlTemplatesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_PrintRaw<WithAsyncMethod_PrintElements<WithAsyncMethod_PrintHtmlTemplate<WithAsyncMethod_NewHtmlTemplate<WithAsyncMethod_ListHtmlTemplates<WithAsyncMethod_GetHtmlTemplate<WithAsyncMethod_UpdateHtmlTemplate<WithAsyncMethod_DeleteHtmlTemplates<Service > > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_PrintRaw : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_PrintRaw() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::escposService::PrintRawRequest, ::escposService::PrintRawResponse>(
          [this](::grpc::ServerContext* context,
                 const ::escposService::PrintRawRequest* request,
                 ::escposService::PrintRawResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->PrintRaw(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_PrintRaw(
        ::grpc::experimental::MessageAllocator< ::escposService::PrintRawRequest, ::escposService::PrintRawResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::escposService::PrintRawRequest, ::escposService::PrintRawResponse>*>(
          ::grpc::Service::experimental().GetHandler(0))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_PrintRaw() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PrintRaw(::grpc::ServerContext* context, const ::escposService::PrintRawRequest* request, ::escposService::PrintRawResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void PrintRaw(::grpc::ServerContext* context, const ::escposService::PrintRawRequest* request, ::escposService::PrintRawResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_PrintElements : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_PrintElements() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::escposService::PrintElementsRequest, ::escposService::PrintElementsResponse>(
          [this](::grpc::ServerContext* context,
                 const ::escposService::PrintElementsRequest* request,
                 ::escposService::PrintElementsResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->PrintElements(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_PrintElements(
        ::grpc::experimental::MessageAllocator< ::escposService::PrintElementsRequest, ::escposService::PrintElementsResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::escposService::PrintElementsRequest, ::escposService::PrintElementsResponse>*>(
          ::grpc::Service::experimental().GetHandler(1))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_PrintElements() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PrintElements(::grpc::ServerContext* context, const ::escposService::PrintElementsRequest* request, ::escposService::PrintElementsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void PrintElements(::grpc::ServerContext* context, const ::escposService::PrintElementsRequest* request, ::escposService::PrintElementsResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_PrintHtmlTemplate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_PrintHtmlTemplate() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::escposService::PrintHtmlTemplateRequest, ::escposService::PrintHtmlTemplateResponse>(
          [this](::grpc::ServerContext* context,
                 const ::escposService::PrintHtmlTemplateRequest* request,
                 ::escposService::PrintHtmlTemplateResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->PrintHtmlTemplate(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_PrintHtmlTemplate(
        ::grpc::experimental::MessageAllocator< ::escposService::PrintHtmlTemplateRequest, ::escposService::PrintHtmlTemplateResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::escposService::PrintHtmlTemplateRequest, ::escposService::PrintHtmlTemplateResponse>*>(
          ::grpc::Service::experimental().GetHandler(2))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_PrintHtmlTemplate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PrintHtmlTemplate(::grpc::ServerContext* context, const ::escposService::PrintHtmlTemplateRequest* request, ::escposService::PrintHtmlTemplateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void PrintHtmlTemplate(::grpc::ServerContext* context, const ::escposService::PrintHtmlTemplateRequest* request, ::escposService::PrintHtmlTemplateResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_NewHtmlTemplate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_NewHtmlTemplate() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::escposService::NewHtmlTemplateRequest, ::escposService::NewHtmlTemplateResponse>(
          [this](::grpc::ServerContext* context,
                 const ::escposService::NewHtmlTemplateRequest* request,
                 ::escposService::NewHtmlTemplateResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->NewHtmlTemplate(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_NewHtmlTemplate(
        ::grpc::experimental::MessageAllocator< ::escposService::NewHtmlTemplateRequest, ::escposService::NewHtmlTemplateResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::escposService::NewHtmlTemplateRequest, ::escposService::NewHtmlTemplateResponse>*>(
          ::grpc::Service::experimental().GetHandler(3))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_NewHtmlTemplate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewHtmlTemplate(::grpc::ServerContext* context, const ::escposService::NewHtmlTemplateRequest* request, ::escposService::NewHtmlTemplateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void NewHtmlTemplate(::grpc::ServerContext* context, const ::escposService::NewHtmlTemplateRequest* request, ::escposService::NewHtmlTemplateResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ListHtmlTemplates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_ListHtmlTemplates() {
      ::grpc::Service::experimental().MarkMethodCallback(4,
        new ::grpc::internal::CallbackUnaryHandler< ::escposService::ListHtmlTemplatesRequest, ::escposService::ListHtmlTemplatesResponse>(
          [this](::grpc::ServerContext* context,
                 const ::escposService::ListHtmlTemplatesRequest* request,
                 ::escposService::ListHtmlTemplatesResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->ListHtmlTemplates(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_ListHtmlTemplates(
        ::grpc::experimental::MessageAllocator< ::escposService::ListHtmlTemplatesRequest, ::escposService::ListHtmlTemplatesResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::escposService::ListHtmlTemplatesRequest, ::escposService::ListHtmlTemplatesResponse>*>(
          ::grpc::Service::experimental().GetHandler(4))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ListHtmlTemplates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListHtmlTemplates(::grpc::ServerContext* context, const ::escposService::ListHtmlTemplatesRequest* request, ::escposService::ListHtmlTemplatesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ListHtmlTemplates(::grpc::ServerContext* context, const ::escposService::ListHtmlTemplatesRequest* request, ::escposService::ListHtmlTemplatesResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetHtmlTemplate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GetHtmlTemplate() {
      ::grpc::Service::experimental().MarkMethodCallback(5,
        new ::grpc::internal::CallbackUnaryHandler< ::escposService::GetHtmlTemplateRequest, ::escposService::GetHtmlTemplateResponse>(
          [this](::grpc::ServerContext* context,
                 const ::escposService::GetHtmlTemplateRequest* request,
                 ::escposService::GetHtmlTemplateResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetHtmlTemplate(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_GetHtmlTemplate(
        ::grpc::experimental::MessageAllocator< ::escposService::GetHtmlTemplateRequest, ::escposService::GetHtmlTemplateResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::escposService::GetHtmlTemplateRequest, ::escposService::GetHtmlTemplateResponse>*>(
          ::grpc::Service::experimental().GetHandler(5))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetHtmlTemplate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetHtmlTemplate(::grpc::ServerContext* context, const ::escposService::GetHtmlTemplateRequest* request, ::escposService::GetHtmlTemplateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetHtmlTemplate(::grpc::ServerContext* context, const ::escposService::GetHtmlTemplateRequest* request, ::escposService::GetHtmlTemplateResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_UpdateHtmlTemplate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_UpdateHtmlTemplate() {
      ::grpc::Service::experimental().MarkMethodCallback(6,
        new ::grpc::internal::CallbackUnaryHandler< ::escposService::UpdateHtmlTemplateRequest, ::escposService::UpdateHtmlTemplateResponse>(
          [this](::grpc::ServerContext* context,
                 const ::escposService::UpdateHtmlTemplateRequest* request,
                 ::escposService::UpdateHtmlTemplateResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->UpdateHtmlTemplate(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_UpdateHtmlTemplate(
        ::grpc::experimental::MessageAllocator< ::escposService::UpdateHtmlTemplateRequest, ::escposService::UpdateHtmlTemplateResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::escposService::UpdateHtmlTemplateRequest, ::escposService::UpdateHtmlTemplateResponse>*>(
          ::grpc::Service::experimental().GetHandler(6))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_UpdateHtmlTemplate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateHtmlTemplate(::grpc::ServerContext* context, const ::escposService::UpdateHtmlTemplateRequest* request, ::escposService::UpdateHtmlTemplateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void UpdateHtmlTemplate(::grpc::ServerContext* context, const ::escposService::UpdateHtmlTemplateRequest* request, ::escposService::UpdateHtmlTemplateResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeleteHtmlTemplates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_DeleteHtmlTemplates() {
      ::grpc::Service::experimental().MarkMethodCallback(7,
        new ::grpc::internal::CallbackUnaryHandler< ::escposService::DeleteHtmlTemplatesRequest, ::escposService::DeleteHtmlTemplatesResponse>(
          [this](::grpc::ServerContext* context,
                 const ::escposService::DeleteHtmlTemplatesRequest* request,
                 ::escposService::DeleteHtmlTemplatesResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->DeleteHtmlTemplates(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_DeleteHtmlTemplates(
        ::grpc::experimental::MessageAllocator< ::escposService::DeleteHtmlTemplatesRequest, ::escposService::DeleteHtmlTemplatesResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::escposService::DeleteHtmlTemplatesRequest, ::escposService::DeleteHtmlTemplatesResponse>*>(
          ::grpc::Service::experimental().GetHandler(7))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DeleteHtmlTemplates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteHtmlTemplates(::grpc::ServerContext* context, const ::escposService::DeleteHtmlTemplatesRequest* request, ::escposService::DeleteHtmlTemplatesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void DeleteHtmlTemplates(::grpc::ServerContext* context, const ::escposService::DeleteHtmlTemplatesRequest* request, ::escposService::DeleteHtmlTemplatesResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_PrintRaw<ExperimentalWithCallbackMethod_PrintElements<ExperimentalWithCallbackMethod_PrintHtmlTemplate<ExperimentalWithCallbackMethod_NewHtmlTemplate<ExperimentalWithCallbackMethod_ListHtmlTemplates<ExperimentalWithCallbackMethod_GetHtmlTemplate<ExperimentalWithCallbackMethod_UpdateHtmlTemplate<ExperimentalWithCallbackMethod_DeleteHtmlTemplates<Service > > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_PrintRaw : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_PrintRaw() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_PrintRaw() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PrintRaw(::grpc::ServerContext* context, const ::escposService::PrintRawRequest* request, ::escposService::PrintRawResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PrintElements : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_PrintElements() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_PrintElements() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PrintElements(::grpc::ServerContext* context, const ::escposService::PrintElementsRequest* request, ::escposService::PrintElementsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PrintHtmlTemplate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_PrintHtmlTemplate() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_PrintHtmlTemplate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PrintHtmlTemplate(::grpc::ServerContext* context, const ::escposService::PrintHtmlTemplateRequest* request, ::escposService::PrintHtmlTemplateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_NewHtmlTemplate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_NewHtmlTemplate() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_NewHtmlTemplate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewHtmlTemplate(::grpc::ServerContext* context, const ::escposService::NewHtmlTemplateRequest* request, ::escposService::NewHtmlTemplateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListHtmlTemplates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListHtmlTemplates() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_ListHtmlTemplates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListHtmlTemplates(::grpc::ServerContext* context, const ::escposService::ListHtmlTemplatesRequest* request, ::escposService::ListHtmlTemplatesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetHtmlTemplate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetHtmlTemplate() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_GetHtmlTemplate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetHtmlTemplate(::grpc::ServerContext* context, const ::escposService::GetHtmlTemplateRequest* request, ::escposService::GetHtmlTemplateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateHtmlTemplate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_UpdateHtmlTemplate() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_UpdateHtmlTemplate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateHtmlTemplate(::grpc::ServerContext* context, const ::escposService::UpdateHtmlTemplateRequest* request, ::escposService::UpdateHtmlTemplateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteHtmlTemplates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DeleteHtmlTemplates() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_DeleteHtmlTemplates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteHtmlTemplates(::grpc::ServerContext* context, const ::escposService::DeleteHtmlTemplatesRequest* request, ::escposService::DeleteHtmlTemplatesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_PrintRaw : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_PrintRaw() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_PrintRaw() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PrintRaw(::grpc::ServerContext* context, const ::escposService::PrintRawRequest* request, ::escposService::PrintRawResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPrintRaw(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PrintElements : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_PrintElements() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_PrintElements() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PrintElements(::grpc::ServerContext* context, const ::escposService::PrintElementsRequest* request, ::escposService::PrintElementsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPrintElements(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PrintHtmlTemplate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_PrintHtmlTemplate() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_PrintHtmlTemplate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PrintHtmlTemplate(::grpc::ServerContext* context, const ::escposService::PrintHtmlTemplateRequest* request, ::escposService::PrintHtmlTemplateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPrintHtmlTemplate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_NewHtmlTemplate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_NewHtmlTemplate() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_NewHtmlTemplate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewHtmlTemplate(::grpc::ServerContext* context, const ::escposService::NewHtmlTemplateRequest* request, ::escposService::NewHtmlTemplateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNewHtmlTemplate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListHtmlTemplates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ListHtmlTemplates() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_ListHtmlTemplates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListHtmlTemplates(::grpc::ServerContext* context, const ::escposService::ListHtmlTemplatesRequest* request, ::escposService::ListHtmlTemplatesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListHtmlTemplates(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetHtmlTemplate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetHtmlTemplate() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_GetHtmlTemplate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetHtmlTemplate(::grpc::ServerContext* context, const ::escposService::GetHtmlTemplateRequest* request, ::escposService::GetHtmlTemplateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetHtmlTemplate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateHtmlTemplate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_UpdateHtmlTemplate() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_UpdateHtmlTemplate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateHtmlTemplate(::grpc::ServerContext* context, const ::escposService::UpdateHtmlTemplateRequest* request, ::escposService::UpdateHtmlTemplateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateHtmlTemplate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteHtmlTemplates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_DeleteHtmlTemplates() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_DeleteHtmlTemplates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteHtmlTemplates(::grpc::ServerContext* context, const ::escposService::DeleteHtmlTemplatesRequest* request, ::escposService::DeleteHtmlTemplatesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteHtmlTemplates(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_PrintRaw : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_PrintRaw() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->PrintRaw(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_PrintRaw() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PrintRaw(::grpc::ServerContext* context, const ::escposService::PrintRawRequest* request, ::escposService::PrintRawResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void PrintRaw(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_PrintElements : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_PrintElements() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->PrintElements(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_PrintElements() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PrintElements(::grpc::ServerContext* context, const ::escposService::PrintElementsRequest* request, ::escposService::PrintElementsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void PrintElements(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_PrintHtmlTemplate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_PrintHtmlTemplate() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->PrintHtmlTemplate(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_PrintHtmlTemplate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PrintHtmlTemplate(::grpc::ServerContext* context, const ::escposService::PrintHtmlTemplateRequest* request, ::escposService::PrintHtmlTemplateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void PrintHtmlTemplate(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_NewHtmlTemplate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_NewHtmlTemplate() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->NewHtmlTemplate(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_NewHtmlTemplate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewHtmlTemplate(::grpc::ServerContext* context, const ::escposService::NewHtmlTemplateRequest* request, ::escposService::NewHtmlTemplateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void NewHtmlTemplate(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ListHtmlTemplates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_ListHtmlTemplates() {
      ::grpc::Service::experimental().MarkMethodRawCallback(4,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->ListHtmlTemplates(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_ListHtmlTemplates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListHtmlTemplates(::grpc::ServerContext* context, const ::escposService::ListHtmlTemplatesRequest* request, ::escposService::ListHtmlTemplatesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ListHtmlTemplates(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetHtmlTemplate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GetHtmlTemplate() {
      ::grpc::Service::experimental().MarkMethodRawCallback(5,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetHtmlTemplate(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetHtmlTemplate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetHtmlTemplate(::grpc::ServerContext* context, const ::escposService::GetHtmlTemplateRequest* request, ::escposService::GetHtmlTemplateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetHtmlTemplate(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_UpdateHtmlTemplate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_UpdateHtmlTemplate() {
      ::grpc::Service::experimental().MarkMethodRawCallback(6,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->UpdateHtmlTemplate(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_UpdateHtmlTemplate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateHtmlTemplate(::grpc::ServerContext* context, const ::escposService::UpdateHtmlTemplateRequest* request, ::escposService::UpdateHtmlTemplateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void UpdateHtmlTemplate(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeleteHtmlTemplates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_DeleteHtmlTemplates() {
      ::grpc::Service::experimental().MarkMethodRawCallback(7,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->DeleteHtmlTemplates(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_DeleteHtmlTemplates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteHtmlTemplates(::grpc::ServerContext* context, const ::escposService::DeleteHtmlTemplatesRequest* request, ::escposService::DeleteHtmlTemplatesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void DeleteHtmlTemplates(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PrintRaw : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_PrintRaw() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::escposService::PrintRawRequest, ::escposService::PrintRawResponse>(std::bind(&WithStreamedUnaryMethod_PrintRaw<BaseClass>::StreamedPrintRaw, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_PrintRaw() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PrintRaw(::grpc::ServerContext* context, const ::escposService::PrintRawRequest* request, ::escposService::PrintRawResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPrintRaw(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::escposService::PrintRawRequest,::escposService::PrintRawResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PrintElements : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_PrintElements() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::escposService::PrintElementsRequest, ::escposService::PrintElementsResponse>(std::bind(&WithStreamedUnaryMethod_PrintElements<BaseClass>::StreamedPrintElements, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_PrintElements() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PrintElements(::grpc::ServerContext* context, const ::escposService::PrintElementsRequest* request, ::escposService::PrintElementsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPrintElements(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::escposService::PrintElementsRequest,::escposService::PrintElementsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PrintHtmlTemplate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_PrintHtmlTemplate() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::escposService::PrintHtmlTemplateRequest, ::escposService::PrintHtmlTemplateResponse>(std::bind(&WithStreamedUnaryMethod_PrintHtmlTemplate<BaseClass>::StreamedPrintHtmlTemplate, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_PrintHtmlTemplate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PrintHtmlTemplate(::grpc::ServerContext* context, const ::escposService::PrintHtmlTemplateRequest* request, ::escposService::PrintHtmlTemplateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPrintHtmlTemplate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::escposService::PrintHtmlTemplateRequest,::escposService::PrintHtmlTemplateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_NewHtmlTemplate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_NewHtmlTemplate() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::escposService::NewHtmlTemplateRequest, ::escposService::NewHtmlTemplateResponse>(std::bind(&WithStreamedUnaryMethod_NewHtmlTemplate<BaseClass>::StreamedNewHtmlTemplate, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_NewHtmlTemplate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status NewHtmlTemplate(::grpc::ServerContext* context, const ::escposService::NewHtmlTemplateRequest* request, ::escposService::NewHtmlTemplateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedNewHtmlTemplate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::escposService::NewHtmlTemplateRequest,::escposService::NewHtmlTemplateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListHtmlTemplates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ListHtmlTemplates() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::escposService::ListHtmlTemplatesRequest, ::escposService::ListHtmlTemplatesResponse>(std::bind(&WithStreamedUnaryMethod_ListHtmlTemplates<BaseClass>::StreamedListHtmlTemplates, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ListHtmlTemplates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListHtmlTemplates(::grpc::ServerContext* context, const ::escposService::ListHtmlTemplatesRequest* request, ::escposService::ListHtmlTemplatesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListHtmlTemplates(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::escposService::ListHtmlTemplatesRequest,::escposService::ListHtmlTemplatesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetHtmlTemplate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetHtmlTemplate() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::escposService::GetHtmlTemplateRequest, ::escposService::GetHtmlTemplateResponse>(std::bind(&WithStreamedUnaryMethod_GetHtmlTemplate<BaseClass>::StreamedGetHtmlTemplate, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetHtmlTemplate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetHtmlTemplate(::grpc::ServerContext* context, const ::escposService::GetHtmlTemplateRequest* request, ::escposService::GetHtmlTemplateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetHtmlTemplate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::escposService::GetHtmlTemplateRequest,::escposService::GetHtmlTemplateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateHtmlTemplate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_UpdateHtmlTemplate() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::escposService::UpdateHtmlTemplateRequest, ::escposService::UpdateHtmlTemplateResponse>(std::bind(&WithStreamedUnaryMethod_UpdateHtmlTemplate<BaseClass>::StreamedUpdateHtmlTemplate, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UpdateHtmlTemplate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateHtmlTemplate(::grpc::ServerContext* context, const ::escposService::UpdateHtmlTemplateRequest* request, ::escposService::UpdateHtmlTemplateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateHtmlTemplate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::escposService::UpdateHtmlTemplateRequest,::escposService::UpdateHtmlTemplateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteHtmlTemplates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DeleteHtmlTemplates() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler< ::escposService::DeleteHtmlTemplatesRequest, ::escposService::DeleteHtmlTemplatesResponse>(std::bind(&WithStreamedUnaryMethod_DeleteHtmlTemplates<BaseClass>::StreamedDeleteHtmlTemplates, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DeleteHtmlTemplates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteHtmlTemplates(::grpc::ServerContext* context, const ::escposService::DeleteHtmlTemplatesRequest* request, ::escposService::DeleteHtmlTemplatesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteHtmlTemplates(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::escposService::DeleteHtmlTemplatesRequest,::escposService::DeleteHtmlTemplatesResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_PrintRaw<WithStreamedUnaryMethod_PrintElements<WithStreamedUnaryMethod_PrintHtmlTemplate<WithStreamedUnaryMethod_NewHtmlTemplate<WithStreamedUnaryMethod_ListHtmlTemplates<WithStreamedUnaryMethod_GetHtmlTemplate<WithStreamedUnaryMethod_UpdateHtmlTemplate<WithStreamedUnaryMethod_DeleteHtmlTemplates<Service > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_PrintRaw<WithStreamedUnaryMethod_PrintElements<WithStreamedUnaryMethod_PrintHtmlTemplate<WithStreamedUnaryMethod_NewHtmlTemplate<WithStreamedUnaryMethod_ListHtmlTemplates<WithStreamedUnaryMethod_GetHtmlTemplate<WithStreamedUnaryMethod_UpdateHtmlTemplate<WithStreamedUnaryMethod_DeleteHtmlTemplates<Service > > > > > > > > StreamedService;
};

}  // namespace escposService


#endif  // GRPC_escpos_2eproto__INCLUDED
