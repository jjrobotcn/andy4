// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: escpos.proto

package escposService

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// 内容类型
type ElementType int32

const (
	// 文本类型
	ElementType_TEXT ElementType = 0
	// 图片类型
	ElementType_IMAGE ElementType = 1
)

var ElementType_name = map[int32]string{
	0: "TEXT",
	1: "IMAGE",
}

var ElementType_value = map[string]int32{
	"TEXT":  0,
	"IMAGE": 1,
}

func (x ElementType) String() string {
	return proto.EnumName(ElementType_name, int32(x))
}

func (ElementType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_73818997a59787e9, []int{0}
}

// 文字尺寸
type ElementSize int32

const (
	// DEFAULT = NORMAL
	ElementSize_DEFAULT ElementSize = 0
	// 小字体
	ElementSize_SMALL ElementSize = 1
	// 中字体
	ElementSize_NORMAL ElementSize = 2
	// 大字体
	ElementSize_LARGE ElementSize = 3
	// 超大字体
	ElementSize_HUGE ElementSize = 4
)

var ElementSize_name = map[int32]string{
	0: "DEFAULT",
	1: "SMALL",
	2: "NORMAL",
	3: "LARGE",
	4: "HUGE",
}

var ElementSize_value = map[string]int32{
	"DEFAULT": 0,
	"SMALL":   1,
	"NORMAL":  2,
	"LARGE":   3,
	"HUGE":    4,
}

func (x ElementSize) String() string {
	return proto.EnumName(ElementSize_name, int32(x))
}

func (ElementSize) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_73818997a59787e9, []int{1}
}

// 行对齐方式
type ElementAlign int32

const (
	// 左对齐
	ElementAlign_LEFT ElementAlign = 0
	// 居中
	ElementAlign_CENTER ElementAlign = 1
	// 右对齐
	ElementAlign_RIGHT ElementAlign = 2
)

var ElementAlign_name = map[int32]string{
	0: "LEFT",
	1: "CENTER",
	2: "RIGHT",
}

var ElementAlign_value = map[string]int32{
	"LEFT":   0,
	"CENTER": 1,
	"RIGHT":  2,
}

func (x ElementAlign) String() string {
	return proto.EnumName(ElementAlign_name, int32(x))
}

func (ElementAlign) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_73818997a59787e9, []int{2}
}

// 打印bytes数据请求
type PrintRawRequest struct {
	// escpos协议数据
	Raw                  []byte   `protobuf:"bytes,1,opt,name=raw,proto3" json:"raw,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PrintRawRequest) Reset()         { *m = PrintRawRequest{} }
func (m *PrintRawRequest) String() string { return proto.CompactTextString(m) }
func (*PrintRawRequest) ProtoMessage()    {}
func (*PrintRawRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_73818997a59787e9, []int{0}
}
func (m *PrintRawRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrintRawRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrintRawRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrintRawRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrintRawRequest.Merge(m, src)
}
func (m *PrintRawRequest) XXX_Size() int {
	return m.Size()
}
func (m *PrintRawRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PrintRawRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PrintRawRequest proto.InternalMessageInfo

func (m *PrintRawRequest) GetRaw() []byte {
	if m != nil {
		return m.Raw
	}
	return nil
}

// 打印bytes数据结果
type PrintRawResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PrintRawResponse) Reset()         { *m = PrintRawResponse{} }
func (m *PrintRawResponse) String() string { return proto.CompactTextString(m) }
func (*PrintRawResponse) ProtoMessage()    {}
func (*PrintRawResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_73818997a59787e9, []int{1}
}
func (m *PrintRawResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrintRawResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrintRawResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrintRawResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrintRawResponse.Merge(m, src)
}
func (m *PrintRawResponse) XXX_Size() int {
	return m.Size()
}
func (m *PrintRawResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PrintRawResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PrintRawResponse proto.InternalMessageInfo

// 打印对象
type Element struct {
	// 打印类型
	Etype ElementType `protobuf:"varint,1,opt,name=etype,proto3,enum=escposService.ElementType" json:"etype,omitempty"`
	// 文本类型打印内容
	ContentText string `protobuf:"bytes,2,opt,name=content_text,json=contentText,proto3" json:"content_text,omitempty"`
	// 图片类型打印内容
	ContentImage []byte `protobuf:"bytes,3,opt,name=content_image,json=contentImage,proto3" json:"content_image,omitempty"`
	// 图片类型， 默认为png (png|jpg|jpeg|bmp)
	ImageContentType string `protobuf:"bytes,5,opt,name=image_content_type,json=imageContentType,proto3" json:"image_content_type,omitempty"`
	// 字号
	// 图片类型无效
	Size_                ElementSize `protobuf:"varint,4,opt,name=size,proto3,enum=escposService.ElementSize" json:"size,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Element) Reset()         { *m = Element{} }
func (m *Element) String() string { return proto.CompactTextString(m) }
func (*Element) ProtoMessage()    {}
func (*Element) Descriptor() ([]byte, []int) {
	return fileDescriptor_73818997a59787e9, []int{2}
}
func (m *Element) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Element) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Element.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Element) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Element.Merge(m, src)
}
func (m *Element) XXX_Size() int {
	return m.Size()
}
func (m *Element) XXX_DiscardUnknown() {
	xxx_messageInfo_Element.DiscardUnknown(m)
}

var xxx_messageInfo_Element proto.InternalMessageInfo

func (m *Element) GetEtype() ElementType {
	if m != nil {
		return m.Etype
	}
	return ElementType_TEXT
}

func (m *Element) GetContentText() string {
	if m != nil {
		return m.ContentText
	}
	return ""
}

func (m *Element) GetContentImage() []byte {
	if m != nil {
		return m.ContentImage
	}
	return nil
}

func (m *Element) GetImageContentType() string {
	if m != nil {
		return m.ImageContentType
	}
	return ""
}

func (m *Element) GetSize_() ElementSize {
	if m != nil {
		return m.Size_
	}
	return ElementSize_DEFAULT
}

// 单行中打印对象
type ElementRow struct {
	// 打印对象列表
	Elements []*Element `protobuf:"bytes,1,rep,name=elements,proto3" json:"elements,omitempty"`
	// 行对齐方式
	Align                ElementAlign `protobuf:"varint,2,opt,name=align,proto3,enum=escposService.ElementAlign" json:"align,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ElementRow) Reset()         { *m = ElementRow{} }
func (m *ElementRow) String() string { return proto.CompactTextString(m) }
func (*ElementRow) ProtoMessage()    {}
func (*ElementRow) Descriptor() ([]byte, []int) {
	return fileDescriptor_73818997a59787e9, []int{3}
}
func (m *ElementRow) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ElementRow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ElementRow.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ElementRow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ElementRow.Merge(m, src)
}
func (m *ElementRow) XXX_Size() int {
	return m.Size()
}
func (m *ElementRow) XXX_DiscardUnknown() {
	xxx_messageInfo_ElementRow.DiscardUnknown(m)
}

var xxx_messageInfo_ElementRow proto.InternalMessageInfo

func (m *ElementRow) GetElements() []*Element {
	if m != nil {
		return m.Elements
	}
	return nil
}

func (m *ElementRow) GetAlign() ElementAlign {
	if m != nil {
		return m.Align
	}
	return ElementAlign_LEFT
}

// 打印对象请求
type PrintElementsRequest struct {
	// 打印element行对象列表
	ElementRows []*ElementRow `protobuf:"bytes,1,rep,name=element_rows,json=elementRows,proto3" json:"element_rows,omitempty"`
	// 是否切纸 需打印机类型支持
	Cut                  bool     `protobuf:"varint,2,opt,name=cut,proto3" json:"cut,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PrintElementsRequest) Reset()         { *m = PrintElementsRequest{} }
func (m *PrintElementsRequest) String() string { return proto.CompactTextString(m) }
func (*PrintElementsRequest) ProtoMessage()    {}
func (*PrintElementsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_73818997a59787e9, []int{4}
}
func (m *PrintElementsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrintElementsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrintElementsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrintElementsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrintElementsRequest.Merge(m, src)
}
func (m *PrintElementsRequest) XXX_Size() int {
	return m.Size()
}
func (m *PrintElementsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PrintElementsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PrintElementsRequest proto.InternalMessageInfo

func (m *PrintElementsRequest) GetElementRows() []*ElementRow {
	if m != nil {
		return m.ElementRows
	}
	return nil
}

func (m *PrintElementsRequest) GetCut() bool {
	if m != nil {
		return m.Cut
	}
	return false
}

// 打印对象结果
type PrintElementsResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PrintElementsResponse) Reset()         { *m = PrintElementsResponse{} }
func (m *PrintElementsResponse) String() string { return proto.CompactTextString(m) }
func (*PrintElementsResponse) ProtoMessage()    {}
func (*PrintElementsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_73818997a59787e9, []int{5}
}
func (m *PrintElementsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrintElementsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrintElementsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrintElementsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrintElementsResponse.Merge(m, src)
}
func (m *PrintElementsResponse) XXX_Size() int {
	return m.Size()
}
func (m *PrintElementsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PrintElementsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PrintElementsResponse proto.InternalMessageInfo

// html模板打印请求
type PrintHtmlTemplateRequest struct {
	// 可与name选填
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// 可与id选填, 仅匹配首个同名模板
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// 模板参数, 模板页面中使用"{{}}"符号标记
	// 如: 联系电话: {{tel}}, 参数中使用{"params": {"tel": "123"}}
	// 打印内容则为:  联系电话: 123
	Params map[string]string `protobuf:"bytes,3,rep,name=params,proto3" json:"params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 是否切纸 需打印机类型支持
	Cut                  bool     `protobuf:"varint,4,opt,name=cut,proto3" json:"cut,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PrintHtmlTemplateRequest) Reset()         { *m = PrintHtmlTemplateRequest{} }
func (m *PrintHtmlTemplateRequest) String() string { return proto.CompactTextString(m) }
func (*PrintHtmlTemplateRequest) ProtoMessage()    {}
func (*PrintHtmlTemplateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_73818997a59787e9, []int{6}
}
func (m *PrintHtmlTemplateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrintHtmlTemplateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrintHtmlTemplateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrintHtmlTemplateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrintHtmlTemplateRequest.Merge(m, src)
}
func (m *PrintHtmlTemplateRequest) XXX_Size() int {
	return m.Size()
}
func (m *PrintHtmlTemplateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PrintHtmlTemplateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PrintHtmlTemplateRequest proto.InternalMessageInfo

func (m *PrintHtmlTemplateRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PrintHtmlTemplateRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PrintHtmlTemplateRequest) GetParams() map[string]string {
	if m != nil {
		return m.Params
	}
	return nil
}

func (m *PrintHtmlTemplateRequest) GetCut() bool {
	if m != nil {
		return m.Cut
	}
	return false
}

// html模板打印结果
type PrintHtmlTemplateResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PrintHtmlTemplateResponse) Reset()         { *m = PrintHtmlTemplateResponse{} }
func (m *PrintHtmlTemplateResponse) String() string { return proto.CompactTextString(m) }
func (*PrintHtmlTemplateResponse) ProtoMessage()    {}
func (*PrintHtmlTemplateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_73818997a59787e9, []int{7}
}
func (m *PrintHtmlTemplateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrintHtmlTemplateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrintHtmlTemplateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrintHtmlTemplateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrintHtmlTemplateResponse.Merge(m, src)
}
func (m *PrintHtmlTemplateResponse) XXX_Size() int {
	return m.Size()
}
func (m *PrintHtmlTemplateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PrintHtmlTemplateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PrintHtmlTemplateResponse proto.InternalMessageInfo

// html模板
type HtmlTemplate struct {
	// 创建时id将自动生成
	// 修改时根据此id获取模板数据
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// 创建时传入空值将生成随机名
	// 修改时传入空值将不改变
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// 修改时传入空值将不改变
	Content              string   `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HtmlTemplate) Reset()         { *m = HtmlTemplate{} }
func (m *HtmlTemplate) String() string { return proto.CompactTextString(m) }
func (*HtmlTemplate) ProtoMessage()    {}
func (*HtmlTemplate) Descriptor() ([]byte, []int) {
	return fileDescriptor_73818997a59787e9, []int{8}
}
func (m *HtmlTemplate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HtmlTemplate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HtmlTemplate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HtmlTemplate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HtmlTemplate.Merge(m, src)
}
func (m *HtmlTemplate) XXX_Size() int {
	return m.Size()
}
func (m *HtmlTemplate) XXX_DiscardUnknown() {
	xxx_messageInfo_HtmlTemplate.DiscardUnknown(m)
}

var xxx_messageInfo_HtmlTemplate proto.InternalMessageInfo

func (m *HtmlTemplate) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *HtmlTemplate) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *HtmlTemplate) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

// 创建html模板请求
type NewHtmlTemplateRequest struct {
	// html模板
	HtmlTemplate         *HtmlTemplate `protobuf:"bytes,1,opt,name=html_template,json=htmlTemplate,proto3" json:"html_template,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *NewHtmlTemplateRequest) Reset()         { *m = NewHtmlTemplateRequest{} }
func (m *NewHtmlTemplateRequest) String() string { return proto.CompactTextString(m) }
func (*NewHtmlTemplateRequest) ProtoMessage()    {}
func (*NewHtmlTemplateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_73818997a59787e9, []int{9}
}
func (m *NewHtmlTemplateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewHtmlTemplateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewHtmlTemplateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewHtmlTemplateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewHtmlTemplateRequest.Merge(m, src)
}
func (m *NewHtmlTemplateRequest) XXX_Size() int {
	return m.Size()
}
func (m *NewHtmlTemplateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NewHtmlTemplateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NewHtmlTemplateRequest proto.InternalMessageInfo

func (m *NewHtmlTemplateRequest) GetHtmlTemplate() *HtmlTemplate {
	if m != nil {
		return m.HtmlTemplate
	}
	return nil
}

// 创建html模板结果
type NewHtmlTemplateResponse struct {
	// html模板
	HtmlTemplate         *HtmlTemplate `protobuf:"bytes,1,opt,name=html_template,json=htmlTemplate,proto3" json:"html_template,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *NewHtmlTemplateResponse) Reset()         { *m = NewHtmlTemplateResponse{} }
func (m *NewHtmlTemplateResponse) String() string { return proto.CompactTextString(m) }
func (*NewHtmlTemplateResponse) ProtoMessage()    {}
func (*NewHtmlTemplateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_73818997a59787e9, []int{10}
}
func (m *NewHtmlTemplateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewHtmlTemplateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewHtmlTemplateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewHtmlTemplateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewHtmlTemplateResponse.Merge(m, src)
}
func (m *NewHtmlTemplateResponse) XXX_Size() int {
	return m.Size()
}
func (m *NewHtmlTemplateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NewHtmlTemplateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NewHtmlTemplateResponse proto.InternalMessageInfo

func (m *NewHtmlTemplateResponse) GetHtmlTemplate() *HtmlTemplate {
	if m != nil {
		return m.HtmlTemplate
	}
	return nil
}

// 获取模板列表请求
type ListHtmlTemplatesRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListHtmlTemplatesRequest) Reset()         { *m = ListHtmlTemplatesRequest{} }
func (m *ListHtmlTemplatesRequest) String() string { return proto.CompactTextString(m) }
func (*ListHtmlTemplatesRequest) ProtoMessage()    {}
func (*ListHtmlTemplatesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_73818997a59787e9, []int{11}
}
func (m *ListHtmlTemplatesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListHtmlTemplatesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListHtmlTemplatesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListHtmlTemplatesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListHtmlTemplatesRequest.Merge(m, src)
}
func (m *ListHtmlTemplatesRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListHtmlTemplatesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListHtmlTemplatesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListHtmlTemplatesRequest proto.InternalMessageInfo

// 获取模板列表结果
type ListHtmlTemplatesResponse struct {
	// html模板列表
	HtmlTemplates        []*HtmlTemplate `protobuf:"bytes,1,rep,name=html_templates,json=htmlTemplates,proto3" json:"html_templates,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ListHtmlTemplatesResponse) Reset()         { *m = ListHtmlTemplatesResponse{} }
func (m *ListHtmlTemplatesResponse) String() string { return proto.CompactTextString(m) }
func (*ListHtmlTemplatesResponse) ProtoMessage()    {}
func (*ListHtmlTemplatesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_73818997a59787e9, []int{12}
}
func (m *ListHtmlTemplatesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListHtmlTemplatesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListHtmlTemplatesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListHtmlTemplatesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListHtmlTemplatesResponse.Merge(m, src)
}
func (m *ListHtmlTemplatesResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListHtmlTemplatesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListHtmlTemplatesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListHtmlTemplatesResponse proto.InternalMessageInfo

func (m *ListHtmlTemplatesResponse) GetHtmlTemplates() []*HtmlTemplate {
	if m != nil {
		return m.HtmlTemplates
	}
	return nil
}

// 获取指定模板内容请求
type GetHtmlTemplateRequest struct {
	// html模板id
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetHtmlTemplateRequest) Reset()         { *m = GetHtmlTemplateRequest{} }
func (m *GetHtmlTemplateRequest) String() string { return proto.CompactTextString(m) }
func (*GetHtmlTemplateRequest) ProtoMessage()    {}
func (*GetHtmlTemplateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_73818997a59787e9, []int{13}
}
func (m *GetHtmlTemplateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetHtmlTemplateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetHtmlTemplateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetHtmlTemplateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetHtmlTemplateRequest.Merge(m, src)
}
func (m *GetHtmlTemplateRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetHtmlTemplateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetHtmlTemplateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetHtmlTemplateRequest proto.InternalMessageInfo

func (m *GetHtmlTemplateRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// 获取指定模板内容结果
type GetHtmlTemplateResponse struct {
	// html模板
	HtmlTemplate         *HtmlTemplate `protobuf:"bytes,1,opt,name=html_template,json=htmlTemplate,proto3" json:"html_template,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *GetHtmlTemplateResponse) Reset()         { *m = GetHtmlTemplateResponse{} }
func (m *GetHtmlTemplateResponse) String() string { return proto.CompactTextString(m) }
func (*GetHtmlTemplateResponse) ProtoMessage()    {}
func (*GetHtmlTemplateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_73818997a59787e9, []int{14}
}
func (m *GetHtmlTemplateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetHtmlTemplateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetHtmlTemplateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetHtmlTemplateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetHtmlTemplateResponse.Merge(m, src)
}
func (m *GetHtmlTemplateResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetHtmlTemplateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetHtmlTemplateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetHtmlTemplateResponse proto.InternalMessageInfo

func (m *GetHtmlTemplateResponse) GetHtmlTemplate() *HtmlTemplate {
	if m != nil {
		return m.HtmlTemplate
	}
	return nil
}

// 更新html模板请求
type UpdateHtmlTemplateRequest struct {
	// html模板
	HtmlTemplate         *HtmlTemplate `protobuf:"bytes,1,opt,name=html_template,json=htmlTemplate,proto3" json:"html_template,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *UpdateHtmlTemplateRequest) Reset()         { *m = UpdateHtmlTemplateRequest{} }
func (m *UpdateHtmlTemplateRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateHtmlTemplateRequest) ProtoMessage()    {}
func (*UpdateHtmlTemplateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_73818997a59787e9, []int{15}
}
func (m *UpdateHtmlTemplateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateHtmlTemplateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateHtmlTemplateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateHtmlTemplateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateHtmlTemplateRequest.Merge(m, src)
}
func (m *UpdateHtmlTemplateRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateHtmlTemplateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateHtmlTemplateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateHtmlTemplateRequest proto.InternalMessageInfo

func (m *UpdateHtmlTemplateRequest) GetHtmlTemplate() *HtmlTemplate {
	if m != nil {
		return m.HtmlTemplate
	}
	return nil
}

// 更新html模板结果
type UpdateHtmlTemplateResponse struct {
	// html模板
	HtmlTemplate         *HtmlTemplate `protobuf:"bytes,1,opt,name=html_template,json=htmlTemplate,proto3" json:"html_template,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *UpdateHtmlTemplateResponse) Reset()         { *m = UpdateHtmlTemplateResponse{} }
func (m *UpdateHtmlTemplateResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateHtmlTemplateResponse) ProtoMessage()    {}
func (*UpdateHtmlTemplateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_73818997a59787e9, []int{16}
}
func (m *UpdateHtmlTemplateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateHtmlTemplateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateHtmlTemplateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateHtmlTemplateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateHtmlTemplateResponse.Merge(m, src)
}
func (m *UpdateHtmlTemplateResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateHtmlTemplateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateHtmlTemplateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateHtmlTemplateResponse proto.InternalMessageInfo

func (m *UpdateHtmlTemplateResponse) GetHtmlTemplate() *HtmlTemplate {
	if m != nil {
		return m.HtmlTemplate
	}
	return nil
}

// 删除html模板请求
type DeleteHtmlTemplatesRequest struct {
	// 删除模板id列表
	HtmlTemplatesId      []string `protobuf:"bytes,1,rep,name=html_templates_id,json=htmlTemplatesId,proto3" json:"html_templates_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteHtmlTemplatesRequest) Reset()         { *m = DeleteHtmlTemplatesRequest{} }
func (m *DeleteHtmlTemplatesRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteHtmlTemplatesRequest) ProtoMessage()    {}
func (*DeleteHtmlTemplatesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_73818997a59787e9, []int{17}
}
func (m *DeleteHtmlTemplatesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteHtmlTemplatesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteHtmlTemplatesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteHtmlTemplatesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteHtmlTemplatesRequest.Merge(m, src)
}
func (m *DeleteHtmlTemplatesRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteHtmlTemplatesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteHtmlTemplatesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteHtmlTemplatesRequest proto.InternalMessageInfo

func (m *DeleteHtmlTemplatesRequest) GetHtmlTemplatesId() []string {
	if m != nil {
		return m.HtmlTemplatesId
	}
	return nil
}

// 删除html模板结果
type DeleteHtmlTemplatesResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteHtmlTemplatesResponse) Reset()         { *m = DeleteHtmlTemplatesResponse{} }
func (m *DeleteHtmlTemplatesResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteHtmlTemplatesResponse) ProtoMessage()    {}
func (*DeleteHtmlTemplatesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_73818997a59787e9, []int{18}
}
func (m *DeleteHtmlTemplatesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteHtmlTemplatesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteHtmlTemplatesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteHtmlTemplatesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteHtmlTemplatesResponse.Merge(m, src)
}
func (m *DeleteHtmlTemplatesResponse) XXX_Size() int {
	return m.Size()
}
func (m *DeleteHtmlTemplatesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteHtmlTemplatesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteHtmlTemplatesResponse proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("escposService.ElementType", ElementType_name, ElementType_value)
	proto.RegisterEnum("escposService.ElementSize", ElementSize_name, ElementSize_value)
	proto.RegisterEnum("escposService.ElementAlign", ElementAlign_name, ElementAlign_value)
	proto.RegisterType((*PrintRawRequest)(nil), "escposService.PrintRawRequest")
	proto.RegisterType((*PrintRawResponse)(nil), "escposService.PrintRawResponse")
	proto.RegisterType((*Element)(nil), "escposService.Element")
	proto.RegisterType((*ElementRow)(nil), "escposService.ElementRow")
	proto.RegisterType((*PrintElementsRequest)(nil), "escposService.PrintElementsRequest")
	proto.RegisterType((*PrintElementsResponse)(nil), "escposService.PrintElementsResponse")
	proto.RegisterType((*PrintHtmlTemplateRequest)(nil), "escposService.PrintHtmlTemplateRequest")
	proto.RegisterMapType((map[string]string)(nil), "escposService.PrintHtmlTemplateRequest.ParamsEntry")
	proto.RegisterType((*PrintHtmlTemplateResponse)(nil), "escposService.PrintHtmlTemplateResponse")
	proto.RegisterType((*HtmlTemplate)(nil), "escposService.HtmlTemplate")
	proto.RegisterType((*NewHtmlTemplateRequest)(nil), "escposService.NewHtmlTemplateRequest")
	proto.RegisterType((*NewHtmlTemplateResponse)(nil), "escposService.NewHtmlTemplateResponse")
	proto.RegisterType((*ListHtmlTemplatesRequest)(nil), "escposService.ListHtmlTemplatesRequest")
	proto.RegisterType((*ListHtmlTemplatesResponse)(nil), "escposService.ListHtmlTemplatesResponse")
	proto.RegisterType((*GetHtmlTemplateRequest)(nil), "escposService.GetHtmlTemplateRequest")
	proto.RegisterType((*GetHtmlTemplateResponse)(nil), "escposService.GetHtmlTemplateResponse")
	proto.RegisterType((*UpdateHtmlTemplateRequest)(nil), "escposService.UpdateHtmlTemplateRequest")
	proto.RegisterType((*UpdateHtmlTemplateResponse)(nil), "escposService.UpdateHtmlTemplateResponse")
	proto.RegisterType((*DeleteHtmlTemplatesRequest)(nil), "escposService.DeleteHtmlTemplatesRequest")
	proto.RegisterType((*DeleteHtmlTemplatesResponse)(nil), "escposService.DeleteHtmlTemplatesResponse")
}

func init() { proto.RegisterFile("escpos.proto", fileDescriptor_73818997a59787e9) }

var fileDescriptor_73818997a59787e9 = []byte{
	// 989 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x96, 0xcf, 0x6f, 0x1b, 0x45,
	0x14, 0xc7, 0x19, 0xff, 0x48, 0xe2, 0x67, 0x3b, 0xd9, 0x0e, 0x25, 0xb5, 0x37, 0x60, 0xd2, 0x71,
	0x5a, 0x1c, 0xab, 0xb2, 0x8b, 0x7b, 0x81, 0x8a, 0x03, 0x6e, 0xbb, 0x71, 0x22, 0x9c, 0x10, 0x4d,
	0x1c, 0x09, 0x81, 0xc0, 0x5a, 0xec, 0xc1, 0x5d, 0x61, 0xef, 0x6e, 0xbd, 0x93, 0xb8, 0xe9, 0x11,
	0x89, 0x2b, 0x17, 0x24, 0x0e, 0x08, 0xf1, 0xf7, 0x70, 0x44, 0xe2, 0xc2, 0x11, 0x22, 0xfe, 0x10,
	0x34, 0xe3, 0x59, 0xd7, 0xde, 0x1f, 0x89, 0x0f, 0xe9, 0x6d, 0x7e, 0x7c, 0xe7, 0xbd, 0xcf, 0xbe,
	0x37, 0xfa, 0xce, 0x42, 0x8e, 0x79, 0x3d, 0xd7, 0xf1, 0x6a, 0xee, 0xd8, 0xe1, 0x0e, 0xce, 0x4f,
	0x67, 0x27, 0x6c, 0x7c, 0x6e, 0xf5, 0x98, 0xfe, 0xee, 0xc0, 0x71, 0x06, 0x43, 0x56, 0x37, 0x5d,
	0xab, 0x6e, 0xda, 0xb6, 0xc3, 0x4d, 0x6e, 0x39, 0xb6, 0x12, 0x93, 0x32, 0x6c, 0x1c, 0x8f, 0x2d,
	0x9b, 0x53, 0x73, 0x42, 0xd9, 0x8b, 0x33, 0xe6, 0x71, 0xac, 0x41, 0x72, 0x6c, 0x4e, 0x0a, 0x68,
	0x1b, 0x55, 0x72, 0x54, 0x0c, 0x09, 0x06, 0xed, 0xb5, 0xc8, 0x73, 0x1d, 0xdb, 0x63, 0xe4, 0x5f,
	0x04, 0xab, 0xc6, 0x90, 0x8d, 0x98, 0xcd, 0xf1, 0x43, 0x48, 0x33, 0x7e, 0xe1, 0x32, 0x79, 0x66,
	0xbd, 0xa1, 0xd7, 0x16, 0x08, 0x6a, 0x4a, 0xd6, 0xb9, 0x70, 0x19, 0x9d, 0x0a, 0xf1, 0x5d, 0xc8,
	0xf5, 0x1c, 0x9b, 0x33, 0x9b, 0x77, 0x39, 0x7b, 0xc9, 0x0b, 0x89, 0x6d, 0x54, 0xc9, 0xd0, 0xac,
	0x5a, 0xeb, 0xb0, 0x97, 0x1c, 0x97, 0x21, 0xef, 0x4b, 0xac, 0x91, 0x39, 0x60, 0x85, 0xa4, 0x04,
	0xf2, 0xcf, 0x1d, 0x88, 0x35, 0xfc, 0x00, 0xb0, 0xdc, 0xec, 0xce, 0xa2, 0x09, 0x8c, 0xb4, 0x8c,
	0xa6, 0xc9, 0x9d, 0xa7, 0x2a, 0xa4, 0xc8, 0x5a, 0x83, 0x94, 0x67, 0xbd, 0x62, 0x85, 0xd4, 0x55,
	0x98, 0x27, 0xd6, 0x2b, 0x46, 0xa5, 0x8e, 0x78, 0x00, 0x6a, 0x91, 0x3a, 0x13, 0xdc, 0x80, 0x35,
	0x36, 0x9d, 0x79, 0x05, 0xb4, 0x9d, 0xac, 0x64, 0x1b, 0x9b, 0xd1, 0x11, 0xe8, 0x4c, 0x87, 0x3f,
	0x84, 0xb4, 0x39, 0xb4, 0x06, 0xb6, 0xfc, 0xc0, 0xf5, 0xc6, 0x56, 0xf4, 0x81, 0xa6, 0x90, 0xd0,
	0xa9, 0x92, 0x7c, 0x07, 0xb7, 0x65, 0xb1, 0xd5, 0x9e, 0xe7, 0xb7, 0xe5, 0x13, 0xc8, 0xa9, 0xb0,
	0xdd, 0xb1, 0x33, 0xf1, 0x11, 0x8a, 0x31, 0x08, 0xce, 0x84, 0x66, 0xd9, 0x6c, 0xec, 0x89, 0xa6,
	0xf6, 0xce, 0xa6, 0x75, 0x5e, 0xa3, 0x62, 0x48, 0xee, 0xc0, 0x3b, 0x81, 0x3c, 0xaa, 0xb3, 0x7f,
	0x23, 0x28, 0xc8, 0x9d, 0x7d, 0x3e, 0x1a, 0x76, 0xd8, 0xc8, 0x1d, 0x9a, 0x9c, 0xf9, 0x14, 0xeb,
	0x90, 0xb0, 0xfa, 0xb2, 0xcf, 0x19, 0x9a, 0xb0, 0xfa, 0x18, 0x43, 0xca, 0x36, 0x47, 0x4c, 0x35,
	0x50, 0x8e, 0xf1, 0x67, 0xb0, 0xe2, 0x9a, 0x63, 0x73, 0xe4, 0x15, 0x92, 0x92, 0xf1, 0x51, 0x80,
	0x31, 0x2e, 0x78, 0xed, 0x58, 0x9e, 0x32, 0x6c, 0x3e, 0xbe, 0xa0, 0x2a, 0x84, 0x0f, 0x9e, 0x9a,
	0x81, 0xeb, 0x1f, 0x43, 0x76, 0x4e, 0x28, 0x04, 0xdf, 0xb3, 0x0b, 0x85, 0x24, 0x86, 0xf8, 0x36,
	0xa4, 0xcf, 0xcd, 0xe1, 0x99, 0x0f, 0x35, 0x9d, 0x3c, 0x4e, 0x7c, 0x84, 0xc8, 0x16, 0x14, 0x23,
	0x92, 0xab, 0xef, 0x6e, 0x43, 0x6e, 0x7e, 0x7d, 0xa9, 0x4f, 0x2d, 0xc0, 0xaa, 0xba, 0x79, 0xf2,
	0x7a, 0x66, 0xa8, 0x3f, 0x25, 0x5f, 0xc2, 0xe6, 0x11, 0x9b, 0x44, 0x95, 0xf0, 0x53, 0xc8, 0x3f,
	0xe7, 0xa3, 0x61, 0x97, 0xab, 0x75, 0x99, 0x22, 0x1b, 0xba, 0x1b, 0x0b, 0x47, 0x73, 0xcf, 0xe7,
	0x66, 0xe4, 0x2b, 0xb8, 0x13, 0x8a, 0x3d, 0xfd, 0x88, 0x1b, 0x08, 0xae, 0x43, 0xa1, 0x6d, 0x79,
	0x0b, 0x25, 0xf2, 0xef, 0x20, 0xe9, 0x42, 0x31, 0x62, 0x4f, 0xa5, 0x7e, 0x02, 0xeb, 0x0b, 0xa9,
	0xfd, 0x2b, 0x7a, 0x65, 0xee, 0xfc, 0x7c, 0x6e, 0x8f, 0x54, 0x60, 0xb3, 0xc5, 0x96, 0xb9, 0x78,
	0xa2, 0x06, 0x21, 0xe5, 0x8d, 0xd5, 0xe0, 0x6b, 0x28, 0x9e, 0xba, 0x7d, 0x93, 0xb3, 0x37, 0xd3,
	0xbf, 0x6f, 0x40, 0x8f, 0x0a, 0x7f, 0x63, 0xf8, 0xfb, 0xa0, 0x3f, 0x63, 0x43, 0xb6, 0x18, 0x7f,
	0x66, 0x24, 0x55, 0xb8, 0xb5, 0xd8, 0xa7, 0xae, 0x2c, 0x6c, 0xb2, 0x92, 0xa1, 0x1b, 0x0b, 0xdd,
	0x38, 0xe8, 0x93, 0xf7, 0x60, 0x2b, 0x32, 0xd2, 0x14, 0xb5, 0x4a, 0x20, 0x3b, 0x67, 0xee, 0x78,
	0x0d, 0x52, 0x1d, 0xe3, 0x8b, 0x8e, 0xf6, 0x16, 0xce, 0x40, 0xfa, 0xe0, 0xb0, 0xd9, 0x32, 0x34,
	0x54, 0xdd, 0x9b, 0x69, 0x84, 0xb3, 0xe2, 0x2c, 0xac, 0x3e, 0x33, 0xf6, 0x9a, 0xa7, 0x6d, 0x25,
	0x3b, 0x39, 0x6c, 0xb6, 0xdb, 0x1a, 0xc2, 0x00, 0x2b, 0x47, 0x9f, 0xd3, 0xc3, 0x66, 0x5b, 0x4b,
	0x88, 0xe5, 0x76, 0x93, 0xb6, 0x0c, 0x2d, 0x29, 0x42, 0xee, 0x9f, 0xb6, 0x0c, 0x2d, 0x55, 0xad,
	0x43, 0x6e, 0xde, 0x2e, 0xc5, 0x4e, 0xdb, 0xd8, 0x13, 0x51, 0x00, 0x56, 0x9e, 0x1a, 0x47, 0x1d,
	0x83, 0x6a, 0x48, 0x1c, 0xa5, 0x07, 0xad, 0xfd, 0x8e, 0x96, 0x68, 0xfc, 0x96, 0x81, 0xbc, 0xe1,
	0xf5, 0x8e, 0x67, 0x25, 0xc3, 0x2f, 0x60, 0xcd, 0x7f, 0xc7, 0x70, 0x29, 0xca, 0x94, 0x5e, 0xbf,
	0x82, 0xfa, 0xfb, 0xb1, 0xfb, 0xca, 0x2e, 0x76, 0x7e, 0xf8, 0xeb, 0xbf, 0x9f, 0x13, 0x25, 0x52,
	0x94, 0x2f, 0xeb, 0x79, 0xa3, 0xce, 0xbc, 0x5e, 0xd7, 0x75, 0xbc, 0xba, 0x2b, 0x94, 0xdd, 0xb1,
	0x39, 0x79, 0x8c, 0xaa, 0xf8, 0x47, 0x04, 0xf9, 0x05, 0x9b, 0xc5, 0xe5, 0xa8, 0xc0, 0x01, 0xb3,
	0xd7, 0x77, 0xae, 0x16, 0x29, 0x84, 0x5d, 0x89, 0x50, 0x26, 0xa5, 0x68, 0x04, 0xff, 0x15, 0x12,
	0x1c, 0xbf, 0x20, 0xb8, 0x15, 0xb2, 0x3e, 0xfc, 0xc1, 0x92, 0xce, 0xac, 0x57, 0xae, 0x17, 0x2a,
	0xa6, 0x9a, 0x64, 0xaa, 0x90, 0x72, 0x34, 0xd3, 0xc2, 0xcd, 0x13, 0x60, 0x3f, 0x21, 0xd8, 0x08,
	0x98, 0x19, 0xbe, 0x17, 0xc8, 0x16, 0x6d, 0xa4, 0xfa, 0xfd, 0xeb, 0x64, 0x0a, 0xe9, 0x81, 0x44,
	0xba, 0x4f, 0xee, 0x06, 0x91, 0x6c, 0x36, 0x09, 0x03, 0x89, 0x4a, 0x85, 0x4c, 0x2e, 0x54, 0xa9,
	0x38, 0x8b, 0x0c, 0x55, 0x2a, 0xd6, 0x2f, 0xe3, 0x2b, 0x35, 0xb4, 0xbc, 0x40, 0xa1, 0x3c, 0xbf,
	0x52, 0x01, 0xcb, 0x0b, 0x55, 0x2a, 0xda, 0x3c, 0x43, 0x95, 0x8a, 0x71, 0xce, 0xf8, 0x4a, 0x0d,
	0x58, 0x44, 0xeb, 0x7e, 0x45, 0x80, 0xc3, 0x3e, 0x86, 0x83, 0x15, 0x88, 0x75, 0x52, 0x7d, 0x77,
	0x09, 0xa5, 0x22, 0xab, 0x4b, 0xb2, 0x5d, 0xb2, 0x13, 0x24, 0x3b, 0x93, 0x67, 0xc2, 0x70, 0xbf,
	0x23, 0x78, 0x3b, 0xc2, 0xba, 0x70, 0x30, 0x67, 0xbc, 0x51, 0xea, 0xd5, 0x65, 0xa4, 0x8a, 0xef,
	0xa1, 0xe4, 0xab, 0x92, 0x7b, 0x41, 0xbe, 0xbe, 0x3c, 0x14, 0x6e, 0xe7, 0x93, 0xdc, 0x1f, 0x97,
	0x25, 0xf4, 0xe7, 0x65, 0x09, 0xfd, 0x73, 0x59, 0x42, 0xdf, 0xae, 0xc8, 0xdf, 0xf1, 0x47, 0xff,
	0x07, 0x00, 0x00, 0xff, 0xff, 0xe3, 0x8c, 0x12, 0x63, 0xcb, 0x0b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EscPosServiceClient is the client API for EscPosService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EscPosServiceClient interface {
	// 打印bytes数据
	// 打印模板与打印对象方式不满足业务需求
	// 或希望接入其它已外部业务实现的打印组件时, 可通过此方法直接
	// 传入打印内容
	PrintRaw(ctx context.Context, in *PrintRawRequest, opts ...grpc.CallOption) (*PrintRawResponse, error)
	// 打印对象
	PrintElements(ctx context.Context, in *PrintElementsRequest, opts ...grpc.CallOption) (*PrintElementsResponse, error)
	// 打印预设的html模板内容
	PrintHtmlTemplate(ctx context.Context, in *PrintHtmlTemplateRequest, opts ...grpc.CallOption) (*PrintHtmlTemplateResponse, error)
	// 创建html模板
	NewHtmlTemplate(ctx context.Context, in *NewHtmlTemplateRequest, opts ...grpc.CallOption) (*NewHtmlTemplateResponse, error)
	// 获取html模板列表
	ListHtmlTemplates(ctx context.Context, in *ListHtmlTemplatesRequest, opts ...grpc.CallOption) (*ListHtmlTemplatesResponse, error)
	// 获取指定html模板内容
	GetHtmlTemplate(ctx context.Context, in *GetHtmlTemplateRequest, opts ...grpc.CallOption) (*GetHtmlTemplateResponse, error)
	// 更新html模板
	UpdateHtmlTemplate(ctx context.Context, in *UpdateHtmlTemplateRequest, opts ...grpc.CallOption) (*UpdateHtmlTemplateResponse, error)
	// 删除html模板
	DeleteHtmlTemplates(ctx context.Context, in *DeleteHtmlTemplatesRequest, opts ...grpc.CallOption) (*DeleteHtmlTemplatesResponse, error)
}

type escPosServiceClient struct {
	cc *grpc.ClientConn
}

func NewEscPosServiceClient(cc *grpc.ClientConn) EscPosServiceClient {
	return &escPosServiceClient{cc}
}

func (c *escPosServiceClient) PrintRaw(ctx context.Context, in *PrintRawRequest, opts ...grpc.CallOption) (*PrintRawResponse, error) {
	out := new(PrintRawResponse)
	err := c.cc.Invoke(ctx, "/escposService.EscPosService/PrintRaw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *escPosServiceClient) PrintElements(ctx context.Context, in *PrintElementsRequest, opts ...grpc.CallOption) (*PrintElementsResponse, error) {
	out := new(PrintElementsResponse)
	err := c.cc.Invoke(ctx, "/escposService.EscPosService/PrintElements", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *escPosServiceClient) PrintHtmlTemplate(ctx context.Context, in *PrintHtmlTemplateRequest, opts ...grpc.CallOption) (*PrintHtmlTemplateResponse, error) {
	out := new(PrintHtmlTemplateResponse)
	err := c.cc.Invoke(ctx, "/escposService.EscPosService/PrintHtmlTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *escPosServiceClient) NewHtmlTemplate(ctx context.Context, in *NewHtmlTemplateRequest, opts ...grpc.CallOption) (*NewHtmlTemplateResponse, error) {
	out := new(NewHtmlTemplateResponse)
	err := c.cc.Invoke(ctx, "/escposService.EscPosService/NewHtmlTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *escPosServiceClient) ListHtmlTemplates(ctx context.Context, in *ListHtmlTemplatesRequest, opts ...grpc.CallOption) (*ListHtmlTemplatesResponse, error) {
	out := new(ListHtmlTemplatesResponse)
	err := c.cc.Invoke(ctx, "/escposService.EscPosService/ListHtmlTemplates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *escPosServiceClient) GetHtmlTemplate(ctx context.Context, in *GetHtmlTemplateRequest, opts ...grpc.CallOption) (*GetHtmlTemplateResponse, error) {
	out := new(GetHtmlTemplateResponse)
	err := c.cc.Invoke(ctx, "/escposService.EscPosService/GetHtmlTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *escPosServiceClient) UpdateHtmlTemplate(ctx context.Context, in *UpdateHtmlTemplateRequest, opts ...grpc.CallOption) (*UpdateHtmlTemplateResponse, error) {
	out := new(UpdateHtmlTemplateResponse)
	err := c.cc.Invoke(ctx, "/escposService.EscPosService/UpdateHtmlTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *escPosServiceClient) DeleteHtmlTemplates(ctx context.Context, in *DeleteHtmlTemplatesRequest, opts ...grpc.CallOption) (*DeleteHtmlTemplatesResponse, error) {
	out := new(DeleteHtmlTemplatesResponse)
	err := c.cc.Invoke(ctx, "/escposService.EscPosService/DeleteHtmlTemplates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EscPosServiceServer is the server API for EscPosService service.
type EscPosServiceServer interface {
	// 打印bytes数据
	// 打印模板与打印对象方式不满足业务需求
	// 或希望接入其它已外部业务实现的打印组件时, 可通过此方法直接
	// 传入打印内容
	PrintRaw(context.Context, *PrintRawRequest) (*PrintRawResponse, error)
	// 打印对象
	PrintElements(context.Context, *PrintElementsRequest) (*PrintElementsResponse, error)
	// 打印预设的html模板内容
	PrintHtmlTemplate(context.Context, *PrintHtmlTemplateRequest) (*PrintHtmlTemplateResponse, error)
	// 创建html模板
	NewHtmlTemplate(context.Context, *NewHtmlTemplateRequest) (*NewHtmlTemplateResponse, error)
	// 获取html模板列表
	ListHtmlTemplates(context.Context, *ListHtmlTemplatesRequest) (*ListHtmlTemplatesResponse, error)
	// 获取指定html模板内容
	GetHtmlTemplate(context.Context, *GetHtmlTemplateRequest) (*GetHtmlTemplateResponse, error)
	// 更新html模板
	UpdateHtmlTemplate(context.Context, *UpdateHtmlTemplateRequest) (*UpdateHtmlTemplateResponse, error)
	// 删除html模板
	DeleteHtmlTemplates(context.Context, *DeleteHtmlTemplatesRequest) (*DeleteHtmlTemplatesResponse, error)
}

// UnimplementedEscPosServiceServer can be embedded to have forward compatible implementations.
type UnimplementedEscPosServiceServer struct {
}

func (*UnimplementedEscPosServiceServer) PrintRaw(ctx context.Context, req *PrintRawRequest) (*PrintRawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrintRaw not implemented")
}
func (*UnimplementedEscPosServiceServer) PrintElements(ctx context.Context, req *PrintElementsRequest) (*PrintElementsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrintElements not implemented")
}
func (*UnimplementedEscPosServiceServer) PrintHtmlTemplate(ctx context.Context, req *PrintHtmlTemplateRequest) (*PrintHtmlTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrintHtmlTemplate not implemented")
}
func (*UnimplementedEscPosServiceServer) NewHtmlTemplate(ctx context.Context, req *NewHtmlTemplateRequest) (*NewHtmlTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewHtmlTemplate not implemented")
}
func (*UnimplementedEscPosServiceServer) ListHtmlTemplates(ctx context.Context, req *ListHtmlTemplatesRequest) (*ListHtmlTemplatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHtmlTemplates not implemented")
}
func (*UnimplementedEscPosServiceServer) GetHtmlTemplate(ctx context.Context, req *GetHtmlTemplateRequest) (*GetHtmlTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHtmlTemplate not implemented")
}
func (*UnimplementedEscPosServiceServer) UpdateHtmlTemplate(ctx context.Context, req *UpdateHtmlTemplateRequest) (*UpdateHtmlTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHtmlTemplate not implemented")
}
func (*UnimplementedEscPosServiceServer) DeleteHtmlTemplates(ctx context.Context, req *DeleteHtmlTemplatesRequest) (*DeleteHtmlTemplatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHtmlTemplates not implemented")
}

func RegisterEscPosServiceServer(s *grpc.Server, srv EscPosServiceServer) {
	s.RegisterService(&_EscPosService_serviceDesc, srv)
}

func _EscPosService_PrintRaw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrintRawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EscPosServiceServer).PrintRaw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/escposService.EscPosService/PrintRaw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EscPosServiceServer).PrintRaw(ctx, req.(*PrintRawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EscPosService_PrintElements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrintElementsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EscPosServiceServer).PrintElements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/escposService.EscPosService/PrintElements",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EscPosServiceServer).PrintElements(ctx, req.(*PrintElementsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EscPosService_PrintHtmlTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrintHtmlTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EscPosServiceServer).PrintHtmlTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/escposService.EscPosService/PrintHtmlTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EscPosServiceServer).PrintHtmlTemplate(ctx, req.(*PrintHtmlTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EscPosService_NewHtmlTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewHtmlTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EscPosServiceServer).NewHtmlTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/escposService.EscPosService/NewHtmlTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EscPosServiceServer).NewHtmlTemplate(ctx, req.(*NewHtmlTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EscPosService_ListHtmlTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHtmlTemplatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EscPosServiceServer).ListHtmlTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/escposService.EscPosService/ListHtmlTemplates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EscPosServiceServer).ListHtmlTemplates(ctx, req.(*ListHtmlTemplatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EscPosService_GetHtmlTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHtmlTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EscPosServiceServer).GetHtmlTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/escposService.EscPosService/GetHtmlTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EscPosServiceServer).GetHtmlTemplate(ctx, req.(*GetHtmlTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EscPosService_UpdateHtmlTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHtmlTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EscPosServiceServer).UpdateHtmlTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/escposService.EscPosService/UpdateHtmlTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EscPosServiceServer).UpdateHtmlTemplate(ctx, req.(*UpdateHtmlTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EscPosService_DeleteHtmlTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHtmlTemplatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EscPosServiceServer).DeleteHtmlTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/escposService.EscPosService/DeleteHtmlTemplates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EscPosServiceServer).DeleteHtmlTemplates(ctx, req.(*DeleteHtmlTemplatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EscPosService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "escposService.EscPosService",
	HandlerType: (*EscPosServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PrintRaw",
			Handler:    _EscPosService_PrintRaw_Handler,
		},
		{
			MethodName: "PrintElements",
			Handler:    _EscPosService_PrintElements_Handler,
		},
		{
			MethodName: "PrintHtmlTemplate",
			Handler:    _EscPosService_PrintHtmlTemplate_Handler,
		},
		{
			MethodName: "NewHtmlTemplate",
			Handler:    _EscPosService_NewHtmlTemplate_Handler,
		},
		{
			MethodName: "ListHtmlTemplates",
			Handler:    _EscPosService_ListHtmlTemplates_Handler,
		},
		{
			MethodName: "GetHtmlTemplate",
			Handler:    _EscPosService_GetHtmlTemplate_Handler,
		},
		{
			MethodName: "UpdateHtmlTemplate",
			Handler:    _EscPosService_UpdateHtmlTemplate_Handler,
		},
		{
			MethodName: "DeleteHtmlTemplates",
			Handler:    _EscPosService_DeleteHtmlTemplates_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "escpos.proto",
}

func (m *PrintRawRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrintRawRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Raw) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEscpos(dAtA, i, uint64(len(m.Raw)))
		i += copy(dAtA[i:], m.Raw)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PrintRawResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrintRawResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Element) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Element) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Etype != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEscpos(dAtA, i, uint64(m.Etype))
	}
	if len(m.ContentText) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEscpos(dAtA, i, uint64(len(m.ContentText)))
		i += copy(dAtA[i:], m.ContentText)
	}
	if len(m.ContentImage) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEscpos(dAtA, i, uint64(len(m.ContentImage)))
		i += copy(dAtA[i:], m.ContentImage)
	}
	if m.Size_ != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintEscpos(dAtA, i, uint64(m.Size_))
	}
	if len(m.ImageContentType) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintEscpos(dAtA, i, uint64(len(m.ImageContentType)))
		i += copy(dAtA[i:], m.ImageContentType)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ElementRow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ElementRow) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Elements) > 0 {
		for _, msg := range m.Elements {
			dAtA[i] = 0xa
			i++
			i = encodeVarintEscpos(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Align != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEscpos(dAtA, i, uint64(m.Align))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PrintElementsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrintElementsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ElementRows) > 0 {
		for _, msg := range m.ElementRows {
			dAtA[i] = 0xa
			i++
			i = encodeVarintEscpos(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Cut {
		dAtA[i] = 0x10
		i++
		if m.Cut {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PrintElementsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrintElementsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PrintHtmlTemplateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrintHtmlTemplateRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEscpos(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEscpos(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Params) > 0 {
		for k, _ := range m.Params {
			dAtA[i] = 0x1a
			i++
			v := m.Params[k]
			mapSize := 1 + len(k) + sovEscpos(uint64(len(k))) + 1 + len(v) + sovEscpos(uint64(len(v)))
			i = encodeVarintEscpos(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintEscpos(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintEscpos(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if m.Cut {
		dAtA[i] = 0x20
		i++
		if m.Cut {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PrintHtmlTemplateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrintHtmlTemplateResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *HtmlTemplate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HtmlTemplate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEscpos(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEscpos(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Content) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEscpos(dAtA, i, uint64(len(m.Content)))
		i += copy(dAtA[i:], m.Content)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *NewHtmlTemplateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewHtmlTemplateRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HtmlTemplate != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEscpos(dAtA, i, uint64(m.HtmlTemplate.Size()))
		n1, err1 := m.HtmlTemplate.MarshalTo(dAtA[i:])
		if err1 != nil {
			return 0, err1
		}
		i += n1
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *NewHtmlTemplateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewHtmlTemplateResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HtmlTemplate != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEscpos(dAtA, i, uint64(m.HtmlTemplate.Size()))
		n2, err2 := m.HtmlTemplate.MarshalTo(dAtA[i:])
		if err2 != nil {
			return 0, err2
		}
		i += n2
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ListHtmlTemplatesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListHtmlTemplatesRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ListHtmlTemplatesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListHtmlTemplatesResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.HtmlTemplates) > 0 {
		for _, msg := range m.HtmlTemplates {
			dAtA[i] = 0xa
			i++
			i = encodeVarintEscpos(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetHtmlTemplateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetHtmlTemplateRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEscpos(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetHtmlTemplateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetHtmlTemplateResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HtmlTemplate != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEscpos(dAtA, i, uint64(m.HtmlTemplate.Size()))
		n3, err3 := m.HtmlTemplate.MarshalTo(dAtA[i:])
		if err3 != nil {
			return 0, err3
		}
		i += n3
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UpdateHtmlTemplateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateHtmlTemplateRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HtmlTemplate != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEscpos(dAtA, i, uint64(m.HtmlTemplate.Size()))
		n4, err4 := m.HtmlTemplate.MarshalTo(dAtA[i:])
		if err4 != nil {
			return 0, err4
		}
		i += n4
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UpdateHtmlTemplateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateHtmlTemplateResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HtmlTemplate != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEscpos(dAtA, i, uint64(m.HtmlTemplate.Size()))
		n5, err5 := m.HtmlTemplate.MarshalTo(dAtA[i:])
		if err5 != nil {
			return 0, err5
		}
		i += n5
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DeleteHtmlTemplatesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteHtmlTemplatesRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.HtmlTemplatesId) > 0 {
		for _, s := range m.HtmlTemplatesId {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DeleteHtmlTemplatesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteHtmlTemplatesResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintEscpos(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *PrintRawRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Raw)
	if l > 0 {
		n += 1 + l + sovEscpos(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PrintRawResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Element) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Etype != 0 {
		n += 1 + sovEscpos(uint64(m.Etype))
	}
	l = len(m.ContentText)
	if l > 0 {
		n += 1 + l + sovEscpos(uint64(l))
	}
	l = len(m.ContentImage)
	if l > 0 {
		n += 1 + l + sovEscpos(uint64(l))
	}
	if m.Size_ != 0 {
		n += 1 + sovEscpos(uint64(m.Size_))
	}
	l = len(m.ImageContentType)
	if l > 0 {
		n += 1 + l + sovEscpos(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ElementRow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Elements) > 0 {
		for _, e := range m.Elements {
			l = e.Size()
			n += 1 + l + sovEscpos(uint64(l))
		}
	}
	if m.Align != 0 {
		n += 1 + sovEscpos(uint64(m.Align))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PrintElementsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ElementRows) > 0 {
		for _, e := range m.ElementRows {
			l = e.Size()
			n += 1 + l + sovEscpos(uint64(l))
		}
	}
	if m.Cut {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PrintElementsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PrintHtmlTemplateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovEscpos(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovEscpos(uint64(l))
	}
	if len(m.Params) > 0 {
		for k, v := range m.Params {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovEscpos(uint64(len(k))) + 1 + len(v) + sovEscpos(uint64(len(v)))
			n += mapEntrySize + 1 + sovEscpos(uint64(mapEntrySize))
		}
	}
	if m.Cut {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PrintHtmlTemplateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HtmlTemplate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovEscpos(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovEscpos(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovEscpos(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NewHtmlTemplateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HtmlTemplate != nil {
		l = m.HtmlTemplate.Size()
		n += 1 + l + sovEscpos(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NewHtmlTemplateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HtmlTemplate != nil {
		l = m.HtmlTemplate.Size()
		n += 1 + l + sovEscpos(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListHtmlTemplatesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListHtmlTemplatesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.HtmlTemplates) > 0 {
		for _, e := range m.HtmlTemplates {
			l = e.Size()
			n += 1 + l + sovEscpos(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetHtmlTemplateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovEscpos(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetHtmlTemplateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HtmlTemplate != nil {
		l = m.HtmlTemplate.Size()
		n += 1 + l + sovEscpos(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateHtmlTemplateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HtmlTemplate != nil {
		l = m.HtmlTemplate.Size()
		n += 1 + l + sovEscpos(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateHtmlTemplateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HtmlTemplate != nil {
		l = m.HtmlTemplate.Size()
		n += 1 + l + sovEscpos(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteHtmlTemplatesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.HtmlTemplatesId) > 0 {
		for _, s := range m.HtmlTemplatesId {
			l = len(s)
			n += 1 + l + sovEscpos(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteHtmlTemplatesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovEscpos(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEscpos(x uint64) (n int) {
	return sovEscpos(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PrintRawRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEscpos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrintRawRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrintRawRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Raw", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscpos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEscpos
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEscpos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Raw = append(m.Raw[:0], dAtA[iNdEx:postIndex]...)
			if m.Raw == nil {
				m.Raw = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEscpos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEscpos
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEscpos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrintRawResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEscpos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrintRawResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrintRawResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipEscpos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEscpos
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEscpos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Element) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEscpos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Element: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Element: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Etype", wireType)
			}
			m.Etype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscpos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Etype |= ElementType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscpos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEscpos
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEscpos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContentText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentImage", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscpos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEscpos
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEscpos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContentImage = append(m.ContentImage[:0], dAtA[iNdEx:postIndex]...)
			if m.ContentImage == nil {
				m.ContentImage = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscpos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= ElementSize(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageContentType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscpos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEscpos
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEscpos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageContentType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEscpos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEscpos
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEscpos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ElementRow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEscpos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ElementRow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ElementRow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Elements", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscpos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEscpos
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEscpos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Elements = append(m.Elements, &Element{})
			if err := m.Elements[len(m.Elements)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Align", wireType)
			}
			m.Align = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscpos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Align |= ElementAlign(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEscpos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEscpos
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEscpos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrintElementsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEscpos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrintElementsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrintElementsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ElementRows", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscpos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEscpos
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEscpos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ElementRows = append(m.ElementRows, &ElementRow{})
			if err := m.ElementRows[len(m.ElementRows)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cut", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscpos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Cut = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipEscpos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEscpos
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEscpos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrintElementsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEscpos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrintElementsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrintElementsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipEscpos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEscpos
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEscpos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrintHtmlTemplateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEscpos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrintHtmlTemplateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrintHtmlTemplateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscpos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEscpos
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEscpos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscpos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEscpos
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEscpos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscpos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEscpos
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEscpos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Params == nil {
				m.Params = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEscpos
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEscpos
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthEscpos
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthEscpos
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEscpos
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthEscpos
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthEscpos
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipEscpos(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthEscpos
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Params[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cut", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscpos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Cut = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipEscpos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEscpos
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEscpos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrintHtmlTemplateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEscpos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrintHtmlTemplateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrintHtmlTemplateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipEscpos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEscpos
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEscpos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HtmlTemplate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEscpos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HtmlTemplate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HtmlTemplate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscpos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEscpos
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEscpos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscpos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEscpos
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEscpos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscpos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEscpos
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEscpos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEscpos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEscpos
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEscpos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewHtmlTemplateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEscpos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewHtmlTemplateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewHtmlTemplateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HtmlTemplate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscpos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEscpos
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEscpos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HtmlTemplate == nil {
				m.HtmlTemplate = &HtmlTemplate{}
			}
			if err := m.HtmlTemplate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEscpos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEscpos
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEscpos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewHtmlTemplateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEscpos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewHtmlTemplateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewHtmlTemplateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HtmlTemplate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscpos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEscpos
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEscpos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HtmlTemplate == nil {
				m.HtmlTemplate = &HtmlTemplate{}
			}
			if err := m.HtmlTemplate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEscpos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEscpos
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEscpos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListHtmlTemplatesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEscpos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListHtmlTemplatesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListHtmlTemplatesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipEscpos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEscpos
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEscpos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListHtmlTemplatesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEscpos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListHtmlTemplatesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListHtmlTemplatesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HtmlTemplates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscpos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEscpos
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEscpos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HtmlTemplates = append(m.HtmlTemplates, &HtmlTemplate{})
			if err := m.HtmlTemplates[len(m.HtmlTemplates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEscpos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEscpos
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEscpos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetHtmlTemplateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEscpos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetHtmlTemplateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetHtmlTemplateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscpos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEscpos
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEscpos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEscpos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEscpos
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEscpos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetHtmlTemplateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEscpos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetHtmlTemplateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetHtmlTemplateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HtmlTemplate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscpos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEscpos
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEscpos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HtmlTemplate == nil {
				m.HtmlTemplate = &HtmlTemplate{}
			}
			if err := m.HtmlTemplate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEscpos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEscpos
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEscpos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateHtmlTemplateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEscpos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateHtmlTemplateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateHtmlTemplateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HtmlTemplate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscpos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEscpos
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEscpos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HtmlTemplate == nil {
				m.HtmlTemplate = &HtmlTemplate{}
			}
			if err := m.HtmlTemplate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEscpos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEscpos
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEscpos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateHtmlTemplateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEscpos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateHtmlTemplateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateHtmlTemplateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HtmlTemplate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscpos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEscpos
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEscpos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HtmlTemplate == nil {
				m.HtmlTemplate = &HtmlTemplate{}
			}
			if err := m.HtmlTemplate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEscpos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEscpos
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEscpos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteHtmlTemplatesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEscpos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteHtmlTemplatesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteHtmlTemplatesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HtmlTemplatesId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscpos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEscpos
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEscpos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HtmlTemplatesId = append(m.HtmlTemplatesId, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEscpos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEscpos
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEscpos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteHtmlTemplatesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEscpos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteHtmlTemplatesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteHtmlTemplatesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipEscpos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEscpos
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEscpos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEscpos(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEscpos
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEscpos
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEscpos
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEscpos
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthEscpos
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowEscpos
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipEscpos(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthEscpos
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthEscpos = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEscpos   = fmt.Errorf("proto: integer overflow")
)
