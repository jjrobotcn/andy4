// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: escpos.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace EscposService {
  public static partial class EscPosService
  {
    static readonly string __ServiceName = "escposService.EscPosService";

    static readonly grpc::Marshaller<global::EscposService.PrintRawRequest> __Marshaller_escposService_PrintRawRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::EscposService.PrintRawRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::EscposService.PrintRawResponse> __Marshaller_escposService_PrintRawResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::EscposService.PrintRawResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::EscposService.PrintElementsRequest> __Marshaller_escposService_PrintElementsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::EscposService.PrintElementsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::EscposService.PrintElementsResponse> __Marshaller_escposService_PrintElementsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::EscposService.PrintElementsResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::EscposService.PrintHtmlTemplateRequest> __Marshaller_escposService_PrintHtmlTemplateRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::EscposService.PrintHtmlTemplateRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::EscposService.PrintHtmlTemplateResponse> __Marshaller_escposService_PrintHtmlTemplateResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::EscposService.PrintHtmlTemplateResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::EscposService.NewHtmlTemplateRequest> __Marshaller_escposService_NewHtmlTemplateRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::EscposService.NewHtmlTemplateRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::EscposService.NewHtmlTemplateResponse> __Marshaller_escposService_NewHtmlTemplateResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::EscposService.NewHtmlTemplateResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::EscposService.ListHtmlTemplatesRequest> __Marshaller_escposService_ListHtmlTemplatesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::EscposService.ListHtmlTemplatesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::EscposService.ListHtmlTemplatesResponse> __Marshaller_escposService_ListHtmlTemplatesResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::EscposService.ListHtmlTemplatesResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::EscposService.GetHtmlTemplateRequest> __Marshaller_escposService_GetHtmlTemplateRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::EscposService.GetHtmlTemplateRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::EscposService.GetHtmlTemplateResponse> __Marshaller_escposService_GetHtmlTemplateResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::EscposService.GetHtmlTemplateResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::EscposService.UpdateHtmlTemplateRequest> __Marshaller_escposService_UpdateHtmlTemplateRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::EscposService.UpdateHtmlTemplateRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::EscposService.UpdateHtmlTemplateResponse> __Marshaller_escposService_UpdateHtmlTemplateResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::EscposService.UpdateHtmlTemplateResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::EscposService.DeleteHtmlTemplatesRequest> __Marshaller_escposService_DeleteHtmlTemplatesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::EscposService.DeleteHtmlTemplatesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::EscposService.DeleteHtmlTemplatesResponse> __Marshaller_escposService_DeleteHtmlTemplatesResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::EscposService.DeleteHtmlTemplatesResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::EscposService.PrintRawRequest, global::EscposService.PrintRawResponse> __Method_PrintRaw = new grpc::Method<global::EscposService.PrintRawRequest, global::EscposService.PrintRawResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PrintRaw",
        __Marshaller_escposService_PrintRawRequest,
        __Marshaller_escposService_PrintRawResponse);

    static readonly grpc::Method<global::EscposService.PrintElementsRequest, global::EscposService.PrintElementsResponse> __Method_PrintElements = new grpc::Method<global::EscposService.PrintElementsRequest, global::EscposService.PrintElementsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PrintElements",
        __Marshaller_escposService_PrintElementsRequest,
        __Marshaller_escposService_PrintElementsResponse);

    static readonly grpc::Method<global::EscposService.PrintHtmlTemplateRequest, global::EscposService.PrintHtmlTemplateResponse> __Method_PrintHtmlTemplate = new grpc::Method<global::EscposService.PrintHtmlTemplateRequest, global::EscposService.PrintHtmlTemplateResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PrintHtmlTemplate",
        __Marshaller_escposService_PrintHtmlTemplateRequest,
        __Marshaller_escposService_PrintHtmlTemplateResponse);

    static readonly grpc::Method<global::EscposService.NewHtmlTemplateRequest, global::EscposService.NewHtmlTemplateResponse> __Method_NewHtmlTemplate = new grpc::Method<global::EscposService.NewHtmlTemplateRequest, global::EscposService.NewHtmlTemplateResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "NewHtmlTemplate",
        __Marshaller_escposService_NewHtmlTemplateRequest,
        __Marshaller_escposService_NewHtmlTemplateResponse);

    static readonly grpc::Method<global::EscposService.ListHtmlTemplatesRequest, global::EscposService.ListHtmlTemplatesResponse> __Method_ListHtmlTemplates = new grpc::Method<global::EscposService.ListHtmlTemplatesRequest, global::EscposService.ListHtmlTemplatesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListHtmlTemplates",
        __Marshaller_escposService_ListHtmlTemplatesRequest,
        __Marshaller_escposService_ListHtmlTemplatesResponse);

    static readonly grpc::Method<global::EscposService.GetHtmlTemplateRequest, global::EscposService.GetHtmlTemplateResponse> __Method_GetHtmlTemplate = new grpc::Method<global::EscposService.GetHtmlTemplateRequest, global::EscposService.GetHtmlTemplateResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetHtmlTemplate",
        __Marshaller_escposService_GetHtmlTemplateRequest,
        __Marshaller_escposService_GetHtmlTemplateResponse);

    static readonly grpc::Method<global::EscposService.UpdateHtmlTemplateRequest, global::EscposService.UpdateHtmlTemplateResponse> __Method_UpdateHtmlTemplate = new grpc::Method<global::EscposService.UpdateHtmlTemplateRequest, global::EscposService.UpdateHtmlTemplateResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateHtmlTemplate",
        __Marshaller_escposService_UpdateHtmlTemplateRequest,
        __Marshaller_escposService_UpdateHtmlTemplateResponse);

    static readonly grpc::Method<global::EscposService.DeleteHtmlTemplatesRequest, global::EscposService.DeleteHtmlTemplatesResponse> __Method_DeleteHtmlTemplates = new grpc::Method<global::EscposService.DeleteHtmlTemplatesRequest, global::EscposService.DeleteHtmlTemplatesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteHtmlTemplates",
        __Marshaller_escposService_DeleteHtmlTemplatesRequest,
        __Marshaller_escposService_DeleteHtmlTemplatesResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::EscposService.EscposReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of EscPosService</summary>
    [grpc::BindServiceMethod(typeof(EscPosService), "BindService")]
    public abstract partial class EscPosServiceBase
    {
      /// <summary>
      /// 打印bytes数据
      /// 打印模板与打印对象方式不满足业务需求
      /// 或希望接入其它已外部业务实现的打印组件时, 可通过此方法直接
      /// 传入打印内容
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::EscposService.PrintRawResponse> PrintRaw(global::EscposService.PrintRawRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 打印对象
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::EscposService.PrintElementsResponse> PrintElements(global::EscposService.PrintElementsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 打印预设的html模板内容
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::EscposService.PrintHtmlTemplateResponse> PrintHtmlTemplate(global::EscposService.PrintHtmlTemplateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 创建html模板
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::EscposService.NewHtmlTemplateResponse> NewHtmlTemplate(global::EscposService.NewHtmlTemplateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 获取html模板列表
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::EscposService.ListHtmlTemplatesResponse> ListHtmlTemplates(global::EscposService.ListHtmlTemplatesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 获取指定html模板内容
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::EscposService.GetHtmlTemplateResponse> GetHtmlTemplate(global::EscposService.GetHtmlTemplateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 更新html模板
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::EscposService.UpdateHtmlTemplateResponse> UpdateHtmlTemplate(global::EscposService.UpdateHtmlTemplateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 删除html模板
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::EscposService.DeleteHtmlTemplatesResponse> DeleteHtmlTemplates(global::EscposService.DeleteHtmlTemplatesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for EscPosService</summary>
    public partial class EscPosServiceClient : grpc::ClientBase<EscPosServiceClient>
    {
      /// <summary>Creates a new client for EscPosService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public EscPosServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for EscPosService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public EscPosServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected EscPosServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected EscPosServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// 打印bytes数据
      /// 打印模板与打印对象方式不满足业务需求
      /// 或希望接入其它已外部业务实现的打印组件时, 可通过此方法直接
      /// 传入打印内容
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::EscposService.PrintRawResponse PrintRaw(global::EscposService.PrintRawRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PrintRaw(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 打印bytes数据
      /// 打印模板与打印对象方式不满足业务需求
      /// 或希望接入其它已外部业务实现的打印组件时, 可通过此方法直接
      /// 传入打印内容
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::EscposService.PrintRawResponse PrintRaw(global::EscposService.PrintRawRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PrintRaw, null, options, request);
      }
      /// <summary>
      /// 打印bytes数据
      /// 打印模板与打印对象方式不满足业务需求
      /// 或希望接入其它已外部业务实现的打印组件时, 可通过此方法直接
      /// 传入打印内容
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::EscposService.PrintRawResponse> PrintRawAsync(global::EscposService.PrintRawRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PrintRawAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 打印bytes数据
      /// 打印模板与打印对象方式不满足业务需求
      /// 或希望接入其它已外部业务实现的打印组件时, 可通过此方法直接
      /// 传入打印内容
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::EscposService.PrintRawResponse> PrintRawAsync(global::EscposService.PrintRawRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PrintRaw, null, options, request);
      }
      /// <summary>
      /// 打印对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::EscposService.PrintElementsResponse PrintElements(global::EscposService.PrintElementsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PrintElements(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 打印对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::EscposService.PrintElementsResponse PrintElements(global::EscposService.PrintElementsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PrintElements, null, options, request);
      }
      /// <summary>
      /// 打印对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::EscposService.PrintElementsResponse> PrintElementsAsync(global::EscposService.PrintElementsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PrintElementsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 打印对象
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::EscposService.PrintElementsResponse> PrintElementsAsync(global::EscposService.PrintElementsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PrintElements, null, options, request);
      }
      /// <summary>
      /// 打印预设的html模板内容
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::EscposService.PrintHtmlTemplateResponse PrintHtmlTemplate(global::EscposService.PrintHtmlTemplateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PrintHtmlTemplate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 打印预设的html模板内容
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::EscposService.PrintHtmlTemplateResponse PrintHtmlTemplate(global::EscposService.PrintHtmlTemplateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PrintHtmlTemplate, null, options, request);
      }
      /// <summary>
      /// 打印预设的html模板内容
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::EscposService.PrintHtmlTemplateResponse> PrintHtmlTemplateAsync(global::EscposService.PrintHtmlTemplateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PrintHtmlTemplateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 打印预设的html模板内容
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::EscposService.PrintHtmlTemplateResponse> PrintHtmlTemplateAsync(global::EscposService.PrintHtmlTemplateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PrintHtmlTemplate, null, options, request);
      }
      /// <summary>
      /// 创建html模板
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::EscposService.NewHtmlTemplateResponse NewHtmlTemplate(global::EscposService.NewHtmlTemplateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return NewHtmlTemplate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 创建html模板
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::EscposService.NewHtmlTemplateResponse NewHtmlTemplate(global::EscposService.NewHtmlTemplateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_NewHtmlTemplate, null, options, request);
      }
      /// <summary>
      /// 创建html模板
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::EscposService.NewHtmlTemplateResponse> NewHtmlTemplateAsync(global::EscposService.NewHtmlTemplateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return NewHtmlTemplateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 创建html模板
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::EscposService.NewHtmlTemplateResponse> NewHtmlTemplateAsync(global::EscposService.NewHtmlTemplateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_NewHtmlTemplate, null, options, request);
      }
      /// <summary>
      /// 获取html模板列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::EscposService.ListHtmlTemplatesResponse ListHtmlTemplates(global::EscposService.ListHtmlTemplatesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListHtmlTemplates(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 获取html模板列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::EscposService.ListHtmlTemplatesResponse ListHtmlTemplates(global::EscposService.ListHtmlTemplatesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListHtmlTemplates, null, options, request);
      }
      /// <summary>
      /// 获取html模板列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::EscposService.ListHtmlTemplatesResponse> ListHtmlTemplatesAsync(global::EscposService.ListHtmlTemplatesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListHtmlTemplatesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 获取html模板列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::EscposService.ListHtmlTemplatesResponse> ListHtmlTemplatesAsync(global::EscposService.ListHtmlTemplatesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListHtmlTemplates, null, options, request);
      }
      /// <summary>
      /// 获取指定html模板内容
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::EscposService.GetHtmlTemplateResponse GetHtmlTemplate(global::EscposService.GetHtmlTemplateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetHtmlTemplate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 获取指定html模板内容
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::EscposService.GetHtmlTemplateResponse GetHtmlTemplate(global::EscposService.GetHtmlTemplateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetHtmlTemplate, null, options, request);
      }
      /// <summary>
      /// 获取指定html模板内容
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::EscposService.GetHtmlTemplateResponse> GetHtmlTemplateAsync(global::EscposService.GetHtmlTemplateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetHtmlTemplateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 获取指定html模板内容
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::EscposService.GetHtmlTemplateResponse> GetHtmlTemplateAsync(global::EscposService.GetHtmlTemplateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetHtmlTemplate, null, options, request);
      }
      /// <summary>
      /// 更新html模板
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::EscposService.UpdateHtmlTemplateResponse UpdateHtmlTemplate(global::EscposService.UpdateHtmlTemplateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateHtmlTemplate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 更新html模板
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::EscposService.UpdateHtmlTemplateResponse UpdateHtmlTemplate(global::EscposService.UpdateHtmlTemplateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateHtmlTemplate, null, options, request);
      }
      /// <summary>
      /// 更新html模板
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::EscposService.UpdateHtmlTemplateResponse> UpdateHtmlTemplateAsync(global::EscposService.UpdateHtmlTemplateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateHtmlTemplateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 更新html模板
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::EscposService.UpdateHtmlTemplateResponse> UpdateHtmlTemplateAsync(global::EscposService.UpdateHtmlTemplateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateHtmlTemplate, null, options, request);
      }
      /// <summary>
      /// 删除html模板
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::EscposService.DeleteHtmlTemplatesResponse DeleteHtmlTemplates(global::EscposService.DeleteHtmlTemplatesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteHtmlTemplates(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 删除html模板
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::EscposService.DeleteHtmlTemplatesResponse DeleteHtmlTemplates(global::EscposService.DeleteHtmlTemplatesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteHtmlTemplates, null, options, request);
      }
      /// <summary>
      /// 删除html模板
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::EscposService.DeleteHtmlTemplatesResponse> DeleteHtmlTemplatesAsync(global::EscposService.DeleteHtmlTemplatesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteHtmlTemplatesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 删除html模板
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::EscposService.DeleteHtmlTemplatesResponse> DeleteHtmlTemplatesAsync(global::EscposService.DeleteHtmlTemplatesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteHtmlTemplates, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override EscPosServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new EscPosServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(EscPosServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_PrintRaw, serviceImpl.PrintRaw)
          .AddMethod(__Method_PrintElements, serviceImpl.PrintElements)
          .AddMethod(__Method_PrintHtmlTemplate, serviceImpl.PrintHtmlTemplate)
          .AddMethod(__Method_NewHtmlTemplate, serviceImpl.NewHtmlTemplate)
          .AddMethod(__Method_ListHtmlTemplates, serviceImpl.ListHtmlTemplates)
          .AddMethod(__Method_GetHtmlTemplate, serviceImpl.GetHtmlTemplate)
          .AddMethod(__Method_UpdateHtmlTemplate, serviceImpl.UpdateHtmlTemplate)
          .AddMethod(__Method_DeleteHtmlTemplates, serviceImpl.DeleteHtmlTemplates).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, EscPosServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_PrintRaw, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::EscposService.PrintRawRequest, global::EscposService.PrintRawResponse>(serviceImpl.PrintRaw));
      serviceBinder.AddMethod(__Method_PrintElements, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::EscposService.PrintElementsRequest, global::EscposService.PrintElementsResponse>(serviceImpl.PrintElements));
      serviceBinder.AddMethod(__Method_PrintHtmlTemplate, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::EscposService.PrintHtmlTemplateRequest, global::EscposService.PrintHtmlTemplateResponse>(serviceImpl.PrintHtmlTemplate));
      serviceBinder.AddMethod(__Method_NewHtmlTemplate, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::EscposService.NewHtmlTemplateRequest, global::EscposService.NewHtmlTemplateResponse>(serviceImpl.NewHtmlTemplate));
      serviceBinder.AddMethod(__Method_ListHtmlTemplates, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::EscposService.ListHtmlTemplatesRequest, global::EscposService.ListHtmlTemplatesResponse>(serviceImpl.ListHtmlTemplates));
      serviceBinder.AddMethod(__Method_GetHtmlTemplate, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::EscposService.GetHtmlTemplateRequest, global::EscposService.GetHtmlTemplateResponse>(serviceImpl.GetHtmlTemplate));
      serviceBinder.AddMethod(__Method_UpdateHtmlTemplate, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::EscposService.UpdateHtmlTemplateRequest, global::EscposService.UpdateHtmlTemplateResponse>(serviceImpl.UpdateHtmlTemplate));
      serviceBinder.AddMethod(__Method_DeleteHtmlTemplates, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::EscposService.DeleteHtmlTemplatesRequest, global::EscposService.DeleteHtmlTemplatesResponse>(serviceImpl.DeleteHtmlTemplates));
    }

  }
}
#endregion
