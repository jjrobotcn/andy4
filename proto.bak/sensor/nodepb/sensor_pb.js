/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.sensorService.DataAgv', null, global);
goog.exportSymbol('proto.sensorService.DataObs', null, global);
goog.exportSymbol('proto.sensorService.DataTouch', null, global);
goog.exportSymbol('proto.sensorService.DataType', null, global);
goog.exportSymbol('proto.sensorService.DetectDirection', null, global);
goog.exportSymbol('proto.sensorService.DetectDistance', null, global);
goog.exportSymbol('proto.sensorService.GetDetectRequest', null, global);
goog.exportSymbol('proto.sensorService.GetDetectResponse', null, global);
goog.exportSymbol('proto.sensorService.GetMotionInductionRequest', null, global);
goog.exportSymbol('proto.sensorService.GetMotionInductionResponse', null, global);
goog.exportSymbol('proto.sensorService.GetTouchRequest', null, global);
goog.exportSymbol('proto.sensorService.GetTouchResponse', null, global);
goog.exportSymbol('proto.sensorService.RawRequest', null, global);
goog.exportSymbol('proto.sensorService.RawResponse', null, global);
goog.exportSymbol('proto.sensorService.UpdateReq', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sensorService.GetDetectRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sensorService.GetDetectRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sensorService.GetDetectRequest.displayName = 'proto.sensorService.GetDetectRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sensorService.GetDetectResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sensorService.GetDetectResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sensorService.GetDetectResponse.displayName = 'proto.sensorService.GetDetectResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sensorService.GetMotionInductionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sensorService.GetMotionInductionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sensorService.GetMotionInductionRequest.displayName = 'proto.sensorService.GetMotionInductionRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sensorService.GetMotionInductionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sensorService.GetMotionInductionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sensorService.GetMotionInductionResponse.displayName = 'proto.sensorService.GetMotionInductionResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sensorService.GetTouchRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sensorService.GetTouchRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sensorService.GetTouchRequest.displayName = 'proto.sensorService.GetTouchRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sensorService.GetTouchResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sensorService.GetTouchResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sensorService.GetTouchResponse.displayName = 'proto.sensorService.GetTouchResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sensorService.DataObs = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sensorService.DataObs, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sensorService.DataObs.displayName = 'proto.sensorService.DataObs';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sensorService.DataAgv = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sensorService.DataAgv.repeatedFields_, null);
};
goog.inherits(proto.sensorService.DataAgv, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sensorService.DataAgv.displayName = 'proto.sensorService.DataAgv';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sensorService.DataTouch = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sensorService.DataTouch, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sensorService.DataTouch.displayName = 'proto.sensorService.DataTouch';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sensorService.UpdateReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sensorService.UpdateReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sensorService.UpdateReq.displayName = 'proto.sensorService.UpdateReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sensorService.RawRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sensorService.RawRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sensorService.RawRequest.displayName = 'proto.sensorService.RawRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sensorService.RawResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sensorService.RawResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sensorService.RawResponse.displayName = 'proto.sensorService.RawResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sensorService.GetDetectRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.sensorService.GetDetectRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sensorService.GetDetectRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sensorService.GetDetectRequest.toObject = function(includeInstance, msg) {
  var obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sensorService.GetDetectRequest}
 */
proto.sensorService.GetDetectRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sensorService.GetDetectRequest;
  return proto.sensorService.GetDetectRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sensorService.GetDetectRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sensorService.GetDetectRequest}
 */
proto.sensorService.GetDetectRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sensorService.GetDetectRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sensorService.GetDetectRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sensorService.GetDetectRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sensorService.GetDetectRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sensorService.GetDetectResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.sensorService.GetDetectResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sensorService.GetDetectResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sensorService.GetDetectResponse.toObject = function(includeInstance, msg) {
  var obj = {
    direction: jspb.Message.getFieldWithDefault(msg, 1, 0),
    distance: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sensorService.GetDetectResponse}
 */
proto.sensorService.GetDetectResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sensorService.GetDetectResponse;
  return proto.sensorService.GetDetectResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sensorService.GetDetectResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sensorService.GetDetectResponse}
 */
proto.sensorService.GetDetectResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.sensorService.DetectDirection} */ (reader.readEnum());
      msg.setDirection(value);
      break;
    case 2:
      var value = /** @type {!proto.sensorService.DetectDistance} */ (reader.readEnum());
      msg.setDistance(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sensorService.GetDetectResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sensorService.GetDetectResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sensorService.GetDetectResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sensorService.GetDetectResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDirection();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDistance();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional DetectDirection direction = 1;
 * @return {!proto.sensorService.DetectDirection}
 */
proto.sensorService.GetDetectResponse.prototype.getDirection = function() {
  return /** @type {!proto.sensorService.DetectDirection} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.sensorService.DetectDirection} value */
proto.sensorService.GetDetectResponse.prototype.setDirection = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional DetectDistance distance = 2;
 * @return {!proto.sensorService.DetectDistance}
 */
proto.sensorService.GetDetectResponse.prototype.getDistance = function() {
  return /** @type {!proto.sensorService.DetectDistance} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.sensorService.DetectDistance} value */
proto.sensorService.GetDetectResponse.prototype.setDistance = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sensorService.GetMotionInductionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.sensorService.GetMotionInductionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sensorService.GetMotionInductionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sensorService.GetMotionInductionRequest.toObject = function(includeInstance, msg) {
  var obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sensorService.GetMotionInductionRequest}
 */
proto.sensorService.GetMotionInductionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sensorService.GetMotionInductionRequest;
  return proto.sensorService.GetMotionInductionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sensorService.GetMotionInductionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sensorService.GetMotionInductionRequest}
 */
proto.sensorService.GetMotionInductionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sensorService.GetMotionInductionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sensorService.GetMotionInductionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sensorService.GetMotionInductionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sensorService.GetMotionInductionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sensorService.GetMotionInductionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.sensorService.GetMotionInductionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sensorService.GetMotionInductionResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sensorService.GetMotionInductionResponse.toObject = function(includeInstance, msg) {
  var obj = {
    left: jspb.Message.getFieldWithDefault(msg, 1, false),
    right: jspb.Message.getFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sensorService.GetMotionInductionResponse}
 */
proto.sensorService.GetMotionInductionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sensorService.GetMotionInductionResponse;
  return proto.sensorService.GetMotionInductionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sensorService.GetMotionInductionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sensorService.GetMotionInductionResponse}
 */
proto.sensorService.GetMotionInductionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setLeft(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sensorService.GetMotionInductionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sensorService.GetMotionInductionResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sensorService.GetMotionInductionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sensorService.GetMotionInductionResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLeft();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getRight();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional bool left = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.sensorService.GetMotionInductionResponse.prototype.getLeft = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.sensorService.GetMotionInductionResponse.prototype.setLeft = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool right = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.sensorService.GetMotionInductionResponse.prototype.getRight = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.sensorService.GetMotionInductionResponse.prototype.setRight = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sensorService.GetTouchRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.sensorService.GetTouchRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sensorService.GetTouchRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sensorService.GetTouchRequest.toObject = function(includeInstance, msg) {
  var obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sensorService.GetTouchRequest}
 */
proto.sensorService.GetTouchRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sensorService.GetTouchRequest;
  return proto.sensorService.GetTouchRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sensorService.GetTouchRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sensorService.GetTouchRequest}
 */
proto.sensorService.GetTouchRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sensorService.GetTouchRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sensorService.GetTouchRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sensorService.GetTouchRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sensorService.GetTouchRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sensorService.GetTouchResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.sensorService.GetTouchResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sensorService.GetTouchResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sensorService.GetTouchResponse.toObject = function(includeInstance, msg) {
  var obj = {
    handLeft: jspb.Message.getFieldWithDefault(msg, 1, false),
    handRight: jspb.Message.getFieldWithDefault(msg, 2, false),
    head: jspb.Message.getFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sensorService.GetTouchResponse}
 */
proto.sensorService.GetTouchResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sensorService.GetTouchResponse;
  return proto.sensorService.GetTouchResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sensorService.GetTouchResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sensorService.GetTouchResponse}
 */
proto.sensorService.GetTouchResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHandLeft(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHandRight(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHead(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sensorService.GetTouchResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sensorService.GetTouchResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sensorService.GetTouchResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sensorService.GetTouchResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHandLeft();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getHandRight();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getHead();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional bool hand_left = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.sensorService.GetTouchResponse.prototype.getHandLeft = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.sensorService.GetTouchResponse.prototype.setHandLeft = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool hand_right = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.sensorService.GetTouchResponse.prototype.getHandRight = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.sensorService.GetTouchResponse.prototype.setHandRight = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool head = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.sensorService.GetTouchResponse.prototype.getHead = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.sensorService.GetTouchResponse.prototype.setHead = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sensorService.DataObs.prototype.toObject = function(opt_includeInstance) {
  return proto.sensorService.DataObs.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sensorService.DataObs} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sensorService.DataObs.toObject = function(includeInstance, msg) {
  var obj = {
    dataMap: (f = msg.getDataMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sensorService.DataObs}
 */
proto.sensorService.DataObs.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sensorService.DataObs;
  return proto.sensorService.DataObs.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sensorService.DataObs} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sensorService.DataObs}
 */
proto.sensorService.DataObs.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getDataMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readInt32, null, "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sensorService.DataObs.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sensorService.DataObs.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sensorService.DataObs} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sensorService.DataObs.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDataMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeInt32);
  }
};


/**
 * map<string, int32> data = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,number>}
 */
proto.sensorService.DataObs.prototype.getDataMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,number>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 */
proto.sensorService.DataObs.prototype.clearDataMap = function() {
  this.getDataMap().clear();
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sensorService.DataAgv.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sensorService.DataAgv.prototype.toObject = function(opt_includeInstance) {
  return proto.sensorService.DataAgv.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sensorService.DataAgv} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sensorService.DataAgv.toObject = function(includeInstance, msg) {
  var obj = {
    cardId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    dataList: jspb.Message.getRepeatedField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sensorService.DataAgv}
 */
proto.sensorService.DataAgv.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sensorService.DataAgv;
  return proto.sensorService.DataAgv.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sensorService.DataAgv} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sensorService.DataAgv}
 */
proto.sensorService.DataAgv.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCardId(value);
      break;
    case 2:
      var value = /** @type {!Array<boolean>} */ (reader.readPackedBool());
      msg.setDataList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sensorService.DataAgv.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sensorService.DataAgv.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sensorService.DataAgv} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sensorService.DataAgv.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCardId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDataList();
  if (f.length > 0) {
    writer.writePackedBool(
      2,
      f
    );
  }
};


/**
 * optional string card_id = 1;
 * @return {string}
 */
proto.sensorService.DataAgv.prototype.getCardId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.sensorService.DataAgv.prototype.setCardId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated bool data = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {!Array<boolean>}
 */
proto.sensorService.DataAgv.prototype.getDataList = function() {
  return /** @type {!Array<boolean>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array<boolean>} value */
proto.sensorService.DataAgv.prototype.setDataList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {boolean} value
 * @param {number=} opt_index
 */
proto.sensorService.DataAgv.prototype.addData = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.sensorService.DataAgv.prototype.clearDataList = function() {
  this.setDataList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sensorService.DataTouch.prototype.toObject = function(opt_includeInstance) {
  return proto.sensorService.DataTouch.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sensorService.DataTouch} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sensorService.DataTouch.toObject = function(includeInstance, msg) {
  var obj = {
    touchedMap: (f = msg.getTouchedMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sensorService.DataTouch}
 */
proto.sensorService.DataTouch.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sensorService.DataTouch;
  return proto.sensorService.DataTouch.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sensorService.DataTouch} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sensorService.DataTouch}
 */
proto.sensorService.DataTouch.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getTouchedMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readBool, null, "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sensorService.DataTouch.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sensorService.DataTouch.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sensorService.DataTouch} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sensorService.DataTouch.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTouchedMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeBool);
  }
};


/**
 * map<string, bool> touched = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,boolean>}
 */
proto.sensorService.DataTouch.prototype.getTouchedMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,boolean>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 */
proto.sensorService.DataTouch.prototype.clearTouchedMap = function() {
  this.getTouchedMap().clear();
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sensorService.UpdateReq.prototype.toObject = function(opt_includeInstance) {
  return proto.sensorService.UpdateReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sensorService.UpdateReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sensorService.UpdateReq.toObject = function(includeInstance, msg) {
  var obj = {
    dtype: jspb.Message.getFieldWithDefault(msg, 1, 0),
    obs: (f = msg.getObs()) && proto.sensorService.DataObs.toObject(includeInstance, f),
    agv: (f = msg.getAgv()) && proto.sensorService.DataAgv.toObject(includeInstance, f),
    touch: (f = msg.getTouch()) && proto.sensorService.DataTouch.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sensorService.UpdateReq}
 */
proto.sensorService.UpdateReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sensorService.UpdateReq;
  return proto.sensorService.UpdateReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sensorService.UpdateReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sensorService.UpdateReq}
 */
proto.sensorService.UpdateReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.sensorService.DataType} */ (reader.readEnum());
      msg.setDtype(value);
      break;
    case 2:
      var value = new proto.sensorService.DataObs;
      reader.readMessage(value,proto.sensorService.DataObs.deserializeBinaryFromReader);
      msg.setObs(value);
      break;
    case 3:
      var value = new proto.sensorService.DataAgv;
      reader.readMessage(value,proto.sensorService.DataAgv.deserializeBinaryFromReader);
      msg.setAgv(value);
      break;
    case 5:
      var value = new proto.sensorService.DataTouch;
      reader.readMessage(value,proto.sensorService.DataTouch.deserializeBinaryFromReader);
      msg.setTouch(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sensorService.UpdateReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sensorService.UpdateReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sensorService.UpdateReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sensorService.UpdateReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDtype();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getObs();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.sensorService.DataObs.serializeBinaryToWriter
    );
  }
  f = message.getAgv();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.sensorService.DataAgv.serializeBinaryToWriter
    );
  }
  f = message.getTouch();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.sensorService.DataTouch.serializeBinaryToWriter
    );
  }
};


/**
 * optional DataType dtype = 1;
 * @return {!proto.sensorService.DataType}
 */
proto.sensorService.UpdateReq.prototype.getDtype = function() {
  return /** @type {!proto.sensorService.DataType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.sensorService.DataType} value */
proto.sensorService.UpdateReq.prototype.setDtype = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional DataObs obs = 2;
 * @return {?proto.sensorService.DataObs}
 */
proto.sensorService.UpdateReq.prototype.getObs = function() {
  return /** @type{?proto.sensorService.DataObs} */ (
    jspb.Message.getWrapperField(this, proto.sensorService.DataObs, 2));
};


/** @param {?proto.sensorService.DataObs|undefined} value */
proto.sensorService.UpdateReq.prototype.setObs = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.sensorService.UpdateReq.prototype.clearObs = function() {
  this.setObs(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sensorService.UpdateReq.prototype.hasObs = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional DataAgv agv = 3;
 * @return {?proto.sensorService.DataAgv}
 */
proto.sensorService.UpdateReq.prototype.getAgv = function() {
  return /** @type{?proto.sensorService.DataAgv} */ (
    jspb.Message.getWrapperField(this, proto.sensorService.DataAgv, 3));
};


/** @param {?proto.sensorService.DataAgv|undefined} value */
proto.sensorService.UpdateReq.prototype.setAgv = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.sensorService.UpdateReq.prototype.clearAgv = function() {
  this.setAgv(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sensorService.UpdateReq.prototype.hasAgv = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional DataTouch touch = 5;
 * @return {?proto.sensorService.DataTouch}
 */
proto.sensorService.UpdateReq.prototype.getTouch = function() {
  return /** @type{?proto.sensorService.DataTouch} */ (
    jspb.Message.getWrapperField(this, proto.sensorService.DataTouch, 5));
};


/** @param {?proto.sensorService.DataTouch|undefined} value */
proto.sensorService.UpdateReq.prototype.setTouch = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.sensorService.UpdateReq.prototype.clearTouch = function() {
  this.setTouch(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sensorService.UpdateReq.prototype.hasTouch = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sensorService.RawRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.sensorService.RawRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sensorService.RawRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sensorService.RawRequest.toObject = function(includeInstance, msg) {
  var obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sensorService.RawRequest}
 */
proto.sensorService.RawRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sensorService.RawRequest;
  return proto.sensorService.RawRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sensorService.RawRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sensorService.RawRequest}
 */
proto.sensorService.RawRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sensorService.RawRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sensorService.RawRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sensorService.RawRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sensorService.RawRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sensorService.RawResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.sensorService.RawResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sensorService.RawResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sensorService.RawResponse.toObject = function(includeInstance, msg) {
  var obj = {
    dtype: jspb.Message.getFieldWithDefault(msg, 1, 0),
    obs: (f = msg.getObs()) && proto.sensorService.DataObs.toObject(includeInstance, f),
    agv: (f = msg.getAgv()) && proto.sensorService.DataAgv.toObject(includeInstance, f),
    touch: (f = msg.getTouch()) && proto.sensorService.DataTouch.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sensorService.RawResponse}
 */
proto.sensorService.RawResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sensorService.RawResponse;
  return proto.sensorService.RawResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sensorService.RawResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sensorService.RawResponse}
 */
proto.sensorService.RawResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.sensorService.DataType} */ (reader.readEnum());
      msg.setDtype(value);
      break;
    case 2:
      var value = new proto.sensorService.DataObs;
      reader.readMessage(value,proto.sensorService.DataObs.deserializeBinaryFromReader);
      msg.setObs(value);
      break;
    case 3:
      var value = new proto.sensorService.DataAgv;
      reader.readMessage(value,proto.sensorService.DataAgv.deserializeBinaryFromReader);
      msg.setAgv(value);
      break;
    case 5:
      var value = new proto.sensorService.DataTouch;
      reader.readMessage(value,proto.sensorService.DataTouch.deserializeBinaryFromReader);
      msg.setTouch(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sensorService.RawResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sensorService.RawResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sensorService.RawResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sensorService.RawResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDtype();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getObs();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.sensorService.DataObs.serializeBinaryToWriter
    );
  }
  f = message.getAgv();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.sensorService.DataAgv.serializeBinaryToWriter
    );
  }
  f = message.getTouch();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.sensorService.DataTouch.serializeBinaryToWriter
    );
  }
};


/**
 * optional DataType dtype = 1;
 * @return {!proto.sensorService.DataType}
 */
proto.sensorService.RawResponse.prototype.getDtype = function() {
  return /** @type {!proto.sensorService.DataType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.sensorService.DataType} value */
proto.sensorService.RawResponse.prototype.setDtype = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional DataObs obs = 2;
 * @return {?proto.sensorService.DataObs}
 */
proto.sensorService.RawResponse.prototype.getObs = function() {
  return /** @type{?proto.sensorService.DataObs} */ (
    jspb.Message.getWrapperField(this, proto.sensorService.DataObs, 2));
};


/** @param {?proto.sensorService.DataObs|undefined} value */
proto.sensorService.RawResponse.prototype.setObs = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.sensorService.RawResponse.prototype.clearObs = function() {
  this.setObs(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sensorService.RawResponse.prototype.hasObs = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional DataAgv agv = 3;
 * @return {?proto.sensorService.DataAgv}
 */
proto.sensorService.RawResponse.prototype.getAgv = function() {
  return /** @type{?proto.sensorService.DataAgv} */ (
    jspb.Message.getWrapperField(this, proto.sensorService.DataAgv, 3));
};


/** @param {?proto.sensorService.DataAgv|undefined} value */
proto.sensorService.RawResponse.prototype.setAgv = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.sensorService.RawResponse.prototype.clearAgv = function() {
  this.setAgv(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sensorService.RawResponse.prototype.hasAgv = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional DataTouch touch = 5;
 * @return {?proto.sensorService.DataTouch}
 */
proto.sensorService.RawResponse.prototype.getTouch = function() {
  return /** @type{?proto.sensorService.DataTouch} */ (
    jspb.Message.getWrapperField(this, proto.sensorService.DataTouch, 5));
};


/** @param {?proto.sensorService.DataTouch|undefined} value */
proto.sensorService.RawResponse.prototype.setTouch = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.sensorService.RawResponse.prototype.clearTouch = function() {
  this.setTouch(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sensorService.RawResponse.prototype.hasTouch = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * @enum {number}
 */
proto.sensorService.DetectDirection = {
  _ZERO_DIR: 0,
  RELEASE_DIR: 1,
  LEFT: 2,
  CENTER: 3,
  RIGHT: 4
};

/**
 * @enum {number}
 */
proto.sensorService.DetectDistance = {
  _ZERO_DIS: 0,
  RELEASE_DIS: 1,
  CLOSE: 2,
  MEDIUM: 3,
  LONG: 4
};

/**
 * @enum {number}
 */
proto.sensorService.DataType = {
  UNKNOWN: 0,
  OBS: 1,
  AGV: 2,
  TOUCH: 4
};

goog.object.extend(exports, proto.sensorService);
