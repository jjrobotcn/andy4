// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensor.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30002
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30002 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class DataAgv;
@class DataObs;
@class DataTouch;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum DetectDirection

/** 检测方向 */
typedef GPB_ENUM(DetectDirection) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  DetectDirection_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  /** 零值, 不使用 */
  DetectDirection_ZeroDir = 0,

  /** 释放 */
  DetectDirection_ReleaseDir = 1,

  /** 居左 */
  DetectDirection_Left = 2,

  /** 居中 */
  DetectDirection_Center = 3,

  /** 居右 */
  DetectDirection_Right = 4,
};

GPBEnumDescriptor *DetectDirection_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL DetectDirection_IsValidValue(int32_t value);

#pragma mark - Enum DetectDistance

/** 检测距离 */
typedef GPB_ENUM(DetectDistance) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  DetectDistance_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  /** 零值, 不使用 */
  DetectDistance_ZeroDis = 0,

  /** 释放 */
  DetectDistance_ReleaseDis = 1,

  /** 近距 */
  DetectDistance_Close = 2,

  /** 中距 */
  DetectDistance_Medium = 3,

  /** 远距 */
  DetectDistance_Long = 4,
};

GPBEnumDescriptor *DetectDistance_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL DetectDistance_IsValidValue(int32_t value);

#pragma mark - Enum DataType

typedef GPB_ENUM(DataType) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  DataType_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  DataType_Unknown = 0,
  DataType_Obs = 1,
  DataType_Agv = 2,
  DataType_Touch = 4,
};

GPBEnumDescriptor *DataType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL DataType_IsValidValue(int32_t value);

#pragma mark - SensorRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
@interface SensorRoot : GPBRootObject
@end

#pragma mark - GetDetectRequest

@interface GetDetectRequest : GPBMessage

@end

#pragma mark - GetDetectResponse

typedef GPB_ENUM(GetDetectResponse_FieldNumber) {
  GetDetectResponse_FieldNumber_Direction = 1,
  GetDetectResponse_FieldNumber_Distance = 2,
};

/**
 * 传感器状态流数据
 * stype: 数据类型
 **/
@interface GetDetectResponse : GPBMessage

@property(nonatomic, readwrite) DetectDirection direction;

@property(nonatomic, readwrite) DetectDistance distance;

@end

/**
 * Fetches the raw value of a @c GetDetectResponse's @c direction property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t GetDetectResponse_Direction_RawValue(GetDetectResponse *message);
/**
 * Sets the raw value of an @c GetDetectResponse's @c direction property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetGetDetectResponse_Direction_RawValue(GetDetectResponse *message, int32_t value);

/**
 * Fetches the raw value of a @c GetDetectResponse's @c distance property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t GetDetectResponse_Distance_RawValue(GetDetectResponse *message);
/**
 * Sets the raw value of an @c GetDetectResponse's @c distance property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetGetDetectResponse_Distance_RawValue(GetDetectResponse *message, int32_t value);

#pragma mark - GetMotionInductionRequest

@interface GetMotionInductionRequest : GPBMessage

@end

#pragma mark - GetMotionInductionResponse

typedef GPB_ENUM(GetMotionInductionResponse_FieldNumber) {
  GetMotionInductionResponse_FieldNumber_Left = 1,
  GetMotionInductionResponse_FieldNumber_Right = 2,
};

@interface GetMotionInductionResponse : GPBMessage

/** 左侧感应指示 */
@property(nonatomic, readwrite) BOOL left;

/** 右侧感应指示 */
@property(nonatomic, readwrite) BOOL right;

@end

#pragma mark - GetTouchRequest

@interface GetTouchRequest : GPBMessage

@end

#pragma mark - GetTouchResponse

typedef GPB_ENUM(GetTouchResponse_FieldNumber) {
  GetTouchResponse_FieldNumber_HandLeft = 1,
  GetTouchResponse_FieldNumber_HandRight = 2,
  GetTouchResponse_FieldNumber_Head = 3,
};

/**
 * 触摸状态流数据
 **/
@interface GetTouchResponse : GPBMessage

/** 左手触摸 */
@property(nonatomic, readwrite) BOOL handLeft;

/** 右手触摸 */
@property(nonatomic, readwrite) BOOL handRight;

/** 头部触摸 */
@property(nonatomic, readwrite) BOOL head;

@end

#pragma mark - DataObs

typedef GPB_ENUM(DataObs_FieldNumber) {
  DataObs_FieldNumber_Data_p = 1,
};

/**
 * 避障传感器数据
 * e.g. {"topRight: 30", "bottomMiddle": 10}
 * *topRight等key非最终使用, 仅作为示例
 **/
@interface DataObs : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) GPBStringInt32Dictionary *data_p;
/** The number of items in @c data_p without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger data_p_Count;

@end

#pragma mark - DataAgv

typedef GPB_ENUM(DataAgv_FieldNumber) {
  DataAgv_FieldNumber_CardId = 1,
  DataAgv_FieldNumber_DataArray = 2,
};

/**
 * agv数据
 * card_id: 感应卡点id
 * data: 是否为激活状态列表
 **/
@interface DataAgv : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *cardId;

@property(nonatomic, readwrite, strong, null_resettable) GPBBoolArray *dataArray;
/** The number of items in @c dataArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger dataArray_Count;

@end

#pragma mark - DataTouch

typedef GPB_ENUM(DataTouch_FieldNumber) {
  DataTouch_FieldNumber_Touched = 1,
};

/**
 * 触摸数据
 * e.g. {hand_left: false, hand_right: true, head: true}
 **/
@interface DataTouch : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) GPBStringBoolDictionary *touched;
/** The number of items in @c touched without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger touched_Count;

@end

#pragma mark - UpdateReq

typedef GPB_ENUM(UpdateReq_FieldNumber) {
  UpdateReq_FieldNumber_Dtype = 1,
  UpdateReq_FieldNumber_Obs = 2,
  UpdateReq_FieldNumber_Agv = 3,
  UpdateReq_FieldNumber_Touch = 5,
};

/**
 * 使用器数据更新请求
 * dtype: 传感器更新数据类型
 **/
@interface UpdateReq : GPBMessage

@property(nonatomic, readwrite) DataType dtype;

@property(nonatomic, readwrite, strong, null_resettable) DataObs *obs;
/** Test to see if @c obs has been set. */
@property(nonatomic, readwrite) BOOL hasObs;

@property(nonatomic, readwrite, strong, null_resettable) DataAgv *agv;
/** Test to see if @c agv has been set. */
@property(nonatomic, readwrite) BOOL hasAgv;

@property(nonatomic, readwrite, strong, null_resettable) DataTouch *touch;
/** Test to see if @c touch has been set. */
@property(nonatomic, readwrite) BOOL hasTouch;

@end

/**
 * Fetches the raw value of a @c UpdateReq's @c dtype property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t UpdateReq_Dtype_RawValue(UpdateReq *message);
/**
 * Sets the raw value of an @c UpdateReq's @c dtype property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetUpdateReq_Dtype_RawValue(UpdateReq *message, int32_t value);

#pragma mark - RawRequest

@interface RawRequest : GPBMessage

@end

#pragma mark - RawResponse

typedef GPB_ENUM(RawResponse_FieldNumber) {
  RawResponse_FieldNumber_Dtype = 1,
  RawResponse_FieldNumber_Obs = 2,
  RawResponse_FieldNumber_Agv = 3,
  RawResponse_FieldNumber_Touch = 5,
};

/**
 * 原始数据返回
 * dtype: 传感器更新数据类型
 **/
@interface RawResponse : GPBMessage

@property(nonatomic, readwrite) DataType dtype;

@property(nonatomic, readwrite, strong, null_resettable) DataObs *obs;
/** Test to see if @c obs has been set. */
@property(nonatomic, readwrite) BOOL hasObs;

@property(nonatomic, readwrite, strong, null_resettable) DataAgv *agv;
/** Test to see if @c agv has been set. */
@property(nonatomic, readwrite) BOOL hasAgv;

@property(nonatomic, readwrite, strong, null_resettable) DataTouch *touch;
/** Test to see if @c touch has been set. */
@property(nonatomic, readwrite) BOOL hasTouch;

@end

/**
 * Fetches the raw value of a @c RawResponse's @c dtype property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t RawResponse_Dtype_RawValue(RawResponse *message);
/**
 * Sets the raw value of an @c RawResponse's @c dtype property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetRawResponse_Dtype_RawValue(RawResponse *message, int32_t value);

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
