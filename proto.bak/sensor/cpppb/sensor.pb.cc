// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensor.proto

#include "sensor.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_sensor_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DataAgv_sensor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sensor_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DataObs_DataEntry_DoNotUse_sensor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sensor_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DataTouch_TouchedEntry_DoNotUse_sensor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sensor_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_DataObs_sensor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sensor_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_DataTouch_sensor_2eproto;
namespace sensorService {
class GetDetectRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetDetectRequest> _instance;
} _GetDetectRequest_default_instance_;
class GetDetectResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetDetectResponse> _instance;
} _GetDetectResponse_default_instance_;
class GetMotionInductionRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetMotionInductionRequest> _instance;
} _GetMotionInductionRequest_default_instance_;
class GetMotionInductionResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetMotionInductionResponse> _instance;
} _GetMotionInductionResponse_default_instance_;
class GetTouchRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetTouchRequest> _instance;
} _GetTouchRequest_default_instance_;
class GetTouchResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetTouchResponse> _instance;
} _GetTouchResponse_default_instance_;
class DataObs_DataEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DataObs_DataEntry_DoNotUse> _instance;
} _DataObs_DataEntry_DoNotUse_default_instance_;
class DataObsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DataObs> _instance;
} _DataObs_default_instance_;
class DataAgvDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DataAgv> _instance;
} _DataAgv_default_instance_;
class DataTouch_TouchedEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DataTouch_TouchedEntry_DoNotUse> _instance;
} _DataTouch_TouchedEntry_DoNotUse_default_instance_;
class DataTouchDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DataTouch> _instance;
} _DataTouch_default_instance_;
class UpdateReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UpdateReq> _instance;
} _UpdateReq_default_instance_;
class RawRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RawRequest> _instance;
} _RawRequest_default_instance_;
class RawResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RawResponse> _instance;
} _RawResponse_default_instance_;
}  // namespace sensorService
static void InitDefaultsGetDetectRequest_sensor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensorService::_GetDetectRequest_default_instance_;
    new (ptr) ::sensorService::GetDetectRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensorService::GetDetectRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetDetectRequest_sensor_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetDetectRequest_sensor_2eproto}, {}};

static void InitDefaultsGetDetectResponse_sensor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensorService::_GetDetectResponse_default_instance_;
    new (ptr) ::sensorService::GetDetectResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensorService::GetDetectResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetDetectResponse_sensor_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetDetectResponse_sensor_2eproto}, {}};

static void InitDefaultsGetMotionInductionRequest_sensor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensorService::_GetMotionInductionRequest_default_instance_;
    new (ptr) ::sensorService::GetMotionInductionRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensorService::GetMotionInductionRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetMotionInductionRequest_sensor_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetMotionInductionRequest_sensor_2eproto}, {}};

static void InitDefaultsGetMotionInductionResponse_sensor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensorService::_GetMotionInductionResponse_default_instance_;
    new (ptr) ::sensorService::GetMotionInductionResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensorService::GetMotionInductionResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetMotionInductionResponse_sensor_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetMotionInductionResponse_sensor_2eproto}, {}};

static void InitDefaultsGetTouchRequest_sensor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensorService::_GetTouchRequest_default_instance_;
    new (ptr) ::sensorService::GetTouchRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensorService::GetTouchRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetTouchRequest_sensor_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetTouchRequest_sensor_2eproto}, {}};

static void InitDefaultsGetTouchResponse_sensor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensorService::_GetTouchResponse_default_instance_;
    new (ptr) ::sensorService::GetTouchResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensorService::GetTouchResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetTouchResponse_sensor_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetTouchResponse_sensor_2eproto}, {}};

static void InitDefaultsDataObs_DataEntry_DoNotUse_sensor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensorService::_DataObs_DataEntry_DoNotUse_default_instance_;
    new (ptr) ::sensorService::DataObs_DataEntry_DoNotUse();
  }
  ::sensorService::DataObs_DataEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DataObs_DataEntry_DoNotUse_sensor_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDataObs_DataEntry_DoNotUse_sensor_2eproto}, {}};

static void InitDefaultsDataObs_sensor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensorService::_DataObs_default_instance_;
    new (ptr) ::sensorService::DataObs();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensorService::DataObs::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_DataObs_sensor_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsDataObs_sensor_2eproto}, {
      &scc_info_DataObs_DataEntry_DoNotUse_sensor_2eproto.base,}};

static void InitDefaultsDataAgv_sensor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensorService::_DataAgv_default_instance_;
    new (ptr) ::sensorService::DataAgv();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensorService::DataAgv::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DataAgv_sensor_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDataAgv_sensor_2eproto}, {}};

static void InitDefaultsDataTouch_TouchedEntry_DoNotUse_sensor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensorService::_DataTouch_TouchedEntry_DoNotUse_default_instance_;
    new (ptr) ::sensorService::DataTouch_TouchedEntry_DoNotUse();
  }
  ::sensorService::DataTouch_TouchedEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DataTouch_TouchedEntry_DoNotUse_sensor_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDataTouch_TouchedEntry_DoNotUse_sensor_2eproto}, {}};

static void InitDefaultsDataTouch_sensor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensorService::_DataTouch_default_instance_;
    new (ptr) ::sensorService::DataTouch();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensorService::DataTouch::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_DataTouch_sensor_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsDataTouch_sensor_2eproto}, {
      &scc_info_DataTouch_TouchedEntry_DoNotUse_sensor_2eproto.base,}};

static void InitDefaultsUpdateReq_sensor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensorService::_UpdateReq_default_instance_;
    new (ptr) ::sensorService::UpdateReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensorService::UpdateReq::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_UpdateReq_sensor_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsUpdateReq_sensor_2eproto}, {
      &scc_info_DataObs_sensor_2eproto.base,
      &scc_info_DataAgv_sensor_2eproto.base,
      &scc_info_DataTouch_sensor_2eproto.base,}};

static void InitDefaultsRawRequest_sensor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensorService::_RawRequest_default_instance_;
    new (ptr) ::sensorService::RawRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensorService::RawRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RawRequest_sensor_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRawRequest_sensor_2eproto}, {}};

static void InitDefaultsRawResponse_sensor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensorService::_RawResponse_default_instance_;
    new (ptr) ::sensorService::RawResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensorService::RawResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_RawResponse_sensor_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsRawResponse_sensor_2eproto}, {
      &scc_info_DataObs_sensor_2eproto.base,
      &scc_info_DataAgv_sensor_2eproto.base,
      &scc_info_DataTouch_sensor_2eproto.base,}};

void InitDefaults_sensor_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_GetDetectRequest_sensor_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetDetectResponse_sensor_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetMotionInductionRequest_sensor_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetMotionInductionResponse_sensor_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetTouchRequest_sensor_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetTouchResponse_sensor_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DataObs_DataEntry_DoNotUse_sensor_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DataObs_sensor_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DataAgv_sensor_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DataTouch_TouchedEntry_DoNotUse_sensor_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DataTouch_sensor_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UpdateReq_sensor_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RawRequest_sensor_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RawResponse_sensor_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_sensor_2eproto[14];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_sensor_2eproto[3];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_sensor_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_sensor_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensorService::GetDetectRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensorService::GetDetectResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensorService::GetDetectResponse, direction_),
  PROTOBUF_FIELD_OFFSET(::sensorService::GetDetectResponse, distance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensorService::GetMotionInductionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensorService::GetMotionInductionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensorService::GetMotionInductionResponse, left_),
  PROTOBUF_FIELD_OFFSET(::sensorService::GetMotionInductionResponse, right_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensorService::GetTouchRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensorService::GetTouchResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensorService::GetTouchResponse, hand_left_),
  PROTOBUF_FIELD_OFFSET(::sensorService::GetTouchResponse, hand_right_),
  PROTOBUF_FIELD_OFFSET(::sensorService::GetTouchResponse, head_),
  PROTOBUF_FIELD_OFFSET(::sensorService::DataObs_DataEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::sensorService::DataObs_DataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensorService::DataObs_DataEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::sensorService::DataObs_DataEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensorService::DataObs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensorService::DataObs, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensorService::DataAgv, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensorService::DataAgv, card_id_),
  PROTOBUF_FIELD_OFFSET(::sensorService::DataAgv, data_),
  PROTOBUF_FIELD_OFFSET(::sensorService::DataTouch_TouchedEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::sensorService::DataTouch_TouchedEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensorService::DataTouch_TouchedEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::sensorService::DataTouch_TouchedEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensorService::DataTouch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensorService::DataTouch, touched_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensorService::UpdateReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensorService::UpdateReq, dtype_),
  PROTOBUF_FIELD_OFFSET(::sensorService::UpdateReq, obs_),
  PROTOBUF_FIELD_OFFSET(::sensorService::UpdateReq, agv_),
  PROTOBUF_FIELD_OFFSET(::sensorService::UpdateReq, touch_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensorService::RawRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensorService::RawResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensorService::RawResponse, dtype_),
  PROTOBUF_FIELD_OFFSET(::sensorService::RawResponse, obs_),
  PROTOBUF_FIELD_OFFSET(::sensorService::RawResponse, agv_),
  PROTOBUF_FIELD_OFFSET(::sensorService::RawResponse, touch_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::sensorService::GetDetectRequest)},
  { 5, -1, sizeof(::sensorService::GetDetectResponse)},
  { 12, -1, sizeof(::sensorService::GetMotionInductionRequest)},
  { 17, -1, sizeof(::sensorService::GetMotionInductionResponse)},
  { 24, -1, sizeof(::sensorService::GetTouchRequest)},
  { 29, -1, sizeof(::sensorService::GetTouchResponse)},
  { 37, 44, sizeof(::sensorService::DataObs_DataEntry_DoNotUse)},
  { 46, -1, sizeof(::sensorService::DataObs)},
  { 52, -1, sizeof(::sensorService::DataAgv)},
  { 59, 66, sizeof(::sensorService::DataTouch_TouchedEntry_DoNotUse)},
  { 68, -1, sizeof(::sensorService::DataTouch)},
  { 74, -1, sizeof(::sensorService::UpdateReq)},
  { 83, -1, sizeof(::sensorService::RawRequest)},
  { 88, -1, sizeof(::sensorService::RawResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensorService::_GetDetectRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensorService::_GetDetectResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensorService::_GetMotionInductionRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensorService::_GetMotionInductionResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensorService::_GetTouchRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensorService::_GetTouchResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensorService::_DataObs_DataEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensorService::_DataObs_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensorService::_DataAgv_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensorService::_DataTouch_TouchedEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensorService::_DataTouch_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensorService::_UpdateReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensorService::_RawRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensorService::_RawResponse_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_sensor_2eproto = {
  {}, AddDescriptors_sensor_2eproto, "sensor.proto", schemas,
  file_default_instances, TableStruct_sensor_2eproto::offsets,
  file_level_metadata_sensor_2eproto, 14, file_level_enum_descriptors_sensor_2eproto, file_level_service_descriptors_sensor_2eproto,
};

const char descriptor_table_protodef_sensor_2eproto[] =
  "\n\014sensor.proto\022\rsensorService\"\022\n\020GetDete"
  "ctRequest\"w\n\021GetDetectResponse\0221\n\tdirect"
  "ion\030\001 \001(\0162\036.sensorService.DetectDirectio"
  "n\022/\n\010distance\030\002 \001(\0162\035.sensorService.Dete"
  "ctDistance\"\033\n\031GetMotionInductionRequest\""
  "9\n\032GetMotionInductionResponse\022\014\n\004left\030\001 "
  "\001(\010\022\r\n\005right\030\002 \001(\010\"\021\n\017GetTouchRequest\"G\n"
  "\020GetTouchResponse\022\021\n\thand_left\030\001 \001(\010\022\022\n\n"
  "hand_right\030\002 \001(\010\022\014\n\004head\030\003 \001(\010\"f\n\007DataOb"
  "s\022.\n\004data\030\001 \003(\0132 .sensorService.DataObs."
  "DataEntry\032+\n\tDataEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005v"
  "alue\030\002 \001(\005:\0028\001\"(\n\007DataAgv\022\017\n\007card_id\030\001 \001"
  "(\t\022\014\n\004data\030\002 \003(\010\"s\n\tDataTouch\0226\n\007touched"
  "\030\001 \003(\0132%.sensorService.DataTouch.Touched"
  "Entry\032.\n\014TouchedEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005va"
  "lue\030\002 \001(\010:\0028\001\"\246\001\n\tUpdateReq\022&\n\005dtype\030\001 \001"
  "(\0162\027.sensorService.DataType\022#\n\003obs\030\002 \001(\013"
  "2\026.sensorService.DataObs\022#\n\003agv\030\003 \001(\0132\026."
  "sensorService.DataAgv\022\'\n\005touch\030\005 \001(\0132\030.s"
  "ensorService.DataTouch\"\014\n\nRawRequest\"\250\001\n"
  "\013RawResponse\022&\n\005dtype\030\001 \001(\0162\027.sensorServ"
  "ice.DataType\022#\n\003obs\030\002 \001(\0132\026.sensorServic"
  "e.DataObs\022#\n\003agv\030\003 \001(\0132\026.sensorService.D"
  "ataAgv\022\'\n\005touch\030\005 \001(\0132\030.sensorService.Da"
  "taTouch*R\n\017DetectDirection\022\r\n\t_ZERO_DIR\020"
  "\000\022\017\n\013RELEASE_DIR\020\001\022\010\n\004LEFT\020\002\022\n\n\006CENTER\020\003"
  "\022\t\n\005RIGHT\020\004*Q\n\016DetectDistance\022\r\n\t_ZERO_D"
  "IS\020\000\022\017\n\013RELEASE_DIS\020\001\022\t\n\005CLOSE\020\002\022\n\n\006MEDI"
  "UM\020\003\022\010\n\004LONG\020\004*4\n\010DataType\022\013\n\007UNKNOWN\020\000\022"
  "\007\n\003OBS\020\001\022\007\n\003AGV\020\002\022\t\n\005TOUCH\020\0042\345\002\n\rSensorS"
  "ervice\022R\n\tGetDetect\022\037.sensorService.GetD"
  "etectRequest\032 .sensorService.GetDetectRe"
  "sponse\"\0000\001\022m\n\022GetMotionInduction\022(.senso"
  "rService.GetMotionInductionRequest\032).sen"
  "sorService.GetMotionInductionResponse\"\0000"
  "\001\022O\n\010GetTouch\022\036.sensorService.GetTouchRe"
  "quest\032\037.sensorService.GetTouchResponse\"\000"
  "0\001\022@\n\003Raw\022\031.sensorService.RawRequest\032\032.s"
  "ensorService.RawResponse\"\0000\001b\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_sensor_2eproto = {
  false, InitDefaults_sensor_2eproto, 
  descriptor_table_protodef_sensor_2eproto,
  "sensor.proto", &assign_descriptors_table_sensor_2eproto, 1556,
};

void AddDescriptors_sensor_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_sensor_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_sensor_2eproto = []() { AddDescriptors_sensor_2eproto(); return true; }();
namespace sensorService {
const ::google::protobuf::EnumDescriptor* DetectDirection_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_sensor_2eproto);
  return file_level_enum_descriptors_sensor_2eproto[0];
}
bool DetectDirection_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DetectDistance_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_sensor_2eproto);
  return file_level_enum_descriptors_sensor_2eproto[1];
}
bool DetectDistance_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DataType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_sensor_2eproto);
  return file_level_enum_descriptors_sensor_2eproto[2];
}
bool DataType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void GetDetectRequest::InitAsDefaultInstance() {
}
class GetDetectRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetDetectRequest::GetDetectRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensorService.GetDetectRequest)
}
GetDetectRequest::GetDetectRequest(const GetDetectRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sensorService.GetDetectRequest)
}

void GetDetectRequest::SharedCtor() {
}

GetDetectRequest::~GetDetectRequest() {
  // @@protoc_insertion_point(destructor:sensorService.GetDetectRequest)
  SharedDtor();
}

void GetDetectRequest::SharedDtor() {
}

void GetDetectRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetDetectRequest& GetDetectRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetDetectRequest_sensor_2eproto.base);
  return *internal_default_instance();
}


void GetDetectRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sensorService.GetDetectRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetDetectRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetDetectRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetDetectRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensorService.GetDetectRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:sensorService.GetDetectRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensorService.GetDetectRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetDetectRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensorService.GetDetectRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sensorService.GetDetectRequest)
}

::google::protobuf::uint8* GetDetectRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensorService.GetDetectRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensorService.GetDetectRequest)
  return target;
}

size_t GetDetectRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensorService.GetDetectRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetDetectRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensorService.GetDetectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetDetectRequest* source =
      ::google::protobuf::DynamicCastToGenerated<GetDetectRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensorService.GetDetectRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensorService.GetDetectRequest)
    MergeFrom(*source);
  }
}

void GetDetectRequest::MergeFrom(const GetDetectRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensorService.GetDetectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetDetectRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensorService.GetDetectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDetectRequest::CopyFrom(const GetDetectRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensorService.GetDetectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDetectRequest::IsInitialized() const {
  return true;
}

void GetDetectRequest::Swap(GetDetectRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetDetectRequest::InternalSwap(GetDetectRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetDetectRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_sensor_2eproto);
  return ::file_level_metadata_sensor_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GetDetectResponse::InitAsDefaultInstance() {
}
class GetDetectResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetDetectResponse::kDirectionFieldNumber;
const int GetDetectResponse::kDistanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetDetectResponse::GetDetectResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensorService.GetDetectResponse)
}
GetDetectResponse::GetDetectResponse(const GetDetectResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&direction_, &from.direction_,
    static_cast<size_t>(reinterpret_cast<char*>(&distance_) -
    reinterpret_cast<char*>(&direction_)) + sizeof(distance_));
  // @@protoc_insertion_point(copy_constructor:sensorService.GetDetectResponse)
}

void GetDetectResponse::SharedCtor() {
  ::memset(&direction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&distance_) -
      reinterpret_cast<char*>(&direction_)) + sizeof(distance_));
}

GetDetectResponse::~GetDetectResponse() {
  // @@protoc_insertion_point(destructor:sensorService.GetDetectResponse)
  SharedDtor();
}

void GetDetectResponse::SharedDtor() {
}

void GetDetectResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetDetectResponse& GetDetectResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetDetectResponse_sensor_2eproto.base);
  return *internal_default_instance();
}


void GetDetectResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sensorService.GetDetectResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&direction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&distance_) -
      reinterpret_cast<char*>(&direction_)) + sizeof(distance_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetDetectResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetDetectResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .sensorService.DetectDirection direction = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_direction(static_cast<::sensorService::DetectDirection>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .sensorService.DetectDistance distance = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_distance(static_cast<::sensorService::DetectDistance>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetDetectResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensorService.GetDetectResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sensorService.DetectDirection direction = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_direction(static_cast< ::sensorService::DetectDirection >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensorService.DetectDistance distance = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_distance(static_cast< ::sensorService::DetectDistance >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensorService.GetDetectResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensorService.GetDetectResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetDetectResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensorService.GetDetectResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensorService.DetectDirection direction = 1;
  if (this->direction() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->direction(), output);
  }

  // .sensorService.DetectDistance distance = 2;
  if (this->distance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->distance(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sensorService.GetDetectResponse)
}

::google::protobuf::uint8* GetDetectResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensorService.GetDetectResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensorService.DetectDirection direction = 1;
  if (this->direction() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->direction(), target);
  }

  // .sensorService.DetectDistance distance = 2;
  if (this->distance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->distance(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensorService.GetDetectResponse)
  return target;
}

size_t GetDetectResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensorService.GetDetectResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sensorService.DetectDirection direction = 1;
  if (this->direction() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->direction());
  }

  // .sensorService.DetectDistance distance = 2;
  if (this->distance() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->distance());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetDetectResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensorService.GetDetectResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetDetectResponse* source =
      ::google::protobuf::DynamicCastToGenerated<GetDetectResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensorService.GetDetectResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensorService.GetDetectResponse)
    MergeFrom(*source);
  }
}

void GetDetectResponse::MergeFrom(const GetDetectResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensorService.GetDetectResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.direction() != 0) {
    set_direction(from.direction());
  }
  if (from.distance() != 0) {
    set_distance(from.distance());
  }
}

void GetDetectResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensorService.GetDetectResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDetectResponse::CopyFrom(const GetDetectResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensorService.GetDetectResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDetectResponse::IsInitialized() const {
  return true;
}

void GetDetectResponse::Swap(GetDetectResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetDetectResponse::InternalSwap(GetDetectResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(direction_, other->direction_);
  swap(distance_, other->distance_);
}

::google::protobuf::Metadata GetDetectResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_sensor_2eproto);
  return ::file_level_metadata_sensor_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GetMotionInductionRequest::InitAsDefaultInstance() {
}
class GetMotionInductionRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetMotionInductionRequest::GetMotionInductionRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensorService.GetMotionInductionRequest)
}
GetMotionInductionRequest::GetMotionInductionRequest(const GetMotionInductionRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sensorService.GetMotionInductionRequest)
}

void GetMotionInductionRequest::SharedCtor() {
}

GetMotionInductionRequest::~GetMotionInductionRequest() {
  // @@protoc_insertion_point(destructor:sensorService.GetMotionInductionRequest)
  SharedDtor();
}

void GetMotionInductionRequest::SharedDtor() {
}

void GetMotionInductionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetMotionInductionRequest& GetMotionInductionRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetMotionInductionRequest_sensor_2eproto.base);
  return *internal_default_instance();
}


void GetMotionInductionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sensorService.GetMotionInductionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetMotionInductionRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetMotionInductionRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetMotionInductionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensorService.GetMotionInductionRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:sensorService.GetMotionInductionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensorService.GetMotionInductionRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetMotionInductionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensorService.GetMotionInductionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sensorService.GetMotionInductionRequest)
}

::google::protobuf::uint8* GetMotionInductionRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensorService.GetMotionInductionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensorService.GetMotionInductionRequest)
  return target;
}

size_t GetMotionInductionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensorService.GetMotionInductionRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetMotionInductionRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensorService.GetMotionInductionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetMotionInductionRequest* source =
      ::google::protobuf::DynamicCastToGenerated<GetMotionInductionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensorService.GetMotionInductionRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensorService.GetMotionInductionRequest)
    MergeFrom(*source);
  }
}

void GetMotionInductionRequest::MergeFrom(const GetMotionInductionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensorService.GetMotionInductionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetMotionInductionRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensorService.GetMotionInductionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMotionInductionRequest::CopyFrom(const GetMotionInductionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensorService.GetMotionInductionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMotionInductionRequest::IsInitialized() const {
  return true;
}

void GetMotionInductionRequest::Swap(GetMotionInductionRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetMotionInductionRequest::InternalSwap(GetMotionInductionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetMotionInductionRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_sensor_2eproto);
  return ::file_level_metadata_sensor_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GetMotionInductionResponse::InitAsDefaultInstance() {
}
class GetMotionInductionResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetMotionInductionResponse::kLeftFieldNumber;
const int GetMotionInductionResponse::kRightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetMotionInductionResponse::GetMotionInductionResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensorService.GetMotionInductionResponse)
}
GetMotionInductionResponse::GetMotionInductionResponse(const GetMotionInductionResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&left_, &from.left_,
    static_cast<size_t>(reinterpret_cast<char*>(&right_) -
    reinterpret_cast<char*>(&left_)) + sizeof(right_));
  // @@protoc_insertion_point(copy_constructor:sensorService.GetMotionInductionResponse)
}

void GetMotionInductionResponse::SharedCtor() {
  ::memset(&left_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&right_) -
      reinterpret_cast<char*>(&left_)) + sizeof(right_));
}

GetMotionInductionResponse::~GetMotionInductionResponse() {
  // @@protoc_insertion_point(destructor:sensorService.GetMotionInductionResponse)
  SharedDtor();
}

void GetMotionInductionResponse::SharedDtor() {
}

void GetMotionInductionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetMotionInductionResponse& GetMotionInductionResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetMotionInductionResponse_sensor_2eproto.base);
  return *internal_default_instance();
}


void GetMotionInductionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sensorService.GetMotionInductionResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&left_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&right_) -
      reinterpret_cast<char*>(&left_)) + sizeof(right_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetMotionInductionResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetMotionInductionResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bool left = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_left(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool right = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_right(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetMotionInductionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensorService.GetMotionInductionResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool left = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool right = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &right_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensorService.GetMotionInductionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensorService.GetMotionInductionResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetMotionInductionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensorService.GetMotionInductionResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool left = 1;
  if (this->left() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->left(), output);
  }

  // bool right = 2;
  if (this->right() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->right(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sensorService.GetMotionInductionResponse)
}

::google::protobuf::uint8* GetMotionInductionResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensorService.GetMotionInductionResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool left = 1;
  if (this->left() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->left(), target);
  }

  // bool right = 2;
  if (this->right() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->right(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensorService.GetMotionInductionResponse)
  return target;
}

size_t GetMotionInductionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensorService.GetMotionInductionResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool left = 1;
  if (this->left() != 0) {
    total_size += 1 + 1;
  }

  // bool right = 2;
  if (this->right() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetMotionInductionResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensorService.GetMotionInductionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetMotionInductionResponse* source =
      ::google::protobuf::DynamicCastToGenerated<GetMotionInductionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensorService.GetMotionInductionResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensorService.GetMotionInductionResponse)
    MergeFrom(*source);
  }
}

void GetMotionInductionResponse::MergeFrom(const GetMotionInductionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensorService.GetMotionInductionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.left() != 0) {
    set_left(from.left());
  }
  if (from.right() != 0) {
    set_right(from.right());
  }
}

void GetMotionInductionResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensorService.GetMotionInductionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMotionInductionResponse::CopyFrom(const GetMotionInductionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensorService.GetMotionInductionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMotionInductionResponse::IsInitialized() const {
  return true;
}

void GetMotionInductionResponse::Swap(GetMotionInductionResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetMotionInductionResponse::InternalSwap(GetMotionInductionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(left_, other->left_);
  swap(right_, other->right_);
}

::google::protobuf::Metadata GetMotionInductionResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_sensor_2eproto);
  return ::file_level_metadata_sensor_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GetTouchRequest::InitAsDefaultInstance() {
}
class GetTouchRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetTouchRequest::GetTouchRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensorService.GetTouchRequest)
}
GetTouchRequest::GetTouchRequest(const GetTouchRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sensorService.GetTouchRequest)
}

void GetTouchRequest::SharedCtor() {
}

GetTouchRequest::~GetTouchRequest() {
  // @@protoc_insertion_point(destructor:sensorService.GetTouchRequest)
  SharedDtor();
}

void GetTouchRequest::SharedDtor() {
}

void GetTouchRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetTouchRequest& GetTouchRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetTouchRequest_sensor_2eproto.base);
  return *internal_default_instance();
}


void GetTouchRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sensorService.GetTouchRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetTouchRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetTouchRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetTouchRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensorService.GetTouchRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:sensorService.GetTouchRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensorService.GetTouchRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetTouchRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensorService.GetTouchRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sensorService.GetTouchRequest)
}

::google::protobuf::uint8* GetTouchRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensorService.GetTouchRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensorService.GetTouchRequest)
  return target;
}

size_t GetTouchRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensorService.GetTouchRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetTouchRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensorService.GetTouchRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetTouchRequest* source =
      ::google::protobuf::DynamicCastToGenerated<GetTouchRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensorService.GetTouchRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensorService.GetTouchRequest)
    MergeFrom(*source);
  }
}

void GetTouchRequest::MergeFrom(const GetTouchRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensorService.GetTouchRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetTouchRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensorService.GetTouchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTouchRequest::CopyFrom(const GetTouchRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensorService.GetTouchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTouchRequest::IsInitialized() const {
  return true;
}

void GetTouchRequest::Swap(GetTouchRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetTouchRequest::InternalSwap(GetTouchRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetTouchRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_sensor_2eproto);
  return ::file_level_metadata_sensor_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GetTouchResponse::InitAsDefaultInstance() {
}
class GetTouchResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetTouchResponse::kHandLeftFieldNumber;
const int GetTouchResponse::kHandRightFieldNumber;
const int GetTouchResponse::kHeadFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetTouchResponse::GetTouchResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensorService.GetTouchResponse)
}
GetTouchResponse::GetTouchResponse(const GetTouchResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&hand_left_, &from.hand_left_,
    static_cast<size_t>(reinterpret_cast<char*>(&head_) -
    reinterpret_cast<char*>(&hand_left_)) + sizeof(head_));
  // @@protoc_insertion_point(copy_constructor:sensorService.GetTouchResponse)
}

void GetTouchResponse::SharedCtor() {
  ::memset(&hand_left_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&head_) -
      reinterpret_cast<char*>(&hand_left_)) + sizeof(head_));
}

GetTouchResponse::~GetTouchResponse() {
  // @@protoc_insertion_point(destructor:sensorService.GetTouchResponse)
  SharedDtor();
}

void GetTouchResponse::SharedDtor() {
}

void GetTouchResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetTouchResponse& GetTouchResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetTouchResponse_sensor_2eproto.base);
  return *internal_default_instance();
}


void GetTouchResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sensorService.GetTouchResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&hand_left_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&head_) -
      reinterpret_cast<char*>(&hand_left_)) + sizeof(head_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetTouchResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetTouchResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bool hand_left = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_hand_left(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool hand_right = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_hand_right(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool head = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_head(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetTouchResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensorService.GetTouchResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool hand_left = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hand_left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool hand_right = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hand_right_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool head = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &head_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensorService.GetTouchResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensorService.GetTouchResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetTouchResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensorService.GetTouchResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool hand_left = 1;
  if (this->hand_left() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->hand_left(), output);
  }

  // bool hand_right = 2;
  if (this->hand_right() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->hand_right(), output);
  }

  // bool head = 3;
  if (this->head() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->head(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sensorService.GetTouchResponse)
}

::google::protobuf::uint8* GetTouchResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensorService.GetTouchResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool hand_left = 1;
  if (this->hand_left() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->hand_left(), target);
  }

  // bool hand_right = 2;
  if (this->hand_right() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->hand_right(), target);
  }

  // bool head = 3;
  if (this->head() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->head(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensorService.GetTouchResponse)
  return target;
}

size_t GetTouchResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensorService.GetTouchResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool hand_left = 1;
  if (this->hand_left() != 0) {
    total_size += 1 + 1;
  }

  // bool hand_right = 2;
  if (this->hand_right() != 0) {
    total_size += 1 + 1;
  }

  // bool head = 3;
  if (this->head() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetTouchResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensorService.GetTouchResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetTouchResponse* source =
      ::google::protobuf::DynamicCastToGenerated<GetTouchResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensorService.GetTouchResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensorService.GetTouchResponse)
    MergeFrom(*source);
  }
}

void GetTouchResponse::MergeFrom(const GetTouchResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensorService.GetTouchResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hand_left() != 0) {
    set_hand_left(from.hand_left());
  }
  if (from.hand_right() != 0) {
    set_hand_right(from.hand_right());
  }
  if (from.head() != 0) {
    set_head(from.head());
  }
}

void GetTouchResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensorService.GetTouchResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTouchResponse::CopyFrom(const GetTouchResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensorService.GetTouchResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTouchResponse::IsInitialized() const {
  return true;
}

void GetTouchResponse::Swap(GetTouchResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetTouchResponse::InternalSwap(GetTouchResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(hand_left_, other->hand_left_);
  swap(hand_right_, other->hand_right_);
  swap(head_, other->head_);
}

::google::protobuf::Metadata GetTouchResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_sensor_2eproto);
  return ::file_level_metadata_sensor_2eproto[kIndexInFileMessages];
}


// ===================================================================

DataObs_DataEntry_DoNotUse::DataObs_DataEntry_DoNotUse() {}
DataObs_DataEntry_DoNotUse::DataObs_DataEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void DataObs_DataEntry_DoNotUse::MergeFrom(const DataObs_DataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata DataObs_DataEntry_DoNotUse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_sensor_2eproto);
  return ::file_level_metadata_sensor_2eproto[6];
}
void DataObs_DataEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DataObs_DataEntry_DoNotUse::_ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx) {
  using MF = ::google::protobuf::internal::MapField<
      DataObs_DataEntry_DoNotUse, EntryKeyType, EntryValueType,
      kEntryKeyFieldType, kEntryValueFieldType,
      kEntryDefaultEnumValue>;
  auto mf = static_cast<MF*>(object);
  Parser<MF, ::google::protobuf::Map<EntryKeyType, EntryValueType>> parser(mf);
#define DO_(x) if (!(x)) return false
  DO_(parser.ParseMap(begin, end));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.key().data(), static_cast<int>(parser.key().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "sensorService.DataObs.DataEntry.key"));
#undef DO_
  return true;
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER


// ===================================================================

void DataObs::InitAsDefaultInstance() {
}
class DataObs::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DataObs::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DataObs::DataObs()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensorService.DataObs)
}
DataObs::DataObs(const DataObs& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.MergeFrom(from.data_);
  // @@protoc_insertion_point(copy_constructor:sensorService.DataObs)
}

void DataObs::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_DataObs_sensor_2eproto.base);
}

DataObs::~DataObs() {
  // @@protoc_insertion_point(destructor:sensorService.DataObs)
  SharedDtor();
}

void DataObs::SharedDtor() {
}

void DataObs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DataObs& DataObs::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DataObs_sensor_2eproto.base);
  return *internal_default_instance();
}


void DataObs::Clear() {
// @@protoc_insertion_point(message_clear_start:sensorService.DataObs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DataObs::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DataObs*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // map<string, int32> data = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::SlowMapEntryParser;
          auto parse_map = ::sensorService::DataObs_DataEntry_DoNotUse::_ParseMap;
          ctx->extra_parse_data().payload.clear();
          ctx->extra_parse_data().parse_map = parse_map;
          object = &msg->data_;
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(parse_map(ptr, newend, object, ctx));
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DataObs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensorService.DataObs)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, int32> data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DataObs_DataEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              DataObs_DataEntry_DoNotUse,
              ::std::string, ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              0 >,
            ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 > > parser(&data_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "sensorService.DataObs.DataEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensorService.DataObs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensorService.DataObs)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DataObs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensorService.DataObs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, int32> data = 1;
  if (!this->data().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "sensorService.DataObs.DataEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->data().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->data().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_iterator
          it = this->data().begin();
          it != this->data().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<DataObs_DataEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(data_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(1, *entry, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<DataObs_DataEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_iterator
          it = this->data().begin();
          it != this->data().end(); ++it) {
        entry.reset(data_.NewEntryWrapper(it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(1, *entry, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sensorService.DataObs)
}

::google::protobuf::uint8* DataObs::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensorService.DataObs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, int32> data = 1;
  if (!this->data().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "sensorService.DataObs.DataEntry.key");
      }
    };

    if (false &&
        this->data().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->data().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_iterator
          it = this->data().begin();
          it != this->data().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<DataObs_DataEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(data_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(1, *entry, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<DataObs_DataEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_iterator
          it = this->data().begin();
          it != this->data().end(); ++it) {
        entry.reset(data_.NewEntryWrapper(it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(1, *entry, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensorService.DataObs)
  return target;
}

size_t DataObs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensorService.DataObs)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, int32> data = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->data_size());
  {
    ::std::unique_ptr<DataObs_DataEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_iterator
        it = this->data().begin();
        it != this->data().end(); ++it) {
      entry.reset(data_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DataObs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensorService.DataObs)
  GOOGLE_DCHECK_NE(&from, this);
  const DataObs* source =
      ::google::protobuf::DynamicCastToGenerated<DataObs>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensorService.DataObs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensorService.DataObs)
    MergeFrom(*source);
  }
}

void DataObs::MergeFrom(const DataObs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensorService.DataObs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void DataObs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensorService.DataObs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataObs::CopyFrom(const DataObs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensorService.DataObs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataObs::IsInitialized() const {
  return true;
}

void DataObs::Swap(DataObs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DataObs::InternalSwap(DataObs* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  data_.Swap(&other->data_);
}

::google::protobuf::Metadata DataObs::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_sensor_2eproto);
  return ::file_level_metadata_sensor_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DataAgv::InitAsDefaultInstance() {
}
class DataAgv::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DataAgv::kCardIdFieldNumber;
const int DataAgv::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DataAgv::DataAgv()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensorService.DataAgv)
}
DataAgv::DataAgv(const DataAgv& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  card_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.card_id().size() > 0) {
    card_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.card_id_);
  }
  // @@protoc_insertion_point(copy_constructor:sensorService.DataAgv)
}

void DataAgv::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_DataAgv_sensor_2eproto.base);
  card_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

DataAgv::~DataAgv() {
  // @@protoc_insertion_point(destructor:sensorService.DataAgv)
  SharedDtor();
}

void DataAgv::SharedDtor() {
  card_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DataAgv::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DataAgv& DataAgv::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DataAgv_sensor_2eproto.base);
  return *internal_default_instance();
}


void DataAgv::Clear() {
// @@protoc_insertion_point(message_clear_start:sensorService.DataAgv)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  card_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DataAgv::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DataAgv*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string card_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("sensorService.DataAgv.card_id");
        object = msg->mutable_card_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated bool data = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) == 18) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedBoolParser;
          object = msg->mutable_data();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        do {
          msg->add_data(::google::protobuf::internal::ReadVarint(&ptr));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 16 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DataAgv::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensorService.DataAgv)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string card_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_card_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->card_id().data(), static_cast<int>(this->card_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "sensorService.DataAgv.card_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bool data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_data())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 18u, input, this->mutable_data())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensorService.DataAgv)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensorService.DataAgv)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DataAgv::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensorService.DataAgv)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string card_id = 1;
  if (this->card_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->card_id().data(), static_cast<int>(this->card_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sensorService.DataAgv.card_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->card_id(), output);
  }

  // repeated bool data = 2;
  if (this->data_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_data_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::google::protobuf::internal::WireFormatLite::WriteBoolArray(
      this->data().data(), this->data_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sensorService.DataAgv)
}

::google::protobuf::uint8* DataAgv::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensorService.DataAgv)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string card_id = 1;
  if (this->card_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->card_id().data(), static_cast<int>(this->card_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sensorService.DataAgv.card_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->card_id(), target);
  }

  // repeated bool data = 2;
  if (this->data_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _data_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolNoTagToArray(this->data_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensorService.DataAgv)
  return target;
}

size_t DataAgv::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensorService.DataAgv)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bool data = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->data_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _data_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string card_id = 1;
  if (this->card_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->card_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DataAgv::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensorService.DataAgv)
  GOOGLE_DCHECK_NE(&from, this);
  const DataAgv* source =
      ::google::protobuf::DynamicCastToGenerated<DataAgv>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensorService.DataAgv)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensorService.DataAgv)
    MergeFrom(*source);
  }
}

void DataAgv::MergeFrom(const DataAgv& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensorService.DataAgv)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  if (from.card_id().size() > 0) {

    card_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.card_id_);
  }
}

void DataAgv::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensorService.DataAgv)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataAgv::CopyFrom(const DataAgv& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensorService.DataAgv)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataAgv::IsInitialized() const {
  return true;
}

void DataAgv::Swap(DataAgv* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DataAgv::InternalSwap(DataAgv* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
  card_id_.Swap(&other->card_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata DataAgv::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_sensor_2eproto);
  return ::file_level_metadata_sensor_2eproto[kIndexInFileMessages];
}


// ===================================================================

DataTouch_TouchedEntry_DoNotUse::DataTouch_TouchedEntry_DoNotUse() {}
DataTouch_TouchedEntry_DoNotUse::DataTouch_TouchedEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void DataTouch_TouchedEntry_DoNotUse::MergeFrom(const DataTouch_TouchedEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata DataTouch_TouchedEntry_DoNotUse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_sensor_2eproto);
  return ::file_level_metadata_sensor_2eproto[9];
}
void DataTouch_TouchedEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DataTouch_TouchedEntry_DoNotUse::_ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx) {
  using MF = ::google::protobuf::internal::MapField<
      DataTouch_TouchedEntry_DoNotUse, EntryKeyType, EntryValueType,
      kEntryKeyFieldType, kEntryValueFieldType,
      kEntryDefaultEnumValue>;
  auto mf = static_cast<MF*>(object);
  Parser<MF, ::google::protobuf::Map<EntryKeyType, EntryValueType>> parser(mf);
#define DO_(x) if (!(x)) return false
  DO_(parser.ParseMap(begin, end));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.key().data(), static_cast<int>(parser.key().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "sensorService.DataTouch.TouchedEntry.key"));
#undef DO_
  return true;
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER


// ===================================================================

void DataTouch::InitAsDefaultInstance() {
}
class DataTouch::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DataTouch::kTouchedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DataTouch::DataTouch()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensorService.DataTouch)
}
DataTouch::DataTouch(const DataTouch& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  touched_.MergeFrom(from.touched_);
  // @@protoc_insertion_point(copy_constructor:sensorService.DataTouch)
}

void DataTouch::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_DataTouch_sensor_2eproto.base);
}

DataTouch::~DataTouch() {
  // @@protoc_insertion_point(destructor:sensorService.DataTouch)
  SharedDtor();
}

void DataTouch::SharedDtor() {
}

void DataTouch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DataTouch& DataTouch::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DataTouch_sensor_2eproto.base);
  return *internal_default_instance();
}


void DataTouch::Clear() {
// @@protoc_insertion_point(message_clear_start:sensorService.DataTouch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  touched_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DataTouch::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DataTouch*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // map<string, bool> touched = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::SlowMapEntryParser;
          auto parse_map = ::sensorService::DataTouch_TouchedEntry_DoNotUse::_ParseMap;
          ctx->extra_parse_data().payload.clear();
          ctx->extra_parse_data().parse_map = parse_map;
          object = &msg->touched_;
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(parse_map(ptr, newend, object, ctx));
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DataTouch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensorService.DataTouch)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, bool> touched = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DataTouch_TouchedEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              DataTouch_TouchedEntry_DoNotUse,
              ::std::string, bool,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_BOOL,
              0 >,
            ::google::protobuf::Map< ::std::string, bool > > parser(&touched_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "sensorService.DataTouch.TouchedEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensorService.DataTouch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensorService.DataTouch)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DataTouch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensorService.DataTouch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, bool> touched = 1;
  if (!this->touched().empty()) {
    typedef ::google::protobuf::Map< ::std::string, bool >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "sensorService.DataTouch.TouchedEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->touched().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->touched().size()]);
      typedef ::google::protobuf::Map< ::std::string, bool >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, bool >::const_iterator
          it = this->touched().begin();
          it != this->touched().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<DataTouch_TouchedEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(touched_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(1, *entry, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<DataTouch_TouchedEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, bool >::const_iterator
          it = this->touched().begin();
          it != this->touched().end(); ++it) {
        entry.reset(touched_.NewEntryWrapper(it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(1, *entry, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sensorService.DataTouch)
}

::google::protobuf::uint8* DataTouch::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensorService.DataTouch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, bool> touched = 1;
  if (!this->touched().empty()) {
    typedef ::google::protobuf::Map< ::std::string, bool >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "sensorService.DataTouch.TouchedEntry.key");
      }
    };

    if (false &&
        this->touched().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->touched().size()]);
      typedef ::google::protobuf::Map< ::std::string, bool >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, bool >::const_iterator
          it = this->touched().begin();
          it != this->touched().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<DataTouch_TouchedEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(touched_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(1, *entry, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<DataTouch_TouchedEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, bool >::const_iterator
          it = this->touched().begin();
          it != this->touched().end(); ++it) {
        entry.reset(touched_.NewEntryWrapper(it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(1, *entry, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensorService.DataTouch)
  return target;
}

size_t DataTouch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensorService.DataTouch)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, bool> touched = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->touched_size());
  {
    ::std::unique_ptr<DataTouch_TouchedEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, bool >::const_iterator
        it = this->touched().begin();
        it != this->touched().end(); ++it) {
      entry.reset(touched_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DataTouch::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensorService.DataTouch)
  GOOGLE_DCHECK_NE(&from, this);
  const DataTouch* source =
      ::google::protobuf::DynamicCastToGenerated<DataTouch>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensorService.DataTouch)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensorService.DataTouch)
    MergeFrom(*source);
  }
}

void DataTouch::MergeFrom(const DataTouch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensorService.DataTouch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  touched_.MergeFrom(from.touched_);
}

void DataTouch::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensorService.DataTouch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataTouch::CopyFrom(const DataTouch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensorService.DataTouch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataTouch::IsInitialized() const {
  return true;
}

void DataTouch::Swap(DataTouch* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DataTouch::InternalSwap(DataTouch* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  touched_.Swap(&other->touched_);
}

::google::protobuf::Metadata DataTouch::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_sensor_2eproto);
  return ::file_level_metadata_sensor_2eproto[kIndexInFileMessages];
}


// ===================================================================

void UpdateReq::InitAsDefaultInstance() {
  ::sensorService::_UpdateReq_default_instance_._instance.get_mutable()->obs_ = const_cast< ::sensorService::DataObs*>(
      ::sensorService::DataObs::internal_default_instance());
  ::sensorService::_UpdateReq_default_instance_._instance.get_mutable()->agv_ = const_cast< ::sensorService::DataAgv*>(
      ::sensorService::DataAgv::internal_default_instance());
  ::sensorService::_UpdateReq_default_instance_._instance.get_mutable()->touch_ = const_cast< ::sensorService::DataTouch*>(
      ::sensorService::DataTouch::internal_default_instance());
}
class UpdateReq::HasBitSetters {
 public:
  static const ::sensorService::DataObs& obs(const UpdateReq* msg);
  static const ::sensorService::DataAgv& agv(const UpdateReq* msg);
  static const ::sensorService::DataTouch& touch(const UpdateReq* msg);
};

const ::sensorService::DataObs&
UpdateReq::HasBitSetters::obs(const UpdateReq* msg) {
  return *msg->obs_;
}
const ::sensorService::DataAgv&
UpdateReq::HasBitSetters::agv(const UpdateReq* msg) {
  return *msg->agv_;
}
const ::sensorService::DataTouch&
UpdateReq::HasBitSetters::touch(const UpdateReq* msg) {
  return *msg->touch_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateReq::kDtypeFieldNumber;
const int UpdateReq::kObsFieldNumber;
const int UpdateReq::kAgvFieldNumber;
const int UpdateReq::kTouchFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateReq::UpdateReq()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensorService.UpdateReq)
}
UpdateReq::UpdateReq(const UpdateReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_obs()) {
    obs_ = new ::sensorService::DataObs(*from.obs_);
  } else {
    obs_ = nullptr;
  }
  if (from.has_agv()) {
    agv_ = new ::sensorService::DataAgv(*from.agv_);
  } else {
    agv_ = nullptr;
  }
  if (from.has_touch()) {
    touch_ = new ::sensorService::DataTouch(*from.touch_);
  } else {
    touch_ = nullptr;
  }
  dtype_ = from.dtype_;
  // @@protoc_insertion_point(copy_constructor:sensorService.UpdateReq)
}

void UpdateReq::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_UpdateReq_sensor_2eproto.base);
  ::memset(&obs_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dtype_) -
      reinterpret_cast<char*>(&obs_)) + sizeof(dtype_));
}

UpdateReq::~UpdateReq() {
  // @@protoc_insertion_point(destructor:sensorService.UpdateReq)
  SharedDtor();
}

void UpdateReq::SharedDtor() {
  if (this != internal_default_instance()) delete obs_;
  if (this != internal_default_instance()) delete agv_;
  if (this != internal_default_instance()) delete touch_;
}

void UpdateReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateReq& UpdateReq::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_UpdateReq_sensor_2eproto.base);
  return *internal_default_instance();
}


void UpdateReq::Clear() {
// @@protoc_insertion_point(message_clear_start:sensorService.UpdateReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && obs_ != nullptr) {
    delete obs_;
  }
  obs_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && agv_ != nullptr) {
    delete agv_;
  }
  agv_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && touch_ != nullptr) {
    delete touch_;
  }
  touch_ = nullptr;
  dtype_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UpdateReq::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<UpdateReq*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .sensorService.DataType dtype = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_dtype(static_cast<::sensorService::DataType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .sensorService.DataObs obs = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::sensorService::DataObs::_InternalParse;
        object = msg->mutable_obs();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .sensorService.DataAgv agv = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::sensorService::DataAgv::_InternalParse;
        object = msg->mutable_agv();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .sensorService.DataTouch touch = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::sensorService::DataTouch::_InternalParse;
        object = msg->mutable_touch();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UpdateReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensorService.UpdateReq)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sensorService.DataType dtype = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_dtype(static_cast< ::sensorService::DataType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensorService.DataObs obs = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_obs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensorService.DataAgv agv = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_agv()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensorService.DataTouch touch = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_touch()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensorService.UpdateReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensorService.UpdateReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UpdateReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensorService.UpdateReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensorService.DataType dtype = 1;
  if (this->dtype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->dtype(), output);
  }

  // .sensorService.DataObs obs = 2;
  if (this->has_obs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::obs(this), output);
  }

  // .sensorService.DataAgv agv = 3;
  if (this->has_agv()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::agv(this), output);
  }

  // .sensorService.DataTouch touch = 5;
  if (this->has_touch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::touch(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sensorService.UpdateReq)
}

::google::protobuf::uint8* UpdateReq::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensorService.UpdateReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensorService.DataType dtype = 1;
  if (this->dtype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->dtype(), target);
  }

  // .sensorService.DataObs obs = 2;
  if (this->has_obs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::obs(this), target);
  }

  // .sensorService.DataAgv agv = 3;
  if (this->has_agv()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::agv(this), target);
  }

  // .sensorService.DataTouch touch = 5;
  if (this->has_touch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::touch(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensorService.UpdateReq)
  return target;
}

size_t UpdateReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensorService.UpdateReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sensorService.DataObs obs = 2;
  if (this->has_obs()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *obs_);
  }

  // .sensorService.DataAgv agv = 3;
  if (this->has_agv()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *agv_);
  }

  // .sensorService.DataTouch touch = 5;
  if (this->has_touch()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *touch_);
  }

  // .sensorService.DataType dtype = 1;
  if (this->dtype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->dtype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensorService.UpdateReq)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateReq* source =
      ::google::protobuf::DynamicCastToGenerated<UpdateReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensorService.UpdateReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensorService.UpdateReq)
    MergeFrom(*source);
  }
}

void UpdateReq::MergeFrom(const UpdateReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensorService.UpdateReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_obs()) {
    mutable_obs()->::sensorService::DataObs::MergeFrom(from.obs());
  }
  if (from.has_agv()) {
    mutable_agv()->::sensorService::DataAgv::MergeFrom(from.agv());
  }
  if (from.has_touch()) {
    mutable_touch()->::sensorService::DataTouch::MergeFrom(from.touch());
  }
  if (from.dtype() != 0) {
    set_dtype(from.dtype());
  }
}

void UpdateReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensorService.UpdateReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateReq::CopyFrom(const UpdateReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensorService.UpdateReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateReq::IsInitialized() const {
  return true;
}

void UpdateReq::Swap(UpdateReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateReq::InternalSwap(UpdateReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(obs_, other->obs_);
  swap(agv_, other->agv_);
  swap(touch_, other->touch_);
  swap(dtype_, other->dtype_);
}

::google::protobuf::Metadata UpdateReq::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_sensor_2eproto);
  return ::file_level_metadata_sensor_2eproto[kIndexInFileMessages];
}


// ===================================================================

void RawRequest::InitAsDefaultInstance() {
}
class RawRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RawRequest::RawRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensorService.RawRequest)
}
RawRequest::RawRequest(const RawRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sensorService.RawRequest)
}

void RawRequest::SharedCtor() {
}

RawRequest::~RawRequest() {
  // @@protoc_insertion_point(destructor:sensorService.RawRequest)
  SharedDtor();
}

void RawRequest::SharedDtor() {
}

void RawRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RawRequest& RawRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RawRequest_sensor_2eproto.base);
  return *internal_default_instance();
}


void RawRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sensorService.RawRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RawRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RawRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RawRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensorService.RawRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:sensorService.RawRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensorService.RawRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RawRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensorService.RawRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sensorService.RawRequest)
}

::google::protobuf::uint8* RawRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensorService.RawRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensorService.RawRequest)
  return target;
}

size_t RawRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensorService.RawRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RawRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensorService.RawRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RawRequest* source =
      ::google::protobuf::DynamicCastToGenerated<RawRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensorService.RawRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensorService.RawRequest)
    MergeFrom(*source);
  }
}

void RawRequest::MergeFrom(const RawRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensorService.RawRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void RawRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensorService.RawRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RawRequest::CopyFrom(const RawRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensorService.RawRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RawRequest::IsInitialized() const {
  return true;
}

void RawRequest::Swap(RawRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RawRequest::InternalSwap(RawRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RawRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_sensor_2eproto);
  return ::file_level_metadata_sensor_2eproto[kIndexInFileMessages];
}


// ===================================================================

void RawResponse::InitAsDefaultInstance() {
  ::sensorService::_RawResponse_default_instance_._instance.get_mutable()->obs_ = const_cast< ::sensorService::DataObs*>(
      ::sensorService::DataObs::internal_default_instance());
  ::sensorService::_RawResponse_default_instance_._instance.get_mutable()->agv_ = const_cast< ::sensorService::DataAgv*>(
      ::sensorService::DataAgv::internal_default_instance());
  ::sensorService::_RawResponse_default_instance_._instance.get_mutable()->touch_ = const_cast< ::sensorService::DataTouch*>(
      ::sensorService::DataTouch::internal_default_instance());
}
class RawResponse::HasBitSetters {
 public:
  static const ::sensorService::DataObs& obs(const RawResponse* msg);
  static const ::sensorService::DataAgv& agv(const RawResponse* msg);
  static const ::sensorService::DataTouch& touch(const RawResponse* msg);
};

const ::sensorService::DataObs&
RawResponse::HasBitSetters::obs(const RawResponse* msg) {
  return *msg->obs_;
}
const ::sensorService::DataAgv&
RawResponse::HasBitSetters::agv(const RawResponse* msg) {
  return *msg->agv_;
}
const ::sensorService::DataTouch&
RawResponse::HasBitSetters::touch(const RawResponse* msg) {
  return *msg->touch_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RawResponse::kDtypeFieldNumber;
const int RawResponse::kObsFieldNumber;
const int RawResponse::kAgvFieldNumber;
const int RawResponse::kTouchFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RawResponse::RawResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensorService.RawResponse)
}
RawResponse::RawResponse(const RawResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_obs()) {
    obs_ = new ::sensorService::DataObs(*from.obs_);
  } else {
    obs_ = nullptr;
  }
  if (from.has_agv()) {
    agv_ = new ::sensorService::DataAgv(*from.agv_);
  } else {
    agv_ = nullptr;
  }
  if (from.has_touch()) {
    touch_ = new ::sensorService::DataTouch(*from.touch_);
  } else {
    touch_ = nullptr;
  }
  dtype_ = from.dtype_;
  // @@protoc_insertion_point(copy_constructor:sensorService.RawResponse)
}

void RawResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_RawResponse_sensor_2eproto.base);
  ::memset(&obs_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dtype_) -
      reinterpret_cast<char*>(&obs_)) + sizeof(dtype_));
}

RawResponse::~RawResponse() {
  // @@protoc_insertion_point(destructor:sensorService.RawResponse)
  SharedDtor();
}

void RawResponse::SharedDtor() {
  if (this != internal_default_instance()) delete obs_;
  if (this != internal_default_instance()) delete agv_;
  if (this != internal_default_instance()) delete touch_;
}

void RawResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RawResponse& RawResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RawResponse_sensor_2eproto.base);
  return *internal_default_instance();
}


void RawResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sensorService.RawResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && obs_ != nullptr) {
    delete obs_;
  }
  obs_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && agv_ != nullptr) {
    delete agv_;
  }
  agv_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && touch_ != nullptr) {
    delete touch_;
  }
  touch_ = nullptr;
  dtype_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RawResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RawResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .sensorService.DataType dtype = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_dtype(static_cast<::sensorService::DataType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .sensorService.DataObs obs = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::sensorService::DataObs::_InternalParse;
        object = msg->mutable_obs();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .sensorService.DataAgv agv = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::sensorService::DataAgv::_InternalParse;
        object = msg->mutable_agv();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .sensorService.DataTouch touch = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::sensorService::DataTouch::_InternalParse;
        object = msg->mutable_touch();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RawResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensorService.RawResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sensorService.DataType dtype = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_dtype(static_cast< ::sensorService::DataType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensorService.DataObs obs = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_obs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensorService.DataAgv agv = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_agv()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensorService.DataTouch touch = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_touch()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensorService.RawResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensorService.RawResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RawResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensorService.RawResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensorService.DataType dtype = 1;
  if (this->dtype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->dtype(), output);
  }

  // .sensorService.DataObs obs = 2;
  if (this->has_obs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::obs(this), output);
  }

  // .sensorService.DataAgv agv = 3;
  if (this->has_agv()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::agv(this), output);
  }

  // .sensorService.DataTouch touch = 5;
  if (this->has_touch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::touch(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sensorService.RawResponse)
}

::google::protobuf::uint8* RawResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensorService.RawResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensorService.DataType dtype = 1;
  if (this->dtype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->dtype(), target);
  }

  // .sensorService.DataObs obs = 2;
  if (this->has_obs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::obs(this), target);
  }

  // .sensorService.DataAgv agv = 3;
  if (this->has_agv()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::agv(this), target);
  }

  // .sensorService.DataTouch touch = 5;
  if (this->has_touch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::touch(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensorService.RawResponse)
  return target;
}

size_t RawResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensorService.RawResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sensorService.DataObs obs = 2;
  if (this->has_obs()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *obs_);
  }

  // .sensorService.DataAgv agv = 3;
  if (this->has_agv()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *agv_);
  }

  // .sensorService.DataTouch touch = 5;
  if (this->has_touch()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *touch_);
  }

  // .sensorService.DataType dtype = 1;
  if (this->dtype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->dtype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RawResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensorService.RawResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RawResponse* source =
      ::google::protobuf::DynamicCastToGenerated<RawResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensorService.RawResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensorService.RawResponse)
    MergeFrom(*source);
  }
}

void RawResponse::MergeFrom(const RawResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensorService.RawResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_obs()) {
    mutable_obs()->::sensorService::DataObs::MergeFrom(from.obs());
  }
  if (from.has_agv()) {
    mutable_agv()->::sensorService::DataAgv::MergeFrom(from.agv());
  }
  if (from.has_touch()) {
    mutable_touch()->::sensorService::DataTouch::MergeFrom(from.touch());
  }
  if (from.dtype() != 0) {
    set_dtype(from.dtype());
  }
}

void RawResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensorService.RawResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RawResponse::CopyFrom(const RawResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensorService.RawResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RawResponse::IsInitialized() const {
  return true;
}

void RawResponse::Swap(RawResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RawResponse::InternalSwap(RawResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(obs_, other->obs_);
  swap(agv_, other->agv_);
  swap(touch_, other->touch_);
  swap(dtype_, other->dtype_);
}

::google::protobuf::Metadata RawResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_sensor_2eproto);
  return ::file_level_metadata_sensor_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sensorService
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::sensorService::GetDetectRequest* Arena::CreateMaybeMessage< ::sensorService::GetDetectRequest >(Arena* arena) {
  return Arena::CreateInternal< ::sensorService::GetDetectRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sensorService::GetDetectResponse* Arena::CreateMaybeMessage< ::sensorService::GetDetectResponse >(Arena* arena) {
  return Arena::CreateInternal< ::sensorService::GetDetectResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sensorService::GetMotionInductionRequest* Arena::CreateMaybeMessage< ::sensorService::GetMotionInductionRequest >(Arena* arena) {
  return Arena::CreateInternal< ::sensorService::GetMotionInductionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sensorService::GetMotionInductionResponse* Arena::CreateMaybeMessage< ::sensorService::GetMotionInductionResponse >(Arena* arena) {
  return Arena::CreateInternal< ::sensorService::GetMotionInductionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sensorService::GetTouchRequest* Arena::CreateMaybeMessage< ::sensorService::GetTouchRequest >(Arena* arena) {
  return Arena::CreateInternal< ::sensorService::GetTouchRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sensorService::GetTouchResponse* Arena::CreateMaybeMessage< ::sensorService::GetTouchResponse >(Arena* arena) {
  return Arena::CreateInternal< ::sensorService::GetTouchResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sensorService::DataObs_DataEntry_DoNotUse* Arena::CreateMaybeMessage< ::sensorService::DataObs_DataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::sensorService::DataObs_DataEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::sensorService::DataObs* Arena::CreateMaybeMessage< ::sensorService::DataObs >(Arena* arena) {
  return Arena::CreateInternal< ::sensorService::DataObs >(arena);
}
template<> PROTOBUF_NOINLINE ::sensorService::DataAgv* Arena::CreateMaybeMessage< ::sensorService::DataAgv >(Arena* arena) {
  return Arena::CreateInternal< ::sensorService::DataAgv >(arena);
}
template<> PROTOBUF_NOINLINE ::sensorService::DataTouch_TouchedEntry_DoNotUse* Arena::CreateMaybeMessage< ::sensorService::DataTouch_TouchedEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::sensorService::DataTouch_TouchedEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::sensorService::DataTouch* Arena::CreateMaybeMessage< ::sensorService::DataTouch >(Arena* arena) {
  return Arena::CreateInternal< ::sensorService::DataTouch >(arena);
}
template<> PROTOBUF_NOINLINE ::sensorService::UpdateReq* Arena::CreateMaybeMessage< ::sensorService::UpdateReq >(Arena* arena) {
  return Arena::CreateInternal< ::sensorService::UpdateReq >(arena);
}
template<> PROTOBUF_NOINLINE ::sensorService::RawRequest* Arena::CreateMaybeMessage< ::sensorService::RawRequest >(Arena* arena) {
  return Arena::CreateInternal< ::sensorService::RawRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sensorService::RawResponse* Arena::CreateMaybeMessage< ::sensorService::RawResponse >(Arena* arena) {
  return Arena::CreateInternal< ::sensorService::RawResponse >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
