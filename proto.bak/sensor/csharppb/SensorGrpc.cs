// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: sensor.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace SensorService {
  public static partial class SensorService
  {
    static readonly string __ServiceName = "sensorService.SensorService";

    static readonly grpc::Marshaller<global::SensorService.GetDetectRequest> __Marshaller_sensorService_GetDetectRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SensorService.GetDetectRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SensorService.GetDetectResponse> __Marshaller_sensorService_GetDetectResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SensorService.GetDetectResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SensorService.GetMotionInductionRequest> __Marshaller_sensorService_GetMotionInductionRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SensorService.GetMotionInductionRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SensorService.GetMotionInductionResponse> __Marshaller_sensorService_GetMotionInductionResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SensorService.GetMotionInductionResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SensorService.GetTouchRequest> __Marshaller_sensorService_GetTouchRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SensorService.GetTouchRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SensorService.GetTouchResponse> __Marshaller_sensorService_GetTouchResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SensorService.GetTouchResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SensorService.RawRequest> __Marshaller_sensorService_RawRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SensorService.RawRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SensorService.RawResponse> __Marshaller_sensorService_RawResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SensorService.RawResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::SensorService.GetDetectRequest, global::SensorService.GetDetectResponse> __Method_GetDetect = new grpc::Method<global::SensorService.GetDetectRequest, global::SensorService.GetDetectResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetDetect",
        __Marshaller_sensorService_GetDetectRequest,
        __Marshaller_sensorService_GetDetectResponse);

    static readonly grpc::Method<global::SensorService.GetMotionInductionRequest, global::SensorService.GetMotionInductionResponse> __Method_GetMotionInduction = new grpc::Method<global::SensorService.GetMotionInductionRequest, global::SensorService.GetMotionInductionResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetMotionInduction",
        __Marshaller_sensorService_GetMotionInductionRequest,
        __Marshaller_sensorService_GetMotionInductionResponse);

    static readonly grpc::Method<global::SensorService.GetTouchRequest, global::SensorService.GetTouchResponse> __Method_GetTouch = new grpc::Method<global::SensorService.GetTouchRequest, global::SensorService.GetTouchResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetTouch",
        __Marshaller_sensorService_GetTouchRequest,
        __Marshaller_sensorService_GetTouchResponse);

    static readonly grpc::Method<global::SensorService.RawRequest, global::SensorService.RawResponse> __Method_Raw = new grpc::Method<global::SensorService.RawRequest, global::SensorService.RawResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "Raw",
        __Marshaller_sensorService_RawRequest,
        __Marshaller_sensorService_RawResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::SensorService.SensorReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of SensorService</summary>
    [grpc::BindServiceMethod(typeof(SensorService), "BindService")]
    public abstract partial class SensorServiceBase
    {
      /// <summary>
      /// 获取感应数据流
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task GetDetect(global::SensorService.GetDetectRequest request, grpc::IServerStreamWriter<global::SensorService.GetDetectResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 获取动态感应数据
      /// 场景示例： 迎宾感应
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task GetMotionInduction(global::SensorService.GetMotionInductionRequest request, grpc::IServerStreamWriter<global::SensorService.GetMotionInductionResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 获取触摸数据流
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task GetTouch(global::SensorService.GetTouchRequest request, grpc::IServerStreamWriter<global::SensorService.GetTouchResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 获取传感器原始数据调试接口
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task Raw(global::SensorService.RawRequest request, grpc::IServerStreamWriter<global::SensorService.RawResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for SensorService</summary>
    public partial class SensorServiceClient : grpc::ClientBase<SensorServiceClient>
    {
      /// <summary>Creates a new client for SensorService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public SensorServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for SensorService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public SensorServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected SensorServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected SensorServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// 获取感应数据流
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::SensorService.GetDetectResponse> GetDetect(global::SensorService.GetDetectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDetect(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 获取感应数据流
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::SensorService.GetDetectResponse> GetDetect(global::SensorService.GetDetectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetDetect, null, options, request);
      }
      /// <summary>
      /// 获取动态感应数据
      /// 场景示例： 迎宾感应
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::SensorService.GetMotionInductionResponse> GetMotionInduction(global::SensorService.GetMotionInductionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMotionInduction(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 获取动态感应数据
      /// 场景示例： 迎宾感应
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::SensorService.GetMotionInductionResponse> GetMotionInduction(global::SensorService.GetMotionInductionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetMotionInduction, null, options, request);
      }
      /// <summary>
      /// 获取触摸数据流
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::SensorService.GetTouchResponse> GetTouch(global::SensorService.GetTouchRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTouch(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 获取触摸数据流
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::SensorService.GetTouchResponse> GetTouch(global::SensorService.GetTouchRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetTouch, null, options, request);
      }
      /// <summary>
      /// 获取传感器原始数据调试接口
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::SensorService.RawResponse> Raw(global::SensorService.RawRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Raw(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 获取传感器原始数据调试接口
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::SensorService.RawResponse> Raw(global::SensorService.RawRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_Raw, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override SensorServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new SensorServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(SensorServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetDetect, serviceImpl.GetDetect)
          .AddMethod(__Method_GetMotionInduction, serviceImpl.GetMotionInduction)
          .AddMethod(__Method_GetTouch, serviceImpl.GetTouch)
          .AddMethod(__Method_Raw, serviceImpl.Raw).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, SensorServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetDetect, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::SensorService.GetDetectRequest, global::SensorService.GetDetectResponse>(serviceImpl.GetDetect));
      serviceBinder.AddMethod(__Method_GetMotionInduction, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::SensorService.GetMotionInductionRequest, global::SensorService.GetMotionInductionResponse>(serviceImpl.GetMotionInduction));
      serviceBinder.AddMethod(__Method_GetTouch, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::SensorService.GetTouchRequest, global::SensorService.GetTouchResponse>(serviceImpl.GetTouch));
      serviceBinder.AddMethod(__Method_Raw, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::SensorService.RawRequest, global::SensorService.RawResponse>(serviceImpl.Raw));
    }

  }
}
#endregion
