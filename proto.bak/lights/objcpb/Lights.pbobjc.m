// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lights.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "Lights.pbobjc.h"
#import "google/api/Annotations.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - LightsRoot

@implementation LightsRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    registry = [[GPBExtensionRegistry alloc] init];
    // Merge in the imports (direct or indirect) that defined extensions.
    [registry addExtensions:[GAPIAnnotationsRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - LightsRoot_FileDescriptor

static GPBFileDescriptor *LightsRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"lightsService"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum LightType

GPBEnumDescriptor *LightType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Undefined\000Mouth\000Hands\000Ears\000";
    static const int32_t values[] = {
        LightType_Undefined,
        LightType_Mouth,
        LightType_Hands,
        LightType_Ears,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(LightType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:LightType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL LightType_IsValidValue(int32_t value__) {
  switch (value__) {
    case LightType_Undefined:
    case LightType_Mouth:
    case LightType_Hands:
    case LightType_Ears:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PlayMode

GPBEnumDescriptor *PlayMode_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Preset\000Always\000Marquee\000Flash\000Ticktock\000";
    static const int32_t values[] = {
        PlayMode_Preset,
        PlayMode_Always,
        PlayMode_Marquee,
        PlayMode_Flash,
        PlayMode_Ticktock,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PlayMode)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PlayMode_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PlayMode_IsValidValue(int32_t value__) {
  switch (value__) {
    case PlayMode_Preset:
    case PlayMode_Always:
    case PlayMode_Marquee:
    case PlayMode_Flash:
    case PlayMode_Ticktock:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - PreviewLightRequest

@implementation PreviewLightRequest

@dynamic id_p;

typedef struct PreviewLightRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
} PreviewLightRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PreviewLightRequest_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PreviewLightRequest__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PreviewLightRequest class]
                                     rootClass:[LightsRoot class]
                                          file:LightsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PreviewLightRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PreviewLightResponse

@implementation PreviewLightResponse


typedef struct PreviewLightResponse__storage_ {
  uint32_t _has_storage_[1];
} PreviewLightResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PreviewLightResponse class]
                                     rootClass:[LightsRoot class]
                                          file:LightsRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PreviewLightResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PlayLightRequest

@implementation PlayLightRequest

@dynamic ltype;
@dynamic id_p;
@dynamic name;

typedef struct PlayLightRequest__storage_ {
  uint32_t _has_storage_[1];
  LightType ltype;
  NSString *id_p;
  NSString *name;
} PlayLightRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "ltype",
        .dataTypeSpecific.enumDescFunc = LightType_EnumDescriptor,
        .number = PlayLightRequest_FieldNumber_Ltype,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PlayLightRequest__storage_, ltype),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PlayLightRequest_FieldNumber_Id_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PlayLightRequest__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PlayLightRequest_FieldNumber_Name,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PlayLightRequest__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PlayLightRequest class]
                                     rootClass:[LightsRoot class]
                                          file:LightsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PlayLightRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PlayLightRequest_Ltype_RawValue(PlayLightRequest *message) {
  GPBDescriptor *descriptor = [PlayLightRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PlayLightRequest_FieldNumber_Ltype];
  return GPBGetMessageInt32Field(message, field);
}

void SetPlayLightRequest_Ltype_RawValue(PlayLightRequest *message, int32_t value) {
  GPBDescriptor *descriptor = [PlayLightRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PlayLightRequest_FieldNumber_Ltype];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PlayLightResponse

@implementation PlayLightResponse


typedef struct PlayLightResponse__storage_ {
  uint32_t _has_storage_[1];
} PlayLightResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PlayLightResponse class]
                                     rootClass:[LightsRoot class]
                                          file:LightsRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PlayLightResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - StopLightRequest

@implementation StopLightRequest

@dynamic ltypesArray, ltypesArray_Count;

typedef struct StopLightRequest__storage_ {
  uint32_t _has_storage_[1];
  GPBEnumArray *ltypesArray;
} StopLightRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "ltypesArray",
        .dataTypeSpecific.enumDescFunc = LightType_EnumDescriptor,
        .number = StopLightRequest_FieldNumber_LtypesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(StopLightRequest__storage_, ltypesArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[StopLightRequest class]
                                     rootClass:[LightsRoot class]
                                          file:LightsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(StopLightRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - StopLightResponse

@implementation StopLightResponse


typedef struct StopLightResponse__storage_ {
  uint32_t _has_storage_[1];
} StopLightResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[StopLightResponse class]
                                     rootClass:[LightsRoot class]
                                          file:LightsRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(StopLightResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - LightInfo

@implementation LightInfo

@dynamic ltype;
@dynamic id_p;
@dynamic name;
@dynamic framesArray, framesArray_Count;

typedef struct LightInfo__storage_ {
  uint32_t _has_storage_[1];
  LightType ltype;
  NSString *id_p;
  NSString *name;
  NSMutableArray *framesArray;
} LightInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "ltype",
        .dataTypeSpecific.enumDescFunc = LightType_EnumDescriptor,
        .number = LightInfo_FieldNumber_Ltype,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(LightInfo__storage_, ltype),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = LightInfo_FieldNumber_Id_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(LightInfo__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = LightInfo_FieldNumber_Name,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(LightInfo__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "framesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(LightFrame),
        .number = LightInfo_FieldNumber_FramesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(LightInfo__storage_, framesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[LightInfo class]
                                     rootClass:[LightsRoot class]
                                          file:LightsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(LightInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t LightInfo_Ltype_RawValue(LightInfo *message) {
  GPBDescriptor *descriptor = [LightInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:LightInfo_FieldNumber_Ltype];
  return GPBGetMessageInt32Field(message, field);
}

void SetLightInfo_Ltype_RawValue(LightInfo *message, int32_t value) {
  GPBDescriptor *descriptor = [LightInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:LightInfo_FieldNumber_Ltype];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - LightFrame

@implementation LightFrame

@dynamic colorsArray, colorsArray_Count;
@dynamic speed;
@dynamic mode;

typedef struct LightFrame__storage_ {
  uint32_t _has_storage_[1];
  uint32_t speed;
  PlayMode mode;
  NSMutableArray *colorsArray;
} LightFrame__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "colorsArray",
        .dataTypeSpecific.className = NULL,
        .number = LightFrame_FieldNumber_ColorsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(LightFrame__storage_, colorsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "speed",
        .dataTypeSpecific.className = NULL,
        .number = LightFrame_FieldNumber_Speed,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(LightFrame__storage_, speed),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "mode",
        .dataTypeSpecific.enumDescFunc = PlayMode_EnumDescriptor,
        .number = LightFrame_FieldNumber_Mode,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(LightFrame__storage_, mode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[LightFrame class]
                                     rootClass:[LightsRoot class]
                                          file:LightsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(LightFrame__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t LightFrame_Mode_RawValue(LightFrame *message) {
  GPBDescriptor *descriptor = [LightFrame descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:LightFrame_FieldNumber_Mode];
  return GPBGetMessageInt32Field(message, field);
}

void SetLightFrame_Mode_RawValue(LightFrame *message, int32_t value) {
  GPBDescriptor *descriptor = [LightFrame descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:LightFrame_FieldNumber_Mode];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - ListLightsRequest

@implementation ListLightsRequest

@dynamic ltype;

typedef struct ListLightsRequest__storage_ {
  uint32_t _has_storage_[1];
  LightType ltype;
} ListLightsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "ltype",
        .dataTypeSpecific.enumDescFunc = LightType_EnumDescriptor,
        .number = ListLightsRequest_FieldNumber_Ltype,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ListLightsRequest__storage_, ltype),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ListLightsRequest class]
                                     rootClass:[LightsRoot class]
                                          file:LightsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ListLightsRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t ListLightsRequest_Ltype_RawValue(ListLightsRequest *message) {
  GPBDescriptor *descriptor = [ListLightsRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ListLightsRequest_FieldNumber_Ltype];
  return GPBGetMessageInt32Field(message, field);
}

void SetListLightsRequest_Ltype_RawValue(ListLightsRequest *message, int32_t value) {
  GPBDescriptor *descriptor = [ListLightsRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ListLightsRequest_FieldNumber_Ltype];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - ListLightsResponse

@implementation ListLightsResponse

@dynamic lightsInfoArray, lightsInfoArray_Count;

typedef struct ListLightsResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *lightsInfoArray;
} ListLightsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "lightsInfoArray",
        .dataTypeSpecific.className = GPBStringifySymbol(LightInfo),
        .number = ListLightsResponse_FieldNumber_LightsInfoArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ListLightsResponse__storage_, lightsInfoArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ListLightsResponse class]
                                     rootClass:[LightsRoot class]
                                          file:LightsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ListLightsResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - NewLightRequest

@implementation NewLightRequest

@dynamic hasLightInfo, lightInfo;

typedef struct NewLightRequest__storage_ {
  uint32_t _has_storage_[1];
  LightInfo *lightInfo;
} NewLightRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "lightInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(LightInfo),
        .number = NewLightRequest_FieldNumber_LightInfo,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(NewLightRequest__storage_, lightInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[NewLightRequest class]
                                     rootClass:[LightsRoot class]
                                          file:LightsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(NewLightRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - NewLightResponse

@implementation NewLightResponse

@dynamic hasLightInfo, lightInfo;

typedef struct NewLightResponse__storage_ {
  uint32_t _has_storage_[1];
  LightInfo *lightInfo;
} NewLightResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "lightInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(LightInfo),
        .number = NewLightResponse_FieldNumber_LightInfo,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(NewLightResponse__storage_, lightInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[NewLightResponse class]
                                     rootClass:[LightsRoot class]
                                          file:LightsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(NewLightResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UpdateLightRequest

@implementation UpdateLightRequest

@dynamic hasLightInfo, lightInfo;

typedef struct UpdateLightRequest__storage_ {
  uint32_t _has_storage_[1];
  LightInfo *lightInfo;
} UpdateLightRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "lightInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(LightInfo),
        .number = UpdateLightRequest_FieldNumber_LightInfo,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UpdateLightRequest__storage_, lightInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UpdateLightRequest class]
                                     rootClass:[LightsRoot class]
                                          file:LightsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UpdateLightRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UpdateLightResponse

@implementation UpdateLightResponse

@dynamic hasLightInfo, lightInfo;

typedef struct UpdateLightResponse__storage_ {
  uint32_t _has_storage_[1];
  LightInfo *lightInfo;
} UpdateLightResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "lightInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(LightInfo),
        .number = UpdateLightResponse_FieldNumber_LightInfo,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UpdateLightResponse__storage_, lightInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UpdateLightResponse class]
                                     rootClass:[LightsRoot class]
                                          file:LightsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UpdateLightResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DeleteLightsRequest

@implementation DeleteLightsRequest

@dynamic lightsIdArray, lightsIdArray_Count;

typedef struct DeleteLightsRequest__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *lightsIdArray;
} DeleteLightsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "lightsIdArray",
        .dataTypeSpecific.className = NULL,
        .number = DeleteLightsRequest_FieldNumber_LightsIdArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(DeleteLightsRequest__storage_, lightsIdArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DeleteLightsRequest class]
                                     rootClass:[LightsRoot class]
                                          file:LightsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DeleteLightsRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DeleteLightsResponse

@implementation DeleteLightsResponse


typedef struct DeleteLightsResponse__storage_ {
  uint32_t _has_storage_[1];
} DeleteLightsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DeleteLightsResponse class]
                                     rootClass:[LightsRoot class]
                                          file:LightsRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(DeleteLightsResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - StateRequest

@implementation StateRequest


typedef struct StateRequest__storage_ {
  uint32_t _has_storage_[1];
} StateRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[StateRequest class]
                                     rootClass:[LightsRoot class]
                                          file:LightsRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(StateRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - StateResponse

@implementation StateResponse

@dynamic isActive;
@dynamic isPlaying;

typedef struct StateResponse__storage_ {
  uint32_t _has_storage_[1];
} StateResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "isActive",
        .dataTypeSpecific.className = NULL,
        .number = StateResponse_FieldNumber_IsActive,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "isPlaying",
        .dataTypeSpecific.className = NULL,
        .number = StateResponse_FieldNumber_IsPlaying,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[StateResponse class]
                                     rootClass:[LightsRoot class]
                                          file:LightsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(StateResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SwitchRequest

@implementation SwitchRequest

@dynamic active;

typedef struct SwitchRequest__storage_ {
  uint32_t _has_storage_[1];
} SwitchRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "active",
        .dataTypeSpecific.className = NULL,
        .number = SwitchRequest_FieldNumber_Active,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SwitchRequest class]
                                     rootClass:[LightsRoot class]
                                          file:LightsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SwitchRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SwitchResponse

@implementation SwitchResponse

@dynamic isActive;

typedef struct SwitchResponse__storage_ {
  uint32_t _has_storage_[1];
} SwitchResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "isActive",
        .dataTypeSpecific.className = NULL,
        .number = SwitchResponse_FieldNumber_IsActive,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SwitchResponse class]
                                     rootClass:[LightsRoot class]
                                          file:LightsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SwitchResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
