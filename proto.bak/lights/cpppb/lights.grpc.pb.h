// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: lights.proto
#ifndef GRPC_lights_2eproto__INCLUDED
#define GRPC_lights_2eproto__INCLUDED

#include "lights.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc_impl {
class CompletionQueue;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc_impl

namespace grpc {
namespace experimental {
template <typename RequestT, typename ResponseT>
class MessageAllocator;
}  // namespace experimental
}  // namespace grpc

namespace lightsService {

class LightsService final {
 public:
  static constexpr char const* service_full_name() {
    return "lightsService.LightsService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // 预览灯光
    // 创建灯光后使用此方法生成灯光文件
    // 在未生成灯光文件前调用PlayLight将无效
    virtual ::grpc::Status PreviewLight(::grpc::ClientContext* context, const ::lightsService::PreviewLightRequest& request, ::lightsService::PreviewLightResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lightsService::PreviewLightResponse>> AsyncPreviewLight(::grpc::ClientContext* context, const ::lightsService::PreviewLightRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lightsService::PreviewLightResponse>>(AsyncPreviewLightRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lightsService::PreviewLightResponse>> PrepareAsyncPreviewLight(::grpc::ClientContext* context, const ::lightsService::PreviewLightRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lightsService::PreviewLightResponse>>(PrepareAsyncPreviewLightRaw(context, request, cq));
    }
    // 播放灯光
    // 需在播放前执行PreviewLight生成灯光文件
    virtual ::grpc::Status PlayLight(::grpc::ClientContext* context, const ::lightsService::PlayLightRequest& request, ::lightsService::PlayLightResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lightsService::PlayLightResponse>> AsyncPlayLight(::grpc::ClientContext* context, const ::lightsService::PlayLightRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lightsService::PlayLightResponse>>(AsyncPlayLightRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lightsService::PlayLightResponse>> PrepareAsyncPlayLight(::grpc::ClientContext* context, const ::lightsService::PlayLightRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lightsService::PlayLightResponse>>(PrepareAsyncPlayLightRaw(context, request, cq));
    }
    // 停止灯光
    virtual ::grpc::Status StopLight(::grpc::ClientContext* context, const ::lightsService::StopLightRequest& request, ::lightsService::StopLightResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lightsService::StopLightResponse>> AsyncStopLight(::grpc::ClientContext* context, const ::lightsService::StopLightRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lightsService::StopLightResponse>>(AsyncStopLightRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lightsService::StopLightResponse>> PrepareAsyncStopLight(::grpc::ClientContext* context, const ::lightsService::StopLightRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lightsService::StopLightResponse>>(PrepareAsyncStopLightRaw(context, request, cq));
    }
    // 获取灯光数据
    virtual ::grpc::Status ListLights(::grpc::ClientContext* context, const ::lightsService::ListLightsRequest& request, ::lightsService::ListLightsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lightsService::ListLightsResponse>> AsyncListLights(::grpc::ClientContext* context, const ::lightsService::ListLightsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lightsService::ListLightsResponse>>(AsyncListLightsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lightsService::ListLightsResponse>> PrepareAsyncListLights(::grpc::ClientContext* context, const ::lightsService::ListLightsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lightsService::ListLightsResponse>>(PrepareAsyncListLightsRaw(context, request, cq));
    }
    // 创建灯光
    virtual ::grpc::Status NewLight(::grpc::ClientContext* context, const ::lightsService::NewLightRequest& request, ::lightsService::NewLightResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lightsService::NewLightResponse>> AsyncNewLight(::grpc::ClientContext* context, const ::lightsService::NewLightRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lightsService::NewLightResponse>>(AsyncNewLightRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lightsService::NewLightResponse>> PrepareAsyncNewLight(::grpc::ClientContext* context, const ::lightsService::NewLightRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lightsService::NewLightResponse>>(PrepareAsyncNewLightRaw(context, request, cq));
    }
    // 更新灯光数据
    virtual ::grpc::Status UpdateLight(::grpc::ClientContext* context, const ::lightsService::UpdateLightRequest& request, ::lightsService::UpdateLightResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lightsService::UpdateLightResponse>> AsyncUpdateLight(::grpc::ClientContext* context, const ::lightsService::UpdateLightRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lightsService::UpdateLightResponse>>(AsyncUpdateLightRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lightsService::UpdateLightResponse>> PrepareAsyncUpdateLight(::grpc::ClientContext* context, const ::lightsService::UpdateLightRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lightsService::UpdateLightResponse>>(PrepareAsyncUpdateLightRaw(context, request, cq));
    }
    // 删除灯光
    virtual ::grpc::Status DeleteLights(::grpc::ClientContext* context, const ::lightsService::DeleteLightsRequest& request, ::lightsService::DeleteLightsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lightsService::DeleteLightsResponse>> AsyncDeleteLights(::grpc::ClientContext* context, const ::lightsService::DeleteLightsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lightsService::DeleteLightsResponse>>(AsyncDeleteLightsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lightsService::DeleteLightsResponse>> PrepareAsyncDeleteLights(::grpc::ClientContext* context, const ::lightsService::DeleteLightsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lightsService::DeleteLightsResponse>>(PrepareAsyncDeleteLightsRaw(context, request, cq));
    }
    // 获取当前灯光模块状态
    virtual ::grpc::Status State(::grpc::ClientContext* context, const ::lightsService::StateRequest& request, ::lightsService::StateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lightsService::StateResponse>> AsyncState(::grpc::ClientContext* context, const ::lightsService::StateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lightsService::StateResponse>>(AsyncStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lightsService::StateResponse>> PrepareAsyncState(::grpc::ClientContext* context, const ::lightsService::StateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lightsService::StateResponse>>(PrepareAsyncStateRaw(context, request, cq));
    }
    // 控制灯光的开关
    virtual ::grpc::Status Switch(::grpc::ClientContext* context, const ::lightsService::SwitchRequest& request, ::lightsService::SwitchResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lightsService::SwitchResponse>> AsyncSwitch(::grpc::ClientContext* context, const ::lightsService::SwitchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lightsService::SwitchResponse>>(AsyncSwitchRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lightsService::SwitchResponse>> PrepareAsyncSwitch(::grpc::ClientContext* context, const ::lightsService::SwitchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lightsService::SwitchResponse>>(PrepareAsyncSwitchRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // 预览灯光
      // 创建灯光后使用此方法生成灯光文件
      // 在未生成灯光文件前调用PlayLight将无效
      virtual void PreviewLight(::grpc::ClientContext* context, const ::lightsService::PreviewLightRequest* request, ::lightsService::PreviewLightResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PreviewLight(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lightsService::PreviewLightResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PreviewLight(::grpc::ClientContext* context, const ::lightsService::PreviewLightRequest* request, ::lightsService::PreviewLightResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void PreviewLight(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lightsService::PreviewLightResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // 播放灯光
      // 需在播放前执行PreviewLight生成灯光文件
      virtual void PlayLight(::grpc::ClientContext* context, const ::lightsService::PlayLightRequest* request, ::lightsService::PlayLightResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PlayLight(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lightsService::PlayLightResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PlayLight(::grpc::ClientContext* context, const ::lightsService::PlayLightRequest* request, ::lightsService::PlayLightResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void PlayLight(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lightsService::PlayLightResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // 停止灯光
      virtual void StopLight(::grpc::ClientContext* context, const ::lightsService::StopLightRequest* request, ::lightsService::StopLightResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void StopLight(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lightsService::StopLightResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void StopLight(::grpc::ClientContext* context, const ::lightsService::StopLightRequest* request, ::lightsService::StopLightResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void StopLight(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lightsService::StopLightResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // 获取灯光数据
      virtual void ListLights(::grpc::ClientContext* context, const ::lightsService::ListLightsRequest* request, ::lightsService::ListLightsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListLights(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lightsService::ListLightsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListLights(::grpc::ClientContext* context, const ::lightsService::ListLightsRequest* request, ::lightsService::ListLightsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void ListLights(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lightsService::ListLightsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // 创建灯光
      virtual void NewLight(::grpc::ClientContext* context, const ::lightsService::NewLightRequest* request, ::lightsService::NewLightResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void NewLight(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lightsService::NewLightResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void NewLight(::grpc::ClientContext* context, const ::lightsService::NewLightRequest* request, ::lightsService::NewLightResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void NewLight(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lightsService::NewLightResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // 更新灯光数据
      virtual void UpdateLight(::grpc::ClientContext* context, const ::lightsService::UpdateLightRequest* request, ::lightsService::UpdateLightResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateLight(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lightsService::UpdateLightResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateLight(::grpc::ClientContext* context, const ::lightsService::UpdateLightRequest* request, ::lightsService::UpdateLightResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void UpdateLight(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lightsService::UpdateLightResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // 删除灯光
      virtual void DeleteLights(::grpc::ClientContext* context, const ::lightsService::DeleteLightsRequest* request, ::lightsService::DeleteLightsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteLights(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lightsService::DeleteLightsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteLights(::grpc::ClientContext* context, const ::lightsService::DeleteLightsRequest* request, ::lightsService::DeleteLightsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void DeleteLights(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lightsService::DeleteLightsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // 获取当前灯光模块状态
      virtual void State(::grpc::ClientContext* context, const ::lightsService::StateRequest* request, ::lightsService::StateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void State(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lightsService::StateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void State(::grpc::ClientContext* context, const ::lightsService::StateRequest* request, ::lightsService::StateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void State(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lightsService::StateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // 控制灯光的开关
      virtual void Switch(::grpc::ClientContext* context, const ::lightsService::SwitchRequest* request, ::lightsService::SwitchResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Switch(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lightsService::SwitchResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Switch(::grpc::ClientContext* context, const ::lightsService::SwitchRequest* request, ::lightsService::SwitchResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Switch(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lightsService::SwitchResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::lightsService::PreviewLightResponse>* AsyncPreviewLightRaw(::grpc::ClientContext* context, const ::lightsService::PreviewLightRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::lightsService::PreviewLightResponse>* PrepareAsyncPreviewLightRaw(::grpc::ClientContext* context, const ::lightsService::PreviewLightRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::lightsService::PlayLightResponse>* AsyncPlayLightRaw(::grpc::ClientContext* context, const ::lightsService::PlayLightRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::lightsService::PlayLightResponse>* PrepareAsyncPlayLightRaw(::grpc::ClientContext* context, const ::lightsService::PlayLightRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::lightsService::StopLightResponse>* AsyncStopLightRaw(::grpc::ClientContext* context, const ::lightsService::StopLightRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::lightsService::StopLightResponse>* PrepareAsyncStopLightRaw(::grpc::ClientContext* context, const ::lightsService::StopLightRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::lightsService::ListLightsResponse>* AsyncListLightsRaw(::grpc::ClientContext* context, const ::lightsService::ListLightsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::lightsService::ListLightsResponse>* PrepareAsyncListLightsRaw(::grpc::ClientContext* context, const ::lightsService::ListLightsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::lightsService::NewLightResponse>* AsyncNewLightRaw(::grpc::ClientContext* context, const ::lightsService::NewLightRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::lightsService::NewLightResponse>* PrepareAsyncNewLightRaw(::grpc::ClientContext* context, const ::lightsService::NewLightRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::lightsService::UpdateLightResponse>* AsyncUpdateLightRaw(::grpc::ClientContext* context, const ::lightsService::UpdateLightRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::lightsService::UpdateLightResponse>* PrepareAsyncUpdateLightRaw(::grpc::ClientContext* context, const ::lightsService::UpdateLightRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::lightsService::DeleteLightsResponse>* AsyncDeleteLightsRaw(::grpc::ClientContext* context, const ::lightsService::DeleteLightsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::lightsService::DeleteLightsResponse>* PrepareAsyncDeleteLightsRaw(::grpc::ClientContext* context, const ::lightsService::DeleteLightsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::lightsService::StateResponse>* AsyncStateRaw(::grpc::ClientContext* context, const ::lightsService::StateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::lightsService::StateResponse>* PrepareAsyncStateRaw(::grpc::ClientContext* context, const ::lightsService::StateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::lightsService::SwitchResponse>* AsyncSwitchRaw(::grpc::ClientContext* context, const ::lightsService::SwitchRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::lightsService::SwitchResponse>* PrepareAsyncSwitchRaw(::grpc::ClientContext* context, const ::lightsService::SwitchRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status PreviewLight(::grpc::ClientContext* context, const ::lightsService::PreviewLightRequest& request, ::lightsService::PreviewLightResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lightsService::PreviewLightResponse>> AsyncPreviewLight(::grpc::ClientContext* context, const ::lightsService::PreviewLightRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lightsService::PreviewLightResponse>>(AsyncPreviewLightRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lightsService::PreviewLightResponse>> PrepareAsyncPreviewLight(::grpc::ClientContext* context, const ::lightsService::PreviewLightRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lightsService::PreviewLightResponse>>(PrepareAsyncPreviewLightRaw(context, request, cq));
    }
    ::grpc::Status PlayLight(::grpc::ClientContext* context, const ::lightsService::PlayLightRequest& request, ::lightsService::PlayLightResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lightsService::PlayLightResponse>> AsyncPlayLight(::grpc::ClientContext* context, const ::lightsService::PlayLightRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lightsService::PlayLightResponse>>(AsyncPlayLightRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lightsService::PlayLightResponse>> PrepareAsyncPlayLight(::grpc::ClientContext* context, const ::lightsService::PlayLightRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lightsService::PlayLightResponse>>(PrepareAsyncPlayLightRaw(context, request, cq));
    }
    ::grpc::Status StopLight(::grpc::ClientContext* context, const ::lightsService::StopLightRequest& request, ::lightsService::StopLightResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lightsService::StopLightResponse>> AsyncStopLight(::grpc::ClientContext* context, const ::lightsService::StopLightRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lightsService::StopLightResponse>>(AsyncStopLightRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lightsService::StopLightResponse>> PrepareAsyncStopLight(::grpc::ClientContext* context, const ::lightsService::StopLightRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lightsService::StopLightResponse>>(PrepareAsyncStopLightRaw(context, request, cq));
    }
    ::grpc::Status ListLights(::grpc::ClientContext* context, const ::lightsService::ListLightsRequest& request, ::lightsService::ListLightsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lightsService::ListLightsResponse>> AsyncListLights(::grpc::ClientContext* context, const ::lightsService::ListLightsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lightsService::ListLightsResponse>>(AsyncListLightsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lightsService::ListLightsResponse>> PrepareAsyncListLights(::grpc::ClientContext* context, const ::lightsService::ListLightsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lightsService::ListLightsResponse>>(PrepareAsyncListLightsRaw(context, request, cq));
    }
    ::grpc::Status NewLight(::grpc::ClientContext* context, const ::lightsService::NewLightRequest& request, ::lightsService::NewLightResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lightsService::NewLightResponse>> AsyncNewLight(::grpc::ClientContext* context, const ::lightsService::NewLightRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lightsService::NewLightResponse>>(AsyncNewLightRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lightsService::NewLightResponse>> PrepareAsyncNewLight(::grpc::ClientContext* context, const ::lightsService::NewLightRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lightsService::NewLightResponse>>(PrepareAsyncNewLightRaw(context, request, cq));
    }
    ::grpc::Status UpdateLight(::grpc::ClientContext* context, const ::lightsService::UpdateLightRequest& request, ::lightsService::UpdateLightResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lightsService::UpdateLightResponse>> AsyncUpdateLight(::grpc::ClientContext* context, const ::lightsService::UpdateLightRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lightsService::UpdateLightResponse>>(AsyncUpdateLightRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lightsService::UpdateLightResponse>> PrepareAsyncUpdateLight(::grpc::ClientContext* context, const ::lightsService::UpdateLightRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lightsService::UpdateLightResponse>>(PrepareAsyncUpdateLightRaw(context, request, cq));
    }
    ::grpc::Status DeleteLights(::grpc::ClientContext* context, const ::lightsService::DeleteLightsRequest& request, ::lightsService::DeleteLightsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lightsService::DeleteLightsResponse>> AsyncDeleteLights(::grpc::ClientContext* context, const ::lightsService::DeleteLightsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lightsService::DeleteLightsResponse>>(AsyncDeleteLightsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lightsService::DeleteLightsResponse>> PrepareAsyncDeleteLights(::grpc::ClientContext* context, const ::lightsService::DeleteLightsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lightsService::DeleteLightsResponse>>(PrepareAsyncDeleteLightsRaw(context, request, cq));
    }
    ::grpc::Status State(::grpc::ClientContext* context, const ::lightsService::StateRequest& request, ::lightsService::StateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lightsService::StateResponse>> AsyncState(::grpc::ClientContext* context, const ::lightsService::StateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lightsService::StateResponse>>(AsyncStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lightsService::StateResponse>> PrepareAsyncState(::grpc::ClientContext* context, const ::lightsService::StateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lightsService::StateResponse>>(PrepareAsyncStateRaw(context, request, cq));
    }
    ::grpc::Status Switch(::grpc::ClientContext* context, const ::lightsService::SwitchRequest& request, ::lightsService::SwitchResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lightsService::SwitchResponse>> AsyncSwitch(::grpc::ClientContext* context, const ::lightsService::SwitchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lightsService::SwitchResponse>>(AsyncSwitchRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lightsService::SwitchResponse>> PrepareAsyncSwitch(::grpc::ClientContext* context, const ::lightsService::SwitchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lightsService::SwitchResponse>>(PrepareAsyncSwitchRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void PreviewLight(::grpc::ClientContext* context, const ::lightsService::PreviewLightRequest* request, ::lightsService::PreviewLightResponse* response, std::function<void(::grpc::Status)>) override;
      void PreviewLight(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lightsService::PreviewLightResponse* response, std::function<void(::grpc::Status)>) override;
      void PreviewLight(::grpc::ClientContext* context, const ::lightsService::PreviewLightRequest* request, ::lightsService::PreviewLightResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void PreviewLight(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lightsService::PreviewLightResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void PlayLight(::grpc::ClientContext* context, const ::lightsService::PlayLightRequest* request, ::lightsService::PlayLightResponse* response, std::function<void(::grpc::Status)>) override;
      void PlayLight(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lightsService::PlayLightResponse* response, std::function<void(::grpc::Status)>) override;
      void PlayLight(::grpc::ClientContext* context, const ::lightsService::PlayLightRequest* request, ::lightsService::PlayLightResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void PlayLight(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lightsService::PlayLightResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void StopLight(::grpc::ClientContext* context, const ::lightsService::StopLightRequest* request, ::lightsService::StopLightResponse* response, std::function<void(::grpc::Status)>) override;
      void StopLight(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lightsService::StopLightResponse* response, std::function<void(::grpc::Status)>) override;
      void StopLight(::grpc::ClientContext* context, const ::lightsService::StopLightRequest* request, ::lightsService::StopLightResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void StopLight(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lightsService::StopLightResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void ListLights(::grpc::ClientContext* context, const ::lightsService::ListLightsRequest* request, ::lightsService::ListLightsResponse* response, std::function<void(::grpc::Status)>) override;
      void ListLights(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lightsService::ListLightsResponse* response, std::function<void(::grpc::Status)>) override;
      void ListLights(::grpc::ClientContext* context, const ::lightsService::ListLightsRequest* request, ::lightsService::ListLightsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void ListLights(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lightsService::ListLightsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void NewLight(::grpc::ClientContext* context, const ::lightsService::NewLightRequest* request, ::lightsService::NewLightResponse* response, std::function<void(::grpc::Status)>) override;
      void NewLight(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lightsService::NewLightResponse* response, std::function<void(::grpc::Status)>) override;
      void NewLight(::grpc::ClientContext* context, const ::lightsService::NewLightRequest* request, ::lightsService::NewLightResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void NewLight(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lightsService::NewLightResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void UpdateLight(::grpc::ClientContext* context, const ::lightsService::UpdateLightRequest* request, ::lightsService::UpdateLightResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateLight(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lightsService::UpdateLightResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateLight(::grpc::ClientContext* context, const ::lightsService::UpdateLightRequest* request, ::lightsService::UpdateLightResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void UpdateLight(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lightsService::UpdateLightResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void DeleteLights(::grpc::ClientContext* context, const ::lightsService::DeleteLightsRequest* request, ::lightsService::DeleteLightsResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteLights(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lightsService::DeleteLightsResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteLights(::grpc::ClientContext* context, const ::lightsService::DeleteLightsRequest* request, ::lightsService::DeleteLightsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void DeleteLights(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lightsService::DeleteLightsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void State(::grpc::ClientContext* context, const ::lightsService::StateRequest* request, ::lightsService::StateResponse* response, std::function<void(::grpc::Status)>) override;
      void State(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lightsService::StateResponse* response, std::function<void(::grpc::Status)>) override;
      void State(::grpc::ClientContext* context, const ::lightsService::StateRequest* request, ::lightsService::StateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void State(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lightsService::StateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Switch(::grpc::ClientContext* context, const ::lightsService::SwitchRequest* request, ::lightsService::SwitchResponse* response, std::function<void(::grpc::Status)>) override;
      void Switch(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lightsService::SwitchResponse* response, std::function<void(::grpc::Status)>) override;
      void Switch(::grpc::ClientContext* context, const ::lightsService::SwitchRequest* request, ::lightsService::SwitchResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Switch(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lightsService::SwitchResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::lightsService::PreviewLightResponse>* AsyncPreviewLightRaw(::grpc::ClientContext* context, const ::lightsService::PreviewLightRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::lightsService::PreviewLightResponse>* PrepareAsyncPreviewLightRaw(::grpc::ClientContext* context, const ::lightsService::PreviewLightRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::lightsService::PlayLightResponse>* AsyncPlayLightRaw(::grpc::ClientContext* context, const ::lightsService::PlayLightRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::lightsService::PlayLightResponse>* PrepareAsyncPlayLightRaw(::grpc::ClientContext* context, const ::lightsService::PlayLightRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::lightsService::StopLightResponse>* AsyncStopLightRaw(::grpc::ClientContext* context, const ::lightsService::StopLightRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::lightsService::StopLightResponse>* PrepareAsyncStopLightRaw(::grpc::ClientContext* context, const ::lightsService::StopLightRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::lightsService::ListLightsResponse>* AsyncListLightsRaw(::grpc::ClientContext* context, const ::lightsService::ListLightsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::lightsService::ListLightsResponse>* PrepareAsyncListLightsRaw(::grpc::ClientContext* context, const ::lightsService::ListLightsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::lightsService::NewLightResponse>* AsyncNewLightRaw(::grpc::ClientContext* context, const ::lightsService::NewLightRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::lightsService::NewLightResponse>* PrepareAsyncNewLightRaw(::grpc::ClientContext* context, const ::lightsService::NewLightRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::lightsService::UpdateLightResponse>* AsyncUpdateLightRaw(::grpc::ClientContext* context, const ::lightsService::UpdateLightRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::lightsService::UpdateLightResponse>* PrepareAsyncUpdateLightRaw(::grpc::ClientContext* context, const ::lightsService::UpdateLightRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::lightsService::DeleteLightsResponse>* AsyncDeleteLightsRaw(::grpc::ClientContext* context, const ::lightsService::DeleteLightsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::lightsService::DeleteLightsResponse>* PrepareAsyncDeleteLightsRaw(::grpc::ClientContext* context, const ::lightsService::DeleteLightsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::lightsService::StateResponse>* AsyncStateRaw(::grpc::ClientContext* context, const ::lightsService::StateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::lightsService::StateResponse>* PrepareAsyncStateRaw(::grpc::ClientContext* context, const ::lightsService::StateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::lightsService::SwitchResponse>* AsyncSwitchRaw(::grpc::ClientContext* context, const ::lightsService::SwitchRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::lightsService::SwitchResponse>* PrepareAsyncSwitchRaw(::grpc::ClientContext* context, const ::lightsService::SwitchRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_PreviewLight_;
    const ::grpc::internal::RpcMethod rpcmethod_PlayLight_;
    const ::grpc::internal::RpcMethod rpcmethod_StopLight_;
    const ::grpc::internal::RpcMethod rpcmethod_ListLights_;
    const ::grpc::internal::RpcMethod rpcmethod_NewLight_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateLight_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteLights_;
    const ::grpc::internal::RpcMethod rpcmethod_State_;
    const ::grpc::internal::RpcMethod rpcmethod_Switch_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // 预览灯光
    // 创建灯光后使用此方法生成灯光文件
    // 在未生成灯光文件前调用PlayLight将无效
    virtual ::grpc::Status PreviewLight(::grpc::ServerContext* context, const ::lightsService::PreviewLightRequest* request, ::lightsService::PreviewLightResponse* response);
    // 播放灯光
    // 需在播放前执行PreviewLight生成灯光文件
    virtual ::grpc::Status PlayLight(::grpc::ServerContext* context, const ::lightsService::PlayLightRequest* request, ::lightsService::PlayLightResponse* response);
    // 停止灯光
    virtual ::grpc::Status StopLight(::grpc::ServerContext* context, const ::lightsService::StopLightRequest* request, ::lightsService::StopLightResponse* response);
    // 获取灯光数据
    virtual ::grpc::Status ListLights(::grpc::ServerContext* context, const ::lightsService::ListLightsRequest* request, ::lightsService::ListLightsResponse* response);
    // 创建灯光
    virtual ::grpc::Status NewLight(::grpc::ServerContext* context, const ::lightsService::NewLightRequest* request, ::lightsService::NewLightResponse* response);
    // 更新灯光数据
    virtual ::grpc::Status UpdateLight(::grpc::ServerContext* context, const ::lightsService::UpdateLightRequest* request, ::lightsService::UpdateLightResponse* response);
    // 删除灯光
    virtual ::grpc::Status DeleteLights(::grpc::ServerContext* context, const ::lightsService::DeleteLightsRequest* request, ::lightsService::DeleteLightsResponse* response);
    // 获取当前灯光模块状态
    virtual ::grpc::Status State(::grpc::ServerContext* context, const ::lightsService::StateRequest* request, ::lightsService::StateResponse* response);
    // 控制灯光的开关
    virtual ::grpc::Status Switch(::grpc::ServerContext* context, const ::lightsService::SwitchRequest* request, ::lightsService::SwitchResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_PreviewLight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_PreviewLight() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_PreviewLight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PreviewLight(::grpc::ServerContext* context, const ::lightsService::PreviewLightRequest* request, ::lightsService::PreviewLightResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPreviewLight(::grpc::ServerContext* context, ::lightsService::PreviewLightRequest* request, ::grpc::ServerAsyncResponseWriter< ::lightsService::PreviewLightResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PlayLight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_PlayLight() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_PlayLight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PlayLight(::grpc::ServerContext* context, const ::lightsService::PlayLightRequest* request, ::lightsService::PlayLightResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPlayLight(::grpc::ServerContext* context, ::lightsService::PlayLightRequest* request, ::grpc::ServerAsyncResponseWriter< ::lightsService::PlayLightResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StopLight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_StopLight() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_StopLight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopLight(::grpc::ServerContext* context, const ::lightsService::StopLightRequest* request, ::lightsService::StopLightResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStopLight(::grpc::ServerContext* context, ::lightsService::StopLightRequest* request, ::grpc::ServerAsyncResponseWriter< ::lightsService::StopLightResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListLights : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListLights() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_ListLights() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListLights(::grpc::ServerContext* context, const ::lightsService::ListLightsRequest* request, ::lightsService::ListLightsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListLights(::grpc::ServerContext* context, ::lightsService::ListLightsRequest* request, ::grpc::ServerAsyncResponseWriter< ::lightsService::ListLightsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_NewLight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_NewLight() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_NewLight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewLight(::grpc::ServerContext* context, const ::lightsService::NewLightRequest* request, ::lightsService::NewLightResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNewLight(::grpc::ServerContext* context, ::lightsService::NewLightRequest* request, ::grpc::ServerAsyncResponseWriter< ::lightsService::NewLightResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateLight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_UpdateLight() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_UpdateLight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateLight(::grpc::ServerContext* context, const ::lightsService::UpdateLightRequest* request, ::lightsService::UpdateLightResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateLight(::grpc::ServerContext* context, ::lightsService::UpdateLightRequest* request, ::grpc::ServerAsyncResponseWriter< ::lightsService::UpdateLightResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteLights : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DeleteLights() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_DeleteLights() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteLights(::grpc::ServerContext* context, const ::lightsService::DeleteLightsRequest* request, ::lightsService::DeleteLightsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteLights(::grpc::ServerContext* context, ::lightsService::DeleteLightsRequest* request, ::grpc::ServerAsyncResponseWriter< ::lightsService::DeleteLightsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_State : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_State() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_State() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status State(::grpc::ServerContext* context, const ::lightsService::StateRequest* request, ::lightsService::StateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestState(::grpc::ServerContext* context, ::lightsService::StateRequest* request, ::grpc::ServerAsyncResponseWriter< ::lightsService::StateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Switch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Switch() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_Switch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Switch(::grpc::ServerContext* context, const ::lightsService::SwitchRequest* request, ::lightsService::SwitchResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSwitch(::grpc::ServerContext* context, ::lightsService::SwitchRequest* request, ::grpc::ServerAsyncResponseWriter< ::lightsService::SwitchResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_PreviewLight<WithAsyncMethod_PlayLight<WithAsyncMethod_StopLight<WithAsyncMethod_ListLights<WithAsyncMethod_NewLight<WithAsyncMethod_UpdateLight<WithAsyncMethod_DeleteLights<WithAsyncMethod_State<WithAsyncMethod_Switch<Service > > > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_PreviewLight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_PreviewLight() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::lightsService::PreviewLightRequest, ::lightsService::PreviewLightResponse>(
          [this](::grpc::ServerContext* context,
                 const ::lightsService::PreviewLightRequest* request,
                 ::lightsService::PreviewLightResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->PreviewLight(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_PreviewLight(
        ::grpc::experimental::MessageAllocator< ::lightsService::PreviewLightRequest, ::lightsService::PreviewLightResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::lightsService::PreviewLightRequest, ::lightsService::PreviewLightResponse>*>(
          ::grpc::Service::experimental().GetHandler(0))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_PreviewLight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PreviewLight(::grpc::ServerContext* context, const ::lightsService::PreviewLightRequest* request, ::lightsService::PreviewLightResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void PreviewLight(::grpc::ServerContext* context, const ::lightsService::PreviewLightRequest* request, ::lightsService::PreviewLightResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_PlayLight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_PlayLight() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::lightsService::PlayLightRequest, ::lightsService::PlayLightResponse>(
          [this](::grpc::ServerContext* context,
                 const ::lightsService::PlayLightRequest* request,
                 ::lightsService::PlayLightResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->PlayLight(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_PlayLight(
        ::grpc::experimental::MessageAllocator< ::lightsService::PlayLightRequest, ::lightsService::PlayLightResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::lightsService::PlayLightRequest, ::lightsService::PlayLightResponse>*>(
          ::grpc::Service::experimental().GetHandler(1))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_PlayLight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PlayLight(::grpc::ServerContext* context, const ::lightsService::PlayLightRequest* request, ::lightsService::PlayLightResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void PlayLight(::grpc::ServerContext* context, const ::lightsService::PlayLightRequest* request, ::lightsService::PlayLightResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_StopLight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_StopLight() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::lightsService::StopLightRequest, ::lightsService::StopLightResponse>(
          [this](::grpc::ServerContext* context,
                 const ::lightsService::StopLightRequest* request,
                 ::lightsService::StopLightResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->StopLight(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_StopLight(
        ::grpc::experimental::MessageAllocator< ::lightsService::StopLightRequest, ::lightsService::StopLightResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::lightsService::StopLightRequest, ::lightsService::StopLightResponse>*>(
          ::grpc::Service::experimental().GetHandler(2))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_StopLight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopLight(::grpc::ServerContext* context, const ::lightsService::StopLightRequest* request, ::lightsService::StopLightResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void StopLight(::grpc::ServerContext* context, const ::lightsService::StopLightRequest* request, ::lightsService::StopLightResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ListLights : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_ListLights() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::lightsService::ListLightsRequest, ::lightsService::ListLightsResponse>(
          [this](::grpc::ServerContext* context,
                 const ::lightsService::ListLightsRequest* request,
                 ::lightsService::ListLightsResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->ListLights(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_ListLights(
        ::grpc::experimental::MessageAllocator< ::lightsService::ListLightsRequest, ::lightsService::ListLightsResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::lightsService::ListLightsRequest, ::lightsService::ListLightsResponse>*>(
          ::grpc::Service::experimental().GetHandler(3))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ListLights() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListLights(::grpc::ServerContext* context, const ::lightsService::ListLightsRequest* request, ::lightsService::ListLightsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ListLights(::grpc::ServerContext* context, const ::lightsService::ListLightsRequest* request, ::lightsService::ListLightsResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_NewLight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_NewLight() {
      ::grpc::Service::experimental().MarkMethodCallback(4,
        new ::grpc::internal::CallbackUnaryHandler< ::lightsService::NewLightRequest, ::lightsService::NewLightResponse>(
          [this](::grpc::ServerContext* context,
                 const ::lightsService::NewLightRequest* request,
                 ::lightsService::NewLightResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->NewLight(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_NewLight(
        ::grpc::experimental::MessageAllocator< ::lightsService::NewLightRequest, ::lightsService::NewLightResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::lightsService::NewLightRequest, ::lightsService::NewLightResponse>*>(
          ::grpc::Service::experimental().GetHandler(4))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_NewLight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewLight(::grpc::ServerContext* context, const ::lightsService::NewLightRequest* request, ::lightsService::NewLightResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void NewLight(::grpc::ServerContext* context, const ::lightsService::NewLightRequest* request, ::lightsService::NewLightResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_UpdateLight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_UpdateLight() {
      ::grpc::Service::experimental().MarkMethodCallback(5,
        new ::grpc::internal::CallbackUnaryHandler< ::lightsService::UpdateLightRequest, ::lightsService::UpdateLightResponse>(
          [this](::grpc::ServerContext* context,
                 const ::lightsService::UpdateLightRequest* request,
                 ::lightsService::UpdateLightResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->UpdateLight(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_UpdateLight(
        ::grpc::experimental::MessageAllocator< ::lightsService::UpdateLightRequest, ::lightsService::UpdateLightResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::lightsService::UpdateLightRequest, ::lightsService::UpdateLightResponse>*>(
          ::grpc::Service::experimental().GetHandler(5))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_UpdateLight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateLight(::grpc::ServerContext* context, const ::lightsService::UpdateLightRequest* request, ::lightsService::UpdateLightResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void UpdateLight(::grpc::ServerContext* context, const ::lightsService::UpdateLightRequest* request, ::lightsService::UpdateLightResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeleteLights : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_DeleteLights() {
      ::grpc::Service::experimental().MarkMethodCallback(6,
        new ::grpc::internal::CallbackUnaryHandler< ::lightsService::DeleteLightsRequest, ::lightsService::DeleteLightsResponse>(
          [this](::grpc::ServerContext* context,
                 const ::lightsService::DeleteLightsRequest* request,
                 ::lightsService::DeleteLightsResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->DeleteLights(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_DeleteLights(
        ::grpc::experimental::MessageAllocator< ::lightsService::DeleteLightsRequest, ::lightsService::DeleteLightsResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::lightsService::DeleteLightsRequest, ::lightsService::DeleteLightsResponse>*>(
          ::grpc::Service::experimental().GetHandler(6))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DeleteLights() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteLights(::grpc::ServerContext* context, const ::lightsService::DeleteLightsRequest* request, ::lightsService::DeleteLightsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void DeleteLights(::grpc::ServerContext* context, const ::lightsService::DeleteLightsRequest* request, ::lightsService::DeleteLightsResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_State : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_State() {
      ::grpc::Service::experimental().MarkMethodCallback(7,
        new ::grpc::internal::CallbackUnaryHandler< ::lightsService::StateRequest, ::lightsService::StateResponse>(
          [this](::grpc::ServerContext* context,
                 const ::lightsService::StateRequest* request,
                 ::lightsService::StateResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->State(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_State(
        ::grpc::experimental::MessageAllocator< ::lightsService::StateRequest, ::lightsService::StateResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::lightsService::StateRequest, ::lightsService::StateResponse>*>(
          ::grpc::Service::experimental().GetHandler(7))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_State() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status State(::grpc::ServerContext* context, const ::lightsService::StateRequest* request, ::lightsService::StateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void State(::grpc::ServerContext* context, const ::lightsService::StateRequest* request, ::lightsService::StateResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Switch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Switch() {
      ::grpc::Service::experimental().MarkMethodCallback(8,
        new ::grpc::internal::CallbackUnaryHandler< ::lightsService::SwitchRequest, ::lightsService::SwitchResponse>(
          [this](::grpc::ServerContext* context,
                 const ::lightsService::SwitchRequest* request,
                 ::lightsService::SwitchResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Switch(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_Switch(
        ::grpc::experimental::MessageAllocator< ::lightsService::SwitchRequest, ::lightsService::SwitchResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::lightsService::SwitchRequest, ::lightsService::SwitchResponse>*>(
          ::grpc::Service::experimental().GetHandler(8))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Switch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Switch(::grpc::ServerContext* context, const ::lightsService::SwitchRequest* request, ::lightsService::SwitchResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Switch(::grpc::ServerContext* context, const ::lightsService::SwitchRequest* request, ::lightsService::SwitchResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_PreviewLight<ExperimentalWithCallbackMethod_PlayLight<ExperimentalWithCallbackMethod_StopLight<ExperimentalWithCallbackMethod_ListLights<ExperimentalWithCallbackMethod_NewLight<ExperimentalWithCallbackMethod_UpdateLight<ExperimentalWithCallbackMethod_DeleteLights<ExperimentalWithCallbackMethod_State<ExperimentalWithCallbackMethod_Switch<Service > > > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_PreviewLight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_PreviewLight() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_PreviewLight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PreviewLight(::grpc::ServerContext* context, const ::lightsService::PreviewLightRequest* request, ::lightsService::PreviewLightResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PlayLight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_PlayLight() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_PlayLight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PlayLight(::grpc::ServerContext* context, const ::lightsService::PlayLightRequest* request, ::lightsService::PlayLightResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StopLight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_StopLight() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_StopLight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopLight(::grpc::ServerContext* context, const ::lightsService::StopLightRequest* request, ::lightsService::StopLightResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListLights : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListLights() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_ListLights() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListLights(::grpc::ServerContext* context, const ::lightsService::ListLightsRequest* request, ::lightsService::ListLightsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_NewLight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_NewLight() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_NewLight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewLight(::grpc::ServerContext* context, const ::lightsService::NewLightRequest* request, ::lightsService::NewLightResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateLight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_UpdateLight() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_UpdateLight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateLight(::grpc::ServerContext* context, const ::lightsService::UpdateLightRequest* request, ::lightsService::UpdateLightResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteLights : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DeleteLights() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_DeleteLights() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteLights(::grpc::ServerContext* context, const ::lightsService::DeleteLightsRequest* request, ::lightsService::DeleteLightsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_State : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_State() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_State() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status State(::grpc::ServerContext* context, const ::lightsService::StateRequest* request, ::lightsService::StateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Switch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Switch() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_Switch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Switch(::grpc::ServerContext* context, const ::lightsService::SwitchRequest* request, ::lightsService::SwitchResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_PreviewLight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_PreviewLight() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_PreviewLight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PreviewLight(::grpc::ServerContext* context, const ::lightsService::PreviewLightRequest* request, ::lightsService::PreviewLightResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPreviewLight(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PlayLight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_PlayLight() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_PlayLight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PlayLight(::grpc::ServerContext* context, const ::lightsService::PlayLightRequest* request, ::lightsService::PlayLightResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPlayLight(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StopLight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_StopLight() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_StopLight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopLight(::grpc::ServerContext* context, const ::lightsService::StopLightRequest* request, ::lightsService::StopLightResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStopLight(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListLights : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ListLights() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_ListLights() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListLights(::grpc::ServerContext* context, const ::lightsService::ListLightsRequest* request, ::lightsService::ListLightsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListLights(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_NewLight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_NewLight() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_NewLight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewLight(::grpc::ServerContext* context, const ::lightsService::NewLightRequest* request, ::lightsService::NewLightResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNewLight(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateLight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_UpdateLight() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_UpdateLight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateLight(::grpc::ServerContext* context, const ::lightsService::UpdateLightRequest* request, ::lightsService::UpdateLightResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateLight(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteLights : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_DeleteLights() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_DeleteLights() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteLights(::grpc::ServerContext* context, const ::lightsService::DeleteLightsRequest* request, ::lightsService::DeleteLightsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteLights(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_State : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_State() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_State() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status State(::grpc::ServerContext* context, const ::lightsService::StateRequest* request, ::lightsService::StateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestState(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Switch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Switch() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_Switch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Switch(::grpc::ServerContext* context, const ::lightsService::SwitchRequest* request, ::lightsService::SwitchResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSwitch(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_PreviewLight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_PreviewLight() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->PreviewLight(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_PreviewLight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PreviewLight(::grpc::ServerContext* context, const ::lightsService::PreviewLightRequest* request, ::lightsService::PreviewLightResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void PreviewLight(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_PlayLight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_PlayLight() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->PlayLight(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_PlayLight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PlayLight(::grpc::ServerContext* context, const ::lightsService::PlayLightRequest* request, ::lightsService::PlayLightResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void PlayLight(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_StopLight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_StopLight() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->StopLight(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_StopLight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopLight(::grpc::ServerContext* context, const ::lightsService::StopLightRequest* request, ::lightsService::StopLightResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void StopLight(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ListLights : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_ListLights() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->ListLights(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_ListLights() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListLights(::grpc::ServerContext* context, const ::lightsService::ListLightsRequest* request, ::lightsService::ListLightsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ListLights(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_NewLight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_NewLight() {
      ::grpc::Service::experimental().MarkMethodRawCallback(4,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->NewLight(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_NewLight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewLight(::grpc::ServerContext* context, const ::lightsService::NewLightRequest* request, ::lightsService::NewLightResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void NewLight(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_UpdateLight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_UpdateLight() {
      ::grpc::Service::experimental().MarkMethodRawCallback(5,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->UpdateLight(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_UpdateLight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateLight(::grpc::ServerContext* context, const ::lightsService::UpdateLightRequest* request, ::lightsService::UpdateLightResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void UpdateLight(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeleteLights : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_DeleteLights() {
      ::grpc::Service::experimental().MarkMethodRawCallback(6,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->DeleteLights(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_DeleteLights() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteLights(::grpc::ServerContext* context, const ::lightsService::DeleteLightsRequest* request, ::lightsService::DeleteLightsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void DeleteLights(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_State : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_State() {
      ::grpc::Service::experimental().MarkMethodRawCallback(7,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->State(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_State() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status State(::grpc::ServerContext* context, const ::lightsService::StateRequest* request, ::lightsService::StateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void State(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Switch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Switch() {
      ::grpc::Service::experimental().MarkMethodRawCallback(8,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Switch(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Switch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Switch(::grpc::ServerContext* context, const ::lightsService::SwitchRequest* request, ::lightsService::SwitchResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Switch(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PreviewLight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_PreviewLight() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::lightsService::PreviewLightRequest, ::lightsService::PreviewLightResponse>(std::bind(&WithStreamedUnaryMethod_PreviewLight<BaseClass>::StreamedPreviewLight, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_PreviewLight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PreviewLight(::grpc::ServerContext* context, const ::lightsService::PreviewLightRequest* request, ::lightsService::PreviewLightResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPreviewLight(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::lightsService::PreviewLightRequest,::lightsService::PreviewLightResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PlayLight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_PlayLight() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::lightsService::PlayLightRequest, ::lightsService::PlayLightResponse>(std::bind(&WithStreamedUnaryMethod_PlayLight<BaseClass>::StreamedPlayLight, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_PlayLight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PlayLight(::grpc::ServerContext* context, const ::lightsService::PlayLightRequest* request, ::lightsService::PlayLightResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPlayLight(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::lightsService::PlayLightRequest,::lightsService::PlayLightResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_StopLight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_StopLight() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::lightsService::StopLightRequest, ::lightsService::StopLightResponse>(std::bind(&WithStreamedUnaryMethod_StopLight<BaseClass>::StreamedStopLight, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_StopLight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StopLight(::grpc::ServerContext* context, const ::lightsService::StopLightRequest* request, ::lightsService::StopLightResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStopLight(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::lightsService::StopLightRequest,::lightsService::StopLightResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListLights : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ListLights() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::lightsService::ListLightsRequest, ::lightsService::ListLightsResponse>(std::bind(&WithStreamedUnaryMethod_ListLights<BaseClass>::StreamedListLights, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ListLights() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListLights(::grpc::ServerContext* context, const ::lightsService::ListLightsRequest* request, ::lightsService::ListLightsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListLights(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::lightsService::ListLightsRequest,::lightsService::ListLightsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_NewLight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_NewLight() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::lightsService::NewLightRequest, ::lightsService::NewLightResponse>(std::bind(&WithStreamedUnaryMethod_NewLight<BaseClass>::StreamedNewLight, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_NewLight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status NewLight(::grpc::ServerContext* context, const ::lightsService::NewLightRequest* request, ::lightsService::NewLightResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedNewLight(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::lightsService::NewLightRequest,::lightsService::NewLightResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateLight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_UpdateLight() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::lightsService::UpdateLightRequest, ::lightsService::UpdateLightResponse>(std::bind(&WithStreamedUnaryMethod_UpdateLight<BaseClass>::StreamedUpdateLight, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UpdateLight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateLight(::grpc::ServerContext* context, const ::lightsService::UpdateLightRequest* request, ::lightsService::UpdateLightResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateLight(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::lightsService::UpdateLightRequest,::lightsService::UpdateLightResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteLights : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DeleteLights() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::lightsService::DeleteLightsRequest, ::lightsService::DeleteLightsResponse>(std::bind(&WithStreamedUnaryMethod_DeleteLights<BaseClass>::StreamedDeleteLights, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DeleteLights() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteLights(::grpc::ServerContext* context, const ::lightsService::DeleteLightsRequest* request, ::lightsService::DeleteLightsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteLights(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::lightsService::DeleteLightsRequest,::lightsService::DeleteLightsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_State : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_State() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler< ::lightsService::StateRequest, ::lightsService::StateResponse>(std::bind(&WithStreamedUnaryMethod_State<BaseClass>::StreamedState, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_State() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status State(::grpc::ServerContext* context, const ::lightsService::StateRequest* request, ::lightsService::StateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedState(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::lightsService::StateRequest,::lightsService::StateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Switch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Switch() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler< ::lightsService::SwitchRequest, ::lightsService::SwitchResponse>(std::bind(&WithStreamedUnaryMethod_Switch<BaseClass>::StreamedSwitch, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Switch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Switch(::grpc::ServerContext* context, const ::lightsService::SwitchRequest* request, ::lightsService::SwitchResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSwitch(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::lightsService::SwitchRequest,::lightsService::SwitchResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_PreviewLight<WithStreamedUnaryMethod_PlayLight<WithStreamedUnaryMethod_StopLight<WithStreamedUnaryMethod_ListLights<WithStreamedUnaryMethod_NewLight<WithStreamedUnaryMethod_UpdateLight<WithStreamedUnaryMethod_DeleteLights<WithStreamedUnaryMethod_State<WithStreamedUnaryMethod_Switch<Service > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_PreviewLight<WithStreamedUnaryMethod_PlayLight<WithStreamedUnaryMethod_StopLight<WithStreamedUnaryMethod_ListLights<WithStreamedUnaryMethod_NewLight<WithStreamedUnaryMethod_UpdateLight<WithStreamedUnaryMethod_DeleteLights<WithStreamedUnaryMethod_State<WithStreamedUnaryMethod_Switch<Service > > > > > > > > > StreamedService;
};

}  // namespace lightsService


#endif  // GRPC_lights_2eproto__INCLUDED
