// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: player.proto

#ifndef PROTOBUF_INCLUDED_player_2eproto
#define PROTOBUF_INCLUDED_player_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_player_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_player_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[13]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_player_2eproto();
namespace handsmotion {
class OnStateChangeRequest;
class OnStateChangeRequestDefaultTypeInternal;
extern OnStateChangeRequestDefaultTypeInternal _OnStateChangeRequest_default_instance_;
class OnStateChangeResponse;
class OnStateChangeResponseDefaultTypeInternal;
extern OnStateChangeResponseDefaultTypeInternal _OnStateChangeResponse_default_instance_;
class PlayRequest;
class PlayRequestDefaultTypeInternal;
extern PlayRequestDefaultTypeInternal _PlayRequest_default_instance_;
class PlayResponse;
class PlayResponseDefaultTypeInternal;
extern PlayResponseDefaultTypeInternal _PlayResponse_default_instance_;
class PlaylistRequest;
class PlaylistRequestDefaultTypeInternal;
extern PlaylistRequestDefaultTypeInternal _PlaylistRequest_default_instance_;
class PlaylistResponse;
class PlaylistResponseDefaultTypeInternal;
extern PlaylistResponseDefaultTypeInternal _PlaylistResponse_default_instance_;
class ResetRequest;
class ResetRequestDefaultTypeInternal;
extern ResetRequestDefaultTypeInternal _ResetRequest_default_instance_;
class ResetResponse;
class ResetResponseDefaultTypeInternal;
extern ResetResponseDefaultTypeInternal _ResetResponse_default_instance_;
class StateRequest;
class StateRequestDefaultTypeInternal;
extern StateRequestDefaultTypeInternal _StateRequest_default_instance_;
class StateResponse;
class StateResponseDefaultTypeInternal;
extern StateResponseDefaultTypeInternal _StateResponse_default_instance_;
class StopRequest;
class StopRequestDefaultTypeInternal;
extern StopRequestDefaultTypeInternal _StopRequest_default_instance_;
class StopResponse;
class StopResponseDefaultTypeInternal;
extern StopResponseDefaultTypeInternal _StopResponse_default_instance_;
class Uri;
class UriDefaultTypeInternal;
extern UriDefaultTypeInternal _Uri_default_instance_;
}  // namespace handsmotion
namespace google {
namespace protobuf {
template<> ::handsmotion::OnStateChangeRequest* Arena::CreateMaybeMessage<::handsmotion::OnStateChangeRequest>(Arena*);
template<> ::handsmotion::OnStateChangeResponse* Arena::CreateMaybeMessage<::handsmotion::OnStateChangeResponse>(Arena*);
template<> ::handsmotion::PlayRequest* Arena::CreateMaybeMessage<::handsmotion::PlayRequest>(Arena*);
template<> ::handsmotion::PlayResponse* Arena::CreateMaybeMessage<::handsmotion::PlayResponse>(Arena*);
template<> ::handsmotion::PlaylistRequest* Arena::CreateMaybeMessage<::handsmotion::PlaylistRequest>(Arena*);
template<> ::handsmotion::PlaylistResponse* Arena::CreateMaybeMessage<::handsmotion::PlaylistResponse>(Arena*);
template<> ::handsmotion::ResetRequest* Arena::CreateMaybeMessage<::handsmotion::ResetRequest>(Arena*);
template<> ::handsmotion::ResetResponse* Arena::CreateMaybeMessage<::handsmotion::ResetResponse>(Arena*);
template<> ::handsmotion::StateRequest* Arena::CreateMaybeMessage<::handsmotion::StateRequest>(Arena*);
template<> ::handsmotion::StateResponse* Arena::CreateMaybeMessage<::handsmotion::StateResponse>(Arena*);
template<> ::handsmotion::StopRequest* Arena::CreateMaybeMessage<::handsmotion::StopRequest>(Arena*);
template<> ::handsmotion::StopResponse* Arena::CreateMaybeMessage<::handsmotion::StopResponse>(Arena*);
template<> ::handsmotion::Uri* Arena::CreateMaybeMessage<::handsmotion::Uri>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace handsmotion {

enum PlayerState {
  UNKNOWN = 0,
  STOPPED = 1,
  PLAYING = 2,
  PlayerState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  PlayerState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool PlayerState_IsValid(int value);
const PlayerState PlayerState_MIN = UNKNOWN;
const PlayerState PlayerState_MAX = PLAYING;
const int PlayerState_ARRAYSIZE = PlayerState_MAX + 1;

const ::google::protobuf::EnumDescriptor* PlayerState_descriptor();
inline const ::std::string& PlayerState_Name(PlayerState value) {
  return ::google::protobuf::internal::NameOfEnum(
    PlayerState_descriptor(), value);
}
inline bool PlayerState_Parse(
    const ::std::string& name, PlayerState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PlayerState>(
    PlayerState_descriptor(), name, value);
}
// ===================================================================

class Uri final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:handsmotion.Uri) */ {
 public:
  Uri();
  virtual ~Uri();

  Uri(const Uri& from);

  inline Uri& operator=(const Uri& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Uri(Uri&& from) noexcept
    : Uri() {
    *this = ::std::move(from);
  }

  inline Uri& operator=(Uri&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Uri& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Uri* internal_default_instance() {
    return reinterpret_cast<const Uri*>(
               &_Uri_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Uri* other);
  friend void swap(Uri& a, Uri& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Uri* New() const final {
    return CreateMaybeMessage<Uri>(nullptr);
  }

  Uri* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Uri>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Uri& from);
  void MergeFrom(const Uri& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Uri* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:handsmotion.Uri)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_player_2eproto;
};
// -------------------------------------------------------------------

class PlayRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:handsmotion.PlayRequest) */ {
 public:
  PlayRequest();
  virtual ~PlayRequest();

  PlayRequest(const PlayRequest& from);

  inline PlayRequest& operator=(const PlayRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayRequest(PlayRequest&& from) noexcept
    : PlayRequest() {
    *this = ::std::move(from);
  }

  inline PlayRequest& operator=(PlayRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const PlayRequest& default_instance();

  enum UriCase {
    kId = 1,
    kName = 2,
    URI_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayRequest* internal_default_instance() {
    return reinterpret_cast<const PlayRequest*>(
               &_PlayRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(PlayRequest* other);
  friend void swap(PlayRequest& a, PlayRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayRequest* New() const final {
    return CreateMaybeMessage<PlayRequest>(nullptr);
  }

  PlayRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PlayRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PlayRequest& from);
  void MergeFrom(const PlayRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 repeated = 3;
  void clear_repeated();
  static const int kRepeatedFieldNumber = 3;
  ::google::protobuf::int32 repeated() const;
  void set_repeated(::google::protobuf::int32 value);

  // uint32 repeated_interval_ms = 4;
  void clear_repeated_interval_ms();
  static const int kRepeatedIntervalMsFieldNumber = 4;
  ::google::protobuf::uint32 repeated_interval_ms() const;
  void set_repeated_interval_ms(::google::protobuf::uint32 value);

  // string id = 1;
  private:
  bool has_id() const;
  public:
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string name = 2;
  private:
  bool has_name() const;
  public:
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  void clear_uri();
  UriCase uri_case() const;
  // @@protoc_insertion_point(class_scope:handsmotion.PlayRequest)
 private:
  class HasBitSetters;
  void set_has_id();
  void set_has_name();

  inline bool has_uri() const;
  inline void clear_has_uri();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 repeated_;
  ::google::protobuf::uint32 repeated_interval_ms_;
  union UriUnion {
    UriUnion() {}
    ::google::protobuf::internal::ArenaStringPtr id_;
    ::google::protobuf::internal::ArenaStringPtr name_;
  } uri_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_player_2eproto;
};
// -------------------------------------------------------------------

class PlayResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:handsmotion.PlayResponse) */ {
 public:
  PlayResponse();
  virtual ~PlayResponse();

  PlayResponse(const PlayResponse& from);

  inline PlayResponse& operator=(const PlayResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayResponse(PlayResponse&& from) noexcept
    : PlayResponse() {
    *this = ::std::move(from);
  }

  inline PlayResponse& operator=(PlayResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const PlayResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayResponse* internal_default_instance() {
    return reinterpret_cast<const PlayResponse*>(
               &_PlayResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(PlayResponse* other);
  friend void swap(PlayResponse& a, PlayResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayResponse* New() const final {
    return CreateMaybeMessage<PlayResponse>(nullptr);
  }

  PlayResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PlayResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PlayResponse& from);
  void MergeFrom(const PlayResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:handsmotion.PlayResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_player_2eproto;
};
// -------------------------------------------------------------------

class StopRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:handsmotion.StopRequest) */ {
 public:
  StopRequest();
  virtual ~StopRequest();

  StopRequest(const StopRequest& from);

  inline StopRequest& operator=(const StopRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StopRequest(StopRequest&& from) noexcept
    : StopRequest() {
    *this = ::std::move(from);
  }

  inline StopRequest& operator=(StopRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const StopRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StopRequest* internal_default_instance() {
    return reinterpret_cast<const StopRequest*>(
               &_StopRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(StopRequest* other);
  friend void swap(StopRequest& a, StopRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StopRequest* New() const final {
    return CreateMaybeMessage<StopRequest>(nullptr);
  }

  StopRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StopRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StopRequest& from);
  void MergeFrom(const StopRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:handsmotion.StopRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_player_2eproto;
};
// -------------------------------------------------------------------

class StopResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:handsmotion.StopResponse) */ {
 public:
  StopResponse();
  virtual ~StopResponse();

  StopResponse(const StopResponse& from);

  inline StopResponse& operator=(const StopResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StopResponse(StopResponse&& from) noexcept
    : StopResponse() {
    *this = ::std::move(from);
  }

  inline StopResponse& operator=(StopResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const StopResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StopResponse* internal_default_instance() {
    return reinterpret_cast<const StopResponse*>(
               &_StopResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(StopResponse* other);
  friend void swap(StopResponse& a, StopResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StopResponse* New() const final {
    return CreateMaybeMessage<StopResponse>(nullptr);
  }

  StopResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StopResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StopResponse& from);
  void MergeFrom(const StopResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:handsmotion.StopResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_player_2eproto;
};
// -------------------------------------------------------------------

class ResetRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:handsmotion.ResetRequest) */ {
 public:
  ResetRequest();
  virtual ~ResetRequest();

  ResetRequest(const ResetRequest& from);

  inline ResetRequest& operator=(const ResetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResetRequest(ResetRequest&& from) noexcept
    : ResetRequest() {
    *this = ::std::move(from);
  }

  inline ResetRequest& operator=(ResetRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ResetRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResetRequest* internal_default_instance() {
    return reinterpret_cast<const ResetRequest*>(
               &_ResetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(ResetRequest* other);
  friend void swap(ResetRequest& a, ResetRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResetRequest* New() const final {
    return CreateMaybeMessage<ResetRequest>(nullptr);
  }

  ResetRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResetRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ResetRequest& from);
  void MergeFrom(const ResetRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResetRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:handsmotion.ResetRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_player_2eproto;
};
// -------------------------------------------------------------------

class ResetResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:handsmotion.ResetResponse) */ {
 public:
  ResetResponse();
  virtual ~ResetResponse();

  ResetResponse(const ResetResponse& from);

  inline ResetResponse& operator=(const ResetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResetResponse(ResetResponse&& from) noexcept
    : ResetResponse() {
    *this = ::std::move(from);
  }

  inline ResetResponse& operator=(ResetResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ResetResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResetResponse* internal_default_instance() {
    return reinterpret_cast<const ResetResponse*>(
               &_ResetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(ResetResponse* other);
  friend void swap(ResetResponse& a, ResetResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResetResponse* New() const final {
    return CreateMaybeMessage<ResetResponse>(nullptr);
  }

  ResetResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResetResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ResetResponse& from);
  void MergeFrom(const ResetResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResetResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:handsmotion.ResetResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_player_2eproto;
};
// -------------------------------------------------------------------

class PlaylistRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:handsmotion.PlaylistRequest) */ {
 public:
  PlaylistRequest();
  virtual ~PlaylistRequest();

  PlaylistRequest(const PlaylistRequest& from);

  inline PlaylistRequest& operator=(const PlaylistRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlaylistRequest(PlaylistRequest&& from) noexcept
    : PlaylistRequest() {
    *this = ::std::move(from);
  }

  inline PlaylistRequest& operator=(PlaylistRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const PlaylistRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlaylistRequest* internal_default_instance() {
    return reinterpret_cast<const PlaylistRequest*>(
               &_PlaylistRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(PlaylistRequest* other);
  friend void swap(PlaylistRequest& a, PlaylistRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlaylistRequest* New() const final {
    return CreateMaybeMessage<PlaylistRequest>(nullptr);
  }

  PlaylistRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PlaylistRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PlaylistRequest& from);
  void MergeFrom(const PlaylistRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlaylistRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:handsmotion.PlaylistRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_player_2eproto;
};
// -------------------------------------------------------------------

class PlaylistResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:handsmotion.PlaylistResponse) */ {
 public:
  PlaylistResponse();
  virtual ~PlaylistResponse();

  PlaylistResponse(const PlaylistResponse& from);

  inline PlaylistResponse& operator=(const PlaylistResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlaylistResponse(PlaylistResponse&& from) noexcept
    : PlaylistResponse() {
    *this = ::std::move(from);
  }

  inline PlaylistResponse& operator=(PlaylistResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const PlaylistResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlaylistResponse* internal_default_instance() {
    return reinterpret_cast<const PlaylistResponse*>(
               &_PlaylistResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(PlaylistResponse* other);
  friend void swap(PlaylistResponse& a, PlaylistResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlaylistResponse* New() const final {
    return CreateMaybeMessage<PlaylistResponse>(nullptr);
  }

  PlaylistResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PlaylistResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PlaylistResponse& from);
  void MergeFrom(const PlaylistResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlaylistResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .handsmotion.Uri playlist = 1;
  int playlist_size() const;
  void clear_playlist();
  static const int kPlaylistFieldNumber = 1;
  ::handsmotion::Uri* mutable_playlist(int index);
  ::google::protobuf::RepeatedPtrField< ::handsmotion::Uri >*
      mutable_playlist();
  const ::handsmotion::Uri& playlist(int index) const;
  ::handsmotion::Uri* add_playlist();
  const ::google::protobuf::RepeatedPtrField< ::handsmotion::Uri >&
      playlist() const;

  // @@protoc_insertion_point(class_scope:handsmotion.PlaylistResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::handsmotion::Uri > playlist_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_player_2eproto;
};
// -------------------------------------------------------------------

class StateRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:handsmotion.StateRequest) */ {
 public:
  StateRequest();
  virtual ~StateRequest();

  StateRequest(const StateRequest& from);

  inline StateRequest& operator=(const StateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StateRequest(StateRequest&& from) noexcept
    : StateRequest() {
    *this = ::std::move(from);
  }

  inline StateRequest& operator=(StateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const StateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StateRequest* internal_default_instance() {
    return reinterpret_cast<const StateRequest*>(
               &_StateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(StateRequest* other);
  friend void swap(StateRequest& a, StateRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StateRequest* New() const final {
    return CreateMaybeMessage<StateRequest>(nullptr);
  }

  StateRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StateRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StateRequest& from);
  void MergeFrom(const StateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StateRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:handsmotion.StateRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_player_2eproto;
};
// -------------------------------------------------------------------

class StateResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:handsmotion.StateResponse) */ {
 public:
  StateResponse();
  virtual ~StateResponse();

  StateResponse(const StateResponse& from);

  inline StateResponse& operator=(const StateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StateResponse(StateResponse&& from) noexcept
    : StateResponse() {
    *this = ::std::move(from);
  }

  inline StateResponse& operator=(StateResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const StateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StateResponse* internal_default_instance() {
    return reinterpret_cast<const StateResponse*>(
               &_StateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(StateResponse* other);
  friend void swap(StateResponse& a, StateResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StateResponse* New() const final {
    return CreateMaybeMessage<StateResponse>(nullptr);
  }

  StateResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StateResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StateResponse& from);
  void MergeFrom(const StateResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StateResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .handsmotion.Uri uri = 2;
  bool has_uri() const;
  void clear_uri();
  static const int kUriFieldNumber = 2;
  const ::handsmotion::Uri& uri() const;
  ::handsmotion::Uri* release_uri();
  ::handsmotion::Uri* mutable_uri();
  void set_allocated_uri(::handsmotion::Uri* uri);

  // .handsmotion.PlayerState state = 1;
  void clear_state();
  static const int kStateFieldNumber = 1;
  ::handsmotion::PlayerState state() const;
  void set_state(::handsmotion::PlayerState value);

  // @@protoc_insertion_point(class_scope:handsmotion.StateResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::handsmotion::Uri* uri_;
  int state_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_player_2eproto;
};
// -------------------------------------------------------------------

class OnStateChangeRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:handsmotion.OnStateChangeRequest) */ {
 public:
  OnStateChangeRequest();
  virtual ~OnStateChangeRequest();

  OnStateChangeRequest(const OnStateChangeRequest& from);

  inline OnStateChangeRequest& operator=(const OnStateChangeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OnStateChangeRequest(OnStateChangeRequest&& from) noexcept
    : OnStateChangeRequest() {
    *this = ::std::move(from);
  }

  inline OnStateChangeRequest& operator=(OnStateChangeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const OnStateChangeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OnStateChangeRequest* internal_default_instance() {
    return reinterpret_cast<const OnStateChangeRequest*>(
               &_OnStateChangeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(OnStateChangeRequest* other);
  friend void swap(OnStateChangeRequest& a, OnStateChangeRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OnStateChangeRequest* New() const final {
    return CreateMaybeMessage<OnStateChangeRequest>(nullptr);
  }

  OnStateChangeRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OnStateChangeRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OnStateChangeRequest& from);
  void MergeFrom(const OnStateChangeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OnStateChangeRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:handsmotion.OnStateChangeRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_player_2eproto;
};
// -------------------------------------------------------------------

class OnStateChangeResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:handsmotion.OnStateChangeResponse) */ {
 public:
  OnStateChangeResponse();
  virtual ~OnStateChangeResponse();

  OnStateChangeResponse(const OnStateChangeResponse& from);

  inline OnStateChangeResponse& operator=(const OnStateChangeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OnStateChangeResponse(OnStateChangeResponse&& from) noexcept
    : OnStateChangeResponse() {
    *this = ::std::move(from);
  }

  inline OnStateChangeResponse& operator=(OnStateChangeResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const OnStateChangeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OnStateChangeResponse* internal_default_instance() {
    return reinterpret_cast<const OnStateChangeResponse*>(
               &_OnStateChangeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(OnStateChangeResponse* other);
  friend void swap(OnStateChangeResponse& a, OnStateChangeResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OnStateChangeResponse* New() const final {
    return CreateMaybeMessage<OnStateChangeResponse>(nullptr);
  }

  OnStateChangeResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OnStateChangeResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OnStateChangeResponse& from);
  void MergeFrom(const OnStateChangeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OnStateChangeResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .handsmotion.Uri uri = 2;
  bool has_uri() const;
  void clear_uri();
  static const int kUriFieldNumber = 2;
  const ::handsmotion::Uri& uri() const;
  ::handsmotion::Uri* release_uri();
  ::handsmotion::Uri* mutable_uri();
  void set_allocated_uri(::handsmotion::Uri* uri);

  // .handsmotion.PlayerState state = 1;
  void clear_state();
  static const int kStateFieldNumber = 1;
  ::handsmotion::PlayerState state() const;
  void set_state(::handsmotion::PlayerState value);

  // @@protoc_insertion_point(class_scope:handsmotion.OnStateChangeResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::handsmotion::Uri* uri_;
  int state_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_player_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Uri

// string id = 1;
inline void Uri::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Uri::id() const {
  // @@protoc_insertion_point(field_get:handsmotion.Uri.id)
  return id_.GetNoArena();
}
inline void Uri::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:handsmotion.Uri.id)
}
#if LANG_CXX11
inline void Uri::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:handsmotion.Uri.id)
}
#endif
inline void Uri::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:handsmotion.Uri.id)
}
inline void Uri::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:handsmotion.Uri.id)
}
inline ::std::string* Uri::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:handsmotion.Uri.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Uri::release_id() {
  // @@protoc_insertion_point(field_release:handsmotion.Uri.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Uri::set_allocated_id(::std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:handsmotion.Uri.id)
}

// string name = 2;
inline void Uri::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Uri::name() const {
  // @@protoc_insertion_point(field_get:handsmotion.Uri.name)
  return name_.GetNoArena();
}
inline void Uri::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:handsmotion.Uri.name)
}
#if LANG_CXX11
inline void Uri::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:handsmotion.Uri.name)
}
#endif
inline void Uri::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:handsmotion.Uri.name)
}
inline void Uri::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:handsmotion.Uri.name)
}
inline ::std::string* Uri::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:handsmotion.Uri.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Uri::release_name() {
  // @@protoc_insertion_point(field_release:handsmotion.Uri.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Uri::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:handsmotion.Uri.name)
}

// -------------------------------------------------------------------

// PlayRequest

// string id = 1;
inline bool PlayRequest::has_id() const {
  return uri_case() == kId;
}
inline void PlayRequest::set_has_id() {
  _oneof_case_[0] = kId;
}
inline void PlayRequest::clear_id() {
  if (has_id()) {
    uri_.id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_uri();
  }
}
inline const ::std::string& PlayRequest::id() const {
  // @@protoc_insertion_point(field_get:handsmotion.PlayRequest.id)
  if (has_id()) {
    return uri_.id_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void PlayRequest::set_id(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:handsmotion.PlayRequest.id)
  if (!has_id()) {
    clear_uri();
    set_has_id();
    uri_.id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  uri_.id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:handsmotion.PlayRequest.id)
}
#if LANG_CXX11
inline void PlayRequest::set_id(::std::string&& value) {
  // @@protoc_insertion_point(field_set:handsmotion.PlayRequest.id)
  if (!has_id()) {
    clear_uri();
    set_has_id();
    uri_.id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  uri_.id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:handsmotion.PlayRequest.id)
}
#endif
inline void PlayRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_id()) {
    clear_uri();
    set_has_id();
    uri_.id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  uri_.id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:handsmotion.PlayRequest.id)
}
inline void PlayRequest::set_id(const char* value, size_t size) {
  if (!has_id()) {
    clear_uri();
    set_has_id();
    uri_.id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  uri_.id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:handsmotion.PlayRequest.id)
}
inline ::std::string* PlayRequest::mutable_id() {
  if (!has_id()) {
    clear_uri();
    set_has_id();
    uri_.id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:handsmotion.PlayRequest.id)
  return uri_.id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayRequest::release_id() {
  // @@protoc_insertion_point(field_release:handsmotion.PlayRequest.id)
  if (has_id()) {
    clear_has_uri();
    return uri_.id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void PlayRequest::set_allocated_id(::std::string* id) {
  if (has_uri()) {
    clear_uri();
  }
  if (id != nullptr) {
    set_has_id();
    uri_.id_.UnsafeSetDefault(id);
  }
  // @@protoc_insertion_point(field_set_allocated:handsmotion.PlayRequest.id)
}

// string name = 2;
inline bool PlayRequest::has_name() const {
  return uri_case() == kName;
}
inline void PlayRequest::set_has_name() {
  _oneof_case_[0] = kName;
}
inline void PlayRequest::clear_name() {
  if (has_name()) {
    uri_.name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_uri();
  }
}
inline const ::std::string& PlayRequest::name() const {
  // @@protoc_insertion_point(field_get:handsmotion.PlayRequest.name)
  if (has_name()) {
    return uri_.name_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void PlayRequest::set_name(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:handsmotion.PlayRequest.name)
  if (!has_name()) {
    clear_uri();
    set_has_name();
    uri_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  uri_.name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:handsmotion.PlayRequest.name)
}
#if LANG_CXX11
inline void PlayRequest::set_name(::std::string&& value) {
  // @@protoc_insertion_point(field_set:handsmotion.PlayRequest.name)
  if (!has_name()) {
    clear_uri();
    set_has_name();
    uri_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  uri_.name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:handsmotion.PlayRequest.name)
}
#endif
inline void PlayRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_name()) {
    clear_uri();
    set_has_name();
    uri_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  uri_.name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:handsmotion.PlayRequest.name)
}
inline void PlayRequest::set_name(const char* value, size_t size) {
  if (!has_name()) {
    clear_uri();
    set_has_name();
    uri_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  uri_.name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:handsmotion.PlayRequest.name)
}
inline ::std::string* PlayRequest::mutable_name() {
  if (!has_name()) {
    clear_uri();
    set_has_name();
    uri_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:handsmotion.PlayRequest.name)
  return uri_.name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayRequest::release_name() {
  // @@protoc_insertion_point(field_release:handsmotion.PlayRequest.name)
  if (has_name()) {
    clear_has_uri();
    return uri_.name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void PlayRequest::set_allocated_name(::std::string* name) {
  if (has_uri()) {
    clear_uri();
  }
  if (name != nullptr) {
    set_has_name();
    uri_.name_.UnsafeSetDefault(name);
  }
  // @@protoc_insertion_point(field_set_allocated:handsmotion.PlayRequest.name)
}

// int32 repeated = 3;
inline void PlayRequest::clear_repeated() {
  repeated_ = 0;
}
inline ::google::protobuf::int32 PlayRequest::repeated() const {
  // @@protoc_insertion_point(field_get:handsmotion.PlayRequest.repeated)
  return repeated_;
}
inline void PlayRequest::set_repeated(::google::protobuf::int32 value) {
  
  repeated_ = value;
  // @@protoc_insertion_point(field_set:handsmotion.PlayRequest.repeated)
}

// uint32 repeated_interval_ms = 4;
inline void PlayRequest::clear_repeated_interval_ms() {
  repeated_interval_ms_ = 0u;
}
inline ::google::protobuf::uint32 PlayRequest::repeated_interval_ms() const {
  // @@protoc_insertion_point(field_get:handsmotion.PlayRequest.repeated_interval_ms)
  return repeated_interval_ms_;
}
inline void PlayRequest::set_repeated_interval_ms(::google::protobuf::uint32 value) {
  
  repeated_interval_ms_ = value;
  // @@protoc_insertion_point(field_set:handsmotion.PlayRequest.repeated_interval_ms)
}

inline bool PlayRequest::has_uri() const {
  return uri_case() != URI_NOT_SET;
}
inline void PlayRequest::clear_has_uri() {
  _oneof_case_[0] = URI_NOT_SET;
}
inline PlayRequest::UriCase PlayRequest::uri_case() const {
  return PlayRequest::UriCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// PlayResponse

// -------------------------------------------------------------------

// StopRequest

// -------------------------------------------------------------------

// StopResponse

// -------------------------------------------------------------------

// ResetRequest

// -------------------------------------------------------------------

// ResetResponse

// -------------------------------------------------------------------

// PlaylistRequest

// -------------------------------------------------------------------

// PlaylistResponse

// repeated .handsmotion.Uri playlist = 1;
inline int PlaylistResponse::playlist_size() const {
  return playlist_.size();
}
inline void PlaylistResponse::clear_playlist() {
  playlist_.Clear();
}
inline ::handsmotion::Uri* PlaylistResponse::mutable_playlist(int index) {
  // @@protoc_insertion_point(field_mutable:handsmotion.PlaylistResponse.playlist)
  return playlist_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::handsmotion::Uri >*
PlaylistResponse::mutable_playlist() {
  // @@protoc_insertion_point(field_mutable_list:handsmotion.PlaylistResponse.playlist)
  return &playlist_;
}
inline const ::handsmotion::Uri& PlaylistResponse::playlist(int index) const {
  // @@protoc_insertion_point(field_get:handsmotion.PlaylistResponse.playlist)
  return playlist_.Get(index);
}
inline ::handsmotion::Uri* PlaylistResponse::add_playlist() {
  // @@protoc_insertion_point(field_add:handsmotion.PlaylistResponse.playlist)
  return playlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::handsmotion::Uri >&
PlaylistResponse::playlist() const {
  // @@protoc_insertion_point(field_list:handsmotion.PlaylistResponse.playlist)
  return playlist_;
}

// -------------------------------------------------------------------

// StateRequest

// -------------------------------------------------------------------

// StateResponse

// .handsmotion.PlayerState state = 1;
inline void StateResponse::clear_state() {
  state_ = 0;
}
inline ::handsmotion::PlayerState StateResponse::state() const {
  // @@protoc_insertion_point(field_get:handsmotion.StateResponse.state)
  return static_cast< ::handsmotion::PlayerState >(state_);
}
inline void StateResponse::set_state(::handsmotion::PlayerState value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:handsmotion.StateResponse.state)
}

// .handsmotion.Uri uri = 2;
inline bool StateResponse::has_uri() const {
  return this != internal_default_instance() && uri_ != nullptr;
}
inline void StateResponse::clear_uri() {
  if (GetArenaNoVirtual() == nullptr && uri_ != nullptr) {
    delete uri_;
  }
  uri_ = nullptr;
}
inline const ::handsmotion::Uri& StateResponse::uri() const {
  const ::handsmotion::Uri* p = uri_;
  // @@protoc_insertion_point(field_get:handsmotion.StateResponse.uri)
  return p != nullptr ? *p : *reinterpret_cast<const ::handsmotion::Uri*>(
      &::handsmotion::_Uri_default_instance_);
}
inline ::handsmotion::Uri* StateResponse::release_uri() {
  // @@protoc_insertion_point(field_release:handsmotion.StateResponse.uri)
  
  ::handsmotion::Uri* temp = uri_;
  uri_ = nullptr;
  return temp;
}
inline ::handsmotion::Uri* StateResponse::mutable_uri() {
  
  if (uri_ == nullptr) {
    auto* p = CreateMaybeMessage<::handsmotion::Uri>(GetArenaNoVirtual());
    uri_ = p;
  }
  // @@protoc_insertion_point(field_mutable:handsmotion.StateResponse.uri)
  return uri_;
}
inline void StateResponse::set_allocated_uri(::handsmotion::Uri* uri) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete uri_;
  }
  if (uri) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      uri = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, uri, submessage_arena);
    }
    
  } else {
    
  }
  uri_ = uri;
  // @@protoc_insertion_point(field_set_allocated:handsmotion.StateResponse.uri)
}

// -------------------------------------------------------------------

// OnStateChangeRequest

// -------------------------------------------------------------------

// OnStateChangeResponse

// .handsmotion.PlayerState state = 1;
inline void OnStateChangeResponse::clear_state() {
  state_ = 0;
}
inline ::handsmotion::PlayerState OnStateChangeResponse::state() const {
  // @@protoc_insertion_point(field_get:handsmotion.OnStateChangeResponse.state)
  return static_cast< ::handsmotion::PlayerState >(state_);
}
inline void OnStateChangeResponse::set_state(::handsmotion::PlayerState value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:handsmotion.OnStateChangeResponse.state)
}

// .handsmotion.Uri uri = 2;
inline bool OnStateChangeResponse::has_uri() const {
  return this != internal_default_instance() && uri_ != nullptr;
}
inline void OnStateChangeResponse::clear_uri() {
  if (GetArenaNoVirtual() == nullptr && uri_ != nullptr) {
    delete uri_;
  }
  uri_ = nullptr;
}
inline const ::handsmotion::Uri& OnStateChangeResponse::uri() const {
  const ::handsmotion::Uri* p = uri_;
  // @@protoc_insertion_point(field_get:handsmotion.OnStateChangeResponse.uri)
  return p != nullptr ? *p : *reinterpret_cast<const ::handsmotion::Uri*>(
      &::handsmotion::_Uri_default_instance_);
}
inline ::handsmotion::Uri* OnStateChangeResponse::release_uri() {
  // @@protoc_insertion_point(field_release:handsmotion.OnStateChangeResponse.uri)
  
  ::handsmotion::Uri* temp = uri_;
  uri_ = nullptr;
  return temp;
}
inline ::handsmotion::Uri* OnStateChangeResponse::mutable_uri() {
  
  if (uri_ == nullptr) {
    auto* p = CreateMaybeMessage<::handsmotion::Uri>(GetArenaNoVirtual());
    uri_ = p;
  }
  // @@protoc_insertion_point(field_mutable:handsmotion.OnStateChangeResponse.uri)
  return uri_;
}
inline void OnStateChangeResponse::set_allocated_uri(::handsmotion::Uri* uri) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete uri_;
  }
  if (uri) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      uri = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, uri, submessage_arena);
    }
    
  } else {
    
  }
  uri_ = uri;
  // @@protoc_insertion_point(field_set_allocated:handsmotion.OnStateChangeResponse.uri)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace handsmotion

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::handsmotion::PlayerState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::handsmotion::PlayerState>() {
  return ::handsmotion::PlayerState_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_player_2eproto
