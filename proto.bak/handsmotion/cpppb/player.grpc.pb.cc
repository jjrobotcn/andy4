// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: player.proto

#include "player.pb.h"
#include "player.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace handsmotion {

static const char* Player_method_names[] = {
  "/handsmotion.Player/Play",
  "/handsmotion.Player/Stop",
  "/handsmotion.Player/Reset",
  "/handsmotion.Player/Playlist",
  "/handsmotion.Player/State",
  "/handsmotion.Player/OnStateChange",
};

std::unique_ptr< Player::Stub> Player::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Player::Stub> stub(new Player::Stub(channel));
  return stub;
}

Player::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Play_(Player_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Stop_(Player_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Reset_(Player_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Playlist_(Player_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_State_(Player_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_OnStateChange_(Player_method_names[5], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status Player::Stub::Play(::grpc::ClientContext* context, const ::handsmotion::PlayRequest& request, ::handsmotion::PlayResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Play_, context, request, response);
}

void Player::Stub::experimental_async::Play(::grpc::ClientContext* context, const ::handsmotion::PlayRequest* request, ::handsmotion::PlayResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Play_, context, request, response, std::move(f));
}

void Player::Stub::experimental_async::Play(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::handsmotion::PlayResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Play_, context, request, response, std::move(f));
}

void Player::Stub::experimental_async::Play(::grpc::ClientContext* context, const ::handsmotion::PlayRequest* request, ::handsmotion::PlayResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Play_, context, request, response, reactor);
}

void Player::Stub::experimental_async::Play(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::handsmotion::PlayResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Play_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::handsmotion::PlayResponse>* Player::Stub::AsyncPlayRaw(::grpc::ClientContext* context, const ::handsmotion::PlayRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::handsmotion::PlayResponse>::Create(channel_.get(), cq, rpcmethod_Play_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::handsmotion::PlayResponse>* Player::Stub::PrepareAsyncPlayRaw(::grpc::ClientContext* context, const ::handsmotion::PlayRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::handsmotion::PlayResponse>::Create(channel_.get(), cq, rpcmethod_Play_, context, request, false);
}

::grpc::Status Player::Stub::Stop(::grpc::ClientContext* context, const ::handsmotion::StopRequest& request, ::handsmotion::StopResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Stop_, context, request, response);
}

void Player::Stub::experimental_async::Stop(::grpc::ClientContext* context, const ::handsmotion::StopRequest* request, ::handsmotion::StopResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Stop_, context, request, response, std::move(f));
}

void Player::Stub::experimental_async::Stop(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::handsmotion::StopResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Stop_, context, request, response, std::move(f));
}

void Player::Stub::experimental_async::Stop(::grpc::ClientContext* context, const ::handsmotion::StopRequest* request, ::handsmotion::StopResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Stop_, context, request, response, reactor);
}

void Player::Stub::experimental_async::Stop(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::handsmotion::StopResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Stop_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::handsmotion::StopResponse>* Player::Stub::AsyncStopRaw(::grpc::ClientContext* context, const ::handsmotion::StopRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::handsmotion::StopResponse>::Create(channel_.get(), cq, rpcmethod_Stop_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::handsmotion::StopResponse>* Player::Stub::PrepareAsyncStopRaw(::grpc::ClientContext* context, const ::handsmotion::StopRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::handsmotion::StopResponse>::Create(channel_.get(), cq, rpcmethod_Stop_, context, request, false);
}

::grpc::Status Player::Stub::Reset(::grpc::ClientContext* context, const ::handsmotion::ResetRequest& request, ::handsmotion::ResetResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Reset_, context, request, response);
}

void Player::Stub::experimental_async::Reset(::grpc::ClientContext* context, const ::handsmotion::ResetRequest* request, ::handsmotion::ResetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Reset_, context, request, response, std::move(f));
}

void Player::Stub::experimental_async::Reset(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::handsmotion::ResetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Reset_, context, request, response, std::move(f));
}

void Player::Stub::experimental_async::Reset(::grpc::ClientContext* context, const ::handsmotion::ResetRequest* request, ::handsmotion::ResetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Reset_, context, request, response, reactor);
}

void Player::Stub::experimental_async::Reset(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::handsmotion::ResetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Reset_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::handsmotion::ResetResponse>* Player::Stub::AsyncResetRaw(::grpc::ClientContext* context, const ::handsmotion::ResetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::handsmotion::ResetResponse>::Create(channel_.get(), cq, rpcmethod_Reset_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::handsmotion::ResetResponse>* Player::Stub::PrepareAsyncResetRaw(::grpc::ClientContext* context, const ::handsmotion::ResetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::handsmotion::ResetResponse>::Create(channel_.get(), cq, rpcmethod_Reset_, context, request, false);
}

::grpc::Status Player::Stub::Playlist(::grpc::ClientContext* context, const ::handsmotion::PlaylistRequest& request, ::handsmotion::PlaylistResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Playlist_, context, request, response);
}

void Player::Stub::experimental_async::Playlist(::grpc::ClientContext* context, const ::handsmotion::PlaylistRequest* request, ::handsmotion::PlaylistResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Playlist_, context, request, response, std::move(f));
}

void Player::Stub::experimental_async::Playlist(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::handsmotion::PlaylistResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Playlist_, context, request, response, std::move(f));
}

void Player::Stub::experimental_async::Playlist(::grpc::ClientContext* context, const ::handsmotion::PlaylistRequest* request, ::handsmotion::PlaylistResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Playlist_, context, request, response, reactor);
}

void Player::Stub::experimental_async::Playlist(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::handsmotion::PlaylistResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Playlist_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::handsmotion::PlaylistResponse>* Player::Stub::AsyncPlaylistRaw(::grpc::ClientContext* context, const ::handsmotion::PlaylistRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::handsmotion::PlaylistResponse>::Create(channel_.get(), cq, rpcmethod_Playlist_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::handsmotion::PlaylistResponse>* Player::Stub::PrepareAsyncPlaylistRaw(::grpc::ClientContext* context, const ::handsmotion::PlaylistRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::handsmotion::PlaylistResponse>::Create(channel_.get(), cq, rpcmethod_Playlist_, context, request, false);
}

::grpc::Status Player::Stub::State(::grpc::ClientContext* context, const ::handsmotion::StateRequest& request, ::handsmotion::StateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_State_, context, request, response);
}

void Player::Stub::experimental_async::State(::grpc::ClientContext* context, const ::handsmotion::StateRequest* request, ::handsmotion::StateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_State_, context, request, response, std::move(f));
}

void Player::Stub::experimental_async::State(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::handsmotion::StateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_State_, context, request, response, std::move(f));
}

void Player::Stub::experimental_async::State(::grpc::ClientContext* context, const ::handsmotion::StateRequest* request, ::handsmotion::StateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_State_, context, request, response, reactor);
}

void Player::Stub::experimental_async::State(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::handsmotion::StateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_State_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::handsmotion::StateResponse>* Player::Stub::AsyncStateRaw(::grpc::ClientContext* context, const ::handsmotion::StateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::handsmotion::StateResponse>::Create(channel_.get(), cq, rpcmethod_State_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::handsmotion::StateResponse>* Player::Stub::PrepareAsyncStateRaw(::grpc::ClientContext* context, const ::handsmotion::StateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::handsmotion::StateResponse>::Create(channel_.get(), cq, rpcmethod_State_, context, request, false);
}

::grpc::ClientReader< ::handsmotion::OnStateChangeResponse>* Player::Stub::OnStateChangeRaw(::grpc::ClientContext* context, const ::handsmotion::OnStateChangeRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::handsmotion::OnStateChangeResponse>::Create(channel_.get(), rpcmethod_OnStateChange_, context, request);
}

void Player::Stub::experimental_async::OnStateChange(::grpc::ClientContext* context, ::handsmotion::OnStateChangeRequest* request, ::grpc::experimental::ClientReadReactor< ::handsmotion::OnStateChangeResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::handsmotion::OnStateChangeResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_OnStateChange_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::handsmotion::OnStateChangeResponse>* Player::Stub::AsyncOnStateChangeRaw(::grpc::ClientContext* context, const ::handsmotion::OnStateChangeRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::handsmotion::OnStateChangeResponse>::Create(channel_.get(), cq, rpcmethod_OnStateChange_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::handsmotion::OnStateChangeResponse>* Player::Stub::PrepareAsyncOnStateChangeRaw(::grpc::ClientContext* context, const ::handsmotion::OnStateChangeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::handsmotion::OnStateChangeResponse>::Create(channel_.get(), cq, rpcmethod_OnStateChange_, context, request, false, nullptr);
}

Player::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Player_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Player::Service, ::handsmotion::PlayRequest, ::handsmotion::PlayResponse>(
          std::mem_fn(&Player::Service::Play), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Player_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Player::Service, ::handsmotion::StopRequest, ::handsmotion::StopResponse>(
          std::mem_fn(&Player::Service::Stop), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Player_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Player::Service, ::handsmotion::ResetRequest, ::handsmotion::ResetResponse>(
          std::mem_fn(&Player::Service::Reset), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Player_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Player::Service, ::handsmotion::PlaylistRequest, ::handsmotion::PlaylistResponse>(
          std::mem_fn(&Player::Service::Playlist), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Player_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Player::Service, ::handsmotion::StateRequest, ::handsmotion::StateResponse>(
          std::mem_fn(&Player::Service::State), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Player_method_names[5],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Player::Service, ::handsmotion::OnStateChangeRequest, ::handsmotion::OnStateChangeResponse>(
          std::mem_fn(&Player::Service::OnStateChange), this)));
}

Player::Service::~Service() {
}

::grpc::Status Player::Service::Play(::grpc::ServerContext* context, const ::handsmotion::PlayRequest* request, ::handsmotion::PlayResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Player::Service::Stop(::grpc::ServerContext* context, const ::handsmotion::StopRequest* request, ::handsmotion::StopResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Player::Service::Reset(::grpc::ServerContext* context, const ::handsmotion::ResetRequest* request, ::handsmotion::ResetResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Player::Service::Playlist(::grpc::ServerContext* context, const ::handsmotion::PlaylistRequest* request, ::handsmotion::PlaylistResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Player::Service::State(::grpc::ServerContext* context, const ::handsmotion::StateRequest* request, ::handsmotion::StateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Player::Service::OnStateChange(::grpc::ServerContext* context, const ::handsmotion::OnStateChangeRequest* request, ::grpc::ServerWriter< ::handsmotion::OnStateChangeResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace handsmotion

