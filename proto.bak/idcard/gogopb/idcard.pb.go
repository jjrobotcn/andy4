// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: idcard.proto

package idCardService

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// 获取读卡数据流请求
type GetIdInfoRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetIdInfoRequest) Reset()         { *m = GetIdInfoRequest{} }
func (m *GetIdInfoRequest) String() string { return proto.CompactTextString(m) }
func (*GetIdInfoRequest) ProtoMessage()    {}
func (*GetIdInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0457ec9a92161a4, []int{0}
}
func (m *GetIdInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetIdInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetIdInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetIdInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetIdInfoRequest.Merge(m, src)
}
func (m *GetIdInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetIdInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetIdInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetIdInfoRequest proto.InternalMessageInfo

// 身份证数据
type IdInfo struct {
	// 身份证号
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// 姓名
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// 性别
	Gender string `protobuf:"bytes,3,opt,name=gender,proto3" json:"gender,omitempty"`
	// 民族
	National string `protobuf:"bytes,4,opt,name=national,proto3" json:"national,omitempty"`
	// 出生日期
	Birthday string `protobuf:"bytes,5,opt,name=birthday,proto3" json:"birthday,omitempty"`
	// 地址
	Address string `protobuf:"bytes,6,opt,name=address,proto3" json:"address,omitempty"`
	// 发证机关
	SignOrganization string `protobuf:"bytes,7,opt,name=sign_organization,json=signOrganization,proto3" json:"sign_organization,omitempty"`
	// 有效期开始日期
	StartDate string `protobuf:"bytes,8,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	// 有效期截止日期
	EndDate string `protobuf:"bytes,9,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	// 身份证头像图片数据
	Photo                []byte   `protobuf:"bytes,10,opt,name=photo,proto3" json:"photo,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IdInfo) Reset()         { *m = IdInfo{} }
func (m *IdInfo) String() string { return proto.CompactTextString(m) }
func (*IdInfo) ProtoMessage()    {}
func (*IdInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0457ec9a92161a4, []int{1}
}
func (m *IdInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IdInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IdInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IdInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IdInfo.Merge(m, src)
}
func (m *IdInfo) XXX_Size() int {
	return m.Size()
}
func (m *IdInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_IdInfo.DiscardUnknown(m)
}

var xxx_messageInfo_IdInfo proto.InternalMessageInfo

func (m *IdInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *IdInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *IdInfo) GetGender() string {
	if m != nil {
		return m.Gender
	}
	return ""
}

func (m *IdInfo) GetNational() string {
	if m != nil {
		return m.National
	}
	return ""
}

func (m *IdInfo) GetBirthday() string {
	if m != nil {
		return m.Birthday
	}
	return ""
}

func (m *IdInfo) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *IdInfo) GetSignOrganization() string {
	if m != nil {
		return m.SignOrganization
	}
	return ""
}

func (m *IdInfo) GetStartDate() string {
	if m != nil {
		return m.StartDate
	}
	return ""
}

func (m *IdInfo) GetEndDate() string {
	if m != nil {
		return m.EndDate
	}
	return ""
}

func (m *IdInfo) GetPhoto() []byte {
	if m != nil {
		return m.Photo
	}
	return nil
}

// 获取读卡数据流结果
type GetIdInfoResponse struct {
	// 身份证数据
	IdInfo               *IdInfo  `protobuf:"bytes,1,opt,name=id_info,json=idInfo,proto3" json:"id_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetIdInfoResponse) Reset()         { *m = GetIdInfoResponse{} }
func (m *GetIdInfoResponse) String() string { return proto.CompactTextString(m) }
func (*GetIdInfoResponse) ProtoMessage()    {}
func (*GetIdInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0457ec9a92161a4, []int{2}
}
func (m *GetIdInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetIdInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetIdInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetIdInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetIdInfoResponse.Merge(m, src)
}
func (m *GetIdInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetIdInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetIdInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetIdInfoResponse proto.InternalMessageInfo

func (m *GetIdInfoResponse) GetIdInfo() *IdInfo {
	if m != nil {
		return m.IdInfo
	}
	return nil
}

func init() {
	proto.RegisterType((*GetIdInfoRequest)(nil), "idCardService.GetIdInfoRequest")
	proto.RegisterType((*IdInfo)(nil), "idCardService.IdInfo")
	proto.RegisterType((*GetIdInfoResponse)(nil), "idCardService.GetIdInfoResponse")
}

func init() { proto.RegisterFile("idcard.proto", fileDescriptor_c0457ec9a92161a4) }

var fileDescriptor_c0457ec9a92161a4 = []byte{
	// 342 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0x51, 0x6a, 0x2a, 0x31,
	0x14, 0x86, 0xef, 0xcc, 0xd5, 0x71, 0xe6, 0x38, 0x5e, 0x34, 0xdc, 0x96, 0x54, 0xa8, 0x95, 0x79,
	0x12, 0x0a, 0x43, 0xb1, 0x3b, 0xa8, 0x42, 0xb1, 0x2f, 0x85, 0xe9, 0x02, 0x24, 0x7a, 0x8e, 0x1a,
	0x68, 0x13, 0x9b, 0xa4, 0x42, 0xbb, 0x9d, 0x6e, 0xa6, 0x8f, 0x5d, 0x42, 0x71, 0x25, 0xc5, 0x8c,
	0x8a, 0x15, 0xfa, 0x34, 0xf3, 0xff, 0xdf, 0x9f, 0x93, 0xf0, 0x27, 0x90, 0x4a, 0x9c, 0x0a, 0x83,
	0xf9, 0xd2, 0x68, 0xa7, 0x59, 0x43, 0xe2, 0x40, 0x18, 0x7c, 0x20, 0xb3, 0x92, 0x53, 0xca, 0x18,
	0x34, 0x6f, 0xc9, 0x8d, 0x70, 0xa4, 0x66, 0xba, 0xa0, 0xe7, 0x17, 0xb2, 0x2e, 0x7b, 0x0f, 0x21,
	0x2a, 0x1d, 0xf6, 0x0f, 0x42, 0x89, 0x3c, 0xe8, 0x06, 0xbd, 0xa4, 0x08, 0x25, 0x32, 0x06, 0x15,
	0x25, 0x9e, 0x88, 0x87, 0xde, 0xf1, 0xff, 0xec, 0x14, 0xa2, 0x39, 0x29, 0x24, 0xc3, 0xff, 0x7a,
	0x77, 0xab, 0x58, 0x1b, 0x62, 0x25, 0x9c, 0xd4, 0x4a, 0x3c, 0xf2, 0x8a, 0x27, 0x7b, 0xbd, 0x61,
	0x13, 0x69, 0xdc, 0x02, 0xc5, 0x2b, 0xaf, 0x96, 0x6c, 0xa7, 0x19, 0x87, 0x9a, 0x40, 0x34, 0x64,
	0x2d, 0x8f, 0x3c, 0xda, 0x49, 0x76, 0x09, 0x2d, 0x2b, 0xe7, 0x6a, 0xac, 0xcd, 0x5c, 0x28, 0xf9,
	0xe6, 0x87, 0xf1, 0x9a, 0xcf, 0x34, 0x37, 0xe0, 0xfe, 0xc0, 0x67, 0xe7, 0x00, 0xd6, 0x09, 0xe3,
	0xc6, 0x28, 0x1c, 0xf1, 0xd8, 0xa7, 0x12, 0xef, 0x0c, 0x85, 0x23, 0x76, 0x06, 0x31, 0x29, 0x2c,
	0x61, 0x52, 0x6e, 0x43, 0x0a, 0x3d, 0xfa, 0x0f, 0xd5, 0xe5, 0x42, 0x3b, 0xcd, 0xa1, 0x1b, 0xf4,
	0xd2, 0xa2, 0x14, 0x77, 0x95, 0xb8, 0xde, 0x4c, 0x8b, 0xd8, 0x90, 0x25, 0xb3, 0x22, 0xcc, 0x06,
	0xd0, 0x3a, 0x68, 0xce, 0x2e, 0xb5, 0xb2, 0xc4, 0x72, 0xa8, 0x49, 0x1c, 0x4b, 0x35, 0xd3, 0xbe,
	0xb4, 0x7a, 0xff, 0x24, 0xff, 0xd1, 0x77, 0xbe, 0xcd, 0x47, 0xd2, 0x7f, 0xfb, 0x53, 0x68, 0x8c,
	0x86, 0x07, 0x9c, 0x15, 0x90, 0xec, 0xa7, 0xb2, 0x8b, 0xa3, 0xc5, 0xc7, 0x37, 0xd5, 0xee, 0xfe,
	0x1e, 0x28, 0x0f, 0x94, 0xfd, 0xb9, 0x0a, 0x6e, 0xd2, 0x8f, 0x75, 0x27, 0xf8, 0x5c, 0x77, 0x82,
	0xaf, 0x75, 0x27, 0x98, 0x44, 0xfe, 0x1d, 0x5c, 0x7f, 0x07, 0x00, 0x00, 0xff, 0xff, 0x94, 0x62,
	0x5d, 0x1f, 0x17, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// IDCardServiceClient is the client API for IDCardService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IDCardServiceClient interface {
	// 获取读卡数据流
	GetIdInfo(ctx context.Context, in *GetIdInfoRequest, opts ...grpc.CallOption) (IDCardService_GetIdInfoClient, error)
}

type iDCardServiceClient struct {
	cc *grpc.ClientConn
}

func NewIDCardServiceClient(cc *grpc.ClientConn) IDCardServiceClient {
	return &iDCardServiceClient{cc}
}

func (c *iDCardServiceClient) GetIdInfo(ctx context.Context, in *GetIdInfoRequest, opts ...grpc.CallOption) (IDCardService_GetIdInfoClient, error) {
	stream, err := c.cc.NewStream(ctx, &_IDCardService_serviceDesc.Streams[0], "/idCardService.IDCardService/GetIdInfo", opts...)
	if err != nil {
		return nil, err
	}
	x := &iDCardServiceGetIdInfoClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type IDCardService_GetIdInfoClient interface {
	Recv() (*GetIdInfoResponse, error)
	grpc.ClientStream
}

type iDCardServiceGetIdInfoClient struct {
	grpc.ClientStream
}

func (x *iDCardServiceGetIdInfoClient) Recv() (*GetIdInfoResponse, error) {
	m := new(GetIdInfoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// IDCardServiceServer is the server API for IDCardService service.
type IDCardServiceServer interface {
	// 获取读卡数据流
	GetIdInfo(*GetIdInfoRequest, IDCardService_GetIdInfoServer) error
}

// UnimplementedIDCardServiceServer can be embedded to have forward compatible implementations.
type UnimplementedIDCardServiceServer struct {
}

func (*UnimplementedIDCardServiceServer) GetIdInfo(req *GetIdInfoRequest, srv IDCardService_GetIdInfoServer) error {
	return status.Errorf(codes.Unimplemented, "method GetIdInfo not implemented")
}

func RegisterIDCardServiceServer(s *grpc.Server, srv IDCardServiceServer) {
	s.RegisterService(&_IDCardService_serviceDesc, srv)
}

func _IDCardService_GetIdInfo_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetIdInfoRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(IDCardServiceServer).GetIdInfo(m, &iDCardServiceGetIdInfoServer{stream})
}

type IDCardService_GetIdInfoServer interface {
	Send(*GetIdInfoResponse) error
	grpc.ServerStream
}

type iDCardServiceGetIdInfoServer struct {
	grpc.ServerStream
}

func (x *iDCardServiceGetIdInfoServer) Send(m *GetIdInfoResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _IDCardService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "idCardService.IDCardService",
	HandlerType: (*IDCardServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetIdInfo",
			Handler:       _IDCardService_GetIdInfo_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "idcard.proto",
}

func (m *GetIdInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetIdInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *IdInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IdInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintIdcard(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintIdcard(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Gender) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintIdcard(dAtA, i, uint64(len(m.Gender)))
		i += copy(dAtA[i:], m.Gender)
	}
	if len(m.National) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintIdcard(dAtA, i, uint64(len(m.National)))
		i += copy(dAtA[i:], m.National)
	}
	if len(m.Birthday) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintIdcard(dAtA, i, uint64(len(m.Birthday)))
		i += copy(dAtA[i:], m.Birthday)
	}
	if len(m.Address) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintIdcard(dAtA, i, uint64(len(m.Address)))
		i += copy(dAtA[i:], m.Address)
	}
	if len(m.SignOrganization) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintIdcard(dAtA, i, uint64(len(m.SignOrganization)))
		i += copy(dAtA[i:], m.SignOrganization)
	}
	if len(m.StartDate) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintIdcard(dAtA, i, uint64(len(m.StartDate)))
		i += copy(dAtA[i:], m.StartDate)
	}
	if len(m.EndDate) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintIdcard(dAtA, i, uint64(len(m.EndDate)))
		i += copy(dAtA[i:], m.EndDate)
	}
	if len(m.Photo) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintIdcard(dAtA, i, uint64(len(m.Photo)))
		i += copy(dAtA[i:], m.Photo)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetIdInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetIdInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IdInfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintIdcard(dAtA, i, uint64(m.IdInfo.Size()))
		n1, err1 := m.IdInfo.MarshalTo(dAtA[i:])
		if err1 != nil {
			return 0, err1
		}
		i += n1
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintIdcard(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *GetIdInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IdInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovIdcard(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovIdcard(uint64(l))
	}
	l = len(m.Gender)
	if l > 0 {
		n += 1 + l + sovIdcard(uint64(l))
	}
	l = len(m.National)
	if l > 0 {
		n += 1 + l + sovIdcard(uint64(l))
	}
	l = len(m.Birthday)
	if l > 0 {
		n += 1 + l + sovIdcard(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovIdcard(uint64(l))
	}
	l = len(m.SignOrganization)
	if l > 0 {
		n += 1 + l + sovIdcard(uint64(l))
	}
	l = len(m.StartDate)
	if l > 0 {
		n += 1 + l + sovIdcard(uint64(l))
	}
	l = len(m.EndDate)
	if l > 0 {
		n += 1 + l + sovIdcard(uint64(l))
	}
	l = len(m.Photo)
	if l > 0 {
		n += 1 + l + sovIdcard(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetIdInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IdInfo != nil {
		l = m.IdInfo.Size()
		n += 1 + l + sovIdcard(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovIdcard(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozIdcard(x uint64) (n int) {
	return sovIdcard(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetIdInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdcard
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetIdInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetIdInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipIdcard(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdcard
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthIdcard
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IdInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdcard
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IdInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IdInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdcard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdcard
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIdcard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdcard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdcard
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIdcard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdcard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdcard
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIdcard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field National", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdcard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdcard
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIdcard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.National = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Birthday", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdcard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdcard
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIdcard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Birthday = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdcard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdcard
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIdcard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignOrganization", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdcard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdcard
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIdcard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignOrganization = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdcard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdcard
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIdcard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdcard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdcard
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIdcard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photo", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdcard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthIdcard
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthIdcard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Photo = append(m.Photo[:0], dAtA[iNdEx:postIndex]...)
			if m.Photo == nil {
				m.Photo = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdcard(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdcard
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthIdcard
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetIdInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdcard
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetIdInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetIdInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdcard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdcard
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIdcard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IdInfo == nil {
				m.IdInfo = &IdInfo{}
			}
			if err := m.IdInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdcard(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdcard
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthIdcard
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipIdcard(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowIdcard
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIdcard
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIdcard
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthIdcard
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthIdcard
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowIdcard
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipIdcard(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthIdcard
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthIdcard = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowIdcard   = fmt.Errorf("proto: integer overflow")
)
