// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: headmotion.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace MotionService {
  public static partial class MotionService
  {
    static readonly string __ServiceName = "motionService.MotionService";

    static readonly grpc::Marshaller<global::MotionService.MoveToRequest> __Marshaller_motionService_MoveToRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::MotionService.MoveToRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::MotionService.MoveToResponse> __Marshaller_motionService_MoveToResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::MotionService.MoveToResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::MotionService.PositioningDataRequest> __Marshaller_motionService_PositioningDataRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::MotionService.PositioningDataRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::MotionService.PositioningDataResponse> __Marshaller_motionService_PositioningDataResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::MotionService.PositioningDataResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::MotionService.GetPositionRequest> __Marshaller_motionService_GetPositionRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::MotionService.GetPositionRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::MotionService.GetPositionResponse> __Marshaller_motionService_GetPositionResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::MotionService.GetPositionResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::MotionService.NewGroupRequest> __Marshaller_motionService_NewGroupRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::MotionService.NewGroupRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::MotionService.NewGroupResponse> __Marshaller_motionService_NewGroupResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::MotionService.NewGroupResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::MotionService.ListGroupsRequest> __Marshaller_motionService_ListGroupsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::MotionService.ListGroupsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::MotionService.ListGroupsResponse> __Marshaller_motionService_ListGroupsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::MotionService.ListGroupsResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::MotionService.UpdateGroupRequest> __Marshaller_motionService_UpdateGroupRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::MotionService.UpdateGroupRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::MotionService.UpdateGroupResponse> __Marshaller_motionService_UpdateGroupResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::MotionService.UpdateGroupResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::MotionService.DeleteGroupsRequest> __Marshaller_motionService_DeleteGroupsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::MotionService.DeleteGroupsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::MotionService.DeleteGroupsResponse> __Marshaller_motionService_DeleteGroupsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::MotionService.DeleteGroupsResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::MotionService.ListGroupTargetsRequest> __Marshaller_motionService_ListGroupTargetsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::MotionService.ListGroupTargetsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::MotionService.ListGroupTargetsResponse> __Marshaller_motionService_ListGroupTargetsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::MotionService.ListGroupTargetsResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::MotionService.UpdateGroupTargetsRequest> __Marshaller_motionService_UpdateGroupTargetsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::MotionService.UpdateGroupTargetsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::MotionService.UpdateGroupTargetsResponse> __Marshaller_motionService_UpdateGroupTargetsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::MotionService.UpdateGroupTargetsResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::MotionService.MoveToRequest, global::MotionService.MoveToResponse> __Method_MoveTo = new grpc::Method<global::MotionService.MoveToRequest, global::MotionService.MoveToResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "MoveTo",
        __Marshaller_motionService_MoveToRequest,
        __Marshaller_motionService_MoveToResponse);

    static readonly grpc::Method<global::MotionService.PositioningDataRequest, global::MotionService.PositioningDataResponse> __Method_PositioningData = new grpc::Method<global::MotionService.PositioningDataRequest, global::MotionService.PositioningDataResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "PositioningData",
        __Marshaller_motionService_PositioningDataRequest,
        __Marshaller_motionService_PositioningDataResponse);

    static readonly grpc::Method<global::MotionService.GetPositionRequest, global::MotionService.GetPositionResponse> __Method_GetPosition = new grpc::Method<global::MotionService.GetPositionRequest, global::MotionService.GetPositionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetPosition",
        __Marshaller_motionService_GetPositionRequest,
        __Marshaller_motionService_GetPositionResponse);

    static readonly grpc::Method<global::MotionService.NewGroupRequest, global::MotionService.NewGroupResponse> __Method_NewGroup = new grpc::Method<global::MotionService.NewGroupRequest, global::MotionService.NewGroupResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "NewGroup",
        __Marshaller_motionService_NewGroupRequest,
        __Marshaller_motionService_NewGroupResponse);

    static readonly grpc::Method<global::MotionService.ListGroupsRequest, global::MotionService.ListGroupsResponse> __Method_ListGroups = new grpc::Method<global::MotionService.ListGroupsRequest, global::MotionService.ListGroupsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListGroups",
        __Marshaller_motionService_ListGroupsRequest,
        __Marshaller_motionService_ListGroupsResponse);

    static readonly grpc::Method<global::MotionService.UpdateGroupRequest, global::MotionService.UpdateGroupResponse> __Method_UpdateGroup = new grpc::Method<global::MotionService.UpdateGroupRequest, global::MotionService.UpdateGroupResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateGroup",
        __Marshaller_motionService_UpdateGroupRequest,
        __Marshaller_motionService_UpdateGroupResponse);

    static readonly grpc::Method<global::MotionService.DeleteGroupsRequest, global::MotionService.DeleteGroupsResponse> __Method_DeleteGroups = new grpc::Method<global::MotionService.DeleteGroupsRequest, global::MotionService.DeleteGroupsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteGroups",
        __Marshaller_motionService_DeleteGroupsRequest,
        __Marshaller_motionService_DeleteGroupsResponse);

    static readonly grpc::Method<global::MotionService.ListGroupTargetsRequest, global::MotionService.ListGroupTargetsResponse> __Method_ListGroupTargets = new grpc::Method<global::MotionService.ListGroupTargetsRequest, global::MotionService.ListGroupTargetsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListGroupTargets",
        __Marshaller_motionService_ListGroupTargetsRequest,
        __Marshaller_motionService_ListGroupTargetsResponse);

    static readonly grpc::Method<global::MotionService.UpdateGroupTargetsRequest, global::MotionService.UpdateGroupTargetsResponse> __Method_UpdateGroupTargets = new grpc::Method<global::MotionService.UpdateGroupTargetsRequest, global::MotionService.UpdateGroupTargetsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateGroupTargets",
        __Marshaller_motionService_UpdateGroupTargetsRequest,
        __Marshaller_motionService_UpdateGroupTargetsResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::MotionService.HeadmotionReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of MotionService</summary>
    [grpc::BindServiceMethod(typeof(MotionService), "BindService")]
    public abstract partial class MotionServiceBase
    {
      /// <summary>
      /// 移动功能
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::MotionService.MoveToResponse> MoveTo(global::MotionService.MoveToRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 持续监听位置消息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task PositioningData(global::MotionService.PositioningDataRequest request, grpc::IServerStreamWriter<global::MotionService.PositioningDataResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 获取当前位置信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::MotionService.GetPositionResponse> GetPosition(global::MotionService.GetPositionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 创建组
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::MotionService.NewGroupResponse> NewGroup(global::MotionService.NewGroupRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 获取组列表
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::MotionService.ListGroupsResponse> ListGroups(global::MotionService.ListGroupsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 更新组信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::MotionService.UpdateGroupResponse> UpdateGroup(global::MotionService.UpdateGroupRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 删除组列表
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::MotionService.DeleteGroupsResponse> DeleteGroups(global::MotionService.DeleteGroupsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 获取组动作点列表
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::MotionService.ListGroupTargetsResponse> ListGroupTargets(global::MotionService.ListGroupTargetsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 更新组动作点列表
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::MotionService.UpdateGroupTargetsResponse> UpdateGroupTargets(global::MotionService.UpdateGroupTargetsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for MotionService</summary>
    public partial class MotionServiceClient : grpc::ClientBase<MotionServiceClient>
    {
      /// <summary>Creates a new client for MotionService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public MotionServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for MotionService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public MotionServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected MotionServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected MotionServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// 移动功能
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MotionService.MoveToResponse MoveTo(global::MotionService.MoveToRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MoveTo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 移动功能
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MotionService.MoveToResponse MoveTo(global::MotionService.MoveToRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_MoveTo, null, options, request);
      }
      /// <summary>
      /// 移动功能
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MotionService.MoveToResponse> MoveToAsync(global::MotionService.MoveToRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MoveToAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 移动功能
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MotionService.MoveToResponse> MoveToAsync(global::MotionService.MoveToRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_MoveTo, null, options, request);
      }
      /// <summary>
      /// 持续监听位置消息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::MotionService.PositioningDataResponse> PositioningData(global::MotionService.PositioningDataRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PositioningData(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 持续监听位置消息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::MotionService.PositioningDataResponse> PositioningData(global::MotionService.PositioningDataRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_PositioningData, null, options, request);
      }
      /// <summary>
      /// 获取当前位置信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MotionService.GetPositionResponse GetPosition(global::MotionService.GetPositionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPosition(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 获取当前位置信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MotionService.GetPositionResponse GetPosition(global::MotionService.GetPositionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetPosition, null, options, request);
      }
      /// <summary>
      /// 获取当前位置信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MotionService.GetPositionResponse> GetPositionAsync(global::MotionService.GetPositionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPositionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 获取当前位置信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MotionService.GetPositionResponse> GetPositionAsync(global::MotionService.GetPositionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetPosition, null, options, request);
      }
      /// <summary>
      /// 创建组
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MotionService.NewGroupResponse NewGroup(global::MotionService.NewGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return NewGroup(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 创建组
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MotionService.NewGroupResponse NewGroup(global::MotionService.NewGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_NewGroup, null, options, request);
      }
      /// <summary>
      /// 创建组
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MotionService.NewGroupResponse> NewGroupAsync(global::MotionService.NewGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return NewGroupAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 创建组
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MotionService.NewGroupResponse> NewGroupAsync(global::MotionService.NewGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_NewGroup, null, options, request);
      }
      /// <summary>
      /// 获取组列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MotionService.ListGroupsResponse ListGroups(global::MotionService.ListGroupsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListGroups(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 获取组列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MotionService.ListGroupsResponse ListGroups(global::MotionService.ListGroupsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListGroups, null, options, request);
      }
      /// <summary>
      /// 获取组列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MotionService.ListGroupsResponse> ListGroupsAsync(global::MotionService.ListGroupsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListGroupsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 获取组列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MotionService.ListGroupsResponse> ListGroupsAsync(global::MotionService.ListGroupsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListGroups, null, options, request);
      }
      /// <summary>
      /// 更新组信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MotionService.UpdateGroupResponse UpdateGroup(global::MotionService.UpdateGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateGroup(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 更新组信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MotionService.UpdateGroupResponse UpdateGroup(global::MotionService.UpdateGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateGroup, null, options, request);
      }
      /// <summary>
      /// 更新组信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MotionService.UpdateGroupResponse> UpdateGroupAsync(global::MotionService.UpdateGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateGroupAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 更新组信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MotionService.UpdateGroupResponse> UpdateGroupAsync(global::MotionService.UpdateGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateGroup, null, options, request);
      }
      /// <summary>
      /// 删除组列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MotionService.DeleteGroupsResponse DeleteGroups(global::MotionService.DeleteGroupsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteGroups(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 删除组列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MotionService.DeleteGroupsResponse DeleteGroups(global::MotionService.DeleteGroupsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteGroups, null, options, request);
      }
      /// <summary>
      /// 删除组列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MotionService.DeleteGroupsResponse> DeleteGroupsAsync(global::MotionService.DeleteGroupsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteGroupsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 删除组列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MotionService.DeleteGroupsResponse> DeleteGroupsAsync(global::MotionService.DeleteGroupsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteGroups, null, options, request);
      }
      /// <summary>
      /// 获取组动作点列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MotionService.ListGroupTargetsResponse ListGroupTargets(global::MotionService.ListGroupTargetsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListGroupTargets(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 获取组动作点列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MotionService.ListGroupTargetsResponse ListGroupTargets(global::MotionService.ListGroupTargetsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListGroupTargets, null, options, request);
      }
      /// <summary>
      /// 获取组动作点列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MotionService.ListGroupTargetsResponse> ListGroupTargetsAsync(global::MotionService.ListGroupTargetsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListGroupTargetsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 获取组动作点列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MotionService.ListGroupTargetsResponse> ListGroupTargetsAsync(global::MotionService.ListGroupTargetsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListGroupTargets, null, options, request);
      }
      /// <summary>
      /// 更新组动作点列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MotionService.UpdateGroupTargetsResponse UpdateGroupTargets(global::MotionService.UpdateGroupTargetsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateGroupTargets(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 更新组动作点列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MotionService.UpdateGroupTargetsResponse UpdateGroupTargets(global::MotionService.UpdateGroupTargetsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateGroupTargets, null, options, request);
      }
      /// <summary>
      /// 更新组动作点列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MotionService.UpdateGroupTargetsResponse> UpdateGroupTargetsAsync(global::MotionService.UpdateGroupTargetsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateGroupTargetsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 更新组动作点列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MotionService.UpdateGroupTargetsResponse> UpdateGroupTargetsAsync(global::MotionService.UpdateGroupTargetsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateGroupTargets, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override MotionServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new MotionServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(MotionServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_MoveTo, serviceImpl.MoveTo)
          .AddMethod(__Method_PositioningData, serviceImpl.PositioningData)
          .AddMethod(__Method_GetPosition, serviceImpl.GetPosition)
          .AddMethod(__Method_NewGroup, serviceImpl.NewGroup)
          .AddMethod(__Method_ListGroups, serviceImpl.ListGroups)
          .AddMethod(__Method_UpdateGroup, serviceImpl.UpdateGroup)
          .AddMethod(__Method_DeleteGroups, serviceImpl.DeleteGroups)
          .AddMethod(__Method_ListGroupTargets, serviceImpl.ListGroupTargets)
          .AddMethod(__Method_UpdateGroupTargets, serviceImpl.UpdateGroupTargets).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, MotionServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_MoveTo, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::MotionService.MoveToRequest, global::MotionService.MoveToResponse>(serviceImpl.MoveTo));
      serviceBinder.AddMethod(__Method_PositioningData, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::MotionService.PositioningDataRequest, global::MotionService.PositioningDataResponse>(serviceImpl.PositioningData));
      serviceBinder.AddMethod(__Method_GetPosition, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::MotionService.GetPositionRequest, global::MotionService.GetPositionResponse>(serviceImpl.GetPosition));
      serviceBinder.AddMethod(__Method_NewGroup, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::MotionService.NewGroupRequest, global::MotionService.NewGroupResponse>(serviceImpl.NewGroup));
      serviceBinder.AddMethod(__Method_ListGroups, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::MotionService.ListGroupsRequest, global::MotionService.ListGroupsResponse>(serviceImpl.ListGroups));
      serviceBinder.AddMethod(__Method_UpdateGroup, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::MotionService.UpdateGroupRequest, global::MotionService.UpdateGroupResponse>(serviceImpl.UpdateGroup));
      serviceBinder.AddMethod(__Method_DeleteGroups, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::MotionService.DeleteGroupsRequest, global::MotionService.DeleteGroupsResponse>(serviceImpl.DeleteGroups));
      serviceBinder.AddMethod(__Method_ListGroupTargets, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::MotionService.ListGroupTargetsRequest, global::MotionService.ListGroupTargetsResponse>(serviceImpl.ListGroupTargets));
      serviceBinder.AddMethod(__Method_UpdateGroupTargets, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::MotionService.UpdateGroupTargetsRequest, global::MotionService.UpdateGroupTargetsResponse>(serviceImpl.UpdateGroupTargets));
    }

  }
}
#endregion
