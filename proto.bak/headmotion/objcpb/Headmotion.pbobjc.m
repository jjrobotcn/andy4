// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: headmotion.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "Headmotion.pbobjc.h"
#import "google/api/Annotations.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"

#pragma mark - HeadmotionRoot

@implementation HeadmotionRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    registry = [[GPBExtensionRegistry alloc] init];
    // Merge in the imports (direct or indirect) that defined extensions.
    [registry addExtensions:[GAPIAnnotationsRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - HeadmotionRoot_FileDescriptor

static GPBFileDescriptor *HeadmotionRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"motionService"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum MotionType

GPBEnumDescriptor *MotionType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "UnknownMotionType\000Head\000";
    static const int32_t values[] = {
        MotionType_UnknownMotionType,
        MotionType_Head,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(MotionType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:MotionType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL MotionType_IsValidValue(int32_t value__) {
  switch (value__) {
    case MotionType_UnknownMotionType:
    case MotionType_Head:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Position

@implementation Position

@dynamic xAxis;
@dynamic yAxis;

typedef struct Position__storage_ {
  uint32_t _has_storage_[1];
  int32_t xAxis;
  int32_t yAxis;
} Position__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "xAxis",
        .dataTypeSpecific.className = NULL,
        .number = Position_FieldNumber_XAxis,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Position__storage_, xAxis),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "yAxis",
        .dataTypeSpecific.className = NULL,
        .number = Position_FieldNumber_YAxis,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Position__storage_, yAxis),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Position class]
                                     rootClass:[HeadmotionRoot class]
                                          file:HeadmotionRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Position__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MotionConfig

@implementation MotionConfig

@dynamic speed;
@dynamic waitMillisecond;

typedef struct MotionConfig__storage_ {
  uint32_t _has_storage_[1];
  uint32_t speed;
  uint32_t waitMillisecond;
} MotionConfig__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "speed",
        .dataTypeSpecific.className = NULL,
        .number = MotionConfig_FieldNumber_Speed,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MotionConfig__storage_, speed),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "waitMillisecond",
        .dataTypeSpecific.className = NULL,
        .number = MotionConfig_FieldNumber_WaitMillisecond,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MotionConfig__storage_, waitMillisecond),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MotionConfig class]
                                     rootClass:[HeadmotionRoot class]
                                          file:HeadmotionRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MotionConfig__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Group

@implementation Group

@dynamic hasGroupInfo, groupInfo;
@dynamic targetsArray, targetsArray_Count;

typedef struct Group__storage_ {
  uint32_t _has_storage_[1];
  GroupInfo *groupInfo;
  NSMutableArray *targetsArray;
} Group__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "groupInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(GroupInfo),
        .number = Group_FieldNumber_GroupInfo,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Group__storage_, groupInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "targetsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Target),
        .number = Group_FieldNumber_TargetsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Group__storage_, targetsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Group class]
                                     rootClass:[HeadmotionRoot class]
                                          file:HeadmotionRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Group__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GroupInfo

@implementation GroupInfo

@dynamic id_p;
@dynamic name;
@dynamic motionType;

typedef struct GroupInfo__storage_ {
  uint32_t _has_storage_[1];
  MotionType motionType;
  NSString *id_p;
  NSString *name;
} GroupInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = GroupInfo_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GroupInfo__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = GroupInfo_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GroupInfo__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "motionType",
        .dataTypeSpecific.enumDescFunc = MotionType_EnumDescriptor,
        .number = GroupInfo_FieldNumber_MotionType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GroupInfo__storage_, motionType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GroupInfo class]
                                     rootClass:[HeadmotionRoot class]
                                          file:HeadmotionRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GroupInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t GroupInfo_MotionType_RawValue(GroupInfo *message) {
  GPBDescriptor *descriptor = [GroupInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:GroupInfo_FieldNumber_MotionType];
  return GPBGetMessageInt32Field(message, field);
}

void SetGroupInfo_MotionType_RawValue(GroupInfo *message, int32_t value) {
  GPBDescriptor *descriptor = [GroupInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:GroupInfo_FieldNumber_MotionType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Target

@implementation Target

@dynamic hasPosition, position;
@dynamic hasMotionConfig, motionConfig;

typedef struct Target__storage_ {
  uint32_t _has_storage_[1];
  Position *position;
  MotionConfig *motionConfig;
} Target__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "position",
        .dataTypeSpecific.className = GPBStringifySymbol(Position),
        .number = Target_FieldNumber_Position,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Target__storage_, position),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "motionConfig",
        .dataTypeSpecific.className = GPBStringifySymbol(MotionConfig),
        .number = Target_FieldNumber_MotionConfig,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Target__storage_, motionConfig),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Target class]
                                     rootClass:[HeadmotionRoot class]
                                          file:HeadmotionRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Target__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GroupTargetRequest

@implementation GroupTargetRequest

@dynamic groupIdNameOneofOneOfCase;
@dynamic id_p;
@dynamic name;

typedef struct GroupTargetRequest__storage_ {
  uint32_t _has_storage_[2];
  NSString *id_p;
  NSString *name;
} GroupTargetRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = GroupTargetRequest_FieldNumber_Id_p,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(GroupTargetRequest__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = GroupTargetRequest_FieldNumber_Name,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(GroupTargetRequest__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GroupTargetRequest class]
                                     rootClass:[HeadmotionRoot class]
                                          file:HeadmotionRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GroupTargetRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    static const char *oneofs[] = {
      "groupIdNameOneof",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void GroupTargetRequest_ClearGroupIdNameOneofOneOfCase(GroupTargetRequest *message) {
  GPBDescriptor *descriptor = [message descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBMaybeClearOneof(message, oneof, -1, 0);
}
#pragma mark - GroupsTargetRequest

@implementation GroupsTargetRequest

@dynamic groupsArray, groupsArray_Count;

typedef struct GroupsTargetRequest__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *groupsArray;
} GroupsTargetRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "groupsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(GroupTargetRequest),
        .number = GroupsTargetRequest_FieldNumber_GroupsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GroupsTargetRequest__storage_, groupsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GroupsTargetRequest class]
                                     rootClass:[HeadmotionRoot class]
                                          file:HeadmotionRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GroupsTargetRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PositionTargetRequest

@implementation PositionTargetRequest

@dynamic positionTargetOneofOneOfCase;
@dynamic absoluteTarget;
@dynamic relativeTarget;

typedef struct PositionTargetRequest__storage_ {
  uint32_t _has_storage_[2];
  Target *absoluteTarget;
  Target *relativeTarget;
} PositionTargetRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "absoluteTarget",
        .dataTypeSpecific.className = GPBStringifySymbol(Target),
        .number = PositionTargetRequest_FieldNumber_AbsoluteTarget,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(PositionTargetRequest__storage_, absoluteTarget),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "relativeTarget",
        .dataTypeSpecific.className = GPBStringifySymbol(Target),
        .number = PositionTargetRequest_FieldNumber_RelativeTarget,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(PositionTargetRequest__storage_, relativeTarget),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PositionTargetRequest class]
                                     rootClass:[HeadmotionRoot class]
                                          file:HeadmotionRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PositionTargetRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    static const char *oneofs[] = {
      "positionTargetOneof",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void PositionTargetRequest_ClearPositionTargetOneofOneOfCase(PositionTargetRequest *message) {
  GPBDescriptor *descriptor = [message descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBMaybeClearOneof(message, oneof, -1, 0);
}
#pragma mark - MoveToRequest

@implementation MoveToRequest

@dynamic targetRequestOneofOneOfCase;
@dynamic motionType;
@dynamic groupsTargetRequest;
@dynamic positionTargetRequest;
@dynamic immediately;

typedef struct MoveToRequest__storage_ {
  uint32_t _has_storage_[2];
  MotionType motionType;
  GroupsTargetRequest *groupsTargetRequest;
  PositionTargetRequest *positionTargetRequest;
} MoveToRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "motionType",
        .dataTypeSpecific.enumDescFunc = MotionType_EnumDescriptor,
        .number = MoveToRequest_FieldNumber_MotionType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MoveToRequest__storage_, motionType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "groupsTargetRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(GroupsTargetRequest),
        .number = MoveToRequest_FieldNumber_GroupsTargetRequest,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(MoveToRequest__storage_, groupsTargetRequest),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "positionTargetRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(PositionTargetRequest),
        .number = MoveToRequest_FieldNumber_PositionTargetRequest,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(MoveToRequest__storage_, positionTargetRequest),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "immediately",
        .dataTypeSpecific.className = NULL,
        .number = MoveToRequest_FieldNumber_Immediately,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MoveToRequest class]
                                     rootClass:[HeadmotionRoot class]
                                          file:HeadmotionRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MoveToRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    static const char *oneofs[] = {
      "targetRequestOneof",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t MoveToRequest_MotionType_RawValue(MoveToRequest *message) {
  GPBDescriptor *descriptor = [MoveToRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:MoveToRequest_FieldNumber_MotionType];
  return GPBGetMessageInt32Field(message, field);
}

void SetMoveToRequest_MotionType_RawValue(MoveToRequest *message, int32_t value) {
  GPBDescriptor *descriptor = [MoveToRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:MoveToRequest_FieldNumber_MotionType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

void MoveToRequest_ClearTargetRequestOneofOneOfCase(MoveToRequest *message) {
  GPBDescriptor *descriptor = [message descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBMaybeClearOneof(message, oneof, -1, 0);
}
#pragma mark - MoveToResponse

@implementation MoveToResponse


typedef struct MoveToResponse__storage_ {
  uint32_t _has_storage_[1];
} MoveToResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MoveToResponse class]
                                     rootClass:[HeadmotionRoot class]
                                          file:HeadmotionRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(MoveToResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetPositionRequest

@implementation GetPositionRequest

@dynamic motionType;

typedef struct GetPositionRequest__storage_ {
  uint32_t _has_storage_[1];
  MotionType motionType;
} GetPositionRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "motionType",
        .dataTypeSpecific.enumDescFunc = MotionType_EnumDescriptor,
        .number = GetPositionRequest_FieldNumber_MotionType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetPositionRequest__storage_, motionType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetPositionRequest class]
                                     rootClass:[HeadmotionRoot class]
                                          file:HeadmotionRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetPositionRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t GetPositionRequest_MotionType_RawValue(GetPositionRequest *message) {
  GPBDescriptor *descriptor = [GetPositionRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:GetPositionRequest_FieldNumber_MotionType];
  return GPBGetMessageInt32Field(message, field);
}

void SetGetPositionRequest_MotionType_RawValue(GetPositionRequest *message, int32_t value) {
  GPBDescriptor *descriptor = [GetPositionRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:GetPositionRequest_FieldNumber_MotionType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - GetPositionResponse

@implementation GetPositionResponse

@dynamic motionType;
@dynamic hasPosition, position;

typedef struct GetPositionResponse__storage_ {
  uint32_t _has_storage_[1];
  MotionType motionType;
  Position *position;
} GetPositionResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "motionType",
        .dataTypeSpecific.enumDescFunc = MotionType_EnumDescriptor,
        .number = GetPositionResponse_FieldNumber_MotionType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetPositionResponse__storage_, motionType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "position",
        .dataTypeSpecific.className = GPBStringifySymbol(Position),
        .number = GetPositionResponse_FieldNumber_Position,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetPositionResponse__storage_, position),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetPositionResponse class]
                                     rootClass:[HeadmotionRoot class]
                                          file:HeadmotionRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetPositionResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t GetPositionResponse_MotionType_RawValue(GetPositionResponse *message) {
  GPBDescriptor *descriptor = [GetPositionResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:GetPositionResponse_FieldNumber_MotionType];
  return GPBGetMessageInt32Field(message, field);
}

void SetGetPositionResponse_MotionType_RawValue(GetPositionResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [GetPositionResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:GetPositionResponse_FieldNumber_MotionType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PositioningDataRequest

@implementation PositioningDataRequest

@dynamic motionType;
@dynamic disability;

typedef struct PositioningDataRequest__storage_ {
  uint32_t _has_storage_[1];
  MotionType motionType;
} PositioningDataRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "motionType",
        .dataTypeSpecific.enumDescFunc = MotionType_EnumDescriptor,
        .number = PositioningDataRequest_FieldNumber_MotionType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PositioningDataRequest__storage_, motionType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "disability",
        .dataTypeSpecific.className = NULL,
        .number = PositioningDataRequest_FieldNumber_Disability,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PositioningDataRequest class]
                                     rootClass:[HeadmotionRoot class]
                                          file:HeadmotionRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PositioningDataRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PositioningDataRequest_MotionType_RawValue(PositioningDataRequest *message) {
  GPBDescriptor *descriptor = [PositioningDataRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PositioningDataRequest_FieldNumber_MotionType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPositioningDataRequest_MotionType_RawValue(PositioningDataRequest *message, int32_t value) {
  GPBDescriptor *descriptor = [PositioningDataRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PositioningDataRequest_FieldNumber_MotionType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PositioningDataResponse

@implementation PositioningDataResponse

@dynamic motionType;
@dynamic hasPosition, position;

typedef struct PositioningDataResponse__storage_ {
  uint32_t _has_storage_[1];
  MotionType motionType;
  Position *position;
} PositioningDataResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "motionType",
        .dataTypeSpecific.enumDescFunc = MotionType_EnumDescriptor,
        .number = PositioningDataResponse_FieldNumber_MotionType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PositioningDataResponse__storage_, motionType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "position",
        .dataTypeSpecific.className = GPBStringifySymbol(Position),
        .number = PositioningDataResponse_FieldNumber_Position,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PositioningDataResponse__storage_, position),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PositioningDataResponse class]
                                     rootClass:[HeadmotionRoot class]
                                          file:HeadmotionRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PositioningDataResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PositioningDataResponse_MotionType_RawValue(PositioningDataResponse *message) {
  GPBDescriptor *descriptor = [PositioningDataResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PositioningDataResponse_FieldNumber_MotionType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPositioningDataResponse_MotionType_RawValue(PositioningDataResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [PositioningDataResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PositioningDataResponse_FieldNumber_MotionType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - NewGroupRequest

@implementation NewGroupRequest

@dynamic motionType;
@dynamic name;

typedef struct NewGroupRequest__storage_ {
  uint32_t _has_storage_[1];
  MotionType motionType;
  NSString *name;
} NewGroupRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "motionType",
        .dataTypeSpecific.enumDescFunc = MotionType_EnumDescriptor,
        .number = NewGroupRequest_FieldNumber_MotionType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(NewGroupRequest__storage_, motionType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = NewGroupRequest_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(NewGroupRequest__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[NewGroupRequest class]
                                     rootClass:[HeadmotionRoot class]
                                          file:HeadmotionRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(NewGroupRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t NewGroupRequest_MotionType_RawValue(NewGroupRequest *message) {
  GPBDescriptor *descriptor = [NewGroupRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:NewGroupRequest_FieldNumber_MotionType];
  return GPBGetMessageInt32Field(message, field);
}

void SetNewGroupRequest_MotionType_RawValue(NewGroupRequest *message, int32_t value) {
  GPBDescriptor *descriptor = [NewGroupRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:NewGroupRequest_FieldNumber_MotionType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - NewGroupResponse

@implementation NewGroupResponse

@dynamic hasGroupInfo, groupInfo;

typedef struct NewGroupResponse__storage_ {
  uint32_t _has_storage_[1];
  GroupInfo *groupInfo;
} NewGroupResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "groupInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(GroupInfo),
        .number = NewGroupResponse_FieldNumber_GroupInfo,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(NewGroupResponse__storage_, groupInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[NewGroupResponse class]
                                     rootClass:[HeadmotionRoot class]
                                          file:HeadmotionRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(NewGroupResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ListGroupsRequest

@implementation ListGroupsRequest

@dynamic motionType;

typedef struct ListGroupsRequest__storage_ {
  uint32_t _has_storage_[1];
  MotionType motionType;
} ListGroupsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "motionType",
        .dataTypeSpecific.enumDescFunc = MotionType_EnumDescriptor,
        .number = ListGroupsRequest_FieldNumber_MotionType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ListGroupsRequest__storage_, motionType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ListGroupsRequest class]
                                     rootClass:[HeadmotionRoot class]
                                          file:HeadmotionRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ListGroupsRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t ListGroupsRequest_MotionType_RawValue(ListGroupsRequest *message) {
  GPBDescriptor *descriptor = [ListGroupsRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ListGroupsRequest_FieldNumber_MotionType];
  return GPBGetMessageInt32Field(message, field);
}

void SetListGroupsRequest_MotionType_RawValue(ListGroupsRequest *message, int32_t value) {
  GPBDescriptor *descriptor = [ListGroupsRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ListGroupsRequest_FieldNumber_MotionType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - ListGroupsResponse

@implementation ListGroupsResponse

@dynamic groupsInfoArray, groupsInfoArray_Count;

typedef struct ListGroupsResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *groupsInfoArray;
} ListGroupsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "groupsInfoArray",
        .dataTypeSpecific.className = GPBStringifySymbol(GroupInfo),
        .number = ListGroupsResponse_FieldNumber_GroupsInfoArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ListGroupsResponse__storage_, groupsInfoArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ListGroupsResponse class]
                                     rootClass:[HeadmotionRoot class]
                                          file:HeadmotionRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ListGroupsResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UpdateGroupRequest

@implementation UpdateGroupRequest

@dynamic id_p;
@dynamic name;

typedef struct UpdateGroupRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
  NSString *name;
} UpdateGroupRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = UpdateGroupRequest_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UpdateGroupRequest__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = UpdateGroupRequest_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UpdateGroupRequest__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UpdateGroupRequest class]
                                     rootClass:[HeadmotionRoot class]
                                          file:HeadmotionRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UpdateGroupRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UpdateGroupResponse

@implementation UpdateGroupResponse


typedef struct UpdateGroupResponse__storage_ {
  uint32_t _has_storage_[1];
} UpdateGroupResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UpdateGroupResponse class]
                                     rootClass:[HeadmotionRoot class]
                                          file:HeadmotionRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(UpdateGroupResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DeleteGroupsRequest

@implementation DeleteGroupsRequest

@dynamic groupsIdArray, groupsIdArray_Count;

typedef struct DeleteGroupsRequest__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *groupsIdArray;
} DeleteGroupsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "groupsIdArray",
        .dataTypeSpecific.className = NULL,
        .number = DeleteGroupsRequest_FieldNumber_GroupsIdArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(DeleteGroupsRequest__storage_, groupsIdArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DeleteGroupsRequest class]
                                     rootClass:[HeadmotionRoot class]
                                          file:HeadmotionRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DeleteGroupsRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DeleteGroupsResponse

@implementation DeleteGroupsResponse


typedef struct DeleteGroupsResponse__storage_ {
  uint32_t _has_storage_[1];
} DeleteGroupsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DeleteGroupsResponse class]
                                     rootClass:[HeadmotionRoot class]
                                          file:HeadmotionRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(DeleteGroupsResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ListGroupTargetsRequest

@implementation ListGroupTargetsRequest

@dynamic groupId;

typedef struct ListGroupTargetsRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *groupId;
} ListGroupTargetsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "groupId",
        .dataTypeSpecific.className = NULL,
        .number = ListGroupTargetsRequest_FieldNumber_GroupId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ListGroupTargetsRequest__storage_, groupId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ListGroupTargetsRequest class]
                                     rootClass:[HeadmotionRoot class]
                                          file:HeadmotionRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ListGroupTargetsRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ListGroupTargetsResponse

@implementation ListGroupTargetsResponse

@dynamic targetsArray, targetsArray_Count;

typedef struct ListGroupTargetsResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *targetsArray;
} ListGroupTargetsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "targetsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Target),
        .number = ListGroupTargetsResponse_FieldNumber_TargetsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ListGroupTargetsResponse__storage_, targetsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ListGroupTargetsResponse class]
                                     rootClass:[HeadmotionRoot class]
                                          file:HeadmotionRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ListGroupTargetsResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UpdateGroupTargetsRequest

@implementation UpdateGroupTargetsRequest

@dynamic groupId;
@dynamic targetsArray, targetsArray_Count;

typedef struct UpdateGroupTargetsRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *groupId;
  NSMutableArray *targetsArray;
} UpdateGroupTargetsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "groupId",
        .dataTypeSpecific.className = NULL,
        .number = UpdateGroupTargetsRequest_FieldNumber_GroupId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UpdateGroupTargetsRequest__storage_, groupId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "targetsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Target),
        .number = UpdateGroupTargetsRequest_FieldNumber_TargetsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(UpdateGroupTargetsRequest__storage_, targetsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UpdateGroupTargetsRequest class]
                                     rootClass:[HeadmotionRoot class]
                                          file:HeadmotionRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UpdateGroupTargetsRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UpdateGroupTargetsResponse

@implementation UpdateGroupTargetsResponse


typedef struct UpdateGroupTargetsResponse__storage_ {
  uint32_t _has_storage_[1];
} UpdateGroupTargetsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UpdateGroupTargetsResponse class]
                                     rootClass:[HeadmotionRoot class]
                                          file:HeadmotionRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(UpdateGroupTargetsResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
