// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: facedetect.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "Facedetect.pbobjc.h"
#import "google/api/Annotations.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - FacedetectRoot

@implementation FacedetectRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    registry = [[GPBExtensionRegistry alloc] init];
    // Merge in the imports (direct or indirect) that defined extensions.
    [registry addExtensions:[GAPIAnnotationsRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - FacedetectRoot_FileDescriptor

static GPBFileDescriptor *FacedetectRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"faceRecognition"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum Gender

GPBEnumDescriptor *Gender_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "GenderUnknown\000GenderMale\000GenderFemale\000";
    static const int32_t values[] = {
        Gender_GenderUnknown,
        Gender_GenderMale,
        Gender_GenderFemale,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(Gender)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:Gender_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL Gender_IsValidValue(int32_t value__) {
  switch (value__) {
    case Gender_GenderUnknown:
    case Gender_GenderMale:
    case Gender_GenderFemale:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - FacePosition

@implementation FacePosition

@dynamic x;
@dynamic y;

typedef struct FacePosition__storage_ {
  uint32_t _has_storage_[1];
  uint32_t x;
  uint32_t y;
} FacePosition__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "x",
        .dataTypeSpecific.className = NULL,
        .number = FacePosition_FieldNumber_X,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FacePosition__storage_, x),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "y",
        .dataTypeSpecific.className = NULL,
        .number = FacePosition_FieldNumber_Y,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(FacePosition__storage_, y),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FacePosition class]
                                     rootClass:[FacedetectRoot class]
                                          file:FacedetectRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FacePosition__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FromImageRequest

@implementation FromImageRequest

@dynamic image;
@dynamic withGender;
@dynamic withAge;
@dynamic withPosition;
@dynamic withFaceCropWidth;

typedef struct FromImageRequest__storage_ {
  uint32_t _has_storage_[1];
  NSData *image;
} FromImageRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "image",
        .dataTypeSpecific.className = NULL,
        .number = FromImageRequest_FieldNumber_Image,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FromImageRequest__storage_, image),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "withGender",
        .dataTypeSpecific.className = NULL,
        .number = FromImageRequest_FieldNumber_WithGender,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "withAge",
        .dataTypeSpecific.className = NULL,
        .number = FromImageRequest_FieldNumber_WithAge,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "withPosition",
        .dataTypeSpecific.className = NULL,
        .number = FromImageRequest_FieldNumber_WithPosition,
        .hasIndex = 5,
        .offset = 6,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "withFaceCropWidth",
        .dataTypeSpecific.className = NULL,
        .number = FromImageRequest_FieldNumber_WithFaceCropWidth,
        .hasIndex = 7,
        .offset = 8,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FromImageRequest class]
                                     rootClass:[FacedetectRoot class]
                                          file:FacedetectRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FromImageRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FromImageResponse

@implementation FromImageResponse

@dynamic faceCropsArray, faceCropsArray_Count;
@dynamic gendersArray, gendersArray_Count;
@dynamic agesArray, agesArray_Count;
@dynamic positionsArray, positionsArray_Count;
@dynamic faceCropWidthsArray, faceCropWidthsArray_Count;

typedef struct FromImageResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *faceCropsArray;
  GPBEnumArray *gendersArray;
  GPBInt32Array *agesArray;
  NSMutableArray *positionsArray;
  GPBUInt32Array *faceCropWidthsArray;
} FromImageResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "faceCropsArray",
        .dataTypeSpecific.className = NULL,
        .number = FromImageResponse_FieldNumber_FaceCropsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(FromImageResponse__storage_, faceCropsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "gendersArray",
        .dataTypeSpecific.enumDescFunc = Gender_EnumDescriptor,
        .number = FromImageResponse_FieldNumber_GendersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(FromImageResponse__storage_, gendersArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "agesArray",
        .dataTypeSpecific.className = NULL,
        .number = FromImageResponse_FieldNumber_AgesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(FromImageResponse__storage_, agesArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "positionsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(FacePosition),
        .number = FromImageResponse_FieldNumber_PositionsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(FromImageResponse__storage_, positionsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "faceCropWidthsArray",
        .dataTypeSpecific.className = NULL,
        .number = FromImageResponse_FieldNumber_FaceCropWidthsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(FromImageResponse__storage_, faceCropWidthsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FromImageResponse class]
                                     rootClass:[FacedetectRoot class]
                                          file:FacedetectRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FromImageResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - OnFaceDetectRequest

@implementation OnFaceDetectRequest

@dynamic intervalMillisecond;
@dynamic withGender;
@dynamic withAge;
@dynamic withPosition;
@dynamic withFaceCropWidth;

typedef struct OnFaceDetectRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t intervalMillisecond;
} OnFaceDetectRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "intervalMillisecond",
        .dataTypeSpecific.className = NULL,
        .number = OnFaceDetectRequest_FieldNumber_IntervalMillisecond,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OnFaceDetectRequest__storage_, intervalMillisecond),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "withGender",
        .dataTypeSpecific.className = NULL,
        .number = OnFaceDetectRequest_FieldNumber_WithGender,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "withAge",
        .dataTypeSpecific.className = NULL,
        .number = OnFaceDetectRequest_FieldNumber_WithAge,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "withPosition",
        .dataTypeSpecific.className = NULL,
        .number = OnFaceDetectRequest_FieldNumber_WithPosition,
        .hasIndex = 5,
        .offset = 6,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "withFaceCropWidth",
        .dataTypeSpecific.className = NULL,
        .number = OnFaceDetectRequest_FieldNumber_WithFaceCropWidth,
        .hasIndex = 7,
        .offset = 8,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OnFaceDetectRequest class]
                                     rootClass:[FacedetectRoot class]
                                          file:FacedetectRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OnFaceDetectRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - OnFaceDetectResponse

@implementation OnFaceDetectResponse

@dynamic faceCropsArray, faceCropsArray_Count;
@dynamic gendersArray, gendersArray_Count;
@dynamic agesArray, agesArray_Count;
@dynamic positionsArray, positionsArray_Count;
@dynamic faceCropWidthsArray, faceCropWidthsArray_Count;

typedef struct OnFaceDetectResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *faceCropsArray;
  GPBEnumArray *gendersArray;
  GPBInt32Array *agesArray;
  NSMutableArray *positionsArray;
  GPBUInt32Array *faceCropWidthsArray;
} OnFaceDetectResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "faceCropsArray",
        .dataTypeSpecific.className = NULL,
        .number = OnFaceDetectResponse_FieldNumber_FaceCropsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(OnFaceDetectResponse__storage_, faceCropsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "gendersArray",
        .dataTypeSpecific.enumDescFunc = Gender_EnumDescriptor,
        .number = OnFaceDetectResponse_FieldNumber_GendersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(OnFaceDetectResponse__storage_, gendersArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "agesArray",
        .dataTypeSpecific.className = NULL,
        .number = OnFaceDetectResponse_FieldNumber_AgesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(OnFaceDetectResponse__storage_, agesArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "positionsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(FacePosition),
        .number = OnFaceDetectResponse_FieldNumber_PositionsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(OnFaceDetectResponse__storage_, positionsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "faceCropWidthsArray",
        .dataTypeSpecific.className = NULL,
        .number = OnFaceDetectResponse_FieldNumber_FaceCropWidthsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(OnFaceDetectResponse__storage_, faceCropWidthsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OnFaceDetectResponse class]
                                     rootClass:[FacedetectRoot class]
                                          file:FacedetectRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OnFaceDetectResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - OnFaceSetFaceDetectRequest

@implementation OnFaceSetFaceDetectRequest

@dynamic faceSetId;
@dynamic withFaceCrop;
@dynamic withGender;
@dynamic withAge;
@dynamic withPosition;
@dynamic intervalMillisecond;
@dynamic confidenceMin;
@dynamic withFaceCropWidth;

typedef struct OnFaceSetFaceDetectRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t intervalMillisecond;
  float confidenceMin;
  NSString *faceSetId;
} OnFaceSetFaceDetectRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "faceSetId",
        .dataTypeSpecific.className = NULL,
        .number = OnFaceSetFaceDetectRequest_FieldNumber_FaceSetId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OnFaceSetFaceDetectRequest__storage_, faceSetId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "withFaceCrop",
        .dataTypeSpecific.className = NULL,
        .number = OnFaceSetFaceDetectRequest_FieldNumber_WithFaceCrop,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "withGender",
        .dataTypeSpecific.className = NULL,
        .number = OnFaceSetFaceDetectRequest_FieldNumber_WithGender,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "withAge",
        .dataTypeSpecific.className = NULL,
        .number = OnFaceSetFaceDetectRequest_FieldNumber_WithAge,
        .hasIndex = 5,
        .offset = 6,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "withPosition",
        .dataTypeSpecific.className = NULL,
        .number = OnFaceSetFaceDetectRequest_FieldNumber_WithPosition,
        .hasIndex = 7,
        .offset = 8,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "intervalMillisecond",
        .dataTypeSpecific.className = NULL,
        .number = OnFaceSetFaceDetectRequest_FieldNumber_IntervalMillisecond,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(OnFaceSetFaceDetectRequest__storage_, intervalMillisecond),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "confidenceMin",
        .dataTypeSpecific.className = NULL,
        .number = OnFaceSetFaceDetectRequest_FieldNumber_ConfidenceMin,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(OnFaceSetFaceDetectRequest__storage_, confidenceMin),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "withFaceCropWidth",
        .dataTypeSpecific.className = NULL,
        .number = OnFaceSetFaceDetectRequest_FieldNumber_WithFaceCropWidth,
        .hasIndex = 11,
        .offset = 12,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OnFaceSetFaceDetectRequest class]
                                     rootClass:[FacedetectRoot class]
                                          file:FacedetectRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OnFaceSetFaceDetectRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - OnFaceSetFaceDetectResponse

@implementation OnFaceSetFaceDetectResponse

@dynamic confidencesArray, confidencesArray_Count;
@dynamic faceTokensArray, faceTokensArray_Count;
@dynamic faceCropsArray, faceCropsArray_Count;
@dynamic gendersArray, gendersArray_Count;
@dynamic agesArray, agesArray_Count;
@dynamic positionsArray, positionsArray_Count;
@dynamic faceCropWidthsArray, faceCropWidthsArray_Count;

typedef struct OnFaceSetFaceDetectResponse__storage_ {
  uint32_t _has_storage_[1];
  GPBFloatArray *confidencesArray;
  NSMutableArray *faceTokensArray;
  NSMutableArray *faceCropsArray;
  GPBEnumArray *gendersArray;
  GPBInt32Array *agesArray;
  NSMutableArray *positionsArray;
  GPBUInt32Array *faceCropWidthsArray;
} OnFaceSetFaceDetectResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "confidencesArray",
        .dataTypeSpecific.className = NULL,
        .number = OnFaceSetFaceDetectResponse_FieldNumber_ConfidencesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(OnFaceSetFaceDetectResponse__storage_, confidencesArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "faceTokensArray",
        .dataTypeSpecific.className = NULL,
        .number = OnFaceSetFaceDetectResponse_FieldNumber_FaceTokensArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(OnFaceSetFaceDetectResponse__storage_, faceTokensArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "faceCropsArray",
        .dataTypeSpecific.className = NULL,
        .number = OnFaceSetFaceDetectResponse_FieldNumber_FaceCropsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(OnFaceSetFaceDetectResponse__storage_, faceCropsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "gendersArray",
        .dataTypeSpecific.enumDescFunc = Gender_EnumDescriptor,
        .number = OnFaceSetFaceDetectResponse_FieldNumber_GendersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(OnFaceSetFaceDetectResponse__storage_, gendersArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "agesArray",
        .dataTypeSpecific.className = NULL,
        .number = OnFaceSetFaceDetectResponse_FieldNumber_AgesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(OnFaceSetFaceDetectResponse__storage_, agesArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "positionsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(FacePosition),
        .number = OnFaceSetFaceDetectResponse_FieldNumber_PositionsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(OnFaceSetFaceDetectResponse__storage_, positionsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "faceCropWidthsArray",
        .dataTypeSpecific.className = NULL,
        .number = OnFaceSetFaceDetectResponse_FieldNumber_FaceCropWidthsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(OnFaceSetFaceDetectResponse__storage_, faceCropWidthsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OnFaceSetFaceDetectResponse class]
                                     rootClass:[FacedetectRoot class]
                                          file:FacedetectRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OnFaceSetFaceDetectResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
