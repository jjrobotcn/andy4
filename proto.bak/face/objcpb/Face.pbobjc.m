// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: face.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "Face.pbobjc.h"
#import "google/api/Annotations.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - FaceRoot

@implementation FaceRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    registry = [[GPBExtensionRegistry alloc] init];
    // Merge in the imports (direct or indirect) that defined extensions.
    [registry addExtensions:[GAPIAnnotationsRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - FaceRoot_FileDescriptor

static GPBFileDescriptor *FaceRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"faceRecognition"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - CompareRequest

@implementation CompareRequest

@dynamic faceImg1;
@dynamic faceImg2;

typedef struct CompareRequest__storage_ {
  uint32_t _has_storage_[1];
  NSData *faceImg1;
  NSData *faceImg2;
} CompareRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "faceImg1",
        .dataTypeSpecific.className = NULL,
        .number = CompareRequest_FieldNumber_FaceImg1,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CompareRequest__storage_, faceImg1),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "faceImg2",
        .dataTypeSpecific.className = NULL,
        .number = CompareRequest_FieldNumber_FaceImg2,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CompareRequest__storage_, faceImg2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CompareRequest class]
                                     rootClass:[FaceRoot class]
                                          file:FaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CompareRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CompareResponse

@implementation CompareResponse

@dynamic confidence;

typedef struct CompareResponse__storage_ {
  uint32_t _has_storage_[1];
  float confidence;
} CompareResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "confidence",
        .dataTypeSpecific.className = NULL,
        .number = CompareResponse_FieldNumber_Confidence,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CompareResponse__storage_, confidence),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CompareResponse class]
                                     rootClass:[FaceRoot class]
                                          file:FaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CompareResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SearchRequest

@implementation SearchRequest

@dynamic faceSetId;
@dynamic faceImg;

typedef struct SearchRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *faceSetId;
  NSData *faceImg;
} SearchRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "faceSetId",
        .dataTypeSpecific.className = NULL,
        .number = SearchRequest_FieldNumber_FaceSetId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SearchRequest__storage_, faceSetId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "faceImg",
        .dataTypeSpecific.className = NULL,
        .number = SearchRequest_FieldNumber_FaceImg,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SearchRequest__storage_, faceImg),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SearchRequest class]
                                     rootClass:[FaceRoot class]
                                          file:FaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SearchRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SearchResponse

@implementation SearchResponse

@dynamic confidence;
@dynamic faceToken;

typedef struct SearchResponse__storage_ {
  uint32_t _has_storage_[1];
  float confidence;
  NSString *faceToken;
} SearchResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "confidence",
        .dataTypeSpecific.className = NULL,
        .number = SearchResponse_FieldNumber_Confidence,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SearchResponse__storage_, confidence),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "faceToken",
        .dataTypeSpecific.className = NULL,
        .number = SearchResponse_FieldNumber_FaceToken,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SearchResponse__storage_, faceToken),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SearchResponse class]
                                     rootClass:[FaceRoot class]
                                          file:FaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SearchResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
