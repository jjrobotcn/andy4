// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: faceset.proto

#include "faceset.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_faceset_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AddFaceRequest_DetailEntry_DoNotUse_faceset_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_faceset_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FaceDetail_faceset_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_faceset_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FaceDetail_DetailEntry_DoNotUse_faceset_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_faceset_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FaceSet_faceset_2eproto;
namespace faceRecognition {
class FaceSetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FaceSet> _instance;
} _FaceSet_default_instance_;
class FaceDetail_DetailEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FaceDetail_DetailEntry_DoNotUse> _instance;
} _FaceDetail_DetailEntry_DoNotUse_default_instance_;
class FaceDetailDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FaceDetail> _instance;
} _FaceDetail_default_instance_;
class NewFaceSetRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NewFaceSetRequest> _instance;
} _NewFaceSetRequest_default_instance_;
class NewFaceSetResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NewFaceSetResponse> _instance;
} _NewFaceSetResponse_default_instance_;
class DeleteFaceSetRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteFaceSetRequest> _instance;
} _DeleteFaceSetRequest_default_instance_;
class DeleteFaceSetResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteFaceSetResponse> _instance;
} _DeleteFaceSetResponse_default_instance_;
class UpdateFaceSetRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateFaceSetRequest> _instance;
} _UpdateFaceSetRequest_default_instance_;
class UpdateFaceSetResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateFaceSetResponse> _instance;
} _UpdateFaceSetResponse_default_instance_;
class ListFaceSetsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListFaceSetsRequest> _instance;
} _ListFaceSetsRequest_default_instance_;
class ListFaceSetsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListFaceSetsResponse> _instance;
} _ListFaceSetsResponse_default_instance_;
class AddFaceRequest_DetailEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddFaceRequest_DetailEntry_DoNotUse> _instance;
} _AddFaceRequest_DetailEntry_DoNotUse_default_instance_;
class AddFaceRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddFaceRequest> _instance;
} _AddFaceRequest_default_instance_;
class AddFaceResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddFaceResponse> _instance;
} _AddFaceResponse_default_instance_;
class RemoveFaceRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RemoveFaceRequest> _instance;
} _RemoveFaceRequest_default_instance_;
class RemoveFaceResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RemoveFaceResponse> _instance;
} _RemoveFaceResponse_default_instance_;
class FaceDetailRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FaceDetailRequest> _instance;
} _FaceDetailRequest_default_instance_;
class FaceDetailResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FaceDetailResponse> _instance;
} _FaceDetailResponse_default_instance_;
class ListFaceDetailsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListFaceDetailsRequest> _instance;
} _ListFaceDetailsRequest_default_instance_;
class ListFaceDetailsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListFaceDetailsResponse> _instance;
} _ListFaceDetailsResponse_default_instance_;
}  // namespace faceRecognition
static void InitDefaultsscc_info_AddFaceRequest_faceset_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::faceRecognition::_AddFaceRequest_default_instance_;
    new (ptr) ::faceRecognition::AddFaceRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::faceRecognition::AddFaceRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AddFaceRequest_faceset_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_AddFaceRequest_faceset_2eproto}, {
      &scc_info_AddFaceRequest_DetailEntry_DoNotUse_faceset_2eproto.base,}};

static void InitDefaultsscc_info_AddFaceRequest_DetailEntry_DoNotUse_faceset_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::faceRecognition::_AddFaceRequest_DetailEntry_DoNotUse_default_instance_;
    new (ptr) ::faceRecognition::AddFaceRequest_DetailEntry_DoNotUse();
  }
  ::faceRecognition::AddFaceRequest_DetailEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AddFaceRequest_DetailEntry_DoNotUse_faceset_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AddFaceRequest_DetailEntry_DoNotUse_faceset_2eproto}, {}};

static void InitDefaultsscc_info_AddFaceResponse_faceset_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::faceRecognition::_AddFaceResponse_default_instance_;
    new (ptr) ::faceRecognition::AddFaceResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::faceRecognition::AddFaceResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AddFaceResponse_faceset_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AddFaceResponse_faceset_2eproto}, {}};

static void InitDefaultsscc_info_DeleteFaceSetRequest_faceset_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::faceRecognition::_DeleteFaceSetRequest_default_instance_;
    new (ptr) ::faceRecognition::DeleteFaceSetRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::faceRecognition::DeleteFaceSetRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteFaceSetRequest_faceset_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DeleteFaceSetRequest_faceset_2eproto}, {}};

static void InitDefaultsscc_info_DeleteFaceSetResponse_faceset_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::faceRecognition::_DeleteFaceSetResponse_default_instance_;
    new (ptr) ::faceRecognition::DeleteFaceSetResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::faceRecognition::DeleteFaceSetResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteFaceSetResponse_faceset_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DeleteFaceSetResponse_faceset_2eproto}, {}};

static void InitDefaultsscc_info_FaceDetail_faceset_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::faceRecognition::_FaceDetail_default_instance_;
    new (ptr) ::faceRecognition::FaceDetail();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::faceRecognition::FaceDetail::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FaceDetail_faceset_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_FaceDetail_faceset_2eproto}, {
      &scc_info_FaceDetail_DetailEntry_DoNotUse_faceset_2eproto.base,}};

static void InitDefaultsscc_info_FaceDetail_DetailEntry_DoNotUse_faceset_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::faceRecognition::_FaceDetail_DetailEntry_DoNotUse_default_instance_;
    new (ptr) ::faceRecognition::FaceDetail_DetailEntry_DoNotUse();
  }
  ::faceRecognition::FaceDetail_DetailEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FaceDetail_DetailEntry_DoNotUse_faceset_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_FaceDetail_DetailEntry_DoNotUse_faceset_2eproto}, {}};

static void InitDefaultsscc_info_FaceDetailRequest_faceset_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::faceRecognition::_FaceDetailRequest_default_instance_;
    new (ptr) ::faceRecognition::FaceDetailRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::faceRecognition::FaceDetailRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FaceDetailRequest_faceset_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_FaceDetailRequest_faceset_2eproto}, {}};

static void InitDefaultsscc_info_FaceDetailResponse_faceset_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::faceRecognition::_FaceDetailResponse_default_instance_;
    new (ptr) ::faceRecognition::FaceDetailResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::faceRecognition::FaceDetailResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FaceDetailResponse_faceset_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_FaceDetailResponse_faceset_2eproto}, {
      &scc_info_FaceDetail_faceset_2eproto.base,}};

static void InitDefaultsscc_info_FaceSet_faceset_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::faceRecognition::_FaceSet_default_instance_;
    new (ptr) ::faceRecognition::FaceSet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::faceRecognition::FaceSet::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FaceSet_faceset_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_FaceSet_faceset_2eproto}, {}};

static void InitDefaultsscc_info_ListFaceDetailsRequest_faceset_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::faceRecognition::_ListFaceDetailsRequest_default_instance_;
    new (ptr) ::faceRecognition::ListFaceDetailsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::faceRecognition::ListFaceDetailsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListFaceDetailsRequest_faceset_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ListFaceDetailsRequest_faceset_2eproto}, {}};

static void InitDefaultsscc_info_ListFaceDetailsResponse_faceset_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::faceRecognition::_ListFaceDetailsResponse_default_instance_;
    new (ptr) ::faceRecognition::ListFaceDetailsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::faceRecognition::ListFaceDetailsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ListFaceDetailsResponse_faceset_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_ListFaceDetailsResponse_faceset_2eproto}, {
      &scc_info_FaceSet_faceset_2eproto.base,
      &scc_info_FaceDetail_faceset_2eproto.base,}};

static void InitDefaultsscc_info_ListFaceSetsRequest_faceset_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::faceRecognition::_ListFaceSetsRequest_default_instance_;
    new (ptr) ::faceRecognition::ListFaceSetsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::faceRecognition::ListFaceSetsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListFaceSetsRequest_faceset_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ListFaceSetsRequest_faceset_2eproto}, {}};

static void InitDefaultsscc_info_ListFaceSetsResponse_faceset_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::faceRecognition::_ListFaceSetsResponse_default_instance_;
    new (ptr) ::faceRecognition::ListFaceSetsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::faceRecognition::ListFaceSetsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListFaceSetsResponse_faceset_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ListFaceSetsResponse_faceset_2eproto}, {
      &scc_info_FaceSet_faceset_2eproto.base,}};

static void InitDefaultsscc_info_NewFaceSetRequest_faceset_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::faceRecognition::_NewFaceSetRequest_default_instance_;
    new (ptr) ::faceRecognition::NewFaceSetRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::faceRecognition::NewFaceSetRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NewFaceSetRequest_faceset_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_NewFaceSetRequest_faceset_2eproto}, {}};

static void InitDefaultsscc_info_NewFaceSetResponse_faceset_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::faceRecognition::_NewFaceSetResponse_default_instance_;
    new (ptr) ::faceRecognition::NewFaceSetResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::faceRecognition::NewFaceSetResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NewFaceSetResponse_faceset_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_NewFaceSetResponse_faceset_2eproto}, {
      &scc_info_FaceSet_faceset_2eproto.base,}};

static void InitDefaultsscc_info_RemoveFaceRequest_faceset_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::faceRecognition::_RemoveFaceRequest_default_instance_;
    new (ptr) ::faceRecognition::RemoveFaceRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::faceRecognition::RemoveFaceRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RemoveFaceRequest_faceset_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RemoveFaceRequest_faceset_2eproto}, {}};

static void InitDefaultsscc_info_RemoveFaceResponse_faceset_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::faceRecognition::_RemoveFaceResponse_default_instance_;
    new (ptr) ::faceRecognition::RemoveFaceResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::faceRecognition::RemoveFaceResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RemoveFaceResponse_faceset_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RemoveFaceResponse_faceset_2eproto}, {}};

static void InitDefaultsscc_info_UpdateFaceSetRequest_faceset_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::faceRecognition::_UpdateFaceSetRequest_default_instance_;
    new (ptr) ::faceRecognition::UpdateFaceSetRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::faceRecognition::UpdateFaceSetRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UpdateFaceSetRequest_faceset_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_UpdateFaceSetRequest_faceset_2eproto}, {
      &scc_info_FaceSet_faceset_2eproto.base,}};

static void InitDefaultsscc_info_UpdateFaceSetResponse_faceset_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::faceRecognition::_UpdateFaceSetResponse_default_instance_;
    new (ptr) ::faceRecognition::UpdateFaceSetResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::faceRecognition::UpdateFaceSetResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UpdateFaceSetResponse_faceset_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_UpdateFaceSetResponse_faceset_2eproto}, {
      &scc_info_FaceSet_faceset_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_faceset_2eproto[20];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_faceset_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_faceset_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_faceset_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::faceRecognition::FaceSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::faceRecognition::FaceSet, id_),
  PROTOBUF_FIELD_OFFSET(::faceRecognition::FaceSet, name_),
  PROTOBUF_FIELD_OFFSET(::faceRecognition::FaceDetail_DetailEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::faceRecognition::FaceDetail_DetailEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::faceRecognition::FaceDetail_DetailEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::faceRecognition::FaceDetail_DetailEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::faceRecognition::FaceDetail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::faceRecognition::FaceDetail, face_token_),
  PROTOBUF_FIELD_OFFSET(::faceRecognition::FaceDetail, face_img_),
  PROTOBUF_FIELD_OFFSET(::faceRecognition::FaceDetail, detail_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::faceRecognition::NewFaceSetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::faceRecognition::NewFaceSetRequest, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::faceRecognition::NewFaceSetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::faceRecognition::NewFaceSetResponse, face_set_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::faceRecognition::DeleteFaceSetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::faceRecognition::DeleteFaceSetRequest, face_set_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::faceRecognition::DeleteFaceSetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::faceRecognition::UpdateFaceSetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::faceRecognition::UpdateFaceSetRequest, face_set_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::faceRecognition::UpdateFaceSetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::faceRecognition::UpdateFaceSetResponse, face_set_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::faceRecognition::ListFaceSetsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::faceRecognition::ListFaceSetsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::faceRecognition::ListFaceSetsResponse, face_sets_),
  PROTOBUF_FIELD_OFFSET(::faceRecognition::AddFaceRequest_DetailEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::faceRecognition::AddFaceRequest_DetailEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::faceRecognition::AddFaceRequest_DetailEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::faceRecognition::AddFaceRequest_DetailEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::faceRecognition::AddFaceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::faceRecognition::AddFaceRequest, face_set_id_),
  PROTOBUF_FIELD_OFFSET(::faceRecognition::AddFaceRequest, face_img_),
  PROTOBUF_FIELD_OFFSET(::faceRecognition::AddFaceRequest, detail_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::faceRecognition::AddFaceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::faceRecognition::AddFaceResponse, face_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::faceRecognition::RemoveFaceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::faceRecognition::RemoveFaceRequest, face_set_id_),
  PROTOBUF_FIELD_OFFSET(::faceRecognition::RemoveFaceRequest, face_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::faceRecognition::RemoveFaceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::faceRecognition::FaceDetailRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::faceRecognition::FaceDetailRequest, face_set_id_),
  PROTOBUF_FIELD_OFFSET(::faceRecognition::FaceDetailRequest, face_token_),
  PROTOBUF_FIELD_OFFSET(::faceRecognition::FaceDetailRequest, with_face_img_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::faceRecognition::FaceDetailResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::faceRecognition::FaceDetailResponse, face_detail_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::faceRecognition::ListFaceDetailsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::faceRecognition::ListFaceDetailsRequest, face_set_id_),
  PROTOBUF_FIELD_OFFSET(::faceRecognition::ListFaceDetailsRequest, limit_),
  PROTOBUF_FIELD_OFFSET(::faceRecognition::ListFaceDetailsRequest, offset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::faceRecognition::ListFaceDetailsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::faceRecognition::ListFaceDetailsResponse, face_set_),
  PROTOBUF_FIELD_OFFSET(::faceRecognition::ListFaceDetailsResponse, face_details_),
  PROTOBUF_FIELD_OFFSET(::faceRecognition::ListFaceDetailsResponse, total_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::faceRecognition::FaceSet)},
  { 7, 14, sizeof(::faceRecognition::FaceDetail_DetailEntry_DoNotUse)},
  { 16, -1, sizeof(::faceRecognition::FaceDetail)},
  { 24, -1, sizeof(::faceRecognition::NewFaceSetRequest)},
  { 30, -1, sizeof(::faceRecognition::NewFaceSetResponse)},
  { 36, -1, sizeof(::faceRecognition::DeleteFaceSetRequest)},
  { 42, -1, sizeof(::faceRecognition::DeleteFaceSetResponse)},
  { 47, -1, sizeof(::faceRecognition::UpdateFaceSetRequest)},
  { 53, -1, sizeof(::faceRecognition::UpdateFaceSetResponse)},
  { 59, -1, sizeof(::faceRecognition::ListFaceSetsRequest)},
  { 64, -1, sizeof(::faceRecognition::ListFaceSetsResponse)},
  { 70, 77, sizeof(::faceRecognition::AddFaceRequest_DetailEntry_DoNotUse)},
  { 79, -1, sizeof(::faceRecognition::AddFaceRequest)},
  { 87, -1, sizeof(::faceRecognition::AddFaceResponse)},
  { 93, -1, sizeof(::faceRecognition::RemoveFaceRequest)},
  { 100, -1, sizeof(::faceRecognition::RemoveFaceResponse)},
  { 105, -1, sizeof(::faceRecognition::FaceDetailRequest)},
  { 113, -1, sizeof(::faceRecognition::FaceDetailResponse)},
  { 119, -1, sizeof(::faceRecognition::ListFaceDetailsRequest)},
  { 127, -1, sizeof(::faceRecognition::ListFaceDetailsResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::faceRecognition::_FaceSet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::faceRecognition::_FaceDetail_DetailEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::faceRecognition::_FaceDetail_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::faceRecognition::_NewFaceSetRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::faceRecognition::_NewFaceSetResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::faceRecognition::_DeleteFaceSetRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::faceRecognition::_DeleteFaceSetResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::faceRecognition::_UpdateFaceSetRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::faceRecognition::_UpdateFaceSetResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::faceRecognition::_ListFaceSetsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::faceRecognition::_ListFaceSetsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::faceRecognition::_AddFaceRequest_DetailEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::faceRecognition::_AddFaceRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::faceRecognition::_AddFaceResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::faceRecognition::_RemoveFaceRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::faceRecognition::_RemoveFaceResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::faceRecognition::_FaceDetailRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::faceRecognition::_FaceDetailResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::faceRecognition::_ListFaceDetailsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::faceRecognition::_ListFaceDetailsResponse_default_instance_),
};

const char descriptor_table_protodef_faceset_2eproto[] =
  "\n\rfaceset.proto\022\017faceRecognition\032\034google"
  "/api/annotations.proto\"#\n\007FaceSet\022\n\n\002id\030"
  "\001 \001(\t\022\014\n\004name\030\002 \001(\t\"\232\001\n\nFaceDetail\022\022\n\nfa"
  "ce_token\030\001 \001(\t\022\020\n\010face_img\030\002 \001(\014\0227\n\006deta"
  "il\030\003 \003(\0132\'.faceRecognition.FaceDetail.De"
  "tailEntry\032-\n\013DetailEntry\022\013\n\003key\030\001 \001(\t\022\r\n"
  "\005value\030\002 \001(\t:\0028\001\"!\n\021NewFaceSetRequest\022\014\n"
  "\004name\030\001 \001(\t\"@\n\022NewFaceSetResponse\022*\n\010fac"
  "e_set\030\001 \001(\0132\030.faceRecognition.FaceSet\"+\n"
  "\024DeleteFaceSetRequest\022\023\n\013face_set_id\030\001 \001"
  "(\t\"\027\n\025DeleteFaceSetResponse\"B\n\024UpdateFac"
  "eSetRequest\022*\n\010face_set\030\001 \001(\0132\030.faceReco"
  "gnition.FaceSet\"C\n\025UpdateFaceSetResponse"
  "\022*\n\010face_set\030\001 \001(\0132\030.faceRecognition.Fac"
  "eSet\"\025\n\023ListFaceSetsRequest\"C\n\024ListFaceS"
  "etsResponse\022+\n\tface_sets\030\001 \003(\0132\030.faceRec"
  "ognition.FaceSet\"\243\001\n\016AddFaceRequest\022\023\n\013f"
  "ace_set_id\030\001 \001(\t\022\020\n\010face_img\030\002 \001(\014\022;\n\006de"
  "tail\030\003 \003(\0132+.faceRecognition.AddFaceRequ"
  "est.DetailEntry\032-\n\013DetailEntry\022\013\n\003key\030\001 "
  "\001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"%\n\017AddFaceRespons"
  "e\022\022\n\nface_token\030\001 \001(\t\"<\n\021RemoveFaceReque"
  "st\022\023\n\013face_set_id\030\001 \001(\t\022\022\n\nface_token\030\002 "
  "\001(\t\"\024\n\022RemoveFaceResponse\"S\n\021FaceDetailR"
  "equest\022\023\n\013face_set_id\030\001 \001(\t\022\022\n\nface_toke"
  "n\030\002 \001(\t\022\025\n\rwith_face_img\030\003 \001(\010\"F\n\022FaceDe"
  "tailResponse\0220\n\013face_detail\030\001 \001(\0132\033.face"
  "Recognition.FaceDetail\"L\n\026ListFaceDetail"
  "sRequest\022\023\n\013face_set_id\030\001 \001(\t\022\r\n\005limit\030\002"
  " \001(\r\022\016\n\006offset\030\003 \001(\r\"\207\001\n\027ListFaceDetails"
  "Response\022*\n\010face_set\030\001 \001(\0132\030.faceRecogni"
  "tion.FaceSet\0221\n\014face_details\030\002 \003(\0132\033.fac"
  "eRecognition.FaceDetail\022\r\n\005total\030\003 \001(\r2\354"
  "\010\n\016FaceSetService\022\204\001\n\nNewFaceSet\022\".faceR"
  "ecognition.NewFaceSetRequest\032#.faceRecog"
  "nition.NewFaceSetResponse\"-\202\323\344\223\002\'\"\"/api/"
  "v2/face/face-set/new_face_set:\001*\022\220\001\n\rDel"
  "eteFaceSet\022%.faceRecognition.DeleteFaceS"
  "etRequest\032&.faceRecognition.DeleteFaceSe"
  "tResponse\"0\202\323\344\223\002*\"%/api/v2/face/face-set"
  "/delete_face_set:\001*\022\220\001\n\rUpdateFaceSet\022%."
  "faceRecognition.UpdateFaceSetRequest\032&.f"
  "aceRecognition.UpdateFaceSetResponse\"0\202\323"
  "\344\223\002*\"%/api/v2/face/face-set/update_face_"
  "set:\001*\022\214\001\n\014ListFaceSets\022$.faceRecognitio"
  "n.ListFaceSetsRequest\032%.faceRecognition."
  "ListFaceSetsResponse\"/\202\323\344\223\002)\"$/api/v2/fa"
  "ce/face-set/list_face_sets:\001*\022w\n\007AddFace"
  "\022\037.faceRecognition.AddFaceRequest\032 .face"
  "Recognition.AddFaceResponse\")\202\323\344\223\002#\"\036/ap"
  "i/v2/face/face-set/add_face:\001*\022\203\001\n\nRemov"
  "eFace\022\".faceRecognition.RemoveFaceReques"
  "t\032#.faceRecognition.RemoveFaceResponse\","
  "\202\323\344\223\002&\"!/api/v2/face/face-set/remove_fac"
  "e:\001*\022\203\001\n\nFaceDetail\022\".faceRecognition.Fa"
  "ceDetailRequest\032#.faceRecognition.FaceDe"
  "tailResponse\",\202\323\344\223\002&\"!/api/v2/face/face-"
  "set/face_detail:\001*\022\230\001\n\017ListFaceDetails\022\'"
  ".faceRecognition.ListFaceDetailsRequest\032"
  "(.faceRecognition.ListFaceDetailsRespons"
  "e\"2\202\323\344\223\002,\"\'/api/v2/face/face-set/list_fa"
  "ce_details:\001*B\013B\tFaceSetPbb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_faceset_2eproto_deps[1] = {
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_faceset_2eproto_sccs[20] = {
  &scc_info_AddFaceRequest_faceset_2eproto.base,
  &scc_info_AddFaceRequest_DetailEntry_DoNotUse_faceset_2eproto.base,
  &scc_info_AddFaceResponse_faceset_2eproto.base,
  &scc_info_DeleteFaceSetRequest_faceset_2eproto.base,
  &scc_info_DeleteFaceSetResponse_faceset_2eproto.base,
  &scc_info_FaceDetail_faceset_2eproto.base,
  &scc_info_FaceDetail_DetailEntry_DoNotUse_faceset_2eproto.base,
  &scc_info_FaceDetailRequest_faceset_2eproto.base,
  &scc_info_FaceDetailResponse_faceset_2eproto.base,
  &scc_info_FaceSet_faceset_2eproto.base,
  &scc_info_ListFaceDetailsRequest_faceset_2eproto.base,
  &scc_info_ListFaceDetailsResponse_faceset_2eproto.base,
  &scc_info_ListFaceSetsRequest_faceset_2eproto.base,
  &scc_info_ListFaceSetsResponse_faceset_2eproto.base,
  &scc_info_NewFaceSetRequest_faceset_2eproto.base,
  &scc_info_NewFaceSetResponse_faceset_2eproto.base,
  &scc_info_RemoveFaceRequest_faceset_2eproto.base,
  &scc_info_RemoveFaceResponse_faceset_2eproto.base,
  &scc_info_UpdateFaceSetRequest_faceset_2eproto.base,
  &scc_info_UpdateFaceSetResponse_faceset_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_faceset_2eproto_once;
static bool descriptor_table_faceset_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_faceset_2eproto = {
  &descriptor_table_faceset_2eproto_initialized, descriptor_table_protodef_faceset_2eproto, "faceset.proto", 2474,
  &descriptor_table_faceset_2eproto_once, descriptor_table_faceset_2eproto_sccs, descriptor_table_faceset_2eproto_deps, 20, 1,
  schemas, file_default_instances, TableStruct_faceset_2eproto::offsets,
  file_level_metadata_faceset_2eproto, 20, file_level_enum_descriptors_faceset_2eproto, file_level_service_descriptors_faceset_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_faceset_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_faceset_2eproto), true);
namespace faceRecognition {

// ===================================================================

void FaceSet::InitAsDefaultInstance() {
}
class FaceSet::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FaceSet::kIdFieldNumber;
const int FaceSet::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FaceSet::FaceSet()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:faceRecognition.FaceSet)
}
FaceSet::FaceSet(const FaceSet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:faceRecognition.FaceSet)
}

void FaceSet::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FaceSet_faceset_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

FaceSet::~FaceSet() {
  // @@protoc_insertion_point(destructor:faceRecognition.FaceSet)
  SharedDtor();
}

void FaceSet::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FaceSet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FaceSet& FaceSet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FaceSet_faceset_2eproto.base);
  return *internal_default_instance();
}


void FaceSet::Clear() {
// @@protoc_insertion_point(message_clear_start:faceRecognition.FaceSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FaceSet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_id(), ptr, ctx, "faceRecognition.FaceSet.id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "faceRecognition.FaceSet.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FaceSet::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:faceRecognition.FaceSet)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "faceRecognition.FaceSet.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "faceRecognition.FaceSet.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:faceRecognition.FaceSet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:faceRecognition.FaceSet)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FaceSet::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:faceRecognition.FaceSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "faceRecognition.FaceSet.id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "faceRecognition.FaceSet.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:faceRecognition.FaceSet)
}

::PROTOBUF_NAMESPACE_ID::uint8* FaceSet::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:faceRecognition.FaceSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "faceRecognition.FaceSet.id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "faceRecognition.FaceSet.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:faceRecognition.FaceSet)
  return target;
}

size_t FaceSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:faceRecognition.FaceSet)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FaceSet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:faceRecognition.FaceSet)
  GOOGLE_DCHECK_NE(&from, this);
  const FaceSet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FaceSet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:faceRecognition.FaceSet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:faceRecognition.FaceSet)
    MergeFrom(*source);
  }
}

void FaceSet::MergeFrom(const FaceSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:faceRecognition.FaceSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void FaceSet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:faceRecognition.FaceSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FaceSet::CopyFrom(const FaceSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:faceRecognition.FaceSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaceSet::IsInitialized() const {
  return true;
}

void FaceSet::Swap(FaceSet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FaceSet::InternalSwap(FaceSet* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata FaceSet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

FaceDetail_DetailEntry_DoNotUse::FaceDetail_DetailEntry_DoNotUse() {}
FaceDetail_DetailEntry_DoNotUse::FaceDetail_DetailEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void FaceDetail_DetailEntry_DoNotUse::MergeFrom(const FaceDetail_DetailEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata FaceDetail_DetailEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void FaceDetail_DetailEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void FaceDetail::InitAsDefaultInstance() {
}
class FaceDetail::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FaceDetail::kFaceTokenFieldNumber;
const int FaceDetail::kFaceImgFieldNumber;
const int FaceDetail::kDetailFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FaceDetail::FaceDetail()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:faceRecognition.FaceDetail)
}
FaceDetail::FaceDetail(const FaceDetail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  detail_.MergeFrom(from.detail_);
  face_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.face_token().size() > 0) {
    face_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.face_token_);
  }
  face_img_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.face_img().size() > 0) {
    face_img_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.face_img_);
  }
  // @@protoc_insertion_point(copy_constructor:faceRecognition.FaceDetail)
}

void FaceDetail::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FaceDetail_faceset_2eproto.base);
  face_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  face_img_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

FaceDetail::~FaceDetail() {
  // @@protoc_insertion_point(destructor:faceRecognition.FaceDetail)
  SharedDtor();
}

void FaceDetail::SharedDtor() {
  face_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  face_img_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FaceDetail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FaceDetail& FaceDetail::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FaceDetail_faceset_2eproto.base);
  return *internal_default_instance();
}


void FaceDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:faceRecognition.FaceDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  detail_.Clear();
  face_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  face_img_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FaceDetail::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string face_token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_face_token(), ptr, ctx, "faceRecognition.FaceDetail.face_token");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes face_img = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_face_img(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> detail = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&detail_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FaceDetail::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:faceRecognition.FaceDetail)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string face_token = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_face_token()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->face_token().data(), static_cast<int>(this->face_token().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "faceRecognition.FaceDetail.face_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes face_img = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_face_img()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> detail = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          FaceDetail_DetailEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              FaceDetail_DetailEntry_DoNotUse,
              std::string, std::string,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string > > parser(&detail_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "faceRecognition.FaceDetail.DetailEntry.key"));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "faceRecognition.FaceDetail.DetailEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:faceRecognition.FaceDetail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:faceRecognition.FaceDetail)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FaceDetail::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:faceRecognition.FaceDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string face_token = 1;
  if (this->face_token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->face_token().data(), static_cast<int>(this->face_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "faceRecognition.FaceDetail.face_token");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->face_token(), output);
  }

  // bytes face_img = 2;
  if (this->face_img().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->face_img(), output);
  }

  // map<string, string> detail = 3;
  if (!this->detail().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "faceRecognition.FaceDetail.DetailEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "faceRecognition.FaceDetail.DetailEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->detail().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->detail().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->detail().begin();
          it != this->detail().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        FaceDetail_DetailEntry_DoNotUse::MapEntryWrapper entry(nullptr, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second);
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(3, entry, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->detail().begin();
          it != this->detail().end(); ++it) {
        FaceDetail_DetailEntry_DoNotUse::MapEntryWrapper entry(nullptr, it->first, it->second);
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(3, entry, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:faceRecognition.FaceDetail)
}

::PROTOBUF_NAMESPACE_ID::uint8* FaceDetail::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:faceRecognition.FaceDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string face_token = 1;
  if (this->face_token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->face_token().data(), static_cast<int>(this->face_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "faceRecognition.FaceDetail.face_token");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->face_token(), target);
  }

  // bytes face_img = 2;
  if (this->face_img().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->face_img(), target);
  }

  // map<string, string> detail = 3;
  if (!this->detail().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "faceRecognition.FaceDetail.DetailEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "faceRecognition.FaceDetail.DetailEntry.value");
      }
    };

    if (false &&
        this->detail().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->detail().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->detail().begin();
          it != this->detail().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        FaceDetail_DetailEntry_DoNotUse::MapEntryWrapper entry(nullptr, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(3, entry, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->detail().begin();
          it != this->detail().end(); ++it) {
        FaceDetail_DetailEntry_DoNotUse::MapEntryWrapper entry(nullptr, it->first, it->second);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(3, entry, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:faceRecognition.FaceDetail)
  return target;
}

size_t FaceDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:faceRecognition.FaceDetail)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> detail = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->detail_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->detail().begin();
      it != this->detail().end(); ++it) {
    FaceDetail_DetailEntry_DoNotUse::MapEntryWrapper entry(nullptr, it->first, it->second);
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        MessageSizeNoVirtual(entry);
  }

  // string face_token = 1;
  if (this->face_token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->face_token());
  }

  // bytes face_img = 2;
  if (this->face_img().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->face_img());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FaceDetail::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:faceRecognition.FaceDetail)
  GOOGLE_DCHECK_NE(&from, this);
  const FaceDetail* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FaceDetail>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:faceRecognition.FaceDetail)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:faceRecognition.FaceDetail)
    MergeFrom(*source);
  }
}

void FaceDetail::MergeFrom(const FaceDetail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:faceRecognition.FaceDetail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  detail_.MergeFrom(from.detail_);
  if (from.face_token().size() > 0) {

    face_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.face_token_);
  }
  if (from.face_img().size() > 0) {

    face_img_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.face_img_);
  }
}

void FaceDetail::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:faceRecognition.FaceDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FaceDetail::CopyFrom(const FaceDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:faceRecognition.FaceDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaceDetail::IsInitialized() const {
  return true;
}

void FaceDetail::Swap(FaceDetail* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FaceDetail::InternalSwap(FaceDetail* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  detail_.Swap(&other->detail_);
  face_token_.Swap(&other->face_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  face_img_.Swap(&other->face_img_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata FaceDetail::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NewFaceSetRequest::InitAsDefaultInstance() {
}
class NewFaceSetRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NewFaceSetRequest::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NewFaceSetRequest::NewFaceSetRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:faceRecognition.NewFaceSetRequest)
}
NewFaceSetRequest::NewFaceSetRequest(const NewFaceSetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:faceRecognition.NewFaceSetRequest)
}

void NewFaceSetRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NewFaceSetRequest_faceset_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

NewFaceSetRequest::~NewFaceSetRequest() {
  // @@protoc_insertion_point(destructor:faceRecognition.NewFaceSetRequest)
  SharedDtor();
}

void NewFaceSetRequest::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NewFaceSetRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NewFaceSetRequest& NewFaceSetRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NewFaceSetRequest_faceset_2eproto.base);
  return *internal_default_instance();
}


void NewFaceSetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:faceRecognition.NewFaceSetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NewFaceSetRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "faceRecognition.NewFaceSetRequest.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NewFaceSetRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:faceRecognition.NewFaceSetRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "faceRecognition.NewFaceSetRequest.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:faceRecognition.NewFaceSetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:faceRecognition.NewFaceSetRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NewFaceSetRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:faceRecognition.NewFaceSetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "faceRecognition.NewFaceSetRequest.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:faceRecognition.NewFaceSetRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* NewFaceSetRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:faceRecognition.NewFaceSetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "faceRecognition.NewFaceSetRequest.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:faceRecognition.NewFaceSetRequest)
  return target;
}

size_t NewFaceSetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:faceRecognition.NewFaceSetRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NewFaceSetRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:faceRecognition.NewFaceSetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const NewFaceSetRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NewFaceSetRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:faceRecognition.NewFaceSetRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:faceRecognition.NewFaceSetRequest)
    MergeFrom(*source);
  }
}

void NewFaceSetRequest::MergeFrom(const NewFaceSetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:faceRecognition.NewFaceSetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void NewFaceSetRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:faceRecognition.NewFaceSetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewFaceSetRequest::CopyFrom(const NewFaceSetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:faceRecognition.NewFaceSetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewFaceSetRequest::IsInitialized() const {
  return true;
}

void NewFaceSetRequest::Swap(NewFaceSetRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NewFaceSetRequest::InternalSwap(NewFaceSetRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata NewFaceSetRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NewFaceSetResponse::InitAsDefaultInstance() {
  ::faceRecognition::_NewFaceSetResponse_default_instance_._instance.get_mutable()->face_set_ = const_cast< ::faceRecognition::FaceSet*>(
      ::faceRecognition::FaceSet::internal_default_instance());
}
class NewFaceSetResponse::HasBitSetters {
 public:
  static const ::faceRecognition::FaceSet& face_set(const NewFaceSetResponse* msg);
};

const ::faceRecognition::FaceSet&
NewFaceSetResponse::HasBitSetters::face_set(const NewFaceSetResponse* msg) {
  return *msg->face_set_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NewFaceSetResponse::kFaceSetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NewFaceSetResponse::NewFaceSetResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:faceRecognition.NewFaceSetResponse)
}
NewFaceSetResponse::NewFaceSetResponse(const NewFaceSetResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_face_set()) {
    face_set_ = new ::faceRecognition::FaceSet(*from.face_set_);
  } else {
    face_set_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:faceRecognition.NewFaceSetResponse)
}

void NewFaceSetResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NewFaceSetResponse_faceset_2eproto.base);
  face_set_ = nullptr;
}

NewFaceSetResponse::~NewFaceSetResponse() {
  // @@protoc_insertion_point(destructor:faceRecognition.NewFaceSetResponse)
  SharedDtor();
}

void NewFaceSetResponse::SharedDtor() {
  if (this != internal_default_instance()) delete face_set_;
}

void NewFaceSetResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NewFaceSetResponse& NewFaceSetResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NewFaceSetResponse_faceset_2eproto.base);
  return *internal_default_instance();
}


void NewFaceSetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:faceRecognition.NewFaceSetResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && face_set_ != nullptr) {
    delete face_set_;
  }
  face_set_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NewFaceSetResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .faceRecognition.FaceSet face_set = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_face_set(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NewFaceSetResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:faceRecognition.NewFaceSetResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .faceRecognition.FaceSet face_set = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_face_set()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:faceRecognition.NewFaceSetResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:faceRecognition.NewFaceSetResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NewFaceSetResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:faceRecognition.NewFaceSetResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .faceRecognition.FaceSet face_set = 1;
  if (this->has_face_set()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::face_set(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:faceRecognition.NewFaceSetResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* NewFaceSetResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:faceRecognition.NewFaceSetResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .faceRecognition.FaceSet face_set = 1;
  if (this->has_face_set()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::face_set(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:faceRecognition.NewFaceSetResponse)
  return target;
}

size_t NewFaceSetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:faceRecognition.NewFaceSetResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .faceRecognition.FaceSet face_set = 1;
  if (this->has_face_set()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *face_set_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NewFaceSetResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:faceRecognition.NewFaceSetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const NewFaceSetResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NewFaceSetResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:faceRecognition.NewFaceSetResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:faceRecognition.NewFaceSetResponse)
    MergeFrom(*source);
  }
}

void NewFaceSetResponse::MergeFrom(const NewFaceSetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:faceRecognition.NewFaceSetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_face_set()) {
    mutable_face_set()->::faceRecognition::FaceSet::MergeFrom(from.face_set());
  }
}

void NewFaceSetResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:faceRecognition.NewFaceSetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewFaceSetResponse::CopyFrom(const NewFaceSetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:faceRecognition.NewFaceSetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewFaceSetResponse::IsInitialized() const {
  return true;
}

void NewFaceSetResponse::Swap(NewFaceSetResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NewFaceSetResponse::InternalSwap(NewFaceSetResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(face_set_, other->face_set_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NewFaceSetResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteFaceSetRequest::InitAsDefaultInstance() {
}
class DeleteFaceSetRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeleteFaceSetRequest::kFaceSetIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteFaceSetRequest::DeleteFaceSetRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:faceRecognition.DeleteFaceSetRequest)
}
DeleteFaceSetRequest::DeleteFaceSetRequest(const DeleteFaceSetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  face_set_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.face_set_id().size() > 0) {
    face_set_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.face_set_id_);
  }
  // @@protoc_insertion_point(copy_constructor:faceRecognition.DeleteFaceSetRequest)
}

void DeleteFaceSetRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteFaceSetRequest_faceset_2eproto.base);
  face_set_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeleteFaceSetRequest::~DeleteFaceSetRequest() {
  // @@protoc_insertion_point(destructor:faceRecognition.DeleteFaceSetRequest)
  SharedDtor();
}

void DeleteFaceSetRequest::SharedDtor() {
  face_set_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteFaceSetRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteFaceSetRequest& DeleteFaceSetRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteFaceSetRequest_faceset_2eproto.base);
  return *internal_default_instance();
}


void DeleteFaceSetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:faceRecognition.DeleteFaceSetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  face_set_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeleteFaceSetRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string face_set_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_face_set_id(), ptr, ctx, "faceRecognition.DeleteFaceSetRequest.face_set_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeleteFaceSetRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:faceRecognition.DeleteFaceSetRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string face_set_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_face_set_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->face_set_id().data(), static_cast<int>(this->face_set_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "faceRecognition.DeleteFaceSetRequest.face_set_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:faceRecognition.DeleteFaceSetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:faceRecognition.DeleteFaceSetRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeleteFaceSetRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:faceRecognition.DeleteFaceSetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string face_set_id = 1;
  if (this->face_set_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->face_set_id().data(), static_cast<int>(this->face_set_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "faceRecognition.DeleteFaceSetRequest.face_set_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->face_set_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:faceRecognition.DeleteFaceSetRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteFaceSetRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:faceRecognition.DeleteFaceSetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string face_set_id = 1;
  if (this->face_set_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->face_set_id().data(), static_cast<int>(this->face_set_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "faceRecognition.DeleteFaceSetRequest.face_set_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->face_set_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:faceRecognition.DeleteFaceSetRequest)
  return target;
}

size_t DeleteFaceSetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:faceRecognition.DeleteFaceSetRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string face_set_id = 1;
  if (this->face_set_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->face_set_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteFaceSetRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:faceRecognition.DeleteFaceSetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteFaceSetRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteFaceSetRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:faceRecognition.DeleteFaceSetRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:faceRecognition.DeleteFaceSetRequest)
    MergeFrom(*source);
  }
}

void DeleteFaceSetRequest::MergeFrom(const DeleteFaceSetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:faceRecognition.DeleteFaceSetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.face_set_id().size() > 0) {

    face_set_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.face_set_id_);
  }
}

void DeleteFaceSetRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:faceRecognition.DeleteFaceSetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteFaceSetRequest::CopyFrom(const DeleteFaceSetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:faceRecognition.DeleteFaceSetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteFaceSetRequest::IsInitialized() const {
  return true;
}

void DeleteFaceSetRequest::Swap(DeleteFaceSetRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteFaceSetRequest::InternalSwap(DeleteFaceSetRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  face_set_id_.Swap(&other->face_set_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteFaceSetRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteFaceSetResponse::InitAsDefaultInstance() {
}
class DeleteFaceSetResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteFaceSetResponse::DeleteFaceSetResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:faceRecognition.DeleteFaceSetResponse)
}
DeleteFaceSetResponse::DeleteFaceSetResponse(const DeleteFaceSetResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:faceRecognition.DeleteFaceSetResponse)
}

void DeleteFaceSetResponse::SharedCtor() {
}

DeleteFaceSetResponse::~DeleteFaceSetResponse() {
  // @@protoc_insertion_point(destructor:faceRecognition.DeleteFaceSetResponse)
  SharedDtor();
}

void DeleteFaceSetResponse::SharedDtor() {
}

void DeleteFaceSetResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteFaceSetResponse& DeleteFaceSetResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteFaceSetResponse_faceset_2eproto.base);
  return *internal_default_instance();
}


void DeleteFaceSetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:faceRecognition.DeleteFaceSetResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeleteFaceSetResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeleteFaceSetResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:faceRecognition.DeleteFaceSetResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:faceRecognition.DeleteFaceSetResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:faceRecognition.DeleteFaceSetResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeleteFaceSetResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:faceRecognition.DeleteFaceSetResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:faceRecognition.DeleteFaceSetResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteFaceSetResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:faceRecognition.DeleteFaceSetResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:faceRecognition.DeleteFaceSetResponse)
  return target;
}

size_t DeleteFaceSetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:faceRecognition.DeleteFaceSetResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteFaceSetResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:faceRecognition.DeleteFaceSetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteFaceSetResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteFaceSetResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:faceRecognition.DeleteFaceSetResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:faceRecognition.DeleteFaceSetResponse)
    MergeFrom(*source);
  }
}

void DeleteFaceSetResponse::MergeFrom(const DeleteFaceSetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:faceRecognition.DeleteFaceSetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DeleteFaceSetResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:faceRecognition.DeleteFaceSetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteFaceSetResponse::CopyFrom(const DeleteFaceSetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:faceRecognition.DeleteFaceSetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteFaceSetResponse::IsInitialized() const {
  return true;
}

void DeleteFaceSetResponse::Swap(DeleteFaceSetResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteFaceSetResponse::InternalSwap(DeleteFaceSetResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteFaceSetResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateFaceSetRequest::InitAsDefaultInstance() {
  ::faceRecognition::_UpdateFaceSetRequest_default_instance_._instance.get_mutable()->face_set_ = const_cast< ::faceRecognition::FaceSet*>(
      ::faceRecognition::FaceSet::internal_default_instance());
}
class UpdateFaceSetRequest::HasBitSetters {
 public:
  static const ::faceRecognition::FaceSet& face_set(const UpdateFaceSetRequest* msg);
};

const ::faceRecognition::FaceSet&
UpdateFaceSetRequest::HasBitSetters::face_set(const UpdateFaceSetRequest* msg) {
  return *msg->face_set_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateFaceSetRequest::kFaceSetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateFaceSetRequest::UpdateFaceSetRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:faceRecognition.UpdateFaceSetRequest)
}
UpdateFaceSetRequest::UpdateFaceSetRequest(const UpdateFaceSetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_face_set()) {
    face_set_ = new ::faceRecognition::FaceSet(*from.face_set_);
  } else {
    face_set_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:faceRecognition.UpdateFaceSetRequest)
}

void UpdateFaceSetRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateFaceSetRequest_faceset_2eproto.base);
  face_set_ = nullptr;
}

UpdateFaceSetRequest::~UpdateFaceSetRequest() {
  // @@protoc_insertion_point(destructor:faceRecognition.UpdateFaceSetRequest)
  SharedDtor();
}

void UpdateFaceSetRequest::SharedDtor() {
  if (this != internal_default_instance()) delete face_set_;
}

void UpdateFaceSetRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateFaceSetRequest& UpdateFaceSetRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateFaceSetRequest_faceset_2eproto.base);
  return *internal_default_instance();
}


void UpdateFaceSetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:faceRecognition.UpdateFaceSetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && face_set_ != nullptr) {
    delete face_set_;
  }
  face_set_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UpdateFaceSetRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .faceRecognition.FaceSet face_set = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_face_set(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UpdateFaceSetRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:faceRecognition.UpdateFaceSetRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .faceRecognition.FaceSet face_set = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_face_set()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:faceRecognition.UpdateFaceSetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:faceRecognition.UpdateFaceSetRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UpdateFaceSetRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:faceRecognition.UpdateFaceSetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .faceRecognition.FaceSet face_set = 1;
  if (this->has_face_set()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::face_set(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:faceRecognition.UpdateFaceSetRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateFaceSetRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:faceRecognition.UpdateFaceSetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .faceRecognition.FaceSet face_set = 1;
  if (this->has_face_set()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::face_set(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:faceRecognition.UpdateFaceSetRequest)
  return target;
}

size_t UpdateFaceSetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:faceRecognition.UpdateFaceSetRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .faceRecognition.FaceSet face_set = 1;
  if (this->has_face_set()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *face_set_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateFaceSetRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:faceRecognition.UpdateFaceSetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateFaceSetRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateFaceSetRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:faceRecognition.UpdateFaceSetRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:faceRecognition.UpdateFaceSetRequest)
    MergeFrom(*source);
  }
}

void UpdateFaceSetRequest::MergeFrom(const UpdateFaceSetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:faceRecognition.UpdateFaceSetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_face_set()) {
    mutable_face_set()->::faceRecognition::FaceSet::MergeFrom(from.face_set());
  }
}

void UpdateFaceSetRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:faceRecognition.UpdateFaceSetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateFaceSetRequest::CopyFrom(const UpdateFaceSetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:faceRecognition.UpdateFaceSetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateFaceSetRequest::IsInitialized() const {
  return true;
}

void UpdateFaceSetRequest::Swap(UpdateFaceSetRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateFaceSetRequest::InternalSwap(UpdateFaceSetRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(face_set_, other->face_set_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateFaceSetRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateFaceSetResponse::InitAsDefaultInstance() {
  ::faceRecognition::_UpdateFaceSetResponse_default_instance_._instance.get_mutable()->face_set_ = const_cast< ::faceRecognition::FaceSet*>(
      ::faceRecognition::FaceSet::internal_default_instance());
}
class UpdateFaceSetResponse::HasBitSetters {
 public:
  static const ::faceRecognition::FaceSet& face_set(const UpdateFaceSetResponse* msg);
};

const ::faceRecognition::FaceSet&
UpdateFaceSetResponse::HasBitSetters::face_set(const UpdateFaceSetResponse* msg) {
  return *msg->face_set_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateFaceSetResponse::kFaceSetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateFaceSetResponse::UpdateFaceSetResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:faceRecognition.UpdateFaceSetResponse)
}
UpdateFaceSetResponse::UpdateFaceSetResponse(const UpdateFaceSetResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_face_set()) {
    face_set_ = new ::faceRecognition::FaceSet(*from.face_set_);
  } else {
    face_set_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:faceRecognition.UpdateFaceSetResponse)
}

void UpdateFaceSetResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateFaceSetResponse_faceset_2eproto.base);
  face_set_ = nullptr;
}

UpdateFaceSetResponse::~UpdateFaceSetResponse() {
  // @@protoc_insertion_point(destructor:faceRecognition.UpdateFaceSetResponse)
  SharedDtor();
}

void UpdateFaceSetResponse::SharedDtor() {
  if (this != internal_default_instance()) delete face_set_;
}

void UpdateFaceSetResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateFaceSetResponse& UpdateFaceSetResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateFaceSetResponse_faceset_2eproto.base);
  return *internal_default_instance();
}


void UpdateFaceSetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:faceRecognition.UpdateFaceSetResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && face_set_ != nullptr) {
    delete face_set_;
  }
  face_set_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UpdateFaceSetResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .faceRecognition.FaceSet face_set = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_face_set(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UpdateFaceSetResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:faceRecognition.UpdateFaceSetResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .faceRecognition.FaceSet face_set = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_face_set()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:faceRecognition.UpdateFaceSetResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:faceRecognition.UpdateFaceSetResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UpdateFaceSetResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:faceRecognition.UpdateFaceSetResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .faceRecognition.FaceSet face_set = 1;
  if (this->has_face_set()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::face_set(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:faceRecognition.UpdateFaceSetResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateFaceSetResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:faceRecognition.UpdateFaceSetResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .faceRecognition.FaceSet face_set = 1;
  if (this->has_face_set()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::face_set(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:faceRecognition.UpdateFaceSetResponse)
  return target;
}

size_t UpdateFaceSetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:faceRecognition.UpdateFaceSetResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .faceRecognition.FaceSet face_set = 1;
  if (this->has_face_set()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *face_set_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateFaceSetResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:faceRecognition.UpdateFaceSetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateFaceSetResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateFaceSetResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:faceRecognition.UpdateFaceSetResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:faceRecognition.UpdateFaceSetResponse)
    MergeFrom(*source);
  }
}

void UpdateFaceSetResponse::MergeFrom(const UpdateFaceSetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:faceRecognition.UpdateFaceSetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_face_set()) {
    mutable_face_set()->::faceRecognition::FaceSet::MergeFrom(from.face_set());
  }
}

void UpdateFaceSetResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:faceRecognition.UpdateFaceSetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateFaceSetResponse::CopyFrom(const UpdateFaceSetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:faceRecognition.UpdateFaceSetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateFaceSetResponse::IsInitialized() const {
  return true;
}

void UpdateFaceSetResponse::Swap(UpdateFaceSetResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateFaceSetResponse::InternalSwap(UpdateFaceSetResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(face_set_, other->face_set_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateFaceSetResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListFaceSetsRequest::InitAsDefaultInstance() {
}
class ListFaceSetsRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListFaceSetsRequest::ListFaceSetsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:faceRecognition.ListFaceSetsRequest)
}
ListFaceSetsRequest::ListFaceSetsRequest(const ListFaceSetsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:faceRecognition.ListFaceSetsRequest)
}

void ListFaceSetsRequest::SharedCtor() {
}

ListFaceSetsRequest::~ListFaceSetsRequest() {
  // @@protoc_insertion_point(destructor:faceRecognition.ListFaceSetsRequest)
  SharedDtor();
}

void ListFaceSetsRequest::SharedDtor() {
}

void ListFaceSetsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListFaceSetsRequest& ListFaceSetsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListFaceSetsRequest_faceset_2eproto.base);
  return *internal_default_instance();
}


void ListFaceSetsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:faceRecognition.ListFaceSetsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ListFaceSetsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ListFaceSetsRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:faceRecognition.ListFaceSetsRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:faceRecognition.ListFaceSetsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:faceRecognition.ListFaceSetsRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ListFaceSetsRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:faceRecognition.ListFaceSetsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:faceRecognition.ListFaceSetsRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* ListFaceSetsRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:faceRecognition.ListFaceSetsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:faceRecognition.ListFaceSetsRequest)
  return target;
}

size_t ListFaceSetsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:faceRecognition.ListFaceSetsRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListFaceSetsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:faceRecognition.ListFaceSetsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListFaceSetsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListFaceSetsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:faceRecognition.ListFaceSetsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:faceRecognition.ListFaceSetsRequest)
    MergeFrom(*source);
  }
}

void ListFaceSetsRequest::MergeFrom(const ListFaceSetsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:faceRecognition.ListFaceSetsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ListFaceSetsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:faceRecognition.ListFaceSetsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListFaceSetsRequest::CopyFrom(const ListFaceSetsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:faceRecognition.ListFaceSetsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListFaceSetsRequest::IsInitialized() const {
  return true;
}

void ListFaceSetsRequest::Swap(ListFaceSetsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListFaceSetsRequest::InternalSwap(ListFaceSetsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListFaceSetsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListFaceSetsResponse::InitAsDefaultInstance() {
}
class ListFaceSetsResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListFaceSetsResponse::kFaceSetsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListFaceSetsResponse::ListFaceSetsResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:faceRecognition.ListFaceSetsResponse)
}
ListFaceSetsResponse::ListFaceSetsResponse(const ListFaceSetsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      face_sets_(from.face_sets_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:faceRecognition.ListFaceSetsResponse)
}

void ListFaceSetsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListFaceSetsResponse_faceset_2eproto.base);
}

ListFaceSetsResponse::~ListFaceSetsResponse() {
  // @@protoc_insertion_point(destructor:faceRecognition.ListFaceSetsResponse)
  SharedDtor();
}

void ListFaceSetsResponse::SharedDtor() {
}

void ListFaceSetsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListFaceSetsResponse& ListFaceSetsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListFaceSetsResponse_faceset_2eproto.base);
  return *internal_default_instance();
}


void ListFaceSetsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:faceRecognition.ListFaceSetsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  face_sets_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ListFaceSetsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .faceRecognition.FaceSet face_sets = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_face_sets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ListFaceSetsResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:faceRecognition.ListFaceSetsResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .faceRecognition.FaceSet face_sets = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_face_sets()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:faceRecognition.ListFaceSetsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:faceRecognition.ListFaceSetsResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ListFaceSetsResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:faceRecognition.ListFaceSetsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .faceRecognition.FaceSet face_sets = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->face_sets_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->face_sets(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:faceRecognition.ListFaceSetsResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* ListFaceSetsResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:faceRecognition.ListFaceSetsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .faceRecognition.FaceSet face_sets = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->face_sets_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->face_sets(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:faceRecognition.ListFaceSetsResponse)
  return target;
}

size_t ListFaceSetsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:faceRecognition.ListFaceSetsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .faceRecognition.FaceSet face_sets = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->face_sets_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->face_sets(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListFaceSetsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:faceRecognition.ListFaceSetsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListFaceSetsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListFaceSetsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:faceRecognition.ListFaceSetsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:faceRecognition.ListFaceSetsResponse)
    MergeFrom(*source);
  }
}

void ListFaceSetsResponse::MergeFrom(const ListFaceSetsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:faceRecognition.ListFaceSetsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  face_sets_.MergeFrom(from.face_sets_);
}

void ListFaceSetsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:faceRecognition.ListFaceSetsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListFaceSetsResponse::CopyFrom(const ListFaceSetsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:faceRecognition.ListFaceSetsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListFaceSetsResponse::IsInitialized() const {
  return true;
}

void ListFaceSetsResponse::Swap(ListFaceSetsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListFaceSetsResponse::InternalSwap(ListFaceSetsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&face_sets_)->InternalSwap(CastToBase(&other->face_sets_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListFaceSetsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

AddFaceRequest_DetailEntry_DoNotUse::AddFaceRequest_DetailEntry_DoNotUse() {}
AddFaceRequest_DetailEntry_DoNotUse::AddFaceRequest_DetailEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void AddFaceRequest_DetailEntry_DoNotUse::MergeFrom(const AddFaceRequest_DetailEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata AddFaceRequest_DetailEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void AddFaceRequest_DetailEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void AddFaceRequest::InitAsDefaultInstance() {
}
class AddFaceRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddFaceRequest::kFaceSetIdFieldNumber;
const int AddFaceRequest::kFaceImgFieldNumber;
const int AddFaceRequest::kDetailFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddFaceRequest::AddFaceRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:faceRecognition.AddFaceRequest)
}
AddFaceRequest::AddFaceRequest(const AddFaceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  detail_.MergeFrom(from.detail_);
  face_set_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.face_set_id().size() > 0) {
    face_set_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.face_set_id_);
  }
  face_img_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.face_img().size() > 0) {
    face_img_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.face_img_);
  }
  // @@protoc_insertion_point(copy_constructor:faceRecognition.AddFaceRequest)
}

void AddFaceRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddFaceRequest_faceset_2eproto.base);
  face_set_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  face_img_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AddFaceRequest::~AddFaceRequest() {
  // @@protoc_insertion_point(destructor:faceRecognition.AddFaceRequest)
  SharedDtor();
}

void AddFaceRequest::SharedDtor() {
  face_set_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  face_img_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AddFaceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddFaceRequest& AddFaceRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddFaceRequest_faceset_2eproto.base);
  return *internal_default_instance();
}


void AddFaceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:faceRecognition.AddFaceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  detail_.Clear();
  face_set_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  face_img_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AddFaceRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string face_set_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_face_set_id(), ptr, ctx, "faceRecognition.AddFaceRequest.face_set_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes face_img = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_face_img(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> detail = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&detail_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AddFaceRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:faceRecognition.AddFaceRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string face_set_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_face_set_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->face_set_id().data(), static_cast<int>(this->face_set_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "faceRecognition.AddFaceRequest.face_set_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes face_img = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_face_img()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> detail = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          AddFaceRequest_DetailEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              AddFaceRequest_DetailEntry_DoNotUse,
              std::string, std::string,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string > > parser(&detail_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "faceRecognition.AddFaceRequest.DetailEntry.key"));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "faceRecognition.AddFaceRequest.DetailEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:faceRecognition.AddFaceRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:faceRecognition.AddFaceRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AddFaceRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:faceRecognition.AddFaceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string face_set_id = 1;
  if (this->face_set_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->face_set_id().data(), static_cast<int>(this->face_set_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "faceRecognition.AddFaceRequest.face_set_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->face_set_id(), output);
  }

  // bytes face_img = 2;
  if (this->face_img().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->face_img(), output);
  }

  // map<string, string> detail = 3;
  if (!this->detail().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "faceRecognition.AddFaceRequest.DetailEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "faceRecognition.AddFaceRequest.DetailEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->detail().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->detail().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->detail().begin();
          it != this->detail().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        AddFaceRequest_DetailEntry_DoNotUse::MapEntryWrapper entry(nullptr, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second);
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(3, entry, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->detail().begin();
          it != this->detail().end(); ++it) {
        AddFaceRequest_DetailEntry_DoNotUse::MapEntryWrapper entry(nullptr, it->first, it->second);
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(3, entry, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:faceRecognition.AddFaceRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* AddFaceRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:faceRecognition.AddFaceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string face_set_id = 1;
  if (this->face_set_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->face_set_id().data(), static_cast<int>(this->face_set_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "faceRecognition.AddFaceRequest.face_set_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->face_set_id(), target);
  }

  // bytes face_img = 2;
  if (this->face_img().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->face_img(), target);
  }

  // map<string, string> detail = 3;
  if (!this->detail().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "faceRecognition.AddFaceRequest.DetailEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "faceRecognition.AddFaceRequest.DetailEntry.value");
      }
    };

    if (false &&
        this->detail().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->detail().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->detail().begin();
          it != this->detail().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        AddFaceRequest_DetailEntry_DoNotUse::MapEntryWrapper entry(nullptr, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(3, entry, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->detail().begin();
          it != this->detail().end(); ++it) {
        AddFaceRequest_DetailEntry_DoNotUse::MapEntryWrapper entry(nullptr, it->first, it->second);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(3, entry, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:faceRecognition.AddFaceRequest)
  return target;
}

size_t AddFaceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:faceRecognition.AddFaceRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> detail = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->detail_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->detail().begin();
      it != this->detail().end(); ++it) {
    AddFaceRequest_DetailEntry_DoNotUse::MapEntryWrapper entry(nullptr, it->first, it->second);
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        MessageSizeNoVirtual(entry);
  }

  // string face_set_id = 1;
  if (this->face_set_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->face_set_id());
  }

  // bytes face_img = 2;
  if (this->face_img().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->face_img());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddFaceRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:faceRecognition.AddFaceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddFaceRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddFaceRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:faceRecognition.AddFaceRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:faceRecognition.AddFaceRequest)
    MergeFrom(*source);
  }
}

void AddFaceRequest::MergeFrom(const AddFaceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:faceRecognition.AddFaceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  detail_.MergeFrom(from.detail_);
  if (from.face_set_id().size() > 0) {

    face_set_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.face_set_id_);
  }
  if (from.face_img().size() > 0) {

    face_img_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.face_img_);
  }
}

void AddFaceRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:faceRecognition.AddFaceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddFaceRequest::CopyFrom(const AddFaceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:faceRecognition.AddFaceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddFaceRequest::IsInitialized() const {
  return true;
}

void AddFaceRequest::Swap(AddFaceRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddFaceRequest::InternalSwap(AddFaceRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  detail_.Swap(&other->detail_);
  face_set_id_.Swap(&other->face_set_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  face_img_.Swap(&other->face_img_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata AddFaceRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AddFaceResponse::InitAsDefaultInstance() {
}
class AddFaceResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddFaceResponse::kFaceTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddFaceResponse::AddFaceResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:faceRecognition.AddFaceResponse)
}
AddFaceResponse::AddFaceResponse(const AddFaceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  face_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.face_token().size() > 0) {
    face_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.face_token_);
  }
  // @@protoc_insertion_point(copy_constructor:faceRecognition.AddFaceResponse)
}

void AddFaceResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddFaceResponse_faceset_2eproto.base);
  face_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AddFaceResponse::~AddFaceResponse() {
  // @@protoc_insertion_point(destructor:faceRecognition.AddFaceResponse)
  SharedDtor();
}

void AddFaceResponse::SharedDtor() {
  face_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AddFaceResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddFaceResponse& AddFaceResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddFaceResponse_faceset_2eproto.base);
  return *internal_default_instance();
}


void AddFaceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:faceRecognition.AddFaceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  face_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AddFaceResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string face_token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_face_token(), ptr, ctx, "faceRecognition.AddFaceResponse.face_token");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AddFaceResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:faceRecognition.AddFaceResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string face_token = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_face_token()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->face_token().data(), static_cast<int>(this->face_token().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "faceRecognition.AddFaceResponse.face_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:faceRecognition.AddFaceResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:faceRecognition.AddFaceResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AddFaceResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:faceRecognition.AddFaceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string face_token = 1;
  if (this->face_token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->face_token().data(), static_cast<int>(this->face_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "faceRecognition.AddFaceResponse.face_token");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->face_token(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:faceRecognition.AddFaceResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* AddFaceResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:faceRecognition.AddFaceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string face_token = 1;
  if (this->face_token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->face_token().data(), static_cast<int>(this->face_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "faceRecognition.AddFaceResponse.face_token");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->face_token(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:faceRecognition.AddFaceResponse)
  return target;
}

size_t AddFaceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:faceRecognition.AddFaceResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string face_token = 1;
  if (this->face_token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->face_token());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddFaceResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:faceRecognition.AddFaceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AddFaceResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddFaceResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:faceRecognition.AddFaceResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:faceRecognition.AddFaceResponse)
    MergeFrom(*source);
  }
}

void AddFaceResponse::MergeFrom(const AddFaceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:faceRecognition.AddFaceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.face_token().size() > 0) {

    face_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.face_token_);
  }
}

void AddFaceResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:faceRecognition.AddFaceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddFaceResponse::CopyFrom(const AddFaceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:faceRecognition.AddFaceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddFaceResponse::IsInitialized() const {
  return true;
}

void AddFaceResponse::Swap(AddFaceResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddFaceResponse::InternalSwap(AddFaceResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  face_token_.Swap(&other->face_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata AddFaceResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RemoveFaceRequest::InitAsDefaultInstance() {
}
class RemoveFaceRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RemoveFaceRequest::kFaceSetIdFieldNumber;
const int RemoveFaceRequest::kFaceTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RemoveFaceRequest::RemoveFaceRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:faceRecognition.RemoveFaceRequest)
}
RemoveFaceRequest::RemoveFaceRequest(const RemoveFaceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  face_set_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.face_set_id().size() > 0) {
    face_set_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.face_set_id_);
  }
  face_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.face_token().size() > 0) {
    face_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.face_token_);
  }
  // @@protoc_insertion_point(copy_constructor:faceRecognition.RemoveFaceRequest)
}

void RemoveFaceRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RemoveFaceRequest_faceset_2eproto.base);
  face_set_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  face_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RemoveFaceRequest::~RemoveFaceRequest() {
  // @@protoc_insertion_point(destructor:faceRecognition.RemoveFaceRequest)
  SharedDtor();
}

void RemoveFaceRequest::SharedDtor() {
  face_set_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  face_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RemoveFaceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemoveFaceRequest& RemoveFaceRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RemoveFaceRequest_faceset_2eproto.base);
  return *internal_default_instance();
}


void RemoveFaceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:faceRecognition.RemoveFaceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  face_set_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  face_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RemoveFaceRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string face_set_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_face_set_id(), ptr, ctx, "faceRecognition.RemoveFaceRequest.face_set_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string face_token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_face_token(), ptr, ctx, "faceRecognition.RemoveFaceRequest.face_token");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RemoveFaceRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:faceRecognition.RemoveFaceRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string face_set_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_face_set_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->face_set_id().data(), static_cast<int>(this->face_set_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "faceRecognition.RemoveFaceRequest.face_set_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string face_token = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_face_token()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->face_token().data(), static_cast<int>(this->face_token().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "faceRecognition.RemoveFaceRequest.face_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:faceRecognition.RemoveFaceRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:faceRecognition.RemoveFaceRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RemoveFaceRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:faceRecognition.RemoveFaceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string face_set_id = 1;
  if (this->face_set_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->face_set_id().data(), static_cast<int>(this->face_set_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "faceRecognition.RemoveFaceRequest.face_set_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->face_set_id(), output);
  }

  // string face_token = 2;
  if (this->face_token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->face_token().data(), static_cast<int>(this->face_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "faceRecognition.RemoveFaceRequest.face_token");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->face_token(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:faceRecognition.RemoveFaceRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* RemoveFaceRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:faceRecognition.RemoveFaceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string face_set_id = 1;
  if (this->face_set_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->face_set_id().data(), static_cast<int>(this->face_set_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "faceRecognition.RemoveFaceRequest.face_set_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->face_set_id(), target);
  }

  // string face_token = 2;
  if (this->face_token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->face_token().data(), static_cast<int>(this->face_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "faceRecognition.RemoveFaceRequest.face_token");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->face_token(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:faceRecognition.RemoveFaceRequest)
  return target;
}

size_t RemoveFaceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:faceRecognition.RemoveFaceRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string face_set_id = 1;
  if (this->face_set_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->face_set_id());
  }

  // string face_token = 2;
  if (this->face_token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->face_token());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoveFaceRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:faceRecognition.RemoveFaceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoveFaceRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RemoveFaceRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:faceRecognition.RemoveFaceRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:faceRecognition.RemoveFaceRequest)
    MergeFrom(*source);
  }
}

void RemoveFaceRequest::MergeFrom(const RemoveFaceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:faceRecognition.RemoveFaceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.face_set_id().size() > 0) {

    face_set_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.face_set_id_);
  }
  if (from.face_token().size() > 0) {

    face_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.face_token_);
  }
}

void RemoveFaceRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:faceRecognition.RemoveFaceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveFaceRequest::CopyFrom(const RemoveFaceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:faceRecognition.RemoveFaceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveFaceRequest::IsInitialized() const {
  return true;
}

void RemoveFaceRequest::Swap(RemoveFaceRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RemoveFaceRequest::InternalSwap(RemoveFaceRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  face_set_id_.Swap(&other->face_set_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  face_token_.Swap(&other->face_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoveFaceRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RemoveFaceResponse::InitAsDefaultInstance() {
}
class RemoveFaceResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RemoveFaceResponse::RemoveFaceResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:faceRecognition.RemoveFaceResponse)
}
RemoveFaceResponse::RemoveFaceResponse(const RemoveFaceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:faceRecognition.RemoveFaceResponse)
}

void RemoveFaceResponse::SharedCtor() {
}

RemoveFaceResponse::~RemoveFaceResponse() {
  // @@protoc_insertion_point(destructor:faceRecognition.RemoveFaceResponse)
  SharedDtor();
}

void RemoveFaceResponse::SharedDtor() {
}

void RemoveFaceResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemoveFaceResponse& RemoveFaceResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RemoveFaceResponse_faceset_2eproto.base);
  return *internal_default_instance();
}


void RemoveFaceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:faceRecognition.RemoveFaceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RemoveFaceResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RemoveFaceResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:faceRecognition.RemoveFaceResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:faceRecognition.RemoveFaceResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:faceRecognition.RemoveFaceResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RemoveFaceResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:faceRecognition.RemoveFaceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:faceRecognition.RemoveFaceResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* RemoveFaceResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:faceRecognition.RemoveFaceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:faceRecognition.RemoveFaceResponse)
  return target;
}

size_t RemoveFaceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:faceRecognition.RemoveFaceResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoveFaceResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:faceRecognition.RemoveFaceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoveFaceResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RemoveFaceResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:faceRecognition.RemoveFaceResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:faceRecognition.RemoveFaceResponse)
    MergeFrom(*source);
  }
}

void RemoveFaceResponse::MergeFrom(const RemoveFaceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:faceRecognition.RemoveFaceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void RemoveFaceResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:faceRecognition.RemoveFaceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveFaceResponse::CopyFrom(const RemoveFaceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:faceRecognition.RemoveFaceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveFaceResponse::IsInitialized() const {
  return true;
}

void RemoveFaceResponse::Swap(RemoveFaceResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RemoveFaceResponse::InternalSwap(RemoveFaceResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoveFaceResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FaceDetailRequest::InitAsDefaultInstance() {
}
class FaceDetailRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FaceDetailRequest::kFaceSetIdFieldNumber;
const int FaceDetailRequest::kFaceTokenFieldNumber;
const int FaceDetailRequest::kWithFaceImgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FaceDetailRequest::FaceDetailRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:faceRecognition.FaceDetailRequest)
}
FaceDetailRequest::FaceDetailRequest(const FaceDetailRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  face_set_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.face_set_id().size() > 0) {
    face_set_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.face_set_id_);
  }
  face_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.face_token().size() > 0) {
    face_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.face_token_);
  }
  with_face_img_ = from.with_face_img_;
  // @@protoc_insertion_point(copy_constructor:faceRecognition.FaceDetailRequest)
}

void FaceDetailRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FaceDetailRequest_faceset_2eproto.base);
  face_set_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  face_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  with_face_img_ = false;
}

FaceDetailRequest::~FaceDetailRequest() {
  // @@protoc_insertion_point(destructor:faceRecognition.FaceDetailRequest)
  SharedDtor();
}

void FaceDetailRequest::SharedDtor() {
  face_set_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  face_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FaceDetailRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FaceDetailRequest& FaceDetailRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FaceDetailRequest_faceset_2eproto.base);
  return *internal_default_instance();
}


void FaceDetailRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:faceRecognition.FaceDetailRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  face_set_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  face_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  with_face_img_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FaceDetailRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string face_set_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_face_set_id(), ptr, ctx, "faceRecognition.FaceDetailRequest.face_set_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string face_token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_face_token(), ptr, ctx, "faceRecognition.FaceDetailRequest.face_token");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool with_face_img = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          with_face_img_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FaceDetailRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:faceRecognition.FaceDetailRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string face_set_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_face_set_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->face_set_id().data(), static_cast<int>(this->face_set_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "faceRecognition.FaceDetailRequest.face_set_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string face_token = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_face_token()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->face_token().data(), static_cast<int>(this->face_token().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "faceRecognition.FaceDetailRequest.face_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool with_face_img = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &with_face_img_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:faceRecognition.FaceDetailRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:faceRecognition.FaceDetailRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FaceDetailRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:faceRecognition.FaceDetailRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string face_set_id = 1;
  if (this->face_set_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->face_set_id().data(), static_cast<int>(this->face_set_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "faceRecognition.FaceDetailRequest.face_set_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->face_set_id(), output);
  }

  // string face_token = 2;
  if (this->face_token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->face_token().data(), static_cast<int>(this->face_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "faceRecognition.FaceDetailRequest.face_token");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->face_token(), output);
  }

  // bool with_face_img = 3;
  if (this->with_face_img() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->with_face_img(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:faceRecognition.FaceDetailRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* FaceDetailRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:faceRecognition.FaceDetailRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string face_set_id = 1;
  if (this->face_set_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->face_set_id().data(), static_cast<int>(this->face_set_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "faceRecognition.FaceDetailRequest.face_set_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->face_set_id(), target);
  }

  // string face_token = 2;
  if (this->face_token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->face_token().data(), static_cast<int>(this->face_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "faceRecognition.FaceDetailRequest.face_token");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->face_token(), target);
  }

  // bool with_face_img = 3;
  if (this->with_face_img() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->with_face_img(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:faceRecognition.FaceDetailRequest)
  return target;
}

size_t FaceDetailRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:faceRecognition.FaceDetailRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string face_set_id = 1;
  if (this->face_set_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->face_set_id());
  }

  // string face_token = 2;
  if (this->face_token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->face_token());
  }

  // bool with_face_img = 3;
  if (this->with_face_img() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FaceDetailRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:faceRecognition.FaceDetailRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const FaceDetailRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FaceDetailRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:faceRecognition.FaceDetailRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:faceRecognition.FaceDetailRequest)
    MergeFrom(*source);
  }
}

void FaceDetailRequest::MergeFrom(const FaceDetailRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:faceRecognition.FaceDetailRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.face_set_id().size() > 0) {

    face_set_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.face_set_id_);
  }
  if (from.face_token().size() > 0) {

    face_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.face_token_);
  }
  if (from.with_face_img() != 0) {
    set_with_face_img(from.with_face_img());
  }
}

void FaceDetailRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:faceRecognition.FaceDetailRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FaceDetailRequest::CopyFrom(const FaceDetailRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:faceRecognition.FaceDetailRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaceDetailRequest::IsInitialized() const {
  return true;
}

void FaceDetailRequest::Swap(FaceDetailRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FaceDetailRequest::InternalSwap(FaceDetailRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  face_set_id_.Swap(&other->face_set_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  face_token_.Swap(&other->face_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(with_face_img_, other->with_face_img_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FaceDetailRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FaceDetailResponse::InitAsDefaultInstance() {
  ::faceRecognition::_FaceDetailResponse_default_instance_._instance.get_mutable()->face_detail_ = const_cast< ::faceRecognition::FaceDetail*>(
      ::faceRecognition::FaceDetail::internal_default_instance());
}
class FaceDetailResponse::HasBitSetters {
 public:
  static const ::faceRecognition::FaceDetail& face_detail(const FaceDetailResponse* msg);
};

const ::faceRecognition::FaceDetail&
FaceDetailResponse::HasBitSetters::face_detail(const FaceDetailResponse* msg) {
  return *msg->face_detail_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FaceDetailResponse::kFaceDetailFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FaceDetailResponse::FaceDetailResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:faceRecognition.FaceDetailResponse)
}
FaceDetailResponse::FaceDetailResponse(const FaceDetailResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_face_detail()) {
    face_detail_ = new ::faceRecognition::FaceDetail(*from.face_detail_);
  } else {
    face_detail_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:faceRecognition.FaceDetailResponse)
}

void FaceDetailResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FaceDetailResponse_faceset_2eproto.base);
  face_detail_ = nullptr;
}

FaceDetailResponse::~FaceDetailResponse() {
  // @@protoc_insertion_point(destructor:faceRecognition.FaceDetailResponse)
  SharedDtor();
}

void FaceDetailResponse::SharedDtor() {
  if (this != internal_default_instance()) delete face_detail_;
}

void FaceDetailResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FaceDetailResponse& FaceDetailResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FaceDetailResponse_faceset_2eproto.base);
  return *internal_default_instance();
}


void FaceDetailResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:faceRecognition.FaceDetailResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && face_detail_ != nullptr) {
    delete face_detail_;
  }
  face_detail_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FaceDetailResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .faceRecognition.FaceDetail face_detail = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_face_detail(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FaceDetailResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:faceRecognition.FaceDetailResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .faceRecognition.FaceDetail face_detail = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_face_detail()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:faceRecognition.FaceDetailResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:faceRecognition.FaceDetailResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FaceDetailResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:faceRecognition.FaceDetailResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .faceRecognition.FaceDetail face_detail = 1;
  if (this->has_face_detail()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::face_detail(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:faceRecognition.FaceDetailResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* FaceDetailResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:faceRecognition.FaceDetailResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .faceRecognition.FaceDetail face_detail = 1;
  if (this->has_face_detail()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::face_detail(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:faceRecognition.FaceDetailResponse)
  return target;
}

size_t FaceDetailResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:faceRecognition.FaceDetailResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .faceRecognition.FaceDetail face_detail = 1;
  if (this->has_face_detail()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *face_detail_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FaceDetailResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:faceRecognition.FaceDetailResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const FaceDetailResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FaceDetailResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:faceRecognition.FaceDetailResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:faceRecognition.FaceDetailResponse)
    MergeFrom(*source);
  }
}

void FaceDetailResponse::MergeFrom(const FaceDetailResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:faceRecognition.FaceDetailResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_face_detail()) {
    mutable_face_detail()->::faceRecognition::FaceDetail::MergeFrom(from.face_detail());
  }
}

void FaceDetailResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:faceRecognition.FaceDetailResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FaceDetailResponse::CopyFrom(const FaceDetailResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:faceRecognition.FaceDetailResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaceDetailResponse::IsInitialized() const {
  return true;
}

void FaceDetailResponse::Swap(FaceDetailResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FaceDetailResponse::InternalSwap(FaceDetailResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(face_detail_, other->face_detail_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FaceDetailResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListFaceDetailsRequest::InitAsDefaultInstance() {
}
class ListFaceDetailsRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListFaceDetailsRequest::kFaceSetIdFieldNumber;
const int ListFaceDetailsRequest::kLimitFieldNumber;
const int ListFaceDetailsRequest::kOffsetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListFaceDetailsRequest::ListFaceDetailsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:faceRecognition.ListFaceDetailsRequest)
}
ListFaceDetailsRequest::ListFaceDetailsRequest(const ListFaceDetailsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  face_set_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.face_set_id().size() > 0) {
    face_set_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.face_set_id_);
  }
  ::memcpy(&limit_, &from.limit_,
    static_cast<size_t>(reinterpret_cast<char*>(&offset_) -
    reinterpret_cast<char*>(&limit_)) + sizeof(offset_));
  // @@protoc_insertion_point(copy_constructor:faceRecognition.ListFaceDetailsRequest)
}

void ListFaceDetailsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListFaceDetailsRequest_faceset_2eproto.base);
  face_set_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&limit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offset_) -
      reinterpret_cast<char*>(&limit_)) + sizeof(offset_));
}

ListFaceDetailsRequest::~ListFaceDetailsRequest() {
  // @@protoc_insertion_point(destructor:faceRecognition.ListFaceDetailsRequest)
  SharedDtor();
}

void ListFaceDetailsRequest::SharedDtor() {
  face_set_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListFaceDetailsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListFaceDetailsRequest& ListFaceDetailsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListFaceDetailsRequest_faceset_2eproto.base);
  return *internal_default_instance();
}


void ListFaceDetailsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:faceRecognition.ListFaceDetailsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  face_set_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&limit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offset_) -
      reinterpret_cast<char*>(&limit_)) + sizeof(offset_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ListFaceDetailsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string face_set_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_face_set_id(), ptr, ctx, "faceRecognition.ListFaceDetailsRequest.face_set_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 limit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 offset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ListFaceDetailsRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:faceRecognition.ListFaceDetailsRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string face_set_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_face_set_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->face_set_id().data(), static_cast<int>(this->face_set_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "faceRecognition.ListFaceDetailsRequest.face_set_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 limit = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 offset = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:faceRecognition.ListFaceDetailsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:faceRecognition.ListFaceDetailsRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ListFaceDetailsRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:faceRecognition.ListFaceDetailsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string face_set_id = 1;
  if (this->face_set_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->face_set_id().data(), static_cast<int>(this->face_set_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "faceRecognition.ListFaceDetailsRequest.face_set_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->face_set_id(), output);
  }

  // uint32 limit = 2;
  if (this->limit() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->limit(), output);
  }

  // uint32 offset = 3;
  if (this->offset() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->offset(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:faceRecognition.ListFaceDetailsRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* ListFaceDetailsRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:faceRecognition.ListFaceDetailsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string face_set_id = 1;
  if (this->face_set_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->face_set_id().data(), static_cast<int>(this->face_set_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "faceRecognition.ListFaceDetailsRequest.face_set_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->face_set_id(), target);
  }

  // uint32 limit = 2;
  if (this->limit() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->limit(), target);
  }

  // uint32 offset = 3;
  if (this->offset() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->offset(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:faceRecognition.ListFaceDetailsRequest)
  return target;
}

size_t ListFaceDetailsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:faceRecognition.ListFaceDetailsRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string face_set_id = 1;
  if (this->face_set_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->face_set_id());
  }

  // uint32 limit = 2;
  if (this->limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->limit());
  }

  // uint32 offset = 3;
  if (this->offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->offset());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListFaceDetailsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:faceRecognition.ListFaceDetailsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListFaceDetailsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListFaceDetailsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:faceRecognition.ListFaceDetailsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:faceRecognition.ListFaceDetailsRequest)
    MergeFrom(*source);
  }
}

void ListFaceDetailsRequest::MergeFrom(const ListFaceDetailsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:faceRecognition.ListFaceDetailsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.face_set_id().size() > 0) {

    face_set_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.face_set_id_);
  }
  if (from.limit() != 0) {
    set_limit(from.limit());
  }
  if (from.offset() != 0) {
    set_offset(from.offset());
  }
}

void ListFaceDetailsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:faceRecognition.ListFaceDetailsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListFaceDetailsRequest::CopyFrom(const ListFaceDetailsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:faceRecognition.ListFaceDetailsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListFaceDetailsRequest::IsInitialized() const {
  return true;
}

void ListFaceDetailsRequest::Swap(ListFaceDetailsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListFaceDetailsRequest::InternalSwap(ListFaceDetailsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  face_set_id_.Swap(&other->face_set_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(limit_, other->limit_);
  swap(offset_, other->offset_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListFaceDetailsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListFaceDetailsResponse::InitAsDefaultInstance() {
  ::faceRecognition::_ListFaceDetailsResponse_default_instance_._instance.get_mutable()->face_set_ = const_cast< ::faceRecognition::FaceSet*>(
      ::faceRecognition::FaceSet::internal_default_instance());
}
class ListFaceDetailsResponse::HasBitSetters {
 public:
  static const ::faceRecognition::FaceSet& face_set(const ListFaceDetailsResponse* msg);
};

const ::faceRecognition::FaceSet&
ListFaceDetailsResponse::HasBitSetters::face_set(const ListFaceDetailsResponse* msg) {
  return *msg->face_set_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListFaceDetailsResponse::kFaceSetFieldNumber;
const int ListFaceDetailsResponse::kFaceDetailsFieldNumber;
const int ListFaceDetailsResponse::kTotalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListFaceDetailsResponse::ListFaceDetailsResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:faceRecognition.ListFaceDetailsResponse)
}
ListFaceDetailsResponse::ListFaceDetailsResponse(const ListFaceDetailsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      face_details_(from.face_details_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_face_set()) {
    face_set_ = new ::faceRecognition::FaceSet(*from.face_set_);
  } else {
    face_set_ = nullptr;
  }
  total_ = from.total_;
  // @@protoc_insertion_point(copy_constructor:faceRecognition.ListFaceDetailsResponse)
}

void ListFaceDetailsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListFaceDetailsResponse_faceset_2eproto.base);
  ::memset(&face_set_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_) -
      reinterpret_cast<char*>(&face_set_)) + sizeof(total_));
}

ListFaceDetailsResponse::~ListFaceDetailsResponse() {
  // @@protoc_insertion_point(destructor:faceRecognition.ListFaceDetailsResponse)
  SharedDtor();
}

void ListFaceDetailsResponse::SharedDtor() {
  if (this != internal_default_instance()) delete face_set_;
}

void ListFaceDetailsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListFaceDetailsResponse& ListFaceDetailsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListFaceDetailsResponse_faceset_2eproto.base);
  return *internal_default_instance();
}


void ListFaceDetailsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:faceRecognition.ListFaceDetailsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  face_details_.Clear();
  if (GetArenaNoVirtual() == nullptr && face_set_ != nullptr) {
    delete face_set_;
  }
  face_set_ = nullptr;
  total_ = 0u;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ListFaceDetailsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .faceRecognition.FaceSet face_set = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_face_set(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .faceRecognition.FaceDetail face_details = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_face_details(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // uint32 total = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ListFaceDetailsResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:faceRecognition.ListFaceDetailsResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .faceRecognition.FaceSet face_set = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_face_set()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .faceRecognition.FaceDetail face_details = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_face_details()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 total = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:faceRecognition.ListFaceDetailsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:faceRecognition.ListFaceDetailsResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ListFaceDetailsResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:faceRecognition.ListFaceDetailsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .faceRecognition.FaceSet face_set = 1;
  if (this->has_face_set()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::face_set(this), output);
  }

  // repeated .faceRecognition.FaceDetail face_details = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->face_details_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->face_details(static_cast<int>(i)),
      output);
  }

  // uint32 total = 3;
  if (this->total() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->total(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:faceRecognition.ListFaceDetailsResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* ListFaceDetailsResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:faceRecognition.ListFaceDetailsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .faceRecognition.FaceSet face_set = 1;
  if (this->has_face_set()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::face_set(this), target);
  }

  // repeated .faceRecognition.FaceDetail face_details = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->face_details_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->face_details(static_cast<int>(i)), target);
  }

  // uint32 total = 3;
  if (this->total() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->total(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:faceRecognition.ListFaceDetailsResponse)
  return target;
}

size_t ListFaceDetailsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:faceRecognition.ListFaceDetailsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .faceRecognition.FaceDetail face_details = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->face_details_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->face_details(static_cast<int>(i)));
    }
  }

  // .faceRecognition.FaceSet face_set = 1;
  if (this->has_face_set()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *face_set_);
  }

  // uint32 total = 3;
  if (this->total() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->total());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListFaceDetailsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:faceRecognition.ListFaceDetailsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListFaceDetailsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListFaceDetailsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:faceRecognition.ListFaceDetailsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:faceRecognition.ListFaceDetailsResponse)
    MergeFrom(*source);
  }
}

void ListFaceDetailsResponse::MergeFrom(const ListFaceDetailsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:faceRecognition.ListFaceDetailsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  face_details_.MergeFrom(from.face_details_);
  if (from.has_face_set()) {
    mutable_face_set()->::faceRecognition::FaceSet::MergeFrom(from.face_set());
  }
  if (from.total() != 0) {
    set_total(from.total());
  }
}

void ListFaceDetailsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:faceRecognition.ListFaceDetailsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListFaceDetailsResponse::CopyFrom(const ListFaceDetailsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:faceRecognition.ListFaceDetailsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListFaceDetailsResponse::IsInitialized() const {
  return true;
}

void ListFaceDetailsResponse::Swap(ListFaceDetailsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListFaceDetailsResponse::InternalSwap(ListFaceDetailsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&face_details_)->InternalSwap(CastToBase(&other->face_details_));
  swap(face_set_, other->face_set_);
  swap(total_, other->total_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListFaceDetailsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace faceRecognition
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::faceRecognition::FaceSet* Arena::CreateMaybeMessage< ::faceRecognition::FaceSet >(Arena* arena) {
  return Arena::CreateInternal< ::faceRecognition::FaceSet >(arena);
}
template<> PROTOBUF_NOINLINE ::faceRecognition::FaceDetail_DetailEntry_DoNotUse* Arena::CreateMaybeMessage< ::faceRecognition::FaceDetail_DetailEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::faceRecognition::FaceDetail_DetailEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::faceRecognition::FaceDetail* Arena::CreateMaybeMessage< ::faceRecognition::FaceDetail >(Arena* arena) {
  return Arena::CreateInternal< ::faceRecognition::FaceDetail >(arena);
}
template<> PROTOBUF_NOINLINE ::faceRecognition::NewFaceSetRequest* Arena::CreateMaybeMessage< ::faceRecognition::NewFaceSetRequest >(Arena* arena) {
  return Arena::CreateInternal< ::faceRecognition::NewFaceSetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::faceRecognition::NewFaceSetResponse* Arena::CreateMaybeMessage< ::faceRecognition::NewFaceSetResponse >(Arena* arena) {
  return Arena::CreateInternal< ::faceRecognition::NewFaceSetResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::faceRecognition::DeleteFaceSetRequest* Arena::CreateMaybeMessage< ::faceRecognition::DeleteFaceSetRequest >(Arena* arena) {
  return Arena::CreateInternal< ::faceRecognition::DeleteFaceSetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::faceRecognition::DeleteFaceSetResponse* Arena::CreateMaybeMessage< ::faceRecognition::DeleteFaceSetResponse >(Arena* arena) {
  return Arena::CreateInternal< ::faceRecognition::DeleteFaceSetResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::faceRecognition::UpdateFaceSetRequest* Arena::CreateMaybeMessage< ::faceRecognition::UpdateFaceSetRequest >(Arena* arena) {
  return Arena::CreateInternal< ::faceRecognition::UpdateFaceSetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::faceRecognition::UpdateFaceSetResponse* Arena::CreateMaybeMessage< ::faceRecognition::UpdateFaceSetResponse >(Arena* arena) {
  return Arena::CreateInternal< ::faceRecognition::UpdateFaceSetResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::faceRecognition::ListFaceSetsRequest* Arena::CreateMaybeMessage< ::faceRecognition::ListFaceSetsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::faceRecognition::ListFaceSetsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::faceRecognition::ListFaceSetsResponse* Arena::CreateMaybeMessage< ::faceRecognition::ListFaceSetsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::faceRecognition::ListFaceSetsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::faceRecognition::AddFaceRequest_DetailEntry_DoNotUse* Arena::CreateMaybeMessage< ::faceRecognition::AddFaceRequest_DetailEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::faceRecognition::AddFaceRequest_DetailEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::faceRecognition::AddFaceRequest* Arena::CreateMaybeMessage< ::faceRecognition::AddFaceRequest >(Arena* arena) {
  return Arena::CreateInternal< ::faceRecognition::AddFaceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::faceRecognition::AddFaceResponse* Arena::CreateMaybeMessage< ::faceRecognition::AddFaceResponse >(Arena* arena) {
  return Arena::CreateInternal< ::faceRecognition::AddFaceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::faceRecognition::RemoveFaceRequest* Arena::CreateMaybeMessage< ::faceRecognition::RemoveFaceRequest >(Arena* arena) {
  return Arena::CreateInternal< ::faceRecognition::RemoveFaceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::faceRecognition::RemoveFaceResponse* Arena::CreateMaybeMessage< ::faceRecognition::RemoveFaceResponse >(Arena* arena) {
  return Arena::CreateInternal< ::faceRecognition::RemoveFaceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::faceRecognition::FaceDetailRequest* Arena::CreateMaybeMessage< ::faceRecognition::FaceDetailRequest >(Arena* arena) {
  return Arena::CreateInternal< ::faceRecognition::FaceDetailRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::faceRecognition::FaceDetailResponse* Arena::CreateMaybeMessage< ::faceRecognition::FaceDetailResponse >(Arena* arena) {
  return Arena::CreateInternal< ::faceRecognition::FaceDetailResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::faceRecognition::ListFaceDetailsRequest* Arena::CreateMaybeMessage< ::faceRecognition::ListFaceDetailsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::faceRecognition::ListFaceDetailsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::faceRecognition::ListFaceDetailsResponse* Arena::CreateMaybeMessage< ::faceRecognition::ListFaceDetailsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::faceRecognition::ListFaceDetailsResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
