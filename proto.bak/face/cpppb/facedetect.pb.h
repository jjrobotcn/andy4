// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: facedetect.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_facedetect_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_facedetect_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_facedetect_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_facedetect_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_facedetect_2eproto;
namespace faceRecognition {
class FacePosition;
class FacePositionDefaultTypeInternal;
extern FacePositionDefaultTypeInternal _FacePosition_default_instance_;
class FromImageRequest;
class FromImageRequestDefaultTypeInternal;
extern FromImageRequestDefaultTypeInternal _FromImageRequest_default_instance_;
class FromImageResponse;
class FromImageResponseDefaultTypeInternal;
extern FromImageResponseDefaultTypeInternal _FromImageResponse_default_instance_;
class OnFaceDetectRequest;
class OnFaceDetectRequestDefaultTypeInternal;
extern OnFaceDetectRequestDefaultTypeInternal _OnFaceDetectRequest_default_instance_;
class OnFaceDetectResponse;
class OnFaceDetectResponseDefaultTypeInternal;
extern OnFaceDetectResponseDefaultTypeInternal _OnFaceDetectResponse_default_instance_;
class OnFaceSetFaceDetectRequest;
class OnFaceSetFaceDetectRequestDefaultTypeInternal;
extern OnFaceSetFaceDetectRequestDefaultTypeInternal _OnFaceSetFaceDetectRequest_default_instance_;
class OnFaceSetFaceDetectResponse;
class OnFaceSetFaceDetectResponseDefaultTypeInternal;
extern OnFaceSetFaceDetectResponseDefaultTypeInternal _OnFaceSetFaceDetectResponse_default_instance_;
}  // namespace faceRecognition
PROTOBUF_NAMESPACE_OPEN
template<> ::faceRecognition::FacePosition* Arena::CreateMaybeMessage<::faceRecognition::FacePosition>(Arena*);
template<> ::faceRecognition::FromImageRequest* Arena::CreateMaybeMessage<::faceRecognition::FromImageRequest>(Arena*);
template<> ::faceRecognition::FromImageResponse* Arena::CreateMaybeMessage<::faceRecognition::FromImageResponse>(Arena*);
template<> ::faceRecognition::OnFaceDetectRequest* Arena::CreateMaybeMessage<::faceRecognition::OnFaceDetectRequest>(Arena*);
template<> ::faceRecognition::OnFaceDetectResponse* Arena::CreateMaybeMessage<::faceRecognition::OnFaceDetectResponse>(Arena*);
template<> ::faceRecognition::OnFaceSetFaceDetectRequest* Arena::CreateMaybeMessage<::faceRecognition::OnFaceSetFaceDetectRequest>(Arena*);
template<> ::faceRecognition::OnFaceSetFaceDetectResponse* Arena::CreateMaybeMessage<::faceRecognition::OnFaceSetFaceDetectResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace faceRecognition {

enum Gender : int {
  GENDER_UNKNOWN = 0,
  GENDER_MALE = 1,
  GENDER_FEMALE = 2,
  Gender_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Gender_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Gender_IsValid(int value);
constexpr Gender Gender_MIN = GENDER_UNKNOWN;
constexpr Gender Gender_MAX = GENDER_FEMALE;
constexpr int Gender_ARRAYSIZE = Gender_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Gender_descriptor();
template<typename T>
inline const std::string& Gender_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Gender>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Gender_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Gender_descriptor(), enum_t_value);
}
inline bool Gender_Parse(
    const std::string& name, Gender* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Gender>(
    Gender_descriptor(), name, value);
}
// ===================================================================

class FacePosition :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:faceRecognition.FacePosition) */ {
 public:
  FacePosition();
  virtual ~FacePosition();

  FacePosition(const FacePosition& from);
  FacePosition(FacePosition&& from) noexcept
    : FacePosition() {
    *this = ::std::move(from);
  }

  inline FacePosition& operator=(const FacePosition& from) {
    CopyFrom(from);
    return *this;
  }
  inline FacePosition& operator=(FacePosition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FacePosition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FacePosition* internal_default_instance() {
    return reinterpret_cast<const FacePosition*>(
               &_FacePosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(FacePosition* other);
  friend void swap(FacePosition& a, FacePosition& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FacePosition* New() const final {
    return CreateMaybeMessage<FacePosition>(nullptr);
  }

  FacePosition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FacePosition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FacePosition& from);
  void MergeFrom(const FacePosition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FacePosition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "faceRecognition.FacePosition";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_facedetect_2eproto);
    return ::descriptor_table_facedetect_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint32 x() const;
  void set_x(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint32 y() const;
  void set_y(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:faceRecognition.FacePosition)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 x_;
  ::PROTOBUF_NAMESPACE_ID::uint32 y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_facedetect_2eproto;
};
// -------------------------------------------------------------------

class FromImageRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:faceRecognition.FromImageRequest) */ {
 public:
  FromImageRequest();
  virtual ~FromImageRequest();

  FromImageRequest(const FromImageRequest& from);
  FromImageRequest(FromImageRequest&& from) noexcept
    : FromImageRequest() {
    *this = ::std::move(from);
  }

  inline FromImageRequest& operator=(const FromImageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FromImageRequest& operator=(FromImageRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FromImageRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FromImageRequest* internal_default_instance() {
    return reinterpret_cast<const FromImageRequest*>(
               &_FromImageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(FromImageRequest* other);
  friend void swap(FromImageRequest& a, FromImageRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FromImageRequest* New() const final {
    return CreateMaybeMessage<FromImageRequest>(nullptr);
  }

  FromImageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FromImageRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FromImageRequest& from);
  void MergeFrom(const FromImageRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FromImageRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "faceRecognition.FromImageRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_facedetect_2eproto);
    return ::descriptor_table_facedetect_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes image = 1;
  void clear_image();
  static const int kImageFieldNumber = 1;
  const std::string& image() const;
  void set_image(const std::string& value);
  void set_image(std::string&& value);
  void set_image(const char* value);
  void set_image(const void* value, size_t size);
  std::string* mutable_image();
  std::string* release_image();
  void set_allocated_image(std::string* image);

  // bool with_gender = 2;
  void clear_with_gender();
  static const int kWithGenderFieldNumber = 2;
  bool with_gender() const;
  void set_with_gender(bool value);

  // bool with_age = 3;
  void clear_with_age();
  static const int kWithAgeFieldNumber = 3;
  bool with_age() const;
  void set_with_age(bool value);

  // bool with_position = 4;
  void clear_with_position();
  static const int kWithPositionFieldNumber = 4;
  bool with_position() const;
  void set_with_position(bool value);

  // bool with_face_crop_width = 5;
  void clear_with_face_crop_width();
  static const int kWithFaceCropWidthFieldNumber = 5;
  bool with_face_crop_width() const;
  void set_with_face_crop_width(bool value);

  // @@protoc_insertion_point(class_scope:faceRecognition.FromImageRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_;
  bool with_gender_;
  bool with_age_;
  bool with_position_;
  bool with_face_crop_width_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_facedetect_2eproto;
};
// -------------------------------------------------------------------

class FromImageResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:faceRecognition.FromImageResponse) */ {
 public:
  FromImageResponse();
  virtual ~FromImageResponse();

  FromImageResponse(const FromImageResponse& from);
  FromImageResponse(FromImageResponse&& from) noexcept
    : FromImageResponse() {
    *this = ::std::move(from);
  }

  inline FromImageResponse& operator=(const FromImageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FromImageResponse& operator=(FromImageResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FromImageResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FromImageResponse* internal_default_instance() {
    return reinterpret_cast<const FromImageResponse*>(
               &_FromImageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(FromImageResponse* other);
  friend void swap(FromImageResponse& a, FromImageResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FromImageResponse* New() const final {
    return CreateMaybeMessage<FromImageResponse>(nullptr);
  }

  FromImageResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FromImageResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FromImageResponse& from);
  void MergeFrom(const FromImageResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FromImageResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "faceRecognition.FromImageResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_facedetect_2eproto);
    return ::descriptor_table_facedetect_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes face_crops = 1;
  int face_crops_size() const;
  void clear_face_crops();
  static const int kFaceCropsFieldNumber = 1;
  const std::string& face_crops(int index) const;
  std::string* mutable_face_crops(int index);
  void set_face_crops(int index, const std::string& value);
  void set_face_crops(int index, std::string&& value);
  void set_face_crops(int index, const char* value);
  void set_face_crops(int index, const void* value, size_t size);
  std::string* add_face_crops();
  void add_face_crops(const std::string& value);
  void add_face_crops(std::string&& value);
  void add_face_crops(const char* value);
  void add_face_crops(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& face_crops() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_face_crops();

  // repeated .faceRecognition.Gender genders = 2;
  int genders_size() const;
  void clear_genders();
  static const int kGendersFieldNumber = 2;
  ::faceRecognition::Gender genders(int index) const;
  void set_genders(int index, ::faceRecognition::Gender value);
  void add_genders(::faceRecognition::Gender value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& genders() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_genders();

  // repeated int32 ages = 3;
  int ages_size() const;
  void clear_ages();
  static const int kAgesFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 ages(int index) const;
  void set_ages(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_ages(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      ages() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_ages();

  // repeated .faceRecognition.FacePosition positions = 4;
  int positions_size() const;
  void clear_positions();
  static const int kPositionsFieldNumber = 4;
  ::faceRecognition::FacePosition* mutable_positions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::faceRecognition::FacePosition >*
      mutable_positions();
  const ::faceRecognition::FacePosition& positions(int index) const;
  ::faceRecognition::FacePosition* add_positions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::faceRecognition::FacePosition >&
      positions() const;

  // repeated uint32 face_crop_widths = 5;
  int face_crop_widths_size() const;
  void clear_face_crop_widths();
  static const int kFaceCropWidthsFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::uint32 face_crop_widths(int index) const;
  void set_face_crop_widths(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_face_crop_widths(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      face_crop_widths() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_face_crop_widths();

  // @@protoc_insertion_point(class_scope:faceRecognition.FromImageResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> face_crops_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> genders_;
  mutable std::atomic<int> _genders_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > ages_;
  mutable std::atomic<int> _ages_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::faceRecognition::FacePosition > positions_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > face_crop_widths_;
  mutable std::atomic<int> _face_crop_widths_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_facedetect_2eproto;
};
// -------------------------------------------------------------------

class OnFaceDetectRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:faceRecognition.OnFaceDetectRequest) */ {
 public:
  OnFaceDetectRequest();
  virtual ~OnFaceDetectRequest();

  OnFaceDetectRequest(const OnFaceDetectRequest& from);
  OnFaceDetectRequest(OnFaceDetectRequest&& from) noexcept
    : OnFaceDetectRequest() {
    *this = ::std::move(from);
  }

  inline OnFaceDetectRequest& operator=(const OnFaceDetectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OnFaceDetectRequest& operator=(OnFaceDetectRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OnFaceDetectRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OnFaceDetectRequest* internal_default_instance() {
    return reinterpret_cast<const OnFaceDetectRequest*>(
               &_OnFaceDetectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(OnFaceDetectRequest* other);
  friend void swap(OnFaceDetectRequest& a, OnFaceDetectRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OnFaceDetectRequest* New() const final {
    return CreateMaybeMessage<OnFaceDetectRequest>(nullptr);
  }

  OnFaceDetectRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OnFaceDetectRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OnFaceDetectRequest& from);
  void MergeFrom(const OnFaceDetectRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OnFaceDetectRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "faceRecognition.OnFaceDetectRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_facedetect_2eproto);
    return ::descriptor_table_facedetect_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 interval_millisecond = 1;
  void clear_interval_millisecond();
  static const int kIntervalMillisecondFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint32 interval_millisecond() const;
  void set_interval_millisecond(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // bool with_gender = 2;
  void clear_with_gender();
  static const int kWithGenderFieldNumber = 2;
  bool with_gender() const;
  void set_with_gender(bool value);

  // bool with_age = 3;
  void clear_with_age();
  static const int kWithAgeFieldNumber = 3;
  bool with_age() const;
  void set_with_age(bool value);

  // bool with_position = 4;
  void clear_with_position();
  static const int kWithPositionFieldNumber = 4;
  bool with_position() const;
  void set_with_position(bool value);

  // bool with_face_crop_width = 5;
  void clear_with_face_crop_width();
  static const int kWithFaceCropWidthFieldNumber = 5;
  bool with_face_crop_width() const;
  void set_with_face_crop_width(bool value);

  // @@protoc_insertion_point(class_scope:faceRecognition.OnFaceDetectRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 interval_millisecond_;
  bool with_gender_;
  bool with_age_;
  bool with_position_;
  bool with_face_crop_width_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_facedetect_2eproto;
};
// -------------------------------------------------------------------

class OnFaceDetectResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:faceRecognition.OnFaceDetectResponse) */ {
 public:
  OnFaceDetectResponse();
  virtual ~OnFaceDetectResponse();

  OnFaceDetectResponse(const OnFaceDetectResponse& from);
  OnFaceDetectResponse(OnFaceDetectResponse&& from) noexcept
    : OnFaceDetectResponse() {
    *this = ::std::move(from);
  }

  inline OnFaceDetectResponse& operator=(const OnFaceDetectResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline OnFaceDetectResponse& operator=(OnFaceDetectResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OnFaceDetectResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OnFaceDetectResponse* internal_default_instance() {
    return reinterpret_cast<const OnFaceDetectResponse*>(
               &_OnFaceDetectResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(OnFaceDetectResponse* other);
  friend void swap(OnFaceDetectResponse& a, OnFaceDetectResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OnFaceDetectResponse* New() const final {
    return CreateMaybeMessage<OnFaceDetectResponse>(nullptr);
  }

  OnFaceDetectResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OnFaceDetectResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OnFaceDetectResponse& from);
  void MergeFrom(const OnFaceDetectResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OnFaceDetectResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "faceRecognition.OnFaceDetectResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_facedetect_2eproto);
    return ::descriptor_table_facedetect_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes face_crops = 1;
  int face_crops_size() const;
  void clear_face_crops();
  static const int kFaceCropsFieldNumber = 1;
  const std::string& face_crops(int index) const;
  std::string* mutable_face_crops(int index);
  void set_face_crops(int index, const std::string& value);
  void set_face_crops(int index, std::string&& value);
  void set_face_crops(int index, const char* value);
  void set_face_crops(int index, const void* value, size_t size);
  std::string* add_face_crops();
  void add_face_crops(const std::string& value);
  void add_face_crops(std::string&& value);
  void add_face_crops(const char* value);
  void add_face_crops(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& face_crops() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_face_crops();

  // repeated .faceRecognition.Gender genders = 2;
  int genders_size() const;
  void clear_genders();
  static const int kGendersFieldNumber = 2;
  ::faceRecognition::Gender genders(int index) const;
  void set_genders(int index, ::faceRecognition::Gender value);
  void add_genders(::faceRecognition::Gender value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& genders() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_genders();

  // repeated int32 ages = 3;
  int ages_size() const;
  void clear_ages();
  static const int kAgesFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 ages(int index) const;
  void set_ages(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_ages(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      ages() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_ages();

  // repeated .faceRecognition.FacePosition positions = 4;
  int positions_size() const;
  void clear_positions();
  static const int kPositionsFieldNumber = 4;
  ::faceRecognition::FacePosition* mutable_positions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::faceRecognition::FacePosition >*
      mutable_positions();
  const ::faceRecognition::FacePosition& positions(int index) const;
  ::faceRecognition::FacePosition* add_positions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::faceRecognition::FacePosition >&
      positions() const;

  // repeated uint32 face_crop_widths = 5;
  int face_crop_widths_size() const;
  void clear_face_crop_widths();
  static const int kFaceCropWidthsFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::uint32 face_crop_widths(int index) const;
  void set_face_crop_widths(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_face_crop_widths(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      face_crop_widths() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_face_crop_widths();

  // @@protoc_insertion_point(class_scope:faceRecognition.OnFaceDetectResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> face_crops_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> genders_;
  mutable std::atomic<int> _genders_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > ages_;
  mutable std::atomic<int> _ages_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::faceRecognition::FacePosition > positions_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > face_crop_widths_;
  mutable std::atomic<int> _face_crop_widths_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_facedetect_2eproto;
};
// -------------------------------------------------------------------

class OnFaceSetFaceDetectRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:faceRecognition.OnFaceSetFaceDetectRequest) */ {
 public:
  OnFaceSetFaceDetectRequest();
  virtual ~OnFaceSetFaceDetectRequest();

  OnFaceSetFaceDetectRequest(const OnFaceSetFaceDetectRequest& from);
  OnFaceSetFaceDetectRequest(OnFaceSetFaceDetectRequest&& from) noexcept
    : OnFaceSetFaceDetectRequest() {
    *this = ::std::move(from);
  }

  inline OnFaceSetFaceDetectRequest& operator=(const OnFaceSetFaceDetectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OnFaceSetFaceDetectRequest& operator=(OnFaceSetFaceDetectRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OnFaceSetFaceDetectRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OnFaceSetFaceDetectRequest* internal_default_instance() {
    return reinterpret_cast<const OnFaceSetFaceDetectRequest*>(
               &_OnFaceSetFaceDetectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(OnFaceSetFaceDetectRequest* other);
  friend void swap(OnFaceSetFaceDetectRequest& a, OnFaceSetFaceDetectRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OnFaceSetFaceDetectRequest* New() const final {
    return CreateMaybeMessage<OnFaceSetFaceDetectRequest>(nullptr);
  }

  OnFaceSetFaceDetectRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OnFaceSetFaceDetectRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OnFaceSetFaceDetectRequest& from);
  void MergeFrom(const OnFaceSetFaceDetectRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OnFaceSetFaceDetectRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "faceRecognition.OnFaceSetFaceDetectRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_facedetect_2eproto);
    return ::descriptor_table_facedetect_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string face_set_id = 1;
  void clear_face_set_id();
  static const int kFaceSetIdFieldNumber = 1;
  const std::string& face_set_id() const;
  void set_face_set_id(const std::string& value);
  void set_face_set_id(std::string&& value);
  void set_face_set_id(const char* value);
  void set_face_set_id(const char* value, size_t size);
  std::string* mutable_face_set_id();
  std::string* release_face_set_id();
  void set_allocated_face_set_id(std::string* face_set_id);

  // bool with_face_crop = 2;
  void clear_with_face_crop();
  static const int kWithFaceCropFieldNumber = 2;
  bool with_face_crop() const;
  void set_with_face_crop(bool value);

  // bool with_gender = 3;
  void clear_with_gender();
  static const int kWithGenderFieldNumber = 3;
  bool with_gender() const;
  void set_with_gender(bool value);

  // bool with_age = 4;
  void clear_with_age();
  static const int kWithAgeFieldNumber = 4;
  bool with_age() const;
  void set_with_age(bool value);

  // bool with_position = 5;
  void clear_with_position();
  static const int kWithPositionFieldNumber = 5;
  bool with_position() const;
  void set_with_position(bool value);

  // uint32 interval_millisecond = 6;
  void clear_interval_millisecond();
  static const int kIntervalMillisecondFieldNumber = 6;
  ::PROTOBUF_NAMESPACE_ID::uint32 interval_millisecond() const;
  void set_interval_millisecond(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // float confidence_min = 7;
  void clear_confidence_min();
  static const int kConfidenceMinFieldNumber = 7;
  float confidence_min() const;
  void set_confidence_min(float value);

  // bool with_face_crop_width = 8;
  void clear_with_face_crop_width();
  static const int kWithFaceCropWidthFieldNumber = 8;
  bool with_face_crop_width() const;
  void set_with_face_crop_width(bool value);

  // @@protoc_insertion_point(class_scope:faceRecognition.OnFaceSetFaceDetectRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr face_set_id_;
  bool with_face_crop_;
  bool with_gender_;
  bool with_age_;
  bool with_position_;
  ::PROTOBUF_NAMESPACE_ID::uint32 interval_millisecond_;
  float confidence_min_;
  bool with_face_crop_width_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_facedetect_2eproto;
};
// -------------------------------------------------------------------

class OnFaceSetFaceDetectResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:faceRecognition.OnFaceSetFaceDetectResponse) */ {
 public:
  OnFaceSetFaceDetectResponse();
  virtual ~OnFaceSetFaceDetectResponse();

  OnFaceSetFaceDetectResponse(const OnFaceSetFaceDetectResponse& from);
  OnFaceSetFaceDetectResponse(OnFaceSetFaceDetectResponse&& from) noexcept
    : OnFaceSetFaceDetectResponse() {
    *this = ::std::move(from);
  }

  inline OnFaceSetFaceDetectResponse& operator=(const OnFaceSetFaceDetectResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline OnFaceSetFaceDetectResponse& operator=(OnFaceSetFaceDetectResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OnFaceSetFaceDetectResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OnFaceSetFaceDetectResponse* internal_default_instance() {
    return reinterpret_cast<const OnFaceSetFaceDetectResponse*>(
               &_OnFaceSetFaceDetectResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(OnFaceSetFaceDetectResponse* other);
  friend void swap(OnFaceSetFaceDetectResponse& a, OnFaceSetFaceDetectResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OnFaceSetFaceDetectResponse* New() const final {
    return CreateMaybeMessage<OnFaceSetFaceDetectResponse>(nullptr);
  }

  OnFaceSetFaceDetectResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OnFaceSetFaceDetectResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OnFaceSetFaceDetectResponse& from);
  void MergeFrom(const OnFaceSetFaceDetectResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OnFaceSetFaceDetectResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "faceRecognition.OnFaceSetFaceDetectResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_facedetect_2eproto);
    return ::descriptor_table_facedetect_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float confidences = 1;
  int confidences_size() const;
  void clear_confidences();
  static const int kConfidencesFieldNumber = 1;
  float confidences(int index) const;
  void set_confidences(int index, float value);
  void add_confidences(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      confidences() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_confidences();

  // repeated string face_tokens = 2;
  int face_tokens_size() const;
  void clear_face_tokens();
  static const int kFaceTokensFieldNumber = 2;
  const std::string& face_tokens(int index) const;
  std::string* mutable_face_tokens(int index);
  void set_face_tokens(int index, const std::string& value);
  void set_face_tokens(int index, std::string&& value);
  void set_face_tokens(int index, const char* value);
  void set_face_tokens(int index, const char* value, size_t size);
  std::string* add_face_tokens();
  void add_face_tokens(const std::string& value);
  void add_face_tokens(std::string&& value);
  void add_face_tokens(const char* value);
  void add_face_tokens(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& face_tokens() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_face_tokens();

  // repeated bytes face_crops = 3;
  int face_crops_size() const;
  void clear_face_crops();
  static const int kFaceCropsFieldNumber = 3;
  const std::string& face_crops(int index) const;
  std::string* mutable_face_crops(int index);
  void set_face_crops(int index, const std::string& value);
  void set_face_crops(int index, std::string&& value);
  void set_face_crops(int index, const char* value);
  void set_face_crops(int index, const void* value, size_t size);
  std::string* add_face_crops();
  void add_face_crops(const std::string& value);
  void add_face_crops(std::string&& value);
  void add_face_crops(const char* value);
  void add_face_crops(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& face_crops() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_face_crops();

  // repeated .faceRecognition.Gender genders = 4;
  int genders_size() const;
  void clear_genders();
  static const int kGendersFieldNumber = 4;
  ::faceRecognition::Gender genders(int index) const;
  void set_genders(int index, ::faceRecognition::Gender value);
  void add_genders(::faceRecognition::Gender value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& genders() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_genders();

  // repeated int32 ages = 5;
  int ages_size() const;
  void clear_ages();
  static const int kAgesFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::int32 ages(int index) const;
  void set_ages(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_ages(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      ages() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_ages();

  // repeated .faceRecognition.FacePosition positions = 6;
  int positions_size() const;
  void clear_positions();
  static const int kPositionsFieldNumber = 6;
  ::faceRecognition::FacePosition* mutable_positions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::faceRecognition::FacePosition >*
      mutable_positions();
  const ::faceRecognition::FacePosition& positions(int index) const;
  ::faceRecognition::FacePosition* add_positions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::faceRecognition::FacePosition >&
      positions() const;

  // repeated uint32 face_crop_widths = 7;
  int face_crop_widths_size() const;
  void clear_face_crop_widths();
  static const int kFaceCropWidthsFieldNumber = 7;
  ::PROTOBUF_NAMESPACE_ID::uint32 face_crop_widths(int index) const;
  void set_face_crop_widths(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_face_crop_widths(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      face_crop_widths() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_face_crop_widths();

  // @@protoc_insertion_point(class_scope:faceRecognition.OnFaceSetFaceDetectResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > confidences_;
  mutable std::atomic<int> _confidences_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> face_tokens_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> face_crops_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> genders_;
  mutable std::atomic<int> _genders_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > ages_;
  mutable std::atomic<int> _ages_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::faceRecognition::FacePosition > positions_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > face_crop_widths_;
  mutable std::atomic<int> _face_crop_widths_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_facedetect_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FacePosition

// uint32 x = 1;
inline void FacePosition::clear_x() {
  x_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FacePosition::x() const {
  // @@protoc_insertion_point(field_get:faceRecognition.FacePosition.x)
  return x_;
}
inline void FacePosition::set_x(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:faceRecognition.FacePosition.x)
}

// uint32 y = 2;
inline void FacePosition::clear_y() {
  y_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FacePosition::y() const {
  // @@protoc_insertion_point(field_get:faceRecognition.FacePosition.y)
  return y_;
}
inline void FacePosition::set_y(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:faceRecognition.FacePosition.y)
}

// -------------------------------------------------------------------

// FromImageRequest

// bytes image = 1;
inline void FromImageRequest::clear_image() {
  image_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FromImageRequest::image() const {
  // @@protoc_insertion_point(field_get:faceRecognition.FromImageRequest.image)
  return image_.GetNoArena();
}
inline void FromImageRequest::set_image(const std::string& value) {
  
  image_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:faceRecognition.FromImageRequest.image)
}
inline void FromImageRequest::set_image(std::string&& value) {
  
  image_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:faceRecognition.FromImageRequest.image)
}
inline void FromImageRequest::set_image(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  image_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:faceRecognition.FromImageRequest.image)
}
inline void FromImageRequest::set_image(const void* value, size_t size) {
  
  image_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:faceRecognition.FromImageRequest.image)
}
inline std::string* FromImageRequest::mutable_image() {
  
  // @@protoc_insertion_point(field_mutable:faceRecognition.FromImageRequest.image)
  return image_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FromImageRequest::release_image() {
  // @@protoc_insertion_point(field_release:faceRecognition.FromImageRequest.image)
  
  return image_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FromImageRequest::set_allocated_image(std::string* image) {
  if (image != nullptr) {
    
  } else {
    
  }
  image_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), image);
  // @@protoc_insertion_point(field_set_allocated:faceRecognition.FromImageRequest.image)
}

// bool with_gender = 2;
inline void FromImageRequest::clear_with_gender() {
  with_gender_ = false;
}
inline bool FromImageRequest::with_gender() const {
  // @@protoc_insertion_point(field_get:faceRecognition.FromImageRequest.with_gender)
  return with_gender_;
}
inline void FromImageRequest::set_with_gender(bool value) {
  
  with_gender_ = value;
  // @@protoc_insertion_point(field_set:faceRecognition.FromImageRequest.with_gender)
}

// bool with_age = 3;
inline void FromImageRequest::clear_with_age() {
  with_age_ = false;
}
inline bool FromImageRequest::with_age() const {
  // @@protoc_insertion_point(field_get:faceRecognition.FromImageRequest.with_age)
  return with_age_;
}
inline void FromImageRequest::set_with_age(bool value) {
  
  with_age_ = value;
  // @@protoc_insertion_point(field_set:faceRecognition.FromImageRequest.with_age)
}

// bool with_position = 4;
inline void FromImageRequest::clear_with_position() {
  with_position_ = false;
}
inline bool FromImageRequest::with_position() const {
  // @@protoc_insertion_point(field_get:faceRecognition.FromImageRequest.with_position)
  return with_position_;
}
inline void FromImageRequest::set_with_position(bool value) {
  
  with_position_ = value;
  // @@protoc_insertion_point(field_set:faceRecognition.FromImageRequest.with_position)
}

// bool with_face_crop_width = 5;
inline void FromImageRequest::clear_with_face_crop_width() {
  with_face_crop_width_ = false;
}
inline bool FromImageRequest::with_face_crop_width() const {
  // @@protoc_insertion_point(field_get:faceRecognition.FromImageRequest.with_face_crop_width)
  return with_face_crop_width_;
}
inline void FromImageRequest::set_with_face_crop_width(bool value) {
  
  with_face_crop_width_ = value;
  // @@protoc_insertion_point(field_set:faceRecognition.FromImageRequest.with_face_crop_width)
}

// -------------------------------------------------------------------

// FromImageResponse

// repeated bytes face_crops = 1;
inline int FromImageResponse::face_crops_size() const {
  return face_crops_.size();
}
inline void FromImageResponse::clear_face_crops() {
  face_crops_.Clear();
}
inline const std::string& FromImageResponse::face_crops(int index) const {
  // @@protoc_insertion_point(field_get:faceRecognition.FromImageResponse.face_crops)
  return face_crops_.Get(index);
}
inline std::string* FromImageResponse::mutable_face_crops(int index) {
  // @@protoc_insertion_point(field_mutable:faceRecognition.FromImageResponse.face_crops)
  return face_crops_.Mutable(index);
}
inline void FromImageResponse::set_face_crops(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:faceRecognition.FromImageResponse.face_crops)
  face_crops_.Mutable(index)->assign(value);
}
inline void FromImageResponse::set_face_crops(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:faceRecognition.FromImageResponse.face_crops)
  face_crops_.Mutable(index)->assign(std::move(value));
}
inline void FromImageResponse::set_face_crops(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  face_crops_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:faceRecognition.FromImageResponse.face_crops)
}
inline void FromImageResponse::set_face_crops(int index, const void* value, size_t size) {
  face_crops_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:faceRecognition.FromImageResponse.face_crops)
}
inline std::string* FromImageResponse::add_face_crops() {
  // @@protoc_insertion_point(field_add_mutable:faceRecognition.FromImageResponse.face_crops)
  return face_crops_.Add();
}
inline void FromImageResponse::add_face_crops(const std::string& value) {
  face_crops_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:faceRecognition.FromImageResponse.face_crops)
}
inline void FromImageResponse::add_face_crops(std::string&& value) {
  face_crops_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:faceRecognition.FromImageResponse.face_crops)
}
inline void FromImageResponse::add_face_crops(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  face_crops_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:faceRecognition.FromImageResponse.face_crops)
}
inline void FromImageResponse::add_face_crops(const void* value, size_t size) {
  face_crops_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:faceRecognition.FromImageResponse.face_crops)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FromImageResponse::face_crops() const {
  // @@protoc_insertion_point(field_list:faceRecognition.FromImageResponse.face_crops)
  return face_crops_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
FromImageResponse::mutable_face_crops() {
  // @@protoc_insertion_point(field_mutable_list:faceRecognition.FromImageResponse.face_crops)
  return &face_crops_;
}

// repeated .faceRecognition.Gender genders = 2;
inline int FromImageResponse::genders_size() const {
  return genders_.size();
}
inline void FromImageResponse::clear_genders() {
  genders_.Clear();
}
inline ::faceRecognition::Gender FromImageResponse::genders(int index) const {
  // @@protoc_insertion_point(field_get:faceRecognition.FromImageResponse.genders)
  return static_cast< ::faceRecognition::Gender >(genders_.Get(index));
}
inline void FromImageResponse::set_genders(int index, ::faceRecognition::Gender value) {
  genders_.Set(index, value);
  // @@protoc_insertion_point(field_set:faceRecognition.FromImageResponse.genders)
}
inline void FromImageResponse::add_genders(::faceRecognition::Gender value) {
  genders_.Add(value);
  // @@protoc_insertion_point(field_add:faceRecognition.FromImageResponse.genders)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
FromImageResponse::genders() const {
  // @@protoc_insertion_point(field_list:faceRecognition.FromImageResponse.genders)
  return genders_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
FromImageResponse::mutable_genders() {
  // @@protoc_insertion_point(field_mutable_list:faceRecognition.FromImageResponse.genders)
  return &genders_;
}

// repeated int32 ages = 3;
inline int FromImageResponse::ages_size() const {
  return ages_.size();
}
inline void FromImageResponse::clear_ages() {
  ages_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FromImageResponse::ages(int index) const {
  // @@protoc_insertion_point(field_get:faceRecognition.FromImageResponse.ages)
  return ages_.Get(index);
}
inline void FromImageResponse::set_ages(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  ages_.Set(index, value);
  // @@protoc_insertion_point(field_set:faceRecognition.FromImageResponse.ages)
}
inline void FromImageResponse::add_ages(::PROTOBUF_NAMESPACE_ID::int32 value) {
  ages_.Add(value);
  // @@protoc_insertion_point(field_add:faceRecognition.FromImageResponse.ages)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
FromImageResponse::ages() const {
  // @@protoc_insertion_point(field_list:faceRecognition.FromImageResponse.ages)
  return ages_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
FromImageResponse::mutable_ages() {
  // @@protoc_insertion_point(field_mutable_list:faceRecognition.FromImageResponse.ages)
  return &ages_;
}

// repeated .faceRecognition.FacePosition positions = 4;
inline int FromImageResponse::positions_size() const {
  return positions_.size();
}
inline void FromImageResponse::clear_positions() {
  positions_.Clear();
}
inline ::faceRecognition::FacePosition* FromImageResponse::mutable_positions(int index) {
  // @@protoc_insertion_point(field_mutable:faceRecognition.FromImageResponse.positions)
  return positions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::faceRecognition::FacePosition >*
FromImageResponse::mutable_positions() {
  // @@protoc_insertion_point(field_mutable_list:faceRecognition.FromImageResponse.positions)
  return &positions_;
}
inline const ::faceRecognition::FacePosition& FromImageResponse::positions(int index) const {
  // @@protoc_insertion_point(field_get:faceRecognition.FromImageResponse.positions)
  return positions_.Get(index);
}
inline ::faceRecognition::FacePosition* FromImageResponse::add_positions() {
  // @@protoc_insertion_point(field_add:faceRecognition.FromImageResponse.positions)
  return positions_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::faceRecognition::FacePosition >&
FromImageResponse::positions() const {
  // @@protoc_insertion_point(field_list:faceRecognition.FromImageResponse.positions)
  return positions_;
}

// repeated uint32 face_crop_widths = 5;
inline int FromImageResponse::face_crop_widths_size() const {
  return face_crop_widths_.size();
}
inline void FromImageResponse::clear_face_crop_widths() {
  face_crop_widths_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FromImageResponse::face_crop_widths(int index) const {
  // @@protoc_insertion_point(field_get:faceRecognition.FromImageResponse.face_crop_widths)
  return face_crop_widths_.Get(index);
}
inline void FromImageResponse::set_face_crop_widths(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  face_crop_widths_.Set(index, value);
  // @@protoc_insertion_point(field_set:faceRecognition.FromImageResponse.face_crop_widths)
}
inline void FromImageResponse::add_face_crop_widths(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  face_crop_widths_.Add(value);
  // @@protoc_insertion_point(field_add:faceRecognition.FromImageResponse.face_crop_widths)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
FromImageResponse::face_crop_widths() const {
  // @@protoc_insertion_point(field_list:faceRecognition.FromImageResponse.face_crop_widths)
  return face_crop_widths_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
FromImageResponse::mutable_face_crop_widths() {
  // @@protoc_insertion_point(field_mutable_list:faceRecognition.FromImageResponse.face_crop_widths)
  return &face_crop_widths_;
}

// -------------------------------------------------------------------

// OnFaceDetectRequest

// uint32 interval_millisecond = 1;
inline void OnFaceDetectRequest::clear_interval_millisecond() {
  interval_millisecond_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OnFaceDetectRequest::interval_millisecond() const {
  // @@protoc_insertion_point(field_get:faceRecognition.OnFaceDetectRequest.interval_millisecond)
  return interval_millisecond_;
}
inline void OnFaceDetectRequest::set_interval_millisecond(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  interval_millisecond_ = value;
  // @@protoc_insertion_point(field_set:faceRecognition.OnFaceDetectRequest.interval_millisecond)
}

// bool with_gender = 2;
inline void OnFaceDetectRequest::clear_with_gender() {
  with_gender_ = false;
}
inline bool OnFaceDetectRequest::with_gender() const {
  // @@protoc_insertion_point(field_get:faceRecognition.OnFaceDetectRequest.with_gender)
  return with_gender_;
}
inline void OnFaceDetectRequest::set_with_gender(bool value) {
  
  with_gender_ = value;
  // @@protoc_insertion_point(field_set:faceRecognition.OnFaceDetectRequest.with_gender)
}

// bool with_age = 3;
inline void OnFaceDetectRequest::clear_with_age() {
  with_age_ = false;
}
inline bool OnFaceDetectRequest::with_age() const {
  // @@protoc_insertion_point(field_get:faceRecognition.OnFaceDetectRequest.with_age)
  return with_age_;
}
inline void OnFaceDetectRequest::set_with_age(bool value) {
  
  with_age_ = value;
  // @@protoc_insertion_point(field_set:faceRecognition.OnFaceDetectRequest.with_age)
}

// bool with_position = 4;
inline void OnFaceDetectRequest::clear_with_position() {
  with_position_ = false;
}
inline bool OnFaceDetectRequest::with_position() const {
  // @@protoc_insertion_point(field_get:faceRecognition.OnFaceDetectRequest.with_position)
  return with_position_;
}
inline void OnFaceDetectRequest::set_with_position(bool value) {
  
  with_position_ = value;
  // @@protoc_insertion_point(field_set:faceRecognition.OnFaceDetectRequest.with_position)
}

// bool with_face_crop_width = 5;
inline void OnFaceDetectRequest::clear_with_face_crop_width() {
  with_face_crop_width_ = false;
}
inline bool OnFaceDetectRequest::with_face_crop_width() const {
  // @@protoc_insertion_point(field_get:faceRecognition.OnFaceDetectRequest.with_face_crop_width)
  return with_face_crop_width_;
}
inline void OnFaceDetectRequest::set_with_face_crop_width(bool value) {
  
  with_face_crop_width_ = value;
  // @@protoc_insertion_point(field_set:faceRecognition.OnFaceDetectRequest.with_face_crop_width)
}

// -------------------------------------------------------------------

// OnFaceDetectResponse

// repeated bytes face_crops = 1;
inline int OnFaceDetectResponse::face_crops_size() const {
  return face_crops_.size();
}
inline void OnFaceDetectResponse::clear_face_crops() {
  face_crops_.Clear();
}
inline const std::string& OnFaceDetectResponse::face_crops(int index) const {
  // @@protoc_insertion_point(field_get:faceRecognition.OnFaceDetectResponse.face_crops)
  return face_crops_.Get(index);
}
inline std::string* OnFaceDetectResponse::mutable_face_crops(int index) {
  // @@protoc_insertion_point(field_mutable:faceRecognition.OnFaceDetectResponse.face_crops)
  return face_crops_.Mutable(index);
}
inline void OnFaceDetectResponse::set_face_crops(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:faceRecognition.OnFaceDetectResponse.face_crops)
  face_crops_.Mutable(index)->assign(value);
}
inline void OnFaceDetectResponse::set_face_crops(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:faceRecognition.OnFaceDetectResponse.face_crops)
  face_crops_.Mutable(index)->assign(std::move(value));
}
inline void OnFaceDetectResponse::set_face_crops(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  face_crops_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:faceRecognition.OnFaceDetectResponse.face_crops)
}
inline void OnFaceDetectResponse::set_face_crops(int index, const void* value, size_t size) {
  face_crops_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:faceRecognition.OnFaceDetectResponse.face_crops)
}
inline std::string* OnFaceDetectResponse::add_face_crops() {
  // @@protoc_insertion_point(field_add_mutable:faceRecognition.OnFaceDetectResponse.face_crops)
  return face_crops_.Add();
}
inline void OnFaceDetectResponse::add_face_crops(const std::string& value) {
  face_crops_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:faceRecognition.OnFaceDetectResponse.face_crops)
}
inline void OnFaceDetectResponse::add_face_crops(std::string&& value) {
  face_crops_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:faceRecognition.OnFaceDetectResponse.face_crops)
}
inline void OnFaceDetectResponse::add_face_crops(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  face_crops_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:faceRecognition.OnFaceDetectResponse.face_crops)
}
inline void OnFaceDetectResponse::add_face_crops(const void* value, size_t size) {
  face_crops_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:faceRecognition.OnFaceDetectResponse.face_crops)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
OnFaceDetectResponse::face_crops() const {
  // @@protoc_insertion_point(field_list:faceRecognition.OnFaceDetectResponse.face_crops)
  return face_crops_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
OnFaceDetectResponse::mutable_face_crops() {
  // @@protoc_insertion_point(field_mutable_list:faceRecognition.OnFaceDetectResponse.face_crops)
  return &face_crops_;
}

// repeated .faceRecognition.Gender genders = 2;
inline int OnFaceDetectResponse::genders_size() const {
  return genders_.size();
}
inline void OnFaceDetectResponse::clear_genders() {
  genders_.Clear();
}
inline ::faceRecognition::Gender OnFaceDetectResponse::genders(int index) const {
  // @@protoc_insertion_point(field_get:faceRecognition.OnFaceDetectResponse.genders)
  return static_cast< ::faceRecognition::Gender >(genders_.Get(index));
}
inline void OnFaceDetectResponse::set_genders(int index, ::faceRecognition::Gender value) {
  genders_.Set(index, value);
  // @@protoc_insertion_point(field_set:faceRecognition.OnFaceDetectResponse.genders)
}
inline void OnFaceDetectResponse::add_genders(::faceRecognition::Gender value) {
  genders_.Add(value);
  // @@protoc_insertion_point(field_add:faceRecognition.OnFaceDetectResponse.genders)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
OnFaceDetectResponse::genders() const {
  // @@protoc_insertion_point(field_list:faceRecognition.OnFaceDetectResponse.genders)
  return genders_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
OnFaceDetectResponse::mutable_genders() {
  // @@protoc_insertion_point(field_mutable_list:faceRecognition.OnFaceDetectResponse.genders)
  return &genders_;
}

// repeated int32 ages = 3;
inline int OnFaceDetectResponse::ages_size() const {
  return ages_.size();
}
inline void OnFaceDetectResponse::clear_ages() {
  ages_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnFaceDetectResponse::ages(int index) const {
  // @@protoc_insertion_point(field_get:faceRecognition.OnFaceDetectResponse.ages)
  return ages_.Get(index);
}
inline void OnFaceDetectResponse::set_ages(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  ages_.Set(index, value);
  // @@protoc_insertion_point(field_set:faceRecognition.OnFaceDetectResponse.ages)
}
inline void OnFaceDetectResponse::add_ages(::PROTOBUF_NAMESPACE_ID::int32 value) {
  ages_.Add(value);
  // @@protoc_insertion_point(field_add:faceRecognition.OnFaceDetectResponse.ages)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
OnFaceDetectResponse::ages() const {
  // @@protoc_insertion_point(field_list:faceRecognition.OnFaceDetectResponse.ages)
  return ages_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
OnFaceDetectResponse::mutable_ages() {
  // @@protoc_insertion_point(field_mutable_list:faceRecognition.OnFaceDetectResponse.ages)
  return &ages_;
}

// repeated .faceRecognition.FacePosition positions = 4;
inline int OnFaceDetectResponse::positions_size() const {
  return positions_.size();
}
inline void OnFaceDetectResponse::clear_positions() {
  positions_.Clear();
}
inline ::faceRecognition::FacePosition* OnFaceDetectResponse::mutable_positions(int index) {
  // @@protoc_insertion_point(field_mutable:faceRecognition.OnFaceDetectResponse.positions)
  return positions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::faceRecognition::FacePosition >*
OnFaceDetectResponse::mutable_positions() {
  // @@protoc_insertion_point(field_mutable_list:faceRecognition.OnFaceDetectResponse.positions)
  return &positions_;
}
inline const ::faceRecognition::FacePosition& OnFaceDetectResponse::positions(int index) const {
  // @@protoc_insertion_point(field_get:faceRecognition.OnFaceDetectResponse.positions)
  return positions_.Get(index);
}
inline ::faceRecognition::FacePosition* OnFaceDetectResponse::add_positions() {
  // @@protoc_insertion_point(field_add:faceRecognition.OnFaceDetectResponse.positions)
  return positions_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::faceRecognition::FacePosition >&
OnFaceDetectResponse::positions() const {
  // @@protoc_insertion_point(field_list:faceRecognition.OnFaceDetectResponse.positions)
  return positions_;
}

// repeated uint32 face_crop_widths = 5;
inline int OnFaceDetectResponse::face_crop_widths_size() const {
  return face_crop_widths_.size();
}
inline void OnFaceDetectResponse::clear_face_crop_widths() {
  face_crop_widths_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OnFaceDetectResponse::face_crop_widths(int index) const {
  // @@protoc_insertion_point(field_get:faceRecognition.OnFaceDetectResponse.face_crop_widths)
  return face_crop_widths_.Get(index);
}
inline void OnFaceDetectResponse::set_face_crop_widths(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  face_crop_widths_.Set(index, value);
  // @@protoc_insertion_point(field_set:faceRecognition.OnFaceDetectResponse.face_crop_widths)
}
inline void OnFaceDetectResponse::add_face_crop_widths(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  face_crop_widths_.Add(value);
  // @@protoc_insertion_point(field_add:faceRecognition.OnFaceDetectResponse.face_crop_widths)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
OnFaceDetectResponse::face_crop_widths() const {
  // @@protoc_insertion_point(field_list:faceRecognition.OnFaceDetectResponse.face_crop_widths)
  return face_crop_widths_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
OnFaceDetectResponse::mutable_face_crop_widths() {
  // @@protoc_insertion_point(field_mutable_list:faceRecognition.OnFaceDetectResponse.face_crop_widths)
  return &face_crop_widths_;
}

// -------------------------------------------------------------------

// OnFaceSetFaceDetectRequest

// string face_set_id = 1;
inline void OnFaceSetFaceDetectRequest::clear_face_set_id() {
  face_set_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& OnFaceSetFaceDetectRequest::face_set_id() const {
  // @@protoc_insertion_point(field_get:faceRecognition.OnFaceSetFaceDetectRequest.face_set_id)
  return face_set_id_.GetNoArena();
}
inline void OnFaceSetFaceDetectRequest::set_face_set_id(const std::string& value) {
  
  face_set_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:faceRecognition.OnFaceSetFaceDetectRequest.face_set_id)
}
inline void OnFaceSetFaceDetectRequest::set_face_set_id(std::string&& value) {
  
  face_set_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:faceRecognition.OnFaceSetFaceDetectRequest.face_set_id)
}
inline void OnFaceSetFaceDetectRequest::set_face_set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  face_set_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:faceRecognition.OnFaceSetFaceDetectRequest.face_set_id)
}
inline void OnFaceSetFaceDetectRequest::set_face_set_id(const char* value, size_t size) {
  
  face_set_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:faceRecognition.OnFaceSetFaceDetectRequest.face_set_id)
}
inline std::string* OnFaceSetFaceDetectRequest::mutable_face_set_id() {
  
  // @@protoc_insertion_point(field_mutable:faceRecognition.OnFaceSetFaceDetectRequest.face_set_id)
  return face_set_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* OnFaceSetFaceDetectRequest::release_face_set_id() {
  // @@protoc_insertion_point(field_release:faceRecognition.OnFaceSetFaceDetectRequest.face_set_id)
  
  return face_set_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void OnFaceSetFaceDetectRequest::set_allocated_face_set_id(std::string* face_set_id) {
  if (face_set_id != nullptr) {
    
  } else {
    
  }
  face_set_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), face_set_id);
  // @@protoc_insertion_point(field_set_allocated:faceRecognition.OnFaceSetFaceDetectRequest.face_set_id)
}

// bool with_face_crop = 2;
inline void OnFaceSetFaceDetectRequest::clear_with_face_crop() {
  with_face_crop_ = false;
}
inline bool OnFaceSetFaceDetectRequest::with_face_crop() const {
  // @@protoc_insertion_point(field_get:faceRecognition.OnFaceSetFaceDetectRequest.with_face_crop)
  return with_face_crop_;
}
inline void OnFaceSetFaceDetectRequest::set_with_face_crop(bool value) {
  
  with_face_crop_ = value;
  // @@protoc_insertion_point(field_set:faceRecognition.OnFaceSetFaceDetectRequest.with_face_crop)
}

// bool with_gender = 3;
inline void OnFaceSetFaceDetectRequest::clear_with_gender() {
  with_gender_ = false;
}
inline bool OnFaceSetFaceDetectRequest::with_gender() const {
  // @@protoc_insertion_point(field_get:faceRecognition.OnFaceSetFaceDetectRequest.with_gender)
  return with_gender_;
}
inline void OnFaceSetFaceDetectRequest::set_with_gender(bool value) {
  
  with_gender_ = value;
  // @@protoc_insertion_point(field_set:faceRecognition.OnFaceSetFaceDetectRequest.with_gender)
}

// bool with_age = 4;
inline void OnFaceSetFaceDetectRequest::clear_with_age() {
  with_age_ = false;
}
inline bool OnFaceSetFaceDetectRequest::with_age() const {
  // @@protoc_insertion_point(field_get:faceRecognition.OnFaceSetFaceDetectRequest.with_age)
  return with_age_;
}
inline void OnFaceSetFaceDetectRequest::set_with_age(bool value) {
  
  with_age_ = value;
  // @@protoc_insertion_point(field_set:faceRecognition.OnFaceSetFaceDetectRequest.with_age)
}

// bool with_position = 5;
inline void OnFaceSetFaceDetectRequest::clear_with_position() {
  with_position_ = false;
}
inline bool OnFaceSetFaceDetectRequest::with_position() const {
  // @@protoc_insertion_point(field_get:faceRecognition.OnFaceSetFaceDetectRequest.with_position)
  return with_position_;
}
inline void OnFaceSetFaceDetectRequest::set_with_position(bool value) {
  
  with_position_ = value;
  // @@protoc_insertion_point(field_set:faceRecognition.OnFaceSetFaceDetectRequest.with_position)
}

// uint32 interval_millisecond = 6;
inline void OnFaceSetFaceDetectRequest::clear_interval_millisecond() {
  interval_millisecond_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OnFaceSetFaceDetectRequest::interval_millisecond() const {
  // @@protoc_insertion_point(field_get:faceRecognition.OnFaceSetFaceDetectRequest.interval_millisecond)
  return interval_millisecond_;
}
inline void OnFaceSetFaceDetectRequest::set_interval_millisecond(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  interval_millisecond_ = value;
  // @@protoc_insertion_point(field_set:faceRecognition.OnFaceSetFaceDetectRequest.interval_millisecond)
}

// float confidence_min = 7;
inline void OnFaceSetFaceDetectRequest::clear_confidence_min() {
  confidence_min_ = 0;
}
inline float OnFaceSetFaceDetectRequest::confidence_min() const {
  // @@protoc_insertion_point(field_get:faceRecognition.OnFaceSetFaceDetectRequest.confidence_min)
  return confidence_min_;
}
inline void OnFaceSetFaceDetectRequest::set_confidence_min(float value) {
  
  confidence_min_ = value;
  // @@protoc_insertion_point(field_set:faceRecognition.OnFaceSetFaceDetectRequest.confidence_min)
}

// bool with_face_crop_width = 8;
inline void OnFaceSetFaceDetectRequest::clear_with_face_crop_width() {
  with_face_crop_width_ = false;
}
inline bool OnFaceSetFaceDetectRequest::with_face_crop_width() const {
  // @@protoc_insertion_point(field_get:faceRecognition.OnFaceSetFaceDetectRequest.with_face_crop_width)
  return with_face_crop_width_;
}
inline void OnFaceSetFaceDetectRequest::set_with_face_crop_width(bool value) {
  
  with_face_crop_width_ = value;
  // @@protoc_insertion_point(field_set:faceRecognition.OnFaceSetFaceDetectRequest.with_face_crop_width)
}

// -------------------------------------------------------------------

// OnFaceSetFaceDetectResponse

// repeated float confidences = 1;
inline int OnFaceSetFaceDetectResponse::confidences_size() const {
  return confidences_.size();
}
inline void OnFaceSetFaceDetectResponse::clear_confidences() {
  confidences_.Clear();
}
inline float OnFaceSetFaceDetectResponse::confidences(int index) const {
  // @@protoc_insertion_point(field_get:faceRecognition.OnFaceSetFaceDetectResponse.confidences)
  return confidences_.Get(index);
}
inline void OnFaceSetFaceDetectResponse::set_confidences(int index, float value) {
  confidences_.Set(index, value);
  // @@protoc_insertion_point(field_set:faceRecognition.OnFaceSetFaceDetectResponse.confidences)
}
inline void OnFaceSetFaceDetectResponse::add_confidences(float value) {
  confidences_.Add(value);
  // @@protoc_insertion_point(field_add:faceRecognition.OnFaceSetFaceDetectResponse.confidences)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
OnFaceSetFaceDetectResponse::confidences() const {
  // @@protoc_insertion_point(field_list:faceRecognition.OnFaceSetFaceDetectResponse.confidences)
  return confidences_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
OnFaceSetFaceDetectResponse::mutable_confidences() {
  // @@protoc_insertion_point(field_mutable_list:faceRecognition.OnFaceSetFaceDetectResponse.confidences)
  return &confidences_;
}

// repeated string face_tokens = 2;
inline int OnFaceSetFaceDetectResponse::face_tokens_size() const {
  return face_tokens_.size();
}
inline void OnFaceSetFaceDetectResponse::clear_face_tokens() {
  face_tokens_.Clear();
}
inline const std::string& OnFaceSetFaceDetectResponse::face_tokens(int index) const {
  // @@protoc_insertion_point(field_get:faceRecognition.OnFaceSetFaceDetectResponse.face_tokens)
  return face_tokens_.Get(index);
}
inline std::string* OnFaceSetFaceDetectResponse::mutable_face_tokens(int index) {
  // @@protoc_insertion_point(field_mutable:faceRecognition.OnFaceSetFaceDetectResponse.face_tokens)
  return face_tokens_.Mutable(index);
}
inline void OnFaceSetFaceDetectResponse::set_face_tokens(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:faceRecognition.OnFaceSetFaceDetectResponse.face_tokens)
  face_tokens_.Mutable(index)->assign(value);
}
inline void OnFaceSetFaceDetectResponse::set_face_tokens(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:faceRecognition.OnFaceSetFaceDetectResponse.face_tokens)
  face_tokens_.Mutable(index)->assign(std::move(value));
}
inline void OnFaceSetFaceDetectResponse::set_face_tokens(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  face_tokens_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:faceRecognition.OnFaceSetFaceDetectResponse.face_tokens)
}
inline void OnFaceSetFaceDetectResponse::set_face_tokens(int index, const char* value, size_t size) {
  face_tokens_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:faceRecognition.OnFaceSetFaceDetectResponse.face_tokens)
}
inline std::string* OnFaceSetFaceDetectResponse::add_face_tokens() {
  // @@protoc_insertion_point(field_add_mutable:faceRecognition.OnFaceSetFaceDetectResponse.face_tokens)
  return face_tokens_.Add();
}
inline void OnFaceSetFaceDetectResponse::add_face_tokens(const std::string& value) {
  face_tokens_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:faceRecognition.OnFaceSetFaceDetectResponse.face_tokens)
}
inline void OnFaceSetFaceDetectResponse::add_face_tokens(std::string&& value) {
  face_tokens_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:faceRecognition.OnFaceSetFaceDetectResponse.face_tokens)
}
inline void OnFaceSetFaceDetectResponse::add_face_tokens(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  face_tokens_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:faceRecognition.OnFaceSetFaceDetectResponse.face_tokens)
}
inline void OnFaceSetFaceDetectResponse::add_face_tokens(const char* value, size_t size) {
  face_tokens_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:faceRecognition.OnFaceSetFaceDetectResponse.face_tokens)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
OnFaceSetFaceDetectResponse::face_tokens() const {
  // @@protoc_insertion_point(field_list:faceRecognition.OnFaceSetFaceDetectResponse.face_tokens)
  return face_tokens_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
OnFaceSetFaceDetectResponse::mutable_face_tokens() {
  // @@protoc_insertion_point(field_mutable_list:faceRecognition.OnFaceSetFaceDetectResponse.face_tokens)
  return &face_tokens_;
}

// repeated bytes face_crops = 3;
inline int OnFaceSetFaceDetectResponse::face_crops_size() const {
  return face_crops_.size();
}
inline void OnFaceSetFaceDetectResponse::clear_face_crops() {
  face_crops_.Clear();
}
inline const std::string& OnFaceSetFaceDetectResponse::face_crops(int index) const {
  // @@protoc_insertion_point(field_get:faceRecognition.OnFaceSetFaceDetectResponse.face_crops)
  return face_crops_.Get(index);
}
inline std::string* OnFaceSetFaceDetectResponse::mutable_face_crops(int index) {
  // @@protoc_insertion_point(field_mutable:faceRecognition.OnFaceSetFaceDetectResponse.face_crops)
  return face_crops_.Mutable(index);
}
inline void OnFaceSetFaceDetectResponse::set_face_crops(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:faceRecognition.OnFaceSetFaceDetectResponse.face_crops)
  face_crops_.Mutable(index)->assign(value);
}
inline void OnFaceSetFaceDetectResponse::set_face_crops(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:faceRecognition.OnFaceSetFaceDetectResponse.face_crops)
  face_crops_.Mutable(index)->assign(std::move(value));
}
inline void OnFaceSetFaceDetectResponse::set_face_crops(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  face_crops_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:faceRecognition.OnFaceSetFaceDetectResponse.face_crops)
}
inline void OnFaceSetFaceDetectResponse::set_face_crops(int index, const void* value, size_t size) {
  face_crops_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:faceRecognition.OnFaceSetFaceDetectResponse.face_crops)
}
inline std::string* OnFaceSetFaceDetectResponse::add_face_crops() {
  // @@protoc_insertion_point(field_add_mutable:faceRecognition.OnFaceSetFaceDetectResponse.face_crops)
  return face_crops_.Add();
}
inline void OnFaceSetFaceDetectResponse::add_face_crops(const std::string& value) {
  face_crops_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:faceRecognition.OnFaceSetFaceDetectResponse.face_crops)
}
inline void OnFaceSetFaceDetectResponse::add_face_crops(std::string&& value) {
  face_crops_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:faceRecognition.OnFaceSetFaceDetectResponse.face_crops)
}
inline void OnFaceSetFaceDetectResponse::add_face_crops(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  face_crops_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:faceRecognition.OnFaceSetFaceDetectResponse.face_crops)
}
inline void OnFaceSetFaceDetectResponse::add_face_crops(const void* value, size_t size) {
  face_crops_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:faceRecognition.OnFaceSetFaceDetectResponse.face_crops)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
OnFaceSetFaceDetectResponse::face_crops() const {
  // @@protoc_insertion_point(field_list:faceRecognition.OnFaceSetFaceDetectResponse.face_crops)
  return face_crops_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
OnFaceSetFaceDetectResponse::mutable_face_crops() {
  // @@protoc_insertion_point(field_mutable_list:faceRecognition.OnFaceSetFaceDetectResponse.face_crops)
  return &face_crops_;
}

// repeated .faceRecognition.Gender genders = 4;
inline int OnFaceSetFaceDetectResponse::genders_size() const {
  return genders_.size();
}
inline void OnFaceSetFaceDetectResponse::clear_genders() {
  genders_.Clear();
}
inline ::faceRecognition::Gender OnFaceSetFaceDetectResponse::genders(int index) const {
  // @@protoc_insertion_point(field_get:faceRecognition.OnFaceSetFaceDetectResponse.genders)
  return static_cast< ::faceRecognition::Gender >(genders_.Get(index));
}
inline void OnFaceSetFaceDetectResponse::set_genders(int index, ::faceRecognition::Gender value) {
  genders_.Set(index, value);
  // @@protoc_insertion_point(field_set:faceRecognition.OnFaceSetFaceDetectResponse.genders)
}
inline void OnFaceSetFaceDetectResponse::add_genders(::faceRecognition::Gender value) {
  genders_.Add(value);
  // @@protoc_insertion_point(field_add:faceRecognition.OnFaceSetFaceDetectResponse.genders)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
OnFaceSetFaceDetectResponse::genders() const {
  // @@protoc_insertion_point(field_list:faceRecognition.OnFaceSetFaceDetectResponse.genders)
  return genders_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
OnFaceSetFaceDetectResponse::mutable_genders() {
  // @@protoc_insertion_point(field_mutable_list:faceRecognition.OnFaceSetFaceDetectResponse.genders)
  return &genders_;
}

// repeated int32 ages = 5;
inline int OnFaceSetFaceDetectResponse::ages_size() const {
  return ages_.size();
}
inline void OnFaceSetFaceDetectResponse::clear_ages() {
  ages_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnFaceSetFaceDetectResponse::ages(int index) const {
  // @@protoc_insertion_point(field_get:faceRecognition.OnFaceSetFaceDetectResponse.ages)
  return ages_.Get(index);
}
inline void OnFaceSetFaceDetectResponse::set_ages(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  ages_.Set(index, value);
  // @@protoc_insertion_point(field_set:faceRecognition.OnFaceSetFaceDetectResponse.ages)
}
inline void OnFaceSetFaceDetectResponse::add_ages(::PROTOBUF_NAMESPACE_ID::int32 value) {
  ages_.Add(value);
  // @@protoc_insertion_point(field_add:faceRecognition.OnFaceSetFaceDetectResponse.ages)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
OnFaceSetFaceDetectResponse::ages() const {
  // @@protoc_insertion_point(field_list:faceRecognition.OnFaceSetFaceDetectResponse.ages)
  return ages_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
OnFaceSetFaceDetectResponse::mutable_ages() {
  // @@protoc_insertion_point(field_mutable_list:faceRecognition.OnFaceSetFaceDetectResponse.ages)
  return &ages_;
}

// repeated .faceRecognition.FacePosition positions = 6;
inline int OnFaceSetFaceDetectResponse::positions_size() const {
  return positions_.size();
}
inline void OnFaceSetFaceDetectResponse::clear_positions() {
  positions_.Clear();
}
inline ::faceRecognition::FacePosition* OnFaceSetFaceDetectResponse::mutable_positions(int index) {
  // @@protoc_insertion_point(field_mutable:faceRecognition.OnFaceSetFaceDetectResponse.positions)
  return positions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::faceRecognition::FacePosition >*
OnFaceSetFaceDetectResponse::mutable_positions() {
  // @@protoc_insertion_point(field_mutable_list:faceRecognition.OnFaceSetFaceDetectResponse.positions)
  return &positions_;
}
inline const ::faceRecognition::FacePosition& OnFaceSetFaceDetectResponse::positions(int index) const {
  // @@protoc_insertion_point(field_get:faceRecognition.OnFaceSetFaceDetectResponse.positions)
  return positions_.Get(index);
}
inline ::faceRecognition::FacePosition* OnFaceSetFaceDetectResponse::add_positions() {
  // @@protoc_insertion_point(field_add:faceRecognition.OnFaceSetFaceDetectResponse.positions)
  return positions_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::faceRecognition::FacePosition >&
OnFaceSetFaceDetectResponse::positions() const {
  // @@protoc_insertion_point(field_list:faceRecognition.OnFaceSetFaceDetectResponse.positions)
  return positions_;
}

// repeated uint32 face_crop_widths = 7;
inline int OnFaceSetFaceDetectResponse::face_crop_widths_size() const {
  return face_crop_widths_.size();
}
inline void OnFaceSetFaceDetectResponse::clear_face_crop_widths() {
  face_crop_widths_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OnFaceSetFaceDetectResponse::face_crop_widths(int index) const {
  // @@protoc_insertion_point(field_get:faceRecognition.OnFaceSetFaceDetectResponse.face_crop_widths)
  return face_crop_widths_.Get(index);
}
inline void OnFaceSetFaceDetectResponse::set_face_crop_widths(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  face_crop_widths_.Set(index, value);
  // @@protoc_insertion_point(field_set:faceRecognition.OnFaceSetFaceDetectResponse.face_crop_widths)
}
inline void OnFaceSetFaceDetectResponse::add_face_crop_widths(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  face_crop_widths_.Add(value);
  // @@protoc_insertion_point(field_add:faceRecognition.OnFaceSetFaceDetectResponse.face_crop_widths)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
OnFaceSetFaceDetectResponse::face_crop_widths() const {
  // @@protoc_insertion_point(field_list:faceRecognition.OnFaceSetFaceDetectResponse.face_crop_widths)
  return face_crop_widths_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
OnFaceSetFaceDetectResponse::mutable_face_crop_widths() {
  // @@protoc_insertion_point(field_mutable_list:faceRecognition.OnFaceSetFaceDetectResponse.face_crop_widths)
  return &face_crop_widths_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace faceRecognition

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::faceRecognition::Gender> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::faceRecognition::Gender>() {
  return ::faceRecognition::Gender_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_facedetect_2eproto
