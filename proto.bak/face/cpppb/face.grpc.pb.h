// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: face.proto
#ifndef GRPC_face_2eproto__INCLUDED
#define GRPC_face_2eproto__INCLUDED

#include "face.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc_impl {
class CompletionQueue;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc_impl

namespace grpc {
namespace experimental {
template <typename RequestT, typename ResponseT>
class MessageAllocator;
}  // namespace experimental
}  // namespace grpc

namespace faceRecognition {

class FaceService final {
 public:
  static constexpr char const* service_full_name() {
    return "faceRecognition.FaceService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Compare方法实现了两张人脸图片对比识别，返回两图片的对比可信度
    virtual ::grpc::Status Compare(::grpc::ClientContext* context, const ::faceRecognition::CompareRequest& request, ::faceRecognition::CompareResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::faceRecognition::CompareResponse>> AsyncCompare(::grpc::ClientContext* context, const ::faceRecognition::CompareRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::faceRecognition::CompareResponse>>(AsyncCompareRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::faceRecognition::CompareResponse>> PrepareAsyncCompare(::grpc::ClientContext* context, const ::faceRecognition::CompareRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::faceRecognition::CompareResponse>>(PrepareAsyncCompareRaw(context, request, cq));
    }
    // Search方法实现搜索FaceSet中近似人脸数据，
    // 若存在匹配数据时返回一个FaceDetail及其confidence
    virtual ::grpc::Status Search(::grpc::ClientContext* context, const ::faceRecognition::SearchRequest& request, ::faceRecognition::SearchResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::faceRecognition::SearchResponse>> AsyncSearch(::grpc::ClientContext* context, const ::faceRecognition::SearchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::faceRecognition::SearchResponse>>(AsyncSearchRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::faceRecognition::SearchResponse>> PrepareAsyncSearch(::grpc::ClientContext* context, const ::faceRecognition::SearchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::faceRecognition::SearchResponse>>(PrepareAsyncSearchRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Compare方法实现了两张人脸图片对比识别，返回两图片的对比可信度
      virtual void Compare(::grpc::ClientContext* context, const ::faceRecognition::CompareRequest* request, ::faceRecognition::CompareResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Compare(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::faceRecognition::CompareResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Compare(::grpc::ClientContext* context, const ::faceRecognition::CompareRequest* request, ::faceRecognition::CompareResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Compare(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::faceRecognition::CompareResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // Search方法实现搜索FaceSet中近似人脸数据，
      // 若存在匹配数据时返回一个FaceDetail及其confidence
      virtual void Search(::grpc::ClientContext* context, const ::faceRecognition::SearchRequest* request, ::faceRecognition::SearchResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Search(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::faceRecognition::SearchResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Search(::grpc::ClientContext* context, const ::faceRecognition::SearchRequest* request, ::faceRecognition::SearchResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Search(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::faceRecognition::SearchResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::faceRecognition::CompareResponse>* AsyncCompareRaw(::grpc::ClientContext* context, const ::faceRecognition::CompareRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::faceRecognition::CompareResponse>* PrepareAsyncCompareRaw(::grpc::ClientContext* context, const ::faceRecognition::CompareRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::faceRecognition::SearchResponse>* AsyncSearchRaw(::grpc::ClientContext* context, const ::faceRecognition::SearchRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::faceRecognition::SearchResponse>* PrepareAsyncSearchRaw(::grpc::ClientContext* context, const ::faceRecognition::SearchRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Compare(::grpc::ClientContext* context, const ::faceRecognition::CompareRequest& request, ::faceRecognition::CompareResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::faceRecognition::CompareResponse>> AsyncCompare(::grpc::ClientContext* context, const ::faceRecognition::CompareRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::faceRecognition::CompareResponse>>(AsyncCompareRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::faceRecognition::CompareResponse>> PrepareAsyncCompare(::grpc::ClientContext* context, const ::faceRecognition::CompareRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::faceRecognition::CompareResponse>>(PrepareAsyncCompareRaw(context, request, cq));
    }
    ::grpc::Status Search(::grpc::ClientContext* context, const ::faceRecognition::SearchRequest& request, ::faceRecognition::SearchResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::faceRecognition::SearchResponse>> AsyncSearch(::grpc::ClientContext* context, const ::faceRecognition::SearchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::faceRecognition::SearchResponse>>(AsyncSearchRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::faceRecognition::SearchResponse>> PrepareAsyncSearch(::grpc::ClientContext* context, const ::faceRecognition::SearchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::faceRecognition::SearchResponse>>(PrepareAsyncSearchRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void Compare(::grpc::ClientContext* context, const ::faceRecognition::CompareRequest* request, ::faceRecognition::CompareResponse* response, std::function<void(::grpc::Status)>) override;
      void Compare(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::faceRecognition::CompareResponse* response, std::function<void(::grpc::Status)>) override;
      void Compare(::grpc::ClientContext* context, const ::faceRecognition::CompareRequest* request, ::faceRecognition::CompareResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Compare(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::faceRecognition::CompareResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Search(::grpc::ClientContext* context, const ::faceRecognition::SearchRequest* request, ::faceRecognition::SearchResponse* response, std::function<void(::grpc::Status)>) override;
      void Search(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::faceRecognition::SearchResponse* response, std::function<void(::grpc::Status)>) override;
      void Search(::grpc::ClientContext* context, const ::faceRecognition::SearchRequest* request, ::faceRecognition::SearchResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Search(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::faceRecognition::SearchResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::faceRecognition::CompareResponse>* AsyncCompareRaw(::grpc::ClientContext* context, const ::faceRecognition::CompareRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::faceRecognition::CompareResponse>* PrepareAsyncCompareRaw(::grpc::ClientContext* context, const ::faceRecognition::CompareRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::faceRecognition::SearchResponse>* AsyncSearchRaw(::grpc::ClientContext* context, const ::faceRecognition::SearchRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::faceRecognition::SearchResponse>* PrepareAsyncSearchRaw(::grpc::ClientContext* context, const ::faceRecognition::SearchRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Compare_;
    const ::grpc::internal::RpcMethod rpcmethod_Search_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Compare方法实现了两张人脸图片对比识别，返回两图片的对比可信度
    virtual ::grpc::Status Compare(::grpc::ServerContext* context, const ::faceRecognition::CompareRequest* request, ::faceRecognition::CompareResponse* response);
    // Search方法实现搜索FaceSet中近似人脸数据，
    // 若存在匹配数据时返回一个FaceDetail及其confidence
    virtual ::grpc::Status Search(::grpc::ServerContext* context, const ::faceRecognition::SearchRequest* request, ::faceRecognition::SearchResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Compare : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Compare() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Compare() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Compare(::grpc::ServerContext* context, const ::faceRecognition::CompareRequest* request, ::faceRecognition::CompareResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCompare(::grpc::ServerContext* context, ::faceRecognition::CompareRequest* request, ::grpc::ServerAsyncResponseWriter< ::faceRecognition::CompareResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Search() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Search(::grpc::ServerContext* context, const ::faceRecognition::SearchRequest* request, ::faceRecognition::SearchResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSearch(::grpc::ServerContext* context, ::faceRecognition::SearchRequest* request, ::grpc::ServerAsyncResponseWriter< ::faceRecognition::SearchResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Compare<WithAsyncMethod_Search<Service > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Compare : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Compare() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::faceRecognition::CompareRequest, ::faceRecognition::CompareResponse>(
          [this](::grpc::ServerContext* context,
                 const ::faceRecognition::CompareRequest* request,
                 ::faceRecognition::CompareResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Compare(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_Compare(
        ::grpc::experimental::MessageAllocator< ::faceRecognition::CompareRequest, ::faceRecognition::CompareResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::faceRecognition::CompareRequest, ::faceRecognition::CompareResponse>*>(
          ::grpc::Service::experimental().GetHandler(0))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Compare() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Compare(::grpc::ServerContext* context, const ::faceRecognition::CompareRequest* request, ::faceRecognition::CompareResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Compare(::grpc::ServerContext* context, const ::faceRecognition::CompareRequest* request, ::faceRecognition::CompareResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Search() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::faceRecognition::SearchRequest, ::faceRecognition::SearchResponse>(
          [this](::grpc::ServerContext* context,
                 const ::faceRecognition::SearchRequest* request,
                 ::faceRecognition::SearchResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Search(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_Search(
        ::grpc::experimental::MessageAllocator< ::faceRecognition::SearchRequest, ::faceRecognition::SearchResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::faceRecognition::SearchRequest, ::faceRecognition::SearchResponse>*>(
          ::grpc::Service::experimental().GetHandler(1))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Search(::grpc::ServerContext* context, const ::faceRecognition::SearchRequest* request, ::faceRecognition::SearchResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Search(::grpc::ServerContext* context, const ::faceRecognition::SearchRequest* request, ::faceRecognition::SearchResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_Compare<ExperimentalWithCallbackMethod_Search<Service > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Compare : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Compare() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Compare() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Compare(::grpc::ServerContext* context, const ::faceRecognition::CompareRequest* request, ::faceRecognition::CompareResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Search() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Search(::grpc::ServerContext* context, const ::faceRecognition::SearchRequest* request, ::faceRecognition::SearchResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Compare : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Compare() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Compare() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Compare(::grpc::ServerContext* context, const ::faceRecognition::CompareRequest* request, ::faceRecognition::CompareResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCompare(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Search() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Search(::grpc::ServerContext* context, const ::faceRecognition::SearchRequest* request, ::faceRecognition::SearchResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSearch(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Compare : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Compare() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Compare(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Compare() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Compare(::grpc::ServerContext* context, const ::faceRecognition::CompareRequest* request, ::faceRecognition::CompareResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Compare(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Search() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Search(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Search(::grpc::ServerContext* context, const ::faceRecognition::SearchRequest* request, ::faceRecognition::SearchResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Search(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Compare : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Compare() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::faceRecognition::CompareRequest, ::faceRecognition::CompareResponse>(std::bind(&WithStreamedUnaryMethod_Compare<BaseClass>::StreamedCompare, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Compare() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Compare(::grpc::ServerContext* context, const ::faceRecognition::CompareRequest* request, ::faceRecognition::CompareResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCompare(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::faceRecognition::CompareRequest,::faceRecognition::CompareResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Search() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::faceRecognition::SearchRequest, ::faceRecognition::SearchResponse>(std::bind(&WithStreamedUnaryMethod_Search<BaseClass>::StreamedSearch, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Search(::grpc::ServerContext* context, const ::faceRecognition::SearchRequest* request, ::faceRecognition::SearchResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSearch(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::faceRecognition::SearchRequest,::faceRecognition::SearchResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Compare<WithStreamedUnaryMethod_Search<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Compare<WithStreamedUnaryMethod_Search<Service > > StreamedService;
};

}  // namespace faceRecognition


#endif  // GRPC_face_2eproto__INCLUDED
