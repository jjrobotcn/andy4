// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: face.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_face_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_face_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_face_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_face_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_face_2eproto;
namespace faceRecognition {
class CompareRequest;
class CompareRequestDefaultTypeInternal;
extern CompareRequestDefaultTypeInternal _CompareRequest_default_instance_;
class CompareResponse;
class CompareResponseDefaultTypeInternal;
extern CompareResponseDefaultTypeInternal _CompareResponse_default_instance_;
class SearchRequest;
class SearchRequestDefaultTypeInternal;
extern SearchRequestDefaultTypeInternal _SearchRequest_default_instance_;
class SearchResponse;
class SearchResponseDefaultTypeInternal;
extern SearchResponseDefaultTypeInternal _SearchResponse_default_instance_;
}  // namespace faceRecognition
PROTOBUF_NAMESPACE_OPEN
template<> ::faceRecognition::CompareRequest* Arena::CreateMaybeMessage<::faceRecognition::CompareRequest>(Arena*);
template<> ::faceRecognition::CompareResponse* Arena::CreateMaybeMessage<::faceRecognition::CompareResponse>(Arena*);
template<> ::faceRecognition::SearchRequest* Arena::CreateMaybeMessage<::faceRecognition::SearchRequest>(Arena*);
template<> ::faceRecognition::SearchResponse* Arena::CreateMaybeMessage<::faceRecognition::SearchResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace faceRecognition {

// ===================================================================

class CompareRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:faceRecognition.CompareRequest) */ {
 public:
  CompareRequest();
  virtual ~CompareRequest();

  CompareRequest(const CompareRequest& from);
  CompareRequest(CompareRequest&& from) noexcept
    : CompareRequest() {
    *this = ::std::move(from);
  }

  inline CompareRequest& operator=(const CompareRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CompareRequest& operator=(CompareRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CompareRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CompareRequest* internal_default_instance() {
    return reinterpret_cast<const CompareRequest*>(
               &_CompareRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(CompareRequest* other);
  friend void swap(CompareRequest& a, CompareRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CompareRequest* New() const final {
    return CreateMaybeMessage<CompareRequest>(nullptr);
  }

  CompareRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CompareRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CompareRequest& from);
  void MergeFrom(const CompareRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CompareRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "faceRecognition.CompareRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_face_2eproto);
    return ::descriptor_table_face_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes face_img1 = 1;
  void clear_face_img1();
  static const int kFaceImg1FieldNumber = 1;
  const std::string& face_img1() const;
  void set_face_img1(const std::string& value);
  void set_face_img1(std::string&& value);
  void set_face_img1(const char* value);
  void set_face_img1(const void* value, size_t size);
  std::string* mutable_face_img1();
  std::string* release_face_img1();
  void set_allocated_face_img1(std::string* face_img1);

  // bytes face_img2 = 2;
  void clear_face_img2();
  static const int kFaceImg2FieldNumber = 2;
  const std::string& face_img2() const;
  void set_face_img2(const std::string& value);
  void set_face_img2(std::string&& value);
  void set_face_img2(const char* value);
  void set_face_img2(const void* value, size_t size);
  std::string* mutable_face_img2();
  std::string* release_face_img2();
  void set_allocated_face_img2(std::string* face_img2);

  // @@protoc_insertion_point(class_scope:faceRecognition.CompareRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr face_img1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr face_img2_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_face_2eproto;
};
// -------------------------------------------------------------------

class CompareResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:faceRecognition.CompareResponse) */ {
 public:
  CompareResponse();
  virtual ~CompareResponse();

  CompareResponse(const CompareResponse& from);
  CompareResponse(CompareResponse&& from) noexcept
    : CompareResponse() {
    *this = ::std::move(from);
  }

  inline CompareResponse& operator=(const CompareResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CompareResponse& operator=(CompareResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CompareResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CompareResponse* internal_default_instance() {
    return reinterpret_cast<const CompareResponse*>(
               &_CompareResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(CompareResponse* other);
  friend void swap(CompareResponse& a, CompareResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CompareResponse* New() const final {
    return CreateMaybeMessage<CompareResponse>(nullptr);
  }

  CompareResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CompareResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CompareResponse& from);
  void MergeFrom(const CompareResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CompareResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "faceRecognition.CompareResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_face_2eproto);
    return ::descriptor_table_face_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float confidence = 1;
  void clear_confidence();
  static const int kConfidenceFieldNumber = 1;
  float confidence() const;
  void set_confidence(float value);

  // @@protoc_insertion_point(class_scope:faceRecognition.CompareResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float confidence_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_face_2eproto;
};
// -------------------------------------------------------------------

class SearchRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:faceRecognition.SearchRequest) */ {
 public:
  SearchRequest();
  virtual ~SearchRequest();

  SearchRequest(const SearchRequest& from);
  SearchRequest(SearchRequest&& from) noexcept
    : SearchRequest() {
    *this = ::std::move(from);
  }

  inline SearchRequest& operator=(const SearchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchRequest& operator=(SearchRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SearchRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SearchRequest* internal_default_instance() {
    return reinterpret_cast<const SearchRequest*>(
               &_SearchRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(SearchRequest* other);
  friend void swap(SearchRequest& a, SearchRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SearchRequest* New() const final {
    return CreateMaybeMessage<SearchRequest>(nullptr);
  }

  SearchRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SearchRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SearchRequest& from);
  void MergeFrom(const SearchRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "faceRecognition.SearchRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_face_2eproto);
    return ::descriptor_table_face_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string face_set_id = 1;
  void clear_face_set_id();
  static const int kFaceSetIdFieldNumber = 1;
  const std::string& face_set_id() const;
  void set_face_set_id(const std::string& value);
  void set_face_set_id(std::string&& value);
  void set_face_set_id(const char* value);
  void set_face_set_id(const char* value, size_t size);
  std::string* mutable_face_set_id();
  std::string* release_face_set_id();
  void set_allocated_face_set_id(std::string* face_set_id);

  // bytes face_img = 2;
  void clear_face_img();
  static const int kFaceImgFieldNumber = 2;
  const std::string& face_img() const;
  void set_face_img(const std::string& value);
  void set_face_img(std::string&& value);
  void set_face_img(const char* value);
  void set_face_img(const void* value, size_t size);
  std::string* mutable_face_img();
  std::string* release_face_img();
  void set_allocated_face_img(std::string* face_img);

  // @@protoc_insertion_point(class_scope:faceRecognition.SearchRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr face_set_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr face_img_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_face_2eproto;
};
// -------------------------------------------------------------------

class SearchResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:faceRecognition.SearchResponse) */ {
 public:
  SearchResponse();
  virtual ~SearchResponse();

  SearchResponse(const SearchResponse& from);
  SearchResponse(SearchResponse&& from) noexcept
    : SearchResponse() {
    *this = ::std::move(from);
  }

  inline SearchResponse& operator=(const SearchResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchResponse& operator=(SearchResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SearchResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SearchResponse* internal_default_instance() {
    return reinterpret_cast<const SearchResponse*>(
               &_SearchResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(SearchResponse* other);
  friend void swap(SearchResponse& a, SearchResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SearchResponse* New() const final {
    return CreateMaybeMessage<SearchResponse>(nullptr);
  }

  SearchResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SearchResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SearchResponse& from);
  void MergeFrom(const SearchResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "faceRecognition.SearchResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_face_2eproto);
    return ::descriptor_table_face_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string face_token = 2;
  void clear_face_token();
  static const int kFaceTokenFieldNumber = 2;
  const std::string& face_token() const;
  void set_face_token(const std::string& value);
  void set_face_token(std::string&& value);
  void set_face_token(const char* value);
  void set_face_token(const char* value, size_t size);
  std::string* mutable_face_token();
  std::string* release_face_token();
  void set_allocated_face_token(std::string* face_token);

  // float confidence = 1;
  void clear_confidence();
  static const int kConfidenceFieldNumber = 1;
  float confidence() const;
  void set_confidence(float value);

  // @@protoc_insertion_point(class_scope:faceRecognition.SearchResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr face_token_;
  float confidence_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_face_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CompareRequest

// bytes face_img1 = 1;
inline void CompareRequest::clear_face_img1() {
  face_img1_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CompareRequest::face_img1() const {
  // @@protoc_insertion_point(field_get:faceRecognition.CompareRequest.face_img1)
  return face_img1_.GetNoArena();
}
inline void CompareRequest::set_face_img1(const std::string& value) {
  
  face_img1_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:faceRecognition.CompareRequest.face_img1)
}
inline void CompareRequest::set_face_img1(std::string&& value) {
  
  face_img1_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:faceRecognition.CompareRequest.face_img1)
}
inline void CompareRequest::set_face_img1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  face_img1_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:faceRecognition.CompareRequest.face_img1)
}
inline void CompareRequest::set_face_img1(const void* value, size_t size) {
  
  face_img1_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:faceRecognition.CompareRequest.face_img1)
}
inline std::string* CompareRequest::mutable_face_img1() {
  
  // @@protoc_insertion_point(field_mutable:faceRecognition.CompareRequest.face_img1)
  return face_img1_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CompareRequest::release_face_img1() {
  // @@protoc_insertion_point(field_release:faceRecognition.CompareRequest.face_img1)
  
  return face_img1_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CompareRequest::set_allocated_face_img1(std::string* face_img1) {
  if (face_img1 != nullptr) {
    
  } else {
    
  }
  face_img1_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), face_img1);
  // @@protoc_insertion_point(field_set_allocated:faceRecognition.CompareRequest.face_img1)
}

// bytes face_img2 = 2;
inline void CompareRequest::clear_face_img2() {
  face_img2_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CompareRequest::face_img2() const {
  // @@protoc_insertion_point(field_get:faceRecognition.CompareRequest.face_img2)
  return face_img2_.GetNoArena();
}
inline void CompareRequest::set_face_img2(const std::string& value) {
  
  face_img2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:faceRecognition.CompareRequest.face_img2)
}
inline void CompareRequest::set_face_img2(std::string&& value) {
  
  face_img2_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:faceRecognition.CompareRequest.face_img2)
}
inline void CompareRequest::set_face_img2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  face_img2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:faceRecognition.CompareRequest.face_img2)
}
inline void CompareRequest::set_face_img2(const void* value, size_t size) {
  
  face_img2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:faceRecognition.CompareRequest.face_img2)
}
inline std::string* CompareRequest::mutable_face_img2() {
  
  // @@protoc_insertion_point(field_mutable:faceRecognition.CompareRequest.face_img2)
  return face_img2_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CompareRequest::release_face_img2() {
  // @@protoc_insertion_point(field_release:faceRecognition.CompareRequest.face_img2)
  
  return face_img2_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CompareRequest::set_allocated_face_img2(std::string* face_img2) {
  if (face_img2 != nullptr) {
    
  } else {
    
  }
  face_img2_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), face_img2);
  // @@protoc_insertion_point(field_set_allocated:faceRecognition.CompareRequest.face_img2)
}

// -------------------------------------------------------------------

// CompareResponse

// float confidence = 1;
inline void CompareResponse::clear_confidence() {
  confidence_ = 0;
}
inline float CompareResponse::confidence() const {
  // @@protoc_insertion_point(field_get:faceRecognition.CompareResponse.confidence)
  return confidence_;
}
inline void CompareResponse::set_confidence(float value) {
  
  confidence_ = value;
  // @@protoc_insertion_point(field_set:faceRecognition.CompareResponse.confidence)
}

// -------------------------------------------------------------------

// SearchRequest

// string face_set_id = 1;
inline void SearchRequest::clear_face_set_id() {
  face_set_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SearchRequest::face_set_id() const {
  // @@protoc_insertion_point(field_get:faceRecognition.SearchRequest.face_set_id)
  return face_set_id_.GetNoArena();
}
inline void SearchRequest::set_face_set_id(const std::string& value) {
  
  face_set_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:faceRecognition.SearchRequest.face_set_id)
}
inline void SearchRequest::set_face_set_id(std::string&& value) {
  
  face_set_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:faceRecognition.SearchRequest.face_set_id)
}
inline void SearchRequest::set_face_set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  face_set_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:faceRecognition.SearchRequest.face_set_id)
}
inline void SearchRequest::set_face_set_id(const char* value, size_t size) {
  
  face_set_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:faceRecognition.SearchRequest.face_set_id)
}
inline std::string* SearchRequest::mutable_face_set_id() {
  
  // @@protoc_insertion_point(field_mutable:faceRecognition.SearchRequest.face_set_id)
  return face_set_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SearchRequest::release_face_set_id() {
  // @@protoc_insertion_point(field_release:faceRecognition.SearchRequest.face_set_id)
  
  return face_set_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SearchRequest::set_allocated_face_set_id(std::string* face_set_id) {
  if (face_set_id != nullptr) {
    
  } else {
    
  }
  face_set_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), face_set_id);
  // @@protoc_insertion_point(field_set_allocated:faceRecognition.SearchRequest.face_set_id)
}

// bytes face_img = 2;
inline void SearchRequest::clear_face_img() {
  face_img_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SearchRequest::face_img() const {
  // @@protoc_insertion_point(field_get:faceRecognition.SearchRequest.face_img)
  return face_img_.GetNoArena();
}
inline void SearchRequest::set_face_img(const std::string& value) {
  
  face_img_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:faceRecognition.SearchRequest.face_img)
}
inline void SearchRequest::set_face_img(std::string&& value) {
  
  face_img_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:faceRecognition.SearchRequest.face_img)
}
inline void SearchRequest::set_face_img(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  face_img_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:faceRecognition.SearchRequest.face_img)
}
inline void SearchRequest::set_face_img(const void* value, size_t size) {
  
  face_img_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:faceRecognition.SearchRequest.face_img)
}
inline std::string* SearchRequest::mutable_face_img() {
  
  // @@protoc_insertion_point(field_mutable:faceRecognition.SearchRequest.face_img)
  return face_img_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SearchRequest::release_face_img() {
  // @@protoc_insertion_point(field_release:faceRecognition.SearchRequest.face_img)
  
  return face_img_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SearchRequest::set_allocated_face_img(std::string* face_img) {
  if (face_img != nullptr) {
    
  } else {
    
  }
  face_img_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), face_img);
  // @@protoc_insertion_point(field_set_allocated:faceRecognition.SearchRequest.face_img)
}

// -------------------------------------------------------------------

// SearchResponse

// float confidence = 1;
inline void SearchResponse::clear_confidence() {
  confidence_ = 0;
}
inline float SearchResponse::confidence() const {
  // @@protoc_insertion_point(field_get:faceRecognition.SearchResponse.confidence)
  return confidence_;
}
inline void SearchResponse::set_confidence(float value) {
  
  confidence_ = value;
  // @@protoc_insertion_point(field_set:faceRecognition.SearchResponse.confidence)
}

// string face_token = 2;
inline void SearchResponse::clear_face_token() {
  face_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SearchResponse::face_token() const {
  // @@protoc_insertion_point(field_get:faceRecognition.SearchResponse.face_token)
  return face_token_.GetNoArena();
}
inline void SearchResponse::set_face_token(const std::string& value) {
  
  face_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:faceRecognition.SearchResponse.face_token)
}
inline void SearchResponse::set_face_token(std::string&& value) {
  
  face_token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:faceRecognition.SearchResponse.face_token)
}
inline void SearchResponse::set_face_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  face_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:faceRecognition.SearchResponse.face_token)
}
inline void SearchResponse::set_face_token(const char* value, size_t size) {
  
  face_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:faceRecognition.SearchResponse.face_token)
}
inline std::string* SearchResponse::mutable_face_token() {
  
  // @@protoc_insertion_point(field_mutable:faceRecognition.SearchResponse.face_token)
  return face_token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SearchResponse::release_face_token() {
  // @@protoc_insertion_point(field_release:faceRecognition.SearchResponse.face_token)
  
  return face_token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SearchResponse::set_allocated_face_token(std::string* face_token) {
  if (face_token != nullptr) {
    
  } else {
    
  }
  face_token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), face_token);
  // @@protoc_insertion_point(field_set_allocated:faceRecognition.SearchResponse.face_token)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace faceRecognition

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_face_2eproto
