// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: faceset.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_faceset_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_faceset_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_faceset_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_faceset_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[20]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_faceset_2eproto;
namespace faceRecognition {
class AddFaceRequest;
class AddFaceRequestDefaultTypeInternal;
extern AddFaceRequestDefaultTypeInternal _AddFaceRequest_default_instance_;
class AddFaceRequest_DetailEntry_DoNotUse;
class AddFaceRequest_DetailEntry_DoNotUseDefaultTypeInternal;
extern AddFaceRequest_DetailEntry_DoNotUseDefaultTypeInternal _AddFaceRequest_DetailEntry_DoNotUse_default_instance_;
class AddFaceResponse;
class AddFaceResponseDefaultTypeInternal;
extern AddFaceResponseDefaultTypeInternal _AddFaceResponse_default_instance_;
class DeleteFaceSetRequest;
class DeleteFaceSetRequestDefaultTypeInternal;
extern DeleteFaceSetRequestDefaultTypeInternal _DeleteFaceSetRequest_default_instance_;
class DeleteFaceSetResponse;
class DeleteFaceSetResponseDefaultTypeInternal;
extern DeleteFaceSetResponseDefaultTypeInternal _DeleteFaceSetResponse_default_instance_;
class FaceDetail;
class FaceDetailDefaultTypeInternal;
extern FaceDetailDefaultTypeInternal _FaceDetail_default_instance_;
class FaceDetailRequest;
class FaceDetailRequestDefaultTypeInternal;
extern FaceDetailRequestDefaultTypeInternal _FaceDetailRequest_default_instance_;
class FaceDetailResponse;
class FaceDetailResponseDefaultTypeInternal;
extern FaceDetailResponseDefaultTypeInternal _FaceDetailResponse_default_instance_;
class FaceDetail_DetailEntry_DoNotUse;
class FaceDetail_DetailEntry_DoNotUseDefaultTypeInternal;
extern FaceDetail_DetailEntry_DoNotUseDefaultTypeInternal _FaceDetail_DetailEntry_DoNotUse_default_instance_;
class FaceSet;
class FaceSetDefaultTypeInternal;
extern FaceSetDefaultTypeInternal _FaceSet_default_instance_;
class ListFaceDetailsRequest;
class ListFaceDetailsRequestDefaultTypeInternal;
extern ListFaceDetailsRequestDefaultTypeInternal _ListFaceDetailsRequest_default_instance_;
class ListFaceDetailsResponse;
class ListFaceDetailsResponseDefaultTypeInternal;
extern ListFaceDetailsResponseDefaultTypeInternal _ListFaceDetailsResponse_default_instance_;
class ListFaceSetsRequest;
class ListFaceSetsRequestDefaultTypeInternal;
extern ListFaceSetsRequestDefaultTypeInternal _ListFaceSetsRequest_default_instance_;
class ListFaceSetsResponse;
class ListFaceSetsResponseDefaultTypeInternal;
extern ListFaceSetsResponseDefaultTypeInternal _ListFaceSetsResponse_default_instance_;
class NewFaceSetRequest;
class NewFaceSetRequestDefaultTypeInternal;
extern NewFaceSetRequestDefaultTypeInternal _NewFaceSetRequest_default_instance_;
class NewFaceSetResponse;
class NewFaceSetResponseDefaultTypeInternal;
extern NewFaceSetResponseDefaultTypeInternal _NewFaceSetResponse_default_instance_;
class RemoveFaceRequest;
class RemoveFaceRequestDefaultTypeInternal;
extern RemoveFaceRequestDefaultTypeInternal _RemoveFaceRequest_default_instance_;
class RemoveFaceResponse;
class RemoveFaceResponseDefaultTypeInternal;
extern RemoveFaceResponseDefaultTypeInternal _RemoveFaceResponse_default_instance_;
class UpdateFaceSetRequest;
class UpdateFaceSetRequestDefaultTypeInternal;
extern UpdateFaceSetRequestDefaultTypeInternal _UpdateFaceSetRequest_default_instance_;
class UpdateFaceSetResponse;
class UpdateFaceSetResponseDefaultTypeInternal;
extern UpdateFaceSetResponseDefaultTypeInternal _UpdateFaceSetResponse_default_instance_;
}  // namespace faceRecognition
PROTOBUF_NAMESPACE_OPEN
template<> ::faceRecognition::AddFaceRequest* Arena::CreateMaybeMessage<::faceRecognition::AddFaceRequest>(Arena*);
template<> ::faceRecognition::AddFaceRequest_DetailEntry_DoNotUse* Arena::CreateMaybeMessage<::faceRecognition::AddFaceRequest_DetailEntry_DoNotUse>(Arena*);
template<> ::faceRecognition::AddFaceResponse* Arena::CreateMaybeMessage<::faceRecognition::AddFaceResponse>(Arena*);
template<> ::faceRecognition::DeleteFaceSetRequest* Arena::CreateMaybeMessage<::faceRecognition::DeleteFaceSetRequest>(Arena*);
template<> ::faceRecognition::DeleteFaceSetResponse* Arena::CreateMaybeMessage<::faceRecognition::DeleteFaceSetResponse>(Arena*);
template<> ::faceRecognition::FaceDetail* Arena::CreateMaybeMessage<::faceRecognition::FaceDetail>(Arena*);
template<> ::faceRecognition::FaceDetailRequest* Arena::CreateMaybeMessage<::faceRecognition::FaceDetailRequest>(Arena*);
template<> ::faceRecognition::FaceDetailResponse* Arena::CreateMaybeMessage<::faceRecognition::FaceDetailResponse>(Arena*);
template<> ::faceRecognition::FaceDetail_DetailEntry_DoNotUse* Arena::CreateMaybeMessage<::faceRecognition::FaceDetail_DetailEntry_DoNotUse>(Arena*);
template<> ::faceRecognition::FaceSet* Arena::CreateMaybeMessage<::faceRecognition::FaceSet>(Arena*);
template<> ::faceRecognition::ListFaceDetailsRequest* Arena::CreateMaybeMessage<::faceRecognition::ListFaceDetailsRequest>(Arena*);
template<> ::faceRecognition::ListFaceDetailsResponse* Arena::CreateMaybeMessage<::faceRecognition::ListFaceDetailsResponse>(Arena*);
template<> ::faceRecognition::ListFaceSetsRequest* Arena::CreateMaybeMessage<::faceRecognition::ListFaceSetsRequest>(Arena*);
template<> ::faceRecognition::ListFaceSetsResponse* Arena::CreateMaybeMessage<::faceRecognition::ListFaceSetsResponse>(Arena*);
template<> ::faceRecognition::NewFaceSetRequest* Arena::CreateMaybeMessage<::faceRecognition::NewFaceSetRequest>(Arena*);
template<> ::faceRecognition::NewFaceSetResponse* Arena::CreateMaybeMessage<::faceRecognition::NewFaceSetResponse>(Arena*);
template<> ::faceRecognition::RemoveFaceRequest* Arena::CreateMaybeMessage<::faceRecognition::RemoveFaceRequest>(Arena*);
template<> ::faceRecognition::RemoveFaceResponse* Arena::CreateMaybeMessage<::faceRecognition::RemoveFaceResponse>(Arena*);
template<> ::faceRecognition::UpdateFaceSetRequest* Arena::CreateMaybeMessage<::faceRecognition::UpdateFaceSetRequest>(Arena*);
template<> ::faceRecognition::UpdateFaceSetResponse* Arena::CreateMaybeMessage<::faceRecognition::UpdateFaceSetResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace faceRecognition {

// ===================================================================

class FaceSet :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:faceRecognition.FaceSet) */ {
 public:
  FaceSet();
  virtual ~FaceSet();

  FaceSet(const FaceSet& from);
  FaceSet(FaceSet&& from) noexcept
    : FaceSet() {
    *this = ::std::move(from);
  }

  inline FaceSet& operator=(const FaceSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline FaceSet& operator=(FaceSet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FaceSet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FaceSet* internal_default_instance() {
    return reinterpret_cast<const FaceSet*>(
               &_FaceSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(FaceSet* other);
  friend void swap(FaceSet& a, FaceSet& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FaceSet* New() const final {
    return CreateMaybeMessage<FaceSet>(nullptr);
  }

  FaceSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FaceSet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FaceSet& from);
  void MergeFrom(const FaceSet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FaceSet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "faceRecognition.FaceSet";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_faceset_2eproto);
    return ::descriptor_table_faceset_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // @@protoc_insertion_point(class_scope:faceRecognition.FaceSet)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_faceset_2eproto;
};
// -------------------------------------------------------------------

class FaceDetail_DetailEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<FaceDetail_DetailEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<FaceDetail_DetailEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  FaceDetail_DetailEntry_DoNotUse();
  FaceDetail_DetailEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const FaceDetail_DetailEntry_DoNotUse& other);
  static const FaceDetail_DetailEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const FaceDetail_DetailEntry_DoNotUse*>(&_FaceDetail_DetailEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "faceRecognition.FaceDetail.DetailEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "faceRecognition.FaceDetail.DetailEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_faceset_2eproto);
    return ::descriptor_table_faceset_2eproto.file_level_metadata[1];
  }

  public:
};

// -------------------------------------------------------------------

class FaceDetail :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:faceRecognition.FaceDetail) */ {
 public:
  FaceDetail();
  virtual ~FaceDetail();

  FaceDetail(const FaceDetail& from);
  FaceDetail(FaceDetail&& from) noexcept
    : FaceDetail() {
    *this = ::std::move(from);
  }

  inline FaceDetail& operator=(const FaceDetail& from) {
    CopyFrom(from);
    return *this;
  }
  inline FaceDetail& operator=(FaceDetail&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FaceDetail& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FaceDetail* internal_default_instance() {
    return reinterpret_cast<const FaceDetail*>(
               &_FaceDetail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(FaceDetail* other);
  friend void swap(FaceDetail& a, FaceDetail& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FaceDetail* New() const final {
    return CreateMaybeMessage<FaceDetail>(nullptr);
  }

  FaceDetail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FaceDetail>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FaceDetail& from);
  void MergeFrom(const FaceDetail& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FaceDetail* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "faceRecognition.FaceDetail";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_faceset_2eproto);
    return ::descriptor_table_faceset_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> detail = 3;
  int detail_size() const;
  void clear_detail();
  static const int kDetailFieldNumber = 3;
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      detail() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_detail();

  // string face_token = 1;
  void clear_face_token();
  static const int kFaceTokenFieldNumber = 1;
  const std::string& face_token() const;
  void set_face_token(const std::string& value);
  void set_face_token(std::string&& value);
  void set_face_token(const char* value);
  void set_face_token(const char* value, size_t size);
  std::string* mutable_face_token();
  std::string* release_face_token();
  void set_allocated_face_token(std::string* face_token);

  // bytes face_img = 2;
  void clear_face_img();
  static const int kFaceImgFieldNumber = 2;
  const std::string& face_img() const;
  void set_face_img(const std::string& value);
  void set_face_img(std::string&& value);
  void set_face_img(const char* value);
  void set_face_img(const void* value, size_t size);
  std::string* mutable_face_img();
  std::string* release_face_img();
  void set_allocated_face_img(std::string* face_img);

  // @@protoc_insertion_point(class_scope:faceRecognition.FaceDetail)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      FaceDetail_DetailEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > detail_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr face_token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr face_img_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_faceset_2eproto;
};
// -------------------------------------------------------------------

class NewFaceSetRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:faceRecognition.NewFaceSetRequest) */ {
 public:
  NewFaceSetRequest();
  virtual ~NewFaceSetRequest();

  NewFaceSetRequest(const NewFaceSetRequest& from);
  NewFaceSetRequest(NewFaceSetRequest&& from) noexcept
    : NewFaceSetRequest() {
    *this = ::std::move(from);
  }

  inline NewFaceSetRequest& operator=(const NewFaceSetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline NewFaceSetRequest& operator=(NewFaceSetRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NewFaceSetRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NewFaceSetRequest* internal_default_instance() {
    return reinterpret_cast<const NewFaceSetRequest*>(
               &_NewFaceSetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(NewFaceSetRequest* other);
  friend void swap(NewFaceSetRequest& a, NewFaceSetRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NewFaceSetRequest* New() const final {
    return CreateMaybeMessage<NewFaceSetRequest>(nullptr);
  }

  NewFaceSetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NewFaceSetRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NewFaceSetRequest& from);
  void MergeFrom(const NewFaceSetRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NewFaceSetRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "faceRecognition.NewFaceSetRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_faceset_2eproto);
    return ::descriptor_table_faceset_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // @@protoc_insertion_point(class_scope:faceRecognition.NewFaceSetRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_faceset_2eproto;
};
// -------------------------------------------------------------------

class NewFaceSetResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:faceRecognition.NewFaceSetResponse) */ {
 public:
  NewFaceSetResponse();
  virtual ~NewFaceSetResponse();

  NewFaceSetResponse(const NewFaceSetResponse& from);
  NewFaceSetResponse(NewFaceSetResponse&& from) noexcept
    : NewFaceSetResponse() {
    *this = ::std::move(from);
  }

  inline NewFaceSetResponse& operator=(const NewFaceSetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline NewFaceSetResponse& operator=(NewFaceSetResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NewFaceSetResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NewFaceSetResponse* internal_default_instance() {
    return reinterpret_cast<const NewFaceSetResponse*>(
               &_NewFaceSetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(NewFaceSetResponse* other);
  friend void swap(NewFaceSetResponse& a, NewFaceSetResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NewFaceSetResponse* New() const final {
    return CreateMaybeMessage<NewFaceSetResponse>(nullptr);
  }

  NewFaceSetResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NewFaceSetResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NewFaceSetResponse& from);
  void MergeFrom(const NewFaceSetResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NewFaceSetResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "faceRecognition.NewFaceSetResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_faceset_2eproto);
    return ::descriptor_table_faceset_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .faceRecognition.FaceSet face_set = 1;
  bool has_face_set() const;
  void clear_face_set();
  static const int kFaceSetFieldNumber = 1;
  const ::faceRecognition::FaceSet& face_set() const;
  ::faceRecognition::FaceSet* release_face_set();
  ::faceRecognition::FaceSet* mutable_face_set();
  void set_allocated_face_set(::faceRecognition::FaceSet* face_set);

  // @@protoc_insertion_point(class_scope:faceRecognition.NewFaceSetResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::faceRecognition::FaceSet* face_set_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_faceset_2eproto;
};
// -------------------------------------------------------------------

class DeleteFaceSetRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:faceRecognition.DeleteFaceSetRequest) */ {
 public:
  DeleteFaceSetRequest();
  virtual ~DeleteFaceSetRequest();

  DeleteFaceSetRequest(const DeleteFaceSetRequest& from);
  DeleteFaceSetRequest(DeleteFaceSetRequest&& from) noexcept
    : DeleteFaceSetRequest() {
    *this = ::std::move(from);
  }

  inline DeleteFaceSetRequest& operator=(const DeleteFaceSetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteFaceSetRequest& operator=(DeleteFaceSetRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteFaceSetRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteFaceSetRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteFaceSetRequest*>(
               &_DeleteFaceSetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(DeleteFaceSetRequest* other);
  friend void swap(DeleteFaceSetRequest& a, DeleteFaceSetRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteFaceSetRequest* New() const final {
    return CreateMaybeMessage<DeleteFaceSetRequest>(nullptr);
  }

  DeleteFaceSetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteFaceSetRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteFaceSetRequest& from);
  void MergeFrom(const DeleteFaceSetRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteFaceSetRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "faceRecognition.DeleteFaceSetRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_faceset_2eproto);
    return ::descriptor_table_faceset_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string face_set_id = 1;
  void clear_face_set_id();
  static const int kFaceSetIdFieldNumber = 1;
  const std::string& face_set_id() const;
  void set_face_set_id(const std::string& value);
  void set_face_set_id(std::string&& value);
  void set_face_set_id(const char* value);
  void set_face_set_id(const char* value, size_t size);
  std::string* mutable_face_set_id();
  std::string* release_face_set_id();
  void set_allocated_face_set_id(std::string* face_set_id);

  // @@protoc_insertion_point(class_scope:faceRecognition.DeleteFaceSetRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr face_set_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_faceset_2eproto;
};
// -------------------------------------------------------------------

class DeleteFaceSetResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:faceRecognition.DeleteFaceSetResponse) */ {
 public:
  DeleteFaceSetResponse();
  virtual ~DeleteFaceSetResponse();

  DeleteFaceSetResponse(const DeleteFaceSetResponse& from);
  DeleteFaceSetResponse(DeleteFaceSetResponse&& from) noexcept
    : DeleteFaceSetResponse() {
    *this = ::std::move(from);
  }

  inline DeleteFaceSetResponse& operator=(const DeleteFaceSetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteFaceSetResponse& operator=(DeleteFaceSetResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteFaceSetResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteFaceSetResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteFaceSetResponse*>(
               &_DeleteFaceSetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(DeleteFaceSetResponse* other);
  friend void swap(DeleteFaceSetResponse& a, DeleteFaceSetResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteFaceSetResponse* New() const final {
    return CreateMaybeMessage<DeleteFaceSetResponse>(nullptr);
  }

  DeleteFaceSetResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteFaceSetResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteFaceSetResponse& from);
  void MergeFrom(const DeleteFaceSetResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteFaceSetResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "faceRecognition.DeleteFaceSetResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_faceset_2eproto);
    return ::descriptor_table_faceset_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:faceRecognition.DeleteFaceSetResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_faceset_2eproto;
};
// -------------------------------------------------------------------

class UpdateFaceSetRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:faceRecognition.UpdateFaceSetRequest) */ {
 public:
  UpdateFaceSetRequest();
  virtual ~UpdateFaceSetRequest();

  UpdateFaceSetRequest(const UpdateFaceSetRequest& from);
  UpdateFaceSetRequest(UpdateFaceSetRequest&& from) noexcept
    : UpdateFaceSetRequest() {
    *this = ::std::move(from);
  }

  inline UpdateFaceSetRequest& operator=(const UpdateFaceSetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateFaceSetRequest& operator=(UpdateFaceSetRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateFaceSetRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateFaceSetRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateFaceSetRequest*>(
               &_UpdateFaceSetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(UpdateFaceSetRequest* other);
  friend void swap(UpdateFaceSetRequest& a, UpdateFaceSetRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateFaceSetRequest* New() const final {
    return CreateMaybeMessage<UpdateFaceSetRequest>(nullptr);
  }

  UpdateFaceSetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateFaceSetRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateFaceSetRequest& from);
  void MergeFrom(const UpdateFaceSetRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateFaceSetRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "faceRecognition.UpdateFaceSetRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_faceset_2eproto);
    return ::descriptor_table_faceset_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .faceRecognition.FaceSet face_set = 1;
  bool has_face_set() const;
  void clear_face_set();
  static const int kFaceSetFieldNumber = 1;
  const ::faceRecognition::FaceSet& face_set() const;
  ::faceRecognition::FaceSet* release_face_set();
  ::faceRecognition::FaceSet* mutable_face_set();
  void set_allocated_face_set(::faceRecognition::FaceSet* face_set);

  // @@protoc_insertion_point(class_scope:faceRecognition.UpdateFaceSetRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::faceRecognition::FaceSet* face_set_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_faceset_2eproto;
};
// -------------------------------------------------------------------

class UpdateFaceSetResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:faceRecognition.UpdateFaceSetResponse) */ {
 public:
  UpdateFaceSetResponse();
  virtual ~UpdateFaceSetResponse();

  UpdateFaceSetResponse(const UpdateFaceSetResponse& from);
  UpdateFaceSetResponse(UpdateFaceSetResponse&& from) noexcept
    : UpdateFaceSetResponse() {
    *this = ::std::move(from);
  }

  inline UpdateFaceSetResponse& operator=(const UpdateFaceSetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateFaceSetResponse& operator=(UpdateFaceSetResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateFaceSetResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateFaceSetResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateFaceSetResponse*>(
               &_UpdateFaceSetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(UpdateFaceSetResponse* other);
  friend void swap(UpdateFaceSetResponse& a, UpdateFaceSetResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateFaceSetResponse* New() const final {
    return CreateMaybeMessage<UpdateFaceSetResponse>(nullptr);
  }

  UpdateFaceSetResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateFaceSetResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateFaceSetResponse& from);
  void MergeFrom(const UpdateFaceSetResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateFaceSetResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "faceRecognition.UpdateFaceSetResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_faceset_2eproto);
    return ::descriptor_table_faceset_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .faceRecognition.FaceSet face_set = 1;
  bool has_face_set() const;
  void clear_face_set();
  static const int kFaceSetFieldNumber = 1;
  const ::faceRecognition::FaceSet& face_set() const;
  ::faceRecognition::FaceSet* release_face_set();
  ::faceRecognition::FaceSet* mutable_face_set();
  void set_allocated_face_set(::faceRecognition::FaceSet* face_set);

  // @@protoc_insertion_point(class_scope:faceRecognition.UpdateFaceSetResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::faceRecognition::FaceSet* face_set_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_faceset_2eproto;
};
// -------------------------------------------------------------------

class ListFaceSetsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:faceRecognition.ListFaceSetsRequest) */ {
 public:
  ListFaceSetsRequest();
  virtual ~ListFaceSetsRequest();

  ListFaceSetsRequest(const ListFaceSetsRequest& from);
  ListFaceSetsRequest(ListFaceSetsRequest&& from) noexcept
    : ListFaceSetsRequest() {
    *this = ::std::move(from);
  }

  inline ListFaceSetsRequest& operator=(const ListFaceSetsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListFaceSetsRequest& operator=(ListFaceSetsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListFaceSetsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListFaceSetsRequest* internal_default_instance() {
    return reinterpret_cast<const ListFaceSetsRequest*>(
               &_ListFaceSetsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(ListFaceSetsRequest* other);
  friend void swap(ListFaceSetsRequest& a, ListFaceSetsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListFaceSetsRequest* New() const final {
    return CreateMaybeMessage<ListFaceSetsRequest>(nullptr);
  }

  ListFaceSetsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListFaceSetsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListFaceSetsRequest& from);
  void MergeFrom(const ListFaceSetsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListFaceSetsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "faceRecognition.ListFaceSetsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_faceset_2eproto);
    return ::descriptor_table_faceset_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:faceRecognition.ListFaceSetsRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_faceset_2eproto;
};
// -------------------------------------------------------------------

class ListFaceSetsResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:faceRecognition.ListFaceSetsResponse) */ {
 public:
  ListFaceSetsResponse();
  virtual ~ListFaceSetsResponse();

  ListFaceSetsResponse(const ListFaceSetsResponse& from);
  ListFaceSetsResponse(ListFaceSetsResponse&& from) noexcept
    : ListFaceSetsResponse() {
    *this = ::std::move(from);
  }

  inline ListFaceSetsResponse& operator=(const ListFaceSetsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListFaceSetsResponse& operator=(ListFaceSetsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListFaceSetsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListFaceSetsResponse* internal_default_instance() {
    return reinterpret_cast<const ListFaceSetsResponse*>(
               &_ListFaceSetsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(ListFaceSetsResponse* other);
  friend void swap(ListFaceSetsResponse& a, ListFaceSetsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListFaceSetsResponse* New() const final {
    return CreateMaybeMessage<ListFaceSetsResponse>(nullptr);
  }

  ListFaceSetsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListFaceSetsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListFaceSetsResponse& from);
  void MergeFrom(const ListFaceSetsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListFaceSetsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "faceRecognition.ListFaceSetsResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_faceset_2eproto);
    return ::descriptor_table_faceset_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .faceRecognition.FaceSet face_sets = 1;
  int face_sets_size() const;
  void clear_face_sets();
  static const int kFaceSetsFieldNumber = 1;
  ::faceRecognition::FaceSet* mutable_face_sets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::faceRecognition::FaceSet >*
      mutable_face_sets();
  const ::faceRecognition::FaceSet& face_sets(int index) const;
  ::faceRecognition::FaceSet* add_face_sets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::faceRecognition::FaceSet >&
      face_sets() const;

  // @@protoc_insertion_point(class_scope:faceRecognition.ListFaceSetsResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::faceRecognition::FaceSet > face_sets_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_faceset_2eproto;
};
// -------------------------------------------------------------------

class AddFaceRequest_DetailEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AddFaceRequest_DetailEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AddFaceRequest_DetailEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  AddFaceRequest_DetailEntry_DoNotUse();
  AddFaceRequest_DetailEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const AddFaceRequest_DetailEntry_DoNotUse& other);
  static const AddFaceRequest_DetailEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const AddFaceRequest_DetailEntry_DoNotUse*>(&_AddFaceRequest_DetailEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "faceRecognition.AddFaceRequest.DetailEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "faceRecognition.AddFaceRequest.DetailEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_faceset_2eproto);
    return ::descriptor_table_faceset_2eproto.file_level_metadata[11];
  }

  public:
};

// -------------------------------------------------------------------

class AddFaceRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:faceRecognition.AddFaceRequest) */ {
 public:
  AddFaceRequest();
  virtual ~AddFaceRequest();

  AddFaceRequest(const AddFaceRequest& from);
  AddFaceRequest(AddFaceRequest&& from) noexcept
    : AddFaceRequest() {
    *this = ::std::move(from);
  }

  inline AddFaceRequest& operator=(const AddFaceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddFaceRequest& operator=(AddFaceRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddFaceRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddFaceRequest* internal_default_instance() {
    return reinterpret_cast<const AddFaceRequest*>(
               &_AddFaceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(AddFaceRequest* other);
  friend void swap(AddFaceRequest& a, AddFaceRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddFaceRequest* New() const final {
    return CreateMaybeMessage<AddFaceRequest>(nullptr);
  }

  AddFaceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddFaceRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddFaceRequest& from);
  void MergeFrom(const AddFaceRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddFaceRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "faceRecognition.AddFaceRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_faceset_2eproto);
    return ::descriptor_table_faceset_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> detail = 3;
  int detail_size() const;
  void clear_detail();
  static const int kDetailFieldNumber = 3;
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      detail() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_detail();

  // string face_set_id = 1;
  void clear_face_set_id();
  static const int kFaceSetIdFieldNumber = 1;
  const std::string& face_set_id() const;
  void set_face_set_id(const std::string& value);
  void set_face_set_id(std::string&& value);
  void set_face_set_id(const char* value);
  void set_face_set_id(const char* value, size_t size);
  std::string* mutable_face_set_id();
  std::string* release_face_set_id();
  void set_allocated_face_set_id(std::string* face_set_id);

  // bytes face_img = 2;
  void clear_face_img();
  static const int kFaceImgFieldNumber = 2;
  const std::string& face_img() const;
  void set_face_img(const std::string& value);
  void set_face_img(std::string&& value);
  void set_face_img(const char* value);
  void set_face_img(const void* value, size_t size);
  std::string* mutable_face_img();
  std::string* release_face_img();
  void set_allocated_face_img(std::string* face_img);

  // @@protoc_insertion_point(class_scope:faceRecognition.AddFaceRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      AddFaceRequest_DetailEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > detail_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr face_set_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr face_img_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_faceset_2eproto;
};
// -------------------------------------------------------------------

class AddFaceResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:faceRecognition.AddFaceResponse) */ {
 public:
  AddFaceResponse();
  virtual ~AddFaceResponse();

  AddFaceResponse(const AddFaceResponse& from);
  AddFaceResponse(AddFaceResponse&& from) noexcept
    : AddFaceResponse() {
    *this = ::std::move(from);
  }

  inline AddFaceResponse& operator=(const AddFaceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddFaceResponse& operator=(AddFaceResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddFaceResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddFaceResponse* internal_default_instance() {
    return reinterpret_cast<const AddFaceResponse*>(
               &_AddFaceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(AddFaceResponse* other);
  friend void swap(AddFaceResponse& a, AddFaceResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddFaceResponse* New() const final {
    return CreateMaybeMessage<AddFaceResponse>(nullptr);
  }

  AddFaceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddFaceResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddFaceResponse& from);
  void MergeFrom(const AddFaceResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddFaceResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "faceRecognition.AddFaceResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_faceset_2eproto);
    return ::descriptor_table_faceset_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string face_token = 1;
  void clear_face_token();
  static const int kFaceTokenFieldNumber = 1;
  const std::string& face_token() const;
  void set_face_token(const std::string& value);
  void set_face_token(std::string&& value);
  void set_face_token(const char* value);
  void set_face_token(const char* value, size_t size);
  std::string* mutable_face_token();
  std::string* release_face_token();
  void set_allocated_face_token(std::string* face_token);

  // @@protoc_insertion_point(class_scope:faceRecognition.AddFaceResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr face_token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_faceset_2eproto;
};
// -------------------------------------------------------------------

class RemoveFaceRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:faceRecognition.RemoveFaceRequest) */ {
 public:
  RemoveFaceRequest();
  virtual ~RemoveFaceRequest();

  RemoveFaceRequest(const RemoveFaceRequest& from);
  RemoveFaceRequest(RemoveFaceRequest&& from) noexcept
    : RemoveFaceRequest() {
    *this = ::std::move(from);
  }

  inline RemoveFaceRequest& operator=(const RemoveFaceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveFaceRequest& operator=(RemoveFaceRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoveFaceRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveFaceRequest* internal_default_instance() {
    return reinterpret_cast<const RemoveFaceRequest*>(
               &_RemoveFaceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(RemoveFaceRequest* other);
  friend void swap(RemoveFaceRequest& a, RemoveFaceRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RemoveFaceRequest* New() const final {
    return CreateMaybeMessage<RemoveFaceRequest>(nullptr);
  }

  RemoveFaceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveFaceRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoveFaceRequest& from);
  void MergeFrom(const RemoveFaceRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveFaceRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "faceRecognition.RemoveFaceRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_faceset_2eproto);
    return ::descriptor_table_faceset_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string face_set_id = 1;
  void clear_face_set_id();
  static const int kFaceSetIdFieldNumber = 1;
  const std::string& face_set_id() const;
  void set_face_set_id(const std::string& value);
  void set_face_set_id(std::string&& value);
  void set_face_set_id(const char* value);
  void set_face_set_id(const char* value, size_t size);
  std::string* mutable_face_set_id();
  std::string* release_face_set_id();
  void set_allocated_face_set_id(std::string* face_set_id);

  // string face_token = 2;
  void clear_face_token();
  static const int kFaceTokenFieldNumber = 2;
  const std::string& face_token() const;
  void set_face_token(const std::string& value);
  void set_face_token(std::string&& value);
  void set_face_token(const char* value);
  void set_face_token(const char* value, size_t size);
  std::string* mutable_face_token();
  std::string* release_face_token();
  void set_allocated_face_token(std::string* face_token);

  // @@protoc_insertion_point(class_scope:faceRecognition.RemoveFaceRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr face_set_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr face_token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_faceset_2eproto;
};
// -------------------------------------------------------------------

class RemoveFaceResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:faceRecognition.RemoveFaceResponse) */ {
 public:
  RemoveFaceResponse();
  virtual ~RemoveFaceResponse();

  RemoveFaceResponse(const RemoveFaceResponse& from);
  RemoveFaceResponse(RemoveFaceResponse&& from) noexcept
    : RemoveFaceResponse() {
    *this = ::std::move(from);
  }

  inline RemoveFaceResponse& operator=(const RemoveFaceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveFaceResponse& operator=(RemoveFaceResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoveFaceResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveFaceResponse* internal_default_instance() {
    return reinterpret_cast<const RemoveFaceResponse*>(
               &_RemoveFaceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(RemoveFaceResponse* other);
  friend void swap(RemoveFaceResponse& a, RemoveFaceResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RemoveFaceResponse* New() const final {
    return CreateMaybeMessage<RemoveFaceResponse>(nullptr);
  }

  RemoveFaceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveFaceResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoveFaceResponse& from);
  void MergeFrom(const RemoveFaceResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveFaceResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "faceRecognition.RemoveFaceResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_faceset_2eproto);
    return ::descriptor_table_faceset_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:faceRecognition.RemoveFaceResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_faceset_2eproto;
};
// -------------------------------------------------------------------

class FaceDetailRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:faceRecognition.FaceDetailRequest) */ {
 public:
  FaceDetailRequest();
  virtual ~FaceDetailRequest();

  FaceDetailRequest(const FaceDetailRequest& from);
  FaceDetailRequest(FaceDetailRequest&& from) noexcept
    : FaceDetailRequest() {
    *this = ::std::move(from);
  }

  inline FaceDetailRequest& operator=(const FaceDetailRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FaceDetailRequest& operator=(FaceDetailRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FaceDetailRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FaceDetailRequest* internal_default_instance() {
    return reinterpret_cast<const FaceDetailRequest*>(
               &_FaceDetailRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(FaceDetailRequest* other);
  friend void swap(FaceDetailRequest& a, FaceDetailRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FaceDetailRequest* New() const final {
    return CreateMaybeMessage<FaceDetailRequest>(nullptr);
  }

  FaceDetailRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FaceDetailRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FaceDetailRequest& from);
  void MergeFrom(const FaceDetailRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FaceDetailRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "faceRecognition.FaceDetailRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_faceset_2eproto);
    return ::descriptor_table_faceset_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string face_set_id = 1;
  void clear_face_set_id();
  static const int kFaceSetIdFieldNumber = 1;
  const std::string& face_set_id() const;
  void set_face_set_id(const std::string& value);
  void set_face_set_id(std::string&& value);
  void set_face_set_id(const char* value);
  void set_face_set_id(const char* value, size_t size);
  std::string* mutable_face_set_id();
  std::string* release_face_set_id();
  void set_allocated_face_set_id(std::string* face_set_id);

  // string face_token = 2;
  void clear_face_token();
  static const int kFaceTokenFieldNumber = 2;
  const std::string& face_token() const;
  void set_face_token(const std::string& value);
  void set_face_token(std::string&& value);
  void set_face_token(const char* value);
  void set_face_token(const char* value, size_t size);
  std::string* mutable_face_token();
  std::string* release_face_token();
  void set_allocated_face_token(std::string* face_token);

  // bool with_face_img = 3;
  void clear_with_face_img();
  static const int kWithFaceImgFieldNumber = 3;
  bool with_face_img() const;
  void set_with_face_img(bool value);

  // @@protoc_insertion_point(class_scope:faceRecognition.FaceDetailRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr face_set_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr face_token_;
  bool with_face_img_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_faceset_2eproto;
};
// -------------------------------------------------------------------

class FaceDetailResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:faceRecognition.FaceDetailResponse) */ {
 public:
  FaceDetailResponse();
  virtual ~FaceDetailResponse();

  FaceDetailResponse(const FaceDetailResponse& from);
  FaceDetailResponse(FaceDetailResponse&& from) noexcept
    : FaceDetailResponse() {
    *this = ::std::move(from);
  }

  inline FaceDetailResponse& operator=(const FaceDetailResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FaceDetailResponse& operator=(FaceDetailResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FaceDetailResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FaceDetailResponse* internal_default_instance() {
    return reinterpret_cast<const FaceDetailResponse*>(
               &_FaceDetailResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(FaceDetailResponse* other);
  friend void swap(FaceDetailResponse& a, FaceDetailResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FaceDetailResponse* New() const final {
    return CreateMaybeMessage<FaceDetailResponse>(nullptr);
  }

  FaceDetailResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FaceDetailResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FaceDetailResponse& from);
  void MergeFrom(const FaceDetailResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FaceDetailResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "faceRecognition.FaceDetailResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_faceset_2eproto);
    return ::descriptor_table_faceset_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .faceRecognition.FaceDetail face_detail = 1;
  bool has_face_detail() const;
  void clear_face_detail();
  static const int kFaceDetailFieldNumber = 1;
  const ::faceRecognition::FaceDetail& face_detail() const;
  ::faceRecognition::FaceDetail* release_face_detail();
  ::faceRecognition::FaceDetail* mutable_face_detail();
  void set_allocated_face_detail(::faceRecognition::FaceDetail* face_detail);

  // @@protoc_insertion_point(class_scope:faceRecognition.FaceDetailResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::faceRecognition::FaceDetail* face_detail_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_faceset_2eproto;
};
// -------------------------------------------------------------------

class ListFaceDetailsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:faceRecognition.ListFaceDetailsRequest) */ {
 public:
  ListFaceDetailsRequest();
  virtual ~ListFaceDetailsRequest();

  ListFaceDetailsRequest(const ListFaceDetailsRequest& from);
  ListFaceDetailsRequest(ListFaceDetailsRequest&& from) noexcept
    : ListFaceDetailsRequest() {
    *this = ::std::move(from);
  }

  inline ListFaceDetailsRequest& operator=(const ListFaceDetailsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListFaceDetailsRequest& operator=(ListFaceDetailsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListFaceDetailsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListFaceDetailsRequest* internal_default_instance() {
    return reinterpret_cast<const ListFaceDetailsRequest*>(
               &_ListFaceDetailsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(ListFaceDetailsRequest* other);
  friend void swap(ListFaceDetailsRequest& a, ListFaceDetailsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListFaceDetailsRequest* New() const final {
    return CreateMaybeMessage<ListFaceDetailsRequest>(nullptr);
  }

  ListFaceDetailsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListFaceDetailsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListFaceDetailsRequest& from);
  void MergeFrom(const ListFaceDetailsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListFaceDetailsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "faceRecognition.ListFaceDetailsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_faceset_2eproto);
    return ::descriptor_table_faceset_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string face_set_id = 1;
  void clear_face_set_id();
  static const int kFaceSetIdFieldNumber = 1;
  const std::string& face_set_id() const;
  void set_face_set_id(const std::string& value);
  void set_face_set_id(std::string&& value);
  void set_face_set_id(const char* value);
  void set_face_set_id(const char* value, size_t size);
  std::string* mutable_face_set_id();
  std::string* release_face_set_id();
  void set_allocated_face_set_id(std::string* face_set_id);

  // uint32 limit = 2;
  void clear_limit();
  static const int kLimitFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint32 limit() const;
  void set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 offset = 3;
  void clear_offset();
  static const int kOffsetFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::uint32 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:faceRecognition.ListFaceDetailsRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr face_set_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 limit_;
  ::PROTOBUF_NAMESPACE_ID::uint32 offset_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_faceset_2eproto;
};
// -------------------------------------------------------------------

class ListFaceDetailsResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:faceRecognition.ListFaceDetailsResponse) */ {
 public:
  ListFaceDetailsResponse();
  virtual ~ListFaceDetailsResponse();

  ListFaceDetailsResponse(const ListFaceDetailsResponse& from);
  ListFaceDetailsResponse(ListFaceDetailsResponse&& from) noexcept
    : ListFaceDetailsResponse() {
    *this = ::std::move(from);
  }

  inline ListFaceDetailsResponse& operator=(const ListFaceDetailsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListFaceDetailsResponse& operator=(ListFaceDetailsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListFaceDetailsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListFaceDetailsResponse* internal_default_instance() {
    return reinterpret_cast<const ListFaceDetailsResponse*>(
               &_ListFaceDetailsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(ListFaceDetailsResponse* other);
  friend void swap(ListFaceDetailsResponse& a, ListFaceDetailsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListFaceDetailsResponse* New() const final {
    return CreateMaybeMessage<ListFaceDetailsResponse>(nullptr);
  }

  ListFaceDetailsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListFaceDetailsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListFaceDetailsResponse& from);
  void MergeFrom(const ListFaceDetailsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListFaceDetailsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "faceRecognition.ListFaceDetailsResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_faceset_2eproto);
    return ::descriptor_table_faceset_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .faceRecognition.FaceDetail face_details = 2;
  int face_details_size() const;
  void clear_face_details();
  static const int kFaceDetailsFieldNumber = 2;
  ::faceRecognition::FaceDetail* mutable_face_details(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::faceRecognition::FaceDetail >*
      mutable_face_details();
  const ::faceRecognition::FaceDetail& face_details(int index) const;
  ::faceRecognition::FaceDetail* add_face_details();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::faceRecognition::FaceDetail >&
      face_details() const;

  // .faceRecognition.FaceSet face_set = 1;
  bool has_face_set() const;
  void clear_face_set();
  static const int kFaceSetFieldNumber = 1;
  const ::faceRecognition::FaceSet& face_set() const;
  ::faceRecognition::FaceSet* release_face_set();
  ::faceRecognition::FaceSet* mutable_face_set();
  void set_allocated_face_set(::faceRecognition::FaceSet* face_set);

  // uint32 total = 3;
  void clear_total();
  static const int kTotalFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::uint32 total() const;
  void set_total(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:faceRecognition.ListFaceDetailsResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::faceRecognition::FaceDetail > face_details_;
  ::faceRecognition::FaceSet* face_set_;
  ::PROTOBUF_NAMESPACE_ID::uint32 total_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_faceset_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FaceSet

// string id = 1;
inline void FaceSet::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FaceSet::id() const {
  // @@protoc_insertion_point(field_get:faceRecognition.FaceSet.id)
  return id_.GetNoArena();
}
inline void FaceSet::set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:faceRecognition.FaceSet.id)
}
inline void FaceSet::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:faceRecognition.FaceSet.id)
}
inline void FaceSet::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:faceRecognition.FaceSet.id)
}
inline void FaceSet::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:faceRecognition.FaceSet.id)
}
inline std::string* FaceSet::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:faceRecognition.FaceSet.id)
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FaceSet::release_id() {
  // @@protoc_insertion_point(field_release:faceRecognition.FaceSet.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FaceSet::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:faceRecognition.FaceSet.id)
}

// string name = 2;
inline void FaceSet::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FaceSet::name() const {
  // @@protoc_insertion_point(field_get:faceRecognition.FaceSet.name)
  return name_.GetNoArena();
}
inline void FaceSet::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:faceRecognition.FaceSet.name)
}
inline void FaceSet::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:faceRecognition.FaceSet.name)
}
inline void FaceSet::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:faceRecognition.FaceSet.name)
}
inline void FaceSet::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:faceRecognition.FaceSet.name)
}
inline std::string* FaceSet::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:faceRecognition.FaceSet.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FaceSet::release_name() {
  // @@protoc_insertion_point(field_release:faceRecognition.FaceSet.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FaceSet::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:faceRecognition.FaceSet.name)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// FaceDetail

// string face_token = 1;
inline void FaceDetail::clear_face_token() {
  face_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FaceDetail::face_token() const {
  // @@protoc_insertion_point(field_get:faceRecognition.FaceDetail.face_token)
  return face_token_.GetNoArena();
}
inline void FaceDetail::set_face_token(const std::string& value) {
  
  face_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:faceRecognition.FaceDetail.face_token)
}
inline void FaceDetail::set_face_token(std::string&& value) {
  
  face_token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:faceRecognition.FaceDetail.face_token)
}
inline void FaceDetail::set_face_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  face_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:faceRecognition.FaceDetail.face_token)
}
inline void FaceDetail::set_face_token(const char* value, size_t size) {
  
  face_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:faceRecognition.FaceDetail.face_token)
}
inline std::string* FaceDetail::mutable_face_token() {
  
  // @@protoc_insertion_point(field_mutable:faceRecognition.FaceDetail.face_token)
  return face_token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FaceDetail::release_face_token() {
  // @@protoc_insertion_point(field_release:faceRecognition.FaceDetail.face_token)
  
  return face_token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FaceDetail::set_allocated_face_token(std::string* face_token) {
  if (face_token != nullptr) {
    
  } else {
    
  }
  face_token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), face_token);
  // @@protoc_insertion_point(field_set_allocated:faceRecognition.FaceDetail.face_token)
}

// bytes face_img = 2;
inline void FaceDetail::clear_face_img() {
  face_img_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FaceDetail::face_img() const {
  // @@protoc_insertion_point(field_get:faceRecognition.FaceDetail.face_img)
  return face_img_.GetNoArena();
}
inline void FaceDetail::set_face_img(const std::string& value) {
  
  face_img_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:faceRecognition.FaceDetail.face_img)
}
inline void FaceDetail::set_face_img(std::string&& value) {
  
  face_img_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:faceRecognition.FaceDetail.face_img)
}
inline void FaceDetail::set_face_img(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  face_img_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:faceRecognition.FaceDetail.face_img)
}
inline void FaceDetail::set_face_img(const void* value, size_t size) {
  
  face_img_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:faceRecognition.FaceDetail.face_img)
}
inline std::string* FaceDetail::mutable_face_img() {
  
  // @@protoc_insertion_point(field_mutable:faceRecognition.FaceDetail.face_img)
  return face_img_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FaceDetail::release_face_img() {
  // @@protoc_insertion_point(field_release:faceRecognition.FaceDetail.face_img)
  
  return face_img_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FaceDetail::set_allocated_face_img(std::string* face_img) {
  if (face_img != nullptr) {
    
  } else {
    
  }
  face_img_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), face_img);
  // @@protoc_insertion_point(field_set_allocated:faceRecognition.FaceDetail.face_img)
}

// map<string, string> detail = 3;
inline int FaceDetail::detail_size() const {
  return detail_.size();
}
inline void FaceDetail::clear_detail() {
  detail_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
FaceDetail::detail() const {
  // @@protoc_insertion_point(field_map:faceRecognition.FaceDetail.detail)
  return detail_.GetMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
FaceDetail::mutable_detail() {
  // @@protoc_insertion_point(field_mutable_map:faceRecognition.FaceDetail.detail)
  return detail_.MutableMap();
}

// -------------------------------------------------------------------

// NewFaceSetRequest

// string name = 1;
inline void NewFaceSetRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NewFaceSetRequest::name() const {
  // @@protoc_insertion_point(field_get:faceRecognition.NewFaceSetRequest.name)
  return name_.GetNoArena();
}
inline void NewFaceSetRequest::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:faceRecognition.NewFaceSetRequest.name)
}
inline void NewFaceSetRequest::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:faceRecognition.NewFaceSetRequest.name)
}
inline void NewFaceSetRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:faceRecognition.NewFaceSetRequest.name)
}
inline void NewFaceSetRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:faceRecognition.NewFaceSetRequest.name)
}
inline std::string* NewFaceSetRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:faceRecognition.NewFaceSetRequest.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NewFaceSetRequest::release_name() {
  // @@protoc_insertion_point(field_release:faceRecognition.NewFaceSetRequest.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NewFaceSetRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:faceRecognition.NewFaceSetRequest.name)
}

// -------------------------------------------------------------------

// NewFaceSetResponse

// .faceRecognition.FaceSet face_set = 1;
inline bool NewFaceSetResponse::has_face_set() const {
  return this != internal_default_instance() && face_set_ != nullptr;
}
inline void NewFaceSetResponse::clear_face_set() {
  if (GetArenaNoVirtual() == nullptr && face_set_ != nullptr) {
    delete face_set_;
  }
  face_set_ = nullptr;
}
inline const ::faceRecognition::FaceSet& NewFaceSetResponse::face_set() const {
  const ::faceRecognition::FaceSet* p = face_set_;
  // @@protoc_insertion_point(field_get:faceRecognition.NewFaceSetResponse.face_set)
  return p != nullptr ? *p : *reinterpret_cast<const ::faceRecognition::FaceSet*>(
      &::faceRecognition::_FaceSet_default_instance_);
}
inline ::faceRecognition::FaceSet* NewFaceSetResponse::release_face_set() {
  // @@protoc_insertion_point(field_release:faceRecognition.NewFaceSetResponse.face_set)
  
  ::faceRecognition::FaceSet* temp = face_set_;
  face_set_ = nullptr;
  return temp;
}
inline ::faceRecognition::FaceSet* NewFaceSetResponse::mutable_face_set() {
  
  if (face_set_ == nullptr) {
    auto* p = CreateMaybeMessage<::faceRecognition::FaceSet>(GetArenaNoVirtual());
    face_set_ = p;
  }
  // @@protoc_insertion_point(field_mutable:faceRecognition.NewFaceSetResponse.face_set)
  return face_set_;
}
inline void NewFaceSetResponse::set_allocated_face_set(::faceRecognition::FaceSet* face_set) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete face_set_;
  }
  if (face_set) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      face_set = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, face_set, submessage_arena);
    }
    
  } else {
    
  }
  face_set_ = face_set;
  // @@protoc_insertion_point(field_set_allocated:faceRecognition.NewFaceSetResponse.face_set)
}

// -------------------------------------------------------------------

// DeleteFaceSetRequest

// string face_set_id = 1;
inline void DeleteFaceSetRequest::clear_face_set_id() {
  face_set_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DeleteFaceSetRequest::face_set_id() const {
  // @@protoc_insertion_point(field_get:faceRecognition.DeleteFaceSetRequest.face_set_id)
  return face_set_id_.GetNoArena();
}
inline void DeleteFaceSetRequest::set_face_set_id(const std::string& value) {
  
  face_set_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:faceRecognition.DeleteFaceSetRequest.face_set_id)
}
inline void DeleteFaceSetRequest::set_face_set_id(std::string&& value) {
  
  face_set_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:faceRecognition.DeleteFaceSetRequest.face_set_id)
}
inline void DeleteFaceSetRequest::set_face_set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  face_set_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:faceRecognition.DeleteFaceSetRequest.face_set_id)
}
inline void DeleteFaceSetRequest::set_face_set_id(const char* value, size_t size) {
  
  face_set_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:faceRecognition.DeleteFaceSetRequest.face_set_id)
}
inline std::string* DeleteFaceSetRequest::mutable_face_set_id() {
  
  // @@protoc_insertion_point(field_mutable:faceRecognition.DeleteFaceSetRequest.face_set_id)
  return face_set_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeleteFaceSetRequest::release_face_set_id() {
  // @@protoc_insertion_point(field_release:faceRecognition.DeleteFaceSetRequest.face_set_id)
  
  return face_set_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteFaceSetRequest::set_allocated_face_set_id(std::string* face_set_id) {
  if (face_set_id != nullptr) {
    
  } else {
    
  }
  face_set_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), face_set_id);
  // @@protoc_insertion_point(field_set_allocated:faceRecognition.DeleteFaceSetRequest.face_set_id)
}

// -------------------------------------------------------------------

// DeleteFaceSetResponse

// -------------------------------------------------------------------

// UpdateFaceSetRequest

// .faceRecognition.FaceSet face_set = 1;
inline bool UpdateFaceSetRequest::has_face_set() const {
  return this != internal_default_instance() && face_set_ != nullptr;
}
inline void UpdateFaceSetRequest::clear_face_set() {
  if (GetArenaNoVirtual() == nullptr && face_set_ != nullptr) {
    delete face_set_;
  }
  face_set_ = nullptr;
}
inline const ::faceRecognition::FaceSet& UpdateFaceSetRequest::face_set() const {
  const ::faceRecognition::FaceSet* p = face_set_;
  // @@protoc_insertion_point(field_get:faceRecognition.UpdateFaceSetRequest.face_set)
  return p != nullptr ? *p : *reinterpret_cast<const ::faceRecognition::FaceSet*>(
      &::faceRecognition::_FaceSet_default_instance_);
}
inline ::faceRecognition::FaceSet* UpdateFaceSetRequest::release_face_set() {
  // @@protoc_insertion_point(field_release:faceRecognition.UpdateFaceSetRequest.face_set)
  
  ::faceRecognition::FaceSet* temp = face_set_;
  face_set_ = nullptr;
  return temp;
}
inline ::faceRecognition::FaceSet* UpdateFaceSetRequest::mutable_face_set() {
  
  if (face_set_ == nullptr) {
    auto* p = CreateMaybeMessage<::faceRecognition::FaceSet>(GetArenaNoVirtual());
    face_set_ = p;
  }
  // @@protoc_insertion_point(field_mutable:faceRecognition.UpdateFaceSetRequest.face_set)
  return face_set_;
}
inline void UpdateFaceSetRequest::set_allocated_face_set(::faceRecognition::FaceSet* face_set) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete face_set_;
  }
  if (face_set) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      face_set = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, face_set, submessage_arena);
    }
    
  } else {
    
  }
  face_set_ = face_set;
  // @@protoc_insertion_point(field_set_allocated:faceRecognition.UpdateFaceSetRequest.face_set)
}

// -------------------------------------------------------------------

// UpdateFaceSetResponse

// .faceRecognition.FaceSet face_set = 1;
inline bool UpdateFaceSetResponse::has_face_set() const {
  return this != internal_default_instance() && face_set_ != nullptr;
}
inline void UpdateFaceSetResponse::clear_face_set() {
  if (GetArenaNoVirtual() == nullptr && face_set_ != nullptr) {
    delete face_set_;
  }
  face_set_ = nullptr;
}
inline const ::faceRecognition::FaceSet& UpdateFaceSetResponse::face_set() const {
  const ::faceRecognition::FaceSet* p = face_set_;
  // @@protoc_insertion_point(field_get:faceRecognition.UpdateFaceSetResponse.face_set)
  return p != nullptr ? *p : *reinterpret_cast<const ::faceRecognition::FaceSet*>(
      &::faceRecognition::_FaceSet_default_instance_);
}
inline ::faceRecognition::FaceSet* UpdateFaceSetResponse::release_face_set() {
  // @@protoc_insertion_point(field_release:faceRecognition.UpdateFaceSetResponse.face_set)
  
  ::faceRecognition::FaceSet* temp = face_set_;
  face_set_ = nullptr;
  return temp;
}
inline ::faceRecognition::FaceSet* UpdateFaceSetResponse::mutable_face_set() {
  
  if (face_set_ == nullptr) {
    auto* p = CreateMaybeMessage<::faceRecognition::FaceSet>(GetArenaNoVirtual());
    face_set_ = p;
  }
  // @@protoc_insertion_point(field_mutable:faceRecognition.UpdateFaceSetResponse.face_set)
  return face_set_;
}
inline void UpdateFaceSetResponse::set_allocated_face_set(::faceRecognition::FaceSet* face_set) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete face_set_;
  }
  if (face_set) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      face_set = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, face_set, submessage_arena);
    }
    
  } else {
    
  }
  face_set_ = face_set;
  // @@protoc_insertion_point(field_set_allocated:faceRecognition.UpdateFaceSetResponse.face_set)
}

// -------------------------------------------------------------------

// ListFaceSetsRequest

// -------------------------------------------------------------------

// ListFaceSetsResponse

// repeated .faceRecognition.FaceSet face_sets = 1;
inline int ListFaceSetsResponse::face_sets_size() const {
  return face_sets_.size();
}
inline void ListFaceSetsResponse::clear_face_sets() {
  face_sets_.Clear();
}
inline ::faceRecognition::FaceSet* ListFaceSetsResponse::mutable_face_sets(int index) {
  // @@protoc_insertion_point(field_mutable:faceRecognition.ListFaceSetsResponse.face_sets)
  return face_sets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::faceRecognition::FaceSet >*
ListFaceSetsResponse::mutable_face_sets() {
  // @@protoc_insertion_point(field_mutable_list:faceRecognition.ListFaceSetsResponse.face_sets)
  return &face_sets_;
}
inline const ::faceRecognition::FaceSet& ListFaceSetsResponse::face_sets(int index) const {
  // @@protoc_insertion_point(field_get:faceRecognition.ListFaceSetsResponse.face_sets)
  return face_sets_.Get(index);
}
inline ::faceRecognition::FaceSet* ListFaceSetsResponse::add_face_sets() {
  // @@protoc_insertion_point(field_add:faceRecognition.ListFaceSetsResponse.face_sets)
  return face_sets_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::faceRecognition::FaceSet >&
ListFaceSetsResponse::face_sets() const {
  // @@protoc_insertion_point(field_list:faceRecognition.ListFaceSetsResponse.face_sets)
  return face_sets_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// AddFaceRequest

// string face_set_id = 1;
inline void AddFaceRequest::clear_face_set_id() {
  face_set_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AddFaceRequest::face_set_id() const {
  // @@protoc_insertion_point(field_get:faceRecognition.AddFaceRequest.face_set_id)
  return face_set_id_.GetNoArena();
}
inline void AddFaceRequest::set_face_set_id(const std::string& value) {
  
  face_set_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:faceRecognition.AddFaceRequest.face_set_id)
}
inline void AddFaceRequest::set_face_set_id(std::string&& value) {
  
  face_set_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:faceRecognition.AddFaceRequest.face_set_id)
}
inline void AddFaceRequest::set_face_set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  face_set_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:faceRecognition.AddFaceRequest.face_set_id)
}
inline void AddFaceRequest::set_face_set_id(const char* value, size_t size) {
  
  face_set_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:faceRecognition.AddFaceRequest.face_set_id)
}
inline std::string* AddFaceRequest::mutable_face_set_id() {
  
  // @@protoc_insertion_point(field_mutable:faceRecognition.AddFaceRequest.face_set_id)
  return face_set_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AddFaceRequest::release_face_set_id() {
  // @@protoc_insertion_point(field_release:faceRecognition.AddFaceRequest.face_set_id)
  
  return face_set_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AddFaceRequest::set_allocated_face_set_id(std::string* face_set_id) {
  if (face_set_id != nullptr) {
    
  } else {
    
  }
  face_set_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), face_set_id);
  // @@protoc_insertion_point(field_set_allocated:faceRecognition.AddFaceRequest.face_set_id)
}

// bytes face_img = 2;
inline void AddFaceRequest::clear_face_img() {
  face_img_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AddFaceRequest::face_img() const {
  // @@protoc_insertion_point(field_get:faceRecognition.AddFaceRequest.face_img)
  return face_img_.GetNoArena();
}
inline void AddFaceRequest::set_face_img(const std::string& value) {
  
  face_img_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:faceRecognition.AddFaceRequest.face_img)
}
inline void AddFaceRequest::set_face_img(std::string&& value) {
  
  face_img_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:faceRecognition.AddFaceRequest.face_img)
}
inline void AddFaceRequest::set_face_img(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  face_img_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:faceRecognition.AddFaceRequest.face_img)
}
inline void AddFaceRequest::set_face_img(const void* value, size_t size) {
  
  face_img_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:faceRecognition.AddFaceRequest.face_img)
}
inline std::string* AddFaceRequest::mutable_face_img() {
  
  // @@protoc_insertion_point(field_mutable:faceRecognition.AddFaceRequest.face_img)
  return face_img_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AddFaceRequest::release_face_img() {
  // @@protoc_insertion_point(field_release:faceRecognition.AddFaceRequest.face_img)
  
  return face_img_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AddFaceRequest::set_allocated_face_img(std::string* face_img) {
  if (face_img != nullptr) {
    
  } else {
    
  }
  face_img_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), face_img);
  // @@protoc_insertion_point(field_set_allocated:faceRecognition.AddFaceRequest.face_img)
}

// map<string, string> detail = 3;
inline int AddFaceRequest::detail_size() const {
  return detail_.size();
}
inline void AddFaceRequest::clear_detail() {
  detail_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
AddFaceRequest::detail() const {
  // @@protoc_insertion_point(field_map:faceRecognition.AddFaceRequest.detail)
  return detail_.GetMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
AddFaceRequest::mutable_detail() {
  // @@protoc_insertion_point(field_mutable_map:faceRecognition.AddFaceRequest.detail)
  return detail_.MutableMap();
}

// -------------------------------------------------------------------

// AddFaceResponse

// string face_token = 1;
inline void AddFaceResponse::clear_face_token() {
  face_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AddFaceResponse::face_token() const {
  // @@protoc_insertion_point(field_get:faceRecognition.AddFaceResponse.face_token)
  return face_token_.GetNoArena();
}
inline void AddFaceResponse::set_face_token(const std::string& value) {
  
  face_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:faceRecognition.AddFaceResponse.face_token)
}
inline void AddFaceResponse::set_face_token(std::string&& value) {
  
  face_token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:faceRecognition.AddFaceResponse.face_token)
}
inline void AddFaceResponse::set_face_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  face_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:faceRecognition.AddFaceResponse.face_token)
}
inline void AddFaceResponse::set_face_token(const char* value, size_t size) {
  
  face_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:faceRecognition.AddFaceResponse.face_token)
}
inline std::string* AddFaceResponse::mutable_face_token() {
  
  // @@protoc_insertion_point(field_mutable:faceRecognition.AddFaceResponse.face_token)
  return face_token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AddFaceResponse::release_face_token() {
  // @@protoc_insertion_point(field_release:faceRecognition.AddFaceResponse.face_token)
  
  return face_token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AddFaceResponse::set_allocated_face_token(std::string* face_token) {
  if (face_token != nullptr) {
    
  } else {
    
  }
  face_token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), face_token);
  // @@protoc_insertion_point(field_set_allocated:faceRecognition.AddFaceResponse.face_token)
}

// -------------------------------------------------------------------

// RemoveFaceRequest

// string face_set_id = 1;
inline void RemoveFaceRequest::clear_face_set_id() {
  face_set_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RemoveFaceRequest::face_set_id() const {
  // @@protoc_insertion_point(field_get:faceRecognition.RemoveFaceRequest.face_set_id)
  return face_set_id_.GetNoArena();
}
inline void RemoveFaceRequest::set_face_set_id(const std::string& value) {
  
  face_set_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:faceRecognition.RemoveFaceRequest.face_set_id)
}
inline void RemoveFaceRequest::set_face_set_id(std::string&& value) {
  
  face_set_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:faceRecognition.RemoveFaceRequest.face_set_id)
}
inline void RemoveFaceRequest::set_face_set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  face_set_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:faceRecognition.RemoveFaceRequest.face_set_id)
}
inline void RemoveFaceRequest::set_face_set_id(const char* value, size_t size) {
  
  face_set_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:faceRecognition.RemoveFaceRequest.face_set_id)
}
inline std::string* RemoveFaceRequest::mutable_face_set_id() {
  
  // @@protoc_insertion_point(field_mutable:faceRecognition.RemoveFaceRequest.face_set_id)
  return face_set_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RemoveFaceRequest::release_face_set_id() {
  // @@protoc_insertion_point(field_release:faceRecognition.RemoveFaceRequest.face_set_id)
  
  return face_set_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RemoveFaceRequest::set_allocated_face_set_id(std::string* face_set_id) {
  if (face_set_id != nullptr) {
    
  } else {
    
  }
  face_set_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), face_set_id);
  // @@protoc_insertion_point(field_set_allocated:faceRecognition.RemoveFaceRequest.face_set_id)
}

// string face_token = 2;
inline void RemoveFaceRequest::clear_face_token() {
  face_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RemoveFaceRequest::face_token() const {
  // @@protoc_insertion_point(field_get:faceRecognition.RemoveFaceRequest.face_token)
  return face_token_.GetNoArena();
}
inline void RemoveFaceRequest::set_face_token(const std::string& value) {
  
  face_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:faceRecognition.RemoveFaceRequest.face_token)
}
inline void RemoveFaceRequest::set_face_token(std::string&& value) {
  
  face_token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:faceRecognition.RemoveFaceRequest.face_token)
}
inline void RemoveFaceRequest::set_face_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  face_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:faceRecognition.RemoveFaceRequest.face_token)
}
inline void RemoveFaceRequest::set_face_token(const char* value, size_t size) {
  
  face_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:faceRecognition.RemoveFaceRequest.face_token)
}
inline std::string* RemoveFaceRequest::mutable_face_token() {
  
  // @@protoc_insertion_point(field_mutable:faceRecognition.RemoveFaceRequest.face_token)
  return face_token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RemoveFaceRequest::release_face_token() {
  // @@protoc_insertion_point(field_release:faceRecognition.RemoveFaceRequest.face_token)
  
  return face_token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RemoveFaceRequest::set_allocated_face_token(std::string* face_token) {
  if (face_token != nullptr) {
    
  } else {
    
  }
  face_token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), face_token);
  // @@protoc_insertion_point(field_set_allocated:faceRecognition.RemoveFaceRequest.face_token)
}

// -------------------------------------------------------------------

// RemoveFaceResponse

// -------------------------------------------------------------------

// FaceDetailRequest

// string face_set_id = 1;
inline void FaceDetailRequest::clear_face_set_id() {
  face_set_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FaceDetailRequest::face_set_id() const {
  // @@protoc_insertion_point(field_get:faceRecognition.FaceDetailRequest.face_set_id)
  return face_set_id_.GetNoArena();
}
inline void FaceDetailRequest::set_face_set_id(const std::string& value) {
  
  face_set_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:faceRecognition.FaceDetailRequest.face_set_id)
}
inline void FaceDetailRequest::set_face_set_id(std::string&& value) {
  
  face_set_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:faceRecognition.FaceDetailRequest.face_set_id)
}
inline void FaceDetailRequest::set_face_set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  face_set_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:faceRecognition.FaceDetailRequest.face_set_id)
}
inline void FaceDetailRequest::set_face_set_id(const char* value, size_t size) {
  
  face_set_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:faceRecognition.FaceDetailRequest.face_set_id)
}
inline std::string* FaceDetailRequest::mutable_face_set_id() {
  
  // @@protoc_insertion_point(field_mutable:faceRecognition.FaceDetailRequest.face_set_id)
  return face_set_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FaceDetailRequest::release_face_set_id() {
  // @@protoc_insertion_point(field_release:faceRecognition.FaceDetailRequest.face_set_id)
  
  return face_set_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FaceDetailRequest::set_allocated_face_set_id(std::string* face_set_id) {
  if (face_set_id != nullptr) {
    
  } else {
    
  }
  face_set_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), face_set_id);
  // @@protoc_insertion_point(field_set_allocated:faceRecognition.FaceDetailRequest.face_set_id)
}

// string face_token = 2;
inline void FaceDetailRequest::clear_face_token() {
  face_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FaceDetailRequest::face_token() const {
  // @@protoc_insertion_point(field_get:faceRecognition.FaceDetailRequest.face_token)
  return face_token_.GetNoArena();
}
inline void FaceDetailRequest::set_face_token(const std::string& value) {
  
  face_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:faceRecognition.FaceDetailRequest.face_token)
}
inline void FaceDetailRequest::set_face_token(std::string&& value) {
  
  face_token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:faceRecognition.FaceDetailRequest.face_token)
}
inline void FaceDetailRequest::set_face_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  face_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:faceRecognition.FaceDetailRequest.face_token)
}
inline void FaceDetailRequest::set_face_token(const char* value, size_t size) {
  
  face_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:faceRecognition.FaceDetailRequest.face_token)
}
inline std::string* FaceDetailRequest::mutable_face_token() {
  
  // @@protoc_insertion_point(field_mutable:faceRecognition.FaceDetailRequest.face_token)
  return face_token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FaceDetailRequest::release_face_token() {
  // @@protoc_insertion_point(field_release:faceRecognition.FaceDetailRequest.face_token)
  
  return face_token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FaceDetailRequest::set_allocated_face_token(std::string* face_token) {
  if (face_token != nullptr) {
    
  } else {
    
  }
  face_token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), face_token);
  // @@protoc_insertion_point(field_set_allocated:faceRecognition.FaceDetailRequest.face_token)
}

// bool with_face_img = 3;
inline void FaceDetailRequest::clear_with_face_img() {
  with_face_img_ = false;
}
inline bool FaceDetailRequest::with_face_img() const {
  // @@protoc_insertion_point(field_get:faceRecognition.FaceDetailRequest.with_face_img)
  return with_face_img_;
}
inline void FaceDetailRequest::set_with_face_img(bool value) {
  
  with_face_img_ = value;
  // @@protoc_insertion_point(field_set:faceRecognition.FaceDetailRequest.with_face_img)
}

// -------------------------------------------------------------------

// FaceDetailResponse

// .faceRecognition.FaceDetail face_detail = 1;
inline bool FaceDetailResponse::has_face_detail() const {
  return this != internal_default_instance() && face_detail_ != nullptr;
}
inline void FaceDetailResponse::clear_face_detail() {
  if (GetArenaNoVirtual() == nullptr && face_detail_ != nullptr) {
    delete face_detail_;
  }
  face_detail_ = nullptr;
}
inline const ::faceRecognition::FaceDetail& FaceDetailResponse::face_detail() const {
  const ::faceRecognition::FaceDetail* p = face_detail_;
  // @@protoc_insertion_point(field_get:faceRecognition.FaceDetailResponse.face_detail)
  return p != nullptr ? *p : *reinterpret_cast<const ::faceRecognition::FaceDetail*>(
      &::faceRecognition::_FaceDetail_default_instance_);
}
inline ::faceRecognition::FaceDetail* FaceDetailResponse::release_face_detail() {
  // @@protoc_insertion_point(field_release:faceRecognition.FaceDetailResponse.face_detail)
  
  ::faceRecognition::FaceDetail* temp = face_detail_;
  face_detail_ = nullptr;
  return temp;
}
inline ::faceRecognition::FaceDetail* FaceDetailResponse::mutable_face_detail() {
  
  if (face_detail_ == nullptr) {
    auto* p = CreateMaybeMessage<::faceRecognition::FaceDetail>(GetArenaNoVirtual());
    face_detail_ = p;
  }
  // @@protoc_insertion_point(field_mutable:faceRecognition.FaceDetailResponse.face_detail)
  return face_detail_;
}
inline void FaceDetailResponse::set_allocated_face_detail(::faceRecognition::FaceDetail* face_detail) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete face_detail_;
  }
  if (face_detail) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      face_detail = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, face_detail, submessage_arena);
    }
    
  } else {
    
  }
  face_detail_ = face_detail;
  // @@protoc_insertion_point(field_set_allocated:faceRecognition.FaceDetailResponse.face_detail)
}

// -------------------------------------------------------------------

// ListFaceDetailsRequest

// string face_set_id = 1;
inline void ListFaceDetailsRequest::clear_face_set_id() {
  face_set_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ListFaceDetailsRequest::face_set_id() const {
  // @@protoc_insertion_point(field_get:faceRecognition.ListFaceDetailsRequest.face_set_id)
  return face_set_id_.GetNoArena();
}
inline void ListFaceDetailsRequest::set_face_set_id(const std::string& value) {
  
  face_set_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:faceRecognition.ListFaceDetailsRequest.face_set_id)
}
inline void ListFaceDetailsRequest::set_face_set_id(std::string&& value) {
  
  face_set_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:faceRecognition.ListFaceDetailsRequest.face_set_id)
}
inline void ListFaceDetailsRequest::set_face_set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  face_set_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:faceRecognition.ListFaceDetailsRequest.face_set_id)
}
inline void ListFaceDetailsRequest::set_face_set_id(const char* value, size_t size) {
  
  face_set_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:faceRecognition.ListFaceDetailsRequest.face_set_id)
}
inline std::string* ListFaceDetailsRequest::mutable_face_set_id() {
  
  // @@protoc_insertion_point(field_mutable:faceRecognition.ListFaceDetailsRequest.face_set_id)
  return face_set_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ListFaceDetailsRequest::release_face_set_id() {
  // @@protoc_insertion_point(field_release:faceRecognition.ListFaceDetailsRequest.face_set_id)
  
  return face_set_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ListFaceDetailsRequest::set_allocated_face_set_id(std::string* face_set_id) {
  if (face_set_id != nullptr) {
    
  } else {
    
  }
  face_set_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), face_set_id);
  // @@protoc_insertion_point(field_set_allocated:faceRecognition.ListFaceDetailsRequest.face_set_id)
}

// uint32 limit = 2;
inline void ListFaceDetailsRequest::clear_limit() {
  limit_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListFaceDetailsRequest::limit() const {
  // @@protoc_insertion_point(field_get:faceRecognition.ListFaceDetailsRequest.limit)
  return limit_;
}
inline void ListFaceDetailsRequest::set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  limit_ = value;
  // @@protoc_insertion_point(field_set:faceRecognition.ListFaceDetailsRequest.limit)
}

// uint32 offset = 3;
inline void ListFaceDetailsRequest::clear_offset() {
  offset_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListFaceDetailsRequest::offset() const {
  // @@protoc_insertion_point(field_get:faceRecognition.ListFaceDetailsRequest.offset)
  return offset_;
}
inline void ListFaceDetailsRequest::set_offset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  offset_ = value;
  // @@protoc_insertion_point(field_set:faceRecognition.ListFaceDetailsRequest.offset)
}

// -------------------------------------------------------------------

// ListFaceDetailsResponse

// .faceRecognition.FaceSet face_set = 1;
inline bool ListFaceDetailsResponse::has_face_set() const {
  return this != internal_default_instance() && face_set_ != nullptr;
}
inline void ListFaceDetailsResponse::clear_face_set() {
  if (GetArenaNoVirtual() == nullptr && face_set_ != nullptr) {
    delete face_set_;
  }
  face_set_ = nullptr;
}
inline const ::faceRecognition::FaceSet& ListFaceDetailsResponse::face_set() const {
  const ::faceRecognition::FaceSet* p = face_set_;
  // @@protoc_insertion_point(field_get:faceRecognition.ListFaceDetailsResponse.face_set)
  return p != nullptr ? *p : *reinterpret_cast<const ::faceRecognition::FaceSet*>(
      &::faceRecognition::_FaceSet_default_instance_);
}
inline ::faceRecognition::FaceSet* ListFaceDetailsResponse::release_face_set() {
  // @@protoc_insertion_point(field_release:faceRecognition.ListFaceDetailsResponse.face_set)
  
  ::faceRecognition::FaceSet* temp = face_set_;
  face_set_ = nullptr;
  return temp;
}
inline ::faceRecognition::FaceSet* ListFaceDetailsResponse::mutable_face_set() {
  
  if (face_set_ == nullptr) {
    auto* p = CreateMaybeMessage<::faceRecognition::FaceSet>(GetArenaNoVirtual());
    face_set_ = p;
  }
  // @@protoc_insertion_point(field_mutable:faceRecognition.ListFaceDetailsResponse.face_set)
  return face_set_;
}
inline void ListFaceDetailsResponse::set_allocated_face_set(::faceRecognition::FaceSet* face_set) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete face_set_;
  }
  if (face_set) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      face_set = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, face_set, submessage_arena);
    }
    
  } else {
    
  }
  face_set_ = face_set;
  // @@protoc_insertion_point(field_set_allocated:faceRecognition.ListFaceDetailsResponse.face_set)
}

// repeated .faceRecognition.FaceDetail face_details = 2;
inline int ListFaceDetailsResponse::face_details_size() const {
  return face_details_.size();
}
inline void ListFaceDetailsResponse::clear_face_details() {
  face_details_.Clear();
}
inline ::faceRecognition::FaceDetail* ListFaceDetailsResponse::mutable_face_details(int index) {
  // @@protoc_insertion_point(field_mutable:faceRecognition.ListFaceDetailsResponse.face_details)
  return face_details_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::faceRecognition::FaceDetail >*
ListFaceDetailsResponse::mutable_face_details() {
  // @@protoc_insertion_point(field_mutable_list:faceRecognition.ListFaceDetailsResponse.face_details)
  return &face_details_;
}
inline const ::faceRecognition::FaceDetail& ListFaceDetailsResponse::face_details(int index) const {
  // @@protoc_insertion_point(field_get:faceRecognition.ListFaceDetailsResponse.face_details)
  return face_details_.Get(index);
}
inline ::faceRecognition::FaceDetail* ListFaceDetailsResponse::add_face_details() {
  // @@protoc_insertion_point(field_add:faceRecognition.ListFaceDetailsResponse.face_details)
  return face_details_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::faceRecognition::FaceDetail >&
ListFaceDetailsResponse::face_details() const {
  // @@protoc_insertion_point(field_list:faceRecognition.ListFaceDetailsResponse.face_details)
  return face_details_;
}

// uint32 total = 3;
inline void ListFaceDetailsResponse::clear_total() {
  total_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListFaceDetailsResponse::total() const {
  // @@protoc_insertion_point(field_get:faceRecognition.ListFaceDetailsResponse.total)
  return total_;
}
inline void ListFaceDetailsResponse::set_total(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  total_ = value;
  // @@protoc_insertion_point(field_set:faceRecognition.ListFaceDetailsResponse.total)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace faceRecognition

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_faceset_2eproto
