// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: face.proto

#include "face.pb.h"
#include "face.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace faceRecognition {

static const char* FaceService_method_names[] = {
  "/faceRecognition.FaceService/Compare",
  "/faceRecognition.FaceService/Search",
};

std::unique_ptr< FaceService::Stub> FaceService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< FaceService::Stub> stub(new FaceService::Stub(channel));
  return stub;
}

FaceService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Compare_(FaceService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Search_(FaceService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status FaceService::Stub::Compare(::grpc::ClientContext* context, const ::faceRecognition::CompareRequest& request, ::faceRecognition::CompareResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Compare_, context, request, response);
}

void FaceService::Stub::experimental_async::Compare(::grpc::ClientContext* context, const ::faceRecognition::CompareRequest* request, ::faceRecognition::CompareResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Compare_, context, request, response, std::move(f));
}

void FaceService::Stub::experimental_async::Compare(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::faceRecognition::CompareResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Compare_, context, request, response, std::move(f));
}

void FaceService::Stub::experimental_async::Compare(::grpc::ClientContext* context, const ::faceRecognition::CompareRequest* request, ::faceRecognition::CompareResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Compare_, context, request, response, reactor);
}

void FaceService::Stub::experimental_async::Compare(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::faceRecognition::CompareResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Compare_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::faceRecognition::CompareResponse>* FaceService::Stub::AsyncCompareRaw(::grpc::ClientContext* context, const ::faceRecognition::CompareRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::faceRecognition::CompareResponse>::Create(channel_.get(), cq, rpcmethod_Compare_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::faceRecognition::CompareResponse>* FaceService::Stub::PrepareAsyncCompareRaw(::grpc::ClientContext* context, const ::faceRecognition::CompareRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::faceRecognition::CompareResponse>::Create(channel_.get(), cq, rpcmethod_Compare_, context, request, false);
}

::grpc::Status FaceService::Stub::Search(::grpc::ClientContext* context, const ::faceRecognition::SearchRequest& request, ::faceRecognition::SearchResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Search_, context, request, response);
}

void FaceService::Stub::experimental_async::Search(::grpc::ClientContext* context, const ::faceRecognition::SearchRequest* request, ::faceRecognition::SearchResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Search_, context, request, response, std::move(f));
}

void FaceService::Stub::experimental_async::Search(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::faceRecognition::SearchResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Search_, context, request, response, std::move(f));
}

void FaceService::Stub::experimental_async::Search(::grpc::ClientContext* context, const ::faceRecognition::SearchRequest* request, ::faceRecognition::SearchResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Search_, context, request, response, reactor);
}

void FaceService::Stub::experimental_async::Search(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::faceRecognition::SearchResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Search_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::faceRecognition::SearchResponse>* FaceService::Stub::AsyncSearchRaw(::grpc::ClientContext* context, const ::faceRecognition::SearchRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::faceRecognition::SearchResponse>::Create(channel_.get(), cq, rpcmethod_Search_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::faceRecognition::SearchResponse>* FaceService::Stub::PrepareAsyncSearchRaw(::grpc::ClientContext* context, const ::faceRecognition::SearchRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::faceRecognition::SearchResponse>::Create(channel_.get(), cq, rpcmethod_Search_, context, request, false);
}

FaceService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FaceService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FaceService::Service, ::faceRecognition::CompareRequest, ::faceRecognition::CompareResponse>(
          std::mem_fn(&FaceService::Service::Compare), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FaceService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FaceService::Service, ::faceRecognition::SearchRequest, ::faceRecognition::SearchResponse>(
          std::mem_fn(&FaceService::Service::Search), this)));
}

FaceService::Service::~Service() {
}

::grpc::Status FaceService::Service::Compare(::grpc::ServerContext* context, const ::faceRecognition::CompareRequest* request, ::faceRecognition::CompareResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FaceService::Service::Search(::grpc::ServerContext* context, const ::faceRecognition::SearchRequest* request, ::faceRecognition::SearchResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace faceRecognition

