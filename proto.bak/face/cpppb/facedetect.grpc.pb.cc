// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: facedetect.proto

#include "facedetect.pb.h"
#include "facedetect.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace faceRecognition {

static const char* FaceDetect_method_names[] = {
  "/faceRecognition.FaceDetect/FromImage",
  "/faceRecognition.FaceDetect/OnFaceDetect",
  "/faceRecognition.FaceDetect/OnFaceSetFaceDetect",
};

std::unique_ptr< FaceDetect::Stub> FaceDetect::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< FaceDetect::Stub> stub(new FaceDetect::Stub(channel));
  return stub;
}

FaceDetect::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_FromImage_(FaceDetect_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_OnFaceDetect_(FaceDetect_method_names[1], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_OnFaceSetFaceDetect_(FaceDetect_method_names[2], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status FaceDetect::Stub::FromImage(::grpc::ClientContext* context, const ::faceRecognition::FromImageRequest& request, ::faceRecognition::FromImageResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_FromImage_, context, request, response);
}

void FaceDetect::Stub::experimental_async::FromImage(::grpc::ClientContext* context, const ::faceRecognition::FromImageRequest* request, ::faceRecognition::FromImageResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_FromImage_, context, request, response, std::move(f));
}

void FaceDetect::Stub::experimental_async::FromImage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::faceRecognition::FromImageResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_FromImage_, context, request, response, std::move(f));
}

void FaceDetect::Stub::experimental_async::FromImage(::grpc::ClientContext* context, const ::faceRecognition::FromImageRequest* request, ::faceRecognition::FromImageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_FromImage_, context, request, response, reactor);
}

void FaceDetect::Stub::experimental_async::FromImage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::faceRecognition::FromImageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_FromImage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::faceRecognition::FromImageResponse>* FaceDetect::Stub::AsyncFromImageRaw(::grpc::ClientContext* context, const ::faceRecognition::FromImageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::faceRecognition::FromImageResponse>::Create(channel_.get(), cq, rpcmethod_FromImage_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::faceRecognition::FromImageResponse>* FaceDetect::Stub::PrepareAsyncFromImageRaw(::grpc::ClientContext* context, const ::faceRecognition::FromImageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::faceRecognition::FromImageResponse>::Create(channel_.get(), cq, rpcmethod_FromImage_, context, request, false);
}

::grpc::ClientReader< ::faceRecognition::OnFaceDetectResponse>* FaceDetect::Stub::OnFaceDetectRaw(::grpc::ClientContext* context, const ::faceRecognition::OnFaceDetectRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::faceRecognition::OnFaceDetectResponse>::Create(channel_.get(), rpcmethod_OnFaceDetect_, context, request);
}

void FaceDetect::Stub::experimental_async::OnFaceDetect(::grpc::ClientContext* context, ::faceRecognition::OnFaceDetectRequest* request, ::grpc::experimental::ClientReadReactor< ::faceRecognition::OnFaceDetectResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::faceRecognition::OnFaceDetectResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_OnFaceDetect_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::faceRecognition::OnFaceDetectResponse>* FaceDetect::Stub::AsyncOnFaceDetectRaw(::grpc::ClientContext* context, const ::faceRecognition::OnFaceDetectRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::faceRecognition::OnFaceDetectResponse>::Create(channel_.get(), cq, rpcmethod_OnFaceDetect_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::faceRecognition::OnFaceDetectResponse>* FaceDetect::Stub::PrepareAsyncOnFaceDetectRaw(::grpc::ClientContext* context, const ::faceRecognition::OnFaceDetectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::faceRecognition::OnFaceDetectResponse>::Create(channel_.get(), cq, rpcmethod_OnFaceDetect_, context, request, false, nullptr);
}

::grpc::ClientReader< ::faceRecognition::OnFaceSetFaceDetectResponse>* FaceDetect::Stub::OnFaceSetFaceDetectRaw(::grpc::ClientContext* context, const ::faceRecognition::OnFaceSetFaceDetectRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::faceRecognition::OnFaceSetFaceDetectResponse>::Create(channel_.get(), rpcmethod_OnFaceSetFaceDetect_, context, request);
}

void FaceDetect::Stub::experimental_async::OnFaceSetFaceDetect(::grpc::ClientContext* context, ::faceRecognition::OnFaceSetFaceDetectRequest* request, ::grpc::experimental::ClientReadReactor< ::faceRecognition::OnFaceSetFaceDetectResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::faceRecognition::OnFaceSetFaceDetectResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_OnFaceSetFaceDetect_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::faceRecognition::OnFaceSetFaceDetectResponse>* FaceDetect::Stub::AsyncOnFaceSetFaceDetectRaw(::grpc::ClientContext* context, const ::faceRecognition::OnFaceSetFaceDetectRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::faceRecognition::OnFaceSetFaceDetectResponse>::Create(channel_.get(), cq, rpcmethod_OnFaceSetFaceDetect_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::faceRecognition::OnFaceSetFaceDetectResponse>* FaceDetect::Stub::PrepareAsyncOnFaceSetFaceDetectRaw(::grpc::ClientContext* context, const ::faceRecognition::OnFaceSetFaceDetectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::faceRecognition::OnFaceSetFaceDetectResponse>::Create(channel_.get(), cq, rpcmethod_OnFaceSetFaceDetect_, context, request, false, nullptr);
}

FaceDetect::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FaceDetect_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FaceDetect::Service, ::faceRecognition::FromImageRequest, ::faceRecognition::FromImageResponse>(
          std::mem_fn(&FaceDetect::Service::FromImage), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FaceDetect_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< FaceDetect::Service, ::faceRecognition::OnFaceDetectRequest, ::faceRecognition::OnFaceDetectResponse>(
          std::mem_fn(&FaceDetect::Service::OnFaceDetect), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FaceDetect_method_names[2],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< FaceDetect::Service, ::faceRecognition::OnFaceSetFaceDetectRequest, ::faceRecognition::OnFaceSetFaceDetectResponse>(
          std::mem_fn(&FaceDetect::Service::OnFaceSetFaceDetect), this)));
}

FaceDetect::Service::~Service() {
}

::grpc::Status FaceDetect::Service::FromImage(::grpc::ServerContext* context, const ::faceRecognition::FromImageRequest* request, ::faceRecognition::FromImageResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FaceDetect::Service::OnFaceDetect(::grpc::ServerContext* context, const ::faceRecognition::OnFaceDetectRequest* request, ::grpc::ServerWriter< ::faceRecognition::OnFaceDetectResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FaceDetect::Service::OnFaceSetFaceDetect(::grpc::ServerContext* context, const ::faceRecognition::OnFaceSetFaceDetectRequest* request, ::grpc::ServerWriter< ::faceRecognition::OnFaceSetFaceDetectResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace faceRecognition

