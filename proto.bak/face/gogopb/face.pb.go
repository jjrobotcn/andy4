// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: face.proto

package faceRecognition

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type CompareRequest struct {
	FaceImg1             []byte   `protobuf:"bytes,1,opt,name=face_img1,json=faceImg1,proto3" json:"face_img1,omitempty"`
	FaceImg2             []byte   `protobuf:"bytes,2,opt,name=face_img2,json=faceImg2,proto3" json:"face_img2,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CompareRequest) Reset()         { *m = CompareRequest{} }
func (m *CompareRequest) String() string { return proto.CompactTextString(m) }
func (*CompareRequest) ProtoMessage()    {}
func (*CompareRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_543a5193e84d47c5, []int{0}
}
func (m *CompareRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CompareRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CompareRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CompareRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompareRequest.Merge(m, src)
}
func (m *CompareRequest) XXX_Size() int {
	return m.Size()
}
func (m *CompareRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CompareRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CompareRequest proto.InternalMessageInfo

func (m *CompareRequest) GetFaceImg1() []byte {
	if m != nil {
		return m.FaceImg1
	}
	return nil
}

func (m *CompareRequest) GetFaceImg2() []byte {
	if m != nil {
		return m.FaceImg2
	}
	return nil
}

type CompareResponse struct {
	// 对比结果信任值 [0, 1.0]
	Confidence           float32  `protobuf:"fixed32,1,opt,name=confidence,proto3" json:"confidence,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CompareResponse) Reset()         { *m = CompareResponse{} }
func (m *CompareResponse) String() string { return proto.CompactTextString(m) }
func (*CompareResponse) ProtoMessage()    {}
func (*CompareResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_543a5193e84d47c5, []int{1}
}
func (m *CompareResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CompareResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CompareResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CompareResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompareResponse.Merge(m, src)
}
func (m *CompareResponse) XXX_Size() int {
	return m.Size()
}
func (m *CompareResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CompareResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CompareResponse proto.InternalMessageInfo

func (m *CompareResponse) GetConfidence() float32 {
	if m != nil {
		return m.Confidence
	}
	return 0
}

type SearchRequest struct {
	// FaceSet.id
	FaceSetId string `protobuf:"bytes,1,opt,name=face_set_id,json=faceSetId,proto3" json:"face_set_id,omitempty"`
	// 待搜索人脸图片
	FaceImg              []byte   `protobuf:"bytes,2,opt,name=face_img,json=faceImg,proto3" json:"face_img,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SearchRequest) Reset()         { *m = SearchRequest{} }
func (m *SearchRequest) String() string { return proto.CompactTextString(m) }
func (*SearchRequest) ProtoMessage()    {}
func (*SearchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_543a5193e84d47c5, []int{2}
}
func (m *SearchRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SearchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SearchRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SearchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchRequest.Merge(m, src)
}
func (m *SearchRequest) XXX_Size() int {
	return m.Size()
}
func (m *SearchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SearchRequest proto.InternalMessageInfo

func (m *SearchRequest) GetFaceSetId() string {
	if m != nil {
		return m.FaceSetId
	}
	return ""
}

func (m *SearchRequest) GetFaceImg() []byte {
	if m != nil {
		return m.FaceImg
	}
	return nil
}

type SearchResponse struct {
	// 搜索结果信任值 [0, 1.0]
	Confidence float32 `protobuf:"fixed32,1,opt,name=confidence,proto3" json:"confidence,omitempty"`
	// 搜索结果FaceDetail.token
	FaceToken            string   `protobuf:"bytes,2,opt,name=face_token,json=faceToken,proto3" json:"face_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SearchResponse) Reset()         { *m = SearchResponse{} }
func (m *SearchResponse) String() string { return proto.CompactTextString(m) }
func (*SearchResponse) ProtoMessage()    {}
func (*SearchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_543a5193e84d47c5, []int{3}
}
func (m *SearchResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SearchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SearchResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SearchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchResponse.Merge(m, src)
}
func (m *SearchResponse) XXX_Size() int {
	return m.Size()
}
func (m *SearchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SearchResponse proto.InternalMessageInfo

func (m *SearchResponse) GetConfidence() float32 {
	if m != nil {
		return m.Confidence
	}
	return 0
}

func (m *SearchResponse) GetFaceToken() string {
	if m != nil {
		return m.FaceToken
	}
	return ""
}

func init() {
	proto.RegisterType((*CompareRequest)(nil), "faceRecognition.CompareRequest")
	proto.RegisterType((*CompareResponse)(nil), "faceRecognition.CompareResponse")
	proto.RegisterType((*SearchRequest)(nil), "faceRecognition.SearchRequest")
	proto.RegisterType((*SearchResponse)(nil), "faceRecognition.SearchResponse")
}

func init() { proto.RegisterFile("face.proto", fileDescriptor_543a5193e84d47c5) }

var fileDescriptor_543a5193e84d47c5 = []byte{
	// 337 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xcd, 0x4a, 0xc3, 0x40,
	0x14, 0x85, 0x99, 0x2e, 0xfa, 0x73, 0x5b, 0x5b, 0x18, 0x5d, 0xb4, 0x55, 0xa7, 0x65, 0x56, 0xd2,
	0x45, 0x43, 0xe3, 0xae, 0x4b, 0x05, 0xa1, 0xdd, 0x08, 0xa9, 0xfb, 0x12, 0xa7, 0xb7, 0x71, 0xd0,
	0xcc, 0xc4, 0x64, 0xec, 0x03, 0xf8, 0x0a, 0xbe, 0x94, 0x4b, 0xc1, 0x17, 0x90, 0x22, 0xf8, 0x1a,
	0x92, 0x49, 0x22, 0x8d, 0x52, 0x70, 0x17, 0xce, 0x3d, 0x73, 0xbe, 0xb9, 0x27, 0x03, 0xb0, 0xf6,
	0x05, 0x8e, 0xa3, 0x58, 0x1b, 0x4d, 0x3b, 0xe9, 0xb7, 0x87, 0x42, 0x07, 0x4a, 0x1a, 0xa9, 0x55,
	0xff, 0x24, 0xd0, 0x3a, 0x78, 0x40, 0xc7, 0x8f, 0xa4, 0xe3, 0x2b, 0xa5, 0x8d, 0x9f, 0xca, 0x49,
	0x66, 0xe7, 0x73, 0x68, 0x5f, 0xea, 0x30, 0xf2, 0x63, 0xf4, 0xf0, 0xf1, 0x09, 0x13, 0x43, 0x8f,
	0xa1, 0x91, 0x46, 0x2c, 0x65, 0x18, 0x4c, 0xba, 0x64, 0x48, 0xce, 0x5a, 0x5e, 0x3d, 0x15, 0x66,
	0x61, 0x30, 0xd9, 0x1d, 0xba, 0xdd, 0x4a, 0x69, 0xe8, 0xf2, 0x09, 0x74, 0x7e, 0xb2, 0x92, 0x48,
	0xab, 0x04, 0x29, 0x03, 0x10, 0x5a, 0xad, 0xe5, 0x0a, 0x95, 0x40, 0x9b, 0x56, 0xf1, 0x76, 0x14,
	0x3e, 0x87, 0x83, 0x05, 0xfa, 0xb1, 0xb8, 0x2b, 0xe8, 0x0c, 0x9a, 0x16, 0x90, 0xa0, 0x59, 0xca,
	0x95, 0x3d, 0xd1, 0xf0, 0x2c, 0x73, 0x81, 0x66, 0xb6, 0xa2, 0x3d, 0xa8, 0x17, 0x17, 0xc8, 0xf9,
	0xb5, 0x9c, 0xcf, 0xaf, 0xa1, 0x5d, 0x64, 0xfd, 0x8f, 0x4e, 0x4f, 0xb3, 0xe6, 0x96, 0x46, 0xdf,
	0xa3, 0xb2, 0x71, 0x39, 0xeb, 0x26, 0x15, 0xdc, 0x2f, 0x02, 0xcd, 0x2b, 0x4b, 0x8e, 0x37, 0x52,
	0x20, 0x0d, 0xa1, 0x96, 0xef, 0x47, 0x07, 0xe3, 0x5f, 0x35, 0x8f, 0xcb, 0x2d, 0xf6, 0x87, 0xfb,
	0x0d, 0xd9, 0xe5, 0xf8, 0xe0, 0xf9, 0xfd, 0xf3, 0xa5, 0xd2, 0xe3, 0x47, 0xf6, 0xcf, 0x6c, 0x5c,
	0x27, 0x3d, 0xe0, 0x88, 0xcc, 0x35, 0x25, 0x23, 0x2a, 0xa1, 0x9a, 0xed, 0x43, 0xd9, 0x9f, 0xb0,
	0x52, 0x69, 0xfd, 0xc1, 0xde, 0x79, 0xce, 0x62, 0x96, 0xd5, 0xe5, 0x87, 0x25, 0x56, 0x62, 0x4d,
	0x53, 0x32, 0xba, 0x68, 0xbd, 0x6e, 0x19, 0x79, 0xdb, 0x32, 0xf2, 0xb1, 0x65, 0xe4, 0xb6, 0x6a,
	0x9f, 0xc6, 0xf9, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x5b, 0x06, 0x35, 0x66, 0x57, 0x02, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FaceServiceClient is the client API for FaceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FaceServiceClient interface {
	// Compare方法实现了两张人脸图片对比识别，返回两图片的对比可信度
	Compare(ctx context.Context, in *CompareRequest, opts ...grpc.CallOption) (*CompareResponse, error)
	// Search方法实现搜索FaceSet中近似人脸数据，
	// 若存在匹配数据时返回一个FaceDetail及其confidence
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
}

type faceServiceClient struct {
	cc *grpc.ClientConn
}

func NewFaceServiceClient(cc *grpc.ClientConn) FaceServiceClient {
	return &faceServiceClient{cc}
}

func (c *faceServiceClient) Compare(ctx context.Context, in *CompareRequest, opts ...grpc.CallOption) (*CompareResponse, error) {
	out := new(CompareResponse)
	err := c.cc.Invoke(ctx, "/faceRecognition.FaceService/Compare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *faceServiceClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, "/faceRecognition.FaceService/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FaceServiceServer is the server API for FaceService service.
type FaceServiceServer interface {
	// Compare方法实现了两张人脸图片对比识别，返回两图片的对比可信度
	Compare(context.Context, *CompareRequest) (*CompareResponse, error)
	// Search方法实现搜索FaceSet中近似人脸数据，
	// 若存在匹配数据时返回一个FaceDetail及其confidence
	Search(context.Context, *SearchRequest) (*SearchResponse, error)
}

// UnimplementedFaceServiceServer can be embedded to have forward compatible implementations.
type UnimplementedFaceServiceServer struct {
}

func (*UnimplementedFaceServiceServer) Compare(ctx context.Context, req *CompareRequest) (*CompareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Compare not implemented")
}
func (*UnimplementedFaceServiceServer) Search(ctx context.Context, req *SearchRequest) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}

func RegisterFaceServiceServer(s *grpc.Server, srv FaceServiceServer) {
	s.RegisterService(&_FaceService_serviceDesc, srv)
}

func _FaceService_Compare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaceServiceServer).Compare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/faceRecognition.FaceService/Compare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaceServiceServer).Compare(ctx, req.(*CompareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FaceService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaceServiceServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/faceRecognition.FaceService/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaceServiceServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FaceService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "faceRecognition.FaceService",
	HandlerType: (*FaceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Compare",
			Handler:    _FaceService_Compare_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _FaceService_Search_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "face.proto",
}

func (m *CompareRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CompareRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CompareRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.FaceImg2) > 0 {
		i -= len(m.FaceImg2)
		copy(dAtA[i:], m.FaceImg2)
		i = encodeVarintFace(dAtA, i, uint64(len(m.FaceImg2)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FaceImg1) > 0 {
		i -= len(m.FaceImg1)
		copy(dAtA[i:], m.FaceImg1)
		i = encodeVarintFace(dAtA, i, uint64(len(m.FaceImg1)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CompareResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CompareResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CompareResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Confidence != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Confidence))))
		i--
		dAtA[i] = 0xd
	}
	return len(dAtA) - i, nil
}

func (m *SearchRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SearchRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.FaceImg) > 0 {
		i -= len(m.FaceImg)
		copy(dAtA[i:], m.FaceImg)
		i = encodeVarintFace(dAtA, i, uint64(len(m.FaceImg)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FaceSetId) > 0 {
		i -= len(m.FaceSetId)
		copy(dAtA[i:], m.FaceSetId)
		i = encodeVarintFace(dAtA, i, uint64(len(m.FaceSetId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SearchResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SearchResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.FaceToken) > 0 {
		i -= len(m.FaceToken)
		copy(dAtA[i:], m.FaceToken)
		i = encodeVarintFace(dAtA, i, uint64(len(m.FaceToken)))
		i--
		dAtA[i] = 0x12
	}
	if m.Confidence != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Confidence))))
		i--
		dAtA[i] = 0xd
	}
	return len(dAtA) - i, nil
}

func encodeVarintFace(dAtA []byte, offset int, v uint64) int {
	offset -= sovFace(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CompareRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FaceImg1)
	if l > 0 {
		n += 1 + l + sovFace(uint64(l))
	}
	l = len(m.FaceImg2)
	if l > 0 {
		n += 1 + l + sovFace(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CompareResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Confidence != 0 {
		n += 5
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SearchRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FaceSetId)
	if l > 0 {
		n += 1 + l + sovFace(uint64(l))
	}
	l = len(m.FaceImg)
	if l > 0 {
		n += 1 + l + sovFace(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SearchResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Confidence != 0 {
		n += 5
	}
	l = len(m.FaceToken)
	if l > 0 {
		n += 1 + l + sovFace(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovFace(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFace(x uint64) (n int) {
	return sovFace(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CompareRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFace
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CompareRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CompareRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FaceImg1", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFace
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFace
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FaceImg1 = append(m.FaceImg1[:0], dAtA[iNdEx:postIndex]...)
			if m.FaceImg1 == nil {
				m.FaceImg1 = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FaceImg2", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFace
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFace
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FaceImg2 = append(m.FaceImg2[:0], dAtA[iNdEx:postIndex]...)
			if m.FaceImg2 == nil {
				m.FaceImg2 = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFace(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFace
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFace
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CompareResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFace
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CompareResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CompareResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Confidence", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Confidence = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipFace(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFace
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFace
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFace
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FaceSetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFace
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFace
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FaceSetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FaceImg", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFace
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFace
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FaceImg = append(m.FaceImg[:0], dAtA[iNdEx:postIndex]...)
			if m.FaceImg == nil {
				m.FaceImg = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFace(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFace
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFace
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFace
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Confidence", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Confidence = float32(math.Float32frombits(v))
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FaceToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFace
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFace
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FaceToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFace(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFace
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFace
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFace(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFace
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFace
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFace
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFace
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthFace
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowFace
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipFace(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthFace
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthFace = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFace   = fmt.Errorf("proto: integer overflow")
)
