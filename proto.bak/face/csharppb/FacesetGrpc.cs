// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: faceset.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace FaceRecognition {
  public static partial class FaceSetService
  {
    static readonly string __ServiceName = "faceRecognition.FaceSetService";

    static readonly grpc::Marshaller<global::FaceRecognition.NewFaceSetRequest> __Marshaller_faceRecognition_NewFaceSetRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::FaceRecognition.NewFaceSetRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::FaceRecognition.NewFaceSetResponse> __Marshaller_faceRecognition_NewFaceSetResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::FaceRecognition.NewFaceSetResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::FaceRecognition.DeleteFaceSetRequest> __Marshaller_faceRecognition_DeleteFaceSetRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::FaceRecognition.DeleteFaceSetRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::FaceRecognition.DeleteFaceSetResponse> __Marshaller_faceRecognition_DeleteFaceSetResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::FaceRecognition.DeleteFaceSetResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::FaceRecognition.UpdateFaceSetRequest> __Marshaller_faceRecognition_UpdateFaceSetRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::FaceRecognition.UpdateFaceSetRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::FaceRecognition.UpdateFaceSetResponse> __Marshaller_faceRecognition_UpdateFaceSetResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::FaceRecognition.UpdateFaceSetResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::FaceRecognition.ListFaceSetsRequest> __Marshaller_faceRecognition_ListFaceSetsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::FaceRecognition.ListFaceSetsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::FaceRecognition.ListFaceSetsResponse> __Marshaller_faceRecognition_ListFaceSetsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::FaceRecognition.ListFaceSetsResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::FaceRecognition.AddFaceRequest> __Marshaller_faceRecognition_AddFaceRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::FaceRecognition.AddFaceRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::FaceRecognition.AddFaceResponse> __Marshaller_faceRecognition_AddFaceResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::FaceRecognition.AddFaceResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::FaceRecognition.RemoveFaceRequest> __Marshaller_faceRecognition_RemoveFaceRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::FaceRecognition.RemoveFaceRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::FaceRecognition.RemoveFaceResponse> __Marshaller_faceRecognition_RemoveFaceResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::FaceRecognition.RemoveFaceResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::FaceRecognition.FaceDetailRequest> __Marshaller_faceRecognition_FaceDetailRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::FaceRecognition.FaceDetailRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::FaceRecognition.FaceDetailResponse> __Marshaller_faceRecognition_FaceDetailResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::FaceRecognition.FaceDetailResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::FaceRecognition.ListFaceDetailsRequest> __Marshaller_faceRecognition_ListFaceDetailsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::FaceRecognition.ListFaceDetailsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::FaceRecognition.ListFaceDetailsResponse> __Marshaller_faceRecognition_ListFaceDetailsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::FaceRecognition.ListFaceDetailsResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::FaceRecognition.NewFaceSetRequest, global::FaceRecognition.NewFaceSetResponse> __Method_NewFaceSet = new grpc::Method<global::FaceRecognition.NewFaceSetRequest, global::FaceRecognition.NewFaceSetResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "NewFaceSet",
        __Marshaller_faceRecognition_NewFaceSetRequest,
        __Marshaller_faceRecognition_NewFaceSetResponse);

    static readonly grpc::Method<global::FaceRecognition.DeleteFaceSetRequest, global::FaceRecognition.DeleteFaceSetResponse> __Method_DeleteFaceSet = new grpc::Method<global::FaceRecognition.DeleteFaceSetRequest, global::FaceRecognition.DeleteFaceSetResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteFaceSet",
        __Marshaller_faceRecognition_DeleteFaceSetRequest,
        __Marshaller_faceRecognition_DeleteFaceSetResponse);

    static readonly grpc::Method<global::FaceRecognition.UpdateFaceSetRequest, global::FaceRecognition.UpdateFaceSetResponse> __Method_UpdateFaceSet = new grpc::Method<global::FaceRecognition.UpdateFaceSetRequest, global::FaceRecognition.UpdateFaceSetResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateFaceSet",
        __Marshaller_faceRecognition_UpdateFaceSetRequest,
        __Marshaller_faceRecognition_UpdateFaceSetResponse);

    static readonly grpc::Method<global::FaceRecognition.ListFaceSetsRequest, global::FaceRecognition.ListFaceSetsResponse> __Method_ListFaceSets = new grpc::Method<global::FaceRecognition.ListFaceSetsRequest, global::FaceRecognition.ListFaceSetsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListFaceSets",
        __Marshaller_faceRecognition_ListFaceSetsRequest,
        __Marshaller_faceRecognition_ListFaceSetsResponse);

    static readonly grpc::Method<global::FaceRecognition.AddFaceRequest, global::FaceRecognition.AddFaceResponse> __Method_AddFace = new grpc::Method<global::FaceRecognition.AddFaceRequest, global::FaceRecognition.AddFaceResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddFace",
        __Marshaller_faceRecognition_AddFaceRequest,
        __Marshaller_faceRecognition_AddFaceResponse);

    static readonly grpc::Method<global::FaceRecognition.RemoveFaceRequest, global::FaceRecognition.RemoveFaceResponse> __Method_RemoveFace = new grpc::Method<global::FaceRecognition.RemoveFaceRequest, global::FaceRecognition.RemoveFaceResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RemoveFace",
        __Marshaller_faceRecognition_RemoveFaceRequest,
        __Marshaller_faceRecognition_RemoveFaceResponse);

    static readonly grpc::Method<global::FaceRecognition.FaceDetailRequest, global::FaceRecognition.FaceDetailResponse> __Method_FaceDetail = new grpc::Method<global::FaceRecognition.FaceDetailRequest, global::FaceRecognition.FaceDetailResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "FaceDetail",
        __Marshaller_faceRecognition_FaceDetailRequest,
        __Marshaller_faceRecognition_FaceDetailResponse);

    static readonly grpc::Method<global::FaceRecognition.ListFaceDetailsRequest, global::FaceRecognition.ListFaceDetailsResponse> __Method_ListFaceDetails = new grpc::Method<global::FaceRecognition.ListFaceDetailsRequest, global::FaceRecognition.ListFaceDetailsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListFaceDetails",
        __Marshaller_faceRecognition_ListFaceDetailsRequest,
        __Marshaller_faceRecognition_ListFaceDetailsResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::FaceRecognition.FacesetReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of FaceSetService</summary>
    [grpc::BindServiceMethod(typeof(FaceSetService), "BindService")]
    public abstract partial class FaceSetServiceBase
    {
      /// <summary>
      /// NewFaceSet创建一个FaceSet
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::FaceRecognition.NewFaceSetResponse> NewFaceSet(global::FaceRecognition.NewFaceSetRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// DeleteFaceSet删除一个FaceSet
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::FaceRecognition.DeleteFaceSetResponse> DeleteFaceSet(global::FaceRecognition.DeleteFaceSetRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// UpdateFaceSet更新一个FaceSet基础信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::FaceRecognition.UpdateFaceSetResponse> UpdateFaceSet(global::FaceRecognition.UpdateFaceSetRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// ListFaceSets列举所有FaceSets
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::FaceRecognition.ListFaceSetsResponse> ListFaceSets(global::FaceRecognition.ListFaceSetsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// AddFace将识别一张人脸图片并将结果添加至对应FaceSet中
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::FaceRecognition.AddFaceResponse> AddFace(global::FaceRecognition.AddFaceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// RemoveFace将从FaceSet中移除对应FaceToken
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::FaceRecognition.RemoveFaceResponse> RemoveFace(global::FaceRecognition.RemoveFaceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// FaceDetail通过face_token获取对应的FaceDetail
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::FaceRecognition.FaceDetailResponse> FaceDetail(global::FaceRecognition.FaceDetailRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// ListFaceDetails返回指定FaceSet中的FaceDetails
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::FaceRecognition.ListFaceDetailsResponse> ListFaceDetails(global::FaceRecognition.ListFaceDetailsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for FaceSetService</summary>
    public partial class FaceSetServiceClient : grpc::ClientBase<FaceSetServiceClient>
    {
      /// <summary>Creates a new client for FaceSetService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public FaceSetServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for FaceSetService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public FaceSetServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected FaceSetServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected FaceSetServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// NewFaceSet创建一个FaceSet
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::FaceRecognition.NewFaceSetResponse NewFaceSet(global::FaceRecognition.NewFaceSetRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return NewFaceSet(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// NewFaceSet创建一个FaceSet
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::FaceRecognition.NewFaceSetResponse NewFaceSet(global::FaceRecognition.NewFaceSetRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_NewFaceSet, null, options, request);
      }
      /// <summary>
      /// NewFaceSet创建一个FaceSet
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::FaceRecognition.NewFaceSetResponse> NewFaceSetAsync(global::FaceRecognition.NewFaceSetRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return NewFaceSetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// NewFaceSet创建一个FaceSet
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::FaceRecognition.NewFaceSetResponse> NewFaceSetAsync(global::FaceRecognition.NewFaceSetRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_NewFaceSet, null, options, request);
      }
      /// <summary>
      /// DeleteFaceSet删除一个FaceSet
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::FaceRecognition.DeleteFaceSetResponse DeleteFaceSet(global::FaceRecognition.DeleteFaceSetRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteFaceSet(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// DeleteFaceSet删除一个FaceSet
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::FaceRecognition.DeleteFaceSetResponse DeleteFaceSet(global::FaceRecognition.DeleteFaceSetRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteFaceSet, null, options, request);
      }
      /// <summary>
      /// DeleteFaceSet删除一个FaceSet
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::FaceRecognition.DeleteFaceSetResponse> DeleteFaceSetAsync(global::FaceRecognition.DeleteFaceSetRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteFaceSetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// DeleteFaceSet删除一个FaceSet
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::FaceRecognition.DeleteFaceSetResponse> DeleteFaceSetAsync(global::FaceRecognition.DeleteFaceSetRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteFaceSet, null, options, request);
      }
      /// <summary>
      /// UpdateFaceSet更新一个FaceSet基础信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::FaceRecognition.UpdateFaceSetResponse UpdateFaceSet(global::FaceRecognition.UpdateFaceSetRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateFaceSet(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// UpdateFaceSet更新一个FaceSet基础信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::FaceRecognition.UpdateFaceSetResponse UpdateFaceSet(global::FaceRecognition.UpdateFaceSetRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateFaceSet, null, options, request);
      }
      /// <summary>
      /// UpdateFaceSet更新一个FaceSet基础信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::FaceRecognition.UpdateFaceSetResponse> UpdateFaceSetAsync(global::FaceRecognition.UpdateFaceSetRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateFaceSetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// UpdateFaceSet更新一个FaceSet基础信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::FaceRecognition.UpdateFaceSetResponse> UpdateFaceSetAsync(global::FaceRecognition.UpdateFaceSetRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateFaceSet, null, options, request);
      }
      /// <summary>
      /// ListFaceSets列举所有FaceSets
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::FaceRecognition.ListFaceSetsResponse ListFaceSets(global::FaceRecognition.ListFaceSetsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListFaceSets(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ListFaceSets列举所有FaceSets
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::FaceRecognition.ListFaceSetsResponse ListFaceSets(global::FaceRecognition.ListFaceSetsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListFaceSets, null, options, request);
      }
      /// <summary>
      /// ListFaceSets列举所有FaceSets
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::FaceRecognition.ListFaceSetsResponse> ListFaceSetsAsync(global::FaceRecognition.ListFaceSetsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListFaceSetsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ListFaceSets列举所有FaceSets
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::FaceRecognition.ListFaceSetsResponse> ListFaceSetsAsync(global::FaceRecognition.ListFaceSetsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListFaceSets, null, options, request);
      }
      /// <summary>
      /// AddFace将识别一张人脸图片并将结果添加至对应FaceSet中
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::FaceRecognition.AddFaceResponse AddFace(global::FaceRecognition.AddFaceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddFace(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// AddFace将识别一张人脸图片并将结果添加至对应FaceSet中
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::FaceRecognition.AddFaceResponse AddFace(global::FaceRecognition.AddFaceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddFace, null, options, request);
      }
      /// <summary>
      /// AddFace将识别一张人脸图片并将结果添加至对应FaceSet中
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::FaceRecognition.AddFaceResponse> AddFaceAsync(global::FaceRecognition.AddFaceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddFaceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// AddFace将识别一张人脸图片并将结果添加至对应FaceSet中
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::FaceRecognition.AddFaceResponse> AddFaceAsync(global::FaceRecognition.AddFaceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddFace, null, options, request);
      }
      /// <summary>
      /// RemoveFace将从FaceSet中移除对应FaceToken
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::FaceRecognition.RemoveFaceResponse RemoveFace(global::FaceRecognition.RemoveFaceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveFace(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RemoveFace将从FaceSet中移除对应FaceToken
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::FaceRecognition.RemoveFaceResponse RemoveFace(global::FaceRecognition.RemoveFaceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RemoveFace, null, options, request);
      }
      /// <summary>
      /// RemoveFace将从FaceSet中移除对应FaceToken
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::FaceRecognition.RemoveFaceResponse> RemoveFaceAsync(global::FaceRecognition.RemoveFaceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveFaceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RemoveFace将从FaceSet中移除对应FaceToken
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::FaceRecognition.RemoveFaceResponse> RemoveFaceAsync(global::FaceRecognition.RemoveFaceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RemoveFace, null, options, request);
      }
      /// <summary>
      /// FaceDetail通过face_token获取对应的FaceDetail
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::FaceRecognition.FaceDetailResponse FaceDetail(global::FaceRecognition.FaceDetailRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FaceDetail(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// FaceDetail通过face_token获取对应的FaceDetail
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::FaceRecognition.FaceDetailResponse FaceDetail(global::FaceRecognition.FaceDetailRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_FaceDetail, null, options, request);
      }
      /// <summary>
      /// FaceDetail通过face_token获取对应的FaceDetail
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::FaceRecognition.FaceDetailResponse> FaceDetailAsync(global::FaceRecognition.FaceDetailRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FaceDetailAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// FaceDetail通过face_token获取对应的FaceDetail
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::FaceRecognition.FaceDetailResponse> FaceDetailAsync(global::FaceRecognition.FaceDetailRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_FaceDetail, null, options, request);
      }
      /// <summary>
      /// ListFaceDetails返回指定FaceSet中的FaceDetails
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::FaceRecognition.ListFaceDetailsResponse ListFaceDetails(global::FaceRecognition.ListFaceDetailsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListFaceDetails(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ListFaceDetails返回指定FaceSet中的FaceDetails
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::FaceRecognition.ListFaceDetailsResponse ListFaceDetails(global::FaceRecognition.ListFaceDetailsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListFaceDetails, null, options, request);
      }
      /// <summary>
      /// ListFaceDetails返回指定FaceSet中的FaceDetails
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::FaceRecognition.ListFaceDetailsResponse> ListFaceDetailsAsync(global::FaceRecognition.ListFaceDetailsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListFaceDetailsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ListFaceDetails返回指定FaceSet中的FaceDetails
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::FaceRecognition.ListFaceDetailsResponse> ListFaceDetailsAsync(global::FaceRecognition.ListFaceDetailsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListFaceDetails, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override FaceSetServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new FaceSetServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(FaceSetServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_NewFaceSet, serviceImpl.NewFaceSet)
          .AddMethod(__Method_DeleteFaceSet, serviceImpl.DeleteFaceSet)
          .AddMethod(__Method_UpdateFaceSet, serviceImpl.UpdateFaceSet)
          .AddMethod(__Method_ListFaceSets, serviceImpl.ListFaceSets)
          .AddMethod(__Method_AddFace, serviceImpl.AddFace)
          .AddMethod(__Method_RemoveFace, serviceImpl.RemoveFace)
          .AddMethod(__Method_FaceDetail, serviceImpl.FaceDetail)
          .AddMethod(__Method_ListFaceDetails, serviceImpl.ListFaceDetails).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, FaceSetServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_NewFaceSet, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::FaceRecognition.NewFaceSetRequest, global::FaceRecognition.NewFaceSetResponse>(serviceImpl.NewFaceSet));
      serviceBinder.AddMethod(__Method_DeleteFaceSet, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::FaceRecognition.DeleteFaceSetRequest, global::FaceRecognition.DeleteFaceSetResponse>(serviceImpl.DeleteFaceSet));
      serviceBinder.AddMethod(__Method_UpdateFaceSet, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::FaceRecognition.UpdateFaceSetRequest, global::FaceRecognition.UpdateFaceSetResponse>(serviceImpl.UpdateFaceSet));
      serviceBinder.AddMethod(__Method_ListFaceSets, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::FaceRecognition.ListFaceSetsRequest, global::FaceRecognition.ListFaceSetsResponse>(serviceImpl.ListFaceSets));
      serviceBinder.AddMethod(__Method_AddFace, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::FaceRecognition.AddFaceRequest, global::FaceRecognition.AddFaceResponse>(serviceImpl.AddFace));
      serviceBinder.AddMethod(__Method_RemoveFace, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::FaceRecognition.RemoveFaceRequest, global::FaceRecognition.RemoveFaceResponse>(serviceImpl.RemoveFace));
      serviceBinder.AddMethod(__Method_FaceDetail, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::FaceRecognition.FaceDetailRequest, global::FaceRecognition.FaceDetailResponse>(serviceImpl.FaceDetail));
      serviceBinder.AddMethod(__Method_ListFaceDetails, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::FaceRecognition.ListFaceDetailsRequest, global::FaceRecognition.ListFaceDetailsResponse>(serviceImpl.ListFaceDetails));
    }

  }
}
#endregion
