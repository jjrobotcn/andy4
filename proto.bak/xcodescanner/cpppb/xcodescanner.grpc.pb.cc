// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: xcodescanner.proto

#include "xcodescanner.pb.h"
#include "xcodescanner.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace xcScannerService {

static const char* XCodeScannerService_method_names[] = {
  "/xcScannerService.XCodeScannerService/GetScanData",
};

std::unique_ptr< XCodeScannerService::Stub> XCodeScannerService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< XCodeScannerService::Stub> stub(new XCodeScannerService::Stub(channel));
  return stub;
}

XCodeScannerService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetScanData_(XCodeScannerService_method_names[0], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::ClientReader< ::xcScannerService::GetScanDataResponse>* XCodeScannerService::Stub::GetScanDataRaw(::grpc::ClientContext* context, const ::xcScannerService::GetScanDataRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::xcScannerService::GetScanDataResponse>::Create(channel_.get(), rpcmethod_GetScanData_, context, request);
}

void XCodeScannerService::Stub::experimental_async::GetScanData(::grpc::ClientContext* context, ::xcScannerService::GetScanDataRequest* request, ::grpc::experimental::ClientReadReactor< ::xcScannerService::GetScanDataResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::xcScannerService::GetScanDataResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_GetScanData_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::xcScannerService::GetScanDataResponse>* XCodeScannerService::Stub::AsyncGetScanDataRaw(::grpc::ClientContext* context, const ::xcScannerService::GetScanDataRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::xcScannerService::GetScanDataResponse>::Create(channel_.get(), cq, rpcmethod_GetScanData_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::xcScannerService::GetScanDataResponse>* XCodeScannerService::Stub::PrepareAsyncGetScanDataRaw(::grpc::ClientContext* context, const ::xcScannerService::GetScanDataRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::xcScannerService::GetScanDataResponse>::Create(channel_.get(), cq, rpcmethod_GetScanData_, context, request, false, nullptr);
}

XCodeScannerService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      XCodeScannerService_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< XCodeScannerService::Service, ::xcScannerService::GetScanDataRequest, ::xcScannerService::GetScanDataResponse>(
          std::mem_fn(&XCodeScannerService::Service::GetScanData), this)));
}

XCodeScannerService::Service::~Service() {
}

::grpc::Status XCodeScannerService::Service::GetScanData(::grpc::ServerContext* context, const ::xcScannerService::GetScanDataRequest* request, ::grpc::ServerWriter< ::xcScannerService::GetScanDataResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace xcScannerService

