// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: kvstore.proto

#include "kvstore.pb.h"
#include "kvstore.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace kvstore {

static const char* KVStore_method_names[] = {
  "/kvstore.KVStore/Put",
  "/kvstore.KVStore/Get",
  "/kvstore.KVStore/GetPrefix",
  "/kvstore.KVStore/GetPrefixStream",
  "/kvstore.KVStore/Delete",
};

std::unique_ptr< KVStore::Stub> KVStore::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< KVStore::Stub> stub(new KVStore::Stub(channel));
  return stub;
}

KVStore::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Put_(KVStore_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Get_(KVStore_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPrefix_(KVStore_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPrefixStream_(KVStore_method_names[3], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_Delete_(KVStore_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status KVStore::Stub::Put(::grpc::ClientContext* context, const ::kvstore::PutRequest& request, ::kvstore::PutResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Put_, context, request, response);
}

void KVStore::Stub::experimental_async::Put(::grpc::ClientContext* context, const ::kvstore::PutRequest* request, ::kvstore::PutResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Put_, context, request, response, std::move(f));
}

void KVStore::Stub::experimental_async::Put(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::kvstore::PutResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Put_, context, request, response, std::move(f));
}

void KVStore::Stub::experimental_async::Put(::grpc::ClientContext* context, const ::kvstore::PutRequest* request, ::kvstore::PutResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Put_, context, request, response, reactor);
}

void KVStore::Stub::experimental_async::Put(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::kvstore::PutResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Put_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::kvstore::PutResponse>* KVStore::Stub::AsyncPutRaw(::grpc::ClientContext* context, const ::kvstore::PutRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::kvstore::PutResponse>::Create(channel_.get(), cq, rpcmethod_Put_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::kvstore::PutResponse>* KVStore::Stub::PrepareAsyncPutRaw(::grpc::ClientContext* context, const ::kvstore::PutRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::kvstore::PutResponse>::Create(channel_.get(), cq, rpcmethod_Put_, context, request, false);
}

::grpc::Status KVStore::Stub::Get(::grpc::ClientContext* context, const ::kvstore::GetRequest& request, ::kvstore::GetResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Get_, context, request, response);
}

void KVStore::Stub::experimental_async::Get(::grpc::ClientContext* context, const ::kvstore::GetRequest* request, ::kvstore::GetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Get_, context, request, response, std::move(f));
}

void KVStore::Stub::experimental_async::Get(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::kvstore::GetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Get_, context, request, response, std::move(f));
}

void KVStore::Stub::experimental_async::Get(::grpc::ClientContext* context, const ::kvstore::GetRequest* request, ::kvstore::GetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Get_, context, request, response, reactor);
}

void KVStore::Stub::experimental_async::Get(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::kvstore::GetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Get_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::kvstore::GetResponse>* KVStore::Stub::AsyncGetRaw(::grpc::ClientContext* context, const ::kvstore::GetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::kvstore::GetResponse>::Create(channel_.get(), cq, rpcmethod_Get_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::kvstore::GetResponse>* KVStore::Stub::PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::kvstore::GetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::kvstore::GetResponse>::Create(channel_.get(), cq, rpcmethod_Get_, context, request, false);
}

::grpc::Status KVStore::Stub::GetPrefix(::grpc::ClientContext* context, const ::kvstore::GetPrefixRequest& request, ::kvstore::GetPrefixResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetPrefix_, context, request, response);
}

void KVStore::Stub::experimental_async::GetPrefix(::grpc::ClientContext* context, const ::kvstore::GetPrefixRequest* request, ::kvstore::GetPrefixResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetPrefix_, context, request, response, std::move(f));
}

void KVStore::Stub::experimental_async::GetPrefix(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::kvstore::GetPrefixResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetPrefix_, context, request, response, std::move(f));
}

void KVStore::Stub::experimental_async::GetPrefix(::grpc::ClientContext* context, const ::kvstore::GetPrefixRequest* request, ::kvstore::GetPrefixResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetPrefix_, context, request, response, reactor);
}

void KVStore::Stub::experimental_async::GetPrefix(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::kvstore::GetPrefixResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetPrefix_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::kvstore::GetPrefixResponse>* KVStore::Stub::AsyncGetPrefixRaw(::grpc::ClientContext* context, const ::kvstore::GetPrefixRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::kvstore::GetPrefixResponse>::Create(channel_.get(), cq, rpcmethod_GetPrefix_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::kvstore::GetPrefixResponse>* KVStore::Stub::PrepareAsyncGetPrefixRaw(::grpc::ClientContext* context, const ::kvstore::GetPrefixRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::kvstore::GetPrefixResponse>::Create(channel_.get(), cq, rpcmethod_GetPrefix_, context, request, false);
}

::grpc::ClientReader< ::kvstore::GetPrefixStreamResponse>* KVStore::Stub::GetPrefixStreamRaw(::grpc::ClientContext* context, const ::kvstore::GetPrefixStreamRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::kvstore::GetPrefixStreamResponse>::Create(channel_.get(), rpcmethod_GetPrefixStream_, context, request);
}

void KVStore::Stub::experimental_async::GetPrefixStream(::grpc::ClientContext* context, ::kvstore::GetPrefixStreamRequest* request, ::grpc::experimental::ClientReadReactor< ::kvstore::GetPrefixStreamResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::kvstore::GetPrefixStreamResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_GetPrefixStream_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::kvstore::GetPrefixStreamResponse>* KVStore::Stub::AsyncGetPrefixStreamRaw(::grpc::ClientContext* context, const ::kvstore::GetPrefixStreamRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::kvstore::GetPrefixStreamResponse>::Create(channel_.get(), cq, rpcmethod_GetPrefixStream_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::kvstore::GetPrefixStreamResponse>* KVStore::Stub::PrepareAsyncGetPrefixStreamRaw(::grpc::ClientContext* context, const ::kvstore::GetPrefixStreamRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::kvstore::GetPrefixStreamResponse>::Create(channel_.get(), cq, rpcmethod_GetPrefixStream_, context, request, false, nullptr);
}

::grpc::Status KVStore::Stub::Delete(::grpc::ClientContext* context, const ::kvstore::DeleteRequest& request, ::kvstore::DeleteResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Delete_, context, request, response);
}

void KVStore::Stub::experimental_async::Delete(::grpc::ClientContext* context, const ::kvstore::DeleteRequest* request, ::kvstore::DeleteResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Delete_, context, request, response, std::move(f));
}

void KVStore::Stub::experimental_async::Delete(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::kvstore::DeleteResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Delete_, context, request, response, std::move(f));
}

void KVStore::Stub::experimental_async::Delete(::grpc::ClientContext* context, const ::kvstore::DeleteRequest* request, ::kvstore::DeleteResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Delete_, context, request, response, reactor);
}

void KVStore::Stub::experimental_async::Delete(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::kvstore::DeleteResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Delete_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::kvstore::DeleteResponse>* KVStore::Stub::AsyncDeleteRaw(::grpc::ClientContext* context, const ::kvstore::DeleteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::kvstore::DeleteResponse>::Create(channel_.get(), cq, rpcmethod_Delete_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::kvstore::DeleteResponse>* KVStore::Stub::PrepareAsyncDeleteRaw(::grpc::ClientContext* context, const ::kvstore::DeleteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::kvstore::DeleteResponse>::Create(channel_.get(), cq, rpcmethod_Delete_, context, request, false);
}

KVStore::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      KVStore_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< KVStore::Service, ::kvstore::PutRequest, ::kvstore::PutResponse>(
          std::mem_fn(&KVStore::Service::Put), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      KVStore_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< KVStore::Service, ::kvstore::GetRequest, ::kvstore::GetResponse>(
          std::mem_fn(&KVStore::Service::Get), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      KVStore_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< KVStore::Service, ::kvstore::GetPrefixRequest, ::kvstore::GetPrefixResponse>(
          std::mem_fn(&KVStore::Service::GetPrefix), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      KVStore_method_names[3],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< KVStore::Service, ::kvstore::GetPrefixStreamRequest, ::kvstore::GetPrefixStreamResponse>(
          std::mem_fn(&KVStore::Service::GetPrefixStream), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      KVStore_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< KVStore::Service, ::kvstore::DeleteRequest, ::kvstore::DeleteResponse>(
          std::mem_fn(&KVStore::Service::Delete), this)));
}

KVStore::Service::~Service() {
}

::grpc::Status KVStore::Service::Put(::grpc::ServerContext* context, const ::kvstore::PutRequest* request, ::kvstore::PutResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status KVStore::Service::Get(::grpc::ServerContext* context, const ::kvstore::GetRequest* request, ::kvstore::GetResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status KVStore::Service::GetPrefix(::grpc::ServerContext* context, const ::kvstore::GetPrefixRequest* request, ::kvstore::GetPrefixResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status KVStore::Service::GetPrefixStream(::grpc::ServerContext* context, const ::kvstore::GetPrefixStreamRequest* request, ::grpc::ServerWriter< ::kvstore::GetPrefixStreamResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status KVStore::Service::Delete(::grpc::ServerContext* context, const ::kvstore::DeleteRequest* request, ::kvstore::DeleteResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace kvstore

