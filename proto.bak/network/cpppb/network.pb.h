// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: network.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_network_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_network_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_network_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_network_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[13]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_network_2eproto;
namespace networkService {
class ConnectRequest;
class ConnectRequestDefaultTypeInternal;
extern ConnectRequestDefaultTypeInternal _ConnectRequest_default_instance_;
class ConnectResponse;
class ConnectResponseDefaultTypeInternal;
extern ConnectResponseDefaultTypeInternal _ConnectResponse_default_instance_;
class GetNetworkDeviceInfoRequest;
class GetNetworkDeviceInfoRequestDefaultTypeInternal;
extern GetNetworkDeviceInfoRequestDefaultTypeInternal _GetNetworkDeviceInfoRequest_default_instance_;
class GetNetworkDeviceInfoResponse;
class GetNetworkDeviceInfoResponseDefaultTypeInternal;
extern GetNetworkDeviceInfoResponseDefaultTypeInternal _GetNetworkDeviceInfoResponse_default_instance_;
class GetStatusRequest;
class GetStatusRequestDefaultTypeInternal;
extern GetStatusRequestDefaultTypeInternal _GetStatusRequest_default_instance_;
class GetStatusResponse;
class GetStatusResponseDefaultTypeInternal;
extern GetStatusResponseDefaultTypeInternal _GetStatusResponse_default_instance_;
class ListNetworksRequest;
class ListNetworksRequestDefaultTypeInternal;
extern ListNetworksRequestDefaultTypeInternal _ListNetworksRequest_default_instance_;
class ListNetworksResponse;
class ListNetworksResponseDefaultTypeInternal;
extern ListNetworksResponseDefaultTypeInternal _ListNetworksResponse_default_instance_;
class NetworkDeviceInfo;
class NetworkDeviceInfoDefaultTypeInternal;
extern NetworkDeviceInfoDefaultTypeInternal _NetworkDeviceInfo_default_instance_;
class NetworkInfo;
class NetworkInfoDefaultTypeInternal;
extern NetworkInfoDefaultTypeInternal _NetworkInfo_default_instance_;
class NetworkStatus;
class NetworkStatusDefaultTypeInternal;
extern NetworkStatusDefaultTypeInternal _NetworkStatus_default_instance_;
class UpdateNetworkDeviceInfoRequest;
class UpdateNetworkDeviceInfoRequestDefaultTypeInternal;
extern UpdateNetworkDeviceInfoRequestDefaultTypeInternal _UpdateNetworkDeviceInfoRequest_default_instance_;
class UpdateNetworkDeviceInfoResponse;
class UpdateNetworkDeviceInfoResponseDefaultTypeInternal;
extern UpdateNetworkDeviceInfoResponseDefaultTypeInternal _UpdateNetworkDeviceInfoResponse_default_instance_;
}  // namespace networkService
PROTOBUF_NAMESPACE_OPEN
template<> ::networkService::ConnectRequest* Arena::CreateMaybeMessage<::networkService::ConnectRequest>(Arena*);
template<> ::networkService::ConnectResponse* Arena::CreateMaybeMessage<::networkService::ConnectResponse>(Arena*);
template<> ::networkService::GetNetworkDeviceInfoRequest* Arena::CreateMaybeMessage<::networkService::GetNetworkDeviceInfoRequest>(Arena*);
template<> ::networkService::GetNetworkDeviceInfoResponse* Arena::CreateMaybeMessage<::networkService::GetNetworkDeviceInfoResponse>(Arena*);
template<> ::networkService::GetStatusRequest* Arena::CreateMaybeMessage<::networkService::GetStatusRequest>(Arena*);
template<> ::networkService::GetStatusResponse* Arena::CreateMaybeMessage<::networkService::GetStatusResponse>(Arena*);
template<> ::networkService::ListNetworksRequest* Arena::CreateMaybeMessage<::networkService::ListNetworksRequest>(Arena*);
template<> ::networkService::ListNetworksResponse* Arena::CreateMaybeMessage<::networkService::ListNetworksResponse>(Arena*);
template<> ::networkService::NetworkDeviceInfo* Arena::CreateMaybeMessage<::networkService::NetworkDeviceInfo>(Arena*);
template<> ::networkService::NetworkInfo* Arena::CreateMaybeMessage<::networkService::NetworkInfo>(Arena*);
template<> ::networkService::NetworkStatus* Arena::CreateMaybeMessage<::networkService::NetworkStatus>(Arena*);
template<> ::networkService::UpdateNetworkDeviceInfoRequest* Arena::CreateMaybeMessage<::networkService::UpdateNetworkDeviceInfoRequest>(Arena*);
template<> ::networkService::UpdateNetworkDeviceInfoResponse* Arena::CreateMaybeMessage<::networkService::UpdateNetworkDeviceInfoResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace networkService {

enum Status : int {
  UNKNOWN = 0,
  DISCONNECTED = 1,
  CONNECTING = 2,
  CONNECTED = 3,
  Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Status_IsValid(int value);
constexpr Status Status_MIN = UNKNOWN;
constexpr Status Status_MAX = CONNECTED;
constexpr int Status_ARRAYSIZE = Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Status_descriptor();
template<typename T>
inline const std::string& Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Status_descriptor(), enum_t_value);
}
inline bool Status_Parse(
    const std::string& name, Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Status>(
    Status_descriptor(), name, value);
}
// ===================================================================

class NetworkInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:networkService.NetworkInfo) */ {
 public:
  NetworkInfo();
  virtual ~NetworkInfo();

  NetworkInfo(const NetworkInfo& from);
  NetworkInfo(NetworkInfo&& from) noexcept
    : NetworkInfo() {
    *this = ::std::move(from);
  }

  inline NetworkInfo& operator=(const NetworkInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetworkInfo& operator=(NetworkInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NetworkInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NetworkInfo* internal_default_instance() {
    return reinterpret_cast<const NetworkInfo*>(
               &_NetworkInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(NetworkInfo* other);
  friend void swap(NetworkInfo& a, NetworkInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NetworkInfo* New() const final {
    return CreateMaybeMessage<NetworkInfo>(nullptr);
  }

  NetworkInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NetworkInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NetworkInfo& from);
  void MergeFrom(const NetworkInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetworkInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "networkService.NetworkInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_network_2eproto);
    return ::descriptor_table_network_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // string mac = 2;
  void clear_mac();
  static const int kMacFieldNumber = 2;
  const std::string& mac() const;
  void set_mac(const std::string& value);
  void set_mac(std::string&& value);
  void set_mac(const char* value);
  void set_mac(const char* value, size_t size);
  std::string* mutable_mac();
  std::string* release_mac();
  void set_allocated_mac(std::string* mac);

  // uint32 channel = 3;
  void clear_channel();
  static const int kChannelFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::uint32 channel() const;
  void set_channel(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 rssi = 4;
  void clear_rssi();
  static const int kRssiFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::uint32 rssi() const;
  void set_rssi(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:networkService.NetworkInfo)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mac_;
  ::PROTOBUF_NAMESPACE_ID::uint32 channel_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rssi_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class ListNetworksRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:networkService.ListNetworksRequest) */ {
 public:
  ListNetworksRequest();
  virtual ~ListNetworksRequest();

  ListNetworksRequest(const ListNetworksRequest& from);
  ListNetworksRequest(ListNetworksRequest&& from) noexcept
    : ListNetworksRequest() {
    *this = ::std::move(from);
  }

  inline ListNetworksRequest& operator=(const ListNetworksRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListNetworksRequest& operator=(ListNetworksRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListNetworksRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListNetworksRequest* internal_default_instance() {
    return reinterpret_cast<const ListNetworksRequest*>(
               &_ListNetworksRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ListNetworksRequest* other);
  friend void swap(ListNetworksRequest& a, ListNetworksRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListNetworksRequest* New() const final {
    return CreateMaybeMessage<ListNetworksRequest>(nullptr);
  }

  ListNetworksRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListNetworksRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListNetworksRequest& from);
  void MergeFrom(const ListNetworksRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListNetworksRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "networkService.ListNetworksRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_network_2eproto);
    return ::descriptor_table_network_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:networkService.ListNetworksRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class ListNetworksResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:networkService.ListNetworksResponse) */ {
 public:
  ListNetworksResponse();
  virtual ~ListNetworksResponse();

  ListNetworksResponse(const ListNetworksResponse& from);
  ListNetworksResponse(ListNetworksResponse&& from) noexcept
    : ListNetworksResponse() {
    *this = ::std::move(from);
  }

  inline ListNetworksResponse& operator=(const ListNetworksResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListNetworksResponse& operator=(ListNetworksResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListNetworksResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListNetworksResponse* internal_default_instance() {
    return reinterpret_cast<const ListNetworksResponse*>(
               &_ListNetworksResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ListNetworksResponse* other);
  friend void swap(ListNetworksResponse& a, ListNetworksResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListNetworksResponse* New() const final {
    return CreateMaybeMessage<ListNetworksResponse>(nullptr);
  }

  ListNetworksResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListNetworksResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListNetworksResponse& from);
  void MergeFrom(const ListNetworksResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListNetworksResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "networkService.ListNetworksResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_network_2eproto);
    return ::descriptor_table_network_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .networkService.NetworkInfo networks_info = 1;
  int networks_info_size() const;
  void clear_networks_info();
  static const int kNetworksInfoFieldNumber = 1;
  ::networkService::NetworkInfo* mutable_networks_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::networkService::NetworkInfo >*
      mutable_networks_info();
  const ::networkService::NetworkInfo& networks_info(int index) const;
  ::networkService::NetworkInfo* add_networks_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::networkService::NetworkInfo >&
      networks_info() const;

  // @@protoc_insertion_point(class_scope:networkService.ListNetworksResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::networkService::NetworkInfo > networks_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class ConnectRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:networkService.ConnectRequest) */ {
 public:
  ConnectRequest();
  virtual ~ConnectRequest();

  ConnectRequest(const ConnectRequest& from);
  ConnectRequest(ConnectRequest&& from) noexcept
    : ConnectRequest() {
    *this = ::std::move(from);
  }

  inline ConnectRequest& operator=(const ConnectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnectRequest& operator=(ConnectRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConnectRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConnectRequest* internal_default_instance() {
    return reinterpret_cast<const ConnectRequest*>(
               &_ConnectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ConnectRequest* other);
  friend void swap(ConnectRequest& a, ConnectRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConnectRequest* New() const final {
    return CreateMaybeMessage<ConnectRequest>(nullptr);
  }

  ConnectRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConnectRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConnectRequest& from);
  void MergeFrom(const ConnectRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnectRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "networkService.ConnectRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_network_2eproto);
    return ::descriptor_table_network_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string pwd = 2;
  void clear_pwd();
  static const int kPwdFieldNumber = 2;
  const std::string& pwd() const;
  void set_pwd(const std::string& value);
  void set_pwd(std::string&& value);
  void set_pwd(const char* value);
  void set_pwd(const char* value, size_t size);
  std::string* mutable_pwd();
  std::string* release_pwd();
  void set_allocated_pwd(std::string* pwd);

  // string ssid = 3;
  void clear_ssid();
  static const int kSsidFieldNumber = 3;
  const std::string& ssid() const;
  void set_ssid(const std::string& value);
  void set_ssid(std::string&& value);
  void set_ssid(const char* value);
  void set_ssid(const char* value, size_t size);
  std::string* mutable_ssid();
  std::string* release_ssid();
  void set_allocated_ssid(std::string* ssid);

  // .networkService.NetworkInfo network_info = 1 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_network_info() const;
  PROTOBUF_DEPRECATED void clear_network_info();
  PROTOBUF_DEPRECATED static const int kNetworkInfoFieldNumber = 1;
  PROTOBUF_DEPRECATED const ::networkService::NetworkInfo& network_info() const;
  PROTOBUF_DEPRECATED ::networkService::NetworkInfo* release_network_info();
  PROTOBUF_DEPRECATED ::networkService::NetworkInfo* mutable_network_info();
  PROTOBUF_DEPRECATED void set_allocated_network_info(::networkService::NetworkInfo* network_info);

  // bool keep_alive = 4;
  void clear_keep_alive();
  static const int kKeepAliveFieldNumber = 4;
  bool keep_alive() const;
  void set_keep_alive(bool value);

  // uint32 keep_alive_interval = 5;
  void clear_keep_alive_interval();
  static const int kKeepAliveIntervalFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::uint32 keep_alive_interval() const;
  void set_keep_alive_interval(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:networkService.ConnectRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pwd_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ssid_;
  ::networkService::NetworkInfo* network_info_;
  bool keep_alive_;
  ::PROTOBUF_NAMESPACE_ID::uint32 keep_alive_interval_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class NetworkStatus :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:networkService.NetworkStatus) */ {
 public:
  NetworkStatus();
  virtual ~NetworkStatus();

  NetworkStatus(const NetworkStatus& from);
  NetworkStatus(NetworkStatus&& from) noexcept
    : NetworkStatus() {
    *this = ::std::move(from);
  }

  inline NetworkStatus& operator=(const NetworkStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetworkStatus& operator=(NetworkStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NetworkStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NetworkStatus* internal_default_instance() {
    return reinterpret_cast<const NetworkStatus*>(
               &_NetworkStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(NetworkStatus* other);
  friend void swap(NetworkStatus& a, NetworkStatus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NetworkStatus* New() const final {
    return CreateMaybeMessage<NetworkStatus>(nullptr);
  }

  NetworkStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NetworkStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NetworkStatus& from);
  void MergeFrom(const NetworkStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetworkStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "networkService.NetworkStatus";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_network_2eproto);
    return ::descriptor_table_network_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // string public_ip = 3;
  void clear_public_ip();
  static const int kPublicIpFieldNumber = 3;
  const std::string& public_ip() const;
  void set_public_ip(const std::string& value);
  void set_public_ip(std::string&& value);
  void set_public_ip(const char* value);
  void set_public_ip(const char* value, size_t size);
  std::string* mutable_public_ip();
  std::string* release_public_ip();
  void set_allocated_public_ip(std::string* public_ip);

  // .networkService.Status status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::networkService::Status status() const;
  void set_status(::networkService::Status value);

  // uint32 rssi = 4;
  void clear_rssi();
  static const int kRssiFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::uint32 rssi() const;
  void set_rssi(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 upload = 5;
  void clear_upload();
  static const int kUploadFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::uint32 upload() const;
  void set_upload(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 download = 6;
  void clear_download();
  static const int kDownloadFieldNumber = 6;
  ::PROTOBUF_NAMESPACE_ID::uint32 download() const;
  void set_download(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:networkService.NetworkStatus)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_ip_;
  int status_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rssi_;
  ::PROTOBUF_NAMESPACE_ID::uint32 upload_;
  ::PROTOBUF_NAMESPACE_ID::uint32 download_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class ConnectResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:networkService.ConnectResponse) */ {
 public:
  ConnectResponse();
  virtual ~ConnectResponse();

  ConnectResponse(const ConnectResponse& from);
  ConnectResponse(ConnectResponse&& from) noexcept
    : ConnectResponse() {
    *this = ::std::move(from);
  }

  inline ConnectResponse& operator=(const ConnectResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnectResponse& operator=(ConnectResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConnectResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConnectResponse* internal_default_instance() {
    return reinterpret_cast<const ConnectResponse*>(
               &_ConnectResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(ConnectResponse* other);
  friend void swap(ConnectResponse& a, ConnectResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConnectResponse* New() const final {
    return CreateMaybeMessage<ConnectResponse>(nullptr);
  }

  ConnectResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConnectResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConnectResponse& from);
  void MergeFrom(const ConnectResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnectResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "networkService.ConnectResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_network_2eproto);
    return ::descriptor_table_network_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:networkService.ConnectResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class GetStatusRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:networkService.GetStatusRequest) */ {
 public:
  GetStatusRequest();
  virtual ~GetStatusRequest();

  GetStatusRequest(const GetStatusRequest& from);
  GetStatusRequest(GetStatusRequest&& from) noexcept
    : GetStatusRequest() {
    *this = ::std::move(from);
  }

  inline GetStatusRequest& operator=(const GetStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetStatusRequest& operator=(GetStatusRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetStatusRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetStatusRequest* internal_default_instance() {
    return reinterpret_cast<const GetStatusRequest*>(
               &_GetStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(GetStatusRequest* other);
  friend void swap(GetStatusRequest& a, GetStatusRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetStatusRequest* New() const final {
    return CreateMaybeMessage<GetStatusRequest>(nullptr);
  }

  GetStatusRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetStatusRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetStatusRequest& from);
  void MergeFrom(const GetStatusRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetStatusRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "networkService.GetStatusRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_network_2eproto);
    return ::descriptor_table_network_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:networkService.GetStatusRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class GetStatusResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:networkService.GetStatusResponse) */ {
 public:
  GetStatusResponse();
  virtual ~GetStatusResponse();

  GetStatusResponse(const GetStatusResponse& from);
  GetStatusResponse(GetStatusResponse&& from) noexcept
    : GetStatusResponse() {
    *this = ::std::move(from);
  }

  inline GetStatusResponse& operator=(const GetStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetStatusResponse& operator=(GetStatusResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetStatusResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetStatusResponse* internal_default_instance() {
    return reinterpret_cast<const GetStatusResponse*>(
               &_GetStatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(GetStatusResponse* other);
  friend void swap(GetStatusResponse& a, GetStatusResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetStatusResponse* New() const final {
    return CreateMaybeMessage<GetStatusResponse>(nullptr);
  }

  GetStatusResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetStatusResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetStatusResponse& from);
  void MergeFrom(const GetStatusResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetStatusResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "networkService.GetStatusResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_network_2eproto);
    return ::descriptor_table_network_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .networkService.NetworkStatus network_status = 1;
  bool has_network_status() const;
  void clear_network_status();
  static const int kNetworkStatusFieldNumber = 1;
  const ::networkService::NetworkStatus& network_status() const;
  ::networkService::NetworkStatus* release_network_status();
  ::networkService::NetworkStatus* mutable_network_status();
  void set_allocated_network_status(::networkService::NetworkStatus* network_status);

  // @@protoc_insertion_point(class_scope:networkService.GetStatusResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::networkService::NetworkStatus* network_status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class NetworkDeviceInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:networkService.NetworkDeviceInfo) */ {
 public:
  NetworkDeviceInfo();
  virtual ~NetworkDeviceInfo();

  NetworkDeviceInfo(const NetworkDeviceInfo& from);
  NetworkDeviceInfo(NetworkDeviceInfo&& from) noexcept
    : NetworkDeviceInfo() {
    *this = ::std::move(from);
  }

  inline NetworkDeviceInfo& operator=(const NetworkDeviceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetworkDeviceInfo& operator=(NetworkDeviceInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NetworkDeviceInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NetworkDeviceInfo* internal_default_instance() {
    return reinterpret_cast<const NetworkDeviceInfo*>(
               &_NetworkDeviceInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(NetworkDeviceInfo* other);
  friend void swap(NetworkDeviceInfo& a, NetworkDeviceInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NetworkDeviceInfo* New() const final {
    return CreateMaybeMessage<NetworkDeviceInfo>(nullptr);
  }

  NetworkDeviceInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NetworkDeviceInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NetworkDeviceInfo& from);
  void MergeFrom(const NetworkDeviceInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetworkDeviceInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "networkService.NetworkDeviceInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_network_2eproto);
    return ::descriptor_table_network_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ssid = 1;
  void clear_ssid();
  static const int kSsidFieldNumber = 1;
  const std::string& ssid() const;
  void set_ssid(const std::string& value);
  void set_ssid(std::string&& value);
  void set_ssid(const char* value);
  void set_ssid(const char* value, size_t size);
  std::string* mutable_ssid();
  std::string* release_ssid();
  void set_allocated_ssid(std::string* ssid);

  // string credential = 2;
  void clear_credential();
  static const int kCredentialFieldNumber = 2;
  const std::string& credential() const;
  void set_credential(const std::string& value);
  void set_credential(std::string&& value);
  void set_credential(const char* value);
  void set_credential(const char* value, size_t size);
  std::string* mutable_credential();
  std::string* release_credential();
  void set_allocated_credential(std::string* credential);

  // @@protoc_insertion_point(class_scope:networkService.NetworkDeviceInfo)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ssid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr credential_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class GetNetworkDeviceInfoRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:networkService.GetNetworkDeviceInfoRequest) */ {
 public:
  GetNetworkDeviceInfoRequest();
  virtual ~GetNetworkDeviceInfoRequest();

  GetNetworkDeviceInfoRequest(const GetNetworkDeviceInfoRequest& from);
  GetNetworkDeviceInfoRequest(GetNetworkDeviceInfoRequest&& from) noexcept
    : GetNetworkDeviceInfoRequest() {
    *this = ::std::move(from);
  }

  inline GetNetworkDeviceInfoRequest& operator=(const GetNetworkDeviceInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetNetworkDeviceInfoRequest& operator=(GetNetworkDeviceInfoRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetNetworkDeviceInfoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetNetworkDeviceInfoRequest* internal_default_instance() {
    return reinterpret_cast<const GetNetworkDeviceInfoRequest*>(
               &_GetNetworkDeviceInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(GetNetworkDeviceInfoRequest* other);
  friend void swap(GetNetworkDeviceInfoRequest& a, GetNetworkDeviceInfoRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetNetworkDeviceInfoRequest* New() const final {
    return CreateMaybeMessage<GetNetworkDeviceInfoRequest>(nullptr);
  }

  GetNetworkDeviceInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetNetworkDeviceInfoRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetNetworkDeviceInfoRequest& from);
  void MergeFrom(const GetNetworkDeviceInfoRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetNetworkDeviceInfoRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "networkService.GetNetworkDeviceInfoRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_network_2eproto);
    return ::descriptor_table_network_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool with_credential = 1;
  void clear_with_credential();
  static const int kWithCredentialFieldNumber = 1;
  bool with_credential() const;
  void set_with_credential(bool value);

  // @@protoc_insertion_point(class_scope:networkService.GetNetworkDeviceInfoRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool with_credential_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class GetNetworkDeviceInfoResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:networkService.GetNetworkDeviceInfoResponse) */ {
 public:
  GetNetworkDeviceInfoResponse();
  virtual ~GetNetworkDeviceInfoResponse();

  GetNetworkDeviceInfoResponse(const GetNetworkDeviceInfoResponse& from);
  GetNetworkDeviceInfoResponse(GetNetworkDeviceInfoResponse&& from) noexcept
    : GetNetworkDeviceInfoResponse() {
    *this = ::std::move(from);
  }

  inline GetNetworkDeviceInfoResponse& operator=(const GetNetworkDeviceInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetNetworkDeviceInfoResponse& operator=(GetNetworkDeviceInfoResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetNetworkDeviceInfoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetNetworkDeviceInfoResponse* internal_default_instance() {
    return reinterpret_cast<const GetNetworkDeviceInfoResponse*>(
               &_GetNetworkDeviceInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(GetNetworkDeviceInfoResponse* other);
  friend void swap(GetNetworkDeviceInfoResponse& a, GetNetworkDeviceInfoResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetNetworkDeviceInfoResponse* New() const final {
    return CreateMaybeMessage<GetNetworkDeviceInfoResponse>(nullptr);
  }

  GetNetworkDeviceInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetNetworkDeviceInfoResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetNetworkDeviceInfoResponse& from);
  void MergeFrom(const GetNetworkDeviceInfoResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetNetworkDeviceInfoResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "networkService.GetNetworkDeviceInfoResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_network_2eproto);
    return ::descriptor_table_network_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .networkService.NetworkDeviceInfo network_device_info = 1;
  bool has_network_device_info() const;
  void clear_network_device_info();
  static const int kNetworkDeviceInfoFieldNumber = 1;
  const ::networkService::NetworkDeviceInfo& network_device_info() const;
  ::networkService::NetworkDeviceInfo* release_network_device_info();
  ::networkService::NetworkDeviceInfo* mutable_network_device_info();
  void set_allocated_network_device_info(::networkService::NetworkDeviceInfo* network_device_info);

  // @@protoc_insertion_point(class_scope:networkService.GetNetworkDeviceInfoResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::networkService::NetworkDeviceInfo* network_device_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class UpdateNetworkDeviceInfoRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:networkService.UpdateNetworkDeviceInfoRequest) */ {
 public:
  UpdateNetworkDeviceInfoRequest();
  virtual ~UpdateNetworkDeviceInfoRequest();

  UpdateNetworkDeviceInfoRequest(const UpdateNetworkDeviceInfoRequest& from);
  UpdateNetworkDeviceInfoRequest(UpdateNetworkDeviceInfoRequest&& from) noexcept
    : UpdateNetworkDeviceInfoRequest() {
    *this = ::std::move(from);
  }

  inline UpdateNetworkDeviceInfoRequest& operator=(const UpdateNetworkDeviceInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateNetworkDeviceInfoRequest& operator=(UpdateNetworkDeviceInfoRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateNetworkDeviceInfoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateNetworkDeviceInfoRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateNetworkDeviceInfoRequest*>(
               &_UpdateNetworkDeviceInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(UpdateNetworkDeviceInfoRequest* other);
  friend void swap(UpdateNetworkDeviceInfoRequest& a, UpdateNetworkDeviceInfoRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateNetworkDeviceInfoRequest* New() const final {
    return CreateMaybeMessage<UpdateNetworkDeviceInfoRequest>(nullptr);
  }

  UpdateNetworkDeviceInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateNetworkDeviceInfoRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateNetworkDeviceInfoRequest& from);
  void MergeFrom(const UpdateNetworkDeviceInfoRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateNetworkDeviceInfoRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "networkService.UpdateNetworkDeviceInfoRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_network_2eproto);
    return ::descriptor_table_network_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .networkService.NetworkDeviceInfo network_device_info = 1;
  bool has_network_device_info() const;
  void clear_network_device_info();
  static const int kNetworkDeviceInfoFieldNumber = 1;
  const ::networkService::NetworkDeviceInfo& network_device_info() const;
  ::networkService::NetworkDeviceInfo* release_network_device_info();
  ::networkService::NetworkDeviceInfo* mutable_network_device_info();
  void set_allocated_network_device_info(::networkService::NetworkDeviceInfo* network_device_info);

  // @@protoc_insertion_point(class_scope:networkService.UpdateNetworkDeviceInfoRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::networkService::NetworkDeviceInfo* network_device_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class UpdateNetworkDeviceInfoResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:networkService.UpdateNetworkDeviceInfoResponse) */ {
 public:
  UpdateNetworkDeviceInfoResponse();
  virtual ~UpdateNetworkDeviceInfoResponse();

  UpdateNetworkDeviceInfoResponse(const UpdateNetworkDeviceInfoResponse& from);
  UpdateNetworkDeviceInfoResponse(UpdateNetworkDeviceInfoResponse&& from) noexcept
    : UpdateNetworkDeviceInfoResponse() {
    *this = ::std::move(from);
  }

  inline UpdateNetworkDeviceInfoResponse& operator=(const UpdateNetworkDeviceInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateNetworkDeviceInfoResponse& operator=(UpdateNetworkDeviceInfoResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateNetworkDeviceInfoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateNetworkDeviceInfoResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateNetworkDeviceInfoResponse*>(
               &_UpdateNetworkDeviceInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(UpdateNetworkDeviceInfoResponse* other);
  friend void swap(UpdateNetworkDeviceInfoResponse& a, UpdateNetworkDeviceInfoResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateNetworkDeviceInfoResponse* New() const final {
    return CreateMaybeMessage<UpdateNetworkDeviceInfoResponse>(nullptr);
  }

  UpdateNetworkDeviceInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateNetworkDeviceInfoResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateNetworkDeviceInfoResponse& from);
  void MergeFrom(const UpdateNetworkDeviceInfoResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateNetworkDeviceInfoResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "networkService.UpdateNetworkDeviceInfoResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_network_2eproto);
    return ::descriptor_table_network_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:networkService.UpdateNetworkDeviceInfoResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_network_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NetworkInfo

// string name = 1;
inline void NetworkInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NetworkInfo::name() const {
  // @@protoc_insertion_point(field_get:networkService.NetworkInfo.name)
  return name_.GetNoArena();
}
inline void NetworkInfo::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:networkService.NetworkInfo.name)
}
inline void NetworkInfo::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:networkService.NetworkInfo.name)
}
inline void NetworkInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:networkService.NetworkInfo.name)
}
inline void NetworkInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:networkService.NetworkInfo.name)
}
inline std::string* NetworkInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:networkService.NetworkInfo.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NetworkInfo::release_name() {
  // @@protoc_insertion_point(field_release:networkService.NetworkInfo.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:networkService.NetworkInfo.name)
}

// string mac = 2;
inline void NetworkInfo::clear_mac() {
  mac_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NetworkInfo::mac() const {
  // @@protoc_insertion_point(field_get:networkService.NetworkInfo.mac)
  return mac_.GetNoArena();
}
inline void NetworkInfo::set_mac(const std::string& value) {
  
  mac_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:networkService.NetworkInfo.mac)
}
inline void NetworkInfo::set_mac(std::string&& value) {
  
  mac_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:networkService.NetworkInfo.mac)
}
inline void NetworkInfo::set_mac(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mac_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:networkService.NetworkInfo.mac)
}
inline void NetworkInfo::set_mac(const char* value, size_t size) {
  
  mac_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:networkService.NetworkInfo.mac)
}
inline std::string* NetworkInfo::mutable_mac() {
  
  // @@protoc_insertion_point(field_mutable:networkService.NetworkInfo.mac)
  return mac_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NetworkInfo::release_mac() {
  // @@protoc_insertion_point(field_release:networkService.NetworkInfo.mac)
  
  return mac_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkInfo::set_allocated_mac(std::string* mac) {
  if (mac != nullptr) {
    
  } else {
    
  }
  mac_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mac);
  // @@protoc_insertion_point(field_set_allocated:networkService.NetworkInfo.mac)
}

// uint32 channel = 3;
inline void NetworkInfo::clear_channel() {
  channel_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NetworkInfo::channel() const {
  // @@protoc_insertion_point(field_get:networkService.NetworkInfo.channel)
  return channel_;
}
inline void NetworkInfo::set_channel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  channel_ = value;
  // @@protoc_insertion_point(field_set:networkService.NetworkInfo.channel)
}

// uint32 rssi = 4;
inline void NetworkInfo::clear_rssi() {
  rssi_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NetworkInfo::rssi() const {
  // @@protoc_insertion_point(field_get:networkService.NetworkInfo.rssi)
  return rssi_;
}
inline void NetworkInfo::set_rssi(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  rssi_ = value;
  // @@protoc_insertion_point(field_set:networkService.NetworkInfo.rssi)
}

// -------------------------------------------------------------------

// ListNetworksRequest

// -------------------------------------------------------------------

// ListNetworksResponse

// repeated .networkService.NetworkInfo networks_info = 1;
inline int ListNetworksResponse::networks_info_size() const {
  return networks_info_.size();
}
inline void ListNetworksResponse::clear_networks_info() {
  networks_info_.Clear();
}
inline ::networkService::NetworkInfo* ListNetworksResponse::mutable_networks_info(int index) {
  // @@protoc_insertion_point(field_mutable:networkService.ListNetworksResponse.networks_info)
  return networks_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::networkService::NetworkInfo >*
ListNetworksResponse::mutable_networks_info() {
  // @@protoc_insertion_point(field_mutable_list:networkService.ListNetworksResponse.networks_info)
  return &networks_info_;
}
inline const ::networkService::NetworkInfo& ListNetworksResponse::networks_info(int index) const {
  // @@protoc_insertion_point(field_get:networkService.ListNetworksResponse.networks_info)
  return networks_info_.Get(index);
}
inline ::networkService::NetworkInfo* ListNetworksResponse::add_networks_info() {
  // @@protoc_insertion_point(field_add:networkService.ListNetworksResponse.networks_info)
  return networks_info_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::networkService::NetworkInfo >&
ListNetworksResponse::networks_info() const {
  // @@protoc_insertion_point(field_list:networkService.ListNetworksResponse.networks_info)
  return networks_info_;
}

// -------------------------------------------------------------------

// ConnectRequest

// .networkService.NetworkInfo network_info = 1 [deprecated = true];
inline bool ConnectRequest::has_network_info() const {
  return this != internal_default_instance() && network_info_ != nullptr;
}
inline void ConnectRequest::clear_network_info() {
  if (GetArenaNoVirtual() == nullptr && network_info_ != nullptr) {
    delete network_info_;
  }
  network_info_ = nullptr;
}
inline const ::networkService::NetworkInfo& ConnectRequest::network_info() const {
  const ::networkService::NetworkInfo* p = network_info_;
  // @@protoc_insertion_point(field_get:networkService.ConnectRequest.network_info)
  return p != nullptr ? *p : *reinterpret_cast<const ::networkService::NetworkInfo*>(
      &::networkService::_NetworkInfo_default_instance_);
}
inline ::networkService::NetworkInfo* ConnectRequest::release_network_info() {
  // @@protoc_insertion_point(field_release:networkService.ConnectRequest.network_info)
  
  ::networkService::NetworkInfo* temp = network_info_;
  network_info_ = nullptr;
  return temp;
}
inline ::networkService::NetworkInfo* ConnectRequest::mutable_network_info() {
  
  if (network_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::networkService::NetworkInfo>(GetArenaNoVirtual());
    network_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:networkService.ConnectRequest.network_info)
  return network_info_;
}
inline void ConnectRequest::set_allocated_network_info(::networkService::NetworkInfo* network_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete network_info_;
  }
  if (network_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      network_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, network_info, submessage_arena);
    }
    
  } else {
    
  }
  network_info_ = network_info;
  // @@protoc_insertion_point(field_set_allocated:networkService.ConnectRequest.network_info)
}

// string ssid = 3;
inline void ConnectRequest::clear_ssid() {
  ssid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConnectRequest::ssid() const {
  // @@protoc_insertion_point(field_get:networkService.ConnectRequest.ssid)
  return ssid_.GetNoArena();
}
inline void ConnectRequest::set_ssid(const std::string& value) {
  
  ssid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:networkService.ConnectRequest.ssid)
}
inline void ConnectRequest::set_ssid(std::string&& value) {
  
  ssid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:networkService.ConnectRequest.ssid)
}
inline void ConnectRequest::set_ssid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ssid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:networkService.ConnectRequest.ssid)
}
inline void ConnectRequest::set_ssid(const char* value, size_t size) {
  
  ssid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:networkService.ConnectRequest.ssid)
}
inline std::string* ConnectRequest::mutable_ssid() {
  
  // @@protoc_insertion_point(field_mutable:networkService.ConnectRequest.ssid)
  return ssid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConnectRequest::release_ssid() {
  // @@protoc_insertion_point(field_release:networkService.ConnectRequest.ssid)
  
  return ssid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConnectRequest::set_allocated_ssid(std::string* ssid) {
  if (ssid != nullptr) {
    
  } else {
    
  }
  ssid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ssid);
  // @@protoc_insertion_point(field_set_allocated:networkService.ConnectRequest.ssid)
}

// string pwd = 2;
inline void ConnectRequest::clear_pwd() {
  pwd_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConnectRequest::pwd() const {
  // @@protoc_insertion_point(field_get:networkService.ConnectRequest.pwd)
  return pwd_.GetNoArena();
}
inline void ConnectRequest::set_pwd(const std::string& value) {
  
  pwd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:networkService.ConnectRequest.pwd)
}
inline void ConnectRequest::set_pwd(std::string&& value) {
  
  pwd_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:networkService.ConnectRequest.pwd)
}
inline void ConnectRequest::set_pwd(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pwd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:networkService.ConnectRequest.pwd)
}
inline void ConnectRequest::set_pwd(const char* value, size_t size) {
  
  pwd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:networkService.ConnectRequest.pwd)
}
inline std::string* ConnectRequest::mutable_pwd() {
  
  // @@protoc_insertion_point(field_mutable:networkService.ConnectRequest.pwd)
  return pwd_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConnectRequest::release_pwd() {
  // @@protoc_insertion_point(field_release:networkService.ConnectRequest.pwd)
  
  return pwd_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConnectRequest::set_allocated_pwd(std::string* pwd) {
  if (pwd != nullptr) {
    
  } else {
    
  }
  pwd_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pwd);
  // @@protoc_insertion_point(field_set_allocated:networkService.ConnectRequest.pwd)
}

// bool keep_alive = 4;
inline void ConnectRequest::clear_keep_alive() {
  keep_alive_ = false;
}
inline bool ConnectRequest::keep_alive() const {
  // @@protoc_insertion_point(field_get:networkService.ConnectRequest.keep_alive)
  return keep_alive_;
}
inline void ConnectRequest::set_keep_alive(bool value) {
  
  keep_alive_ = value;
  // @@protoc_insertion_point(field_set:networkService.ConnectRequest.keep_alive)
}

// uint32 keep_alive_interval = 5;
inline void ConnectRequest::clear_keep_alive_interval() {
  keep_alive_interval_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConnectRequest::keep_alive_interval() const {
  // @@protoc_insertion_point(field_get:networkService.ConnectRequest.keep_alive_interval)
  return keep_alive_interval_;
}
inline void ConnectRequest::set_keep_alive_interval(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  keep_alive_interval_ = value;
  // @@protoc_insertion_point(field_set:networkService.ConnectRequest.keep_alive_interval)
}

// -------------------------------------------------------------------

// NetworkStatus

// .networkService.Status status = 1;
inline void NetworkStatus::clear_status() {
  status_ = 0;
}
inline ::networkService::Status NetworkStatus::status() const {
  // @@protoc_insertion_point(field_get:networkService.NetworkStatus.status)
  return static_cast< ::networkService::Status >(status_);
}
inline void NetworkStatus::set_status(::networkService::Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:networkService.NetworkStatus.status)
}

// string name = 2;
inline void NetworkStatus::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NetworkStatus::name() const {
  // @@protoc_insertion_point(field_get:networkService.NetworkStatus.name)
  return name_.GetNoArena();
}
inline void NetworkStatus::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:networkService.NetworkStatus.name)
}
inline void NetworkStatus::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:networkService.NetworkStatus.name)
}
inline void NetworkStatus::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:networkService.NetworkStatus.name)
}
inline void NetworkStatus::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:networkService.NetworkStatus.name)
}
inline std::string* NetworkStatus::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:networkService.NetworkStatus.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NetworkStatus::release_name() {
  // @@protoc_insertion_point(field_release:networkService.NetworkStatus.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkStatus::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:networkService.NetworkStatus.name)
}

// string public_ip = 3;
inline void NetworkStatus::clear_public_ip() {
  public_ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NetworkStatus::public_ip() const {
  // @@protoc_insertion_point(field_get:networkService.NetworkStatus.public_ip)
  return public_ip_.GetNoArena();
}
inline void NetworkStatus::set_public_ip(const std::string& value) {
  
  public_ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:networkService.NetworkStatus.public_ip)
}
inline void NetworkStatus::set_public_ip(std::string&& value) {
  
  public_ip_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:networkService.NetworkStatus.public_ip)
}
inline void NetworkStatus::set_public_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  public_ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:networkService.NetworkStatus.public_ip)
}
inline void NetworkStatus::set_public_ip(const char* value, size_t size) {
  
  public_ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:networkService.NetworkStatus.public_ip)
}
inline std::string* NetworkStatus::mutable_public_ip() {
  
  // @@protoc_insertion_point(field_mutable:networkService.NetworkStatus.public_ip)
  return public_ip_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NetworkStatus::release_public_ip() {
  // @@protoc_insertion_point(field_release:networkService.NetworkStatus.public_ip)
  
  return public_ip_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkStatus::set_allocated_public_ip(std::string* public_ip) {
  if (public_ip != nullptr) {
    
  } else {
    
  }
  public_ip_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), public_ip);
  // @@protoc_insertion_point(field_set_allocated:networkService.NetworkStatus.public_ip)
}

// uint32 rssi = 4;
inline void NetworkStatus::clear_rssi() {
  rssi_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NetworkStatus::rssi() const {
  // @@protoc_insertion_point(field_get:networkService.NetworkStatus.rssi)
  return rssi_;
}
inline void NetworkStatus::set_rssi(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  rssi_ = value;
  // @@protoc_insertion_point(field_set:networkService.NetworkStatus.rssi)
}

// uint32 upload = 5;
inline void NetworkStatus::clear_upload() {
  upload_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NetworkStatus::upload() const {
  // @@protoc_insertion_point(field_get:networkService.NetworkStatus.upload)
  return upload_;
}
inline void NetworkStatus::set_upload(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  upload_ = value;
  // @@protoc_insertion_point(field_set:networkService.NetworkStatus.upload)
}

// uint32 download = 6;
inline void NetworkStatus::clear_download() {
  download_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NetworkStatus::download() const {
  // @@protoc_insertion_point(field_get:networkService.NetworkStatus.download)
  return download_;
}
inline void NetworkStatus::set_download(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  download_ = value;
  // @@protoc_insertion_point(field_set:networkService.NetworkStatus.download)
}

// -------------------------------------------------------------------

// ConnectResponse

// -------------------------------------------------------------------

// GetStatusRequest

// -------------------------------------------------------------------

// GetStatusResponse

// .networkService.NetworkStatus network_status = 1;
inline bool GetStatusResponse::has_network_status() const {
  return this != internal_default_instance() && network_status_ != nullptr;
}
inline void GetStatusResponse::clear_network_status() {
  if (GetArenaNoVirtual() == nullptr && network_status_ != nullptr) {
    delete network_status_;
  }
  network_status_ = nullptr;
}
inline const ::networkService::NetworkStatus& GetStatusResponse::network_status() const {
  const ::networkService::NetworkStatus* p = network_status_;
  // @@protoc_insertion_point(field_get:networkService.GetStatusResponse.network_status)
  return p != nullptr ? *p : *reinterpret_cast<const ::networkService::NetworkStatus*>(
      &::networkService::_NetworkStatus_default_instance_);
}
inline ::networkService::NetworkStatus* GetStatusResponse::release_network_status() {
  // @@protoc_insertion_point(field_release:networkService.GetStatusResponse.network_status)
  
  ::networkService::NetworkStatus* temp = network_status_;
  network_status_ = nullptr;
  return temp;
}
inline ::networkService::NetworkStatus* GetStatusResponse::mutable_network_status() {
  
  if (network_status_ == nullptr) {
    auto* p = CreateMaybeMessage<::networkService::NetworkStatus>(GetArenaNoVirtual());
    network_status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:networkService.GetStatusResponse.network_status)
  return network_status_;
}
inline void GetStatusResponse::set_allocated_network_status(::networkService::NetworkStatus* network_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete network_status_;
  }
  if (network_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      network_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, network_status, submessage_arena);
    }
    
  } else {
    
  }
  network_status_ = network_status;
  // @@protoc_insertion_point(field_set_allocated:networkService.GetStatusResponse.network_status)
}

// -------------------------------------------------------------------

// NetworkDeviceInfo

// string ssid = 1;
inline void NetworkDeviceInfo::clear_ssid() {
  ssid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NetworkDeviceInfo::ssid() const {
  // @@protoc_insertion_point(field_get:networkService.NetworkDeviceInfo.ssid)
  return ssid_.GetNoArena();
}
inline void NetworkDeviceInfo::set_ssid(const std::string& value) {
  
  ssid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:networkService.NetworkDeviceInfo.ssid)
}
inline void NetworkDeviceInfo::set_ssid(std::string&& value) {
  
  ssid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:networkService.NetworkDeviceInfo.ssid)
}
inline void NetworkDeviceInfo::set_ssid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ssid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:networkService.NetworkDeviceInfo.ssid)
}
inline void NetworkDeviceInfo::set_ssid(const char* value, size_t size) {
  
  ssid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:networkService.NetworkDeviceInfo.ssid)
}
inline std::string* NetworkDeviceInfo::mutable_ssid() {
  
  // @@protoc_insertion_point(field_mutable:networkService.NetworkDeviceInfo.ssid)
  return ssid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NetworkDeviceInfo::release_ssid() {
  // @@protoc_insertion_point(field_release:networkService.NetworkDeviceInfo.ssid)
  
  return ssid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkDeviceInfo::set_allocated_ssid(std::string* ssid) {
  if (ssid != nullptr) {
    
  } else {
    
  }
  ssid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ssid);
  // @@protoc_insertion_point(field_set_allocated:networkService.NetworkDeviceInfo.ssid)
}

// string credential = 2;
inline void NetworkDeviceInfo::clear_credential() {
  credential_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NetworkDeviceInfo::credential() const {
  // @@protoc_insertion_point(field_get:networkService.NetworkDeviceInfo.credential)
  return credential_.GetNoArena();
}
inline void NetworkDeviceInfo::set_credential(const std::string& value) {
  
  credential_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:networkService.NetworkDeviceInfo.credential)
}
inline void NetworkDeviceInfo::set_credential(std::string&& value) {
  
  credential_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:networkService.NetworkDeviceInfo.credential)
}
inline void NetworkDeviceInfo::set_credential(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  credential_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:networkService.NetworkDeviceInfo.credential)
}
inline void NetworkDeviceInfo::set_credential(const char* value, size_t size) {
  
  credential_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:networkService.NetworkDeviceInfo.credential)
}
inline std::string* NetworkDeviceInfo::mutable_credential() {
  
  // @@protoc_insertion_point(field_mutable:networkService.NetworkDeviceInfo.credential)
  return credential_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NetworkDeviceInfo::release_credential() {
  // @@protoc_insertion_point(field_release:networkService.NetworkDeviceInfo.credential)
  
  return credential_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkDeviceInfo::set_allocated_credential(std::string* credential) {
  if (credential != nullptr) {
    
  } else {
    
  }
  credential_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), credential);
  // @@protoc_insertion_point(field_set_allocated:networkService.NetworkDeviceInfo.credential)
}

// -------------------------------------------------------------------

// GetNetworkDeviceInfoRequest

// bool with_credential = 1;
inline void GetNetworkDeviceInfoRequest::clear_with_credential() {
  with_credential_ = false;
}
inline bool GetNetworkDeviceInfoRequest::with_credential() const {
  // @@protoc_insertion_point(field_get:networkService.GetNetworkDeviceInfoRequest.with_credential)
  return with_credential_;
}
inline void GetNetworkDeviceInfoRequest::set_with_credential(bool value) {
  
  with_credential_ = value;
  // @@protoc_insertion_point(field_set:networkService.GetNetworkDeviceInfoRequest.with_credential)
}

// -------------------------------------------------------------------

// GetNetworkDeviceInfoResponse

// .networkService.NetworkDeviceInfo network_device_info = 1;
inline bool GetNetworkDeviceInfoResponse::has_network_device_info() const {
  return this != internal_default_instance() && network_device_info_ != nullptr;
}
inline void GetNetworkDeviceInfoResponse::clear_network_device_info() {
  if (GetArenaNoVirtual() == nullptr && network_device_info_ != nullptr) {
    delete network_device_info_;
  }
  network_device_info_ = nullptr;
}
inline const ::networkService::NetworkDeviceInfo& GetNetworkDeviceInfoResponse::network_device_info() const {
  const ::networkService::NetworkDeviceInfo* p = network_device_info_;
  // @@protoc_insertion_point(field_get:networkService.GetNetworkDeviceInfoResponse.network_device_info)
  return p != nullptr ? *p : *reinterpret_cast<const ::networkService::NetworkDeviceInfo*>(
      &::networkService::_NetworkDeviceInfo_default_instance_);
}
inline ::networkService::NetworkDeviceInfo* GetNetworkDeviceInfoResponse::release_network_device_info() {
  // @@protoc_insertion_point(field_release:networkService.GetNetworkDeviceInfoResponse.network_device_info)
  
  ::networkService::NetworkDeviceInfo* temp = network_device_info_;
  network_device_info_ = nullptr;
  return temp;
}
inline ::networkService::NetworkDeviceInfo* GetNetworkDeviceInfoResponse::mutable_network_device_info() {
  
  if (network_device_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::networkService::NetworkDeviceInfo>(GetArenaNoVirtual());
    network_device_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:networkService.GetNetworkDeviceInfoResponse.network_device_info)
  return network_device_info_;
}
inline void GetNetworkDeviceInfoResponse::set_allocated_network_device_info(::networkService::NetworkDeviceInfo* network_device_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete network_device_info_;
  }
  if (network_device_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      network_device_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, network_device_info, submessage_arena);
    }
    
  } else {
    
  }
  network_device_info_ = network_device_info;
  // @@protoc_insertion_point(field_set_allocated:networkService.GetNetworkDeviceInfoResponse.network_device_info)
}

// -------------------------------------------------------------------

// UpdateNetworkDeviceInfoRequest

// .networkService.NetworkDeviceInfo network_device_info = 1;
inline bool UpdateNetworkDeviceInfoRequest::has_network_device_info() const {
  return this != internal_default_instance() && network_device_info_ != nullptr;
}
inline void UpdateNetworkDeviceInfoRequest::clear_network_device_info() {
  if (GetArenaNoVirtual() == nullptr && network_device_info_ != nullptr) {
    delete network_device_info_;
  }
  network_device_info_ = nullptr;
}
inline const ::networkService::NetworkDeviceInfo& UpdateNetworkDeviceInfoRequest::network_device_info() const {
  const ::networkService::NetworkDeviceInfo* p = network_device_info_;
  // @@protoc_insertion_point(field_get:networkService.UpdateNetworkDeviceInfoRequest.network_device_info)
  return p != nullptr ? *p : *reinterpret_cast<const ::networkService::NetworkDeviceInfo*>(
      &::networkService::_NetworkDeviceInfo_default_instance_);
}
inline ::networkService::NetworkDeviceInfo* UpdateNetworkDeviceInfoRequest::release_network_device_info() {
  // @@protoc_insertion_point(field_release:networkService.UpdateNetworkDeviceInfoRequest.network_device_info)
  
  ::networkService::NetworkDeviceInfo* temp = network_device_info_;
  network_device_info_ = nullptr;
  return temp;
}
inline ::networkService::NetworkDeviceInfo* UpdateNetworkDeviceInfoRequest::mutable_network_device_info() {
  
  if (network_device_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::networkService::NetworkDeviceInfo>(GetArenaNoVirtual());
    network_device_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:networkService.UpdateNetworkDeviceInfoRequest.network_device_info)
  return network_device_info_;
}
inline void UpdateNetworkDeviceInfoRequest::set_allocated_network_device_info(::networkService::NetworkDeviceInfo* network_device_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete network_device_info_;
  }
  if (network_device_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      network_device_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, network_device_info, submessage_arena);
    }
    
  } else {
    
  }
  network_device_info_ = network_device_info;
  // @@protoc_insertion_point(field_set_allocated:networkService.UpdateNetworkDeviceInfoRequest.network_device_info)
}

// -------------------------------------------------------------------

// UpdateNetworkDeviceInfoResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace networkService

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::networkService::Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::networkService::Status>() {
  return ::networkService::Status_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_network_2eproto
