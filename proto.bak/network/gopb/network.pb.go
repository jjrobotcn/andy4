// Code generated by protoc-gen-go. DO NOT EDIT.
// source: network.proto

package networkService

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// 连接状态
type Status int32

const (
	// 保留数据
	Status_UNKNOWN Status = 0
	// 连接断开
	Status_DISCONNECTED Status = 1
	// 连接中
	Status_CONNECTING Status = 2
	// 已连接
	Status_CONNECTED Status = 3
)

var Status_name = map[int32]string{
	0: "UNKNOWN",
	1: "DISCONNECTED",
	2: "CONNECTING",
	3: "CONNECTED",
}

var Status_value = map[string]int32{
	"UNKNOWN":      0,
	"DISCONNECTED": 1,
	"CONNECTING":   2,
	"CONNECTED":    3,
}

func (x Status) String() string {
	return proto.EnumName(Status_name, int32(x))
}

func (Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8571034d60397816, []int{0}
}

// 网络信息
type NetworkInfo struct {
	// wifi名
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// mac地址
	Mac string `protobuf:"bytes,2,opt,name=mac,proto3" json:"mac,omitempty"`
	// 网络信道
	Channel uint32 `protobuf:"varint,3,opt,name=channel,proto3" json:"channel,omitempty"`
	// 信号强度 0-100
	Rssi                 uint32   `protobuf:"varint,4,opt,name=rssi,proto3" json:"rssi,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NetworkInfo) Reset()         { *m = NetworkInfo{} }
func (m *NetworkInfo) String() string { return proto.CompactTextString(m) }
func (*NetworkInfo) ProtoMessage()    {}
func (*NetworkInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_8571034d60397816, []int{0}
}

func (m *NetworkInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetworkInfo.Unmarshal(m, b)
}
func (m *NetworkInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetworkInfo.Marshal(b, m, deterministic)
}
func (m *NetworkInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkInfo.Merge(m, src)
}
func (m *NetworkInfo) XXX_Size() int {
	return xxx_messageInfo_NetworkInfo.Size(m)
}
func (m *NetworkInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkInfo.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkInfo proto.InternalMessageInfo

func (m *NetworkInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NetworkInfo) GetMac() string {
	if m != nil {
		return m.Mac
	}
	return ""
}

func (m *NetworkInfo) GetChannel() uint32 {
	if m != nil {
		return m.Channel
	}
	return 0
}

func (m *NetworkInfo) GetRssi() uint32 {
	if m != nil {
		return m.Rssi
	}
	return 0
}

// 获取网络扫描结果流请求
type ListNetworksRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListNetworksRequest) Reset()         { *m = ListNetworksRequest{} }
func (m *ListNetworksRequest) String() string { return proto.CompactTextString(m) }
func (*ListNetworksRequest) ProtoMessage()    {}
func (*ListNetworksRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8571034d60397816, []int{1}
}

func (m *ListNetworksRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListNetworksRequest.Unmarshal(m, b)
}
func (m *ListNetworksRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListNetworksRequest.Marshal(b, m, deterministic)
}
func (m *ListNetworksRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListNetworksRequest.Merge(m, src)
}
func (m *ListNetworksRequest) XXX_Size() int {
	return xxx_messageInfo_ListNetworksRequest.Size(m)
}
func (m *ListNetworksRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListNetworksRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListNetworksRequest proto.InternalMessageInfo

// 获取网络扫描结果流结果
type ListNetworksResponse struct {
	// 网络信息列表
	NetworksInfo         []*NetworkInfo `protobuf:"bytes,1,rep,name=networks_info,json=networksInfo,proto3" json:"networks_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ListNetworksResponse) Reset()         { *m = ListNetworksResponse{} }
func (m *ListNetworksResponse) String() string { return proto.CompactTextString(m) }
func (*ListNetworksResponse) ProtoMessage()    {}
func (*ListNetworksResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8571034d60397816, []int{2}
}

func (m *ListNetworksResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListNetworksResponse.Unmarshal(m, b)
}
func (m *ListNetworksResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListNetworksResponse.Marshal(b, m, deterministic)
}
func (m *ListNetworksResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListNetworksResponse.Merge(m, src)
}
func (m *ListNetworksResponse) XXX_Size() int {
	return xxx_messageInfo_ListNetworksResponse.Size(m)
}
func (m *ListNetworksResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListNetworksResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListNetworksResponse proto.InternalMessageInfo

func (m *ListNetworksResponse) GetNetworksInfo() []*NetworkInfo {
	if m != nil {
		return m.NetworksInfo
	}
	return nil
}

// 连接至指定网络请求
type ConnectRequest struct {
	// !!! >=v1.2.0可不再使用此NetworkInfo请求，此参数声明作废，请使用更为精简的ssid作为连接目标参数
	// 目标网络信息
	// 此对象应由ListNetworks.ListNetworksResponse.NetworkInfo中获取
	NetworkInfo *NetworkInfo `protobuf:"bytes,1,opt,name=network_info,json=networkInfo,proto3" json:"network_info,omitempty"` // Deprecated: Do not use.
	// >=v1.2.0
	// 目标网络ssid
	// 自动获取当前的NetworkInfo信息中首个匹配ssid，
	// 若匹配失败将直接返回连接错误
	// 不支持隐藏ssid的链接
	Ssid string `protobuf:"bytes,3,opt,name=ssid,proto3" json:"ssid,omitempty"`
	// wifi密码
	Pwd string `protobuf:"bytes,2,opt,name=pwd,proto3" json:"pwd,omitempty"`
	// >=v1.2.0
	// 保持当前外部连接
	// 配置此参数后将立即启动状态监听。
	// 若出现DISCONNECTED状态且keep_alive_interval间隔时间内，
	// 状态持续为DISCONNECTED状态将自动发起ConnectRequest。
	// 在等待期间出现非DISCONNECTED的任意状态切换，
	// keep_alive_interval都将重新计算。
	KeepAlive bool `protobuf:"varint,4,opt,name=keep_alive,json=keepAlive,proto3" json:"keep_alive,omitempty"`
	// >=v1.2.0
	// 保持当前连接判断间隔, 默认及最小为30s
	KeepAliveInterval    uint32   `protobuf:"varint,5,opt,name=keep_alive_interval,json=keepAliveInterval,proto3" json:"keep_alive_interval,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConnectRequest) Reset()         { *m = ConnectRequest{} }
func (m *ConnectRequest) String() string { return proto.CompactTextString(m) }
func (*ConnectRequest) ProtoMessage()    {}
func (*ConnectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8571034d60397816, []int{3}
}

func (m *ConnectRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConnectRequest.Unmarshal(m, b)
}
func (m *ConnectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConnectRequest.Marshal(b, m, deterministic)
}
func (m *ConnectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnectRequest.Merge(m, src)
}
func (m *ConnectRequest) XXX_Size() int {
	return xxx_messageInfo_ConnectRequest.Size(m)
}
func (m *ConnectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ConnectRequest proto.InternalMessageInfo

// Deprecated: Do not use.
func (m *ConnectRequest) GetNetworkInfo() *NetworkInfo {
	if m != nil {
		return m.NetworkInfo
	}
	return nil
}

func (m *ConnectRequest) GetSsid() string {
	if m != nil {
		return m.Ssid
	}
	return ""
}

func (m *ConnectRequest) GetPwd() string {
	if m != nil {
		return m.Pwd
	}
	return ""
}

func (m *ConnectRequest) GetKeepAlive() bool {
	if m != nil {
		return m.KeepAlive
	}
	return false
}

func (m *ConnectRequest) GetKeepAliveInterval() uint32 {
	if m != nil {
		return m.KeepAliveInterval
	}
	return 0
}

// 网络状态
type NetworkStatus struct {
	// 连接状态
	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=networkService.Status" json:"status,omitempty"`
	// 连接的上级网络ssid
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// 连接的上级网络ip
	PublicIp string `protobuf:"bytes,3,opt,name=public_ip,json=publicIp,proto3" json:"public_ip,omitempty"`
	// 当前信号强度
	Rssi uint32 `protobuf:"varint,4,opt,name=rssi,proto3" json:"rssi,omitempty"`
	// 当前上传速度
	Upload uint32 `protobuf:"varint,5,opt,name=upload,proto3" json:"upload,omitempty"`
	// 当前下载速度
	Download             uint32   `protobuf:"varint,6,opt,name=download,proto3" json:"download,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NetworkStatus) Reset()         { *m = NetworkStatus{} }
func (m *NetworkStatus) String() string { return proto.CompactTextString(m) }
func (*NetworkStatus) ProtoMessage()    {}
func (*NetworkStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_8571034d60397816, []int{4}
}

func (m *NetworkStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetworkStatus.Unmarshal(m, b)
}
func (m *NetworkStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetworkStatus.Marshal(b, m, deterministic)
}
func (m *NetworkStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkStatus.Merge(m, src)
}
func (m *NetworkStatus) XXX_Size() int {
	return xxx_messageInfo_NetworkStatus.Size(m)
}
func (m *NetworkStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkStatus.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkStatus proto.InternalMessageInfo

func (m *NetworkStatus) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_UNKNOWN
}

func (m *NetworkStatus) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NetworkStatus) GetPublicIp() string {
	if m != nil {
		return m.PublicIp
	}
	return ""
}

func (m *NetworkStatus) GetRssi() uint32 {
	if m != nil {
		return m.Rssi
	}
	return 0
}

func (m *NetworkStatus) GetUpload() uint32 {
	if m != nil {
		return m.Upload
	}
	return 0
}

func (m *NetworkStatus) GetDownload() uint32 {
	if m != nil {
		return m.Download
	}
	return 0
}

// 连接至指定网络请求结果
type ConnectResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConnectResponse) Reset()         { *m = ConnectResponse{} }
func (m *ConnectResponse) String() string { return proto.CompactTextString(m) }
func (*ConnectResponse) ProtoMessage()    {}
func (*ConnectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8571034d60397816, []int{5}
}

func (m *ConnectResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConnectResponse.Unmarshal(m, b)
}
func (m *ConnectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConnectResponse.Marshal(b, m, deterministic)
}
func (m *ConnectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnectResponse.Merge(m, src)
}
func (m *ConnectResponse) XXX_Size() int {
	return xxx_messageInfo_ConnectResponse.Size(m)
}
func (m *ConnectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ConnectResponse proto.InternalMessageInfo

// 获取连接状态流请求
type GetStatusRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetStatusRequest) Reset()         { *m = GetStatusRequest{} }
func (m *GetStatusRequest) String() string { return proto.CompactTextString(m) }
func (*GetStatusRequest) ProtoMessage()    {}
func (*GetStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8571034d60397816, []int{6}
}

func (m *GetStatusRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetStatusRequest.Unmarshal(m, b)
}
func (m *GetStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetStatusRequest.Marshal(b, m, deterministic)
}
func (m *GetStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetStatusRequest.Merge(m, src)
}
func (m *GetStatusRequest) XXX_Size() int {
	return xxx_messageInfo_GetStatusRequest.Size(m)
}
func (m *GetStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetStatusRequest proto.InternalMessageInfo

// 获取连接状态流结果
type GetStatusResponse struct {
	// 网络状态
	NetworkStatus        *NetworkStatus `protobuf:"bytes,1,opt,name=network_status,json=networkStatus,proto3" json:"network_status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *GetStatusResponse) Reset()         { *m = GetStatusResponse{} }
func (m *GetStatusResponse) String() string { return proto.CompactTextString(m) }
func (*GetStatusResponse) ProtoMessage()    {}
func (*GetStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8571034d60397816, []int{7}
}

func (m *GetStatusResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetStatusResponse.Unmarshal(m, b)
}
func (m *GetStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetStatusResponse.Marshal(b, m, deterministic)
}
func (m *GetStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetStatusResponse.Merge(m, src)
}
func (m *GetStatusResponse) XXX_Size() int {
	return xxx_messageInfo_GetStatusResponse.Size(m)
}
func (m *GetStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetStatusResponse proto.InternalMessageInfo

func (m *GetStatusResponse) GetNetworkStatus() *NetworkStatus {
	if m != nil {
		return m.NetworkStatus
	}
	return nil
}

// 网络设备信息
type NetworkDeviceInfo struct {
	// wifi名
	// 5G网络名为(2.4G)-5G
	Ssid string `protobuf:"bytes,1,opt,name=ssid,proto3" json:"ssid,omitempty"`
	// 密码
	Credential           string   `protobuf:"bytes,2,opt,name=credential,proto3" json:"credential,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NetworkDeviceInfo) Reset()         { *m = NetworkDeviceInfo{} }
func (m *NetworkDeviceInfo) String() string { return proto.CompactTextString(m) }
func (*NetworkDeviceInfo) ProtoMessage()    {}
func (*NetworkDeviceInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_8571034d60397816, []int{8}
}

func (m *NetworkDeviceInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetworkDeviceInfo.Unmarshal(m, b)
}
func (m *NetworkDeviceInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetworkDeviceInfo.Marshal(b, m, deterministic)
}
func (m *NetworkDeviceInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkDeviceInfo.Merge(m, src)
}
func (m *NetworkDeviceInfo) XXX_Size() int {
	return xxx_messageInfo_NetworkDeviceInfo.Size(m)
}
func (m *NetworkDeviceInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkDeviceInfo.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkDeviceInfo proto.InternalMessageInfo

func (m *NetworkDeviceInfo) GetSsid() string {
	if m != nil {
		return m.Ssid
	}
	return ""
}

func (m *NetworkDeviceInfo) GetCredential() string {
	if m != nil {
		return m.Credential
	}
	return ""
}

// 获取网络设备相关信息请求
type GetNetworkDeviceInfoRequest struct {
	// 是否获取密码
	WithCredential       bool     `protobuf:"varint,1,opt,name=with_credential,json=withCredential,proto3" json:"with_credential,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetNetworkDeviceInfoRequest) Reset()         { *m = GetNetworkDeviceInfoRequest{} }
func (m *GetNetworkDeviceInfoRequest) String() string { return proto.CompactTextString(m) }
func (*GetNetworkDeviceInfoRequest) ProtoMessage()    {}
func (*GetNetworkDeviceInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8571034d60397816, []int{9}
}

func (m *GetNetworkDeviceInfoRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetNetworkDeviceInfoRequest.Unmarshal(m, b)
}
func (m *GetNetworkDeviceInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetNetworkDeviceInfoRequest.Marshal(b, m, deterministic)
}
func (m *GetNetworkDeviceInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNetworkDeviceInfoRequest.Merge(m, src)
}
func (m *GetNetworkDeviceInfoRequest) XXX_Size() int {
	return xxx_messageInfo_GetNetworkDeviceInfoRequest.Size(m)
}
func (m *GetNetworkDeviceInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNetworkDeviceInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetNetworkDeviceInfoRequest proto.InternalMessageInfo

func (m *GetNetworkDeviceInfoRequest) GetWithCredential() bool {
	if m != nil {
		return m.WithCredential
	}
	return false
}

// 获取网络设备相关信息结果
type GetNetworkDeviceInfoResponse struct {
	// 网络设备信息
	NetworkDeviceInfo    *NetworkDeviceInfo `protobuf:"bytes,1,opt,name=network_device_info,json=networkDeviceInfo,proto3" json:"network_device_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *GetNetworkDeviceInfoResponse) Reset()         { *m = GetNetworkDeviceInfoResponse{} }
func (m *GetNetworkDeviceInfoResponse) String() string { return proto.CompactTextString(m) }
func (*GetNetworkDeviceInfoResponse) ProtoMessage()    {}
func (*GetNetworkDeviceInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8571034d60397816, []int{10}
}

func (m *GetNetworkDeviceInfoResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetNetworkDeviceInfoResponse.Unmarshal(m, b)
}
func (m *GetNetworkDeviceInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetNetworkDeviceInfoResponse.Marshal(b, m, deterministic)
}
func (m *GetNetworkDeviceInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNetworkDeviceInfoResponse.Merge(m, src)
}
func (m *GetNetworkDeviceInfoResponse) XXX_Size() int {
	return xxx_messageInfo_GetNetworkDeviceInfoResponse.Size(m)
}
func (m *GetNetworkDeviceInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNetworkDeviceInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetNetworkDeviceInfoResponse proto.InternalMessageInfo

func (m *GetNetworkDeviceInfoResponse) GetNetworkDeviceInfo() *NetworkDeviceInfo {
	if m != nil {
		return m.NetworkDeviceInfo
	}
	return nil
}

// 修改网络设备相关信息请求
type UpdateNetworkDeviceInfoRequest struct {
	// 网络设备信息
	// NetworkInfo中留空为不更新
	NetworkDeviceInfo    *NetworkDeviceInfo `protobuf:"bytes,1,opt,name=network_device_info,json=networkDeviceInfo,proto3" json:"network_device_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *UpdateNetworkDeviceInfoRequest) Reset()         { *m = UpdateNetworkDeviceInfoRequest{} }
func (m *UpdateNetworkDeviceInfoRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateNetworkDeviceInfoRequest) ProtoMessage()    {}
func (*UpdateNetworkDeviceInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8571034d60397816, []int{11}
}

func (m *UpdateNetworkDeviceInfoRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateNetworkDeviceInfoRequest.Unmarshal(m, b)
}
func (m *UpdateNetworkDeviceInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateNetworkDeviceInfoRequest.Marshal(b, m, deterministic)
}
func (m *UpdateNetworkDeviceInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateNetworkDeviceInfoRequest.Merge(m, src)
}
func (m *UpdateNetworkDeviceInfoRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateNetworkDeviceInfoRequest.Size(m)
}
func (m *UpdateNetworkDeviceInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateNetworkDeviceInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateNetworkDeviceInfoRequest proto.InternalMessageInfo

func (m *UpdateNetworkDeviceInfoRequest) GetNetworkDeviceInfo() *NetworkDeviceInfo {
	if m != nil {
		return m.NetworkDeviceInfo
	}
	return nil
}

// 修改网络设备相关信息结果
type UpdateNetworkDeviceInfoResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateNetworkDeviceInfoResponse) Reset()         { *m = UpdateNetworkDeviceInfoResponse{} }
func (m *UpdateNetworkDeviceInfoResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateNetworkDeviceInfoResponse) ProtoMessage()    {}
func (*UpdateNetworkDeviceInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8571034d60397816, []int{12}
}

func (m *UpdateNetworkDeviceInfoResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateNetworkDeviceInfoResponse.Unmarshal(m, b)
}
func (m *UpdateNetworkDeviceInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateNetworkDeviceInfoResponse.Marshal(b, m, deterministic)
}
func (m *UpdateNetworkDeviceInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateNetworkDeviceInfoResponse.Merge(m, src)
}
func (m *UpdateNetworkDeviceInfoResponse) XXX_Size() int {
	return xxx_messageInfo_UpdateNetworkDeviceInfoResponse.Size(m)
}
func (m *UpdateNetworkDeviceInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateNetworkDeviceInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateNetworkDeviceInfoResponse proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("networkService.Status", Status_name, Status_value)
	proto.RegisterType((*NetworkInfo)(nil), "networkService.NetworkInfo")
	proto.RegisterType((*ListNetworksRequest)(nil), "networkService.ListNetworksRequest")
	proto.RegisterType((*ListNetworksResponse)(nil), "networkService.ListNetworksResponse")
	proto.RegisterType((*ConnectRequest)(nil), "networkService.ConnectRequest")
	proto.RegisterType((*NetworkStatus)(nil), "networkService.NetworkStatus")
	proto.RegisterType((*ConnectResponse)(nil), "networkService.ConnectResponse")
	proto.RegisterType((*GetStatusRequest)(nil), "networkService.GetStatusRequest")
	proto.RegisterType((*GetStatusResponse)(nil), "networkService.GetStatusResponse")
	proto.RegisterType((*NetworkDeviceInfo)(nil), "networkService.NetworkDeviceInfo")
	proto.RegisterType((*GetNetworkDeviceInfoRequest)(nil), "networkService.GetNetworkDeviceInfoRequest")
	proto.RegisterType((*GetNetworkDeviceInfoResponse)(nil), "networkService.GetNetworkDeviceInfoResponse")
	proto.RegisterType((*UpdateNetworkDeviceInfoRequest)(nil), "networkService.UpdateNetworkDeviceInfoRequest")
	proto.RegisterType((*UpdateNetworkDeviceInfoResponse)(nil), "networkService.UpdateNetworkDeviceInfoResponse")
}

func init() { proto.RegisterFile("network.proto", fileDescriptor_8571034d60397816) }

var fileDescriptor_8571034d60397816 = []byte{
	// 758 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x55, 0xcd, 0x4e, 0xdb, 0x4a,
	0x14, 0xbe, 0x93, 0x40, 0x20, 0x27, 0x24, 0x24, 0x03, 0x17, 0x2c, 0xf3, 0x17, 0x7c, 0x6f, 0x05,
	0xa2, 0x28, 0x41, 0xa9, 0xba, 0xe9, 0xaa, 0x25, 0x81, 0x28, 0x6a, 0x65, 0x54, 0x53, 0xd4, 0x76,
	0x15, 0x99, 0x78, 0x80, 0x11, 0x66, 0x6c, 0x32, 0x93, 0x64, 0xcf, 0x2b, 0xf4, 0x19, 0xfa, 0x00,
	0xdd, 0xf5, 0x15, 0xba, 0xee, 0xaa, 0xfb, 0x3e, 0x48, 0xe5, 0xf1, 0x38, 0x38, 0x6e, 0x4c, 0xd9,
	0x74, 0x37, 0xe7, 0x67, 0xce, 0xf9, 0xbe, 0x73, 0x3e, 0x8f, 0xa1, 0xc8, 0x88, 0x18, 0x79, 0xfd,
	0xeb, 0x9a, 0xdf, 0xf7, 0x84, 0x87, 0x4b, 0xca, 0x3c, 0x25, 0xfd, 0x21, 0xed, 0x11, 0x7d, 0xfd,
	0xd2, 0xf3, 0x2e, 0x5d, 0x52, 0xb7, 0x7d, 0x5a, 0xb7, 0x19, 0xf3, 0x84, 0x2d, 0xa8, 0xc7, 0x78,
	0x98, 0x6d, 0xd8, 0x50, 0x30, 0xc3, 0xfc, 0x0e, 0xbb, 0xf0, 0x30, 0x86, 0x19, 0x66, 0xdf, 0x10,
	0x0d, 0x55, 0xd1, 0x6e, 0xde, 0x92, 0x67, 0x5c, 0x86, 0xec, 0x8d, 0xdd, 0xd3, 0x32, 0xd2, 0x15,
	0x1c, 0xb1, 0x06, 0x73, 0xbd, 0x2b, 0x9b, 0x31, 0xe2, 0x6a, 0xd9, 0x2a, 0xda, 0x2d, 0x5a, 0x91,
	0x19, 0xdc, 0xef, 0x73, 0x4e, 0xb5, 0x19, 0xe9, 0x96, 0x67, 0xe3, 0x5f, 0x58, 0x7a, 0x43, 0xb9,
	0x50, 0x6d, 0xb8, 0x45, 0x6e, 0x07, 0x84, 0x0b, 0xe3, 0x03, 0x2c, 0x4f, 0xba, 0xb9, 0xef, 0x31,
	0x4e, 0xf0, 0xcb, 0x31, 0x21, 0xde, 0xa5, 0xec, 0xc2, 0xd3, 0x50, 0x35, 0xbb, 0x5b, 0x68, 0xac,
	0xd5, 0x26, 0x79, 0xd5, 0x62, 0xb0, 0xad, 0x85, 0xe8, 0x46, 0x60, 0x19, 0xdf, 0x10, 0x94, 0x9a,
	0x1e, 0x63, 0xa4, 0x27, 0x54, 0x33, 0x7c, 0x08, 0x51, 0x4a, 0x54, 0x13, 0xfd, 0xa1, 0xe6, 0x61,
	0x46, 0x43, 0x56, 0x81, 0x4d, 0xce, 0x86, 0x73, 0xea, 0x48, 0xca, 0x79, 0x4b, 0x9e, 0x83, 0xd9,
	0xf8, 0x23, 0x27, 0x9a, 0x8d, 0x3f, 0x72, 0xf0, 0x06, 0xc0, 0x35, 0x21, 0x7e, 0xd7, 0x76, 0xe9,
	0x90, 0xc8, 0x39, 0xcc, 0x5b, 0xf9, 0xc0, 0xf3, 0x2a, 0x70, 0xe0, 0x1a, 0x2c, 0xdd, 0x87, 0xbb,
	0x94, 0x09, 0xd2, 0x1f, 0xda, 0xae, 0x36, 0x2b, 0xe7, 0x55, 0x19, 0xe7, 0x75, 0x54, 0xc0, 0xf8,
	0x8a, 0xa0, 0xa8, 0x50, 0x9d, 0x0a, 0x5b, 0x0c, 0x38, 0xae, 0x41, 0x8e, 0xcb, 0x93, 0x24, 0x51,
	0x6a, 0xac, 0x24, 0x49, 0x84, 0x79, 0x96, 0xca, 0x1a, 0xaf, 0x34, 0x13, 0x5b, 0xe9, 0x1a, 0xe4,
	0xfd, 0xc1, 0xb9, 0x4b, 0x7b, 0x5d, 0xea, 0x2b, 0x3e, 0xf3, 0xa1, 0xa3, 0xe3, 0x4f, 0xdb, 0x21,
	0x5e, 0x81, 0xdc, 0xc0, 0x77, 0x3d, 0xdb, 0x51, 0x48, 0x95, 0x85, 0x75, 0x98, 0x77, 0xbc, 0x11,
	0x93, 0x91, 0x9c, 0x8c, 0x8c, 0x6d, 0xa3, 0x02, 0x8b, 0xe3, 0x2d, 0x84, 0xbb, 0x35, 0x30, 0x94,
	0xdb, 0x44, 0x28, 0x80, 0x4a, 0x07, 0x1f, 0xa1, 0x12, 0xf3, 0x29, 0x11, 0xb4, 0x20, 0x92, 0x71,
	0x37, 0x46, 0xb6, 0xd0, 0xd8, 0x48, 0xd9, 0x98, 0xba, 0x1e, 0x29, 0x27, 0x34, 0x8d, 0x36, 0x54,
	0x54, 0xbc, 0x45, 0x82, 0xec, 0x89, 0x35, 0xa2, 0xd8, 0x1a, 0x37, 0x01, 0x7a, 0x7d, 0xe2, 0x10,
	0x26, 0xa8, 0xed, 0xaa, 0x49, 0xc5, 0x3c, 0xc6, 0x31, 0xac, 0xb5, 0x89, 0xf8, 0xad, 0x56, 0xa4,
	0xae, 0x1d, 0x58, 0x1c, 0x51, 0x71, 0xd5, 0x8d, 0xd5, 0x40, 0x72, 0xf1, 0xa5, 0xc0, 0xdd, 0xbc,
	0xaf, 0x73, 0x0b, 0xeb, 0xd3, 0xeb, 0x28, 0xda, 0x6f, 0x61, 0x29, 0xa2, 0xed, 0xc8, 0x68, 0x5c,
	0xad, 0xdb, 0x29, 0xdc, 0x63, 0x75, 0x2a, 0x2c, 0xe9, 0x32, 0x38, 0x6c, 0x9e, 0xf9, 0x8e, 0x2d,
	0x48, 0x2a, 0xfa, 0xbf, 0xd0, 0x74, 0x1b, 0xb6, 0x52, 0x9b, 0x86, 0x54, 0xf7, 0x8e, 0x21, 0xa7,
	0x04, 0x5d, 0x80, 0xb9, 0x33, 0xf3, 0xb5, 0x79, 0xf2, 0xde, 0x2c, 0xff, 0x83, 0xcb, 0xb0, 0xd0,
	0xea, 0x9c, 0x36, 0x4f, 0x4c, 0xf3, 0xa8, 0xf9, 0xee, 0xa8, 0x55, 0x46, 0xb8, 0x04, 0xa0, 0xcc,
	0x8e, 0xd9, 0x2e, 0x67, 0x70, 0x11, 0xf2, 0xf7, 0xe1, 0x6c, 0xe3, 0xc7, 0x2c, 0x94, 0xcc, 0x09,
	0x88, 0xf8, 0x0e, 0xc1, 0x42, 0xfc, 0x69, 0xc1, 0xff, 0x25, 0x49, 0x4c, 0x79, 0x8f, 0xf4, 0xff,
	0x1f, 0x4e, 0x52, 0x0a, 0x7e, 0x72, 0xf7, 0xfd, 0xe7, 0xa7, 0xcc, 0x16, 0xde, 0x90, 0xef, 0xe9,
	0xb0, 0x51, 0x57, 0x97, 0xea, 0x2e, 0xe5, 0xa2, 0x1b, 0x3d, 0x43, 0x07, 0x08, 0x33, 0x98, 0x53,
	0xea, 0xc7, 0x9b, 0xc9, 0xca, 0x93, 0x8f, 0x93, 0xbe, 0x95, 0x1a, 0x57, 0x4d, 0x0d, 0xd9, 0x74,
	0xdd, 0x58, 0x4d, 0x36, 0xed, 0x85, 0x89, 0x2f, 0xd0, 0x1e, 0x1e, 0x42, 0x7e, 0xfc, 0x19, 0xe1,
	0x6a, 0xb2, 0x62, 0xf2, 0xab, 0xd3, 0xb7, 0x1f, 0xc8, 0x98, 0xec, 0x8a, 0xf5, 0x64, 0xd7, 0x4b,
	0x22, 0xd4, 0x57, 0x79, 0x80, 0xf0, 0x67, 0x04, 0xcb, 0xd3, 0x34, 0x8d, 0x9f, 0x4e, 0xe9, 0x90,
	0xa6, 0x41, 0x7d, 0xff, 0x71, 0xc9, 0x0a, 0x59, 0x43, 0x22, 0xdb, 0x37, 0x76, 0xa6, 0x21, 0x9b,
	0xa2, 0xe5, 0x60, 0x3e, 0x5f, 0x10, 0xac, 0xa6, 0x68, 0x12, 0xd7, 0x92, 0xdd, 0x1f, 0xfe, 0x62,
	0xf4, 0xfa, 0xa3, 0xf3, 0x15, 0xe0, 0xe7, 0x12, 0x70, 0xdd, 0xd8, 0x4b, 0x02, 0x1e, 0xc8, 0x8b,
	0x29, 0x98, 0xcf, 0x73, 0xf2, 0x1f, 0xfd, 0xec, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0x70, 0x90,
	0xca, 0x33, 0xe2, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NetworkServiceClient is the client API for NetworkService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NetworkServiceClient interface {
	// 获取网络扫描结果流
	// api请求时将触发ssid扫描更新，该方法在同一时刻多个请求仅处理一次，向所有监听返回同一扫描结果
	// 方法不主动进行更新，但监听用户可获取其它请求中返回的扫描结果
	ListNetworks(ctx context.Context, in *ListNetworksRequest, opts ...grpc.CallOption) (NetworkService_ListNetworksClient, error)
	// 连接至指定网络
	// 连接失败将立即返回错误
	// 若30秒后成功获取状态将返回超时失败
	Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (*ConnectResponse, error)
	// 获取连接状态流
	// 在连接开始时立即返回当前最新的扫描数据
	// 并持续在网络数据更新时接收新数据
	GetStatus(ctx context.Context, in *GetStatusRequest, opts ...grpc.CallOption) (NetworkService_GetStatusClient, error)
	// 获取网络设备相关信息
	// v1.1.0
	GetNetworkDeviceInfo(ctx context.Context, in *GetNetworkDeviceInfoRequest, opts ...grpc.CallOption) (*GetNetworkDeviceInfoResponse, error)
	// 修改网络设备相关信息
	// v1.1.0
	UpdateNetworkDeviceInfo(ctx context.Context, in *UpdateNetworkDeviceInfoRequest, opts ...grpc.CallOption) (*UpdateNetworkDeviceInfoResponse, error)
}

type networkServiceClient struct {
	cc *grpc.ClientConn
}

func NewNetworkServiceClient(cc *grpc.ClientConn) NetworkServiceClient {
	return &networkServiceClient{cc}
}

func (c *networkServiceClient) ListNetworks(ctx context.Context, in *ListNetworksRequest, opts ...grpc.CallOption) (NetworkService_ListNetworksClient, error) {
	stream, err := c.cc.NewStream(ctx, &_NetworkService_serviceDesc.Streams[0], "/networkService.NetworkService/ListNetworks", opts...)
	if err != nil {
		return nil, err
	}
	x := &networkServiceListNetworksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NetworkService_ListNetworksClient interface {
	Recv() (*ListNetworksResponse, error)
	grpc.ClientStream
}

type networkServiceListNetworksClient struct {
	grpc.ClientStream
}

func (x *networkServiceListNetworksClient) Recv() (*ListNetworksResponse, error) {
	m := new(ListNetworksResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *networkServiceClient) Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (*ConnectResponse, error) {
	out := new(ConnectResponse)
	err := c.cc.Invoke(ctx, "/networkService.NetworkService/Connect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceClient) GetStatus(ctx context.Context, in *GetStatusRequest, opts ...grpc.CallOption) (NetworkService_GetStatusClient, error) {
	stream, err := c.cc.NewStream(ctx, &_NetworkService_serviceDesc.Streams[1], "/networkService.NetworkService/GetStatus", opts...)
	if err != nil {
		return nil, err
	}
	x := &networkServiceGetStatusClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NetworkService_GetStatusClient interface {
	Recv() (*GetStatusResponse, error)
	grpc.ClientStream
}

type networkServiceGetStatusClient struct {
	grpc.ClientStream
}

func (x *networkServiceGetStatusClient) Recv() (*GetStatusResponse, error) {
	m := new(GetStatusResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *networkServiceClient) GetNetworkDeviceInfo(ctx context.Context, in *GetNetworkDeviceInfoRequest, opts ...grpc.CallOption) (*GetNetworkDeviceInfoResponse, error) {
	out := new(GetNetworkDeviceInfoResponse)
	err := c.cc.Invoke(ctx, "/networkService.NetworkService/GetNetworkDeviceInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceClient) UpdateNetworkDeviceInfo(ctx context.Context, in *UpdateNetworkDeviceInfoRequest, opts ...grpc.CallOption) (*UpdateNetworkDeviceInfoResponse, error) {
	out := new(UpdateNetworkDeviceInfoResponse)
	err := c.cc.Invoke(ctx, "/networkService.NetworkService/UpdateNetworkDeviceInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NetworkServiceServer is the server API for NetworkService service.
type NetworkServiceServer interface {
	// 获取网络扫描结果流
	// api请求时将触发ssid扫描更新，该方法在同一时刻多个请求仅处理一次，向所有监听返回同一扫描结果
	// 方法不主动进行更新，但监听用户可获取其它请求中返回的扫描结果
	ListNetworks(*ListNetworksRequest, NetworkService_ListNetworksServer) error
	// 连接至指定网络
	// 连接失败将立即返回错误
	// 若30秒后成功获取状态将返回超时失败
	Connect(context.Context, *ConnectRequest) (*ConnectResponse, error)
	// 获取连接状态流
	// 在连接开始时立即返回当前最新的扫描数据
	// 并持续在网络数据更新时接收新数据
	GetStatus(*GetStatusRequest, NetworkService_GetStatusServer) error
	// 获取网络设备相关信息
	// v1.1.0
	GetNetworkDeviceInfo(context.Context, *GetNetworkDeviceInfoRequest) (*GetNetworkDeviceInfoResponse, error)
	// 修改网络设备相关信息
	// v1.1.0
	UpdateNetworkDeviceInfo(context.Context, *UpdateNetworkDeviceInfoRequest) (*UpdateNetworkDeviceInfoResponse, error)
}

// UnimplementedNetworkServiceServer can be embedded to have forward compatible implementations.
type UnimplementedNetworkServiceServer struct {
}

func (*UnimplementedNetworkServiceServer) ListNetworks(req *ListNetworksRequest, srv NetworkService_ListNetworksServer) error {
	return status.Errorf(codes.Unimplemented, "method ListNetworks not implemented")
}
func (*UnimplementedNetworkServiceServer) Connect(ctx context.Context, req *ConnectRequest) (*ConnectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (*UnimplementedNetworkServiceServer) GetStatus(req *GetStatusRequest, srv NetworkService_GetStatusServer) error {
	return status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (*UnimplementedNetworkServiceServer) GetNetworkDeviceInfo(ctx context.Context, req *GetNetworkDeviceInfoRequest) (*GetNetworkDeviceInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNetworkDeviceInfo not implemented")
}
func (*UnimplementedNetworkServiceServer) UpdateNetworkDeviceInfo(ctx context.Context, req *UpdateNetworkDeviceInfoRequest) (*UpdateNetworkDeviceInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNetworkDeviceInfo not implemented")
}

func RegisterNetworkServiceServer(s *grpc.Server, srv NetworkServiceServer) {
	s.RegisterService(&_NetworkService_serviceDesc, srv)
}

func _NetworkService_ListNetworks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListNetworksRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NetworkServiceServer).ListNetworks(m, &networkServiceListNetworksServer{stream})
}

type NetworkService_ListNetworksServer interface {
	Send(*ListNetworksResponse) error
	grpc.ServerStream
}

type networkServiceListNetworksServer struct {
	grpc.ServerStream
}

func (x *networkServiceListNetworksServer) Send(m *ListNetworksResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _NetworkService_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/networkService.NetworkService/Connect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).Connect(ctx, req.(*ConnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkService_GetStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetStatusRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NetworkServiceServer).GetStatus(m, &networkServiceGetStatusServer{stream})
}

type NetworkService_GetStatusServer interface {
	Send(*GetStatusResponse) error
	grpc.ServerStream
}

type networkServiceGetStatusServer struct {
	grpc.ServerStream
}

func (x *networkServiceGetStatusServer) Send(m *GetStatusResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _NetworkService_GetNetworkDeviceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNetworkDeviceInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).GetNetworkDeviceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/networkService.NetworkService/GetNetworkDeviceInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).GetNetworkDeviceInfo(ctx, req.(*GetNetworkDeviceInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkService_UpdateNetworkDeviceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNetworkDeviceInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).UpdateNetworkDeviceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/networkService.NetworkService/UpdateNetworkDeviceInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).UpdateNetworkDeviceInfo(ctx, req.(*UpdateNetworkDeviceInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NetworkService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "networkService.NetworkService",
	HandlerType: (*NetworkServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Connect",
			Handler:    _NetworkService_Connect_Handler,
		},
		{
			MethodName: "GetNetworkDeviceInfo",
			Handler:    _NetworkService_GetNetworkDeviceInfo_Handler,
		},
		{
			MethodName: "UpdateNetworkDeviceInfo",
			Handler:    _NetworkService_UpdateNetworkDeviceInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListNetworks",
			Handler:       _NetworkService_ListNetworks_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetStatus",
			Handler:       _NetworkService_GetStatus_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "network.proto",
}
