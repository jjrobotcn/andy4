<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: speech.proto

namespace SpeechService;

use UnexpectedValueException;

/**
 * 错误类型
 *
 * Protobuf type <code>speechService.ErrorType</code>
 */
class ErrorType
{
    /**
     * Generated from protobuf enum <code>UNKNOWN_ERROR_TYPE = 0;</code>
     */
    const UNKNOWN_ERROR_TYPE = 0;
    /**
     * 超时
     *
     * Generated from protobuf enum <code>ERR_TIMEOUT = 1;</code>
     */
    const ERR_TIMEOUT = 1;
    /**
     * 参数错误
     *
     * Generated from protobuf enum <code>ERR_PARAMS = 2;</code>
     */
    const ERR_PARAMS = 2;
    /**
     * 授权错误
     *
     * Generated from protobuf enum <code>ERR_AUTH = 3;</code>
     */
    const ERR_AUTH = 3;
    /**
     * 网络错误
     *
     * Generated from protobuf enum <code>ERR_NETWORK = 4;</code>
     */
    const ERR_NETWORK = 4;
    /**
     * 未就绪错误
     *
     * Generated from protobuf enum <code>ERR_NOT_READY = 5;</code>
     */
    const ERR_NOT_READY = 5;
    /**
     * 配置错误
     *
     * Generated from protobuf enum <code>ERR_CONFIG = 6;</code>
     */
    const ERR_CONFIG = 6;

    private static $valueToName = [
        self::UNKNOWN_ERROR_TYPE => 'UNKNOWN_ERROR_TYPE',
        self::ERR_TIMEOUT => 'ERR_TIMEOUT',
        self::ERR_PARAMS => 'ERR_PARAMS',
        self::ERR_AUTH => 'ERR_AUTH',
        self::ERR_NETWORK => 'ERR_NETWORK',
        self::ERR_NOT_READY => 'ERR_NOT_READY',
        self::ERR_CONFIG => 'ERR_CONFIG',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

