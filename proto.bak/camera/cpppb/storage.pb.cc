// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: storage.proto

#include "storage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace cameraService {
class ListDatesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListDatesRequest> _instance;
} _ListDatesRequest_default_instance_;
class ListDatesResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListDatesResponse> _instance;
} _ListDatesResponse_default_instance_;
class ListVideosRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListVideosRequest> _instance;
} _ListVideosRequest_default_instance_;
class ListVideosResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListVideosResponse> _instance;
} _ListVideosResponse_default_instance_;
class GetVideoFileRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetVideoFileRequest> _instance;
} _GetVideoFileRequest_default_instance_;
class GetVideoFileResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetVideoFileResponse> _instance;
} _GetVideoFileResponse_default_instance_;
class DeleteVideoFilesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteVideoFilesRequest> _instance;
} _DeleteVideoFilesRequest_default_instance_;
class DeleteVideoFilesResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteVideoFilesResponse> _instance;
} _DeleteVideoFilesResponse_default_instance_;
}  // namespace cameraService
static void InitDefaultsscc_info_DeleteVideoFilesRequest_storage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cameraService::_DeleteVideoFilesRequest_default_instance_;
    new (ptr) ::cameraService::DeleteVideoFilesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cameraService::DeleteVideoFilesRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteVideoFilesRequest_storage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DeleteVideoFilesRequest_storage_2eproto}, {}};

static void InitDefaultsscc_info_DeleteVideoFilesResponse_storage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cameraService::_DeleteVideoFilesResponse_default_instance_;
    new (ptr) ::cameraService::DeleteVideoFilesResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cameraService::DeleteVideoFilesResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteVideoFilesResponse_storage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DeleteVideoFilesResponse_storage_2eproto}, {}};

static void InitDefaultsscc_info_GetVideoFileRequest_storage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cameraService::_GetVideoFileRequest_default_instance_;
    new (ptr) ::cameraService::GetVideoFileRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cameraService::GetVideoFileRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetVideoFileRequest_storage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GetVideoFileRequest_storage_2eproto}, {}};

static void InitDefaultsscc_info_GetVideoFileResponse_storage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cameraService::_GetVideoFileResponse_default_instance_;
    new (ptr) ::cameraService::GetVideoFileResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cameraService::GetVideoFileResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetVideoFileResponse_storage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GetVideoFileResponse_storage_2eproto}, {}};

static void InitDefaultsscc_info_ListDatesRequest_storage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cameraService::_ListDatesRequest_default_instance_;
    new (ptr) ::cameraService::ListDatesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cameraService::ListDatesRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListDatesRequest_storage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ListDatesRequest_storage_2eproto}, {}};

static void InitDefaultsscc_info_ListDatesResponse_storage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cameraService::_ListDatesResponse_default_instance_;
    new (ptr) ::cameraService::ListDatesResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cameraService::ListDatesResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListDatesResponse_storage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ListDatesResponse_storage_2eproto}, {}};

static void InitDefaultsscc_info_ListVideosRequest_storage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cameraService::_ListVideosRequest_default_instance_;
    new (ptr) ::cameraService::ListVideosRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cameraService::ListVideosRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListVideosRequest_storage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ListVideosRequest_storage_2eproto}, {}};

static void InitDefaultsscc_info_ListVideosResponse_storage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cameraService::_ListVideosResponse_default_instance_;
    new (ptr) ::cameraService::ListVideosResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cameraService::ListVideosResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListVideosResponse_storage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ListVideosResponse_storage_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_storage_2eproto[8];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_storage_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_storage_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_storage_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cameraService::ListDatesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cameraService::ListDatesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cameraService::ListDatesResponse, dates_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cameraService::ListVideosRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cameraService::ListVideosRequest, start_),
  PROTOBUF_FIELD_OFFSET(::cameraService::ListVideosRequest, end_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cameraService::ListVideosResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cameraService::ListVideosResponse, videos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cameraService::GetVideoFileRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cameraService::GetVideoFileRequest, video_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cameraService::GetVideoFileResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cameraService::GetVideoFileResponse, chunk_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cameraService::DeleteVideoFilesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cameraService::DeleteVideoFilesRequest, videos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cameraService::DeleteVideoFilesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::cameraService::ListDatesRequest)},
  { 5, -1, sizeof(::cameraService::ListDatesResponse)},
  { 11, -1, sizeof(::cameraService::ListVideosRequest)},
  { 18, -1, sizeof(::cameraService::ListVideosResponse)},
  { 24, -1, sizeof(::cameraService::GetVideoFileRequest)},
  { 30, -1, sizeof(::cameraService::GetVideoFileResponse)},
  { 36, -1, sizeof(::cameraService::DeleteVideoFilesRequest)},
  { 42, -1, sizeof(::cameraService::DeleteVideoFilesResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cameraService::_ListDatesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cameraService::_ListDatesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cameraService::_ListVideosRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cameraService::_ListVideosResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cameraService::_GetVideoFileRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cameraService::_GetVideoFileResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cameraService::_DeleteVideoFilesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cameraService::_DeleteVideoFilesResponse_default_instance_),
};

const char descriptor_table_protodef_storage_2eproto[] =
  "\n\rstorage.proto\022\rcameraService\032\034google/a"
  "pi/annotations.proto\"\022\n\020ListDatesRequest"
  "\"\"\n\021ListDatesResponse\022\r\n\005dates\030\001 \003(\t\"/\n\021"
  "ListVideosRequest\022\r\n\005start\030\001 \001(\t\022\013\n\003end\030"
  "\002 \001(\t\"$\n\022ListVideosResponse\022\016\n\006videos\030\001 "
  "\003(\t\"$\n\023GetVideoFileRequest\022\r\n\005video\030\001 \001("
  "\t\"%\n\024GetVideoFileResponse\022\r\n\005chunk\030\001 \001(\014"
  "\")\n\027DeleteVideoFilesRequest\022\016\n\006videos\030\001 "
  "\003(\t\"\032\n\030DeleteVideoFilesResponse2\222\004\n\007Stor"
  "age\022t\n\tListDates\022\037.cameraService.ListDat"
  "esRequest\032 .cameraService.ListDatesRespo"
  "nse\"$\202\323\344\223\002\036\022\034/api/v2/camera/storage/date"
  "s\022\234\001\n\nListVideos\022 .cameraService.ListVid"
  "eosRequest\032!.cameraService.ListVideosRes"
  "ponse\"I\202\323\344\223\002C\022\035/api/v2/camera/storage/vi"
  "deosZ\"\"\035/api/v1/camera/storage/videos:\001*"
  "\022[\n\014GetVideoFile\022\".cameraService.GetVide"
  "oFileRequest\032#.cameraService.GetVideoFil"
  "eResponse\"\0000\001\022\224\001\n\020DeleteVideoFiles\022&.cam"
  "eraService.DeleteVideoFilesRequest\032\'.cam"
  "eraService.DeleteVideoFilesResponse\"/\202\323\344"
  "\223\002)\"$/api/v2/camera/storage/videos/delet"
  "e:\001*b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_storage_2eproto_deps[1] = {
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_storage_2eproto_sccs[8] = {
  &scc_info_DeleteVideoFilesRequest_storage_2eproto.base,
  &scc_info_DeleteVideoFilesResponse_storage_2eproto.base,
  &scc_info_GetVideoFileRequest_storage_2eproto.base,
  &scc_info_GetVideoFileResponse_storage_2eproto.base,
  &scc_info_ListDatesRequest_storage_2eproto.base,
  &scc_info_ListDatesResponse_storage_2eproto.base,
  &scc_info_ListVideosRequest_storage_2eproto.base,
  &scc_info_ListVideosResponse_storage_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_storage_2eproto_once;
static bool descriptor_table_storage_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_storage_2eproto = {
  &descriptor_table_storage_2eproto_initialized, descriptor_table_protodef_storage_2eproto, "storage.proto", 892,
  &descriptor_table_storage_2eproto_once, descriptor_table_storage_2eproto_sccs, descriptor_table_storage_2eproto_deps, 8, 1,
  schemas, file_default_instances, TableStruct_storage_2eproto::offsets,
  file_level_metadata_storage_2eproto, 8, file_level_enum_descriptors_storage_2eproto, file_level_service_descriptors_storage_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_storage_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_storage_2eproto), true);
namespace cameraService {

// ===================================================================

void ListDatesRequest::InitAsDefaultInstance() {
}
class ListDatesRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListDatesRequest::ListDatesRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cameraService.ListDatesRequest)
}
ListDatesRequest::ListDatesRequest(const ListDatesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cameraService.ListDatesRequest)
}

void ListDatesRequest::SharedCtor() {
}

ListDatesRequest::~ListDatesRequest() {
  // @@protoc_insertion_point(destructor:cameraService.ListDatesRequest)
  SharedDtor();
}

void ListDatesRequest::SharedDtor() {
}

void ListDatesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListDatesRequest& ListDatesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListDatesRequest_storage_2eproto.base);
  return *internal_default_instance();
}


void ListDatesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cameraService.ListDatesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ListDatesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ListDatesRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:cameraService.ListDatesRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:cameraService.ListDatesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cameraService.ListDatesRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ListDatesRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cameraService.ListDatesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cameraService.ListDatesRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* ListDatesRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cameraService.ListDatesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cameraService.ListDatesRequest)
  return target;
}

size_t ListDatesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cameraService.ListDatesRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListDatesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cameraService.ListDatesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListDatesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListDatesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cameraService.ListDatesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cameraService.ListDatesRequest)
    MergeFrom(*source);
  }
}

void ListDatesRequest::MergeFrom(const ListDatesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cameraService.ListDatesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ListDatesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cameraService.ListDatesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListDatesRequest::CopyFrom(const ListDatesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cameraService.ListDatesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListDatesRequest::IsInitialized() const {
  return true;
}

void ListDatesRequest::Swap(ListDatesRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListDatesRequest::InternalSwap(ListDatesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListDatesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListDatesResponse::InitAsDefaultInstance() {
}
class ListDatesResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListDatesResponse::kDatesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListDatesResponse::ListDatesResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cameraService.ListDatesResponse)
}
ListDatesResponse::ListDatesResponse(const ListDatesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      dates_(from.dates_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cameraService.ListDatesResponse)
}

void ListDatesResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListDatesResponse_storage_2eproto.base);
}

ListDatesResponse::~ListDatesResponse() {
  // @@protoc_insertion_point(destructor:cameraService.ListDatesResponse)
  SharedDtor();
}

void ListDatesResponse::SharedDtor() {
}

void ListDatesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListDatesResponse& ListDatesResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListDatesResponse_storage_2eproto.base);
  return *internal_default_instance();
}


void ListDatesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cameraService.ListDatesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dates_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ListDatesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string dates = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_dates(), ptr, ctx, "cameraService.ListDatesResponse.dates");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ListDatesResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:cameraService.ListDatesResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string dates = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_dates()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->dates(this->dates_size() - 1).data(),
            static_cast<int>(this->dates(this->dates_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "cameraService.ListDatesResponse.dates"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cameraService.ListDatesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cameraService.ListDatesResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ListDatesResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cameraService.ListDatesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string dates = 1;
  for (int i = 0, n = this->dates_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->dates(i).data(), static_cast<int>(this->dates(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cameraService.ListDatesResponse.dates");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      1, this->dates(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cameraService.ListDatesResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* ListDatesResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cameraService.ListDatesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string dates = 1;
  for (int i = 0, n = this->dates_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->dates(i).data(), static_cast<int>(this->dates(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cameraService.ListDatesResponse.dates");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(1, this->dates(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cameraService.ListDatesResponse)
  return target;
}

size_t ListDatesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cameraService.ListDatesResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string dates = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->dates_size());
  for (int i = 0, n = this->dates_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->dates(i));
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListDatesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cameraService.ListDatesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListDatesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListDatesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cameraService.ListDatesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cameraService.ListDatesResponse)
    MergeFrom(*source);
  }
}

void ListDatesResponse::MergeFrom(const ListDatesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cameraService.ListDatesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dates_.MergeFrom(from.dates_);
}

void ListDatesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cameraService.ListDatesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListDatesResponse::CopyFrom(const ListDatesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cameraService.ListDatesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListDatesResponse::IsInitialized() const {
  return true;
}

void ListDatesResponse::Swap(ListDatesResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListDatesResponse::InternalSwap(ListDatesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  dates_.InternalSwap(CastToBase(&other->dates_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListDatesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListVideosRequest::InitAsDefaultInstance() {
}
class ListVideosRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListVideosRequest::kStartFieldNumber;
const int ListVideosRequest::kEndFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListVideosRequest::ListVideosRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cameraService.ListVideosRequest)
}
ListVideosRequest::ListVideosRequest(const ListVideosRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  start_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.start().size() > 0) {
    start_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.start_);
  }
  end_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.end().size() > 0) {
    end_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.end_);
  }
  // @@protoc_insertion_point(copy_constructor:cameraService.ListVideosRequest)
}

void ListVideosRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListVideosRequest_storage_2eproto.base);
  start_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  end_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ListVideosRequest::~ListVideosRequest() {
  // @@protoc_insertion_point(destructor:cameraService.ListVideosRequest)
  SharedDtor();
}

void ListVideosRequest::SharedDtor() {
  start_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  end_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListVideosRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListVideosRequest& ListVideosRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListVideosRequest_storage_2eproto.base);
  return *internal_default_instance();
}


void ListVideosRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cameraService.ListVideosRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  start_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  end_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ListVideosRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string start = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_start(), ptr, ctx, "cameraService.ListVideosRequest.start");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string end = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_end(), ptr, ctx, "cameraService.ListVideosRequest.end");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ListVideosRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:cameraService.ListVideosRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string start = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_start()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->start().data(), static_cast<int>(this->start().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "cameraService.ListVideosRequest.start"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string end = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_end()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->end().data(), static_cast<int>(this->end().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "cameraService.ListVideosRequest.end"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cameraService.ListVideosRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cameraService.ListVideosRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ListVideosRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cameraService.ListVideosRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string start = 1;
  if (this->start().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->start().data(), static_cast<int>(this->start().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cameraService.ListVideosRequest.start");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->start(), output);
  }

  // string end = 2;
  if (this->end().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->end().data(), static_cast<int>(this->end().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cameraService.ListVideosRequest.end");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->end(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cameraService.ListVideosRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* ListVideosRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cameraService.ListVideosRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string start = 1;
  if (this->start().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->start().data(), static_cast<int>(this->start().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cameraService.ListVideosRequest.start");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->start(), target);
  }

  // string end = 2;
  if (this->end().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->end().data(), static_cast<int>(this->end().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cameraService.ListVideosRequest.end");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->end(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cameraService.ListVideosRequest)
  return target;
}

size_t ListVideosRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cameraService.ListVideosRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string start = 1;
  if (this->start().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->start());
  }

  // string end = 2;
  if (this->end().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->end());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListVideosRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cameraService.ListVideosRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListVideosRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListVideosRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cameraService.ListVideosRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cameraService.ListVideosRequest)
    MergeFrom(*source);
  }
}

void ListVideosRequest::MergeFrom(const ListVideosRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cameraService.ListVideosRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.start().size() > 0) {

    start_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.start_);
  }
  if (from.end().size() > 0) {

    end_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.end_);
  }
}

void ListVideosRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cameraService.ListVideosRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListVideosRequest::CopyFrom(const ListVideosRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cameraService.ListVideosRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListVideosRequest::IsInitialized() const {
  return true;
}

void ListVideosRequest::Swap(ListVideosRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListVideosRequest::InternalSwap(ListVideosRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  start_.Swap(&other->start_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  end_.Swap(&other->end_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ListVideosRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListVideosResponse::InitAsDefaultInstance() {
}
class ListVideosResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListVideosResponse::kVideosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListVideosResponse::ListVideosResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cameraService.ListVideosResponse)
}
ListVideosResponse::ListVideosResponse(const ListVideosResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      videos_(from.videos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cameraService.ListVideosResponse)
}

void ListVideosResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListVideosResponse_storage_2eproto.base);
}

ListVideosResponse::~ListVideosResponse() {
  // @@protoc_insertion_point(destructor:cameraService.ListVideosResponse)
  SharedDtor();
}

void ListVideosResponse::SharedDtor() {
}

void ListVideosResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListVideosResponse& ListVideosResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListVideosResponse_storage_2eproto.base);
  return *internal_default_instance();
}


void ListVideosResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cameraService.ListVideosResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  videos_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ListVideosResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string videos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_videos(), ptr, ctx, "cameraService.ListVideosResponse.videos");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ListVideosResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:cameraService.ListVideosResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string videos = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_videos()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->videos(this->videos_size() - 1).data(),
            static_cast<int>(this->videos(this->videos_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "cameraService.ListVideosResponse.videos"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cameraService.ListVideosResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cameraService.ListVideosResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ListVideosResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cameraService.ListVideosResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string videos = 1;
  for (int i = 0, n = this->videos_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->videos(i).data(), static_cast<int>(this->videos(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cameraService.ListVideosResponse.videos");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      1, this->videos(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cameraService.ListVideosResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* ListVideosResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cameraService.ListVideosResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string videos = 1;
  for (int i = 0, n = this->videos_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->videos(i).data(), static_cast<int>(this->videos(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cameraService.ListVideosResponse.videos");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(1, this->videos(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cameraService.ListVideosResponse)
  return target;
}

size_t ListVideosResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cameraService.ListVideosResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string videos = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->videos_size());
  for (int i = 0, n = this->videos_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->videos(i));
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListVideosResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cameraService.ListVideosResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListVideosResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListVideosResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cameraService.ListVideosResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cameraService.ListVideosResponse)
    MergeFrom(*source);
  }
}

void ListVideosResponse::MergeFrom(const ListVideosResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cameraService.ListVideosResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  videos_.MergeFrom(from.videos_);
}

void ListVideosResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cameraService.ListVideosResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListVideosResponse::CopyFrom(const ListVideosResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cameraService.ListVideosResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListVideosResponse::IsInitialized() const {
  return true;
}

void ListVideosResponse::Swap(ListVideosResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListVideosResponse::InternalSwap(ListVideosResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  videos_.InternalSwap(CastToBase(&other->videos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListVideosResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetVideoFileRequest::InitAsDefaultInstance() {
}
class GetVideoFileRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetVideoFileRequest::kVideoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetVideoFileRequest::GetVideoFileRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cameraService.GetVideoFileRequest)
}
GetVideoFileRequest::GetVideoFileRequest(const GetVideoFileRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  video_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.video().size() > 0) {
    video_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.video_);
  }
  // @@protoc_insertion_point(copy_constructor:cameraService.GetVideoFileRequest)
}

void GetVideoFileRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetVideoFileRequest_storage_2eproto.base);
  video_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetVideoFileRequest::~GetVideoFileRequest() {
  // @@protoc_insertion_point(destructor:cameraService.GetVideoFileRequest)
  SharedDtor();
}

void GetVideoFileRequest::SharedDtor() {
  video_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetVideoFileRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetVideoFileRequest& GetVideoFileRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetVideoFileRequest_storage_2eproto.base);
  return *internal_default_instance();
}


void GetVideoFileRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cameraService.GetVideoFileRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  video_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetVideoFileRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string video = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_video(), ptr, ctx, "cameraService.GetVideoFileRequest.video");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetVideoFileRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:cameraService.GetVideoFileRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string video = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_video()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->video().data(), static_cast<int>(this->video().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "cameraService.GetVideoFileRequest.video"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cameraService.GetVideoFileRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cameraService.GetVideoFileRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetVideoFileRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cameraService.GetVideoFileRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string video = 1;
  if (this->video().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->video().data(), static_cast<int>(this->video().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cameraService.GetVideoFileRequest.video");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->video(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cameraService.GetVideoFileRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetVideoFileRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cameraService.GetVideoFileRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string video = 1;
  if (this->video().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->video().data(), static_cast<int>(this->video().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cameraService.GetVideoFileRequest.video");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->video(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cameraService.GetVideoFileRequest)
  return target;
}

size_t GetVideoFileRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cameraService.GetVideoFileRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string video = 1;
  if (this->video().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->video());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetVideoFileRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cameraService.GetVideoFileRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetVideoFileRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetVideoFileRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cameraService.GetVideoFileRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cameraService.GetVideoFileRequest)
    MergeFrom(*source);
  }
}

void GetVideoFileRequest::MergeFrom(const GetVideoFileRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cameraService.GetVideoFileRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.video().size() > 0) {

    video_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.video_);
  }
}

void GetVideoFileRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cameraService.GetVideoFileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetVideoFileRequest::CopyFrom(const GetVideoFileRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cameraService.GetVideoFileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetVideoFileRequest::IsInitialized() const {
  return true;
}

void GetVideoFileRequest::Swap(GetVideoFileRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetVideoFileRequest::InternalSwap(GetVideoFileRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  video_.Swap(&other->video_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetVideoFileRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetVideoFileResponse::InitAsDefaultInstance() {
}
class GetVideoFileResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetVideoFileResponse::kChunkFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetVideoFileResponse::GetVideoFileResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cameraService.GetVideoFileResponse)
}
GetVideoFileResponse::GetVideoFileResponse(const GetVideoFileResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  chunk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.chunk().size() > 0) {
    chunk_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.chunk_);
  }
  // @@protoc_insertion_point(copy_constructor:cameraService.GetVideoFileResponse)
}

void GetVideoFileResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetVideoFileResponse_storage_2eproto.base);
  chunk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetVideoFileResponse::~GetVideoFileResponse() {
  // @@protoc_insertion_point(destructor:cameraService.GetVideoFileResponse)
  SharedDtor();
}

void GetVideoFileResponse::SharedDtor() {
  chunk_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetVideoFileResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetVideoFileResponse& GetVideoFileResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetVideoFileResponse_storage_2eproto.base);
  return *internal_default_instance();
}


void GetVideoFileResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cameraService.GetVideoFileResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chunk_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetVideoFileResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes chunk = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_chunk(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetVideoFileResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:cameraService.GetVideoFileResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes chunk = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_chunk()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cameraService.GetVideoFileResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cameraService.GetVideoFileResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetVideoFileResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cameraService.GetVideoFileResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes chunk = 1;
  if (this->chunk().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->chunk(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cameraService.GetVideoFileResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetVideoFileResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cameraService.GetVideoFileResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes chunk = 1;
  if (this->chunk().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->chunk(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cameraService.GetVideoFileResponse)
  return target;
}

size_t GetVideoFileResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cameraService.GetVideoFileResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes chunk = 1;
  if (this->chunk().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->chunk());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetVideoFileResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cameraService.GetVideoFileResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetVideoFileResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetVideoFileResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cameraService.GetVideoFileResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cameraService.GetVideoFileResponse)
    MergeFrom(*source);
  }
}

void GetVideoFileResponse::MergeFrom(const GetVideoFileResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cameraService.GetVideoFileResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chunk().size() > 0) {

    chunk_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.chunk_);
  }
}

void GetVideoFileResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cameraService.GetVideoFileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetVideoFileResponse::CopyFrom(const GetVideoFileResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cameraService.GetVideoFileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetVideoFileResponse::IsInitialized() const {
  return true;
}

void GetVideoFileResponse::Swap(GetVideoFileResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetVideoFileResponse::InternalSwap(GetVideoFileResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  chunk_.Swap(&other->chunk_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetVideoFileResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteVideoFilesRequest::InitAsDefaultInstance() {
}
class DeleteVideoFilesRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeleteVideoFilesRequest::kVideosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteVideoFilesRequest::DeleteVideoFilesRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cameraService.DeleteVideoFilesRequest)
}
DeleteVideoFilesRequest::DeleteVideoFilesRequest(const DeleteVideoFilesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      videos_(from.videos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cameraService.DeleteVideoFilesRequest)
}

void DeleteVideoFilesRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteVideoFilesRequest_storage_2eproto.base);
}

DeleteVideoFilesRequest::~DeleteVideoFilesRequest() {
  // @@protoc_insertion_point(destructor:cameraService.DeleteVideoFilesRequest)
  SharedDtor();
}

void DeleteVideoFilesRequest::SharedDtor() {
}

void DeleteVideoFilesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteVideoFilesRequest& DeleteVideoFilesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteVideoFilesRequest_storage_2eproto.base);
  return *internal_default_instance();
}


void DeleteVideoFilesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cameraService.DeleteVideoFilesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  videos_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeleteVideoFilesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string videos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_videos(), ptr, ctx, "cameraService.DeleteVideoFilesRequest.videos");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeleteVideoFilesRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:cameraService.DeleteVideoFilesRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string videos = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_videos()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->videos(this->videos_size() - 1).data(),
            static_cast<int>(this->videos(this->videos_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "cameraService.DeleteVideoFilesRequest.videos"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cameraService.DeleteVideoFilesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cameraService.DeleteVideoFilesRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeleteVideoFilesRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cameraService.DeleteVideoFilesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string videos = 1;
  for (int i = 0, n = this->videos_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->videos(i).data(), static_cast<int>(this->videos(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cameraService.DeleteVideoFilesRequest.videos");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      1, this->videos(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cameraService.DeleteVideoFilesRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteVideoFilesRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cameraService.DeleteVideoFilesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string videos = 1;
  for (int i = 0, n = this->videos_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->videos(i).data(), static_cast<int>(this->videos(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cameraService.DeleteVideoFilesRequest.videos");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(1, this->videos(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cameraService.DeleteVideoFilesRequest)
  return target;
}

size_t DeleteVideoFilesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cameraService.DeleteVideoFilesRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string videos = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->videos_size());
  for (int i = 0, n = this->videos_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->videos(i));
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteVideoFilesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cameraService.DeleteVideoFilesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteVideoFilesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteVideoFilesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cameraService.DeleteVideoFilesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cameraService.DeleteVideoFilesRequest)
    MergeFrom(*source);
  }
}

void DeleteVideoFilesRequest::MergeFrom(const DeleteVideoFilesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cameraService.DeleteVideoFilesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  videos_.MergeFrom(from.videos_);
}

void DeleteVideoFilesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cameraService.DeleteVideoFilesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteVideoFilesRequest::CopyFrom(const DeleteVideoFilesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cameraService.DeleteVideoFilesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteVideoFilesRequest::IsInitialized() const {
  return true;
}

void DeleteVideoFilesRequest::Swap(DeleteVideoFilesRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteVideoFilesRequest::InternalSwap(DeleteVideoFilesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  videos_.InternalSwap(CastToBase(&other->videos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteVideoFilesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteVideoFilesResponse::InitAsDefaultInstance() {
}
class DeleteVideoFilesResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteVideoFilesResponse::DeleteVideoFilesResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cameraService.DeleteVideoFilesResponse)
}
DeleteVideoFilesResponse::DeleteVideoFilesResponse(const DeleteVideoFilesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cameraService.DeleteVideoFilesResponse)
}

void DeleteVideoFilesResponse::SharedCtor() {
}

DeleteVideoFilesResponse::~DeleteVideoFilesResponse() {
  // @@protoc_insertion_point(destructor:cameraService.DeleteVideoFilesResponse)
  SharedDtor();
}

void DeleteVideoFilesResponse::SharedDtor() {
}

void DeleteVideoFilesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteVideoFilesResponse& DeleteVideoFilesResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteVideoFilesResponse_storage_2eproto.base);
  return *internal_default_instance();
}


void DeleteVideoFilesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cameraService.DeleteVideoFilesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeleteVideoFilesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeleteVideoFilesResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:cameraService.DeleteVideoFilesResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:cameraService.DeleteVideoFilesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cameraService.DeleteVideoFilesResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeleteVideoFilesResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cameraService.DeleteVideoFilesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cameraService.DeleteVideoFilesResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteVideoFilesResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cameraService.DeleteVideoFilesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cameraService.DeleteVideoFilesResponse)
  return target;
}

size_t DeleteVideoFilesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cameraService.DeleteVideoFilesResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteVideoFilesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cameraService.DeleteVideoFilesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteVideoFilesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteVideoFilesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cameraService.DeleteVideoFilesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cameraService.DeleteVideoFilesResponse)
    MergeFrom(*source);
  }
}

void DeleteVideoFilesResponse::MergeFrom(const DeleteVideoFilesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cameraService.DeleteVideoFilesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DeleteVideoFilesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cameraService.DeleteVideoFilesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteVideoFilesResponse::CopyFrom(const DeleteVideoFilesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cameraService.DeleteVideoFilesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteVideoFilesResponse::IsInitialized() const {
  return true;
}

void DeleteVideoFilesResponse::Swap(DeleteVideoFilesResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteVideoFilesResponse::InternalSwap(DeleteVideoFilesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteVideoFilesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace cameraService
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cameraService::ListDatesRequest* Arena::CreateMaybeMessage< ::cameraService::ListDatesRequest >(Arena* arena) {
  return Arena::CreateInternal< ::cameraService::ListDatesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cameraService::ListDatesResponse* Arena::CreateMaybeMessage< ::cameraService::ListDatesResponse >(Arena* arena) {
  return Arena::CreateInternal< ::cameraService::ListDatesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::cameraService::ListVideosRequest* Arena::CreateMaybeMessage< ::cameraService::ListVideosRequest >(Arena* arena) {
  return Arena::CreateInternal< ::cameraService::ListVideosRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cameraService::ListVideosResponse* Arena::CreateMaybeMessage< ::cameraService::ListVideosResponse >(Arena* arena) {
  return Arena::CreateInternal< ::cameraService::ListVideosResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::cameraService::GetVideoFileRequest* Arena::CreateMaybeMessage< ::cameraService::GetVideoFileRequest >(Arena* arena) {
  return Arena::CreateInternal< ::cameraService::GetVideoFileRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cameraService::GetVideoFileResponse* Arena::CreateMaybeMessage< ::cameraService::GetVideoFileResponse >(Arena* arena) {
  return Arena::CreateInternal< ::cameraService::GetVideoFileResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::cameraService::DeleteVideoFilesRequest* Arena::CreateMaybeMessage< ::cameraService::DeleteVideoFilesRequest >(Arena* arena) {
  return Arena::CreateInternal< ::cameraService::DeleteVideoFilesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cameraService::DeleteVideoFilesResponse* Arena::CreateMaybeMessage< ::cameraService::DeleteVideoFilesResponse >(Arena* arena) {
  return Arena::CreateInternal< ::cameraService::DeleteVideoFilesResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
