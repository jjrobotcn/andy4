// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: camera.proto

#include "camera.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace cameraService {
class LiveH264StreamRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LiveH264StreamRequest> _instance;
} _LiveH264StreamRequest_default_instance_;
class LiveH264StreamResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LiveH264StreamResponse> _instance;
} _LiveH264StreamResponse_default_instance_;
class LatestImageRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LatestImageRequest> _instance;
} _LatestImageRequest_default_instance_;
class LatestImageResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LatestImageResponse> _instance;
} _LatestImageResponse_default_instance_;
}  // namespace cameraService
static void InitDefaultsscc_info_LatestImageRequest_camera_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cameraService::_LatestImageRequest_default_instance_;
    new (ptr) ::cameraService::LatestImageRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cameraService::LatestImageRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LatestImageRequest_camera_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_LatestImageRequest_camera_2eproto}, {}};

static void InitDefaultsscc_info_LatestImageResponse_camera_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cameraService::_LatestImageResponse_default_instance_;
    new (ptr) ::cameraService::LatestImageResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cameraService::LatestImageResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LatestImageResponse_camera_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_LatestImageResponse_camera_2eproto}, {}};

static void InitDefaultsscc_info_LiveH264StreamRequest_camera_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cameraService::_LiveH264StreamRequest_default_instance_;
    new (ptr) ::cameraService::LiveH264StreamRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cameraService::LiveH264StreamRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LiveH264StreamRequest_camera_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_LiveH264StreamRequest_camera_2eproto}, {}};

static void InitDefaultsscc_info_LiveH264StreamResponse_camera_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cameraService::_LiveH264StreamResponse_default_instance_;
    new (ptr) ::cameraService::LiveH264StreamResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cameraService::LiveH264StreamResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LiveH264StreamResponse_camera_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_LiveH264StreamResponse_camera_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_camera_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_camera_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_camera_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_camera_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cameraService::LiveH264StreamRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cameraService::LiveH264StreamResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cameraService::LiveH264StreamResponse, frame_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cameraService::LatestImageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cameraService::LatestImageResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cameraService::LatestImageResponse, time_),
  PROTOBUF_FIELD_OFFSET(::cameraService::LatestImageResponse, image_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::cameraService::LiveH264StreamRequest)},
  { 5, -1, sizeof(::cameraService::LiveH264StreamResponse)},
  { 11, -1, sizeof(::cameraService::LatestImageRequest)},
  { 16, -1, sizeof(::cameraService::LatestImageResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cameraService::_LiveH264StreamRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cameraService::_LiveH264StreamResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cameraService::_LatestImageRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cameraService::_LatestImageResponse_default_instance_),
};

const char descriptor_table_protodef_camera_2eproto[] =
  "\n\014camera.proto\022\rcameraService\032\034google/ap"
  "i/annotations.proto\"\027\n\025LiveH264StreamReq"
  "uest\"\'\n\026LiveH264StreamResponse\022\r\n\005frame\030"
  "\001 \001(\014\"\024\n\022LatestImageRequest\"2\n\023LatestIma"
  "geResponse\022\014\n\004time\030\001 \001(\t\022\r\n\005image\030\002 \001(\0142"
  "\346\001\n\rCameraService\022a\n\016LiveH264Stream\022$.ca"
  "meraService.LiveH264StreamRequest\032%.came"
  "raService.LiveH264StreamResponse\"\0000\001\022r\n\013"
  "LatestImage\022!.cameraService.LatestImageR"
  "equest\032\".cameraService.LatestImageRespon"
  "se\"\034\202\323\344\223\002\026\022\024/api/v2/camera/imageb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_camera_2eproto_deps[1] = {
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_camera_2eproto_sccs[4] = {
  &scc_info_LatestImageRequest_camera_2eproto.base,
  &scc_info_LatestImageResponse_camera_2eproto.base,
  &scc_info_LiveH264StreamRequest_camera_2eproto.base,
  &scc_info_LiveH264StreamResponse_camera_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_camera_2eproto_once;
static bool descriptor_table_camera_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_camera_2eproto = {
  &descriptor_table_camera_2eproto_initialized, descriptor_table_protodef_camera_2eproto, "camera.proto", 440,
  &descriptor_table_camera_2eproto_once, descriptor_table_camera_2eproto_sccs, descriptor_table_camera_2eproto_deps, 4, 1,
  schemas, file_default_instances, TableStruct_camera_2eproto::offsets,
  file_level_metadata_camera_2eproto, 4, file_level_enum_descriptors_camera_2eproto, file_level_service_descriptors_camera_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_camera_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_camera_2eproto), true);
namespace cameraService {

// ===================================================================

void LiveH264StreamRequest::InitAsDefaultInstance() {
}
class LiveH264StreamRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LiveH264StreamRequest::LiveH264StreamRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cameraService.LiveH264StreamRequest)
}
LiveH264StreamRequest::LiveH264StreamRequest(const LiveH264StreamRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cameraService.LiveH264StreamRequest)
}

void LiveH264StreamRequest::SharedCtor() {
}

LiveH264StreamRequest::~LiveH264StreamRequest() {
  // @@protoc_insertion_point(destructor:cameraService.LiveH264StreamRequest)
  SharedDtor();
}

void LiveH264StreamRequest::SharedDtor() {
}

void LiveH264StreamRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LiveH264StreamRequest& LiveH264StreamRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LiveH264StreamRequest_camera_2eproto.base);
  return *internal_default_instance();
}


void LiveH264StreamRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cameraService.LiveH264StreamRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LiveH264StreamRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LiveH264StreamRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:cameraService.LiveH264StreamRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:cameraService.LiveH264StreamRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cameraService.LiveH264StreamRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LiveH264StreamRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cameraService.LiveH264StreamRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cameraService.LiveH264StreamRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* LiveH264StreamRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cameraService.LiveH264StreamRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cameraService.LiveH264StreamRequest)
  return target;
}

size_t LiveH264StreamRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cameraService.LiveH264StreamRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LiveH264StreamRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cameraService.LiveH264StreamRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LiveH264StreamRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LiveH264StreamRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cameraService.LiveH264StreamRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cameraService.LiveH264StreamRequest)
    MergeFrom(*source);
  }
}

void LiveH264StreamRequest::MergeFrom(const LiveH264StreamRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cameraService.LiveH264StreamRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void LiveH264StreamRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cameraService.LiveH264StreamRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LiveH264StreamRequest::CopyFrom(const LiveH264StreamRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cameraService.LiveH264StreamRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LiveH264StreamRequest::IsInitialized() const {
  return true;
}

void LiveH264StreamRequest::Swap(LiveH264StreamRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LiveH264StreamRequest::InternalSwap(LiveH264StreamRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LiveH264StreamRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LiveH264StreamResponse::InitAsDefaultInstance() {
}
class LiveH264StreamResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LiveH264StreamResponse::kFrameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LiveH264StreamResponse::LiveH264StreamResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cameraService.LiveH264StreamResponse)
}
LiveH264StreamResponse::LiveH264StreamResponse(const LiveH264StreamResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  frame_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.frame().size() > 0) {
    frame_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.frame_);
  }
  // @@protoc_insertion_point(copy_constructor:cameraService.LiveH264StreamResponse)
}

void LiveH264StreamResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LiveH264StreamResponse_camera_2eproto.base);
  frame_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

LiveH264StreamResponse::~LiveH264StreamResponse() {
  // @@protoc_insertion_point(destructor:cameraService.LiveH264StreamResponse)
  SharedDtor();
}

void LiveH264StreamResponse::SharedDtor() {
  frame_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LiveH264StreamResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LiveH264StreamResponse& LiveH264StreamResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LiveH264StreamResponse_camera_2eproto.base);
  return *internal_default_instance();
}


void LiveH264StreamResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cameraService.LiveH264StreamResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  frame_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LiveH264StreamResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes frame = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_frame(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LiveH264StreamResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:cameraService.LiveH264StreamResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes frame = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_frame()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cameraService.LiveH264StreamResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cameraService.LiveH264StreamResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LiveH264StreamResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cameraService.LiveH264StreamResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes frame = 1;
  if (this->frame().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->frame(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cameraService.LiveH264StreamResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* LiveH264StreamResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cameraService.LiveH264StreamResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes frame = 1;
  if (this->frame().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->frame(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cameraService.LiveH264StreamResponse)
  return target;
}

size_t LiveH264StreamResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cameraService.LiveH264StreamResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes frame = 1;
  if (this->frame().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->frame());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LiveH264StreamResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cameraService.LiveH264StreamResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const LiveH264StreamResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LiveH264StreamResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cameraService.LiveH264StreamResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cameraService.LiveH264StreamResponse)
    MergeFrom(*source);
  }
}

void LiveH264StreamResponse::MergeFrom(const LiveH264StreamResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cameraService.LiveH264StreamResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.frame().size() > 0) {

    frame_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.frame_);
  }
}

void LiveH264StreamResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cameraService.LiveH264StreamResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LiveH264StreamResponse::CopyFrom(const LiveH264StreamResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cameraService.LiveH264StreamResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LiveH264StreamResponse::IsInitialized() const {
  return true;
}

void LiveH264StreamResponse::Swap(LiveH264StreamResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LiveH264StreamResponse::InternalSwap(LiveH264StreamResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  frame_.Swap(&other->frame_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata LiveH264StreamResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LatestImageRequest::InitAsDefaultInstance() {
}
class LatestImageRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LatestImageRequest::LatestImageRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cameraService.LatestImageRequest)
}
LatestImageRequest::LatestImageRequest(const LatestImageRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cameraService.LatestImageRequest)
}

void LatestImageRequest::SharedCtor() {
}

LatestImageRequest::~LatestImageRequest() {
  // @@protoc_insertion_point(destructor:cameraService.LatestImageRequest)
  SharedDtor();
}

void LatestImageRequest::SharedDtor() {
}

void LatestImageRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LatestImageRequest& LatestImageRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LatestImageRequest_camera_2eproto.base);
  return *internal_default_instance();
}


void LatestImageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cameraService.LatestImageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LatestImageRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LatestImageRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:cameraService.LatestImageRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:cameraService.LatestImageRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cameraService.LatestImageRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LatestImageRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cameraService.LatestImageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cameraService.LatestImageRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* LatestImageRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cameraService.LatestImageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cameraService.LatestImageRequest)
  return target;
}

size_t LatestImageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cameraService.LatestImageRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LatestImageRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cameraService.LatestImageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LatestImageRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LatestImageRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cameraService.LatestImageRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cameraService.LatestImageRequest)
    MergeFrom(*source);
  }
}

void LatestImageRequest::MergeFrom(const LatestImageRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cameraService.LatestImageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void LatestImageRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cameraService.LatestImageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LatestImageRequest::CopyFrom(const LatestImageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cameraService.LatestImageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LatestImageRequest::IsInitialized() const {
  return true;
}

void LatestImageRequest::Swap(LatestImageRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LatestImageRequest::InternalSwap(LatestImageRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LatestImageRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LatestImageResponse::InitAsDefaultInstance() {
}
class LatestImageResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LatestImageResponse::kTimeFieldNumber;
const int LatestImageResponse::kImageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LatestImageResponse::LatestImageResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cameraService.LatestImageResponse)
}
LatestImageResponse::LatestImageResponse(const LatestImageResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.time().size() > 0) {
    time_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.time_);
  }
  image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.image().size() > 0) {
    image_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.image_);
  }
  // @@protoc_insertion_point(copy_constructor:cameraService.LatestImageResponse)
}

void LatestImageResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LatestImageResponse_camera_2eproto.base);
  time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

LatestImageResponse::~LatestImageResponse() {
  // @@protoc_insertion_point(destructor:cameraService.LatestImageResponse)
  SharedDtor();
}

void LatestImageResponse::SharedDtor() {
  time_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  image_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LatestImageResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LatestImageResponse& LatestImageResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LatestImageResponse_camera_2eproto.base);
  return *internal_default_instance();
}


void LatestImageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cameraService.LatestImageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  time_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  image_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LatestImageResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_time(), ptr, ctx, "cameraService.LatestImageResponse.time");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes image = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_image(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LatestImageResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:cameraService.LatestImageResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string time = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_time()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->time().data(), static_cast<int>(this->time().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "cameraService.LatestImageResponse.time"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes image = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_image()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cameraService.LatestImageResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cameraService.LatestImageResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LatestImageResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cameraService.LatestImageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string time = 1;
  if (this->time().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->time().data(), static_cast<int>(this->time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cameraService.LatestImageResponse.time");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->time(), output);
  }

  // bytes image = 2;
  if (this->image().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->image(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cameraService.LatestImageResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* LatestImageResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cameraService.LatestImageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string time = 1;
  if (this->time().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->time().data(), static_cast<int>(this->time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cameraService.LatestImageResponse.time");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->time(), target);
  }

  // bytes image = 2;
  if (this->image().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->image(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cameraService.LatestImageResponse)
  return target;
}

size_t LatestImageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cameraService.LatestImageResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string time = 1;
  if (this->time().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->time());
  }

  // bytes image = 2;
  if (this->image().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->image());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LatestImageResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cameraService.LatestImageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const LatestImageResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LatestImageResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cameraService.LatestImageResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cameraService.LatestImageResponse)
    MergeFrom(*source);
  }
}

void LatestImageResponse::MergeFrom(const LatestImageResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cameraService.LatestImageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.time().size() > 0) {

    time_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.time_);
  }
  if (from.image().size() > 0) {

    image_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.image_);
  }
}

void LatestImageResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cameraService.LatestImageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LatestImageResponse::CopyFrom(const LatestImageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cameraService.LatestImageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LatestImageResponse::IsInitialized() const {
  return true;
}

void LatestImageResponse::Swap(LatestImageResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LatestImageResponse::InternalSwap(LatestImageResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  time_.Swap(&other->time_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  image_.Swap(&other->image_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata LatestImageResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace cameraService
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cameraService::LiveH264StreamRequest* Arena::CreateMaybeMessage< ::cameraService::LiveH264StreamRequest >(Arena* arena) {
  return Arena::CreateInternal< ::cameraService::LiveH264StreamRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cameraService::LiveH264StreamResponse* Arena::CreateMaybeMessage< ::cameraService::LiveH264StreamResponse >(Arena* arena) {
  return Arena::CreateInternal< ::cameraService::LiveH264StreamResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::cameraService::LatestImageRequest* Arena::CreateMaybeMessage< ::cameraService::LatestImageRequest >(Arena* arena) {
  return Arena::CreateInternal< ::cameraService::LatestImageRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cameraService::LatestImageResponse* Arena::CreateMaybeMessage< ::cameraService::LatestImageResponse >(Arena* arena) {
  return Arena::CreateInternal< ::cameraService::LatestImageResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
