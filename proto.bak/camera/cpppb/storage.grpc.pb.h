// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: storage.proto
#ifndef GRPC_storage_2eproto__INCLUDED
#define GRPC_storage_2eproto__INCLUDED

#include "storage.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc_impl {
class CompletionQueue;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc_impl

namespace grpc {
namespace experimental {
template <typename RequestT, typename ResponseT>
class MessageAllocator;
}  // namespace experimental
}  // namespace grpc

namespace cameraService {

class Storage final {
 public:
  static constexpr char const* service_full_name() {
    return "cameraService.Storage";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // 获取监控视频日期列表
    virtual ::grpc::Status ListDates(::grpc::ClientContext* context, const ::cameraService::ListDatesRequest& request, ::cameraService::ListDatesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cameraService::ListDatesResponse>> AsyncListDates(::grpc::ClientContext* context, const ::cameraService::ListDatesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cameraService::ListDatesResponse>>(AsyncListDatesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cameraService::ListDatesResponse>> PrepareAsyncListDates(::grpc::ClientContext* context, const ::cameraService::ListDatesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cameraService::ListDatesResponse>>(PrepareAsyncListDatesRaw(context, request, cq));
    }
    // 获取监控视频列表
    virtual ::grpc::Status ListVideos(::grpc::ClientContext* context, const ::cameraService::ListVideosRequest& request, ::cameraService::ListVideosResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cameraService::ListVideosResponse>> AsyncListVideos(::grpc::ClientContext* context, const ::cameraService::ListVideosRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cameraService::ListVideosResponse>>(AsyncListVideosRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cameraService::ListVideosResponse>> PrepareAsyncListVideos(::grpc::ClientContext* context, const ::cameraService::ListVideosRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cameraService::ListVideosResponse>>(PrepareAsyncListVideosRaw(context, request, cq));
    }
    // 获取监控视频文件
    std::unique_ptr< ::grpc::ClientReaderInterface< ::cameraService::GetVideoFileResponse>> GetVideoFile(::grpc::ClientContext* context, const ::cameraService::GetVideoFileRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::cameraService::GetVideoFileResponse>>(GetVideoFileRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::cameraService::GetVideoFileResponse>> AsyncGetVideoFile(::grpc::ClientContext* context, const ::cameraService::GetVideoFileRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::cameraService::GetVideoFileResponse>>(AsyncGetVideoFileRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::cameraService::GetVideoFileResponse>> PrepareAsyncGetVideoFile(::grpc::ClientContext* context, const ::cameraService::GetVideoFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::cameraService::GetVideoFileResponse>>(PrepareAsyncGetVideoFileRaw(context, request, cq));
    }
    // 删除监控视频文件
    virtual ::grpc::Status DeleteVideoFiles(::grpc::ClientContext* context, const ::cameraService::DeleteVideoFilesRequest& request, ::cameraService::DeleteVideoFilesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cameraService::DeleteVideoFilesResponse>> AsyncDeleteVideoFiles(::grpc::ClientContext* context, const ::cameraService::DeleteVideoFilesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cameraService::DeleteVideoFilesResponse>>(AsyncDeleteVideoFilesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cameraService::DeleteVideoFilesResponse>> PrepareAsyncDeleteVideoFiles(::grpc::ClientContext* context, const ::cameraService::DeleteVideoFilesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cameraService::DeleteVideoFilesResponse>>(PrepareAsyncDeleteVideoFilesRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // 获取监控视频日期列表
      virtual void ListDates(::grpc::ClientContext* context, const ::cameraService::ListDatesRequest* request, ::cameraService::ListDatesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListDates(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::cameraService::ListDatesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListDates(::grpc::ClientContext* context, const ::cameraService::ListDatesRequest* request, ::cameraService::ListDatesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void ListDates(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::cameraService::ListDatesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // 获取监控视频列表
      virtual void ListVideos(::grpc::ClientContext* context, const ::cameraService::ListVideosRequest* request, ::cameraService::ListVideosResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListVideos(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::cameraService::ListVideosResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListVideos(::grpc::ClientContext* context, const ::cameraService::ListVideosRequest* request, ::cameraService::ListVideosResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void ListVideos(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::cameraService::ListVideosResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // 获取监控视频文件
      virtual void GetVideoFile(::grpc::ClientContext* context, ::cameraService::GetVideoFileRequest* request, ::grpc::experimental::ClientReadReactor< ::cameraService::GetVideoFileResponse>* reactor) = 0;
      // 删除监控视频文件
      virtual void DeleteVideoFiles(::grpc::ClientContext* context, const ::cameraService::DeleteVideoFilesRequest* request, ::cameraService::DeleteVideoFilesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteVideoFiles(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::cameraService::DeleteVideoFilesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteVideoFiles(::grpc::ClientContext* context, const ::cameraService::DeleteVideoFilesRequest* request, ::cameraService::DeleteVideoFilesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void DeleteVideoFiles(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::cameraService::DeleteVideoFilesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cameraService::ListDatesResponse>* AsyncListDatesRaw(::grpc::ClientContext* context, const ::cameraService::ListDatesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cameraService::ListDatesResponse>* PrepareAsyncListDatesRaw(::grpc::ClientContext* context, const ::cameraService::ListDatesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cameraService::ListVideosResponse>* AsyncListVideosRaw(::grpc::ClientContext* context, const ::cameraService::ListVideosRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cameraService::ListVideosResponse>* PrepareAsyncListVideosRaw(::grpc::ClientContext* context, const ::cameraService::ListVideosRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::cameraService::GetVideoFileResponse>* GetVideoFileRaw(::grpc::ClientContext* context, const ::cameraService::GetVideoFileRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::cameraService::GetVideoFileResponse>* AsyncGetVideoFileRaw(::grpc::ClientContext* context, const ::cameraService::GetVideoFileRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::cameraService::GetVideoFileResponse>* PrepareAsyncGetVideoFileRaw(::grpc::ClientContext* context, const ::cameraService::GetVideoFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cameraService::DeleteVideoFilesResponse>* AsyncDeleteVideoFilesRaw(::grpc::ClientContext* context, const ::cameraService::DeleteVideoFilesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cameraService::DeleteVideoFilesResponse>* PrepareAsyncDeleteVideoFilesRaw(::grpc::ClientContext* context, const ::cameraService::DeleteVideoFilesRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status ListDates(::grpc::ClientContext* context, const ::cameraService::ListDatesRequest& request, ::cameraService::ListDatesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cameraService::ListDatesResponse>> AsyncListDates(::grpc::ClientContext* context, const ::cameraService::ListDatesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cameraService::ListDatesResponse>>(AsyncListDatesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cameraService::ListDatesResponse>> PrepareAsyncListDates(::grpc::ClientContext* context, const ::cameraService::ListDatesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cameraService::ListDatesResponse>>(PrepareAsyncListDatesRaw(context, request, cq));
    }
    ::grpc::Status ListVideos(::grpc::ClientContext* context, const ::cameraService::ListVideosRequest& request, ::cameraService::ListVideosResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cameraService::ListVideosResponse>> AsyncListVideos(::grpc::ClientContext* context, const ::cameraService::ListVideosRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cameraService::ListVideosResponse>>(AsyncListVideosRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cameraService::ListVideosResponse>> PrepareAsyncListVideos(::grpc::ClientContext* context, const ::cameraService::ListVideosRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cameraService::ListVideosResponse>>(PrepareAsyncListVideosRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::cameraService::GetVideoFileResponse>> GetVideoFile(::grpc::ClientContext* context, const ::cameraService::GetVideoFileRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::cameraService::GetVideoFileResponse>>(GetVideoFileRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::cameraService::GetVideoFileResponse>> AsyncGetVideoFile(::grpc::ClientContext* context, const ::cameraService::GetVideoFileRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::cameraService::GetVideoFileResponse>>(AsyncGetVideoFileRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::cameraService::GetVideoFileResponse>> PrepareAsyncGetVideoFile(::grpc::ClientContext* context, const ::cameraService::GetVideoFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::cameraService::GetVideoFileResponse>>(PrepareAsyncGetVideoFileRaw(context, request, cq));
    }
    ::grpc::Status DeleteVideoFiles(::grpc::ClientContext* context, const ::cameraService::DeleteVideoFilesRequest& request, ::cameraService::DeleteVideoFilesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cameraService::DeleteVideoFilesResponse>> AsyncDeleteVideoFiles(::grpc::ClientContext* context, const ::cameraService::DeleteVideoFilesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cameraService::DeleteVideoFilesResponse>>(AsyncDeleteVideoFilesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cameraService::DeleteVideoFilesResponse>> PrepareAsyncDeleteVideoFiles(::grpc::ClientContext* context, const ::cameraService::DeleteVideoFilesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cameraService::DeleteVideoFilesResponse>>(PrepareAsyncDeleteVideoFilesRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void ListDates(::grpc::ClientContext* context, const ::cameraService::ListDatesRequest* request, ::cameraService::ListDatesResponse* response, std::function<void(::grpc::Status)>) override;
      void ListDates(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::cameraService::ListDatesResponse* response, std::function<void(::grpc::Status)>) override;
      void ListDates(::grpc::ClientContext* context, const ::cameraService::ListDatesRequest* request, ::cameraService::ListDatesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void ListDates(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::cameraService::ListDatesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void ListVideos(::grpc::ClientContext* context, const ::cameraService::ListVideosRequest* request, ::cameraService::ListVideosResponse* response, std::function<void(::grpc::Status)>) override;
      void ListVideos(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::cameraService::ListVideosResponse* response, std::function<void(::grpc::Status)>) override;
      void ListVideos(::grpc::ClientContext* context, const ::cameraService::ListVideosRequest* request, ::cameraService::ListVideosResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void ListVideos(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::cameraService::ListVideosResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetVideoFile(::grpc::ClientContext* context, ::cameraService::GetVideoFileRequest* request, ::grpc::experimental::ClientReadReactor< ::cameraService::GetVideoFileResponse>* reactor) override;
      void DeleteVideoFiles(::grpc::ClientContext* context, const ::cameraService::DeleteVideoFilesRequest* request, ::cameraService::DeleteVideoFilesResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteVideoFiles(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::cameraService::DeleteVideoFilesResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteVideoFiles(::grpc::ClientContext* context, const ::cameraService::DeleteVideoFilesRequest* request, ::cameraService::DeleteVideoFilesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void DeleteVideoFiles(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::cameraService::DeleteVideoFilesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::cameraService::ListDatesResponse>* AsyncListDatesRaw(::grpc::ClientContext* context, const ::cameraService::ListDatesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cameraService::ListDatesResponse>* PrepareAsyncListDatesRaw(::grpc::ClientContext* context, const ::cameraService::ListDatesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cameraService::ListVideosResponse>* AsyncListVideosRaw(::grpc::ClientContext* context, const ::cameraService::ListVideosRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cameraService::ListVideosResponse>* PrepareAsyncListVideosRaw(::grpc::ClientContext* context, const ::cameraService::ListVideosRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::cameraService::GetVideoFileResponse>* GetVideoFileRaw(::grpc::ClientContext* context, const ::cameraService::GetVideoFileRequest& request) override;
    ::grpc::ClientAsyncReader< ::cameraService::GetVideoFileResponse>* AsyncGetVideoFileRaw(::grpc::ClientContext* context, const ::cameraService::GetVideoFileRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::cameraService::GetVideoFileResponse>* PrepareAsyncGetVideoFileRaw(::grpc::ClientContext* context, const ::cameraService::GetVideoFileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cameraService::DeleteVideoFilesResponse>* AsyncDeleteVideoFilesRaw(::grpc::ClientContext* context, const ::cameraService::DeleteVideoFilesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cameraService::DeleteVideoFilesResponse>* PrepareAsyncDeleteVideoFilesRaw(::grpc::ClientContext* context, const ::cameraService::DeleteVideoFilesRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ListDates_;
    const ::grpc::internal::RpcMethod rpcmethod_ListVideos_;
    const ::grpc::internal::RpcMethod rpcmethod_GetVideoFile_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteVideoFiles_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // 获取监控视频日期列表
    virtual ::grpc::Status ListDates(::grpc::ServerContext* context, const ::cameraService::ListDatesRequest* request, ::cameraService::ListDatesResponse* response);
    // 获取监控视频列表
    virtual ::grpc::Status ListVideos(::grpc::ServerContext* context, const ::cameraService::ListVideosRequest* request, ::cameraService::ListVideosResponse* response);
    // 获取监控视频文件
    virtual ::grpc::Status GetVideoFile(::grpc::ServerContext* context, const ::cameraService::GetVideoFileRequest* request, ::grpc::ServerWriter< ::cameraService::GetVideoFileResponse>* writer);
    // 删除监控视频文件
    virtual ::grpc::Status DeleteVideoFiles(::grpc::ServerContext* context, const ::cameraService::DeleteVideoFilesRequest* request, ::cameraService::DeleteVideoFilesResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ListDates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListDates() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ListDates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListDates(::grpc::ServerContext* context, const ::cameraService::ListDatesRequest* request, ::cameraService::ListDatesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListDates(::grpc::ServerContext* context, ::cameraService::ListDatesRequest* request, ::grpc::ServerAsyncResponseWriter< ::cameraService::ListDatesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListVideos : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListVideos() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ListVideos() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListVideos(::grpc::ServerContext* context, const ::cameraService::ListVideosRequest* request, ::cameraService::ListVideosResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListVideos(::grpc::ServerContext* context, ::cameraService::ListVideosRequest* request, ::grpc::ServerAsyncResponseWriter< ::cameraService::ListVideosResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetVideoFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetVideoFile() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetVideoFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetVideoFile(::grpc::ServerContext* context, const ::cameraService::GetVideoFileRequest* request, ::grpc::ServerWriter< ::cameraService::GetVideoFileResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetVideoFile(::grpc::ServerContext* context, ::cameraService::GetVideoFileRequest* request, ::grpc::ServerAsyncWriter< ::cameraService::GetVideoFileResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteVideoFiles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DeleteVideoFiles() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_DeleteVideoFiles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteVideoFiles(::grpc::ServerContext* context, const ::cameraService::DeleteVideoFilesRequest* request, ::cameraService::DeleteVideoFilesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteVideoFiles(::grpc::ServerContext* context, ::cameraService::DeleteVideoFilesRequest* request, ::grpc::ServerAsyncResponseWriter< ::cameraService::DeleteVideoFilesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ListDates<WithAsyncMethod_ListVideos<WithAsyncMethod_GetVideoFile<WithAsyncMethod_DeleteVideoFiles<Service > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ListDates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_ListDates() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::cameraService::ListDatesRequest, ::cameraService::ListDatesResponse>(
          [this](::grpc::ServerContext* context,
                 const ::cameraService::ListDatesRequest* request,
                 ::cameraService::ListDatesResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->ListDates(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_ListDates(
        ::grpc::experimental::MessageAllocator< ::cameraService::ListDatesRequest, ::cameraService::ListDatesResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cameraService::ListDatesRequest, ::cameraService::ListDatesResponse>*>(
          ::grpc::Service::experimental().GetHandler(0))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ListDates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListDates(::grpc::ServerContext* context, const ::cameraService::ListDatesRequest* request, ::cameraService::ListDatesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ListDates(::grpc::ServerContext* context, const ::cameraService::ListDatesRequest* request, ::cameraService::ListDatesResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ListVideos : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_ListVideos() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::cameraService::ListVideosRequest, ::cameraService::ListVideosResponse>(
          [this](::grpc::ServerContext* context,
                 const ::cameraService::ListVideosRequest* request,
                 ::cameraService::ListVideosResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->ListVideos(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_ListVideos(
        ::grpc::experimental::MessageAllocator< ::cameraService::ListVideosRequest, ::cameraService::ListVideosResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cameraService::ListVideosRequest, ::cameraService::ListVideosResponse>*>(
          ::grpc::Service::experimental().GetHandler(1))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ListVideos() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListVideos(::grpc::ServerContext* context, const ::cameraService::ListVideosRequest* request, ::cameraService::ListVideosResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ListVideos(::grpc::ServerContext* context, const ::cameraService::ListVideosRequest* request, ::cameraService::ListVideosResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetVideoFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GetVideoFile() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc::internal::CallbackServerStreamingHandler< ::cameraService::GetVideoFileRequest, ::cameraService::GetVideoFileResponse>(
          [this] { return this->GetVideoFile(); }));
    }
    ~ExperimentalWithCallbackMethod_GetVideoFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetVideoFile(::grpc::ServerContext* context, const ::cameraService::GetVideoFileRequest* request, ::grpc::ServerWriter< ::cameraService::GetVideoFileResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::cameraService::GetVideoFileRequest, ::cameraService::GetVideoFileResponse>* GetVideoFile() {
      return new ::grpc::internal::UnimplementedWriteReactor<
        ::cameraService::GetVideoFileRequest, ::cameraService::GetVideoFileResponse>;}
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeleteVideoFiles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_DeleteVideoFiles() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::cameraService::DeleteVideoFilesRequest, ::cameraService::DeleteVideoFilesResponse>(
          [this](::grpc::ServerContext* context,
                 const ::cameraService::DeleteVideoFilesRequest* request,
                 ::cameraService::DeleteVideoFilesResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->DeleteVideoFiles(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_DeleteVideoFiles(
        ::grpc::experimental::MessageAllocator< ::cameraService::DeleteVideoFilesRequest, ::cameraService::DeleteVideoFilesResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cameraService::DeleteVideoFilesRequest, ::cameraService::DeleteVideoFilesResponse>*>(
          ::grpc::Service::experimental().GetHandler(3))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DeleteVideoFiles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteVideoFiles(::grpc::ServerContext* context, const ::cameraService::DeleteVideoFilesRequest* request, ::cameraService::DeleteVideoFilesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void DeleteVideoFiles(::grpc::ServerContext* context, const ::cameraService::DeleteVideoFilesRequest* request, ::cameraService::DeleteVideoFilesResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_ListDates<ExperimentalWithCallbackMethod_ListVideos<ExperimentalWithCallbackMethod_GetVideoFile<ExperimentalWithCallbackMethod_DeleteVideoFiles<Service > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_ListDates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListDates() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ListDates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListDates(::grpc::ServerContext* context, const ::cameraService::ListDatesRequest* request, ::cameraService::ListDatesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListVideos : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListVideos() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ListVideos() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListVideos(::grpc::ServerContext* context, const ::cameraService::ListVideosRequest* request, ::cameraService::ListVideosResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetVideoFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetVideoFile() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetVideoFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetVideoFile(::grpc::ServerContext* context, const ::cameraService::GetVideoFileRequest* request, ::grpc::ServerWriter< ::cameraService::GetVideoFileResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteVideoFiles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DeleteVideoFiles() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_DeleteVideoFiles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteVideoFiles(::grpc::ServerContext* context, const ::cameraService::DeleteVideoFilesRequest* request, ::cameraService::DeleteVideoFilesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListDates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ListDates() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ListDates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListDates(::grpc::ServerContext* context, const ::cameraService::ListDatesRequest* request, ::cameraService::ListDatesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListDates(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListVideos : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ListVideos() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ListVideos() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListVideos(::grpc::ServerContext* context, const ::cameraService::ListVideosRequest* request, ::cameraService::ListVideosResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListVideos(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetVideoFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetVideoFile() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetVideoFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetVideoFile(::grpc::ServerContext* context, const ::cameraService::GetVideoFileRequest* request, ::grpc::ServerWriter< ::cameraService::GetVideoFileResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetVideoFile(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteVideoFiles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_DeleteVideoFiles() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_DeleteVideoFiles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteVideoFiles(::grpc::ServerContext* context, const ::cameraService::DeleteVideoFilesRequest* request, ::cameraService::DeleteVideoFilesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteVideoFiles(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ListDates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_ListDates() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->ListDates(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_ListDates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListDates(::grpc::ServerContext* context, const ::cameraService::ListDatesRequest* request, ::cameraService::ListDatesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ListDates(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ListVideos : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_ListVideos() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->ListVideos(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_ListVideos() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListVideos(::grpc::ServerContext* context, const ::cameraService::ListVideosRequest* request, ::cameraService::ListVideosResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ListVideos(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetVideoFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GetVideoFile() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this] { return this->GetVideoFile(); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetVideoFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetVideoFile(::grpc::ServerContext* context, const ::cameraService::GetVideoFileRequest* request, ::grpc::ServerWriter< ::cameraService::GetVideoFileResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* GetVideoFile() {
      return new ::grpc::internal::UnimplementedWriteReactor<
        ::grpc::ByteBuffer, ::grpc::ByteBuffer>;}
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeleteVideoFiles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_DeleteVideoFiles() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->DeleteVideoFiles(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_DeleteVideoFiles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteVideoFiles(::grpc::ServerContext* context, const ::cameraService::DeleteVideoFilesRequest* request, ::cameraService::DeleteVideoFilesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void DeleteVideoFiles(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListDates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ListDates() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::cameraService::ListDatesRequest, ::cameraService::ListDatesResponse>(std::bind(&WithStreamedUnaryMethod_ListDates<BaseClass>::StreamedListDates, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ListDates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListDates(::grpc::ServerContext* context, const ::cameraService::ListDatesRequest* request, ::cameraService::ListDatesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListDates(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cameraService::ListDatesRequest,::cameraService::ListDatesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListVideos : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ListVideos() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::cameraService::ListVideosRequest, ::cameraService::ListVideosResponse>(std::bind(&WithStreamedUnaryMethod_ListVideos<BaseClass>::StreamedListVideos, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ListVideos() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListVideos(::grpc::ServerContext* context, const ::cameraService::ListVideosRequest* request, ::cameraService::ListVideosResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListVideos(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cameraService::ListVideosRequest,::cameraService::ListVideosResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteVideoFiles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DeleteVideoFiles() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::cameraService::DeleteVideoFilesRequest, ::cameraService::DeleteVideoFilesResponse>(std::bind(&WithStreamedUnaryMethod_DeleteVideoFiles<BaseClass>::StreamedDeleteVideoFiles, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DeleteVideoFiles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteVideoFiles(::grpc::ServerContext* context, const ::cameraService::DeleteVideoFilesRequest* request, ::cameraService::DeleteVideoFilesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteVideoFiles(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cameraService::DeleteVideoFilesRequest,::cameraService::DeleteVideoFilesResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ListDates<WithStreamedUnaryMethod_ListVideos<WithStreamedUnaryMethod_DeleteVideoFiles<Service > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_GetVideoFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_GetVideoFile() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::SplitServerStreamingHandler< ::cameraService::GetVideoFileRequest, ::cameraService::GetVideoFileResponse>(std::bind(&WithSplitStreamingMethod_GetVideoFile<BaseClass>::StreamedGetVideoFile, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_GetVideoFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetVideoFile(::grpc::ServerContext* context, const ::cameraService::GetVideoFileRequest* request, ::grpc::ServerWriter< ::cameraService::GetVideoFileResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetVideoFile(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::cameraService::GetVideoFileRequest,::cameraService::GetVideoFileResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_GetVideoFile<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_ListDates<WithStreamedUnaryMethod_ListVideos<WithSplitStreamingMethod_GetVideoFile<WithStreamedUnaryMethod_DeleteVideoFiles<Service > > > > StreamedService;
};

}  // namespace cameraService


#endif  // GRPC_storage_2eproto__INCLUDED
