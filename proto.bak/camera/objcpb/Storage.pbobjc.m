// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: storage.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "Storage.pbobjc.h"
#import "google/api/Annotations.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - StorageRoot

@implementation StorageRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    registry = [[GPBExtensionRegistry alloc] init];
    // Merge in the imports (direct or indirect) that defined extensions.
    [registry addExtensions:[GAPIAnnotationsRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - StorageRoot_FileDescriptor

static GPBFileDescriptor *StorageRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"cameraService"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - ListDatesRequest

@implementation ListDatesRequest


typedef struct ListDatesRequest__storage_ {
  uint32_t _has_storage_[1];
} ListDatesRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ListDatesRequest class]
                                     rootClass:[StorageRoot class]
                                          file:StorageRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(ListDatesRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ListDatesResponse

@implementation ListDatesResponse

@dynamic datesArray, datesArray_Count;

typedef struct ListDatesResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *datesArray;
} ListDatesResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "datesArray",
        .dataTypeSpecific.className = NULL,
        .number = ListDatesResponse_FieldNumber_DatesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ListDatesResponse__storage_, datesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ListDatesResponse class]
                                     rootClass:[StorageRoot class]
                                          file:StorageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ListDatesResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ListVideosRequest

@implementation ListVideosRequest

@dynamic start;
@dynamic end;

typedef struct ListVideosRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *start;
  NSString *end;
} ListVideosRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "start",
        .dataTypeSpecific.className = NULL,
        .number = ListVideosRequest_FieldNumber_Start,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ListVideosRequest__storage_, start),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "end",
        .dataTypeSpecific.className = NULL,
        .number = ListVideosRequest_FieldNumber_End,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ListVideosRequest__storage_, end),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ListVideosRequest class]
                                     rootClass:[StorageRoot class]
                                          file:StorageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ListVideosRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ListVideosResponse

@implementation ListVideosResponse

@dynamic videosArray, videosArray_Count;

typedef struct ListVideosResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *videosArray;
} ListVideosResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "videosArray",
        .dataTypeSpecific.className = NULL,
        .number = ListVideosResponse_FieldNumber_VideosArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ListVideosResponse__storage_, videosArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ListVideosResponse class]
                                     rootClass:[StorageRoot class]
                                          file:StorageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ListVideosResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetVideoFileRequest

@implementation GetVideoFileRequest

@dynamic video;

typedef struct GetVideoFileRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *video;
} GetVideoFileRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "video",
        .dataTypeSpecific.className = NULL,
        .number = GetVideoFileRequest_FieldNumber_Video,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetVideoFileRequest__storage_, video),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetVideoFileRequest class]
                                     rootClass:[StorageRoot class]
                                          file:StorageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetVideoFileRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetVideoFileResponse

@implementation GetVideoFileResponse

@dynamic chunk;

typedef struct GetVideoFileResponse__storage_ {
  uint32_t _has_storage_[1];
  NSData *chunk;
} GetVideoFileResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "chunk",
        .dataTypeSpecific.className = NULL,
        .number = GetVideoFileResponse_FieldNumber_Chunk,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetVideoFileResponse__storage_, chunk),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetVideoFileResponse class]
                                     rootClass:[StorageRoot class]
                                          file:StorageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetVideoFileResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DeleteVideoFilesRequest

@implementation DeleteVideoFilesRequest

@dynamic videosArray, videosArray_Count;

typedef struct DeleteVideoFilesRequest__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *videosArray;
} DeleteVideoFilesRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "videosArray",
        .dataTypeSpecific.className = NULL,
        .number = DeleteVideoFilesRequest_FieldNumber_VideosArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(DeleteVideoFilesRequest__storage_, videosArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DeleteVideoFilesRequest class]
                                     rootClass:[StorageRoot class]
                                          file:StorageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DeleteVideoFilesRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DeleteVideoFilesResponse

@implementation DeleteVideoFilesResponse


typedef struct DeleteVideoFilesResponse__storage_ {
  uint32_t _has_storage_[1];
} DeleteVideoFilesResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DeleteVideoFilesResponse class]
                                     rootClass:[StorageRoot class]
                                          file:StorageRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(DeleteVideoFilesResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
