// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: map.proto

#include "map.pb.h"
#include "map.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace navService {

static const char* Map_method_names[] = {
  "/navService.Map/GetMapInfo",
  "/navService.Map/MapPositionStream",
  "/navService.Map/LocationReset",
};

std::unique_ptr< Map::Stub> Map::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Map::Stub> stub(new Map::Stub(channel));
  return stub;
}

Map::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetMapInfo_(Map_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MapPositionStream_(Map_method_names[1], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_LocationReset_(Map_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Map::Stub::GetMapInfo(::grpc::ClientContext* context, const ::navService::GetMapInfoRequest& request, ::navService::GetMapInfoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetMapInfo_, context, request, response);
}

void Map::Stub::experimental_async::GetMapInfo(::grpc::ClientContext* context, const ::navService::GetMapInfoRequest* request, ::navService::GetMapInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetMapInfo_, context, request, response, std::move(f));
}

void Map::Stub::experimental_async::GetMapInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::navService::GetMapInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetMapInfo_, context, request, response, std::move(f));
}

void Map::Stub::experimental_async::GetMapInfo(::grpc::ClientContext* context, const ::navService::GetMapInfoRequest* request, ::navService::GetMapInfoResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetMapInfo_, context, request, response, reactor);
}

void Map::Stub::experimental_async::GetMapInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::navService::GetMapInfoResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetMapInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::navService::GetMapInfoResponse>* Map::Stub::AsyncGetMapInfoRaw(::grpc::ClientContext* context, const ::navService::GetMapInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::navService::GetMapInfoResponse>::Create(channel_.get(), cq, rpcmethod_GetMapInfo_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::navService::GetMapInfoResponse>* Map::Stub::PrepareAsyncGetMapInfoRaw(::grpc::ClientContext* context, const ::navService::GetMapInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::navService::GetMapInfoResponse>::Create(channel_.get(), cq, rpcmethod_GetMapInfo_, context, request, false);
}

::grpc::ClientReader< ::navService::MapPositionStreamResponse>* Map::Stub::MapPositionStreamRaw(::grpc::ClientContext* context, const ::navService::MapPositionStreamRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::navService::MapPositionStreamResponse>::Create(channel_.get(), rpcmethod_MapPositionStream_, context, request);
}

void Map::Stub::experimental_async::MapPositionStream(::grpc::ClientContext* context, ::navService::MapPositionStreamRequest* request, ::grpc::experimental::ClientReadReactor< ::navService::MapPositionStreamResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::navService::MapPositionStreamResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_MapPositionStream_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::navService::MapPositionStreamResponse>* Map::Stub::AsyncMapPositionStreamRaw(::grpc::ClientContext* context, const ::navService::MapPositionStreamRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::navService::MapPositionStreamResponse>::Create(channel_.get(), cq, rpcmethod_MapPositionStream_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::navService::MapPositionStreamResponse>* Map::Stub::PrepareAsyncMapPositionStreamRaw(::grpc::ClientContext* context, const ::navService::MapPositionStreamRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::navService::MapPositionStreamResponse>::Create(channel_.get(), cq, rpcmethod_MapPositionStream_, context, request, false, nullptr);
}

::grpc::Status Map::Stub::LocationReset(::grpc::ClientContext* context, const ::navService::LocationResetRequest& request, ::navService::LocationResetResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_LocationReset_, context, request, response);
}

void Map::Stub::experimental_async::LocationReset(::grpc::ClientContext* context, const ::navService::LocationResetRequest* request, ::navService::LocationResetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_LocationReset_, context, request, response, std::move(f));
}

void Map::Stub::experimental_async::LocationReset(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::navService::LocationResetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_LocationReset_, context, request, response, std::move(f));
}

void Map::Stub::experimental_async::LocationReset(::grpc::ClientContext* context, const ::navService::LocationResetRequest* request, ::navService::LocationResetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_LocationReset_, context, request, response, reactor);
}

void Map::Stub::experimental_async::LocationReset(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::navService::LocationResetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_LocationReset_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::navService::LocationResetResponse>* Map::Stub::AsyncLocationResetRaw(::grpc::ClientContext* context, const ::navService::LocationResetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::navService::LocationResetResponse>::Create(channel_.get(), cq, rpcmethod_LocationReset_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::navService::LocationResetResponse>* Map::Stub::PrepareAsyncLocationResetRaw(::grpc::ClientContext* context, const ::navService::LocationResetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::navService::LocationResetResponse>::Create(channel_.get(), cq, rpcmethod_LocationReset_, context, request, false);
}

Map::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Map_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Map::Service, ::navService::GetMapInfoRequest, ::navService::GetMapInfoResponse>(
          std::mem_fn(&Map::Service::GetMapInfo), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Map_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Map::Service, ::navService::MapPositionStreamRequest, ::navService::MapPositionStreamResponse>(
          std::mem_fn(&Map::Service::MapPositionStream), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Map_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Map::Service, ::navService::LocationResetRequest, ::navService::LocationResetResponse>(
          std::mem_fn(&Map::Service::LocationReset), this)));
}

Map::Service::~Service() {
}

::grpc::Status Map::Service::GetMapInfo(::grpc::ServerContext* context, const ::navService::GetMapInfoRequest* request, ::navService::GetMapInfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Map::Service::MapPositionStream(::grpc::ServerContext* context, const ::navService::MapPositionStreamRequest* request, ::grpc::ServerWriter< ::navService::MapPositionStreamResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Map::Service::LocationReset(::grpc::ServerContext* context, const ::navService::LocationResetRequest* request, ::navService::LocationResetResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace navService

