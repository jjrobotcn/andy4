syntax = "proto3";

package kvstore;

option java_outer_classname = "KVStoreOuterClass";

import "google/api/annotations.proto";

service KVStore {
    // Put 创建kv键值对
    // 若key已存在将更新value值
    rpc Put(PutRequest) returns (PutResponse) {
        option (google.api.http) = {
            post: "/api/v2/kvstore/put"
            body: "*"
        };
    }

    // Get 获取key的value
    // 若key不存在则返回gRPC错误:NotFound
    rpc Get(GetRequest) returns (GetResponse) {
        option (google.api.http) = {
            post: "/api/v2/kvstore/get"
            body: "*"

            additional_bindings {
                // e.g. GET http://10.10.10.2:81/api/v1/kvstore/get?key=
                get: "/api/v2/kvstore/get"
            }
        };
    }

    // GetPrefix 获取符合key_prefix的多个kv键值对
    rpc GetPrefix(GetPrefixRequest) returns (GetPrefixResponse) {
        option (google.api.http) = {
            post: "/api/v2/kvstore/get_prefix"
            body: "*"

            additional_bindings {
                // e.g. GET http://10.10.10.2:81/api/v1/kvstore/get_prefix?key_prefix=
                get: "/api/v2/kvstore/get_prefix"
            }
        };
    }

    // GetPrefixStream gRPC stream方式获取符合key_prefix的多个kv键值对
    rpc GetPrefixStream(GetPrefixStreamRequest) returns (stream GetPrefixStreamResponse) {
        option (google.api.http) = {
            // e.g. [WebSocket] ws://10.10.10.2:81/api/v1/kvstore/get_prefix_stream?key_prefix=
            // e.g. [GET] http://10.10.10.2:81/api/v1/kvstore/get_prefix_stream?key_prefix=
            get: "/api/v2/kvstore/get_prefix_stream"
        };
    }

    // Delete 删除kv键值对
    rpc Delete(DeleteRequest) returns (DeleteResponse) {
        option (google.api.http) = {
            post: "/api/v2/kvstore/delete"
            body: "*"
        };
    }
}

message PutRequest {
    string key = 1;
    bytes value = 2;
}

message PutResponse {

}

message GetRequest {
    string key = 1;
}

message GetResponse {
    bytes value = 1;
}

message GetPrefixRequest {
    // keys: [not_match, match_1, match_2, match.3, match@4]
    // match: [match_1, match_2, match.3, match@4]
    // match_: [match_1,, match_2]
    // match@: [match@3]
    // match!: []
    string key_prefix = 1;
}

message GetPrefixResponse {
    message Match {
        string key = 1;
        bytes value = 2;
    }
    repeated Match matches = 1;
}

message GetPrefixStreamRequest {
    // keys: [not_match, match_1, match_2, match.3, match@4]
    // match: [match_1, match_2, match.3, match@4]
    // match_: [match_1,, match_2]
    // match@: [match@3]
    // match!: []
    string key_prefix = 1;
}

message GetPrefixStreamResponse {
    string key = 1;
    bytes value = 2;
}

message DeleteRequest {
    string key = 1;
}

message DeleteResponse {

}
