// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: kvstore.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Kvstore {
  public static partial class KVStore
  {
    static readonly string __ServiceName = "kvstore.KVStore";

    static readonly grpc::Marshaller<global::Kvstore.PutRequest> __Marshaller_kvstore_PutRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Kvstore.PutRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Kvstore.PutResponse> __Marshaller_kvstore_PutResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Kvstore.PutResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Kvstore.GetRequest> __Marshaller_kvstore_GetRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Kvstore.GetRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Kvstore.GetResponse> __Marshaller_kvstore_GetResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Kvstore.GetResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Kvstore.GetPrefixRequest> __Marshaller_kvstore_GetPrefixRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Kvstore.GetPrefixRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Kvstore.GetPrefixResponse> __Marshaller_kvstore_GetPrefixResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Kvstore.GetPrefixResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Kvstore.GetPrefixStreamRequest> __Marshaller_kvstore_GetPrefixStreamRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Kvstore.GetPrefixStreamRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Kvstore.GetPrefixStreamResponse> __Marshaller_kvstore_GetPrefixStreamResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Kvstore.GetPrefixStreamResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Kvstore.DeleteRequest> __Marshaller_kvstore_DeleteRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Kvstore.DeleteRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Kvstore.DeleteResponse> __Marshaller_kvstore_DeleteResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Kvstore.DeleteResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Kvstore.PutRequest, global::Kvstore.PutResponse> __Method_Put = new grpc::Method<global::Kvstore.PutRequest, global::Kvstore.PutResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Put",
        __Marshaller_kvstore_PutRequest,
        __Marshaller_kvstore_PutResponse);

    static readonly grpc::Method<global::Kvstore.GetRequest, global::Kvstore.GetResponse> __Method_Get = new grpc::Method<global::Kvstore.GetRequest, global::Kvstore.GetResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Get",
        __Marshaller_kvstore_GetRequest,
        __Marshaller_kvstore_GetResponse);

    static readonly grpc::Method<global::Kvstore.GetPrefixRequest, global::Kvstore.GetPrefixResponse> __Method_GetPrefix = new grpc::Method<global::Kvstore.GetPrefixRequest, global::Kvstore.GetPrefixResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetPrefix",
        __Marshaller_kvstore_GetPrefixRequest,
        __Marshaller_kvstore_GetPrefixResponse);

    static readonly grpc::Method<global::Kvstore.GetPrefixStreamRequest, global::Kvstore.GetPrefixStreamResponse> __Method_GetPrefixStream = new grpc::Method<global::Kvstore.GetPrefixStreamRequest, global::Kvstore.GetPrefixStreamResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetPrefixStream",
        __Marshaller_kvstore_GetPrefixStreamRequest,
        __Marshaller_kvstore_GetPrefixStreamResponse);

    static readonly grpc::Method<global::Kvstore.DeleteRequest, global::Kvstore.DeleteResponse> __Method_Delete = new grpc::Method<global::Kvstore.DeleteRequest, global::Kvstore.DeleteResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Delete",
        __Marshaller_kvstore_DeleteRequest,
        __Marshaller_kvstore_DeleteResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Kvstore.KvstoreReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of KVStore</summary>
    [grpc::BindServiceMethod(typeof(KVStore), "BindService")]
    public abstract partial class KVStoreBase
    {
      /// <summary>
      /// Put 创建kv键值对
      /// 若key已存在将更新value值
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Kvstore.PutResponse> Put(global::Kvstore.PutRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get 获取key的value
      /// 若key不存在则返回gRPC错误:NotFound
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Kvstore.GetResponse> Get(global::Kvstore.GetRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// GetPrefix 获取符合key_prefix的多个kv键值对
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Kvstore.GetPrefixResponse> GetPrefix(global::Kvstore.GetPrefixRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// GetPrefixStream gRPC stream方式获取符合key_prefix的多个kv键值对
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task GetPrefixStream(global::Kvstore.GetPrefixStreamRequest request, grpc::IServerStreamWriter<global::Kvstore.GetPrefixStreamResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete 删除kv键值对
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Kvstore.DeleteResponse> Delete(global::Kvstore.DeleteRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for KVStore</summary>
    public partial class KVStoreClient : grpc::ClientBase<KVStoreClient>
    {
      /// <summary>Creates a new client for KVStore</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public KVStoreClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for KVStore that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public KVStoreClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected KVStoreClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected KVStoreClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Put 创建kv键值对
      /// 若key已存在将更新value值
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Kvstore.PutResponse Put(global::Kvstore.PutRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Put(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Put 创建kv键值对
      /// 若key已存在将更新value值
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Kvstore.PutResponse Put(global::Kvstore.PutRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Put, null, options, request);
      }
      /// <summary>
      /// Put 创建kv键值对
      /// 若key已存在将更新value值
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Kvstore.PutResponse> PutAsync(global::Kvstore.PutRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PutAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Put 创建kv键值对
      /// 若key已存在将更新value值
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Kvstore.PutResponse> PutAsync(global::Kvstore.PutRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Put, null, options, request);
      }
      /// <summary>
      /// Get 获取key的value
      /// 若key不存在则返回gRPC错误:NotFound
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Kvstore.GetResponse Get(global::Kvstore.GetRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Get(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get 获取key的value
      /// 若key不存在则返回gRPC错误:NotFound
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Kvstore.GetResponse Get(global::Kvstore.GetRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Get 获取key的value
      /// 若key不存在则返回gRPC错误:NotFound
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Kvstore.GetResponse> GetAsync(global::Kvstore.GetRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get 获取key的value
      /// 若key不存在则返回gRPC错误:NotFound
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Kvstore.GetResponse> GetAsync(global::Kvstore.GetRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// GetPrefix 获取符合key_prefix的多个kv键值对
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Kvstore.GetPrefixResponse GetPrefix(global::Kvstore.GetPrefixRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPrefix(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetPrefix 获取符合key_prefix的多个kv键值对
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Kvstore.GetPrefixResponse GetPrefix(global::Kvstore.GetPrefixRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetPrefix, null, options, request);
      }
      /// <summary>
      /// GetPrefix 获取符合key_prefix的多个kv键值对
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Kvstore.GetPrefixResponse> GetPrefixAsync(global::Kvstore.GetPrefixRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPrefixAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetPrefix 获取符合key_prefix的多个kv键值对
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Kvstore.GetPrefixResponse> GetPrefixAsync(global::Kvstore.GetPrefixRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetPrefix, null, options, request);
      }
      /// <summary>
      /// GetPrefixStream gRPC stream方式获取符合key_prefix的多个kv键值对
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Kvstore.GetPrefixStreamResponse> GetPrefixStream(global::Kvstore.GetPrefixStreamRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPrefixStream(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetPrefixStream gRPC stream方式获取符合key_prefix的多个kv键值对
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Kvstore.GetPrefixStreamResponse> GetPrefixStream(global::Kvstore.GetPrefixStreamRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetPrefixStream, null, options, request);
      }
      /// <summary>
      /// Delete 删除kv键值对
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Kvstore.DeleteResponse Delete(global::Kvstore.DeleteRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Delete(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete 删除kv键值对
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Kvstore.DeleteResponse Delete(global::Kvstore.DeleteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Delete 删除kv键值对
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Kvstore.DeleteResponse> DeleteAsync(global::Kvstore.DeleteRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete 删除kv键值对
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Kvstore.DeleteResponse> DeleteAsync(global::Kvstore.DeleteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override KVStoreClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new KVStoreClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(KVStoreBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Put, serviceImpl.Put)
          .AddMethod(__Method_Get, serviceImpl.Get)
          .AddMethod(__Method_GetPrefix, serviceImpl.GetPrefix)
          .AddMethod(__Method_GetPrefixStream, serviceImpl.GetPrefixStream)
          .AddMethod(__Method_Delete, serviceImpl.Delete).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, KVStoreBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Put, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Kvstore.PutRequest, global::Kvstore.PutResponse>(serviceImpl.Put));
      serviceBinder.AddMethod(__Method_Get, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Kvstore.GetRequest, global::Kvstore.GetResponse>(serviceImpl.Get));
      serviceBinder.AddMethod(__Method_GetPrefix, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Kvstore.GetPrefixRequest, global::Kvstore.GetPrefixResponse>(serviceImpl.GetPrefix));
      serviceBinder.AddMethod(__Method_GetPrefixStream, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Kvstore.GetPrefixStreamRequest, global::Kvstore.GetPrefixStreamResponse>(serviceImpl.GetPrefixStream));
      serviceBinder.AddMethod(__Method_Delete, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Kvstore.DeleteRequest, global::Kvstore.DeleteResponse>(serviceImpl.Delete));
    }

  }
}
#endregion
