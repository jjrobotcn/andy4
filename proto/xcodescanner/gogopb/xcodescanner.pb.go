// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: xcodescanner.proto

package xcScannerService

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type GetScanDataRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetScanDataRequest) Reset()         { *m = GetScanDataRequest{} }
func (m *GetScanDataRequest) String() string { return proto.CompactTextString(m) }
func (*GetScanDataRequest) ProtoMessage()    {}
func (*GetScanDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_299530cd27f121ef, []int{0}
}
func (m *GetScanDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetScanDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetScanDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetScanDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetScanDataRequest.Merge(m, src)
}
func (m *GetScanDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetScanDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetScanDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetScanDataRequest proto.InternalMessageInfo

// 扫码结果
type GetScanDataResponse struct {
	Content              string   `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetScanDataResponse) Reset()         { *m = GetScanDataResponse{} }
func (m *GetScanDataResponse) String() string { return proto.CompactTextString(m) }
func (*GetScanDataResponse) ProtoMessage()    {}
func (*GetScanDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_299530cd27f121ef, []int{1}
}
func (m *GetScanDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetScanDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetScanDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetScanDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetScanDataResponse.Merge(m, src)
}
func (m *GetScanDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetScanDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetScanDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetScanDataResponse proto.InternalMessageInfo

func (m *GetScanDataResponse) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func init() {
	proto.RegisterType((*GetScanDataRequest)(nil), "xcScannerService.GetScanDataRequest")
	proto.RegisterType((*GetScanDataResponse)(nil), "xcScannerService.GetScanDataResponse")
}

func init() { proto.RegisterFile("xcodescanner.proto", fileDescriptor_299530cd27f121ef) }

var fileDescriptor_299530cd27f121ef = []byte{
	// 166 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xaa, 0x48, 0xce, 0x4f,
	0x49, 0x2d, 0x4e, 0x4e, 0xcc, 0xcb, 0x4b, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12,
	0xa8, 0x48, 0x0e, 0x86, 0x08, 0x04, 0xa7, 0x16, 0x95, 0x65, 0x26, 0xa7, 0x2a, 0x89, 0x70, 0x09,
	0xb9, 0xa7, 0x96, 0x80, 0x04, 0x5d, 0x12, 0x4b, 0x12, 0x83, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b,
	0x94, 0xf4, 0xb9, 0x84, 0x51, 0x44, 0x8b, 0x0b, 0xf2, 0xf3, 0x8a, 0x53, 0x85, 0x24, 0xb8, 0xd8,
	0x93, 0xf3, 0xf3, 0x4a, 0x52, 0xf3, 0x4a, 0x24, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0x60, 0x5c,
	0xa3, 0x52, 0x2e, 0xe1, 0x08, 0xe7, 0xfc, 0x94, 0x54, 0x54, 0xd3, 0x85, 0xe2, 0xb8, 0xb8, 0x91,
	0xcc, 0x11, 0x52, 0xd1, 0x43, 0xb7, 0x5f, 0x0f, 0xd3, 0x72, 0x29, 0x55, 0x02, 0xaa, 0x20, 0x8e,
	0x51, 0x62, 0x30, 0x60, 0x74, 0xe2, 0x39, 0xf1, 0x48, 0x8e, 0xf1, 0xc2, 0x23, 0x39, 0xc6, 0x07,
	0x8f, 0xe4, 0x18, 0x93, 0xd8, 0xc0, 0x9e, 0x34, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0xa3, 0xac,
	0x3a, 0x08, 0xfa, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// XCodeScannerServiceClient is the client API for XCodeScannerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type XCodeScannerServiceClient interface {
	GetScanData(ctx context.Context, in *GetScanDataRequest, opts ...grpc.CallOption) (XCodeScannerService_GetScanDataClient, error)
}

type xCodeScannerServiceClient struct {
	cc *grpc.ClientConn
}

func NewXCodeScannerServiceClient(cc *grpc.ClientConn) XCodeScannerServiceClient {
	return &xCodeScannerServiceClient{cc}
}

func (c *xCodeScannerServiceClient) GetScanData(ctx context.Context, in *GetScanDataRequest, opts ...grpc.CallOption) (XCodeScannerService_GetScanDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &_XCodeScannerService_serviceDesc.Streams[0], "/xcScannerService.XCodeScannerService/GetScanData", opts...)
	if err != nil {
		return nil, err
	}
	x := &xCodeScannerServiceGetScanDataClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type XCodeScannerService_GetScanDataClient interface {
	Recv() (*GetScanDataResponse, error)
	grpc.ClientStream
}

type xCodeScannerServiceGetScanDataClient struct {
	grpc.ClientStream
}

func (x *xCodeScannerServiceGetScanDataClient) Recv() (*GetScanDataResponse, error) {
	m := new(GetScanDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// XCodeScannerServiceServer is the server API for XCodeScannerService service.
type XCodeScannerServiceServer interface {
	GetScanData(*GetScanDataRequest, XCodeScannerService_GetScanDataServer) error
}

// UnimplementedXCodeScannerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedXCodeScannerServiceServer struct {
}

func (*UnimplementedXCodeScannerServiceServer) GetScanData(req *GetScanDataRequest, srv XCodeScannerService_GetScanDataServer) error {
	return status.Errorf(codes.Unimplemented, "method GetScanData not implemented")
}

func RegisterXCodeScannerServiceServer(s *grpc.Server, srv XCodeScannerServiceServer) {
	s.RegisterService(&_XCodeScannerService_serviceDesc, srv)
}

func _XCodeScannerService_GetScanData_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetScanDataRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(XCodeScannerServiceServer).GetScanData(m, &xCodeScannerServiceGetScanDataServer{stream})
}

type XCodeScannerService_GetScanDataServer interface {
	Send(*GetScanDataResponse) error
	grpc.ServerStream
}

type xCodeScannerServiceGetScanDataServer struct {
	grpc.ServerStream
}

func (x *xCodeScannerServiceGetScanDataServer) Send(m *GetScanDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _XCodeScannerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "xcScannerService.XCodeScannerService",
	HandlerType: (*XCodeScannerServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetScanData",
			Handler:       _XCodeScannerService_GetScanData_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "xcodescanner.proto",
}

func (m *GetScanDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetScanDataRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetScanDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetScanDataResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Content) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintXcodescanner(dAtA, i, uint64(len(m.Content)))
		i += copy(dAtA[i:], m.Content)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintXcodescanner(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *GetScanDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetScanDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovXcodescanner(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovXcodescanner(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozXcodescanner(x uint64) (n int) {
	return sovXcodescanner(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetScanDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXcodescanner
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetScanDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetScanDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipXcodescanner(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXcodescanner
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthXcodescanner
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetScanDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXcodescanner
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetScanDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetScanDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXcodescanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthXcodescanner
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthXcodescanner
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXcodescanner(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXcodescanner
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthXcodescanner
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipXcodescanner(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowXcodescanner
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowXcodescanner
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowXcodescanner
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthXcodescanner
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthXcodescanner
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowXcodescanner
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipXcodescanner(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthXcodescanner
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthXcodescanner = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowXcodescanner   = fmt.Errorf("proto: integer overflow")
)
