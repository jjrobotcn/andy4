// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: expression.proto

#ifndef PROTOBUF_INCLUDED_expression_2eproto
#define PROTOBUF_INCLUDED_expression_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_expression_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_expression_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[13]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_expression_2eproto();
namespace expressionService {
class DeleteExpressionsRequest;
class DeleteExpressionsRequestDefaultTypeInternal;
extern DeleteExpressionsRequestDefaultTypeInternal _DeleteExpressionsRequest_default_instance_;
class DeleteExpressionsResponse;
class DeleteExpressionsResponseDefaultTypeInternal;
extern DeleteExpressionsResponseDefaultTypeInternal _DeleteExpressionsResponse_default_instance_;
class ExpressionInfo;
class ExpressionInfoDefaultTypeInternal;
extern ExpressionInfoDefaultTypeInternal _ExpressionInfo_default_instance_;
class ListExpressionsRequest;
class ListExpressionsRequestDefaultTypeInternal;
extern ListExpressionsRequestDefaultTypeInternal _ListExpressionsRequest_default_instance_;
class ListExpressionsResponse;
class ListExpressionsResponseDefaultTypeInternal;
extern ListExpressionsResponseDefaultTypeInternal _ListExpressionsResponse_default_instance_;
class PlayExpressionsRequest;
class PlayExpressionsRequestDefaultTypeInternal;
extern PlayExpressionsRequestDefaultTypeInternal _PlayExpressionsRequest_default_instance_;
class PlayExpressionsResponse;
class PlayExpressionsResponseDefaultTypeInternal;
extern PlayExpressionsResponseDefaultTypeInternal _PlayExpressionsResponse_default_instance_;
class RenameRequest;
class RenameRequestDefaultTypeInternal;
extern RenameRequestDefaultTypeInternal _RenameRequest_default_instance_;
class RenameResponse;
class RenameResponseDefaultTypeInternal;
extern RenameResponseDefaultTypeInternal _RenameResponse_default_instance_;
class StopExpressionRequest;
class StopExpressionRequestDefaultTypeInternal;
extern StopExpressionRequestDefaultTypeInternal _StopExpressionRequest_default_instance_;
class StopExpressionResponse;
class StopExpressionResponseDefaultTypeInternal;
extern StopExpressionResponseDefaultTypeInternal _StopExpressionResponse_default_instance_;
class UploadExpressionFileRequest;
class UploadExpressionFileRequestDefaultTypeInternal;
extern UploadExpressionFileRequestDefaultTypeInternal _UploadExpressionFileRequest_default_instance_;
class UploadExpressionFileResponse;
class UploadExpressionFileResponseDefaultTypeInternal;
extern UploadExpressionFileResponseDefaultTypeInternal _UploadExpressionFileResponse_default_instance_;
}  // namespace expressionService
namespace google {
namespace protobuf {
template<> ::expressionService::DeleteExpressionsRequest* Arena::CreateMaybeMessage<::expressionService::DeleteExpressionsRequest>(Arena*);
template<> ::expressionService::DeleteExpressionsResponse* Arena::CreateMaybeMessage<::expressionService::DeleteExpressionsResponse>(Arena*);
template<> ::expressionService::ExpressionInfo* Arena::CreateMaybeMessage<::expressionService::ExpressionInfo>(Arena*);
template<> ::expressionService::ListExpressionsRequest* Arena::CreateMaybeMessage<::expressionService::ListExpressionsRequest>(Arena*);
template<> ::expressionService::ListExpressionsResponse* Arena::CreateMaybeMessage<::expressionService::ListExpressionsResponse>(Arena*);
template<> ::expressionService::PlayExpressionsRequest* Arena::CreateMaybeMessage<::expressionService::PlayExpressionsRequest>(Arena*);
template<> ::expressionService::PlayExpressionsResponse* Arena::CreateMaybeMessage<::expressionService::PlayExpressionsResponse>(Arena*);
template<> ::expressionService::RenameRequest* Arena::CreateMaybeMessage<::expressionService::RenameRequest>(Arena*);
template<> ::expressionService::RenameResponse* Arena::CreateMaybeMessage<::expressionService::RenameResponse>(Arena*);
template<> ::expressionService::StopExpressionRequest* Arena::CreateMaybeMessage<::expressionService::StopExpressionRequest>(Arena*);
template<> ::expressionService::StopExpressionResponse* Arena::CreateMaybeMessage<::expressionService::StopExpressionResponse>(Arena*);
template<> ::expressionService::UploadExpressionFileRequest* Arena::CreateMaybeMessage<::expressionService::UploadExpressionFileRequest>(Arena*);
template<> ::expressionService::UploadExpressionFileResponse* Arena::CreateMaybeMessage<::expressionService::UploadExpressionFileResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace expressionService {

// ===================================================================

class ExpressionInfo final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:expressionService.ExpressionInfo) */ {
 public:
  ExpressionInfo();
  virtual ~ExpressionInfo();

  ExpressionInfo(const ExpressionInfo& from);

  inline ExpressionInfo& operator=(const ExpressionInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ExpressionInfo(ExpressionInfo&& from) noexcept
    : ExpressionInfo() {
    *this = ::std::move(from);
  }

  inline ExpressionInfo& operator=(ExpressionInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ExpressionInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExpressionInfo* internal_default_instance() {
    return reinterpret_cast<const ExpressionInfo*>(
               &_ExpressionInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ExpressionInfo* other);
  friend void swap(ExpressionInfo& a, ExpressionInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ExpressionInfo* New() const final {
    return CreateMaybeMessage<ExpressionInfo>(nullptr);
  }

  ExpressionInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ExpressionInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ExpressionInfo& from);
  void MergeFrom(const ExpressionInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExpressionInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string preview_b64 = 3;
  void clear_preview_b64();
  static const int kPreviewB64FieldNumber = 3;
  const ::std::string& preview_b64() const;
  void set_preview_b64(const ::std::string& value);
  #if LANG_CXX11
  void set_preview_b64(::std::string&& value);
  #endif
  void set_preview_b64(const char* value);
  void set_preview_b64(const char* value, size_t size);
  ::std::string* mutable_preview_b64();
  ::std::string* release_preview_b64();
  void set_allocated_preview_b64(::std::string* preview_b64);

  // @@protoc_insertion_point(class_scope:expressionService.ExpressionInfo)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr preview_b64_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_expression_2eproto;
};
// -------------------------------------------------------------------

class PlayExpressionsRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:expressionService.PlayExpressionsRequest) */ {
 public:
  PlayExpressionsRequest();
  virtual ~PlayExpressionsRequest();

  PlayExpressionsRequest(const PlayExpressionsRequest& from);

  inline PlayExpressionsRequest& operator=(const PlayExpressionsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayExpressionsRequest(PlayExpressionsRequest&& from) noexcept
    : PlayExpressionsRequest() {
    *this = ::std::move(from);
  }

  inline PlayExpressionsRequest& operator=(PlayExpressionsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const PlayExpressionsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayExpressionsRequest* internal_default_instance() {
    return reinterpret_cast<const PlayExpressionsRequest*>(
               &_PlayExpressionsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(PlayExpressionsRequest* other);
  friend void swap(PlayExpressionsRequest& a, PlayExpressionsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayExpressionsRequest* New() const final {
    return CreateMaybeMessage<PlayExpressionsRequest>(nullptr);
  }

  PlayExpressionsRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PlayExpressionsRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PlayExpressionsRequest& from);
  void MergeFrom(const PlayExpressionsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayExpressionsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .expressionService.ExpressionInfo expressions_info = 1;
  int expressions_info_size() const;
  void clear_expressions_info();
  static const int kExpressionsInfoFieldNumber = 1;
  ::expressionService::ExpressionInfo* mutable_expressions_info(int index);
  ::google::protobuf::RepeatedPtrField< ::expressionService::ExpressionInfo >*
      mutable_expressions_info();
  const ::expressionService::ExpressionInfo& expressions_info(int index) const;
  ::expressionService::ExpressionInfo* add_expressions_info();
  const ::google::protobuf::RepeatedPtrField< ::expressionService::ExpressionInfo >&
      expressions_info() const;

  // uint32 loop_times = 2;
  void clear_loop_times();
  static const int kLoopTimesFieldNumber = 2;
  ::google::protobuf::uint32 loop_times() const;
  void set_loop_times(::google::protobuf::uint32 value);

  // uint32 duration = 3;
  void clear_duration();
  static const int kDurationFieldNumber = 3;
  ::google::protobuf::uint32 duration() const;
  void set_duration(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:expressionService.PlayExpressionsRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::expressionService::ExpressionInfo > expressions_info_;
  ::google::protobuf::uint32 loop_times_;
  ::google::protobuf::uint32 duration_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_expression_2eproto;
};
// -------------------------------------------------------------------

class PlayExpressionsResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:expressionService.PlayExpressionsResponse) */ {
 public:
  PlayExpressionsResponse();
  virtual ~PlayExpressionsResponse();

  PlayExpressionsResponse(const PlayExpressionsResponse& from);

  inline PlayExpressionsResponse& operator=(const PlayExpressionsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayExpressionsResponse(PlayExpressionsResponse&& from) noexcept
    : PlayExpressionsResponse() {
    *this = ::std::move(from);
  }

  inline PlayExpressionsResponse& operator=(PlayExpressionsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const PlayExpressionsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayExpressionsResponse* internal_default_instance() {
    return reinterpret_cast<const PlayExpressionsResponse*>(
               &_PlayExpressionsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(PlayExpressionsResponse* other);
  friend void swap(PlayExpressionsResponse& a, PlayExpressionsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayExpressionsResponse* New() const final {
    return CreateMaybeMessage<PlayExpressionsResponse>(nullptr);
  }

  PlayExpressionsResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PlayExpressionsResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PlayExpressionsResponse& from);
  void MergeFrom(const PlayExpressionsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayExpressionsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:expressionService.PlayExpressionsResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_expression_2eproto;
};
// -------------------------------------------------------------------

class StopExpressionRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:expressionService.StopExpressionRequest) */ {
 public:
  StopExpressionRequest();
  virtual ~StopExpressionRequest();

  StopExpressionRequest(const StopExpressionRequest& from);

  inline StopExpressionRequest& operator=(const StopExpressionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StopExpressionRequest(StopExpressionRequest&& from) noexcept
    : StopExpressionRequest() {
    *this = ::std::move(from);
  }

  inline StopExpressionRequest& operator=(StopExpressionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const StopExpressionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StopExpressionRequest* internal_default_instance() {
    return reinterpret_cast<const StopExpressionRequest*>(
               &_StopExpressionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(StopExpressionRequest* other);
  friend void swap(StopExpressionRequest& a, StopExpressionRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StopExpressionRequest* New() const final {
    return CreateMaybeMessage<StopExpressionRequest>(nullptr);
  }

  StopExpressionRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StopExpressionRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StopExpressionRequest& from);
  void MergeFrom(const StopExpressionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopExpressionRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:expressionService.StopExpressionRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_expression_2eproto;
};
// -------------------------------------------------------------------

class StopExpressionResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:expressionService.StopExpressionResponse) */ {
 public:
  StopExpressionResponse();
  virtual ~StopExpressionResponse();

  StopExpressionResponse(const StopExpressionResponse& from);

  inline StopExpressionResponse& operator=(const StopExpressionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StopExpressionResponse(StopExpressionResponse&& from) noexcept
    : StopExpressionResponse() {
    *this = ::std::move(from);
  }

  inline StopExpressionResponse& operator=(StopExpressionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const StopExpressionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StopExpressionResponse* internal_default_instance() {
    return reinterpret_cast<const StopExpressionResponse*>(
               &_StopExpressionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(StopExpressionResponse* other);
  friend void swap(StopExpressionResponse& a, StopExpressionResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StopExpressionResponse* New() const final {
    return CreateMaybeMessage<StopExpressionResponse>(nullptr);
  }

  StopExpressionResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StopExpressionResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StopExpressionResponse& from);
  void MergeFrom(const StopExpressionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopExpressionResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:expressionService.StopExpressionResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_expression_2eproto;
};
// -------------------------------------------------------------------

class UploadExpressionFileRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:expressionService.UploadExpressionFileRequest) */ {
 public:
  UploadExpressionFileRequest();
  virtual ~UploadExpressionFileRequest();

  UploadExpressionFileRequest(const UploadExpressionFileRequest& from);

  inline UploadExpressionFileRequest& operator=(const UploadExpressionFileRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UploadExpressionFileRequest(UploadExpressionFileRequest&& from) noexcept
    : UploadExpressionFileRequest() {
    *this = ::std::move(from);
  }

  inline UploadExpressionFileRequest& operator=(UploadExpressionFileRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const UploadExpressionFileRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UploadExpressionFileRequest* internal_default_instance() {
    return reinterpret_cast<const UploadExpressionFileRequest*>(
               &_UploadExpressionFileRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(UploadExpressionFileRequest* other);
  friend void swap(UploadExpressionFileRequest& a, UploadExpressionFileRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UploadExpressionFileRequest* New() const final {
    return CreateMaybeMessage<UploadExpressionFileRequest>(nullptr);
  }

  UploadExpressionFileRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UploadExpressionFileRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UploadExpressionFileRequest& from);
  void MergeFrom(const UploadExpressionFileRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UploadExpressionFileRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // bytes data = 2;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:expressionService.UploadExpressionFileRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_expression_2eproto;
};
// -------------------------------------------------------------------

class UploadExpressionFileResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:expressionService.UploadExpressionFileResponse) */ {
 public:
  UploadExpressionFileResponse();
  virtual ~UploadExpressionFileResponse();

  UploadExpressionFileResponse(const UploadExpressionFileResponse& from);

  inline UploadExpressionFileResponse& operator=(const UploadExpressionFileResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UploadExpressionFileResponse(UploadExpressionFileResponse&& from) noexcept
    : UploadExpressionFileResponse() {
    *this = ::std::move(from);
  }

  inline UploadExpressionFileResponse& operator=(UploadExpressionFileResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const UploadExpressionFileResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UploadExpressionFileResponse* internal_default_instance() {
    return reinterpret_cast<const UploadExpressionFileResponse*>(
               &_UploadExpressionFileResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(UploadExpressionFileResponse* other);
  friend void swap(UploadExpressionFileResponse& a, UploadExpressionFileResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UploadExpressionFileResponse* New() const final {
    return CreateMaybeMessage<UploadExpressionFileResponse>(nullptr);
  }

  UploadExpressionFileResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UploadExpressionFileResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UploadExpressionFileResponse& from);
  void MergeFrom(const UploadExpressionFileResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UploadExpressionFileResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .expressionService.ExpressionInfo expression_info = 1;
  bool has_expression_info() const;
  void clear_expression_info();
  static const int kExpressionInfoFieldNumber = 1;
  const ::expressionService::ExpressionInfo& expression_info() const;
  ::expressionService::ExpressionInfo* release_expression_info();
  ::expressionService::ExpressionInfo* mutable_expression_info();
  void set_allocated_expression_info(::expressionService::ExpressionInfo* expression_info);

  // @@protoc_insertion_point(class_scope:expressionService.UploadExpressionFileResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::expressionService::ExpressionInfo* expression_info_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_expression_2eproto;
};
// -------------------------------------------------------------------

class ListExpressionsRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:expressionService.ListExpressionsRequest) */ {
 public:
  ListExpressionsRequest();
  virtual ~ListExpressionsRequest();

  ListExpressionsRequest(const ListExpressionsRequest& from);

  inline ListExpressionsRequest& operator=(const ListExpressionsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListExpressionsRequest(ListExpressionsRequest&& from) noexcept
    : ListExpressionsRequest() {
    *this = ::std::move(from);
  }

  inline ListExpressionsRequest& operator=(ListExpressionsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ListExpressionsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListExpressionsRequest* internal_default_instance() {
    return reinterpret_cast<const ListExpressionsRequest*>(
               &_ListExpressionsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(ListExpressionsRequest* other);
  friend void swap(ListExpressionsRequest& a, ListExpressionsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListExpressionsRequest* New() const final {
    return CreateMaybeMessage<ListExpressionsRequest>(nullptr);
  }

  ListExpressionsRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListExpressionsRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListExpressionsRequest& from);
  void MergeFrom(const ListExpressionsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListExpressionsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:expressionService.ListExpressionsRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_expression_2eproto;
};
// -------------------------------------------------------------------

class ListExpressionsResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:expressionService.ListExpressionsResponse) */ {
 public:
  ListExpressionsResponse();
  virtual ~ListExpressionsResponse();

  ListExpressionsResponse(const ListExpressionsResponse& from);

  inline ListExpressionsResponse& operator=(const ListExpressionsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListExpressionsResponse(ListExpressionsResponse&& from) noexcept
    : ListExpressionsResponse() {
    *this = ::std::move(from);
  }

  inline ListExpressionsResponse& operator=(ListExpressionsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ListExpressionsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListExpressionsResponse* internal_default_instance() {
    return reinterpret_cast<const ListExpressionsResponse*>(
               &_ListExpressionsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(ListExpressionsResponse* other);
  friend void swap(ListExpressionsResponse& a, ListExpressionsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListExpressionsResponse* New() const final {
    return CreateMaybeMessage<ListExpressionsResponse>(nullptr);
  }

  ListExpressionsResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListExpressionsResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListExpressionsResponse& from);
  void MergeFrom(const ListExpressionsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListExpressionsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .expressionService.ExpressionInfo expressions_info = 1;
  int expressions_info_size() const;
  void clear_expressions_info();
  static const int kExpressionsInfoFieldNumber = 1;
  ::expressionService::ExpressionInfo* mutable_expressions_info(int index);
  ::google::protobuf::RepeatedPtrField< ::expressionService::ExpressionInfo >*
      mutable_expressions_info();
  const ::expressionService::ExpressionInfo& expressions_info(int index) const;
  ::expressionService::ExpressionInfo* add_expressions_info();
  const ::google::protobuf::RepeatedPtrField< ::expressionService::ExpressionInfo >&
      expressions_info() const;

  // @@protoc_insertion_point(class_scope:expressionService.ListExpressionsResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::expressionService::ExpressionInfo > expressions_info_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_expression_2eproto;
};
// -------------------------------------------------------------------

class DeleteExpressionsRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:expressionService.DeleteExpressionsRequest) */ {
 public:
  DeleteExpressionsRequest();
  virtual ~DeleteExpressionsRequest();

  DeleteExpressionsRequest(const DeleteExpressionsRequest& from);

  inline DeleteExpressionsRequest& operator=(const DeleteExpressionsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteExpressionsRequest(DeleteExpressionsRequest&& from) noexcept
    : DeleteExpressionsRequest() {
    *this = ::std::move(from);
  }

  inline DeleteExpressionsRequest& operator=(DeleteExpressionsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DeleteExpressionsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteExpressionsRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteExpressionsRequest*>(
               &_DeleteExpressionsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(DeleteExpressionsRequest* other);
  friend void swap(DeleteExpressionsRequest& a, DeleteExpressionsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteExpressionsRequest* New() const final {
    return CreateMaybeMessage<DeleteExpressionsRequest>(nullptr);
  }

  DeleteExpressionsRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeleteExpressionsRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeleteExpressionsRequest& from);
  void MergeFrom(const DeleteExpressionsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteExpressionsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string expressions_id = 1;
  int expressions_id_size() const;
  void clear_expressions_id();
  static const int kExpressionsIdFieldNumber = 1;
  const ::std::string& expressions_id(int index) const;
  ::std::string* mutable_expressions_id(int index);
  void set_expressions_id(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_expressions_id(int index, ::std::string&& value);
  #endif
  void set_expressions_id(int index, const char* value);
  void set_expressions_id(int index, const char* value, size_t size);
  ::std::string* add_expressions_id();
  void add_expressions_id(const ::std::string& value);
  #if LANG_CXX11
  void add_expressions_id(::std::string&& value);
  #endif
  void add_expressions_id(const char* value);
  void add_expressions_id(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& expressions_id() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_expressions_id();

  // @@protoc_insertion_point(class_scope:expressionService.DeleteExpressionsRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> expressions_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_expression_2eproto;
};
// -------------------------------------------------------------------

class DeleteExpressionsResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:expressionService.DeleteExpressionsResponse) */ {
 public:
  DeleteExpressionsResponse();
  virtual ~DeleteExpressionsResponse();

  DeleteExpressionsResponse(const DeleteExpressionsResponse& from);

  inline DeleteExpressionsResponse& operator=(const DeleteExpressionsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteExpressionsResponse(DeleteExpressionsResponse&& from) noexcept
    : DeleteExpressionsResponse() {
    *this = ::std::move(from);
  }

  inline DeleteExpressionsResponse& operator=(DeleteExpressionsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DeleteExpressionsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteExpressionsResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteExpressionsResponse*>(
               &_DeleteExpressionsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(DeleteExpressionsResponse* other);
  friend void swap(DeleteExpressionsResponse& a, DeleteExpressionsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteExpressionsResponse* New() const final {
    return CreateMaybeMessage<DeleteExpressionsResponse>(nullptr);
  }

  DeleteExpressionsResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeleteExpressionsResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeleteExpressionsResponse& from);
  void MergeFrom(const DeleteExpressionsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteExpressionsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:expressionService.DeleteExpressionsResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_expression_2eproto;
};
// -------------------------------------------------------------------

class RenameRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:expressionService.RenameRequest) */ {
 public:
  RenameRequest();
  virtual ~RenameRequest();

  RenameRequest(const RenameRequest& from);

  inline RenameRequest& operator=(const RenameRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RenameRequest(RenameRequest&& from) noexcept
    : RenameRequest() {
    *this = ::std::move(from);
  }

  inline RenameRequest& operator=(RenameRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const RenameRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RenameRequest* internal_default_instance() {
    return reinterpret_cast<const RenameRequest*>(
               &_RenameRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(RenameRequest* other);
  friend void swap(RenameRequest& a, RenameRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RenameRequest* New() const final {
    return CreateMaybeMessage<RenameRequest>(nullptr);
  }

  RenameRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RenameRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RenameRequest& from);
  void MergeFrom(const RenameRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RenameRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:expressionService.RenameRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_expression_2eproto;
};
// -------------------------------------------------------------------

class RenameResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:expressionService.RenameResponse) */ {
 public:
  RenameResponse();
  virtual ~RenameResponse();

  RenameResponse(const RenameResponse& from);

  inline RenameResponse& operator=(const RenameResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RenameResponse(RenameResponse&& from) noexcept
    : RenameResponse() {
    *this = ::std::move(from);
  }

  inline RenameResponse& operator=(RenameResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const RenameResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RenameResponse* internal_default_instance() {
    return reinterpret_cast<const RenameResponse*>(
               &_RenameResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(RenameResponse* other);
  friend void swap(RenameResponse& a, RenameResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RenameResponse* New() const final {
    return CreateMaybeMessage<RenameResponse>(nullptr);
  }

  RenameResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RenameResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RenameResponse& from);
  void MergeFrom(const RenameResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RenameResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:expressionService.RenameResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_expression_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ExpressionInfo

// string id = 1;
inline void ExpressionInfo::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ExpressionInfo::id() const {
  // @@protoc_insertion_point(field_get:expressionService.ExpressionInfo.id)
  return id_.GetNoArena();
}
inline void ExpressionInfo::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:expressionService.ExpressionInfo.id)
}
#if LANG_CXX11
inline void ExpressionInfo::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:expressionService.ExpressionInfo.id)
}
#endif
inline void ExpressionInfo::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:expressionService.ExpressionInfo.id)
}
inline void ExpressionInfo::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:expressionService.ExpressionInfo.id)
}
inline ::std::string* ExpressionInfo::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:expressionService.ExpressionInfo.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExpressionInfo::release_id() {
  // @@protoc_insertion_point(field_release:expressionService.ExpressionInfo.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExpressionInfo::set_allocated_id(::std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:expressionService.ExpressionInfo.id)
}

// string name = 2;
inline void ExpressionInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ExpressionInfo::name() const {
  // @@protoc_insertion_point(field_get:expressionService.ExpressionInfo.name)
  return name_.GetNoArena();
}
inline void ExpressionInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:expressionService.ExpressionInfo.name)
}
#if LANG_CXX11
inline void ExpressionInfo::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:expressionService.ExpressionInfo.name)
}
#endif
inline void ExpressionInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:expressionService.ExpressionInfo.name)
}
inline void ExpressionInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:expressionService.ExpressionInfo.name)
}
inline ::std::string* ExpressionInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:expressionService.ExpressionInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExpressionInfo::release_name() {
  // @@protoc_insertion_point(field_release:expressionService.ExpressionInfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExpressionInfo::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:expressionService.ExpressionInfo.name)
}

// string preview_b64 = 3;
inline void ExpressionInfo::clear_preview_b64() {
  preview_b64_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ExpressionInfo::preview_b64() const {
  // @@protoc_insertion_point(field_get:expressionService.ExpressionInfo.preview_b64)
  return preview_b64_.GetNoArena();
}
inline void ExpressionInfo::set_preview_b64(const ::std::string& value) {
  
  preview_b64_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:expressionService.ExpressionInfo.preview_b64)
}
#if LANG_CXX11
inline void ExpressionInfo::set_preview_b64(::std::string&& value) {
  
  preview_b64_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:expressionService.ExpressionInfo.preview_b64)
}
#endif
inline void ExpressionInfo::set_preview_b64(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  preview_b64_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:expressionService.ExpressionInfo.preview_b64)
}
inline void ExpressionInfo::set_preview_b64(const char* value, size_t size) {
  
  preview_b64_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:expressionService.ExpressionInfo.preview_b64)
}
inline ::std::string* ExpressionInfo::mutable_preview_b64() {
  
  // @@protoc_insertion_point(field_mutable:expressionService.ExpressionInfo.preview_b64)
  return preview_b64_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExpressionInfo::release_preview_b64() {
  // @@protoc_insertion_point(field_release:expressionService.ExpressionInfo.preview_b64)
  
  return preview_b64_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExpressionInfo::set_allocated_preview_b64(::std::string* preview_b64) {
  if (preview_b64 != nullptr) {
    
  } else {
    
  }
  preview_b64_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), preview_b64);
  // @@protoc_insertion_point(field_set_allocated:expressionService.ExpressionInfo.preview_b64)
}

// -------------------------------------------------------------------

// PlayExpressionsRequest

// repeated .expressionService.ExpressionInfo expressions_info = 1;
inline int PlayExpressionsRequest::expressions_info_size() const {
  return expressions_info_.size();
}
inline void PlayExpressionsRequest::clear_expressions_info() {
  expressions_info_.Clear();
}
inline ::expressionService::ExpressionInfo* PlayExpressionsRequest::mutable_expressions_info(int index) {
  // @@protoc_insertion_point(field_mutable:expressionService.PlayExpressionsRequest.expressions_info)
  return expressions_info_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::expressionService::ExpressionInfo >*
PlayExpressionsRequest::mutable_expressions_info() {
  // @@protoc_insertion_point(field_mutable_list:expressionService.PlayExpressionsRequest.expressions_info)
  return &expressions_info_;
}
inline const ::expressionService::ExpressionInfo& PlayExpressionsRequest::expressions_info(int index) const {
  // @@protoc_insertion_point(field_get:expressionService.PlayExpressionsRequest.expressions_info)
  return expressions_info_.Get(index);
}
inline ::expressionService::ExpressionInfo* PlayExpressionsRequest::add_expressions_info() {
  // @@protoc_insertion_point(field_add:expressionService.PlayExpressionsRequest.expressions_info)
  return expressions_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::expressionService::ExpressionInfo >&
PlayExpressionsRequest::expressions_info() const {
  // @@protoc_insertion_point(field_list:expressionService.PlayExpressionsRequest.expressions_info)
  return expressions_info_;
}

// uint32 loop_times = 2;
inline void PlayExpressionsRequest::clear_loop_times() {
  loop_times_ = 0u;
}
inline ::google::protobuf::uint32 PlayExpressionsRequest::loop_times() const {
  // @@protoc_insertion_point(field_get:expressionService.PlayExpressionsRequest.loop_times)
  return loop_times_;
}
inline void PlayExpressionsRequest::set_loop_times(::google::protobuf::uint32 value) {
  
  loop_times_ = value;
  // @@protoc_insertion_point(field_set:expressionService.PlayExpressionsRequest.loop_times)
}

// uint32 duration = 3;
inline void PlayExpressionsRequest::clear_duration() {
  duration_ = 0u;
}
inline ::google::protobuf::uint32 PlayExpressionsRequest::duration() const {
  // @@protoc_insertion_point(field_get:expressionService.PlayExpressionsRequest.duration)
  return duration_;
}
inline void PlayExpressionsRequest::set_duration(::google::protobuf::uint32 value) {
  
  duration_ = value;
  // @@protoc_insertion_point(field_set:expressionService.PlayExpressionsRequest.duration)
}

// -------------------------------------------------------------------

// PlayExpressionsResponse

// -------------------------------------------------------------------

// StopExpressionRequest

// -------------------------------------------------------------------

// StopExpressionResponse

// -------------------------------------------------------------------

// UploadExpressionFileRequest

// string name = 1;
inline void UploadExpressionFileRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UploadExpressionFileRequest::name() const {
  // @@protoc_insertion_point(field_get:expressionService.UploadExpressionFileRequest.name)
  return name_.GetNoArena();
}
inline void UploadExpressionFileRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:expressionService.UploadExpressionFileRequest.name)
}
#if LANG_CXX11
inline void UploadExpressionFileRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:expressionService.UploadExpressionFileRequest.name)
}
#endif
inline void UploadExpressionFileRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:expressionService.UploadExpressionFileRequest.name)
}
inline void UploadExpressionFileRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:expressionService.UploadExpressionFileRequest.name)
}
inline ::std::string* UploadExpressionFileRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:expressionService.UploadExpressionFileRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UploadExpressionFileRequest::release_name() {
  // @@protoc_insertion_point(field_release:expressionService.UploadExpressionFileRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UploadExpressionFileRequest::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:expressionService.UploadExpressionFileRequest.name)
}

// bytes data = 2;
inline void UploadExpressionFileRequest::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UploadExpressionFileRequest::data() const {
  // @@protoc_insertion_point(field_get:expressionService.UploadExpressionFileRequest.data)
  return data_.GetNoArena();
}
inline void UploadExpressionFileRequest::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:expressionService.UploadExpressionFileRequest.data)
}
#if LANG_CXX11
inline void UploadExpressionFileRequest::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:expressionService.UploadExpressionFileRequest.data)
}
#endif
inline void UploadExpressionFileRequest::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:expressionService.UploadExpressionFileRequest.data)
}
inline void UploadExpressionFileRequest::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:expressionService.UploadExpressionFileRequest.data)
}
inline ::std::string* UploadExpressionFileRequest::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:expressionService.UploadExpressionFileRequest.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UploadExpressionFileRequest::release_data() {
  // @@protoc_insertion_point(field_release:expressionService.UploadExpressionFileRequest.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UploadExpressionFileRequest::set_allocated_data(::std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:expressionService.UploadExpressionFileRequest.data)
}

// -------------------------------------------------------------------

// UploadExpressionFileResponse

// .expressionService.ExpressionInfo expression_info = 1;
inline bool UploadExpressionFileResponse::has_expression_info() const {
  return this != internal_default_instance() && expression_info_ != nullptr;
}
inline void UploadExpressionFileResponse::clear_expression_info() {
  if (GetArenaNoVirtual() == nullptr && expression_info_ != nullptr) {
    delete expression_info_;
  }
  expression_info_ = nullptr;
}
inline const ::expressionService::ExpressionInfo& UploadExpressionFileResponse::expression_info() const {
  const ::expressionService::ExpressionInfo* p = expression_info_;
  // @@protoc_insertion_point(field_get:expressionService.UploadExpressionFileResponse.expression_info)
  return p != nullptr ? *p : *reinterpret_cast<const ::expressionService::ExpressionInfo*>(
      &::expressionService::_ExpressionInfo_default_instance_);
}
inline ::expressionService::ExpressionInfo* UploadExpressionFileResponse::release_expression_info() {
  // @@protoc_insertion_point(field_release:expressionService.UploadExpressionFileResponse.expression_info)
  
  ::expressionService::ExpressionInfo* temp = expression_info_;
  expression_info_ = nullptr;
  return temp;
}
inline ::expressionService::ExpressionInfo* UploadExpressionFileResponse::mutable_expression_info() {
  
  if (expression_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::expressionService::ExpressionInfo>(GetArenaNoVirtual());
    expression_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:expressionService.UploadExpressionFileResponse.expression_info)
  return expression_info_;
}
inline void UploadExpressionFileResponse::set_allocated_expression_info(::expressionService::ExpressionInfo* expression_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete expression_info_;
  }
  if (expression_info) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      expression_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, expression_info, submessage_arena);
    }
    
  } else {
    
  }
  expression_info_ = expression_info;
  // @@protoc_insertion_point(field_set_allocated:expressionService.UploadExpressionFileResponse.expression_info)
}

// -------------------------------------------------------------------

// ListExpressionsRequest

// -------------------------------------------------------------------

// ListExpressionsResponse

// repeated .expressionService.ExpressionInfo expressions_info = 1;
inline int ListExpressionsResponse::expressions_info_size() const {
  return expressions_info_.size();
}
inline void ListExpressionsResponse::clear_expressions_info() {
  expressions_info_.Clear();
}
inline ::expressionService::ExpressionInfo* ListExpressionsResponse::mutable_expressions_info(int index) {
  // @@protoc_insertion_point(field_mutable:expressionService.ListExpressionsResponse.expressions_info)
  return expressions_info_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::expressionService::ExpressionInfo >*
ListExpressionsResponse::mutable_expressions_info() {
  // @@protoc_insertion_point(field_mutable_list:expressionService.ListExpressionsResponse.expressions_info)
  return &expressions_info_;
}
inline const ::expressionService::ExpressionInfo& ListExpressionsResponse::expressions_info(int index) const {
  // @@protoc_insertion_point(field_get:expressionService.ListExpressionsResponse.expressions_info)
  return expressions_info_.Get(index);
}
inline ::expressionService::ExpressionInfo* ListExpressionsResponse::add_expressions_info() {
  // @@protoc_insertion_point(field_add:expressionService.ListExpressionsResponse.expressions_info)
  return expressions_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::expressionService::ExpressionInfo >&
ListExpressionsResponse::expressions_info() const {
  // @@protoc_insertion_point(field_list:expressionService.ListExpressionsResponse.expressions_info)
  return expressions_info_;
}

// -------------------------------------------------------------------

// DeleteExpressionsRequest

// repeated string expressions_id = 1;
inline int DeleteExpressionsRequest::expressions_id_size() const {
  return expressions_id_.size();
}
inline void DeleteExpressionsRequest::clear_expressions_id() {
  expressions_id_.Clear();
}
inline const ::std::string& DeleteExpressionsRequest::expressions_id(int index) const {
  // @@protoc_insertion_point(field_get:expressionService.DeleteExpressionsRequest.expressions_id)
  return expressions_id_.Get(index);
}
inline ::std::string* DeleteExpressionsRequest::mutable_expressions_id(int index) {
  // @@protoc_insertion_point(field_mutable:expressionService.DeleteExpressionsRequest.expressions_id)
  return expressions_id_.Mutable(index);
}
inline void DeleteExpressionsRequest::set_expressions_id(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:expressionService.DeleteExpressionsRequest.expressions_id)
  expressions_id_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void DeleteExpressionsRequest::set_expressions_id(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:expressionService.DeleteExpressionsRequest.expressions_id)
  expressions_id_.Mutable(index)->assign(std::move(value));
}
#endif
inline void DeleteExpressionsRequest::set_expressions_id(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  expressions_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:expressionService.DeleteExpressionsRequest.expressions_id)
}
inline void DeleteExpressionsRequest::set_expressions_id(int index, const char* value, size_t size) {
  expressions_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:expressionService.DeleteExpressionsRequest.expressions_id)
}
inline ::std::string* DeleteExpressionsRequest::add_expressions_id() {
  // @@protoc_insertion_point(field_add_mutable:expressionService.DeleteExpressionsRequest.expressions_id)
  return expressions_id_.Add();
}
inline void DeleteExpressionsRequest::add_expressions_id(const ::std::string& value) {
  expressions_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:expressionService.DeleteExpressionsRequest.expressions_id)
}
#if LANG_CXX11
inline void DeleteExpressionsRequest::add_expressions_id(::std::string&& value) {
  expressions_id_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:expressionService.DeleteExpressionsRequest.expressions_id)
}
#endif
inline void DeleteExpressionsRequest::add_expressions_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  expressions_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:expressionService.DeleteExpressionsRequest.expressions_id)
}
inline void DeleteExpressionsRequest::add_expressions_id(const char* value, size_t size) {
  expressions_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:expressionService.DeleteExpressionsRequest.expressions_id)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
DeleteExpressionsRequest::expressions_id() const {
  // @@protoc_insertion_point(field_list:expressionService.DeleteExpressionsRequest.expressions_id)
  return expressions_id_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
DeleteExpressionsRequest::mutable_expressions_id() {
  // @@protoc_insertion_point(field_mutable_list:expressionService.DeleteExpressionsRequest.expressions_id)
  return &expressions_id_;
}

// -------------------------------------------------------------------

// DeleteExpressionsResponse

// -------------------------------------------------------------------

// RenameRequest

// string id = 1;
inline void RenameRequest::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RenameRequest::id() const {
  // @@protoc_insertion_point(field_get:expressionService.RenameRequest.id)
  return id_.GetNoArena();
}
inline void RenameRequest::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:expressionService.RenameRequest.id)
}
#if LANG_CXX11
inline void RenameRequest::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:expressionService.RenameRequest.id)
}
#endif
inline void RenameRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:expressionService.RenameRequest.id)
}
inline void RenameRequest::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:expressionService.RenameRequest.id)
}
inline ::std::string* RenameRequest::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:expressionService.RenameRequest.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RenameRequest::release_id() {
  // @@protoc_insertion_point(field_release:expressionService.RenameRequest.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RenameRequest::set_allocated_id(::std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:expressionService.RenameRequest.id)
}

// string name = 2;
inline void RenameRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RenameRequest::name() const {
  // @@protoc_insertion_point(field_get:expressionService.RenameRequest.name)
  return name_.GetNoArena();
}
inline void RenameRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:expressionService.RenameRequest.name)
}
#if LANG_CXX11
inline void RenameRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:expressionService.RenameRequest.name)
}
#endif
inline void RenameRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:expressionService.RenameRequest.name)
}
inline void RenameRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:expressionService.RenameRequest.name)
}
inline ::std::string* RenameRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:expressionService.RenameRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RenameRequest::release_name() {
  // @@protoc_insertion_point(field_release:expressionService.RenameRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RenameRequest::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:expressionService.RenameRequest.name)
}

// -------------------------------------------------------------------

// RenameResponse

// string id = 1;
inline void RenameResponse::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RenameResponse::id() const {
  // @@protoc_insertion_point(field_get:expressionService.RenameResponse.id)
  return id_.GetNoArena();
}
inline void RenameResponse::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:expressionService.RenameResponse.id)
}
#if LANG_CXX11
inline void RenameResponse::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:expressionService.RenameResponse.id)
}
#endif
inline void RenameResponse::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:expressionService.RenameResponse.id)
}
inline void RenameResponse::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:expressionService.RenameResponse.id)
}
inline ::std::string* RenameResponse::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:expressionService.RenameResponse.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RenameResponse::release_id() {
  // @@protoc_insertion_point(field_release:expressionService.RenameResponse.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RenameResponse::set_allocated_id(::std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:expressionService.RenameResponse.id)
}

// string name = 2;
inline void RenameResponse::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RenameResponse::name() const {
  // @@protoc_insertion_point(field_get:expressionService.RenameResponse.name)
  return name_.GetNoArena();
}
inline void RenameResponse::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:expressionService.RenameResponse.name)
}
#if LANG_CXX11
inline void RenameResponse::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:expressionService.RenameResponse.name)
}
#endif
inline void RenameResponse::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:expressionService.RenameResponse.name)
}
inline void RenameResponse::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:expressionService.RenameResponse.name)
}
inline ::std::string* RenameResponse::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:expressionService.RenameResponse.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RenameResponse::release_name() {
  // @@protoc_insertion_point(field_release:expressionService.RenameResponse.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RenameResponse::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:expressionService.RenameResponse.name)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace expressionService

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_expression_2eproto
