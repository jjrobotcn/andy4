// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: expression.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30002
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30002 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class ExpressionInfo;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - ExpressionRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
@interface ExpressionRoot : GPBRootObject
@end

#pragma mark - ExpressionInfo

typedef GPB_ENUM(ExpressionInfo_FieldNumber) {
  ExpressionInfo_FieldNumber_Id_p = 1,
  ExpressionInfo_FieldNumber_Name = 2,
  ExpressionInfo_FieldNumber_PreviewB64 = 3,
};

/**
 * 表情对象
 **/
@interface ExpressionInfo : GPBMessage

/** 表情id */
@property(nonatomic, readwrite, copy, null_resettable) NSString *id_p;

/** 表情名 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *name;

/** 预览图 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *previewB64;

@end

#pragma mark - PlayExpressionsRequest

typedef GPB_ENUM(PlayExpressionsRequest_FieldNumber) {
  PlayExpressionsRequest_FieldNumber_ExpressionsInfoArray = 1,
  PlayExpressionsRequest_FieldNumber_LoopTimes = 2,
  PlayExpressionsRequest_FieldNumber_Duration = 3,
};

/**
 * 播放表情请求
 **/
@interface PlayExpressionsRequest : GPBMessage

/**
 * 播放的表情对象列表
 * 可仅填入id项或表情名
 **/
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<ExpressionInfo*> *expressionsInfoArray;
/** The number of items in @c expressionsInfoArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger expressionsInfoArray_Count;

/**
 * 循环播放
 * 0: 持续循环
 **/
@property(nonatomic, readwrite) uint32_t loopTimes;

/**
 * 切换间隔ms
 * 每套表情间的间隔
 **/
@property(nonatomic, readwrite) uint32_t duration;

@end

#pragma mark - PlayExpressionsResponse

/**
 * 播放表情结果
 **/
@interface PlayExpressionsResponse : GPBMessage

@end

#pragma mark - StopExpressionRequest

/**
 * 停止表情请求
 **/
@interface StopExpressionRequest : GPBMessage

@end

#pragma mark - StopExpressionResponse

/**
 * 停止表情结果
 **/
@interface StopExpressionResponse : GPBMessage

@end

#pragma mark - UploadExpressionFileRequest

typedef GPB_ENUM(UploadExpressionFileRequest_FieldNumber) {
  UploadExpressionFileRequest_FieldNumber_Name = 1,
  UploadExpressionFileRequest_FieldNumber_Data_p = 2,
};

/**
 * 上传表情请求
 **/
@interface UploadExpressionFileRequest : GPBMessage

/**
 * 表情名
 * 为空时将产生随机表情名
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *name;

/** 表情zip文件 */
@property(nonatomic, readwrite, copy, null_resettable) NSData *data_p;

@end

#pragma mark - UploadExpressionFileResponse

typedef GPB_ENUM(UploadExpressionFileResponse_FieldNumber) {
  UploadExpressionFileResponse_FieldNumber_ExpressionInfo = 1,
};

/**
 * 上传表情结果
 **/
@interface UploadExpressionFileResponse : GPBMessage

/** 表情对象 */
@property(nonatomic, readwrite, strong, null_resettable) ExpressionInfo *expressionInfo;
/** Test to see if @c expressionInfo has been set. */
@property(nonatomic, readwrite) BOOL hasExpressionInfo;

@end

#pragma mark - ListExpressionsRequest

/**
 * 获取表情数据请求
 **/
@interface ListExpressionsRequest : GPBMessage

@end

#pragma mark - ListExpressionsResponse

typedef GPB_ENUM(ListExpressionsResponse_FieldNumber) {
  ListExpressionsResponse_FieldNumber_ExpressionsInfoArray = 1,
};

/**
 * 获取表情数据结果
 **/
@interface ListExpressionsResponse : GPBMessage

/** 表情对象列表 */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<ExpressionInfo*> *expressionsInfoArray;
/** The number of items in @c expressionsInfoArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger expressionsInfoArray_Count;

@end

#pragma mark - DeleteExpressionsRequest

typedef GPB_ENUM(DeleteExpressionsRequest_FieldNumber) {
  DeleteExpressionsRequest_FieldNumber_ExpressionsIdArray = 1,
};

/**
 * 删除表情请求
 **/
@interface DeleteExpressionsRequest : GPBMessage

/** 删除表情id列表 */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *expressionsIdArray;
/** The number of items in @c expressionsIdArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger expressionsIdArray_Count;

@end

#pragma mark - DeleteExpressionsResponse

/**
 * 删除表情结果
 **/
@interface DeleteExpressionsResponse : GPBMessage

@end

#pragma mark - RenameRequest

typedef GPB_ENUM(RenameRequest_FieldNumber) {
  RenameRequest_FieldNumber_Id_p = 1,
  RenameRequest_FieldNumber_Name = 2,
};

/**
 * 表情重命名请求
 **/
@interface RenameRequest : GPBMessage

/** 表情id */
@property(nonatomic, readwrite, copy, null_resettable) NSString *id_p;

/** 新表情名 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *name;

@end

#pragma mark - RenameResponse

typedef GPB_ENUM(RenameResponse_FieldNumber) {
  RenameResponse_FieldNumber_Id_p = 1,
  RenameResponse_FieldNumber_Name = 2,
};

/**
 * 表情重命名结果
 **/
@interface RenameResponse : GPBMessage

/** 表情id */
@property(nonatomic, readwrite, copy, null_resettable) NSString *id_p;

/** 表情名 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *name;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
