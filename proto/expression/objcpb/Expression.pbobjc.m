// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: expression.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "Expression.pbobjc.h"
#import "google/api/Annotations.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - ExpressionRoot

@implementation ExpressionRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    registry = [[GPBExtensionRegistry alloc] init];
    // Merge in the imports (direct or indirect) that defined extensions.
    [registry addExtensions:[GAPIAnnotationsRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - ExpressionRoot_FileDescriptor

static GPBFileDescriptor *ExpressionRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"expressionService"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - ExpressionInfo

@implementation ExpressionInfo

@dynamic id_p;
@dynamic name;
@dynamic previewB64;

typedef struct ExpressionInfo__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
  NSString *name;
  NSString *previewB64;
} ExpressionInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = ExpressionInfo_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ExpressionInfo__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = ExpressionInfo_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ExpressionInfo__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "previewB64",
        .dataTypeSpecific.className = NULL,
        .number = ExpressionInfo_FieldNumber_PreviewB64,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ExpressionInfo__storage_, previewB64),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ExpressionInfo class]
                                     rootClass:[ExpressionRoot class]
                                          file:ExpressionRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ExpressionInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PlayExpressionsRequest

@implementation PlayExpressionsRequest

@dynamic expressionsInfoArray, expressionsInfoArray_Count;
@dynamic loopTimes;
@dynamic duration;

typedef struct PlayExpressionsRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t loopTimes;
  uint32_t duration;
  NSMutableArray *expressionsInfoArray;
} PlayExpressionsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "expressionsInfoArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ExpressionInfo),
        .number = PlayExpressionsRequest_FieldNumber_ExpressionsInfoArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PlayExpressionsRequest__storage_, expressionsInfoArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "loopTimes",
        .dataTypeSpecific.className = NULL,
        .number = PlayExpressionsRequest_FieldNumber_LoopTimes,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PlayExpressionsRequest__storage_, loopTimes),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "duration",
        .dataTypeSpecific.className = NULL,
        .number = PlayExpressionsRequest_FieldNumber_Duration,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PlayExpressionsRequest__storage_, duration),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PlayExpressionsRequest class]
                                     rootClass:[ExpressionRoot class]
                                          file:ExpressionRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PlayExpressionsRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PlayExpressionsResponse

@implementation PlayExpressionsResponse


typedef struct PlayExpressionsResponse__storage_ {
  uint32_t _has_storage_[1];
} PlayExpressionsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PlayExpressionsResponse class]
                                     rootClass:[ExpressionRoot class]
                                          file:ExpressionRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PlayExpressionsResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - StopExpressionRequest

@implementation StopExpressionRequest


typedef struct StopExpressionRequest__storage_ {
  uint32_t _has_storage_[1];
} StopExpressionRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[StopExpressionRequest class]
                                     rootClass:[ExpressionRoot class]
                                          file:ExpressionRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(StopExpressionRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - StopExpressionResponse

@implementation StopExpressionResponse


typedef struct StopExpressionResponse__storage_ {
  uint32_t _has_storage_[1];
} StopExpressionResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[StopExpressionResponse class]
                                     rootClass:[ExpressionRoot class]
                                          file:ExpressionRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(StopExpressionResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UploadExpressionFileRequest

@implementation UploadExpressionFileRequest

@dynamic name;
@dynamic data_p;

typedef struct UploadExpressionFileRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *name;
  NSData *data_p;
} UploadExpressionFileRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = UploadExpressionFileRequest_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UploadExpressionFileRequest__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "data_p",
        .dataTypeSpecific.className = NULL,
        .number = UploadExpressionFileRequest_FieldNumber_Data_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UploadExpressionFileRequest__storage_, data_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UploadExpressionFileRequest class]
                                     rootClass:[ExpressionRoot class]
                                          file:ExpressionRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UploadExpressionFileRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UploadExpressionFileResponse

@implementation UploadExpressionFileResponse

@dynamic hasExpressionInfo, expressionInfo;

typedef struct UploadExpressionFileResponse__storage_ {
  uint32_t _has_storage_[1];
  ExpressionInfo *expressionInfo;
} UploadExpressionFileResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "expressionInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(ExpressionInfo),
        .number = UploadExpressionFileResponse_FieldNumber_ExpressionInfo,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UploadExpressionFileResponse__storage_, expressionInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UploadExpressionFileResponse class]
                                     rootClass:[ExpressionRoot class]
                                          file:ExpressionRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UploadExpressionFileResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ListExpressionsRequest

@implementation ListExpressionsRequest


typedef struct ListExpressionsRequest__storage_ {
  uint32_t _has_storage_[1];
} ListExpressionsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ListExpressionsRequest class]
                                     rootClass:[ExpressionRoot class]
                                          file:ExpressionRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(ListExpressionsRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ListExpressionsResponse

@implementation ListExpressionsResponse

@dynamic expressionsInfoArray, expressionsInfoArray_Count;

typedef struct ListExpressionsResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *expressionsInfoArray;
} ListExpressionsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "expressionsInfoArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ExpressionInfo),
        .number = ListExpressionsResponse_FieldNumber_ExpressionsInfoArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ListExpressionsResponse__storage_, expressionsInfoArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ListExpressionsResponse class]
                                     rootClass:[ExpressionRoot class]
                                          file:ExpressionRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ListExpressionsResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DeleteExpressionsRequest

@implementation DeleteExpressionsRequest

@dynamic expressionsIdArray, expressionsIdArray_Count;

typedef struct DeleteExpressionsRequest__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *expressionsIdArray;
} DeleteExpressionsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "expressionsIdArray",
        .dataTypeSpecific.className = NULL,
        .number = DeleteExpressionsRequest_FieldNumber_ExpressionsIdArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(DeleteExpressionsRequest__storage_, expressionsIdArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DeleteExpressionsRequest class]
                                     rootClass:[ExpressionRoot class]
                                          file:ExpressionRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DeleteExpressionsRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DeleteExpressionsResponse

@implementation DeleteExpressionsResponse


typedef struct DeleteExpressionsResponse__storage_ {
  uint32_t _has_storage_[1];
} DeleteExpressionsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DeleteExpressionsResponse class]
                                     rootClass:[ExpressionRoot class]
                                          file:ExpressionRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(DeleteExpressionsResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RenameRequest

@implementation RenameRequest

@dynamic id_p;
@dynamic name;

typedef struct RenameRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
  NSString *name;
} RenameRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = RenameRequest_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RenameRequest__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = RenameRequest_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RenameRequest__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RenameRequest class]
                                     rootClass:[ExpressionRoot class]
                                          file:ExpressionRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RenameRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RenameResponse

@implementation RenameResponse

@dynamic id_p;
@dynamic name;

typedef struct RenameResponse__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
  NSString *name;
} RenameResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = RenameResponse_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RenameResponse__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = RenameResponse_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RenameResponse__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RenameResponse class]
                                     rootClass:[ExpressionRoot class]
                                          file:ExpressionRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RenameResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
