// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: faceset.proto
#ifndef GRPC_faceset_2eproto__INCLUDED
#define GRPC_faceset_2eproto__INCLUDED

#include "faceset.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc_impl {
class CompletionQueue;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc_impl

namespace grpc {
namespace experimental {
template <typename RequestT, typename ResponseT>
class MessageAllocator;
}  // namespace experimental
}  // namespace grpc

namespace faceRecognition {

class FaceSetService final {
 public:
  static constexpr char const* service_full_name() {
    return "faceRecognition.FaceSetService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // NewFaceSet创建一个FaceSet
    virtual ::grpc::Status NewFaceSet(::grpc::ClientContext* context, const ::faceRecognition::NewFaceSetRequest& request, ::faceRecognition::NewFaceSetResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::faceRecognition::NewFaceSetResponse>> AsyncNewFaceSet(::grpc::ClientContext* context, const ::faceRecognition::NewFaceSetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::faceRecognition::NewFaceSetResponse>>(AsyncNewFaceSetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::faceRecognition::NewFaceSetResponse>> PrepareAsyncNewFaceSet(::grpc::ClientContext* context, const ::faceRecognition::NewFaceSetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::faceRecognition::NewFaceSetResponse>>(PrepareAsyncNewFaceSetRaw(context, request, cq));
    }
    // DeleteFaceSet删除一个FaceSet
    virtual ::grpc::Status DeleteFaceSet(::grpc::ClientContext* context, const ::faceRecognition::DeleteFaceSetRequest& request, ::faceRecognition::DeleteFaceSetResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::faceRecognition::DeleteFaceSetResponse>> AsyncDeleteFaceSet(::grpc::ClientContext* context, const ::faceRecognition::DeleteFaceSetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::faceRecognition::DeleteFaceSetResponse>>(AsyncDeleteFaceSetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::faceRecognition::DeleteFaceSetResponse>> PrepareAsyncDeleteFaceSet(::grpc::ClientContext* context, const ::faceRecognition::DeleteFaceSetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::faceRecognition::DeleteFaceSetResponse>>(PrepareAsyncDeleteFaceSetRaw(context, request, cq));
    }
    // UpdateFaceSet更新一个FaceSet基础信息
    virtual ::grpc::Status UpdateFaceSet(::grpc::ClientContext* context, const ::faceRecognition::UpdateFaceSetRequest& request, ::faceRecognition::UpdateFaceSetResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::faceRecognition::UpdateFaceSetResponse>> AsyncUpdateFaceSet(::grpc::ClientContext* context, const ::faceRecognition::UpdateFaceSetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::faceRecognition::UpdateFaceSetResponse>>(AsyncUpdateFaceSetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::faceRecognition::UpdateFaceSetResponse>> PrepareAsyncUpdateFaceSet(::grpc::ClientContext* context, const ::faceRecognition::UpdateFaceSetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::faceRecognition::UpdateFaceSetResponse>>(PrepareAsyncUpdateFaceSetRaw(context, request, cq));
    }
    // ListFaceSets列举所有FaceSets
    virtual ::grpc::Status ListFaceSets(::grpc::ClientContext* context, const ::faceRecognition::ListFaceSetsRequest& request, ::faceRecognition::ListFaceSetsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::faceRecognition::ListFaceSetsResponse>> AsyncListFaceSets(::grpc::ClientContext* context, const ::faceRecognition::ListFaceSetsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::faceRecognition::ListFaceSetsResponse>>(AsyncListFaceSetsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::faceRecognition::ListFaceSetsResponse>> PrepareAsyncListFaceSets(::grpc::ClientContext* context, const ::faceRecognition::ListFaceSetsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::faceRecognition::ListFaceSetsResponse>>(PrepareAsyncListFaceSetsRaw(context, request, cq));
    }
    // AddFace将识别一张人脸图片并将结果添加至对应FaceSet中
    virtual ::grpc::Status AddFace(::grpc::ClientContext* context, const ::faceRecognition::AddFaceRequest& request, ::faceRecognition::AddFaceResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::faceRecognition::AddFaceResponse>> AsyncAddFace(::grpc::ClientContext* context, const ::faceRecognition::AddFaceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::faceRecognition::AddFaceResponse>>(AsyncAddFaceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::faceRecognition::AddFaceResponse>> PrepareAsyncAddFace(::grpc::ClientContext* context, const ::faceRecognition::AddFaceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::faceRecognition::AddFaceResponse>>(PrepareAsyncAddFaceRaw(context, request, cq));
    }
    // RemoveFace将从FaceSet中移除对应FaceToken
    virtual ::grpc::Status RemoveFace(::grpc::ClientContext* context, const ::faceRecognition::RemoveFaceRequest& request, ::faceRecognition::RemoveFaceResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::faceRecognition::RemoveFaceResponse>> AsyncRemoveFace(::grpc::ClientContext* context, const ::faceRecognition::RemoveFaceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::faceRecognition::RemoveFaceResponse>>(AsyncRemoveFaceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::faceRecognition::RemoveFaceResponse>> PrepareAsyncRemoveFace(::grpc::ClientContext* context, const ::faceRecognition::RemoveFaceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::faceRecognition::RemoveFaceResponse>>(PrepareAsyncRemoveFaceRaw(context, request, cq));
    }
    // FaceDetail通过face_token获取对应的FaceDetail
    virtual ::grpc::Status FaceDetail(::grpc::ClientContext* context, const ::faceRecognition::FaceDetailRequest& request, ::faceRecognition::FaceDetailResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::faceRecognition::FaceDetailResponse>> AsyncFaceDetail(::grpc::ClientContext* context, const ::faceRecognition::FaceDetailRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::faceRecognition::FaceDetailResponse>>(AsyncFaceDetailRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::faceRecognition::FaceDetailResponse>> PrepareAsyncFaceDetail(::grpc::ClientContext* context, const ::faceRecognition::FaceDetailRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::faceRecognition::FaceDetailResponse>>(PrepareAsyncFaceDetailRaw(context, request, cq));
    }
    // ListFaceDetails返回指定FaceSet中的FaceDetails
    virtual ::grpc::Status ListFaceDetails(::grpc::ClientContext* context, const ::faceRecognition::ListFaceDetailsRequest& request, ::faceRecognition::ListFaceDetailsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::faceRecognition::ListFaceDetailsResponse>> AsyncListFaceDetails(::grpc::ClientContext* context, const ::faceRecognition::ListFaceDetailsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::faceRecognition::ListFaceDetailsResponse>>(AsyncListFaceDetailsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::faceRecognition::ListFaceDetailsResponse>> PrepareAsyncListFaceDetails(::grpc::ClientContext* context, const ::faceRecognition::ListFaceDetailsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::faceRecognition::ListFaceDetailsResponse>>(PrepareAsyncListFaceDetailsRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // NewFaceSet创建一个FaceSet
      virtual void NewFaceSet(::grpc::ClientContext* context, const ::faceRecognition::NewFaceSetRequest* request, ::faceRecognition::NewFaceSetResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void NewFaceSet(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::faceRecognition::NewFaceSetResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void NewFaceSet(::grpc::ClientContext* context, const ::faceRecognition::NewFaceSetRequest* request, ::faceRecognition::NewFaceSetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void NewFaceSet(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::faceRecognition::NewFaceSetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // DeleteFaceSet删除一个FaceSet
      virtual void DeleteFaceSet(::grpc::ClientContext* context, const ::faceRecognition::DeleteFaceSetRequest* request, ::faceRecognition::DeleteFaceSetResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteFaceSet(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::faceRecognition::DeleteFaceSetResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteFaceSet(::grpc::ClientContext* context, const ::faceRecognition::DeleteFaceSetRequest* request, ::faceRecognition::DeleteFaceSetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void DeleteFaceSet(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::faceRecognition::DeleteFaceSetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // UpdateFaceSet更新一个FaceSet基础信息
      virtual void UpdateFaceSet(::grpc::ClientContext* context, const ::faceRecognition::UpdateFaceSetRequest* request, ::faceRecognition::UpdateFaceSetResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateFaceSet(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::faceRecognition::UpdateFaceSetResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateFaceSet(::grpc::ClientContext* context, const ::faceRecognition::UpdateFaceSetRequest* request, ::faceRecognition::UpdateFaceSetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void UpdateFaceSet(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::faceRecognition::UpdateFaceSetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // ListFaceSets列举所有FaceSets
      virtual void ListFaceSets(::grpc::ClientContext* context, const ::faceRecognition::ListFaceSetsRequest* request, ::faceRecognition::ListFaceSetsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListFaceSets(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::faceRecognition::ListFaceSetsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListFaceSets(::grpc::ClientContext* context, const ::faceRecognition::ListFaceSetsRequest* request, ::faceRecognition::ListFaceSetsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void ListFaceSets(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::faceRecognition::ListFaceSetsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // AddFace将识别一张人脸图片并将结果添加至对应FaceSet中
      virtual void AddFace(::grpc::ClientContext* context, const ::faceRecognition::AddFaceRequest* request, ::faceRecognition::AddFaceResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AddFace(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::faceRecognition::AddFaceResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AddFace(::grpc::ClientContext* context, const ::faceRecognition::AddFaceRequest* request, ::faceRecognition::AddFaceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void AddFace(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::faceRecognition::AddFaceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // RemoveFace将从FaceSet中移除对应FaceToken
      virtual void RemoveFace(::grpc::ClientContext* context, const ::faceRecognition::RemoveFaceRequest* request, ::faceRecognition::RemoveFaceResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RemoveFace(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::faceRecognition::RemoveFaceResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RemoveFace(::grpc::ClientContext* context, const ::faceRecognition::RemoveFaceRequest* request, ::faceRecognition::RemoveFaceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void RemoveFace(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::faceRecognition::RemoveFaceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // FaceDetail通过face_token获取对应的FaceDetail
      virtual void FaceDetail(::grpc::ClientContext* context, const ::faceRecognition::FaceDetailRequest* request, ::faceRecognition::FaceDetailResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void FaceDetail(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::faceRecognition::FaceDetailResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void FaceDetail(::grpc::ClientContext* context, const ::faceRecognition::FaceDetailRequest* request, ::faceRecognition::FaceDetailResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void FaceDetail(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::faceRecognition::FaceDetailResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // ListFaceDetails返回指定FaceSet中的FaceDetails
      virtual void ListFaceDetails(::grpc::ClientContext* context, const ::faceRecognition::ListFaceDetailsRequest* request, ::faceRecognition::ListFaceDetailsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListFaceDetails(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::faceRecognition::ListFaceDetailsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListFaceDetails(::grpc::ClientContext* context, const ::faceRecognition::ListFaceDetailsRequest* request, ::faceRecognition::ListFaceDetailsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void ListFaceDetails(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::faceRecognition::ListFaceDetailsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::faceRecognition::NewFaceSetResponse>* AsyncNewFaceSetRaw(::grpc::ClientContext* context, const ::faceRecognition::NewFaceSetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::faceRecognition::NewFaceSetResponse>* PrepareAsyncNewFaceSetRaw(::grpc::ClientContext* context, const ::faceRecognition::NewFaceSetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::faceRecognition::DeleteFaceSetResponse>* AsyncDeleteFaceSetRaw(::grpc::ClientContext* context, const ::faceRecognition::DeleteFaceSetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::faceRecognition::DeleteFaceSetResponse>* PrepareAsyncDeleteFaceSetRaw(::grpc::ClientContext* context, const ::faceRecognition::DeleteFaceSetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::faceRecognition::UpdateFaceSetResponse>* AsyncUpdateFaceSetRaw(::grpc::ClientContext* context, const ::faceRecognition::UpdateFaceSetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::faceRecognition::UpdateFaceSetResponse>* PrepareAsyncUpdateFaceSetRaw(::grpc::ClientContext* context, const ::faceRecognition::UpdateFaceSetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::faceRecognition::ListFaceSetsResponse>* AsyncListFaceSetsRaw(::grpc::ClientContext* context, const ::faceRecognition::ListFaceSetsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::faceRecognition::ListFaceSetsResponse>* PrepareAsyncListFaceSetsRaw(::grpc::ClientContext* context, const ::faceRecognition::ListFaceSetsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::faceRecognition::AddFaceResponse>* AsyncAddFaceRaw(::grpc::ClientContext* context, const ::faceRecognition::AddFaceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::faceRecognition::AddFaceResponse>* PrepareAsyncAddFaceRaw(::grpc::ClientContext* context, const ::faceRecognition::AddFaceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::faceRecognition::RemoveFaceResponse>* AsyncRemoveFaceRaw(::grpc::ClientContext* context, const ::faceRecognition::RemoveFaceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::faceRecognition::RemoveFaceResponse>* PrepareAsyncRemoveFaceRaw(::grpc::ClientContext* context, const ::faceRecognition::RemoveFaceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::faceRecognition::FaceDetailResponse>* AsyncFaceDetailRaw(::grpc::ClientContext* context, const ::faceRecognition::FaceDetailRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::faceRecognition::FaceDetailResponse>* PrepareAsyncFaceDetailRaw(::grpc::ClientContext* context, const ::faceRecognition::FaceDetailRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::faceRecognition::ListFaceDetailsResponse>* AsyncListFaceDetailsRaw(::grpc::ClientContext* context, const ::faceRecognition::ListFaceDetailsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::faceRecognition::ListFaceDetailsResponse>* PrepareAsyncListFaceDetailsRaw(::grpc::ClientContext* context, const ::faceRecognition::ListFaceDetailsRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status NewFaceSet(::grpc::ClientContext* context, const ::faceRecognition::NewFaceSetRequest& request, ::faceRecognition::NewFaceSetResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::faceRecognition::NewFaceSetResponse>> AsyncNewFaceSet(::grpc::ClientContext* context, const ::faceRecognition::NewFaceSetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::faceRecognition::NewFaceSetResponse>>(AsyncNewFaceSetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::faceRecognition::NewFaceSetResponse>> PrepareAsyncNewFaceSet(::grpc::ClientContext* context, const ::faceRecognition::NewFaceSetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::faceRecognition::NewFaceSetResponse>>(PrepareAsyncNewFaceSetRaw(context, request, cq));
    }
    ::grpc::Status DeleteFaceSet(::grpc::ClientContext* context, const ::faceRecognition::DeleteFaceSetRequest& request, ::faceRecognition::DeleteFaceSetResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::faceRecognition::DeleteFaceSetResponse>> AsyncDeleteFaceSet(::grpc::ClientContext* context, const ::faceRecognition::DeleteFaceSetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::faceRecognition::DeleteFaceSetResponse>>(AsyncDeleteFaceSetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::faceRecognition::DeleteFaceSetResponse>> PrepareAsyncDeleteFaceSet(::grpc::ClientContext* context, const ::faceRecognition::DeleteFaceSetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::faceRecognition::DeleteFaceSetResponse>>(PrepareAsyncDeleteFaceSetRaw(context, request, cq));
    }
    ::grpc::Status UpdateFaceSet(::grpc::ClientContext* context, const ::faceRecognition::UpdateFaceSetRequest& request, ::faceRecognition::UpdateFaceSetResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::faceRecognition::UpdateFaceSetResponse>> AsyncUpdateFaceSet(::grpc::ClientContext* context, const ::faceRecognition::UpdateFaceSetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::faceRecognition::UpdateFaceSetResponse>>(AsyncUpdateFaceSetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::faceRecognition::UpdateFaceSetResponse>> PrepareAsyncUpdateFaceSet(::grpc::ClientContext* context, const ::faceRecognition::UpdateFaceSetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::faceRecognition::UpdateFaceSetResponse>>(PrepareAsyncUpdateFaceSetRaw(context, request, cq));
    }
    ::grpc::Status ListFaceSets(::grpc::ClientContext* context, const ::faceRecognition::ListFaceSetsRequest& request, ::faceRecognition::ListFaceSetsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::faceRecognition::ListFaceSetsResponse>> AsyncListFaceSets(::grpc::ClientContext* context, const ::faceRecognition::ListFaceSetsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::faceRecognition::ListFaceSetsResponse>>(AsyncListFaceSetsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::faceRecognition::ListFaceSetsResponse>> PrepareAsyncListFaceSets(::grpc::ClientContext* context, const ::faceRecognition::ListFaceSetsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::faceRecognition::ListFaceSetsResponse>>(PrepareAsyncListFaceSetsRaw(context, request, cq));
    }
    ::grpc::Status AddFace(::grpc::ClientContext* context, const ::faceRecognition::AddFaceRequest& request, ::faceRecognition::AddFaceResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::faceRecognition::AddFaceResponse>> AsyncAddFace(::grpc::ClientContext* context, const ::faceRecognition::AddFaceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::faceRecognition::AddFaceResponse>>(AsyncAddFaceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::faceRecognition::AddFaceResponse>> PrepareAsyncAddFace(::grpc::ClientContext* context, const ::faceRecognition::AddFaceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::faceRecognition::AddFaceResponse>>(PrepareAsyncAddFaceRaw(context, request, cq));
    }
    ::grpc::Status RemoveFace(::grpc::ClientContext* context, const ::faceRecognition::RemoveFaceRequest& request, ::faceRecognition::RemoveFaceResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::faceRecognition::RemoveFaceResponse>> AsyncRemoveFace(::grpc::ClientContext* context, const ::faceRecognition::RemoveFaceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::faceRecognition::RemoveFaceResponse>>(AsyncRemoveFaceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::faceRecognition::RemoveFaceResponse>> PrepareAsyncRemoveFace(::grpc::ClientContext* context, const ::faceRecognition::RemoveFaceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::faceRecognition::RemoveFaceResponse>>(PrepareAsyncRemoveFaceRaw(context, request, cq));
    }
    ::grpc::Status FaceDetail(::grpc::ClientContext* context, const ::faceRecognition::FaceDetailRequest& request, ::faceRecognition::FaceDetailResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::faceRecognition::FaceDetailResponse>> AsyncFaceDetail(::grpc::ClientContext* context, const ::faceRecognition::FaceDetailRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::faceRecognition::FaceDetailResponse>>(AsyncFaceDetailRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::faceRecognition::FaceDetailResponse>> PrepareAsyncFaceDetail(::grpc::ClientContext* context, const ::faceRecognition::FaceDetailRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::faceRecognition::FaceDetailResponse>>(PrepareAsyncFaceDetailRaw(context, request, cq));
    }
    ::grpc::Status ListFaceDetails(::grpc::ClientContext* context, const ::faceRecognition::ListFaceDetailsRequest& request, ::faceRecognition::ListFaceDetailsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::faceRecognition::ListFaceDetailsResponse>> AsyncListFaceDetails(::grpc::ClientContext* context, const ::faceRecognition::ListFaceDetailsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::faceRecognition::ListFaceDetailsResponse>>(AsyncListFaceDetailsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::faceRecognition::ListFaceDetailsResponse>> PrepareAsyncListFaceDetails(::grpc::ClientContext* context, const ::faceRecognition::ListFaceDetailsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::faceRecognition::ListFaceDetailsResponse>>(PrepareAsyncListFaceDetailsRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void NewFaceSet(::grpc::ClientContext* context, const ::faceRecognition::NewFaceSetRequest* request, ::faceRecognition::NewFaceSetResponse* response, std::function<void(::grpc::Status)>) override;
      void NewFaceSet(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::faceRecognition::NewFaceSetResponse* response, std::function<void(::grpc::Status)>) override;
      void NewFaceSet(::grpc::ClientContext* context, const ::faceRecognition::NewFaceSetRequest* request, ::faceRecognition::NewFaceSetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void NewFaceSet(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::faceRecognition::NewFaceSetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void DeleteFaceSet(::grpc::ClientContext* context, const ::faceRecognition::DeleteFaceSetRequest* request, ::faceRecognition::DeleteFaceSetResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteFaceSet(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::faceRecognition::DeleteFaceSetResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteFaceSet(::grpc::ClientContext* context, const ::faceRecognition::DeleteFaceSetRequest* request, ::faceRecognition::DeleteFaceSetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void DeleteFaceSet(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::faceRecognition::DeleteFaceSetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void UpdateFaceSet(::grpc::ClientContext* context, const ::faceRecognition::UpdateFaceSetRequest* request, ::faceRecognition::UpdateFaceSetResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateFaceSet(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::faceRecognition::UpdateFaceSetResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateFaceSet(::grpc::ClientContext* context, const ::faceRecognition::UpdateFaceSetRequest* request, ::faceRecognition::UpdateFaceSetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void UpdateFaceSet(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::faceRecognition::UpdateFaceSetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void ListFaceSets(::grpc::ClientContext* context, const ::faceRecognition::ListFaceSetsRequest* request, ::faceRecognition::ListFaceSetsResponse* response, std::function<void(::grpc::Status)>) override;
      void ListFaceSets(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::faceRecognition::ListFaceSetsResponse* response, std::function<void(::grpc::Status)>) override;
      void ListFaceSets(::grpc::ClientContext* context, const ::faceRecognition::ListFaceSetsRequest* request, ::faceRecognition::ListFaceSetsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void ListFaceSets(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::faceRecognition::ListFaceSetsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void AddFace(::grpc::ClientContext* context, const ::faceRecognition::AddFaceRequest* request, ::faceRecognition::AddFaceResponse* response, std::function<void(::grpc::Status)>) override;
      void AddFace(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::faceRecognition::AddFaceResponse* response, std::function<void(::grpc::Status)>) override;
      void AddFace(::grpc::ClientContext* context, const ::faceRecognition::AddFaceRequest* request, ::faceRecognition::AddFaceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void AddFace(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::faceRecognition::AddFaceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void RemoveFace(::grpc::ClientContext* context, const ::faceRecognition::RemoveFaceRequest* request, ::faceRecognition::RemoveFaceResponse* response, std::function<void(::grpc::Status)>) override;
      void RemoveFace(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::faceRecognition::RemoveFaceResponse* response, std::function<void(::grpc::Status)>) override;
      void RemoveFace(::grpc::ClientContext* context, const ::faceRecognition::RemoveFaceRequest* request, ::faceRecognition::RemoveFaceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void RemoveFace(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::faceRecognition::RemoveFaceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void FaceDetail(::grpc::ClientContext* context, const ::faceRecognition::FaceDetailRequest* request, ::faceRecognition::FaceDetailResponse* response, std::function<void(::grpc::Status)>) override;
      void FaceDetail(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::faceRecognition::FaceDetailResponse* response, std::function<void(::grpc::Status)>) override;
      void FaceDetail(::grpc::ClientContext* context, const ::faceRecognition::FaceDetailRequest* request, ::faceRecognition::FaceDetailResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void FaceDetail(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::faceRecognition::FaceDetailResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void ListFaceDetails(::grpc::ClientContext* context, const ::faceRecognition::ListFaceDetailsRequest* request, ::faceRecognition::ListFaceDetailsResponse* response, std::function<void(::grpc::Status)>) override;
      void ListFaceDetails(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::faceRecognition::ListFaceDetailsResponse* response, std::function<void(::grpc::Status)>) override;
      void ListFaceDetails(::grpc::ClientContext* context, const ::faceRecognition::ListFaceDetailsRequest* request, ::faceRecognition::ListFaceDetailsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void ListFaceDetails(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::faceRecognition::ListFaceDetailsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::faceRecognition::NewFaceSetResponse>* AsyncNewFaceSetRaw(::grpc::ClientContext* context, const ::faceRecognition::NewFaceSetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::faceRecognition::NewFaceSetResponse>* PrepareAsyncNewFaceSetRaw(::grpc::ClientContext* context, const ::faceRecognition::NewFaceSetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::faceRecognition::DeleteFaceSetResponse>* AsyncDeleteFaceSetRaw(::grpc::ClientContext* context, const ::faceRecognition::DeleteFaceSetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::faceRecognition::DeleteFaceSetResponse>* PrepareAsyncDeleteFaceSetRaw(::grpc::ClientContext* context, const ::faceRecognition::DeleteFaceSetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::faceRecognition::UpdateFaceSetResponse>* AsyncUpdateFaceSetRaw(::grpc::ClientContext* context, const ::faceRecognition::UpdateFaceSetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::faceRecognition::UpdateFaceSetResponse>* PrepareAsyncUpdateFaceSetRaw(::grpc::ClientContext* context, const ::faceRecognition::UpdateFaceSetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::faceRecognition::ListFaceSetsResponse>* AsyncListFaceSetsRaw(::grpc::ClientContext* context, const ::faceRecognition::ListFaceSetsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::faceRecognition::ListFaceSetsResponse>* PrepareAsyncListFaceSetsRaw(::grpc::ClientContext* context, const ::faceRecognition::ListFaceSetsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::faceRecognition::AddFaceResponse>* AsyncAddFaceRaw(::grpc::ClientContext* context, const ::faceRecognition::AddFaceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::faceRecognition::AddFaceResponse>* PrepareAsyncAddFaceRaw(::grpc::ClientContext* context, const ::faceRecognition::AddFaceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::faceRecognition::RemoveFaceResponse>* AsyncRemoveFaceRaw(::grpc::ClientContext* context, const ::faceRecognition::RemoveFaceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::faceRecognition::RemoveFaceResponse>* PrepareAsyncRemoveFaceRaw(::grpc::ClientContext* context, const ::faceRecognition::RemoveFaceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::faceRecognition::FaceDetailResponse>* AsyncFaceDetailRaw(::grpc::ClientContext* context, const ::faceRecognition::FaceDetailRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::faceRecognition::FaceDetailResponse>* PrepareAsyncFaceDetailRaw(::grpc::ClientContext* context, const ::faceRecognition::FaceDetailRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::faceRecognition::ListFaceDetailsResponse>* AsyncListFaceDetailsRaw(::grpc::ClientContext* context, const ::faceRecognition::ListFaceDetailsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::faceRecognition::ListFaceDetailsResponse>* PrepareAsyncListFaceDetailsRaw(::grpc::ClientContext* context, const ::faceRecognition::ListFaceDetailsRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_NewFaceSet_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteFaceSet_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateFaceSet_;
    const ::grpc::internal::RpcMethod rpcmethod_ListFaceSets_;
    const ::grpc::internal::RpcMethod rpcmethod_AddFace_;
    const ::grpc::internal::RpcMethod rpcmethod_RemoveFace_;
    const ::grpc::internal::RpcMethod rpcmethod_FaceDetail_;
    const ::grpc::internal::RpcMethod rpcmethod_ListFaceDetails_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // NewFaceSet创建一个FaceSet
    virtual ::grpc::Status NewFaceSet(::grpc::ServerContext* context, const ::faceRecognition::NewFaceSetRequest* request, ::faceRecognition::NewFaceSetResponse* response);
    // DeleteFaceSet删除一个FaceSet
    virtual ::grpc::Status DeleteFaceSet(::grpc::ServerContext* context, const ::faceRecognition::DeleteFaceSetRequest* request, ::faceRecognition::DeleteFaceSetResponse* response);
    // UpdateFaceSet更新一个FaceSet基础信息
    virtual ::grpc::Status UpdateFaceSet(::grpc::ServerContext* context, const ::faceRecognition::UpdateFaceSetRequest* request, ::faceRecognition::UpdateFaceSetResponse* response);
    // ListFaceSets列举所有FaceSets
    virtual ::grpc::Status ListFaceSets(::grpc::ServerContext* context, const ::faceRecognition::ListFaceSetsRequest* request, ::faceRecognition::ListFaceSetsResponse* response);
    // AddFace将识别一张人脸图片并将结果添加至对应FaceSet中
    virtual ::grpc::Status AddFace(::grpc::ServerContext* context, const ::faceRecognition::AddFaceRequest* request, ::faceRecognition::AddFaceResponse* response);
    // RemoveFace将从FaceSet中移除对应FaceToken
    virtual ::grpc::Status RemoveFace(::grpc::ServerContext* context, const ::faceRecognition::RemoveFaceRequest* request, ::faceRecognition::RemoveFaceResponse* response);
    // FaceDetail通过face_token获取对应的FaceDetail
    virtual ::grpc::Status FaceDetail(::grpc::ServerContext* context, const ::faceRecognition::FaceDetailRequest* request, ::faceRecognition::FaceDetailResponse* response);
    // ListFaceDetails返回指定FaceSet中的FaceDetails
    virtual ::grpc::Status ListFaceDetails(::grpc::ServerContext* context, const ::faceRecognition::ListFaceDetailsRequest* request, ::faceRecognition::ListFaceDetailsResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_NewFaceSet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_NewFaceSet() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_NewFaceSet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewFaceSet(::grpc::ServerContext* context, const ::faceRecognition::NewFaceSetRequest* request, ::faceRecognition::NewFaceSetResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNewFaceSet(::grpc::ServerContext* context, ::faceRecognition::NewFaceSetRequest* request, ::grpc::ServerAsyncResponseWriter< ::faceRecognition::NewFaceSetResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteFaceSet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DeleteFaceSet() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_DeleteFaceSet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteFaceSet(::grpc::ServerContext* context, const ::faceRecognition::DeleteFaceSetRequest* request, ::faceRecognition::DeleteFaceSetResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteFaceSet(::grpc::ServerContext* context, ::faceRecognition::DeleteFaceSetRequest* request, ::grpc::ServerAsyncResponseWriter< ::faceRecognition::DeleteFaceSetResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateFaceSet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_UpdateFaceSet() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_UpdateFaceSet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateFaceSet(::grpc::ServerContext* context, const ::faceRecognition::UpdateFaceSetRequest* request, ::faceRecognition::UpdateFaceSetResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateFaceSet(::grpc::ServerContext* context, ::faceRecognition::UpdateFaceSetRequest* request, ::grpc::ServerAsyncResponseWriter< ::faceRecognition::UpdateFaceSetResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListFaceSets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListFaceSets() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_ListFaceSets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListFaceSets(::grpc::ServerContext* context, const ::faceRecognition::ListFaceSetsRequest* request, ::faceRecognition::ListFaceSetsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListFaceSets(::grpc::ServerContext* context, ::faceRecognition::ListFaceSetsRequest* request, ::grpc::ServerAsyncResponseWriter< ::faceRecognition::ListFaceSetsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddFace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_AddFace() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_AddFace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddFace(::grpc::ServerContext* context, const ::faceRecognition::AddFaceRequest* request, ::faceRecognition::AddFaceResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddFace(::grpc::ServerContext* context, ::faceRecognition::AddFaceRequest* request, ::grpc::ServerAsyncResponseWriter< ::faceRecognition::AddFaceResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RemoveFace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_RemoveFace() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_RemoveFace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveFace(::grpc::ServerContext* context, const ::faceRecognition::RemoveFaceRequest* request, ::faceRecognition::RemoveFaceResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveFace(::grpc::ServerContext* context, ::faceRecognition::RemoveFaceRequest* request, ::grpc::ServerAsyncResponseWriter< ::faceRecognition::RemoveFaceResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FaceDetail : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_FaceDetail() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_FaceDetail() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FaceDetail(::grpc::ServerContext* context, const ::faceRecognition::FaceDetailRequest* request, ::faceRecognition::FaceDetailResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFaceDetail(::grpc::ServerContext* context, ::faceRecognition::FaceDetailRequest* request, ::grpc::ServerAsyncResponseWriter< ::faceRecognition::FaceDetailResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListFaceDetails : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListFaceDetails() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_ListFaceDetails() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListFaceDetails(::grpc::ServerContext* context, const ::faceRecognition::ListFaceDetailsRequest* request, ::faceRecognition::ListFaceDetailsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListFaceDetails(::grpc::ServerContext* context, ::faceRecognition::ListFaceDetailsRequest* request, ::grpc::ServerAsyncResponseWriter< ::faceRecognition::ListFaceDetailsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_NewFaceSet<WithAsyncMethod_DeleteFaceSet<WithAsyncMethod_UpdateFaceSet<WithAsyncMethod_ListFaceSets<WithAsyncMethod_AddFace<WithAsyncMethod_RemoveFace<WithAsyncMethod_FaceDetail<WithAsyncMethod_ListFaceDetails<Service > > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_NewFaceSet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_NewFaceSet() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::faceRecognition::NewFaceSetRequest, ::faceRecognition::NewFaceSetResponse>(
          [this](::grpc::ServerContext* context,
                 const ::faceRecognition::NewFaceSetRequest* request,
                 ::faceRecognition::NewFaceSetResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->NewFaceSet(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_NewFaceSet(
        ::grpc::experimental::MessageAllocator< ::faceRecognition::NewFaceSetRequest, ::faceRecognition::NewFaceSetResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::faceRecognition::NewFaceSetRequest, ::faceRecognition::NewFaceSetResponse>*>(
          ::grpc::Service::experimental().GetHandler(0))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_NewFaceSet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewFaceSet(::grpc::ServerContext* context, const ::faceRecognition::NewFaceSetRequest* request, ::faceRecognition::NewFaceSetResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void NewFaceSet(::grpc::ServerContext* context, const ::faceRecognition::NewFaceSetRequest* request, ::faceRecognition::NewFaceSetResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeleteFaceSet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_DeleteFaceSet() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::faceRecognition::DeleteFaceSetRequest, ::faceRecognition::DeleteFaceSetResponse>(
          [this](::grpc::ServerContext* context,
                 const ::faceRecognition::DeleteFaceSetRequest* request,
                 ::faceRecognition::DeleteFaceSetResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->DeleteFaceSet(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_DeleteFaceSet(
        ::grpc::experimental::MessageAllocator< ::faceRecognition::DeleteFaceSetRequest, ::faceRecognition::DeleteFaceSetResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::faceRecognition::DeleteFaceSetRequest, ::faceRecognition::DeleteFaceSetResponse>*>(
          ::grpc::Service::experimental().GetHandler(1))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DeleteFaceSet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteFaceSet(::grpc::ServerContext* context, const ::faceRecognition::DeleteFaceSetRequest* request, ::faceRecognition::DeleteFaceSetResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void DeleteFaceSet(::grpc::ServerContext* context, const ::faceRecognition::DeleteFaceSetRequest* request, ::faceRecognition::DeleteFaceSetResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_UpdateFaceSet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_UpdateFaceSet() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::faceRecognition::UpdateFaceSetRequest, ::faceRecognition::UpdateFaceSetResponse>(
          [this](::grpc::ServerContext* context,
                 const ::faceRecognition::UpdateFaceSetRequest* request,
                 ::faceRecognition::UpdateFaceSetResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->UpdateFaceSet(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_UpdateFaceSet(
        ::grpc::experimental::MessageAllocator< ::faceRecognition::UpdateFaceSetRequest, ::faceRecognition::UpdateFaceSetResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::faceRecognition::UpdateFaceSetRequest, ::faceRecognition::UpdateFaceSetResponse>*>(
          ::grpc::Service::experimental().GetHandler(2))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_UpdateFaceSet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateFaceSet(::grpc::ServerContext* context, const ::faceRecognition::UpdateFaceSetRequest* request, ::faceRecognition::UpdateFaceSetResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void UpdateFaceSet(::grpc::ServerContext* context, const ::faceRecognition::UpdateFaceSetRequest* request, ::faceRecognition::UpdateFaceSetResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ListFaceSets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_ListFaceSets() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::faceRecognition::ListFaceSetsRequest, ::faceRecognition::ListFaceSetsResponse>(
          [this](::grpc::ServerContext* context,
                 const ::faceRecognition::ListFaceSetsRequest* request,
                 ::faceRecognition::ListFaceSetsResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->ListFaceSets(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_ListFaceSets(
        ::grpc::experimental::MessageAllocator< ::faceRecognition::ListFaceSetsRequest, ::faceRecognition::ListFaceSetsResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::faceRecognition::ListFaceSetsRequest, ::faceRecognition::ListFaceSetsResponse>*>(
          ::grpc::Service::experimental().GetHandler(3))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ListFaceSets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListFaceSets(::grpc::ServerContext* context, const ::faceRecognition::ListFaceSetsRequest* request, ::faceRecognition::ListFaceSetsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ListFaceSets(::grpc::ServerContext* context, const ::faceRecognition::ListFaceSetsRequest* request, ::faceRecognition::ListFaceSetsResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_AddFace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_AddFace() {
      ::grpc::Service::experimental().MarkMethodCallback(4,
        new ::grpc::internal::CallbackUnaryHandler< ::faceRecognition::AddFaceRequest, ::faceRecognition::AddFaceResponse>(
          [this](::grpc::ServerContext* context,
                 const ::faceRecognition::AddFaceRequest* request,
                 ::faceRecognition::AddFaceResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->AddFace(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_AddFace(
        ::grpc::experimental::MessageAllocator< ::faceRecognition::AddFaceRequest, ::faceRecognition::AddFaceResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::faceRecognition::AddFaceRequest, ::faceRecognition::AddFaceResponse>*>(
          ::grpc::Service::experimental().GetHandler(4))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_AddFace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddFace(::grpc::ServerContext* context, const ::faceRecognition::AddFaceRequest* request, ::faceRecognition::AddFaceResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void AddFace(::grpc::ServerContext* context, const ::faceRecognition::AddFaceRequest* request, ::faceRecognition::AddFaceResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RemoveFace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_RemoveFace() {
      ::grpc::Service::experimental().MarkMethodCallback(5,
        new ::grpc::internal::CallbackUnaryHandler< ::faceRecognition::RemoveFaceRequest, ::faceRecognition::RemoveFaceResponse>(
          [this](::grpc::ServerContext* context,
                 const ::faceRecognition::RemoveFaceRequest* request,
                 ::faceRecognition::RemoveFaceResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->RemoveFace(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_RemoveFace(
        ::grpc::experimental::MessageAllocator< ::faceRecognition::RemoveFaceRequest, ::faceRecognition::RemoveFaceResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::faceRecognition::RemoveFaceRequest, ::faceRecognition::RemoveFaceResponse>*>(
          ::grpc::Service::experimental().GetHandler(5))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_RemoveFace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveFace(::grpc::ServerContext* context, const ::faceRecognition::RemoveFaceRequest* request, ::faceRecognition::RemoveFaceResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void RemoveFace(::grpc::ServerContext* context, const ::faceRecognition::RemoveFaceRequest* request, ::faceRecognition::RemoveFaceResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_FaceDetail : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_FaceDetail() {
      ::grpc::Service::experimental().MarkMethodCallback(6,
        new ::grpc::internal::CallbackUnaryHandler< ::faceRecognition::FaceDetailRequest, ::faceRecognition::FaceDetailResponse>(
          [this](::grpc::ServerContext* context,
                 const ::faceRecognition::FaceDetailRequest* request,
                 ::faceRecognition::FaceDetailResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->FaceDetail(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_FaceDetail(
        ::grpc::experimental::MessageAllocator< ::faceRecognition::FaceDetailRequest, ::faceRecognition::FaceDetailResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::faceRecognition::FaceDetailRequest, ::faceRecognition::FaceDetailResponse>*>(
          ::grpc::Service::experimental().GetHandler(6))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_FaceDetail() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FaceDetail(::grpc::ServerContext* context, const ::faceRecognition::FaceDetailRequest* request, ::faceRecognition::FaceDetailResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void FaceDetail(::grpc::ServerContext* context, const ::faceRecognition::FaceDetailRequest* request, ::faceRecognition::FaceDetailResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ListFaceDetails : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_ListFaceDetails() {
      ::grpc::Service::experimental().MarkMethodCallback(7,
        new ::grpc::internal::CallbackUnaryHandler< ::faceRecognition::ListFaceDetailsRequest, ::faceRecognition::ListFaceDetailsResponse>(
          [this](::grpc::ServerContext* context,
                 const ::faceRecognition::ListFaceDetailsRequest* request,
                 ::faceRecognition::ListFaceDetailsResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->ListFaceDetails(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_ListFaceDetails(
        ::grpc::experimental::MessageAllocator< ::faceRecognition::ListFaceDetailsRequest, ::faceRecognition::ListFaceDetailsResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::faceRecognition::ListFaceDetailsRequest, ::faceRecognition::ListFaceDetailsResponse>*>(
          ::grpc::Service::experimental().GetHandler(7))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ListFaceDetails() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListFaceDetails(::grpc::ServerContext* context, const ::faceRecognition::ListFaceDetailsRequest* request, ::faceRecognition::ListFaceDetailsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ListFaceDetails(::grpc::ServerContext* context, const ::faceRecognition::ListFaceDetailsRequest* request, ::faceRecognition::ListFaceDetailsResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_NewFaceSet<ExperimentalWithCallbackMethod_DeleteFaceSet<ExperimentalWithCallbackMethod_UpdateFaceSet<ExperimentalWithCallbackMethod_ListFaceSets<ExperimentalWithCallbackMethod_AddFace<ExperimentalWithCallbackMethod_RemoveFace<ExperimentalWithCallbackMethod_FaceDetail<ExperimentalWithCallbackMethod_ListFaceDetails<Service > > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_NewFaceSet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_NewFaceSet() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_NewFaceSet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewFaceSet(::grpc::ServerContext* context, const ::faceRecognition::NewFaceSetRequest* request, ::faceRecognition::NewFaceSetResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteFaceSet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DeleteFaceSet() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_DeleteFaceSet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteFaceSet(::grpc::ServerContext* context, const ::faceRecognition::DeleteFaceSetRequest* request, ::faceRecognition::DeleteFaceSetResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateFaceSet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_UpdateFaceSet() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_UpdateFaceSet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateFaceSet(::grpc::ServerContext* context, const ::faceRecognition::UpdateFaceSetRequest* request, ::faceRecognition::UpdateFaceSetResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListFaceSets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListFaceSets() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_ListFaceSets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListFaceSets(::grpc::ServerContext* context, const ::faceRecognition::ListFaceSetsRequest* request, ::faceRecognition::ListFaceSetsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddFace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_AddFace() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_AddFace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddFace(::grpc::ServerContext* context, const ::faceRecognition::AddFaceRequest* request, ::faceRecognition::AddFaceResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RemoveFace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_RemoveFace() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_RemoveFace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveFace(::grpc::ServerContext* context, const ::faceRecognition::RemoveFaceRequest* request, ::faceRecognition::RemoveFaceResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FaceDetail : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_FaceDetail() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_FaceDetail() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FaceDetail(::grpc::ServerContext* context, const ::faceRecognition::FaceDetailRequest* request, ::faceRecognition::FaceDetailResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListFaceDetails : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListFaceDetails() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_ListFaceDetails() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListFaceDetails(::grpc::ServerContext* context, const ::faceRecognition::ListFaceDetailsRequest* request, ::faceRecognition::ListFaceDetailsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_NewFaceSet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_NewFaceSet() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_NewFaceSet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewFaceSet(::grpc::ServerContext* context, const ::faceRecognition::NewFaceSetRequest* request, ::faceRecognition::NewFaceSetResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNewFaceSet(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteFaceSet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_DeleteFaceSet() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_DeleteFaceSet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteFaceSet(::grpc::ServerContext* context, const ::faceRecognition::DeleteFaceSetRequest* request, ::faceRecognition::DeleteFaceSetResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteFaceSet(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateFaceSet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_UpdateFaceSet() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_UpdateFaceSet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateFaceSet(::grpc::ServerContext* context, const ::faceRecognition::UpdateFaceSetRequest* request, ::faceRecognition::UpdateFaceSetResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateFaceSet(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListFaceSets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ListFaceSets() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_ListFaceSets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListFaceSets(::grpc::ServerContext* context, const ::faceRecognition::ListFaceSetsRequest* request, ::faceRecognition::ListFaceSetsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListFaceSets(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddFace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_AddFace() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_AddFace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddFace(::grpc::ServerContext* context, const ::faceRecognition::AddFaceRequest* request, ::faceRecognition::AddFaceResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddFace(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RemoveFace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_RemoveFace() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_RemoveFace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveFace(::grpc::ServerContext* context, const ::faceRecognition::RemoveFaceRequest* request, ::faceRecognition::RemoveFaceResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveFace(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_FaceDetail : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_FaceDetail() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_FaceDetail() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FaceDetail(::grpc::ServerContext* context, const ::faceRecognition::FaceDetailRequest* request, ::faceRecognition::FaceDetailResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFaceDetail(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListFaceDetails : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ListFaceDetails() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_ListFaceDetails() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListFaceDetails(::grpc::ServerContext* context, const ::faceRecognition::ListFaceDetailsRequest* request, ::faceRecognition::ListFaceDetailsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListFaceDetails(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_NewFaceSet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_NewFaceSet() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->NewFaceSet(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_NewFaceSet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewFaceSet(::grpc::ServerContext* context, const ::faceRecognition::NewFaceSetRequest* request, ::faceRecognition::NewFaceSetResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void NewFaceSet(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeleteFaceSet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_DeleteFaceSet() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->DeleteFaceSet(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_DeleteFaceSet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteFaceSet(::grpc::ServerContext* context, const ::faceRecognition::DeleteFaceSetRequest* request, ::faceRecognition::DeleteFaceSetResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void DeleteFaceSet(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_UpdateFaceSet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_UpdateFaceSet() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->UpdateFaceSet(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_UpdateFaceSet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateFaceSet(::grpc::ServerContext* context, const ::faceRecognition::UpdateFaceSetRequest* request, ::faceRecognition::UpdateFaceSetResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void UpdateFaceSet(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ListFaceSets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_ListFaceSets() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->ListFaceSets(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_ListFaceSets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListFaceSets(::grpc::ServerContext* context, const ::faceRecognition::ListFaceSetsRequest* request, ::faceRecognition::ListFaceSetsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ListFaceSets(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_AddFace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_AddFace() {
      ::grpc::Service::experimental().MarkMethodRawCallback(4,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->AddFace(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_AddFace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddFace(::grpc::ServerContext* context, const ::faceRecognition::AddFaceRequest* request, ::faceRecognition::AddFaceResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void AddFace(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RemoveFace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_RemoveFace() {
      ::grpc::Service::experimental().MarkMethodRawCallback(5,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->RemoveFace(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_RemoveFace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveFace(::grpc::ServerContext* context, const ::faceRecognition::RemoveFaceRequest* request, ::faceRecognition::RemoveFaceResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void RemoveFace(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_FaceDetail : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_FaceDetail() {
      ::grpc::Service::experimental().MarkMethodRawCallback(6,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->FaceDetail(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_FaceDetail() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FaceDetail(::grpc::ServerContext* context, const ::faceRecognition::FaceDetailRequest* request, ::faceRecognition::FaceDetailResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void FaceDetail(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ListFaceDetails : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_ListFaceDetails() {
      ::grpc::Service::experimental().MarkMethodRawCallback(7,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->ListFaceDetails(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_ListFaceDetails() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListFaceDetails(::grpc::ServerContext* context, const ::faceRecognition::ListFaceDetailsRequest* request, ::faceRecognition::ListFaceDetailsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ListFaceDetails(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_NewFaceSet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_NewFaceSet() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::faceRecognition::NewFaceSetRequest, ::faceRecognition::NewFaceSetResponse>(std::bind(&WithStreamedUnaryMethod_NewFaceSet<BaseClass>::StreamedNewFaceSet, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_NewFaceSet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status NewFaceSet(::grpc::ServerContext* context, const ::faceRecognition::NewFaceSetRequest* request, ::faceRecognition::NewFaceSetResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedNewFaceSet(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::faceRecognition::NewFaceSetRequest,::faceRecognition::NewFaceSetResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteFaceSet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DeleteFaceSet() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::faceRecognition::DeleteFaceSetRequest, ::faceRecognition::DeleteFaceSetResponse>(std::bind(&WithStreamedUnaryMethod_DeleteFaceSet<BaseClass>::StreamedDeleteFaceSet, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DeleteFaceSet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteFaceSet(::grpc::ServerContext* context, const ::faceRecognition::DeleteFaceSetRequest* request, ::faceRecognition::DeleteFaceSetResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteFaceSet(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::faceRecognition::DeleteFaceSetRequest,::faceRecognition::DeleteFaceSetResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateFaceSet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_UpdateFaceSet() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::faceRecognition::UpdateFaceSetRequest, ::faceRecognition::UpdateFaceSetResponse>(std::bind(&WithStreamedUnaryMethod_UpdateFaceSet<BaseClass>::StreamedUpdateFaceSet, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UpdateFaceSet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateFaceSet(::grpc::ServerContext* context, const ::faceRecognition::UpdateFaceSetRequest* request, ::faceRecognition::UpdateFaceSetResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateFaceSet(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::faceRecognition::UpdateFaceSetRequest,::faceRecognition::UpdateFaceSetResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListFaceSets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ListFaceSets() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::faceRecognition::ListFaceSetsRequest, ::faceRecognition::ListFaceSetsResponse>(std::bind(&WithStreamedUnaryMethod_ListFaceSets<BaseClass>::StreamedListFaceSets, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ListFaceSets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListFaceSets(::grpc::ServerContext* context, const ::faceRecognition::ListFaceSetsRequest* request, ::faceRecognition::ListFaceSetsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListFaceSets(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::faceRecognition::ListFaceSetsRequest,::faceRecognition::ListFaceSetsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddFace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_AddFace() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::faceRecognition::AddFaceRequest, ::faceRecognition::AddFaceResponse>(std::bind(&WithStreamedUnaryMethod_AddFace<BaseClass>::StreamedAddFace, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_AddFace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddFace(::grpc::ServerContext* context, const ::faceRecognition::AddFaceRequest* request, ::faceRecognition::AddFaceResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddFace(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::faceRecognition::AddFaceRequest,::faceRecognition::AddFaceResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RemoveFace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_RemoveFace() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::faceRecognition::RemoveFaceRequest, ::faceRecognition::RemoveFaceResponse>(std::bind(&WithStreamedUnaryMethod_RemoveFace<BaseClass>::StreamedRemoveFace, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_RemoveFace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RemoveFace(::grpc::ServerContext* context, const ::faceRecognition::RemoveFaceRequest* request, ::faceRecognition::RemoveFaceResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRemoveFace(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::faceRecognition::RemoveFaceRequest,::faceRecognition::RemoveFaceResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_FaceDetail : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_FaceDetail() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::faceRecognition::FaceDetailRequest, ::faceRecognition::FaceDetailResponse>(std::bind(&WithStreamedUnaryMethod_FaceDetail<BaseClass>::StreamedFaceDetail, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_FaceDetail() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FaceDetail(::grpc::ServerContext* context, const ::faceRecognition::FaceDetailRequest* request, ::faceRecognition::FaceDetailResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFaceDetail(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::faceRecognition::FaceDetailRequest,::faceRecognition::FaceDetailResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListFaceDetails : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ListFaceDetails() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler< ::faceRecognition::ListFaceDetailsRequest, ::faceRecognition::ListFaceDetailsResponse>(std::bind(&WithStreamedUnaryMethod_ListFaceDetails<BaseClass>::StreamedListFaceDetails, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ListFaceDetails() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListFaceDetails(::grpc::ServerContext* context, const ::faceRecognition::ListFaceDetailsRequest* request, ::faceRecognition::ListFaceDetailsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListFaceDetails(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::faceRecognition::ListFaceDetailsRequest,::faceRecognition::ListFaceDetailsResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_NewFaceSet<WithStreamedUnaryMethod_DeleteFaceSet<WithStreamedUnaryMethod_UpdateFaceSet<WithStreamedUnaryMethod_ListFaceSets<WithStreamedUnaryMethod_AddFace<WithStreamedUnaryMethod_RemoveFace<WithStreamedUnaryMethod_FaceDetail<WithStreamedUnaryMethod_ListFaceDetails<Service > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_NewFaceSet<WithStreamedUnaryMethod_DeleteFaceSet<WithStreamedUnaryMethod_UpdateFaceSet<WithStreamedUnaryMethod_ListFaceSets<WithStreamedUnaryMethod_AddFace<WithStreamedUnaryMethod_RemoveFace<WithStreamedUnaryMethod_FaceDetail<WithStreamedUnaryMethod_ListFaceDetails<Service > > > > > > > > StreamedService;
};

}  // namespace faceRecognition


#endif  // GRPC_faceset_2eproto__INCLUDED
