// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: facedetect.proto

#include "facedetect.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_facedetect_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FacePosition_facedetect_2eproto;
namespace faceRecognition {
class FacePositionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FacePosition> _instance;
} _FacePosition_default_instance_;
class FromImageRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FromImageRequest> _instance;
} _FromImageRequest_default_instance_;
class FromImageResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FromImageResponse> _instance;
} _FromImageResponse_default_instance_;
class OnFaceDetectRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OnFaceDetectRequest> _instance;
} _OnFaceDetectRequest_default_instance_;
class OnFaceDetectResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OnFaceDetectResponse> _instance;
} _OnFaceDetectResponse_default_instance_;
class OnFaceSetFaceDetectRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OnFaceSetFaceDetectRequest> _instance;
} _OnFaceSetFaceDetectRequest_default_instance_;
class OnFaceSetFaceDetectResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OnFaceSetFaceDetectResponse> _instance;
} _OnFaceSetFaceDetectResponse_default_instance_;
}  // namespace faceRecognition
static void InitDefaultsscc_info_FacePosition_facedetect_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::faceRecognition::_FacePosition_default_instance_;
    new (ptr) ::faceRecognition::FacePosition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::faceRecognition::FacePosition::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FacePosition_facedetect_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_FacePosition_facedetect_2eproto}, {}};

static void InitDefaultsscc_info_FromImageRequest_facedetect_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::faceRecognition::_FromImageRequest_default_instance_;
    new (ptr) ::faceRecognition::FromImageRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::faceRecognition::FromImageRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FromImageRequest_facedetect_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_FromImageRequest_facedetect_2eproto}, {}};

static void InitDefaultsscc_info_FromImageResponse_facedetect_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::faceRecognition::_FromImageResponse_default_instance_;
    new (ptr) ::faceRecognition::FromImageResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::faceRecognition::FromImageResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FromImageResponse_facedetect_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_FromImageResponse_facedetect_2eproto}, {
      &scc_info_FacePosition_facedetect_2eproto.base,}};

static void InitDefaultsscc_info_OnFaceDetectRequest_facedetect_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::faceRecognition::_OnFaceDetectRequest_default_instance_;
    new (ptr) ::faceRecognition::OnFaceDetectRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::faceRecognition::OnFaceDetectRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OnFaceDetectRequest_facedetect_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_OnFaceDetectRequest_facedetect_2eproto}, {}};

static void InitDefaultsscc_info_OnFaceDetectResponse_facedetect_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::faceRecognition::_OnFaceDetectResponse_default_instance_;
    new (ptr) ::faceRecognition::OnFaceDetectResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::faceRecognition::OnFaceDetectResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OnFaceDetectResponse_facedetect_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_OnFaceDetectResponse_facedetect_2eproto}, {
      &scc_info_FacePosition_facedetect_2eproto.base,}};

static void InitDefaultsscc_info_OnFaceSetFaceDetectRequest_facedetect_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::faceRecognition::_OnFaceSetFaceDetectRequest_default_instance_;
    new (ptr) ::faceRecognition::OnFaceSetFaceDetectRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::faceRecognition::OnFaceSetFaceDetectRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OnFaceSetFaceDetectRequest_facedetect_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_OnFaceSetFaceDetectRequest_facedetect_2eproto}, {}};

static void InitDefaultsscc_info_OnFaceSetFaceDetectResponse_facedetect_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::faceRecognition::_OnFaceSetFaceDetectResponse_default_instance_;
    new (ptr) ::faceRecognition::OnFaceSetFaceDetectResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::faceRecognition::OnFaceSetFaceDetectResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OnFaceSetFaceDetectResponse_facedetect_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_OnFaceSetFaceDetectResponse_facedetect_2eproto}, {
      &scc_info_FacePosition_facedetect_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_facedetect_2eproto[7];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_facedetect_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_facedetect_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_facedetect_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::faceRecognition::FacePosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::faceRecognition::FacePosition, x_),
  PROTOBUF_FIELD_OFFSET(::faceRecognition::FacePosition, y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::faceRecognition::FromImageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::faceRecognition::FromImageRequest, image_),
  PROTOBUF_FIELD_OFFSET(::faceRecognition::FromImageRequest, with_gender_),
  PROTOBUF_FIELD_OFFSET(::faceRecognition::FromImageRequest, with_age_),
  PROTOBUF_FIELD_OFFSET(::faceRecognition::FromImageRequest, with_position_),
  PROTOBUF_FIELD_OFFSET(::faceRecognition::FromImageRequest, with_face_crop_width_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::faceRecognition::FromImageResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::faceRecognition::FromImageResponse, face_crops_),
  PROTOBUF_FIELD_OFFSET(::faceRecognition::FromImageResponse, genders_),
  PROTOBUF_FIELD_OFFSET(::faceRecognition::FromImageResponse, ages_),
  PROTOBUF_FIELD_OFFSET(::faceRecognition::FromImageResponse, positions_),
  PROTOBUF_FIELD_OFFSET(::faceRecognition::FromImageResponse, face_crop_widths_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::faceRecognition::OnFaceDetectRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::faceRecognition::OnFaceDetectRequest, interval_millisecond_),
  PROTOBUF_FIELD_OFFSET(::faceRecognition::OnFaceDetectRequest, with_gender_),
  PROTOBUF_FIELD_OFFSET(::faceRecognition::OnFaceDetectRequest, with_age_),
  PROTOBUF_FIELD_OFFSET(::faceRecognition::OnFaceDetectRequest, with_position_),
  PROTOBUF_FIELD_OFFSET(::faceRecognition::OnFaceDetectRequest, with_face_crop_width_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::faceRecognition::OnFaceDetectResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::faceRecognition::OnFaceDetectResponse, face_crops_),
  PROTOBUF_FIELD_OFFSET(::faceRecognition::OnFaceDetectResponse, genders_),
  PROTOBUF_FIELD_OFFSET(::faceRecognition::OnFaceDetectResponse, ages_),
  PROTOBUF_FIELD_OFFSET(::faceRecognition::OnFaceDetectResponse, positions_),
  PROTOBUF_FIELD_OFFSET(::faceRecognition::OnFaceDetectResponse, face_crop_widths_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::faceRecognition::OnFaceSetFaceDetectRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::faceRecognition::OnFaceSetFaceDetectRequest, face_set_id_),
  PROTOBUF_FIELD_OFFSET(::faceRecognition::OnFaceSetFaceDetectRequest, with_face_crop_),
  PROTOBUF_FIELD_OFFSET(::faceRecognition::OnFaceSetFaceDetectRequest, with_gender_),
  PROTOBUF_FIELD_OFFSET(::faceRecognition::OnFaceSetFaceDetectRequest, with_age_),
  PROTOBUF_FIELD_OFFSET(::faceRecognition::OnFaceSetFaceDetectRequest, with_position_),
  PROTOBUF_FIELD_OFFSET(::faceRecognition::OnFaceSetFaceDetectRequest, interval_millisecond_),
  PROTOBUF_FIELD_OFFSET(::faceRecognition::OnFaceSetFaceDetectRequest, confidence_min_),
  PROTOBUF_FIELD_OFFSET(::faceRecognition::OnFaceSetFaceDetectRequest, with_face_crop_width_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::faceRecognition::OnFaceSetFaceDetectResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::faceRecognition::OnFaceSetFaceDetectResponse, confidences_),
  PROTOBUF_FIELD_OFFSET(::faceRecognition::OnFaceSetFaceDetectResponse, face_tokens_),
  PROTOBUF_FIELD_OFFSET(::faceRecognition::OnFaceSetFaceDetectResponse, face_crops_),
  PROTOBUF_FIELD_OFFSET(::faceRecognition::OnFaceSetFaceDetectResponse, genders_),
  PROTOBUF_FIELD_OFFSET(::faceRecognition::OnFaceSetFaceDetectResponse, ages_),
  PROTOBUF_FIELD_OFFSET(::faceRecognition::OnFaceSetFaceDetectResponse, positions_),
  PROTOBUF_FIELD_OFFSET(::faceRecognition::OnFaceSetFaceDetectResponse, face_crop_widths_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::faceRecognition::FacePosition)},
  { 7, -1, sizeof(::faceRecognition::FromImageRequest)},
  { 17, -1, sizeof(::faceRecognition::FromImageResponse)},
  { 27, -1, sizeof(::faceRecognition::OnFaceDetectRequest)},
  { 37, -1, sizeof(::faceRecognition::OnFaceDetectResponse)},
  { 47, -1, sizeof(::faceRecognition::OnFaceSetFaceDetectRequest)},
  { 60, -1, sizeof(::faceRecognition::OnFaceSetFaceDetectResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::faceRecognition::_FacePosition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::faceRecognition::_FromImageRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::faceRecognition::_FromImageResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::faceRecognition::_OnFaceDetectRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::faceRecognition::_OnFaceDetectResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::faceRecognition::_OnFaceSetFaceDetectRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::faceRecognition::_OnFaceSetFaceDetectResponse_default_instance_),
};

const char descriptor_table_protodef_facedetect_2eproto[] =
  "\n\020facedetect.proto\022\017faceRecognition\032\034goo"
  "gle/api/annotations.proto\"$\n\014FacePositio"
  "n\022\t\n\001x\030\001 \001(\r\022\t\n\001y\030\002 \001(\r\"}\n\020FromImageRequ"
  "est\022\r\n\005image\030\001 \001(\014\022\023\n\013with_gender\030\002 \001(\010\022"
  "\020\n\010with_age\030\003 \001(\010\022\025\n\rwith_position\030\004 \001(\010"
  "\022\034\n\024with_face_crop_width\030\005 \001(\010\"\253\001\n\021FromI"
  "mageResponse\022\022\n\nface_crops\030\001 \003(\014\022(\n\007gend"
  "ers\030\002 \003(\0162\027.faceRecognition.Gender\022\014\n\004ag"
  "es\030\003 \003(\005\0220\n\tpositions\030\004 \003(\0132\035.faceRecogn"
  "ition.FacePosition\022\030\n\020face_crop_widths\030\005"
  " \003(\r\"\217\001\n\023OnFaceDetectRequest\022\034\n\024interval"
  "_millisecond\030\001 \001(\r\022\023\n\013with_gender\030\002 \001(\010\022"
  "\020\n\010with_age\030\003 \001(\010\022\025\n\rwith_position\030\004 \001(\010"
  "\022\034\n\024with_face_crop_width\030\005 \001(\010\"\256\001\n\024OnFac"
  "eDetectResponse\022\022\n\nface_crops\030\001 \003(\014\022(\n\007g"
  "enders\030\002 \003(\0162\027.faceRecognition.Gender\022\014\n"
  "\004ages\030\003 \003(\005\0220\n\tpositions\030\004 \003(\0132\035.faceRec"
  "ognition.FacePosition\022\030\n\020face_crop_width"
  "s\030\005 \003(\r\"\333\001\n\032OnFaceSetFaceDetectRequest\022\023"
  "\n\013face_set_id\030\001 \001(\t\022\026\n\016with_face_crop\030\002 "
  "\001(\010\022\023\n\013with_gender\030\003 \001(\010\022\020\n\010with_age\030\004 \001"
  "(\010\022\025\n\rwith_position\030\005 \001(\010\022\034\n\024interval_mi"
  "llisecond\030\006 \001(\r\022\026\n\016confidence_min\030\007 \001(\002\022"
  "\034\n\024with_face_crop_width\030\010 \001(\010\"\337\001\n\033OnFace"
  "SetFaceDetectResponse\022\023\n\013confidences\030\001 \003"
  "(\002\022\023\n\013face_tokens\030\002 \003(\t\022\022\n\nface_crops\030\003 "
  "\003(\014\022(\n\007genders\030\004 \003(\0162\027.faceRecognition.G"
  "ender\022\014\n\004ages\030\005 \003(\005\0220\n\tpositions\030\006 \003(\0132\035"
  ".faceRecognition.FacePosition\022\030\n\020face_cr"
  "op_widths\030\007 \003(\r*@\n\006Gender\022\022\n\016GENDER_UNKN"
  "OWN\020\000\022\017\n\013GENDER_MALE\020\001\022\021\n\rGENDER_FEMALE\020"
  "\0022\301\003\n\nFaceDetect\022}\n\tFromImage\022!.faceReco"
  "gnition.FromImageRequest\032\".faceRecogniti"
  "on.FromImageResponse\")\202\323\344\223\002#\"\036/api/v2/fa"
  "ce/detect/from_image:\001*\022\211\001\n\014OnFaceDetect"
  "\022$.faceRecognition.OnFaceDetectRequest\032%"
  ".faceRecognition.OnFaceDetectResponse\"*\202"
  "\323\344\223\002$\022\"/api/v2/face/detect/on_face_detec"
  "t0\001\022\247\001\n\023OnFaceSetFaceDetect\022+.faceRecogn"
  "ition.OnFaceSetFaceDetectRequest\032,.faceR"
  "ecognition.OnFaceSetFaceDetectResponse\"3"
  "\202\323\344\223\002-\022+/api/v2/face/detect/on_face_set_"
  "face_detect0\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_facedetect_2eproto_deps[1] = {
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_facedetect_2eproto_sccs[7] = {
  &scc_info_FacePosition_facedetect_2eproto.base,
  &scc_info_FromImageRequest_facedetect_2eproto.base,
  &scc_info_FromImageResponse_facedetect_2eproto.base,
  &scc_info_OnFaceDetectRequest_facedetect_2eproto.base,
  &scc_info_OnFaceDetectResponse_facedetect_2eproto.base,
  &scc_info_OnFaceSetFaceDetectRequest_facedetect_2eproto.base,
  &scc_info_OnFaceSetFaceDetectResponse_facedetect_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_facedetect_2eproto_once;
static bool descriptor_table_facedetect_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_facedetect_2eproto = {
  &descriptor_table_facedetect_2eproto_initialized, descriptor_table_protodef_facedetect_2eproto, "facedetect.proto", 1701,
  &descriptor_table_facedetect_2eproto_once, descriptor_table_facedetect_2eproto_sccs, descriptor_table_facedetect_2eproto_deps, 7, 1,
  schemas, file_default_instances, TableStruct_facedetect_2eproto::offsets,
  file_level_metadata_facedetect_2eproto, 7, file_level_enum_descriptors_facedetect_2eproto, file_level_service_descriptors_facedetect_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_facedetect_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_facedetect_2eproto), true);
namespace faceRecognition {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Gender_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_facedetect_2eproto);
  return file_level_enum_descriptors_facedetect_2eproto[0];
}
bool Gender_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void FacePosition::InitAsDefaultInstance() {
}
class FacePosition::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FacePosition::kXFieldNumber;
const int FacePosition::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FacePosition::FacePosition()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:faceRecognition.FacePosition)
}
FacePosition::FacePosition(const FacePosition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:faceRecognition.FacePosition)
}

void FacePosition::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

FacePosition::~FacePosition() {
  // @@protoc_insertion_point(destructor:faceRecognition.FacePosition)
  SharedDtor();
}

void FacePosition::SharedDtor() {
}

void FacePosition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FacePosition& FacePosition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FacePosition_facedetect_2eproto.base);
  return *internal_default_instance();
}


void FacePosition::Clear() {
// @@protoc_insertion_point(message_clear_start:faceRecognition.FacePosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FacePosition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FacePosition::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:faceRecognition.FacePosition)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 x = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 y = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:faceRecognition.FacePosition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:faceRecognition.FacePosition)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FacePosition::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:faceRecognition.FacePosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 x = 1;
  if (this->x() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->x(), output);
  }

  // uint32 y = 2;
  if (this->y() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:faceRecognition.FacePosition)
}

::PROTOBUF_NAMESPACE_ID::uint8* FacePosition::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:faceRecognition.FacePosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 x = 1;
  if (this->x() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->x(), target);
  }

  // uint32 y = 2;
  if (this->y() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:faceRecognition.FacePosition)
  return target;
}

size_t FacePosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:faceRecognition.FacePosition)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 x = 1;
  if (this->x() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->x());
  }

  // uint32 y = 2;
  if (this->y() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->y());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FacePosition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:faceRecognition.FacePosition)
  GOOGLE_DCHECK_NE(&from, this);
  const FacePosition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FacePosition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:faceRecognition.FacePosition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:faceRecognition.FacePosition)
    MergeFrom(*source);
  }
}

void FacePosition::MergeFrom(const FacePosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:faceRecognition.FacePosition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
}

void FacePosition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:faceRecognition.FacePosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FacePosition::CopyFrom(const FacePosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:faceRecognition.FacePosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FacePosition::IsInitialized() const {
  return true;
}

void FacePosition::Swap(FacePosition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FacePosition::InternalSwap(FacePosition* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(x_, other->x_);
  swap(y_, other->y_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FacePosition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FromImageRequest::InitAsDefaultInstance() {
}
class FromImageRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FromImageRequest::kImageFieldNumber;
const int FromImageRequest::kWithGenderFieldNumber;
const int FromImageRequest::kWithAgeFieldNumber;
const int FromImageRequest::kWithPositionFieldNumber;
const int FromImageRequest::kWithFaceCropWidthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FromImageRequest::FromImageRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:faceRecognition.FromImageRequest)
}
FromImageRequest::FromImageRequest(const FromImageRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.image().size() > 0) {
    image_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.image_);
  }
  ::memcpy(&with_gender_, &from.with_gender_,
    static_cast<size_t>(reinterpret_cast<char*>(&with_face_crop_width_) -
    reinterpret_cast<char*>(&with_gender_)) + sizeof(with_face_crop_width_));
  // @@protoc_insertion_point(copy_constructor:faceRecognition.FromImageRequest)
}

void FromImageRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FromImageRequest_facedetect_2eproto.base);
  image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&with_gender_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&with_face_crop_width_) -
      reinterpret_cast<char*>(&with_gender_)) + sizeof(with_face_crop_width_));
}

FromImageRequest::~FromImageRequest() {
  // @@protoc_insertion_point(destructor:faceRecognition.FromImageRequest)
  SharedDtor();
}

void FromImageRequest::SharedDtor() {
  image_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FromImageRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FromImageRequest& FromImageRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FromImageRequest_facedetect_2eproto.base);
  return *internal_default_instance();
}


void FromImageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:faceRecognition.FromImageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  image_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&with_gender_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&with_face_crop_width_) -
      reinterpret_cast<char*>(&with_gender_)) + sizeof(with_face_crop_width_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FromImageRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes image = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_image(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool with_gender = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          with_gender_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool with_age = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          with_age_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool with_position = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          with_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool with_face_crop_width = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          with_face_crop_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FromImageRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:faceRecognition.FromImageRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes image = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_image()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool with_gender = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &with_gender_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool with_age = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &with_age_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool with_position = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &with_position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool with_face_crop_width = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &with_face_crop_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:faceRecognition.FromImageRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:faceRecognition.FromImageRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FromImageRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:faceRecognition.FromImageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes image = 1;
  if (this->image().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->image(), output);
  }

  // bool with_gender = 2;
  if (this->with_gender() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->with_gender(), output);
  }

  // bool with_age = 3;
  if (this->with_age() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->with_age(), output);
  }

  // bool with_position = 4;
  if (this->with_position() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->with_position(), output);
  }

  // bool with_face_crop_width = 5;
  if (this->with_face_crop_width() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(5, this->with_face_crop_width(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:faceRecognition.FromImageRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* FromImageRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:faceRecognition.FromImageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes image = 1;
  if (this->image().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->image(), target);
  }

  // bool with_gender = 2;
  if (this->with_gender() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->with_gender(), target);
  }

  // bool with_age = 3;
  if (this->with_age() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->with_age(), target);
  }

  // bool with_position = 4;
  if (this->with_position() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->with_position(), target);
  }

  // bool with_face_crop_width = 5;
  if (this->with_face_crop_width() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->with_face_crop_width(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:faceRecognition.FromImageRequest)
  return target;
}

size_t FromImageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:faceRecognition.FromImageRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes image = 1;
  if (this->image().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->image());
  }

  // bool with_gender = 2;
  if (this->with_gender() != 0) {
    total_size += 1 + 1;
  }

  // bool with_age = 3;
  if (this->with_age() != 0) {
    total_size += 1 + 1;
  }

  // bool with_position = 4;
  if (this->with_position() != 0) {
    total_size += 1 + 1;
  }

  // bool with_face_crop_width = 5;
  if (this->with_face_crop_width() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FromImageRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:faceRecognition.FromImageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const FromImageRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FromImageRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:faceRecognition.FromImageRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:faceRecognition.FromImageRequest)
    MergeFrom(*source);
  }
}

void FromImageRequest::MergeFrom(const FromImageRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:faceRecognition.FromImageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.image().size() > 0) {

    image_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.image_);
  }
  if (from.with_gender() != 0) {
    set_with_gender(from.with_gender());
  }
  if (from.with_age() != 0) {
    set_with_age(from.with_age());
  }
  if (from.with_position() != 0) {
    set_with_position(from.with_position());
  }
  if (from.with_face_crop_width() != 0) {
    set_with_face_crop_width(from.with_face_crop_width());
  }
}

void FromImageRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:faceRecognition.FromImageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FromImageRequest::CopyFrom(const FromImageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:faceRecognition.FromImageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FromImageRequest::IsInitialized() const {
  return true;
}

void FromImageRequest::Swap(FromImageRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FromImageRequest::InternalSwap(FromImageRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  image_.Swap(&other->image_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(with_gender_, other->with_gender_);
  swap(with_age_, other->with_age_);
  swap(with_position_, other->with_position_);
  swap(with_face_crop_width_, other->with_face_crop_width_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FromImageRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FromImageResponse::InitAsDefaultInstance() {
}
class FromImageResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FromImageResponse::kFaceCropsFieldNumber;
const int FromImageResponse::kGendersFieldNumber;
const int FromImageResponse::kAgesFieldNumber;
const int FromImageResponse::kPositionsFieldNumber;
const int FromImageResponse::kFaceCropWidthsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FromImageResponse::FromImageResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:faceRecognition.FromImageResponse)
}
FromImageResponse::FromImageResponse(const FromImageResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      face_crops_(from.face_crops_),
      genders_(from.genders_),
      ages_(from.ages_),
      positions_(from.positions_),
      face_crop_widths_(from.face_crop_widths_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:faceRecognition.FromImageResponse)
}

void FromImageResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FromImageResponse_facedetect_2eproto.base);
}

FromImageResponse::~FromImageResponse() {
  // @@protoc_insertion_point(destructor:faceRecognition.FromImageResponse)
  SharedDtor();
}

void FromImageResponse::SharedDtor() {
}

void FromImageResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FromImageResponse& FromImageResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FromImageResponse_facedetect_2eproto.base);
  return *internal_default_instance();
}


void FromImageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:faceRecognition.FromImageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  face_crops_.Clear();
  genders_.Clear();
  ages_.Clear();
  positions_.Clear();
  face_crop_widths_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FromImageResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated bytes face_crops = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_face_crops(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // repeated .faceRecognition.Gender genders = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(mutable_genders(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          add_genders(static_cast<::faceRecognition::Gender>(val));
        } else goto handle_unusual;
        continue;
      // repeated int32 ages = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_ages(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          add_ages(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .faceRecognition.FacePosition positions = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_positions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // repeated uint32 face_crop_widths = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(mutable_face_crop_widths(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          add_face_crop_widths(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FromImageResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:faceRecognition.FromImageResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes face_crops = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->add_face_crops()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .faceRecognition.Gender genders = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          ::PROTOBUF_NAMESPACE_ID::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream::Limit limit = input->PushLimit(static_cast<int>(length));
          while (input->BytesUntilLimit() > 0) {
            int value = 0;
            DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_genders(static_cast< ::faceRecognition::Gender >(value));
          }
          input->PopLimit(limit);
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_genders(static_cast< ::faceRecognition::Gender >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 ages = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_ages())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 26u, input, this->mutable_ages())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .faceRecognition.FacePosition positions = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_positions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 face_crop_widths = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_face_crop_widths())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 1, 42u, input, this->mutable_face_crop_widths())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:faceRecognition.FromImageResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:faceRecognition.FromImageResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FromImageResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:faceRecognition.FromImageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes face_crops = 1;
  for (int i = 0, n = this->face_crops_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytes(
      1, this->face_crops(i), output);
  }

  // repeated .faceRecognition.Gender genders = 2;
  if (this->genders_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_genders_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->genders_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumNoTag(
      this->genders(i), output);
  }

  // repeated int32 ages = 3;
  if (this->ages_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(3, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_ages_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->ages_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32NoTag(
      this->ages(i), output);
  }

  // repeated .faceRecognition.FacePosition positions = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->positions_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->positions(static_cast<int>(i)),
      output);
  }

  // repeated uint32 face_crop_widths = 5;
  if (this->face_crop_widths_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(5, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_face_crop_widths_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->face_crop_widths_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32NoTag(
      this->face_crop_widths(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:faceRecognition.FromImageResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* FromImageResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:faceRecognition.FromImageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes face_crops = 1;
  for (int i = 0, n = this->face_crops_size(); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteBytesToArray(1, this->face_crops(i), target);
  }

  // repeated .faceRecognition.Gender genders = 2;
  if (this->genders_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(      _genders_cached_byte_size_.load(std::memory_order_relaxed),
        target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->genders_, target);
  }

  // repeated int32 ages = 3;
  if (this->ages_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      3,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _ages_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->ages_, target);
  }

  // repeated .faceRecognition.FacePosition positions = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->positions_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->positions(static_cast<int>(i)), target);
  }

  // repeated uint32 face_crop_widths = 5;
  if (this->face_crop_widths_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      5,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _face_crop_widths_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->face_crop_widths_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:faceRecognition.FromImageResponse)
  return target;
}

size_t FromImageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:faceRecognition.FromImageResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes face_crops = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->face_crops_size());
  for (int i = 0, n = this->face_crops_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      this->face_crops(i));
  }

  // repeated .faceRecognition.Gender genders = 2;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->genders_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->genders(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _genders_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 ages = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->ages_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _ages_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .faceRecognition.FacePosition positions = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->positions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->positions(static_cast<int>(i)));
    }
  }

  // repeated uint32 face_crop_widths = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->face_crop_widths_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _face_crop_widths_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FromImageResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:faceRecognition.FromImageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const FromImageResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FromImageResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:faceRecognition.FromImageResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:faceRecognition.FromImageResponse)
    MergeFrom(*source);
  }
}

void FromImageResponse::MergeFrom(const FromImageResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:faceRecognition.FromImageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  face_crops_.MergeFrom(from.face_crops_);
  genders_.MergeFrom(from.genders_);
  ages_.MergeFrom(from.ages_);
  positions_.MergeFrom(from.positions_);
  face_crop_widths_.MergeFrom(from.face_crop_widths_);
}

void FromImageResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:faceRecognition.FromImageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FromImageResponse::CopyFrom(const FromImageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:faceRecognition.FromImageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FromImageResponse::IsInitialized() const {
  return true;
}

void FromImageResponse::Swap(FromImageResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FromImageResponse::InternalSwap(FromImageResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  face_crops_.InternalSwap(CastToBase(&other->face_crops_));
  genders_.InternalSwap(&other->genders_);
  ages_.InternalSwap(&other->ages_);
  CastToBase(&positions_)->InternalSwap(CastToBase(&other->positions_));
  face_crop_widths_.InternalSwap(&other->face_crop_widths_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FromImageResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OnFaceDetectRequest::InitAsDefaultInstance() {
}
class OnFaceDetectRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OnFaceDetectRequest::kIntervalMillisecondFieldNumber;
const int OnFaceDetectRequest::kWithGenderFieldNumber;
const int OnFaceDetectRequest::kWithAgeFieldNumber;
const int OnFaceDetectRequest::kWithPositionFieldNumber;
const int OnFaceDetectRequest::kWithFaceCropWidthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OnFaceDetectRequest::OnFaceDetectRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:faceRecognition.OnFaceDetectRequest)
}
OnFaceDetectRequest::OnFaceDetectRequest(const OnFaceDetectRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&interval_millisecond_, &from.interval_millisecond_,
    static_cast<size_t>(reinterpret_cast<char*>(&with_face_crop_width_) -
    reinterpret_cast<char*>(&interval_millisecond_)) + sizeof(with_face_crop_width_));
  // @@protoc_insertion_point(copy_constructor:faceRecognition.OnFaceDetectRequest)
}

void OnFaceDetectRequest::SharedCtor() {
  ::memset(&interval_millisecond_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&with_face_crop_width_) -
      reinterpret_cast<char*>(&interval_millisecond_)) + sizeof(with_face_crop_width_));
}

OnFaceDetectRequest::~OnFaceDetectRequest() {
  // @@protoc_insertion_point(destructor:faceRecognition.OnFaceDetectRequest)
  SharedDtor();
}

void OnFaceDetectRequest::SharedDtor() {
}

void OnFaceDetectRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OnFaceDetectRequest& OnFaceDetectRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OnFaceDetectRequest_facedetect_2eproto.base);
  return *internal_default_instance();
}


void OnFaceDetectRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:faceRecognition.OnFaceDetectRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&interval_millisecond_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&with_face_crop_width_) -
      reinterpret_cast<char*>(&interval_millisecond_)) + sizeof(with_face_crop_width_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* OnFaceDetectRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 interval_millisecond = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          interval_millisecond_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool with_gender = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          with_gender_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool with_age = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          with_age_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool with_position = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          with_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool with_face_crop_width = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          with_face_crop_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool OnFaceDetectRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:faceRecognition.OnFaceDetectRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 interval_millisecond = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &interval_millisecond_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool with_gender = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &with_gender_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool with_age = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &with_age_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool with_position = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &with_position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool with_face_crop_width = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &with_face_crop_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:faceRecognition.OnFaceDetectRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:faceRecognition.OnFaceDetectRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void OnFaceDetectRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:faceRecognition.OnFaceDetectRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 interval_millisecond = 1;
  if (this->interval_millisecond() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->interval_millisecond(), output);
  }

  // bool with_gender = 2;
  if (this->with_gender() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->with_gender(), output);
  }

  // bool with_age = 3;
  if (this->with_age() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->with_age(), output);
  }

  // bool with_position = 4;
  if (this->with_position() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->with_position(), output);
  }

  // bool with_face_crop_width = 5;
  if (this->with_face_crop_width() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(5, this->with_face_crop_width(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:faceRecognition.OnFaceDetectRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* OnFaceDetectRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:faceRecognition.OnFaceDetectRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 interval_millisecond = 1;
  if (this->interval_millisecond() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->interval_millisecond(), target);
  }

  // bool with_gender = 2;
  if (this->with_gender() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->with_gender(), target);
  }

  // bool with_age = 3;
  if (this->with_age() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->with_age(), target);
  }

  // bool with_position = 4;
  if (this->with_position() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->with_position(), target);
  }

  // bool with_face_crop_width = 5;
  if (this->with_face_crop_width() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->with_face_crop_width(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:faceRecognition.OnFaceDetectRequest)
  return target;
}

size_t OnFaceDetectRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:faceRecognition.OnFaceDetectRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 interval_millisecond = 1;
  if (this->interval_millisecond() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->interval_millisecond());
  }

  // bool with_gender = 2;
  if (this->with_gender() != 0) {
    total_size += 1 + 1;
  }

  // bool with_age = 3;
  if (this->with_age() != 0) {
    total_size += 1 + 1;
  }

  // bool with_position = 4;
  if (this->with_position() != 0) {
    total_size += 1 + 1;
  }

  // bool with_face_crop_width = 5;
  if (this->with_face_crop_width() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OnFaceDetectRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:faceRecognition.OnFaceDetectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const OnFaceDetectRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OnFaceDetectRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:faceRecognition.OnFaceDetectRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:faceRecognition.OnFaceDetectRequest)
    MergeFrom(*source);
  }
}

void OnFaceDetectRequest::MergeFrom(const OnFaceDetectRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:faceRecognition.OnFaceDetectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.interval_millisecond() != 0) {
    set_interval_millisecond(from.interval_millisecond());
  }
  if (from.with_gender() != 0) {
    set_with_gender(from.with_gender());
  }
  if (from.with_age() != 0) {
    set_with_age(from.with_age());
  }
  if (from.with_position() != 0) {
    set_with_position(from.with_position());
  }
  if (from.with_face_crop_width() != 0) {
    set_with_face_crop_width(from.with_face_crop_width());
  }
}

void OnFaceDetectRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:faceRecognition.OnFaceDetectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OnFaceDetectRequest::CopyFrom(const OnFaceDetectRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:faceRecognition.OnFaceDetectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OnFaceDetectRequest::IsInitialized() const {
  return true;
}

void OnFaceDetectRequest::Swap(OnFaceDetectRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OnFaceDetectRequest::InternalSwap(OnFaceDetectRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(interval_millisecond_, other->interval_millisecond_);
  swap(with_gender_, other->with_gender_);
  swap(with_age_, other->with_age_);
  swap(with_position_, other->with_position_);
  swap(with_face_crop_width_, other->with_face_crop_width_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OnFaceDetectRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OnFaceDetectResponse::InitAsDefaultInstance() {
}
class OnFaceDetectResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OnFaceDetectResponse::kFaceCropsFieldNumber;
const int OnFaceDetectResponse::kGendersFieldNumber;
const int OnFaceDetectResponse::kAgesFieldNumber;
const int OnFaceDetectResponse::kPositionsFieldNumber;
const int OnFaceDetectResponse::kFaceCropWidthsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OnFaceDetectResponse::OnFaceDetectResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:faceRecognition.OnFaceDetectResponse)
}
OnFaceDetectResponse::OnFaceDetectResponse(const OnFaceDetectResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      face_crops_(from.face_crops_),
      genders_(from.genders_),
      ages_(from.ages_),
      positions_(from.positions_),
      face_crop_widths_(from.face_crop_widths_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:faceRecognition.OnFaceDetectResponse)
}

void OnFaceDetectResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OnFaceDetectResponse_facedetect_2eproto.base);
}

OnFaceDetectResponse::~OnFaceDetectResponse() {
  // @@protoc_insertion_point(destructor:faceRecognition.OnFaceDetectResponse)
  SharedDtor();
}

void OnFaceDetectResponse::SharedDtor() {
}

void OnFaceDetectResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OnFaceDetectResponse& OnFaceDetectResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OnFaceDetectResponse_facedetect_2eproto.base);
  return *internal_default_instance();
}


void OnFaceDetectResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:faceRecognition.OnFaceDetectResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  face_crops_.Clear();
  genders_.Clear();
  ages_.Clear();
  positions_.Clear();
  face_crop_widths_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* OnFaceDetectResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated bytes face_crops = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_face_crops(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // repeated .faceRecognition.Gender genders = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(mutable_genders(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          add_genders(static_cast<::faceRecognition::Gender>(val));
        } else goto handle_unusual;
        continue;
      // repeated int32 ages = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_ages(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          add_ages(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .faceRecognition.FacePosition positions = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_positions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // repeated uint32 face_crop_widths = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(mutable_face_crop_widths(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          add_face_crop_widths(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool OnFaceDetectResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:faceRecognition.OnFaceDetectResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes face_crops = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->add_face_crops()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .faceRecognition.Gender genders = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          ::PROTOBUF_NAMESPACE_ID::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream::Limit limit = input->PushLimit(static_cast<int>(length));
          while (input->BytesUntilLimit() > 0) {
            int value = 0;
            DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_genders(static_cast< ::faceRecognition::Gender >(value));
          }
          input->PopLimit(limit);
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_genders(static_cast< ::faceRecognition::Gender >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 ages = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_ages())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 26u, input, this->mutable_ages())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .faceRecognition.FacePosition positions = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_positions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 face_crop_widths = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_face_crop_widths())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 1, 42u, input, this->mutable_face_crop_widths())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:faceRecognition.OnFaceDetectResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:faceRecognition.OnFaceDetectResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void OnFaceDetectResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:faceRecognition.OnFaceDetectResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes face_crops = 1;
  for (int i = 0, n = this->face_crops_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytes(
      1, this->face_crops(i), output);
  }

  // repeated .faceRecognition.Gender genders = 2;
  if (this->genders_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_genders_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->genders_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumNoTag(
      this->genders(i), output);
  }

  // repeated int32 ages = 3;
  if (this->ages_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(3, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_ages_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->ages_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32NoTag(
      this->ages(i), output);
  }

  // repeated .faceRecognition.FacePosition positions = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->positions_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->positions(static_cast<int>(i)),
      output);
  }

  // repeated uint32 face_crop_widths = 5;
  if (this->face_crop_widths_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(5, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_face_crop_widths_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->face_crop_widths_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32NoTag(
      this->face_crop_widths(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:faceRecognition.OnFaceDetectResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* OnFaceDetectResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:faceRecognition.OnFaceDetectResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes face_crops = 1;
  for (int i = 0, n = this->face_crops_size(); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteBytesToArray(1, this->face_crops(i), target);
  }

  // repeated .faceRecognition.Gender genders = 2;
  if (this->genders_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(      _genders_cached_byte_size_.load(std::memory_order_relaxed),
        target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->genders_, target);
  }

  // repeated int32 ages = 3;
  if (this->ages_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      3,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _ages_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->ages_, target);
  }

  // repeated .faceRecognition.FacePosition positions = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->positions_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->positions(static_cast<int>(i)), target);
  }

  // repeated uint32 face_crop_widths = 5;
  if (this->face_crop_widths_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      5,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _face_crop_widths_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->face_crop_widths_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:faceRecognition.OnFaceDetectResponse)
  return target;
}

size_t OnFaceDetectResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:faceRecognition.OnFaceDetectResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes face_crops = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->face_crops_size());
  for (int i = 0, n = this->face_crops_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      this->face_crops(i));
  }

  // repeated .faceRecognition.Gender genders = 2;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->genders_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->genders(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _genders_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 ages = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->ages_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _ages_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .faceRecognition.FacePosition positions = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->positions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->positions(static_cast<int>(i)));
    }
  }

  // repeated uint32 face_crop_widths = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->face_crop_widths_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _face_crop_widths_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OnFaceDetectResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:faceRecognition.OnFaceDetectResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const OnFaceDetectResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OnFaceDetectResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:faceRecognition.OnFaceDetectResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:faceRecognition.OnFaceDetectResponse)
    MergeFrom(*source);
  }
}

void OnFaceDetectResponse::MergeFrom(const OnFaceDetectResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:faceRecognition.OnFaceDetectResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  face_crops_.MergeFrom(from.face_crops_);
  genders_.MergeFrom(from.genders_);
  ages_.MergeFrom(from.ages_);
  positions_.MergeFrom(from.positions_);
  face_crop_widths_.MergeFrom(from.face_crop_widths_);
}

void OnFaceDetectResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:faceRecognition.OnFaceDetectResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OnFaceDetectResponse::CopyFrom(const OnFaceDetectResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:faceRecognition.OnFaceDetectResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OnFaceDetectResponse::IsInitialized() const {
  return true;
}

void OnFaceDetectResponse::Swap(OnFaceDetectResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OnFaceDetectResponse::InternalSwap(OnFaceDetectResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  face_crops_.InternalSwap(CastToBase(&other->face_crops_));
  genders_.InternalSwap(&other->genders_);
  ages_.InternalSwap(&other->ages_);
  CastToBase(&positions_)->InternalSwap(CastToBase(&other->positions_));
  face_crop_widths_.InternalSwap(&other->face_crop_widths_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OnFaceDetectResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OnFaceSetFaceDetectRequest::InitAsDefaultInstance() {
}
class OnFaceSetFaceDetectRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OnFaceSetFaceDetectRequest::kFaceSetIdFieldNumber;
const int OnFaceSetFaceDetectRequest::kWithFaceCropFieldNumber;
const int OnFaceSetFaceDetectRequest::kWithGenderFieldNumber;
const int OnFaceSetFaceDetectRequest::kWithAgeFieldNumber;
const int OnFaceSetFaceDetectRequest::kWithPositionFieldNumber;
const int OnFaceSetFaceDetectRequest::kIntervalMillisecondFieldNumber;
const int OnFaceSetFaceDetectRequest::kConfidenceMinFieldNumber;
const int OnFaceSetFaceDetectRequest::kWithFaceCropWidthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OnFaceSetFaceDetectRequest::OnFaceSetFaceDetectRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:faceRecognition.OnFaceSetFaceDetectRequest)
}
OnFaceSetFaceDetectRequest::OnFaceSetFaceDetectRequest(const OnFaceSetFaceDetectRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  face_set_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.face_set_id().size() > 0) {
    face_set_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.face_set_id_);
  }
  ::memcpy(&with_face_crop_, &from.with_face_crop_,
    static_cast<size_t>(reinterpret_cast<char*>(&with_face_crop_width_) -
    reinterpret_cast<char*>(&with_face_crop_)) + sizeof(with_face_crop_width_));
  // @@protoc_insertion_point(copy_constructor:faceRecognition.OnFaceSetFaceDetectRequest)
}

void OnFaceSetFaceDetectRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OnFaceSetFaceDetectRequest_facedetect_2eproto.base);
  face_set_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&with_face_crop_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&with_face_crop_width_) -
      reinterpret_cast<char*>(&with_face_crop_)) + sizeof(with_face_crop_width_));
}

OnFaceSetFaceDetectRequest::~OnFaceSetFaceDetectRequest() {
  // @@protoc_insertion_point(destructor:faceRecognition.OnFaceSetFaceDetectRequest)
  SharedDtor();
}

void OnFaceSetFaceDetectRequest::SharedDtor() {
  face_set_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OnFaceSetFaceDetectRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OnFaceSetFaceDetectRequest& OnFaceSetFaceDetectRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OnFaceSetFaceDetectRequest_facedetect_2eproto.base);
  return *internal_default_instance();
}


void OnFaceSetFaceDetectRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:faceRecognition.OnFaceSetFaceDetectRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  face_set_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&with_face_crop_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&with_face_crop_width_) -
      reinterpret_cast<char*>(&with_face_crop_)) + sizeof(with_face_crop_width_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* OnFaceSetFaceDetectRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string face_set_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_face_set_id(), ptr, ctx, "faceRecognition.OnFaceSetFaceDetectRequest.face_set_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool with_face_crop = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          with_face_crop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool with_gender = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          with_gender_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool with_age = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          with_age_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool with_position = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          with_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 interval_millisecond = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          interval_millisecond_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float confidence_min = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          confidence_min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool with_face_crop_width = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          with_face_crop_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool OnFaceSetFaceDetectRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:faceRecognition.OnFaceSetFaceDetectRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string face_set_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_face_set_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->face_set_id().data(), static_cast<int>(this->face_set_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "faceRecognition.OnFaceSetFaceDetectRequest.face_set_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool with_face_crop = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &with_face_crop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool with_gender = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &with_gender_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool with_age = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &with_age_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool with_position = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &with_position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 interval_millisecond = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &interval_millisecond_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float confidence_min = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (61 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &confidence_min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool with_face_crop_width = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &with_face_crop_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:faceRecognition.OnFaceSetFaceDetectRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:faceRecognition.OnFaceSetFaceDetectRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void OnFaceSetFaceDetectRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:faceRecognition.OnFaceSetFaceDetectRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string face_set_id = 1;
  if (this->face_set_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->face_set_id().data(), static_cast<int>(this->face_set_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "faceRecognition.OnFaceSetFaceDetectRequest.face_set_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->face_set_id(), output);
  }

  // bool with_face_crop = 2;
  if (this->with_face_crop() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->with_face_crop(), output);
  }

  // bool with_gender = 3;
  if (this->with_gender() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->with_gender(), output);
  }

  // bool with_age = 4;
  if (this->with_age() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->with_age(), output);
  }

  // bool with_position = 5;
  if (this->with_position() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(5, this->with_position(), output);
  }

  // uint32 interval_millisecond = 6;
  if (this->interval_millisecond() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(6, this->interval_millisecond(), output);
  }

  // float confidence_min = 7;
  if (!(this->confidence_min() <= 0 && this->confidence_min() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(7, this->confidence_min(), output);
  }

  // bool with_face_crop_width = 8;
  if (this->with_face_crop_width() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(8, this->with_face_crop_width(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:faceRecognition.OnFaceSetFaceDetectRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* OnFaceSetFaceDetectRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:faceRecognition.OnFaceSetFaceDetectRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string face_set_id = 1;
  if (this->face_set_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->face_set_id().data(), static_cast<int>(this->face_set_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "faceRecognition.OnFaceSetFaceDetectRequest.face_set_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->face_set_id(), target);
  }

  // bool with_face_crop = 2;
  if (this->with_face_crop() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->with_face_crop(), target);
  }

  // bool with_gender = 3;
  if (this->with_gender() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->with_gender(), target);
  }

  // bool with_age = 4;
  if (this->with_age() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->with_age(), target);
  }

  // bool with_position = 5;
  if (this->with_position() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->with_position(), target);
  }

  // uint32 interval_millisecond = 6;
  if (this->interval_millisecond() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->interval_millisecond(), target);
  }

  // float confidence_min = 7;
  if (!(this->confidence_min() <= 0 && this->confidence_min() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->confidence_min(), target);
  }

  // bool with_face_crop_width = 8;
  if (this->with_face_crop_width() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->with_face_crop_width(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:faceRecognition.OnFaceSetFaceDetectRequest)
  return target;
}

size_t OnFaceSetFaceDetectRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:faceRecognition.OnFaceSetFaceDetectRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string face_set_id = 1;
  if (this->face_set_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->face_set_id());
  }

  // bool with_face_crop = 2;
  if (this->with_face_crop() != 0) {
    total_size += 1 + 1;
  }

  // bool with_gender = 3;
  if (this->with_gender() != 0) {
    total_size += 1 + 1;
  }

  // bool with_age = 4;
  if (this->with_age() != 0) {
    total_size += 1 + 1;
  }

  // bool with_position = 5;
  if (this->with_position() != 0) {
    total_size += 1 + 1;
  }

  // uint32 interval_millisecond = 6;
  if (this->interval_millisecond() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->interval_millisecond());
  }

  // float confidence_min = 7;
  if (!(this->confidence_min() <= 0 && this->confidence_min() >= 0)) {
    total_size += 1 + 4;
  }

  // bool with_face_crop_width = 8;
  if (this->with_face_crop_width() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OnFaceSetFaceDetectRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:faceRecognition.OnFaceSetFaceDetectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const OnFaceSetFaceDetectRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OnFaceSetFaceDetectRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:faceRecognition.OnFaceSetFaceDetectRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:faceRecognition.OnFaceSetFaceDetectRequest)
    MergeFrom(*source);
  }
}

void OnFaceSetFaceDetectRequest::MergeFrom(const OnFaceSetFaceDetectRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:faceRecognition.OnFaceSetFaceDetectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.face_set_id().size() > 0) {

    face_set_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.face_set_id_);
  }
  if (from.with_face_crop() != 0) {
    set_with_face_crop(from.with_face_crop());
  }
  if (from.with_gender() != 0) {
    set_with_gender(from.with_gender());
  }
  if (from.with_age() != 0) {
    set_with_age(from.with_age());
  }
  if (from.with_position() != 0) {
    set_with_position(from.with_position());
  }
  if (from.interval_millisecond() != 0) {
    set_interval_millisecond(from.interval_millisecond());
  }
  if (!(from.confidence_min() <= 0 && from.confidence_min() >= 0)) {
    set_confidence_min(from.confidence_min());
  }
  if (from.with_face_crop_width() != 0) {
    set_with_face_crop_width(from.with_face_crop_width());
  }
}

void OnFaceSetFaceDetectRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:faceRecognition.OnFaceSetFaceDetectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OnFaceSetFaceDetectRequest::CopyFrom(const OnFaceSetFaceDetectRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:faceRecognition.OnFaceSetFaceDetectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OnFaceSetFaceDetectRequest::IsInitialized() const {
  return true;
}

void OnFaceSetFaceDetectRequest::Swap(OnFaceSetFaceDetectRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OnFaceSetFaceDetectRequest::InternalSwap(OnFaceSetFaceDetectRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  face_set_id_.Swap(&other->face_set_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(with_face_crop_, other->with_face_crop_);
  swap(with_gender_, other->with_gender_);
  swap(with_age_, other->with_age_);
  swap(with_position_, other->with_position_);
  swap(interval_millisecond_, other->interval_millisecond_);
  swap(confidence_min_, other->confidence_min_);
  swap(with_face_crop_width_, other->with_face_crop_width_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OnFaceSetFaceDetectRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OnFaceSetFaceDetectResponse::InitAsDefaultInstance() {
}
class OnFaceSetFaceDetectResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OnFaceSetFaceDetectResponse::kConfidencesFieldNumber;
const int OnFaceSetFaceDetectResponse::kFaceTokensFieldNumber;
const int OnFaceSetFaceDetectResponse::kFaceCropsFieldNumber;
const int OnFaceSetFaceDetectResponse::kGendersFieldNumber;
const int OnFaceSetFaceDetectResponse::kAgesFieldNumber;
const int OnFaceSetFaceDetectResponse::kPositionsFieldNumber;
const int OnFaceSetFaceDetectResponse::kFaceCropWidthsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OnFaceSetFaceDetectResponse::OnFaceSetFaceDetectResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:faceRecognition.OnFaceSetFaceDetectResponse)
}
OnFaceSetFaceDetectResponse::OnFaceSetFaceDetectResponse(const OnFaceSetFaceDetectResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      confidences_(from.confidences_),
      face_tokens_(from.face_tokens_),
      face_crops_(from.face_crops_),
      genders_(from.genders_),
      ages_(from.ages_),
      positions_(from.positions_),
      face_crop_widths_(from.face_crop_widths_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:faceRecognition.OnFaceSetFaceDetectResponse)
}

void OnFaceSetFaceDetectResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OnFaceSetFaceDetectResponse_facedetect_2eproto.base);
}

OnFaceSetFaceDetectResponse::~OnFaceSetFaceDetectResponse() {
  // @@protoc_insertion_point(destructor:faceRecognition.OnFaceSetFaceDetectResponse)
  SharedDtor();
}

void OnFaceSetFaceDetectResponse::SharedDtor() {
}

void OnFaceSetFaceDetectResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OnFaceSetFaceDetectResponse& OnFaceSetFaceDetectResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OnFaceSetFaceDetectResponse_facedetect_2eproto.base);
  return *internal_default_instance();
}


void OnFaceSetFaceDetectResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:faceRecognition.OnFaceSetFaceDetectResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  confidences_.Clear();
  face_tokens_.Clear();
  face_crops_.Clear();
  genders_.Clear();
  ages_.Clear();
  positions_.Clear();
  face_crop_widths_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* OnFaceSetFaceDetectResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float confidences = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_confidences(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          add_confidences(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated string face_tokens = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_face_tokens(), ptr, ctx, "faceRecognition.OnFaceSetFaceDetectResponse.face_tokens");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // repeated bytes face_crops = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_face_crops(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // repeated .faceRecognition.Gender genders = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(mutable_genders(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          add_genders(static_cast<::faceRecognition::Gender>(val));
        } else goto handle_unusual;
        continue;
      // repeated int32 ages = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_ages(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          add_ages(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .faceRecognition.FacePosition positions = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_positions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 50);
        } else goto handle_unusual;
        continue;
      // repeated uint32 face_crop_widths = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(mutable_face_crop_widths(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56) {
          add_face_crop_widths(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool OnFaceSetFaceDetectResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:faceRecognition.OnFaceSetFaceDetectResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float confidences = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_confidences())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10u, input, this->mutable_confidences())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string face_tokens = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_face_tokens()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->face_tokens(this->face_tokens_size() - 1).data(),
            static_cast<int>(this->face_tokens(this->face_tokens_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "faceRecognition.OnFaceSetFaceDetectResponse.face_tokens"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes face_crops = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->add_face_crops()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .faceRecognition.Gender genders = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          ::PROTOBUF_NAMESPACE_ID::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream::Limit limit = input->PushLimit(static_cast<int>(length));
          while (input->BytesUntilLimit() > 0) {
            int value = 0;
            DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_genders(static_cast< ::faceRecognition::Gender >(value));
          }
          input->PopLimit(limit);
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_genders(static_cast< ::faceRecognition::Gender >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 ages = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_ages())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 42u, input, this->mutable_ages())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .faceRecognition.FacePosition positions = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_positions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 face_crop_widths = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_face_crop_widths())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 1, 58u, input, this->mutable_face_crop_widths())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:faceRecognition.OnFaceSetFaceDetectResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:faceRecognition.OnFaceSetFaceDetectResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void OnFaceSetFaceDetectResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:faceRecognition.OnFaceSetFaceDetectResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float confidences = 1;
  if (this->confidences_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_confidences_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->confidences().data(), this->confidences_size(), output);
  }

  // repeated string face_tokens = 2;
  for (int i = 0, n = this->face_tokens_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->face_tokens(i).data(), static_cast<int>(this->face_tokens(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "faceRecognition.OnFaceSetFaceDetectResponse.face_tokens");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      2, this->face_tokens(i), output);
  }

  // repeated bytes face_crops = 3;
  for (int i = 0, n = this->face_crops_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytes(
      3, this->face_crops(i), output);
  }

  // repeated .faceRecognition.Gender genders = 4;
  if (this->genders_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(
      4,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_genders_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->genders_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumNoTag(
      this->genders(i), output);
  }

  // repeated int32 ages = 5;
  if (this->ages_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(5, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_ages_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->ages_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32NoTag(
      this->ages(i), output);
  }

  // repeated .faceRecognition.FacePosition positions = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->positions_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->positions(static_cast<int>(i)),
      output);
  }

  // repeated uint32 face_crop_widths = 7;
  if (this->face_crop_widths_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(7, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_face_crop_widths_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->face_crop_widths_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32NoTag(
      this->face_crop_widths(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:faceRecognition.OnFaceSetFaceDetectResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* OnFaceSetFaceDetectResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:faceRecognition.OnFaceSetFaceDetectResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float confidences = 1;
  if (this->confidences_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _confidences_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->confidences_, target);
  }

  // repeated string face_tokens = 2;
  for (int i = 0, n = this->face_tokens_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->face_tokens(i).data(), static_cast<int>(this->face_tokens(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "faceRecognition.OnFaceSetFaceDetectResponse.face_tokens");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(2, this->face_tokens(i), target);
  }

  // repeated bytes face_crops = 3;
  for (int i = 0, n = this->face_crops_size(); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteBytesToArray(3, this->face_crops(i), target);
  }

  // repeated .faceRecognition.Gender genders = 4;
  if (this->genders_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      4,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(      _genders_cached_byte_size_.load(std::memory_order_relaxed),
        target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->genders_, target);
  }

  // repeated int32 ages = 5;
  if (this->ages_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      5,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _ages_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->ages_, target);
  }

  // repeated .faceRecognition.FacePosition positions = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->positions_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->positions(static_cast<int>(i)), target);
  }

  // repeated uint32 face_crop_widths = 7;
  if (this->face_crop_widths_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      7,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _face_crop_widths_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->face_crop_widths_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:faceRecognition.OnFaceSetFaceDetectResponse)
  return target;
}

size_t OnFaceSetFaceDetectResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:faceRecognition.OnFaceSetFaceDetectResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float confidences = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->confidences_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _confidences_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string face_tokens = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->face_tokens_size());
  for (int i = 0, n = this->face_tokens_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->face_tokens(i));
  }

  // repeated bytes face_crops = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->face_crops_size());
  for (int i = 0, n = this->face_crops_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      this->face_crops(i));
  }

  // repeated .faceRecognition.Gender genders = 4;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->genders_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->genders(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _genders_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 ages = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->ages_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _ages_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .faceRecognition.FacePosition positions = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->positions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->positions(static_cast<int>(i)));
    }
  }

  // repeated uint32 face_crop_widths = 7;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->face_crop_widths_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _face_crop_widths_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OnFaceSetFaceDetectResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:faceRecognition.OnFaceSetFaceDetectResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const OnFaceSetFaceDetectResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OnFaceSetFaceDetectResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:faceRecognition.OnFaceSetFaceDetectResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:faceRecognition.OnFaceSetFaceDetectResponse)
    MergeFrom(*source);
  }
}

void OnFaceSetFaceDetectResponse::MergeFrom(const OnFaceSetFaceDetectResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:faceRecognition.OnFaceSetFaceDetectResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  confidences_.MergeFrom(from.confidences_);
  face_tokens_.MergeFrom(from.face_tokens_);
  face_crops_.MergeFrom(from.face_crops_);
  genders_.MergeFrom(from.genders_);
  ages_.MergeFrom(from.ages_);
  positions_.MergeFrom(from.positions_);
  face_crop_widths_.MergeFrom(from.face_crop_widths_);
}

void OnFaceSetFaceDetectResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:faceRecognition.OnFaceSetFaceDetectResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OnFaceSetFaceDetectResponse::CopyFrom(const OnFaceSetFaceDetectResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:faceRecognition.OnFaceSetFaceDetectResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OnFaceSetFaceDetectResponse::IsInitialized() const {
  return true;
}

void OnFaceSetFaceDetectResponse::Swap(OnFaceSetFaceDetectResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OnFaceSetFaceDetectResponse::InternalSwap(OnFaceSetFaceDetectResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  confidences_.InternalSwap(&other->confidences_);
  face_tokens_.InternalSwap(CastToBase(&other->face_tokens_));
  face_crops_.InternalSwap(CastToBase(&other->face_crops_));
  genders_.InternalSwap(&other->genders_);
  ages_.InternalSwap(&other->ages_);
  CastToBase(&positions_)->InternalSwap(CastToBase(&other->positions_));
  face_crop_widths_.InternalSwap(&other->face_crop_widths_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OnFaceSetFaceDetectResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace faceRecognition
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::faceRecognition::FacePosition* Arena::CreateMaybeMessage< ::faceRecognition::FacePosition >(Arena* arena) {
  return Arena::CreateInternal< ::faceRecognition::FacePosition >(arena);
}
template<> PROTOBUF_NOINLINE ::faceRecognition::FromImageRequest* Arena::CreateMaybeMessage< ::faceRecognition::FromImageRequest >(Arena* arena) {
  return Arena::CreateInternal< ::faceRecognition::FromImageRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::faceRecognition::FromImageResponse* Arena::CreateMaybeMessage< ::faceRecognition::FromImageResponse >(Arena* arena) {
  return Arena::CreateInternal< ::faceRecognition::FromImageResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::faceRecognition::OnFaceDetectRequest* Arena::CreateMaybeMessage< ::faceRecognition::OnFaceDetectRequest >(Arena* arena) {
  return Arena::CreateInternal< ::faceRecognition::OnFaceDetectRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::faceRecognition::OnFaceDetectResponse* Arena::CreateMaybeMessage< ::faceRecognition::OnFaceDetectResponse >(Arena* arena) {
  return Arena::CreateInternal< ::faceRecognition::OnFaceDetectResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::faceRecognition::OnFaceSetFaceDetectRequest* Arena::CreateMaybeMessage< ::faceRecognition::OnFaceSetFaceDetectRequest >(Arena* arena) {
  return Arena::CreateInternal< ::faceRecognition::OnFaceSetFaceDetectRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::faceRecognition::OnFaceSetFaceDetectResponse* Arena::CreateMaybeMessage< ::faceRecognition::OnFaceSetFaceDetectResponse >(Arena* arena) {
  return Arena::CreateInternal< ::faceRecognition::OnFaceSetFaceDetectResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
