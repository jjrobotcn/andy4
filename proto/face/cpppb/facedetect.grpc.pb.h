// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: facedetect.proto
#ifndef GRPC_facedetect_2eproto__INCLUDED
#define GRPC_facedetect_2eproto__INCLUDED

#include "facedetect.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc_impl {
class CompletionQueue;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc_impl

namespace grpc {
namespace experimental {
template <typename RequestT, typename ResponseT>
class MessageAllocator;
}  // namespace experimental
}  // namespace grpc

namespace faceRecognition {

class FaceDetect final {
 public:
  static constexpr char const* service_full_name() {
    return "faceRecognition.FaceDetect";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // FromImage实现对输入图片进行人脸检测，返回检测人脸图片列表
    virtual ::grpc::Status FromImage(::grpc::ClientContext* context, const ::faceRecognition::FromImageRequest& request, ::faceRecognition::FromImageResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::faceRecognition::FromImageResponse>> AsyncFromImage(::grpc::ClientContext* context, const ::faceRecognition::FromImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::faceRecognition::FromImageResponse>>(AsyncFromImageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::faceRecognition::FromImageResponse>> PrepareAsyncFromImage(::grpc::ClientContext* context, const ::faceRecognition::FromImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::faceRecognition::FromImageResponse>>(PrepareAsyncFromImageRaw(context, request, cq));
    }
    // OnFaceDetect实现动态检测人脸，流式返回检测人脸图片戳列表
    std::unique_ptr< ::grpc::ClientReaderInterface< ::faceRecognition::OnFaceDetectResponse>> OnFaceDetect(::grpc::ClientContext* context, const ::faceRecognition::OnFaceDetectRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::faceRecognition::OnFaceDetectResponse>>(OnFaceDetectRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::faceRecognition::OnFaceDetectResponse>> AsyncOnFaceDetect(::grpc::ClientContext* context, const ::faceRecognition::OnFaceDetectRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::faceRecognition::OnFaceDetectResponse>>(AsyncOnFaceDetectRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::faceRecognition::OnFaceDetectResponse>> PrepareAsyncOnFaceDetect(::grpc::ClientContext* context, const ::faceRecognition::OnFaceDetectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::faceRecognition::OnFaceDetectResponse>>(PrepareAsyncOnFaceDetectRaw(context, request, cq));
    }
    // OnFaceSetFaceDetect实现动态检测人脸并与指定FaceSet进行对比，流式返回检测结果
    std::unique_ptr< ::grpc::ClientReaderInterface< ::faceRecognition::OnFaceSetFaceDetectResponse>> OnFaceSetFaceDetect(::grpc::ClientContext* context, const ::faceRecognition::OnFaceSetFaceDetectRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::faceRecognition::OnFaceSetFaceDetectResponse>>(OnFaceSetFaceDetectRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::faceRecognition::OnFaceSetFaceDetectResponse>> AsyncOnFaceSetFaceDetect(::grpc::ClientContext* context, const ::faceRecognition::OnFaceSetFaceDetectRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::faceRecognition::OnFaceSetFaceDetectResponse>>(AsyncOnFaceSetFaceDetectRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::faceRecognition::OnFaceSetFaceDetectResponse>> PrepareAsyncOnFaceSetFaceDetect(::grpc::ClientContext* context, const ::faceRecognition::OnFaceSetFaceDetectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::faceRecognition::OnFaceSetFaceDetectResponse>>(PrepareAsyncOnFaceSetFaceDetectRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // FromImage实现对输入图片进行人脸检测，返回检测人脸图片列表
      virtual void FromImage(::grpc::ClientContext* context, const ::faceRecognition::FromImageRequest* request, ::faceRecognition::FromImageResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void FromImage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::faceRecognition::FromImageResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void FromImage(::grpc::ClientContext* context, const ::faceRecognition::FromImageRequest* request, ::faceRecognition::FromImageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void FromImage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::faceRecognition::FromImageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // OnFaceDetect实现动态检测人脸，流式返回检测人脸图片戳列表
      virtual void OnFaceDetect(::grpc::ClientContext* context, ::faceRecognition::OnFaceDetectRequest* request, ::grpc::experimental::ClientReadReactor< ::faceRecognition::OnFaceDetectResponse>* reactor) = 0;
      // OnFaceSetFaceDetect实现动态检测人脸并与指定FaceSet进行对比，流式返回检测结果
      virtual void OnFaceSetFaceDetect(::grpc::ClientContext* context, ::faceRecognition::OnFaceSetFaceDetectRequest* request, ::grpc::experimental::ClientReadReactor< ::faceRecognition::OnFaceSetFaceDetectResponse>* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::faceRecognition::FromImageResponse>* AsyncFromImageRaw(::grpc::ClientContext* context, const ::faceRecognition::FromImageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::faceRecognition::FromImageResponse>* PrepareAsyncFromImageRaw(::grpc::ClientContext* context, const ::faceRecognition::FromImageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::faceRecognition::OnFaceDetectResponse>* OnFaceDetectRaw(::grpc::ClientContext* context, const ::faceRecognition::OnFaceDetectRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::faceRecognition::OnFaceDetectResponse>* AsyncOnFaceDetectRaw(::grpc::ClientContext* context, const ::faceRecognition::OnFaceDetectRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::faceRecognition::OnFaceDetectResponse>* PrepareAsyncOnFaceDetectRaw(::grpc::ClientContext* context, const ::faceRecognition::OnFaceDetectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::faceRecognition::OnFaceSetFaceDetectResponse>* OnFaceSetFaceDetectRaw(::grpc::ClientContext* context, const ::faceRecognition::OnFaceSetFaceDetectRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::faceRecognition::OnFaceSetFaceDetectResponse>* AsyncOnFaceSetFaceDetectRaw(::grpc::ClientContext* context, const ::faceRecognition::OnFaceSetFaceDetectRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::faceRecognition::OnFaceSetFaceDetectResponse>* PrepareAsyncOnFaceSetFaceDetectRaw(::grpc::ClientContext* context, const ::faceRecognition::OnFaceSetFaceDetectRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status FromImage(::grpc::ClientContext* context, const ::faceRecognition::FromImageRequest& request, ::faceRecognition::FromImageResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::faceRecognition::FromImageResponse>> AsyncFromImage(::grpc::ClientContext* context, const ::faceRecognition::FromImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::faceRecognition::FromImageResponse>>(AsyncFromImageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::faceRecognition::FromImageResponse>> PrepareAsyncFromImage(::grpc::ClientContext* context, const ::faceRecognition::FromImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::faceRecognition::FromImageResponse>>(PrepareAsyncFromImageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::faceRecognition::OnFaceDetectResponse>> OnFaceDetect(::grpc::ClientContext* context, const ::faceRecognition::OnFaceDetectRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::faceRecognition::OnFaceDetectResponse>>(OnFaceDetectRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::faceRecognition::OnFaceDetectResponse>> AsyncOnFaceDetect(::grpc::ClientContext* context, const ::faceRecognition::OnFaceDetectRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::faceRecognition::OnFaceDetectResponse>>(AsyncOnFaceDetectRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::faceRecognition::OnFaceDetectResponse>> PrepareAsyncOnFaceDetect(::grpc::ClientContext* context, const ::faceRecognition::OnFaceDetectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::faceRecognition::OnFaceDetectResponse>>(PrepareAsyncOnFaceDetectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::faceRecognition::OnFaceSetFaceDetectResponse>> OnFaceSetFaceDetect(::grpc::ClientContext* context, const ::faceRecognition::OnFaceSetFaceDetectRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::faceRecognition::OnFaceSetFaceDetectResponse>>(OnFaceSetFaceDetectRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::faceRecognition::OnFaceSetFaceDetectResponse>> AsyncOnFaceSetFaceDetect(::grpc::ClientContext* context, const ::faceRecognition::OnFaceSetFaceDetectRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::faceRecognition::OnFaceSetFaceDetectResponse>>(AsyncOnFaceSetFaceDetectRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::faceRecognition::OnFaceSetFaceDetectResponse>> PrepareAsyncOnFaceSetFaceDetect(::grpc::ClientContext* context, const ::faceRecognition::OnFaceSetFaceDetectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::faceRecognition::OnFaceSetFaceDetectResponse>>(PrepareAsyncOnFaceSetFaceDetectRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void FromImage(::grpc::ClientContext* context, const ::faceRecognition::FromImageRequest* request, ::faceRecognition::FromImageResponse* response, std::function<void(::grpc::Status)>) override;
      void FromImage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::faceRecognition::FromImageResponse* response, std::function<void(::grpc::Status)>) override;
      void FromImage(::grpc::ClientContext* context, const ::faceRecognition::FromImageRequest* request, ::faceRecognition::FromImageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void FromImage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::faceRecognition::FromImageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void OnFaceDetect(::grpc::ClientContext* context, ::faceRecognition::OnFaceDetectRequest* request, ::grpc::experimental::ClientReadReactor< ::faceRecognition::OnFaceDetectResponse>* reactor) override;
      void OnFaceSetFaceDetect(::grpc::ClientContext* context, ::faceRecognition::OnFaceSetFaceDetectRequest* request, ::grpc::experimental::ClientReadReactor< ::faceRecognition::OnFaceSetFaceDetectResponse>* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::faceRecognition::FromImageResponse>* AsyncFromImageRaw(::grpc::ClientContext* context, const ::faceRecognition::FromImageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::faceRecognition::FromImageResponse>* PrepareAsyncFromImageRaw(::grpc::ClientContext* context, const ::faceRecognition::FromImageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::faceRecognition::OnFaceDetectResponse>* OnFaceDetectRaw(::grpc::ClientContext* context, const ::faceRecognition::OnFaceDetectRequest& request) override;
    ::grpc::ClientAsyncReader< ::faceRecognition::OnFaceDetectResponse>* AsyncOnFaceDetectRaw(::grpc::ClientContext* context, const ::faceRecognition::OnFaceDetectRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::faceRecognition::OnFaceDetectResponse>* PrepareAsyncOnFaceDetectRaw(::grpc::ClientContext* context, const ::faceRecognition::OnFaceDetectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::faceRecognition::OnFaceSetFaceDetectResponse>* OnFaceSetFaceDetectRaw(::grpc::ClientContext* context, const ::faceRecognition::OnFaceSetFaceDetectRequest& request) override;
    ::grpc::ClientAsyncReader< ::faceRecognition::OnFaceSetFaceDetectResponse>* AsyncOnFaceSetFaceDetectRaw(::grpc::ClientContext* context, const ::faceRecognition::OnFaceSetFaceDetectRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::faceRecognition::OnFaceSetFaceDetectResponse>* PrepareAsyncOnFaceSetFaceDetectRaw(::grpc::ClientContext* context, const ::faceRecognition::OnFaceSetFaceDetectRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_FromImage_;
    const ::grpc::internal::RpcMethod rpcmethod_OnFaceDetect_;
    const ::grpc::internal::RpcMethod rpcmethod_OnFaceSetFaceDetect_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // FromImage实现对输入图片进行人脸检测，返回检测人脸图片列表
    virtual ::grpc::Status FromImage(::grpc::ServerContext* context, const ::faceRecognition::FromImageRequest* request, ::faceRecognition::FromImageResponse* response);
    // OnFaceDetect实现动态检测人脸，流式返回检测人脸图片戳列表
    virtual ::grpc::Status OnFaceDetect(::grpc::ServerContext* context, const ::faceRecognition::OnFaceDetectRequest* request, ::grpc::ServerWriter< ::faceRecognition::OnFaceDetectResponse>* writer);
    // OnFaceSetFaceDetect实现动态检测人脸并与指定FaceSet进行对比，流式返回检测结果
    virtual ::grpc::Status OnFaceSetFaceDetect(::grpc::ServerContext* context, const ::faceRecognition::OnFaceSetFaceDetectRequest* request, ::grpc::ServerWriter< ::faceRecognition::OnFaceSetFaceDetectResponse>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_FromImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_FromImage() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_FromImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FromImage(::grpc::ServerContext* context, const ::faceRecognition::FromImageRequest* request, ::faceRecognition::FromImageResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFromImage(::grpc::ServerContext* context, ::faceRecognition::FromImageRequest* request, ::grpc::ServerAsyncResponseWriter< ::faceRecognition::FromImageResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_OnFaceDetect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_OnFaceDetect() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_OnFaceDetect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnFaceDetect(::grpc::ServerContext* context, const ::faceRecognition::OnFaceDetectRequest* request, ::grpc::ServerWriter< ::faceRecognition::OnFaceDetectResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOnFaceDetect(::grpc::ServerContext* context, ::faceRecognition::OnFaceDetectRequest* request, ::grpc::ServerAsyncWriter< ::faceRecognition::OnFaceDetectResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_OnFaceSetFaceDetect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_OnFaceSetFaceDetect() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_OnFaceSetFaceDetect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnFaceSetFaceDetect(::grpc::ServerContext* context, const ::faceRecognition::OnFaceSetFaceDetectRequest* request, ::grpc::ServerWriter< ::faceRecognition::OnFaceSetFaceDetectResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOnFaceSetFaceDetect(::grpc::ServerContext* context, ::faceRecognition::OnFaceSetFaceDetectRequest* request, ::grpc::ServerAsyncWriter< ::faceRecognition::OnFaceSetFaceDetectResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_FromImage<WithAsyncMethod_OnFaceDetect<WithAsyncMethod_OnFaceSetFaceDetect<Service > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_FromImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_FromImage() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::faceRecognition::FromImageRequest, ::faceRecognition::FromImageResponse>(
          [this](::grpc::ServerContext* context,
                 const ::faceRecognition::FromImageRequest* request,
                 ::faceRecognition::FromImageResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->FromImage(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_FromImage(
        ::grpc::experimental::MessageAllocator< ::faceRecognition::FromImageRequest, ::faceRecognition::FromImageResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::faceRecognition::FromImageRequest, ::faceRecognition::FromImageResponse>*>(
          ::grpc::Service::experimental().GetHandler(0))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_FromImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FromImage(::grpc::ServerContext* context, const ::faceRecognition::FromImageRequest* request, ::faceRecognition::FromImageResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void FromImage(::grpc::ServerContext* context, const ::faceRecognition::FromImageRequest* request, ::faceRecognition::FromImageResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_OnFaceDetect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_OnFaceDetect() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackServerStreamingHandler< ::faceRecognition::OnFaceDetectRequest, ::faceRecognition::OnFaceDetectResponse>(
          [this] { return this->OnFaceDetect(); }));
    }
    ~ExperimentalWithCallbackMethod_OnFaceDetect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnFaceDetect(::grpc::ServerContext* context, const ::faceRecognition::OnFaceDetectRequest* request, ::grpc::ServerWriter< ::faceRecognition::OnFaceDetectResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::faceRecognition::OnFaceDetectRequest, ::faceRecognition::OnFaceDetectResponse>* OnFaceDetect() {
      return new ::grpc::internal::UnimplementedWriteReactor<
        ::faceRecognition::OnFaceDetectRequest, ::faceRecognition::OnFaceDetectResponse>;}
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_OnFaceSetFaceDetect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_OnFaceSetFaceDetect() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc::internal::CallbackServerStreamingHandler< ::faceRecognition::OnFaceSetFaceDetectRequest, ::faceRecognition::OnFaceSetFaceDetectResponse>(
          [this] { return this->OnFaceSetFaceDetect(); }));
    }
    ~ExperimentalWithCallbackMethod_OnFaceSetFaceDetect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnFaceSetFaceDetect(::grpc::ServerContext* context, const ::faceRecognition::OnFaceSetFaceDetectRequest* request, ::grpc::ServerWriter< ::faceRecognition::OnFaceSetFaceDetectResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::faceRecognition::OnFaceSetFaceDetectRequest, ::faceRecognition::OnFaceSetFaceDetectResponse>* OnFaceSetFaceDetect() {
      return new ::grpc::internal::UnimplementedWriteReactor<
        ::faceRecognition::OnFaceSetFaceDetectRequest, ::faceRecognition::OnFaceSetFaceDetectResponse>;}
  };
  typedef ExperimentalWithCallbackMethod_FromImage<ExperimentalWithCallbackMethod_OnFaceDetect<ExperimentalWithCallbackMethod_OnFaceSetFaceDetect<Service > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_FromImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_FromImage() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_FromImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FromImage(::grpc::ServerContext* context, const ::faceRecognition::FromImageRequest* request, ::faceRecognition::FromImageResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_OnFaceDetect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_OnFaceDetect() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_OnFaceDetect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnFaceDetect(::grpc::ServerContext* context, const ::faceRecognition::OnFaceDetectRequest* request, ::grpc::ServerWriter< ::faceRecognition::OnFaceDetectResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_OnFaceSetFaceDetect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_OnFaceSetFaceDetect() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_OnFaceSetFaceDetect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnFaceSetFaceDetect(::grpc::ServerContext* context, const ::faceRecognition::OnFaceSetFaceDetectRequest* request, ::grpc::ServerWriter< ::faceRecognition::OnFaceSetFaceDetectResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_FromImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_FromImage() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_FromImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FromImage(::grpc::ServerContext* context, const ::faceRecognition::FromImageRequest* request, ::faceRecognition::FromImageResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFromImage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_OnFaceDetect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_OnFaceDetect() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_OnFaceDetect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnFaceDetect(::grpc::ServerContext* context, const ::faceRecognition::OnFaceDetectRequest* request, ::grpc::ServerWriter< ::faceRecognition::OnFaceDetectResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOnFaceDetect(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_OnFaceSetFaceDetect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_OnFaceSetFaceDetect() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_OnFaceSetFaceDetect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnFaceSetFaceDetect(::grpc::ServerContext* context, const ::faceRecognition::OnFaceSetFaceDetectRequest* request, ::grpc::ServerWriter< ::faceRecognition::OnFaceSetFaceDetectResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOnFaceSetFaceDetect(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_FromImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_FromImage() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->FromImage(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_FromImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FromImage(::grpc::ServerContext* context, const ::faceRecognition::FromImageRequest* request, ::faceRecognition::FromImageResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void FromImage(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_OnFaceDetect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_OnFaceDetect() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this] { return this->OnFaceDetect(); }));
    }
    ~ExperimentalWithRawCallbackMethod_OnFaceDetect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnFaceDetect(::grpc::ServerContext* context, const ::faceRecognition::OnFaceDetectRequest* request, ::grpc::ServerWriter< ::faceRecognition::OnFaceDetectResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* OnFaceDetect() {
      return new ::grpc::internal::UnimplementedWriteReactor<
        ::grpc::ByteBuffer, ::grpc::ByteBuffer>;}
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_OnFaceSetFaceDetect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_OnFaceSetFaceDetect() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this] { return this->OnFaceSetFaceDetect(); }));
    }
    ~ExperimentalWithRawCallbackMethod_OnFaceSetFaceDetect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnFaceSetFaceDetect(::grpc::ServerContext* context, const ::faceRecognition::OnFaceSetFaceDetectRequest* request, ::grpc::ServerWriter< ::faceRecognition::OnFaceSetFaceDetectResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* OnFaceSetFaceDetect() {
      return new ::grpc::internal::UnimplementedWriteReactor<
        ::grpc::ByteBuffer, ::grpc::ByteBuffer>;}
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_FromImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_FromImage() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::faceRecognition::FromImageRequest, ::faceRecognition::FromImageResponse>(std::bind(&WithStreamedUnaryMethod_FromImage<BaseClass>::StreamedFromImage, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_FromImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FromImage(::grpc::ServerContext* context, const ::faceRecognition::FromImageRequest* request, ::faceRecognition::FromImageResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFromImage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::faceRecognition::FromImageRequest,::faceRecognition::FromImageResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_FromImage<Service > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_OnFaceDetect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_OnFaceDetect() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler< ::faceRecognition::OnFaceDetectRequest, ::faceRecognition::OnFaceDetectResponse>(std::bind(&WithSplitStreamingMethod_OnFaceDetect<BaseClass>::StreamedOnFaceDetect, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_OnFaceDetect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status OnFaceDetect(::grpc::ServerContext* context, const ::faceRecognition::OnFaceDetectRequest* request, ::grpc::ServerWriter< ::faceRecognition::OnFaceDetectResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedOnFaceDetect(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::faceRecognition::OnFaceDetectRequest,::faceRecognition::OnFaceDetectResponse>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_OnFaceSetFaceDetect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_OnFaceSetFaceDetect() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::SplitServerStreamingHandler< ::faceRecognition::OnFaceSetFaceDetectRequest, ::faceRecognition::OnFaceSetFaceDetectResponse>(std::bind(&WithSplitStreamingMethod_OnFaceSetFaceDetect<BaseClass>::StreamedOnFaceSetFaceDetect, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_OnFaceSetFaceDetect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status OnFaceSetFaceDetect(::grpc::ServerContext* context, const ::faceRecognition::OnFaceSetFaceDetectRequest* request, ::grpc::ServerWriter< ::faceRecognition::OnFaceSetFaceDetectResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedOnFaceSetFaceDetect(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::faceRecognition::OnFaceSetFaceDetectRequest,::faceRecognition::OnFaceSetFaceDetectResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_OnFaceDetect<WithSplitStreamingMethod_OnFaceSetFaceDetect<Service > > SplitStreamedService;
  typedef WithStreamedUnaryMethod_FromImage<WithSplitStreamingMethod_OnFaceDetect<WithSplitStreamingMethod_OnFaceSetFaceDetect<Service > > > StreamedService;
};

}  // namespace faceRecognition


#endif  // GRPC_facedetect_2eproto__INCLUDED
