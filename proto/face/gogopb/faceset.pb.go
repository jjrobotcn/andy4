// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: faceset.proto

package faceRecognition

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type FaceSet struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FaceSet) Reset()         { *m = FaceSet{} }
func (m *FaceSet) String() string { return proto.CompactTextString(m) }
func (*FaceSet) ProtoMessage()    {}
func (*FaceSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_f753892d418b0113, []int{0}
}
func (m *FaceSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FaceSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FaceSet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FaceSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FaceSet.Merge(m, src)
}
func (m *FaceSet) XXX_Size() int {
	return m.Size()
}
func (m *FaceSet) XXX_DiscardUnknown() {
	xxx_messageInfo_FaceSet.DiscardUnknown(m)
}

var xxx_messageInfo_FaceSet proto.InternalMessageInfo

func (m *FaceSet) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *FaceSet) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type FaceDetail struct {
	FaceToken string `protobuf:"bytes,1,opt,name=face_token,json=faceToken,proto3" json:"face_token,omitempty"`
	FaceImg   []byte `protobuf:"bytes,2,opt,name=face_img,json=faceImg,proto3" json:"face_img,omitempty"`
	// 自定义detail
	Detail               map[string]string `protobuf:"bytes,3,rep,name=detail,proto3" json:"detail,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *FaceDetail) Reset()         { *m = FaceDetail{} }
func (m *FaceDetail) String() string { return proto.CompactTextString(m) }
func (*FaceDetail) ProtoMessage()    {}
func (*FaceDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_f753892d418b0113, []int{1}
}
func (m *FaceDetail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FaceDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FaceDetail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FaceDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FaceDetail.Merge(m, src)
}
func (m *FaceDetail) XXX_Size() int {
	return m.Size()
}
func (m *FaceDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_FaceDetail.DiscardUnknown(m)
}

var xxx_messageInfo_FaceDetail proto.InternalMessageInfo

func (m *FaceDetail) GetFaceToken() string {
	if m != nil {
		return m.FaceToken
	}
	return ""
}

func (m *FaceDetail) GetFaceImg() []byte {
	if m != nil {
		return m.FaceImg
	}
	return nil
}

func (m *FaceDetail) GetDetail() map[string]string {
	if m != nil {
		return m.Detail
	}
	return nil
}

type NewFaceSetRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NewFaceSetRequest) Reset()         { *m = NewFaceSetRequest{} }
func (m *NewFaceSetRequest) String() string { return proto.CompactTextString(m) }
func (*NewFaceSetRequest) ProtoMessage()    {}
func (*NewFaceSetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f753892d418b0113, []int{2}
}
func (m *NewFaceSetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewFaceSetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewFaceSetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewFaceSetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewFaceSetRequest.Merge(m, src)
}
func (m *NewFaceSetRequest) XXX_Size() int {
	return m.Size()
}
func (m *NewFaceSetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NewFaceSetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NewFaceSetRequest proto.InternalMessageInfo

func (m *NewFaceSetRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type NewFaceSetResponse struct {
	FaceSet              *FaceSet `protobuf:"bytes,1,opt,name=face_set,json=faceSet,proto3" json:"face_set,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NewFaceSetResponse) Reset()         { *m = NewFaceSetResponse{} }
func (m *NewFaceSetResponse) String() string { return proto.CompactTextString(m) }
func (*NewFaceSetResponse) ProtoMessage()    {}
func (*NewFaceSetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f753892d418b0113, []int{3}
}
func (m *NewFaceSetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewFaceSetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewFaceSetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewFaceSetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewFaceSetResponse.Merge(m, src)
}
func (m *NewFaceSetResponse) XXX_Size() int {
	return m.Size()
}
func (m *NewFaceSetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NewFaceSetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NewFaceSetResponse proto.InternalMessageInfo

func (m *NewFaceSetResponse) GetFaceSet() *FaceSet {
	if m != nil {
		return m.FaceSet
	}
	return nil
}

type DeleteFaceSetRequest struct {
	// FaceSet.id
	FaceSetId            string   `protobuf:"bytes,1,opt,name=face_set_id,json=faceSetId,proto3" json:"face_set_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteFaceSetRequest) Reset()         { *m = DeleteFaceSetRequest{} }
func (m *DeleteFaceSetRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteFaceSetRequest) ProtoMessage()    {}
func (*DeleteFaceSetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f753892d418b0113, []int{4}
}
func (m *DeleteFaceSetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteFaceSetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteFaceSetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteFaceSetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteFaceSetRequest.Merge(m, src)
}
func (m *DeleteFaceSetRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteFaceSetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteFaceSetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteFaceSetRequest proto.InternalMessageInfo

func (m *DeleteFaceSetRequest) GetFaceSetId() string {
	if m != nil {
		return m.FaceSetId
	}
	return ""
}

type DeleteFaceSetResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteFaceSetResponse) Reset()         { *m = DeleteFaceSetResponse{} }
func (m *DeleteFaceSetResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteFaceSetResponse) ProtoMessage()    {}
func (*DeleteFaceSetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f753892d418b0113, []int{5}
}
func (m *DeleteFaceSetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteFaceSetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteFaceSetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteFaceSetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteFaceSetResponse.Merge(m, src)
}
func (m *DeleteFaceSetResponse) XXX_Size() int {
	return m.Size()
}
func (m *DeleteFaceSetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteFaceSetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteFaceSetResponse proto.InternalMessageInfo

type UpdateFaceSetRequest struct {
	FaceSet              *FaceSet `protobuf:"bytes,1,opt,name=face_set,json=faceSet,proto3" json:"face_set,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateFaceSetRequest) Reset()         { *m = UpdateFaceSetRequest{} }
func (m *UpdateFaceSetRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateFaceSetRequest) ProtoMessage()    {}
func (*UpdateFaceSetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f753892d418b0113, []int{6}
}
func (m *UpdateFaceSetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateFaceSetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateFaceSetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateFaceSetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateFaceSetRequest.Merge(m, src)
}
func (m *UpdateFaceSetRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateFaceSetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateFaceSetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateFaceSetRequest proto.InternalMessageInfo

func (m *UpdateFaceSetRequest) GetFaceSet() *FaceSet {
	if m != nil {
		return m.FaceSet
	}
	return nil
}

type UpdateFaceSetResponse struct {
	FaceSet              *FaceSet `protobuf:"bytes,1,opt,name=face_set,json=faceSet,proto3" json:"face_set,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateFaceSetResponse) Reset()         { *m = UpdateFaceSetResponse{} }
func (m *UpdateFaceSetResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateFaceSetResponse) ProtoMessage()    {}
func (*UpdateFaceSetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f753892d418b0113, []int{7}
}
func (m *UpdateFaceSetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateFaceSetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateFaceSetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateFaceSetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateFaceSetResponse.Merge(m, src)
}
func (m *UpdateFaceSetResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateFaceSetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateFaceSetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateFaceSetResponse proto.InternalMessageInfo

func (m *UpdateFaceSetResponse) GetFaceSet() *FaceSet {
	if m != nil {
		return m.FaceSet
	}
	return nil
}

type ListFaceSetsRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListFaceSetsRequest) Reset()         { *m = ListFaceSetsRequest{} }
func (m *ListFaceSetsRequest) String() string { return proto.CompactTextString(m) }
func (*ListFaceSetsRequest) ProtoMessage()    {}
func (*ListFaceSetsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f753892d418b0113, []int{8}
}
func (m *ListFaceSetsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListFaceSetsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListFaceSetsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListFaceSetsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListFaceSetsRequest.Merge(m, src)
}
func (m *ListFaceSetsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListFaceSetsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListFaceSetsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListFaceSetsRequest proto.InternalMessageInfo

type ListFaceSetsResponse struct {
	FaceSets             []*FaceSet `protobuf:"bytes,1,rep,name=face_sets,json=faceSets,proto3" json:"face_sets,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ListFaceSetsResponse) Reset()         { *m = ListFaceSetsResponse{} }
func (m *ListFaceSetsResponse) String() string { return proto.CompactTextString(m) }
func (*ListFaceSetsResponse) ProtoMessage()    {}
func (*ListFaceSetsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f753892d418b0113, []int{9}
}
func (m *ListFaceSetsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListFaceSetsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListFaceSetsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListFaceSetsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListFaceSetsResponse.Merge(m, src)
}
func (m *ListFaceSetsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListFaceSetsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListFaceSetsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListFaceSetsResponse proto.InternalMessageInfo

func (m *ListFaceSetsResponse) GetFaceSets() []*FaceSet {
	if m != nil {
		return m.FaceSets
	}
	return nil
}

type AddFaceRequest struct {
	// FaceSet.id
	FaceSetId string `protobuf:"bytes,1,opt,name=face_set_id,json=faceSetId,proto3" json:"face_set_id,omitempty"`
	// 待识别添加的人脸图片
	FaceImg []byte `protobuf:"bytes,2,opt,name=face_img,json=faceImg,proto3" json:"face_img,omitempty"`
	// 自定义信息数据
	Detail               map[string]string `protobuf:"bytes,3,rep,name=detail,proto3" json:"detail,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *AddFaceRequest) Reset()         { *m = AddFaceRequest{} }
func (m *AddFaceRequest) String() string { return proto.CompactTextString(m) }
func (*AddFaceRequest) ProtoMessage()    {}
func (*AddFaceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f753892d418b0113, []int{10}
}
func (m *AddFaceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddFaceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddFaceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddFaceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddFaceRequest.Merge(m, src)
}
func (m *AddFaceRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddFaceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddFaceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddFaceRequest proto.InternalMessageInfo

func (m *AddFaceRequest) GetFaceSetId() string {
	if m != nil {
		return m.FaceSetId
	}
	return ""
}

func (m *AddFaceRequest) GetFaceImg() []byte {
	if m != nil {
		return m.FaceImg
	}
	return nil
}

func (m *AddFaceRequest) GetDetail() map[string]string {
	if m != nil {
		return m.Detail
	}
	return nil
}

type AddFaceResponse struct {
	// 识别结果唯一值
	FaceToken            string   `protobuf:"bytes,1,opt,name=face_token,json=faceToken,proto3" json:"face_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddFaceResponse) Reset()         { *m = AddFaceResponse{} }
func (m *AddFaceResponse) String() string { return proto.CompactTextString(m) }
func (*AddFaceResponse) ProtoMessage()    {}
func (*AddFaceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f753892d418b0113, []int{11}
}
func (m *AddFaceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddFaceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddFaceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddFaceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddFaceResponse.Merge(m, src)
}
func (m *AddFaceResponse) XXX_Size() int {
	return m.Size()
}
func (m *AddFaceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddFaceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddFaceResponse proto.InternalMessageInfo

func (m *AddFaceResponse) GetFaceToken() string {
	if m != nil {
		return m.FaceToken
	}
	return ""
}

type RemoveFaceRequest struct {
	// FaceSet.id
	FaceSetId string `protobuf:"bytes,1,opt,name=face_set_id,json=faceSetId,proto3" json:"face_set_id,omitempty"`
	// FaceDetail.token
	FaceToken            string   `protobuf:"bytes,2,opt,name=face_token,json=faceToken,proto3" json:"face_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RemoveFaceRequest) Reset()         { *m = RemoveFaceRequest{} }
func (m *RemoveFaceRequest) String() string { return proto.CompactTextString(m) }
func (*RemoveFaceRequest) ProtoMessage()    {}
func (*RemoveFaceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f753892d418b0113, []int{12}
}
func (m *RemoveFaceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveFaceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveFaceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveFaceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveFaceRequest.Merge(m, src)
}
func (m *RemoveFaceRequest) XXX_Size() int {
	return m.Size()
}
func (m *RemoveFaceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveFaceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveFaceRequest proto.InternalMessageInfo

func (m *RemoveFaceRequest) GetFaceSetId() string {
	if m != nil {
		return m.FaceSetId
	}
	return ""
}

func (m *RemoveFaceRequest) GetFaceToken() string {
	if m != nil {
		return m.FaceToken
	}
	return ""
}

type RemoveFaceResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RemoveFaceResponse) Reset()         { *m = RemoveFaceResponse{} }
func (m *RemoveFaceResponse) String() string { return proto.CompactTextString(m) }
func (*RemoveFaceResponse) ProtoMessage()    {}
func (*RemoveFaceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f753892d418b0113, []int{13}
}
func (m *RemoveFaceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveFaceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveFaceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveFaceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveFaceResponse.Merge(m, src)
}
func (m *RemoveFaceResponse) XXX_Size() int {
	return m.Size()
}
func (m *RemoveFaceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveFaceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveFaceResponse proto.InternalMessageInfo

type FaceDetailRequest struct {
	// FaceSet.id
	FaceSetId string `protobuf:"bytes,1,opt,name=face_set_id,json=faceSetId,proto3" json:"face_set_id,omitempty"`
	FaceToken string `protobuf:"bytes,2,opt,name=face_token,json=faceToken,proto3" json:"face_token,omitempty"`
	// 是否返回face_img
	WithFaceImg          bool     `protobuf:"varint,3,opt,name=with_face_img,json=withFaceImg,proto3" json:"with_face_img,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FaceDetailRequest) Reset()         { *m = FaceDetailRequest{} }
func (m *FaceDetailRequest) String() string { return proto.CompactTextString(m) }
func (*FaceDetailRequest) ProtoMessage()    {}
func (*FaceDetailRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f753892d418b0113, []int{14}
}
func (m *FaceDetailRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FaceDetailRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FaceDetailRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FaceDetailRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FaceDetailRequest.Merge(m, src)
}
func (m *FaceDetailRequest) XXX_Size() int {
	return m.Size()
}
func (m *FaceDetailRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FaceDetailRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FaceDetailRequest proto.InternalMessageInfo

func (m *FaceDetailRequest) GetFaceSetId() string {
	if m != nil {
		return m.FaceSetId
	}
	return ""
}

func (m *FaceDetailRequest) GetFaceToken() string {
	if m != nil {
		return m.FaceToken
	}
	return ""
}

func (m *FaceDetailRequest) GetWithFaceImg() bool {
	if m != nil {
		return m.WithFaceImg
	}
	return false
}

type FaceDetailResponse struct {
	FaceDetail           *FaceDetail `protobuf:"bytes,1,opt,name=face_detail,json=faceDetail,proto3" json:"face_detail,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *FaceDetailResponse) Reset()         { *m = FaceDetailResponse{} }
func (m *FaceDetailResponse) String() string { return proto.CompactTextString(m) }
func (*FaceDetailResponse) ProtoMessage()    {}
func (*FaceDetailResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f753892d418b0113, []int{15}
}
func (m *FaceDetailResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FaceDetailResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FaceDetailResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FaceDetailResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FaceDetailResponse.Merge(m, src)
}
func (m *FaceDetailResponse) XXX_Size() int {
	return m.Size()
}
func (m *FaceDetailResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FaceDetailResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FaceDetailResponse proto.InternalMessageInfo

func (m *FaceDetailResponse) GetFaceDetail() *FaceDetail {
	if m != nil {
		return m.FaceDetail
	}
	return nil
}

type ListFaceDetailsRequest struct {
	// FaceSet.id
	FaceSetId string `protobuf:"bytes,1,opt,name=face_set_id,json=faceSetId,proto3" json:"face_set_id,omitempty"`
	// 结果总数限制
	// 默认:10
	Limit uint32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	// 结果匹配offset
	// 默认:0
	Offset               uint32   `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListFaceDetailsRequest) Reset()         { *m = ListFaceDetailsRequest{} }
func (m *ListFaceDetailsRequest) String() string { return proto.CompactTextString(m) }
func (*ListFaceDetailsRequest) ProtoMessage()    {}
func (*ListFaceDetailsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f753892d418b0113, []int{16}
}
func (m *ListFaceDetailsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListFaceDetailsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListFaceDetailsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListFaceDetailsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListFaceDetailsRequest.Merge(m, src)
}
func (m *ListFaceDetailsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListFaceDetailsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListFaceDetailsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListFaceDetailsRequest proto.InternalMessageInfo

func (m *ListFaceDetailsRequest) GetFaceSetId() string {
	if m != nil {
		return m.FaceSetId
	}
	return ""
}

func (m *ListFaceDetailsRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListFaceDetailsRequest) GetOffset() uint32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type ListFaceDetailsResponse struct {
	FaceSet     *FaceSet      `protobuf:"bytes,1,opt,name=face_set,json=faceSet,proto3" json:"face_set,omitempty"`
	FaceDetails []*FaceDetail `protobuf:"bytes,2,rep,name=face_details,json=faceDetails,proto3" json:"face_details,omitempty"`
	// FaceSet中Face总数
	Total                uint32   `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListFaceDetailsResponse) Reset()         { *m = ListFaceDetailsResponse{} }
func (m *ListFaceDetailsResponse) String() string { return proto.CompactTextString(m) }
func (*ListFaceDetailsResponse) ProtoMessage()    {}
func (*ListFaceDetailsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f753892d418b0113, []int{17}
}
func (m *ListFaceDetailsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListFaceDetailsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListFaceDetailsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListFaceDetailsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListFaceDetailsResponse.Merge(m, src)
}
func (m *ListFaceDetailsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListFaceDetailsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListFaceDetailsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListFaceDetailsResponse proto.InternalMessageInfo

func (m *ListFaceDetailsResponse) GetFaceSet() *FaceSet {
	if m != nil {
		return m.FaceSet
	}
	return nil
}

func (m *ListFaceDetailsResponse) GetFaceDetails() []*FaceDetail {
	if m != nil {
		return m.FaceDetails
	}
	return nil
}

func (m *ListFaceDetailsResponse) GetTotal() uint32 {
	if m != nil {
		return m.Total
	}
	return 0
}

func init() {
	proto.RegisterType((*FaceSet)(nil), "faceRecognition.FaceSet")
	proto.RegisterType((*FaceDetail)(nil), "faceRecognition.FaceDetail")
	proto.RegisterMapType((map[string]string)(nil), "faceRecognition.FaceDetail.DetailEntry")
	proto.RegisterType((*NewFaceSetRequest)(nil), "faceRecognition.NewFaceSetRequest")
	proto.RegisterType((*NewFaceSetResponse)(nil), "faceRecognition.NewFaceSetResponse")
	proto.RegisterType((*DeleteFaceSetRequest)(nil), "faceRecognition.DeleteFaceSetRequest")
	proto.RegisterType((*DeleteFaceSetResponse)(nil), "faceRecognition.DeleteFaceSetResponse")
	proto.RegisterType((*UpdateFaceSetRequest)(nil), "faceRecognition.UpdateFaceSetRequest")
	proto.RegisterType((*UpdateFaceSetResponse)(nil), "faceRecognition.UpdateFaceSetResponse")
	proto.RegisterType((*ListFaceSetsRequest)(nil), "faceRecognition.ListFaceSetsRequest")
	proto.RegisterType((*ListFaceSetsResponse)(nil), "faceRecognition.ListFaceSetsResponse")
	proto.RegisterType((*AddFaceRequest)(nil), "faceRecognition.AddFaceRequest")
	proto.RegisterMapType((map[string]string)(nil), "faceRecognition.AddFaceRequest.DetailEntry")
	proto.RegisterType((*AddFaceResponse)(nil), "faceRecognition.AddFaceResponse")
	proto.RegisterType((*RemoveFaceRequest)(nil), "faceRecognition.RemoveFaceRequest")
	proto.RegisterType((*RemoveFaceResponse)(nil), "faceRecognition.RemoveFaceResponse")
	proto.RegisterType((*FaceDetailRequest)(nil), "faceRecognition.FaceDetailRequest")
	proto.RegisterType((*FaceDetailResponse)(nil), "faceRecognition.FaceDetailResponse")
	proto.RegisterType((*ListFaceDetailsRequest)(nil), "faceRecognition.ListFaceDetailsRequest")
	proto.RegisterType((*ListFaceDetailsResponse)(nil), "faceRecognition.ListFaceDetailsResponse")
}

func init() { proto.RegisterFile("faceset.proto", fileDescriptor_f753892d418b0113) }

var fileDescriptor_f753892d418b0113 = []byte{
	// 838 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x96, 0xdf, 0x4e, 0x13, 0x4f,
	0x14, 0xc7, 0x33, 0xed, 0x0f, 0x68, 0x4f, 0x29, 0xfc, 0x18, 0x0b, 0xd4, 0xaa, 0xb5, 0x0e, 0x7f,
	0x5a, 0x10, 0x5a, 0x52, 0xa2, 0x51, 0x62, 0x34, 0x22, 0x92, 0x10, 0xd1, 0x98, 0x45, 0xaf, 0x9b,
	0xa5, 0x3b, 0xad, 0x1b, 0xda, 0xdd, 0xda, 0x19, 0xda, 0x70, 0xab, 0x5e, 0x7a, 0x61, 0xe2, 0x8d,
	0x0f, 0xe0, 0x93, 0x78, 0x65, 0xe2, 0x8d, 0x89, 0x2f, 0x60, 0x88, 0x97, 0x3e, 0x84, 0x99, 0xd9,
	0x69, 0xbb, 0xdb, 0xdd, 0xb6, 0x28, 0xdc, 0xc0, 0xce, 0xe1, 0x9c, 0xf9, 0x7e, 0xce, 0xec, 0x99,
	0x2f, 0x0b, 0xf1, 0x8a, 0x5e, 0xa6, 0x8c, 0xf2, 0x7c, 0xa3, 0x69, 0x73, 0x1b, 0x4f, 0x8b, 0xa5,
	0x46, 0xcb, 0x76, 0xd5, 0x32, 0xb9, 0x69, 0x5b, 0xa9, 0xab, 0x55, 0xdb, 0xae, 0xd6, 0x68, 0x41,
	0x6f, 0x98, 0x05, 0xdd, 0xb2, 0x6c, 0xae, 0x8b, 0x30, 0x73, 0xd2, 0xc9, 0x3a, 0x4c, 0xec, 0xea,
	0x65, 0x7a, 0x40, 0x39, 0x9e, 0x82, 0x90, 0x69, 0x24, 0x51, 0x06, 0xe5, 0xa2, 0x5a, 0xc8, 0x34,
	0x30, 0x86, 0xff, 0x2c, 0xbd, 0x4e, 0x93, 0x21, 0x19, 0x91, 0xcf, 0xe4, 0x0b, 0x02, 0x10, 0xf9,
	0x3b, 0x94, 0xeb, 0x66, 0x0d, 0x5f, 0x03, 0x10, 0x72, 0x25, 0x6e, 0x1f, 0x51, 0x4b, 0x95, 0x46,
	0x45, 0xe4, 0x85, 0x08, 0xe0, 0xcb, 0x10, 0x91, 0x7f, 0x36, 0xeb, 0x55, 0xb9, 0xcb, 0xa4, 0x36,
	0x21, 0xd6, 0x7b, 0xf5, 0x2a, 0x7e, 0x00, 0xe3, 0x86, 0xdc, 0x23, 0x19, 0xce, 0x84, 0x73, 0xb1,
	0x62, 0x36, 0xdf, 0xc7, 0x9d, 0xef, 0xc9, 0xe4, 0x9d, 0x5f, 0x8f, 0x2d, 0xde, 0x3c, 0xd1, 0x54,
	0x59, 0xea, 0x2e, 0xc4, 0x5c, 0x61, 0xfc, 0x3f, 0x84, 0x8f, 0xe8, 0x89, 0x42, 0x10, 0x8f, 0x38,
	0x01, 0x63, 0x2d, 0xbd, 0x76, 0xdc, 0xe1, 0x77, 0x16, 0x5b, 0xa1, 0x3b, 0x88, 0x64, 0x61, 0xe6,
	0x19, 0x6d, 0xab, 0xb6, 0x35, 0xfa, 0xfa, 0x98, 0x32, 0xde, 0xed, 0x16, 0xb9, 0xba, 0xdd, 0x03,
	0xec, 0x4e, 0x64, 0x0d, 0xdb, 0x62, 0x14, 0x6f, 0xaa, 0xae, 0x18, 0xe5, 0x32, 0x3b, 0x56, 0x4c,
	0x06, 0xc2, 0x8b, 0x1a, 0xd9, 0xef, 0x01, 0xe5, 0xe4, 0x36, 0x24, 0x76, 0x68, 0x8d, 0x72, 0xda,
	0x27, 0x9b, 0x86, 0x58, 0x67, 0xb3, 0x52, 0xf7, 0xf4, 0xa3, 0xaa, 0x6a, 0xcf, 0x20, 0xf3, 0x30,
	0xdb, 0x57, 0xe7, 0x50, 0x90, 0x27, 0x90, 0x78, 0xd9, 0x30, 0x74, 0xdf, 0x86, 0xff, 0x44, 0xb7,
	0x0f, 0xb3, 0x7d, 0x9b, 0x9d, 0xa7, 0xd7, 0x59, 0xb8, 0xb4, 0x6f, 0x32, 0xae, 0xe2, 0x4c, 0x91,
	0x91, 0xa7, 0x90, 0xf0, 0x86, 0x95, 0xc6, 0x2d, 0x88, 0x76, 0x34, 0x58, 0x12, 0xc9, 0x69, 0x18,
	0x2c, 0x12, 0x51, 0x22, 0x8c, 0x7c, 0x43, 0x30, 0xf5, 0xd0, 0x30, 0x76, 0x65, 0xe2, 0x99, 0x0e,
	0x73, 0xd8, 0x3c, 0x3e, 0xea, 0x9b, 0xc7, 0x9b, 0x3e, 0x02, 0xaf, 0xd6, 0x45, 0xcf, 0xe4, 0x06,
	0x4c, 0x77, 0x05, 0xd4, 0xb9, 0x0c, 0xbf, 0x5c, 0x44, 0x83, 0x19, 0x8d, 0xd6, 0xed, 0x16, 0xfd,
	0x9b, 0x13, 0xf0, 0xee, 0x19, 0xea, 0xdf, 0x33, 0x01, 0xd8, 0xbd, 0xa7, 0x1a, 0xb5, 0x16, 0xcc,
	0xf4, 0x2e, 0xe3, 0xc5, 0x28, 0x61, 0x02, 0xf1, 0xb6, 0xc9, 0x5f, 0x95, 0xba, 0xef, 0x23, 0x9c,
	0x41, 0xb9, 0x88, 0x16, 0x13, 0xc1, 0x5d, 0xe7, 0x9d, 0x10, 0x0d, 0xb0, 0x5b, 0x57, 0x1d, 0xcb,
	0x3d, 0x25, 0xac, 0x5e, 0x97, 0x33, 0x95, 0x57, 0x86, 0xd8, 0x87, 0x26, 0x41, 0x9c, 0x67, 0x52,
	0x81, 0xb9, 0xce, 0x10, 0x3a, 0x11, 0x76, 0xd6, 0x86, 0x12, 0x30, 0x56, 0x33, 0xeb, 0x26, 0x97,
	0xbd, 0xc4, 0x35, 0x67, 0x81, 0xe7, 0x60, 0xdc, 0xae, 0x54, 0xc4, 0xf5, 0x08, 0xcb, 0xb0, 0x5a,
	0x91, 0xcf, 0x08, 0xe6, 0x7d, 0x42, 0xe7, 0xb8, 0x54, 0xf8, 0x3e, 0x4c, 0xba, 0xda, 0x66, 0xc9,
	0x90, 0x1c, 0xd3, 0xa1, 0x7d, 0xc7, 0x7a, 0x7d, 0x33, 0x81, 0xcf, 0x6d, 0xae, 0xd7, 0x14, 0xa7,
	0xb3, 0x28, 0xfe, 0x8e, 0xc0, 0x94, 0x92, 0x3a, 0xa0, 0xcd, 0x96, 0x59, 0xa6, 0xf8, 0x1d, 0x02,
	0xe8, 0xb9, 0x1e, 0x26, 0x3e, 0x05, 0x9f, 0x77, 0xa6, 0x16, 0x86, 0xe6, 0xa8, 0x29, 0x5a, 0x7f,
	0xf3, 0xe3, 0xd7, 0xc7, 0x50, 0x96, 0x10, 0xf9, 0x9f, 0xa8, 0x55, 0x2c, 0x88, 0x1a, 0xf9, 0x63,
	0x9d, 0x51, 0x5e, 0xb0, 0x68, 0xbb, 0xd4, 0x39, 0x95, 0x2d, 0xb4, 0x8a, 0x3f, 0x20, 0x88, 0x7b,
	0x9c, 0x0f, 0x2f, 0xf9, 0x54, 0x82, 0x1c, 0x35, 0xb5, 0x3c, 0x2a, 0x4d, 0xf1, 0x6c, 0x48, 0x9e,
	0x55, 0xb2, 0x14, 0xcc, 0x63, 0xc8, 0x22, 0x1f, 0x92, 0xc7, 0x26, 0x03, 0x90, 0x82, 0x3c, 0x39,
	0x00, 0x29, 0xd0, 0x6d, 0x47, 0x21, 0x1d, 0xcb, 0x22, 0x0f, 0xd2, 0x7b, 0x04, 0x93, 0x6e, 0x53,
	0xc5, 0x8b, 0x3e, 0xa9, 0x00, 0x2b, 0x4e, 0x2d, 0x8d, 0xc8, 0x52, 0x3c, 0x05, 0xc9, 0xb3, 0x42,
	0x16, 0x83, 0x79, 0x6a, 0x26, 0xe3, 0x5d, 0x1a, 0x26, 0x70, 0xda, 0x30, 0xa1, 0x5c, 0x0c, 0x5f,
	0x1f, 0x61, 0xa0, 0xa9, 0xcc, 0xe0, 0x04, 0x25, 0xbf, 0x22, 0xe5, 0x17, 0x48, 0x3a, 0x58, 0x5e,
	0x37, 0x0c, 0xa9, 0x2e, 0x84, 0xdf, 0x22, 0x80, 0x9e, 0x73, 0x05, 0x0c, 0xad, 0xcf, 0x2a, 0x03,
	0x86, 0x36, 0xc0, 0xfa, 0xd6, 0x24, 0xc2, 0x32, 0xb9, 0x11, 0x8c, 0xd0, 0x94, 0x15, 0x1e, 0x0a,
	0xd7, 0xd7, 0x11, 0x19, 0x76, 0x39, 0x07, 0x52, 0xf8, 0x2d, 0x6f, 0x14, 0x85, 0xcb, 0x17, 0x04,
	0xc5, 0x27, 0x04, 0xd3, 0x7d, 0xd6, 0x83, 0xb3, 0x03, 0x5f, 0xb8, 0xd7, 0x05, 0x53, 0xb9, 0xd1,
	0x89, 0x0a, 0xaa, 0x28, 0xa1, 0xd6, 0x48, 0x76, 0xd4, 0x70, 0x28, 0xc7, 0xda, 0x42, 0xab, 0xdb,
	0xf3, 0x5f, 0x4f, 0xd3, 0xe8, 0xfb, 0x69, 0x1a, 0xfd, 0x3c, 0x4d, 0xa3, 0xed, 0xa8, 0x1a, 0xb8,
	0xe7, 0x87, 0x87, 0xe3, 0xf2, 0x6b, 0x74, 0xf3, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf2, 0xc6,
	0x14, 0x87, 0xcd, 0x0a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FaceSetServiceClient is the client API for FaceSetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FaceSetServiceClient interface {
	// NewFaceSet创建一个FaceSet
	NewFaceSet(ctx context.Context, in *NewFaceSetRequest, opts ...grpc.CallOption) (*NewFaceSetResponse, error)
	// DeleteFaceSet删除一个FaceSet
	DeleteFaceSet(ctx context.Context, in *DeleteFaceSetRequest, opts ...grpc.CallOption) (*DeleteFaceSetResponse, error)
	// UpdateFaceSet更新一个FaceSet基础信息
	UpdateFaceSet(ctx context.Context, in *UpdateFaceSetRequest, opts ...grpc.CallOption) (*UpdateFaceSetResponse, error)
	// ListFaceSets列举所有FaceSets
	ListFaceSets(ctx context.Context, in *ListFaceSetsRequest, opts ...grpc.CallOption) (*ListFaceSetsResponse, error)
	// AddFace将识别一张人脸图片并将结果添加至对应FaceSet中
	AddFace(ctx context.Context, in *AddFaceRequest, opts ...grpc.CallOption) (*AddFaceResponse, error)
	// RemoveFace将从FaceSet中移除对应FaceToken
	RemoveFace(ctx context.Context, in *RemoveFaceRequest, opts ...grpc.CallOption) (*RemoveFaceResponse, error)
	// FaceDetail通过face_token获取对应的FaceDetail
	FaceDetail(ctx context.Context, in *FaceDetailRequest, opts ...grpc.CallOption) (*FaceDetailResponse, error)
	// ListFaceDetails返回指定FaceSet中的FaceDetails
	ListFaceDetails(ctx context.Context, in *ListFaceDetailsRequest, opts ...grpc.CallOption) (*ListFaceDetailsResponse, error)
}

type faceSetServiceClient struct {
	cc *grpc.ClientConn
}

func NewFaceSetServiceClient(cc *grpc.ClientConn) FaceSetServiceClient {
	return &faceSetServiceClient{cc}
}

func (c *faceSetServiceClient) NewFaceSet(ctx context.Context, in *NewFaceSetRequest, opts ...grpc.CallOption) (*NewFaceSetResponse, error) {
	out := new(NewFaceSetResponse)
	err := c.cc.Invoke(ctx, "/faceRecognition.FaceSetService/NewFaceSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *faceSetServiceClient) DeleteFaceSet(ctx context.Context, in *DeleteFaceSetRequest, opts ...grpc.CallOption) (*DeleteFaceSetResponse, error) {
	out := new(DeleteFaceSetResponse)
	err := c.cc.Invoke(ctx, "/faceRecognition.FaceSetService/DeleteFaceSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *faceSetServiceClient) UpdateFaceSet(ctx context.Context, in *UpdateFaceSetRequest, opts ...grpc.CallOption) (*UpdateFaceSetResponse, error) {
	out := new(UpdateFaceSetResponse)
	err := c.cc.Invoke(ctx, "/faceRecognition.FaceSetService/UpdateFaceSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *faceSetServiceClient) ListFaceSets(ctx context.Context, in *ListFaceSetsRequest, opts ...grpc.CallOption) (*ListFaceSetsResponse, error) {
	out := new(ListFaceSetsResponse)
	err := c.cc.Invoke(ctx, "/faceRecognition.FaceSetService/ListFaceSets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *faceSetServiceClient) AddFace(ctx context.Context, in *AddFaceRequest, opts ...grpc.CallOption) (*AddFaceResponse, error) {
	out := new(AddFaceResponse)
	err := c.cc.Invoke(ctx, "/faceRecognition.FaceSetService/AddFace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *faceSetServiceClient) RemoveFace(ctx context.Context, in *RemoveFaceRequest, opts ...grpc.CallOption) (*RemoveFaceResponse, error) {
	out := new(RemoveFaceResponse)
	err := c.cc.Invoke(ctx, "/faceRecognition.FaceSetService/RemoveFace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *faceSetServiceClient) FaceDetail(ctx context.Context, in *FaceDetailRequest, opts ...grpc.CallOption) (*FaceDetailResponse, error) {
	out := new(FaceDetailResponse)
	err := c.cc.Invoke(ctx, "/faceRecognition.FaceSetService/FaceDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *faceSetServiceClient) ListFaceDetails(ctx context.Context, in *ListFaceDetailsRequest, opts ...grpc.CallOption) (*ListFaceDetailsResponse, error) {
	out := new(ListFaceDetailsResponse)
	err := c.cc.Invoke(ctx, "/faceRecognition.FaceSetService/ListFaceDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FaceSetServiceServer is the server API for FaceSetService service.
type FaceSetServiceServer interface {
	// NewFaceSet创建一个FaceSet
	NewFaceSet(context.Context, *NewFaceSetRequest) (*NewFaceSetResponse, error)
	// DeleteFaceSet删除一个FaceSet
	DeleteFaceSet(context.Context, *DeleteFaceSetRequest) (*DeleteFaceSetResponse, error)
	// UpdateFaceSet更新一个FaceSet基础信息
	UpdateFaceSet(context.Context, *UpdateFaceSetRequest) (*UpdateFaceSetResponse, error)
	// ListFaceSets列举所有FaceSets
	ListFaceSets(context.Context, *ListFaceSetsRequest) (*ListFaceSetsResponse, error)
	// AddFace将识别一张人脸图片并将结果添加至对应FaceSet中
	AddFace(context.Context, *AddFaceRequest) (*AddFaceResponse, error)
	// RemoveFace将从FaceSet中移除对应FaceToken
	RemoveFace(context.Context, *RemoveFaceRequest) (*RemoveFaceResponse, error)
	// FaceDetail通过face_token获取对应的FaceDetail
	FaceDetail(context.Context, *FaceDetailRequest) (*FaceDetailResponse, error)
	// ListFaceDetails返回指定FaceSet中的FaceDetails
	ListFaceDetails(context.Context, *ListFaceDetailsRequest) (*ListFaceDetailsResponse, error)
}

// UnimplementedFaceSetServiceServer can be embedded to have forward compatible implementations.
type UnimplementedFaceSetServiceServer struct {
}

func (*UnimplementedFaceSetServiceServer) NewFaceSet(ctx context.Context, req *NewFaceSetRequest) (*NewFaceSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewFaceSet not implemented")
}
func (*UnimplementedFaceSetServiceServer) DeleteFaceSet(ctx context.Context, req *DeleteFaceSetRequest) (*DeleteFaceSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFaceSet not implemented")
}
func (*UnimplementedFaceSetServiceServer) UpdateFaceSet(ctx context.Context, req *UpdateFaceSetRequest) (*UpdateFaceSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFaceSet not implemented")
}
func (*UnimplementedFaceSetServiceServer) ListFaceSets(ctx context.Context, req *ListFaceSetsRequest) (*ListFaceSetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFaceSets not implemented")
}
func (*UnimplementedFaceSetServiceServer) AddFace(ctx context.Context, req *AddFaceRequest) (*AddFaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFace not implemented")
}
func (*UnimplementedFaceSetServiceServer) RemoveFace(ctx context.Context, req *RemoveFaceRequest) (*RemoveFaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFace not implemented")
}
func (*UnimplementedFaceSetServiceServer) FaceDetail(ctx context.Context, req *FaceDetailRequest) (*FaceDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FaceDetail not implemented")
}
func (*UnimplementedFaceSetServiceServer) ListFaceDetails(ctx context.Context, req *ListFaceDetailsRequest) (*ListFaceDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFaceDetails not implemented")
}

func RegisterFaceSetServiceServer(s *grpc.Server, srv FaceSetServiceServer) {
	s.RegisterService(&_FaceSetService_serviceDesc, srv)
}

func _FaceSetService_NewFaceSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewFaceSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaceSetServiceServer).NewFaceSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/faceRecognition.FaceSetService/NewFaceSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaceSetServiceServer).NewFaceSet(ctx, req.(*NewFaceSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FaceSetService_DeleteFaceSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFaceSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaceSetServiceServer).DeleteFaceSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/faceRecognition.FaceSetService/DeleteFaceSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaceSetServiceServer).DeleteFaceSet(ctx, req.(*DeleteFaceSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FaceSetService_UpdateFaceSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFaceSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaceSetServiceServer).UpdateFaceSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/faceRecognition.FaceSetService/UpdateFaceSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaceSetServiceServer).UpdateFaceSet(ctx, req.(*UpdateFaceSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FaceSetService_ListFaceSets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFaceSetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaceSetServiceServer).ListFaceSets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/faceRecognition.FaceSetService/ListFaceSets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaceSetServiceServer).ListFaceSets(ctx, req.(*ListFaceSetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FaceSetService_AddFace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaceSetServiceServer).AddFace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/faceRecognition.FaceSetService/AddFace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaceSetServiceServer).AddFace(ctx, req.(*AddFaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FaceSetService_RemoveFace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveFaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaceSetServiceServer).RemoveFace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/faceRecognition.FaceSetService/RemoveFace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaceSetServiceServer).RemoveFace(ctx, req.(*RemoveFaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FaceSetService_FaceDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FaceDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaceSetServiceServer).FaceDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/faceRecognition.FaceSetService/FaceDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaceSetServiceServer).FaceDetail(ctx, req.(*FaceDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FaceSetService_ListFaceDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFaceDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaceSetServiceServer).ListFaceDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/faceRecognition.FaceSetService/ListFaceDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaceSetServiceServer).ListFaceDetails(ctx, req.(*ListFaceDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FaceSetService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "faceRecognition.FaceSetService",
	HandlerType: (*FaceSetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewFaceSet",
			Handler:    _FaceSetService_NewFaceSet_Handler,
		},
		{
			MethodName: "DeleteFaceSet",
			Handler:    _FaceSetService_DeleteFaceSet_Handler,
		},
		{
			MethodName: "UpdateFaceSet",
			Handler:    _FaceSetService_UpdateFaceSet_Handler,
		},
		{
			MethodName: "ListFaceSets",
			Handler:    _FaceSetService_ListFaceSets_Handler,
		},
		{
			MethodName: "AddFace",
			Handler:    _FaceSetService_AddFace_Handler,
		},
		{
			MethodName: "RemoveFace",
			Handler:    _FaceSetService_RemoveFace_Handler,
		},
		{
			MethodName: "FaceDetail",
			Handler:    _FaceSetService_FaceDetail_Handler,
		},
		{
			MethodName: "ListFaceDetails",
			Handler:    _FaceSetService_ListFaceDetails_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "faceset.proto",
}

func (m *FaceSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FaceSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FaceSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintFaceset(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintFaceset(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FaceDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FaceDetail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FaceDetail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Detail) > 0 {
		for k := range m.Detail {
			v := m.Detail[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintFaceset(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintFaceset(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintFaceset(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.FaceImg) > 0 {
		i -= len(m.FaceImg)
		copy(dAtA[i:], m.FaceImg)
		i = encodeVarintFaceset(dAtA, i, uint64(len(m.FaceImg)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FaceToken) > 0 {
		i -= len(m.FaceToken)
		copy(dAtA[i:], m.FaceToken)
		i = encodeVarintFaceset(dAtA, i, uint64(len(m.FaceToken)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NewFaceSetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewFaceSetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewFaceSetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintFaceset(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NewFaceSetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewFaceSetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewFaceSetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.FaceSet != nil {
		{
			size, err := m.FaceSet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFaceset(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteFaceSetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteFaceSetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteFaceSetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.FaceSetId) > 0 {
		i -= len(m.FaceSetId)
		copy(dAtA[i:], m.FaceSetId)
		i = encodeVarintFaceset(dAtA, i, uint64(len(m.FaceSetId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteFaceSetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteFaceSetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteFaceSetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *UpdateFaceSetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateFaceSetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateFaceSetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.FaceSet != nil {
		{
			size, err := m.FaceSet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFaceset(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateFaceSetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateFaceSetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateFaceSetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.FaceSet != nil {
		{
			size, err := m.FaceSet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFaceset(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListFaceSetsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListFaceSetsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListFaceSetsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *ListFaceSetsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListFaceSetsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListFaceSetsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.FaceSets) > 0 {
		for iNdEx := len(m.FaceSets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FaceSets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFaceset(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AddFaceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddFaceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddFaceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Detail) > 0 {
		for k := range m.Detail {
			v := m.Detail[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintFaceset(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintFaceset(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintFaceset(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.FaceImg) > 0 {
		i -= len(m.FaceImg)
		copy(dAtA[i:], m.FaceImg)
		i = encodeVarintFaceset(dAtA, i, uint64(len(m.FaceImg)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FaceSetId) > 0 {
		i -= len(m.FaceSetId)
		copy(dAtA[i:], m.FaceSetId)
		i = encodeVarintFaceset(dAtA, i, uint64(len(m.FaceSetId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddFaceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddFaceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddFaceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.FaceToken) > 0 {
		i -= len(m.FaceToken)
		copy(dAtA[i:], m.FaceToken)
		i = encodeVarintFaceset(dAtA, i, uint64(len(m.FaceToken)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RemoveFaceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveFaceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemoveFaceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.FaceToken) > 0 {
		i -= len(m.FaceToken)
		copy(dAtA[i:], m.FaceToken)
		i = encodeVarintFaceset(dAtA, i, uint64(len(m.FaceToken)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FaceSetId) > 0 {
		i -= len(m.FaceSetId)
		copy(dAtA[i:], m.FaceSetId)
		i = encodeVarintFaceset(dAtA, i, uint64(len(m.FaceSetId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RemoveFaceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveFaceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemoveFaceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *FaceDetailRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FaceDetailRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FaceDetailRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.WithFaceImg {
		i--
		if m.WithFaceImg {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.FaceToken) > 0 {
		i -= len(m.FaceToken)
		copy(dAtA[i:], m.FaceToken)
		i = encodeVarintFaceset(dAtA, i, uint64(len(m.FaceToken)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FaceSetId) > 0 {
		i -= len(m.FaceSetId)
		copy(dAtA[i:], m.FaceSetId)
		i = encodeVarintFaceset(dAtA, i, uint64(len(m.FaceSetId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FaceDetailResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FaceDetailResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FaceDetailResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.FaceDetail != nil {
		{
			size, err := m.FaceDetail.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFaceset(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListFaceDetailsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListFaceDetailsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListFaceDetailsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Offset != 0 {
		i = encodeVarintFaceset(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x18
	}
	if m.Limit != 0 {
		i = encodeVarintFaceset(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	if len(m.FaceSetId) > 0 {
		i -= len(m.FaceSetId)
		copy(dAtA[i:], m.FaceSetId)
		i = encodeVarintFaceset(dAtA, i, uint64(len(m.FaceSetId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListFaceDetailsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListFaceDetailsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListFaceDetailsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Total != 0 {
		i = encodeVarintFaceset(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x18
	}
	if len(m.FaceDetails) > 0 {
		for iNdEx := len(m.FaceDetails) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FaceDetails[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFaceset(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.FaceSet != nil {
		{
			size, err := m.FaceSet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFaceset(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintFaceset(dAtA []byte, offset int, v uint64) int {
	offset -= sovFaceset(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *FaceSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovFaceset(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovFaceset(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FaceDetail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FaceToken)
	if l > 0 {
		n += 1 + l + sovFaceset(uint64(l))
	}
	l = len(m.FaceImg)
	if l > 0 {
		n += 1 + l + sovFaceset(uint64(l))
	}
	if len(m.Detail) > 0 {
		for k, v := range m.Detail {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovFaceset(uint64(len(k))) + 1 + len(v) + sovFaceset(uint64(len(v)))
			n += mapEntrySize + 1 + sovFaceset(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NewFaceSetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovFaceset(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NewFaceSetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FaceSet != nil {
		l = m.FaceSet.Size()
		n += 1 + l + sovFaceset(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteFaceSetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FaceSetId)
	if l > 0 {
		n += 1 + l + sovFaceset(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteFaceSetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateFaceSetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FaceSet != nil {
		l = m.FaceSet.Size()
		n += 1 + l + sovFaceset(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateFaceSetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FaceSet != nil {
		l = m.FaceSet.Size()
		n += 1 + l + sovFaceset(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListFaceSetsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListFaceSetsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.FaceSets) > 0 {
		for _, e := range m.FaceSets {
			l = e.Size()
			n += 1 + l + sovFaceset(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddFaceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FaceSetId)
	if l > 0 {
		n += 1 + l + sovFaceset(uint64(l))
	}
	l = len(m.FaceImg)
	if l > 0 {
		n += 1 + l + sovFaceset(uint64(l))
	}
	if len(m.Detail) > 0 {
		for k, v := range m.Detail {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovFaceset(uint64(len(k))) + 1 + len(v) + sovFaceset(uint64(len(v)))
			n += mapEntrySize + 1 + sovFaceset(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddFaceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FaceToken)
	if l > 0 {
		n += 1 + l + sovFaceset(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RemoveFaceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FaceSetId)
	if l > 0 {
		n += 1 + l + sovFaceset(uint64(l))
	}
	l = len(m.FaceToken)
	if l > 0 {
		n += 1 + l + sovFaceset(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RemoveFaceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FaceDetailRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FaceSetId)
	if l > 0 {
		n += 1 + l + sovFaceset(uint64(l))
	}
	l = len(m.FaceToken)
	if l > 0 {
		n += 1 + l + sovFaceset(uint64(l))
	}
	if m.WithFaceImg {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FaceDetailResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FaceDetail != nil {
		l = m.FaceDetail.Size()
		n += 1 + l + sovFaceset(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListFaceDetailsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FaceSetId)
	if l > 0 {
		n += 1 + l + sovFaceset(uint64(l))
	}
	if m.Limit != 0 {
		n += 1 + sovFaceset(uint64(m.Limit))
	}
	if m.Offset != 0 {
		n += 1 + sovFaceset(uint64(m.Offset))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListFaceDetailsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FaceSet != nil {
		l = m.FaceSet.Size()
		n += 1 + l + sovFaceset(uint64(l))
	}
	if len(m.FaceDetails) > 0 {
		for _, e := range m.FaceDetails {
			l = e.Size()
			n += 1 + l + sovFaceset(uint64(l))
		}
	}
	if m.Total != 0 {
		n += 1 + sovFaceset(uint64(m.Total))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovFaceset(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFaceset(x uint64) (n int) {
	return sovFaceset(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FaceSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFaceset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FaceSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FaceSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFaceset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFaceset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFaceset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFaceset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFaceset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFaceset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFaceset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFaceset
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFaceset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FaceDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFaceset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FaceDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FaceDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FaceToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFaceset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFaceset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFaceset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FaceToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FaceImg", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFaceset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFaceset
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFaceset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FaceImg = append(m.FaceImg[:0], dAtA[iNdEx:postIndex]...)
			if m.FaceImg == nil {
				m.FaceImg = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Detail", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFaceset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFaceset
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFaceset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Detail == nil {
				m.Detail = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFaceset
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFaceset
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthFaceset
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthFaceset
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFaceset
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthFaceset
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthFaceset
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipFaceset(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthFaceset
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Detail[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFaceset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFaceset
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFaceset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewFaceSetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFaceset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewFaceSetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewFaceSetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFaceset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFaceset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFaceset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFaceset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFaceset
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFaceset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewFaceSetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFaceset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewFaceSetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewFaceSetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FaceSet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFaceset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFaceset
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFaceset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FaceSet == nil {
				m.FaceSet = &FaceSet{}
			}
			if err := m.FaceSet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFaceset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFaceset
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFaceset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteFaceSetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFaceset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteFaceSetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteFaceSetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FaceSetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFaceset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFaceset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFaceset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FaceSetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFaceset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFaceset
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFaceset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteFaceSetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFaceset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteFaceSetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteFaceSetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFaceset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFaceset
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFaceset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateFaceSetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFaceset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateFaceSetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateFaceSetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FaceSet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFaceset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFaceset
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFaceset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FaceSet == nil {
				m.FaceSet = &FaceSet{}
			}
			if err := m.FaceSet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFaceset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFaceset
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFaceset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateFaceSetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFaceset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateFaceSetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateFaceSetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FaceSet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFaceset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFaceset
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFaceset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FaceSet == nil {
				m.FaceSet = &FaceSet{}
			}
			if err := m.FaceSet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFaceset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFaceset
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFaceset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListFaceSetsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFaceset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListFaceSetsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListFaceSetsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFaceset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFaceset
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFaceset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListFaceSetsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFaceset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListFaceSetsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListFaceSetsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FaceSets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFaceset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFaceset
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFaceset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FaceSets = append(m.FaceSets, &FaceSet{})
			if err := m.FaceSets[len(m.FaceSets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFaceset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFaceset
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFaceset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddFaceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFaceset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddFaceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddFaceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FaceSetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFaceset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFaceset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFaceset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FaceSetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FaceImg", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFaceset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFaceset
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFaceset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FaceImg = append(m.FaceImg[:0], dAtA[iNdEx:postIndex]...)
			if m.FaceImg == nil {
				m.FaceImg = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Detail", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFaceset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFaceset
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFaceset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Detail == nil {
				m.Detail = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFaceset
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFaceset
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthFaceset
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthFaceset
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFaceset
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthFaceset
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthFaceset
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipFaceset(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthFaceset
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Detail[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFaceset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFaceset
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFaceset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddFaceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFaceset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddFaceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddFaceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FaceToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFaceset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFaceset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFaceset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FaceToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFaceset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFaceset
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFaceset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveFaceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFaceset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveFaceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveFaceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FaceSetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFaceset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFaceset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFaceset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FaceSetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FaceToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFaceset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFaceset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFaceset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FaceToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFaceset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFaceset
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFaceset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveFaceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFaceset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveFaceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveFaceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFaceset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFaceset
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFaceset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FaceDetailRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFaceset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FaceDetailRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FaceDetailRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FaceSetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFaceset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFaceset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFaceset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FaceSetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FaceToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFaceset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFaceset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFaceset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FaceToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithFaceImg", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFaceset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WithFaceImg = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipFaceset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFaceset
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFaceset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FaceDetailResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFaceset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FaceDetailResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FaceDetailResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FaceDetail", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFaceset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFaceset
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFaceset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FaceDetail == nil {
				m.FaceDetail = &FaceDetail{}
			}
			if err := m.FaceDetail.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFaceset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFaceset
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFaceset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListFaceDetailsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFaceset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListFaceDetailsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListFaceDetailsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FaceSetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFaceset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFaceset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFaceset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FaceSetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFaceset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFaceset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFaceset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFaceset
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFaceset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListFaceDetailsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFaceset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListFaceDetailsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListFaceDetailsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FaceSet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFaceset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFaceset
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFaceset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FaceSet == nil {
				m.FaceSet = &FaceSet{}
			}
			if err := m.FaceSet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FaceDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFaceset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFaceset
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFaceset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FaceDetails = append(m.FaceDetails, &FaceDetail{})
			if err := m.FaceDetails[len(m.FaceDetails)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFaceset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFaceset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFaceset
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFaceset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFaceset(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFaceset
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFaceset
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFaceset
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFaceset
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthFaceset
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowFaceset
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipFaceset(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthFaceset
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthFaceset = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFaceset   = fmt.Errorf("proto: integer overflow")
)
