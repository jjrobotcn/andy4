syntax = "proto3";

package faceRecognition;
option java_outer_classname = "FaceSetPb";

import "google/api/annotations.proto";

service FaceSetService {
    // NewFaceSet创建一个FaceSet
    rpc NewFaceSet(NewFaceSetRequest) returns (NewFaceSetResponse) {
        option (google.api.http) = {
            post: "/api/v2/face/face-set/new_face_set"
            body: "*"
        };
    }

    // DeleteFaceSet删除一个FaceSet
    rpc DeleteFaceSet(DeleteFaceSetRequest) returns (DeleteFaceSetResponse) {
        option (google.api.http) = {
            post: "/api/v2/face/face-set/delete_face_set"
            body: "*"
        };
    }

    // UpdateFaceSet更新一个FaceSet基础信息
    rpc UpdateFaceSet(UpdateFaceSetRequest) returns (UpdateFaceSetResponse) {
        option (google.api.http) = {
            post: "/api/v2/face/face-set/update_face_set"
            body: "*"
        };
    }

    // ListFaceSets列举所有FaceSets
    rpc ListFaceSets(ListFaceSetsRequest) returns (ListFaceSetsResponse) {
        option (google.api.http) = {
            post: "/api/v2/face/face-set/list_face_sets"
            body: "*"
        };
    }

    // AddFace将识别一张人脸图片并将结果添加至对应FaceSet中
    rpc AddFace(AddFaceRequest) returns (AddFaceResponse) {
        option (google.api.http) = {
            post: "/api/v2/face/face-set/add_face"
            body: "*"
        };
    }

    // RemoveFace将从FaceSet中移除对应FaceToken
    rpc RemoveFace(RemoveFaceRequest) returns (RemoveFaceResponse) {
        option (google.api.http) = {
            post: "/api/v2/face/face-set/remove_face"
            body: "*"
        };
    }

    // FaceDetail通过face_token获取对应的FaceDetail
    rpc FaceDetail(FaceDetailRequest) returns (FaceDetailResponse) {
        option (google.api.http) = {
            post: "/api/v2/face/face-set/face_detail"
            body: "*"
        };
    }

    // ListFaceDetails返回指定FaceSet中的FaceDetails
    rpc ListFaceDetails(ListFaceDetailsRequest) returns (ListFaceDetailsResponse) {
        option (google.api.http) = {
            post: "/api/v2/face/face-set/list_face_details"
            body: "*"
        };
    }
}

message FaceSet {
    string id = 1;
    string name = 2;
}

message FaceDetail {
    string face_token = 1;
    bytes face_img = 2;
    // 自定义detail
    map<string, string> detail = 3;
}

message NewFaceSetRequest {
    string name = 1;
}

message NewFaceSetResponse {
    FaceSet face_set = 1;
}

message DeleteFaceSetRequest {
    // FaceSet.id
    string face_set_id = 1;
}

message DeleteFaceSetResponse {

}

message UpdateFaceSetRequest {
    FaceSet face_set = 1;
}

message UpdateFaceSetResponse {
    FaceSet face_set = 1;
}

message ListFaceSetsRequest {

}

message ListFaceSetsResponse {
    repeated FaceSet face_sets = 1;
}

message AddFaceRequest {
    // FaceSet.id
    string face_set_id = 1;
    // 待识别添加的人脸图片
    bytes face_img = 2;
    // 自定义信息数据
    map<string, string> detail = 3;
}

message AddFaceResponse {
    // 识别结果唯一值
    string face_token = 1;
}

message RemoveFaceRequest {
    // FaceSet.id
    string face_set_id = 1;
    // FaceDetail.token
    string face_token = 2;
}

message RemoveFaceResponse {

}

message FaceDetailRequest {
    // FaceSet.id
    string face_set_id = 1;
    string face_token = 2;
    // 是否返回face_img
    bool with_face_img = 3;
}

message FaceDetailResponse {
    FaceDetail face_detail = 1;
}

message ListFaceDetailsRequest {
    // FaceSet.id
    string face_set_id = 1;
    // 结果总数限制
    // 默认:10
    uint32 limit = 2;
    // 结果匹配offset
    // 默认:0
    uint32 offset = 3;
}

message ListFaceDetailsResponse {
    FaceSet face_set = 1;
    repeated FaceDetail face_details = 2;
    // FaceSet中Face总数
    uint32 total = 3;
}
