// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: face.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace FaceRecognition {
  public static partial class FaceService
  {
    static readonly string __ServiceName = "faceRecognition.FaceService";

    static readonly grpc::Marshaller<global::FaceRecognition.CompareRequest> __Marshaller_faceRecognition_CompareRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::FaceRecognition.CompareRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::FaceRecognition.CompareResponse> __Marshaller_faceRecognition_CompareResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::FaceRecognition.CompareResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::FaceRecognition.SearchRequest> __Marshaller_faceRecognition_SearchRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::FaceRecognition.SearchRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::FaceRecognition.SearchResponse> __Marshaller_faceRecognition_SearchResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::FaceRecognition.SearchResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::FaceRecognition.CompareRequest, global::FaceRecognition.CompareResponse> __Method_Compare = new grpc::Method<global::FaceRecognition.CompareRequest, global::FaceRecognition.CompareResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Compare",
        __Marshaller_faceRecognition_CompareRequest,
        __Marshaller_faceRecognition_CompareResponse);

    static readonly grpc::Method<global::FaceRecognition.SearchRequest, global::FaceRecognition.SearchResponse> __Method_Search = new grpc::Method<global::FaceRecognition.SearchRequest, global::FaceRecognition.SearchResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Search",
        __Marshaller_faceRecognition_SearchRequest,
        __Marshaller_faceRecognition_SearchResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::FaceRecognition.FaceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of FaceService</summary>
    [grpc::BindServiceMethod(typeof(FaceService), "BindService")]
    public abstract partial class FaceServiceBase
    {
      /// <summary>
      /// Compare方法实现了两张人脸图片对比识别，返回两图片的对比可信度
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::FaceRecognition.CompareResponse> Compare(global::FaceRecognition.CompareRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Search方法实现搜索FaceSet中近似人脸数据，
      /// 若存在匹配数据时返回一个FaceDetail及其confidence
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::FaceRecognition.SearchResponse> Search(global::FaceRecognition.SearchRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for FaceService</summary>
    public partial class FaceServiceClient : grpc::ClientBase<FaceServiceClient>
    {
      /// <summary>Creates a new client for FaceService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public FaceServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for FaceService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public FaceServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected FaceServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected FaceServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Compare方法实现了两张人脸图片对比识别，返回两图片的对比可信度
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::FaceRecognition.CompareResponse Compare(global::FaceRecognition.CompareRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Compare(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Compare方法实现了两张人脸图片对比识别，返回两图片的对比可信度
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::FaceRecognition.CompareResponse Compare(global::FaceRecognition.CompareRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Compare, null, options, request);
      }
      /// <summary>
      /// Compare方法实现了两张人脸图片对比识别，返回两图片的对比可信度
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::FaceRecognition.CompareResponse> CompareAsync(global::FaceRecognition.CompareRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CompareAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Compare方法实现了两张人脸图片对比识别，返回两图片的对比可信度
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::FaceRecognition.CompareResponse> CompareAsync(global::FaceRecognition.CompareRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Compare, null, options, request);
      }
      /// <summary>
      /// Search方法实现搜索FaceSet中近似人脸数据，
      /// 若存在匹配数据时返回一个FaceDetail及其confidence
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::FaceRecognition.SearchResponse Search(global::FaceRecognition.SearchRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Search(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Search方法实现搜索FaceSet中近似人脸数据，
      /// 若存在匹配数据时返回一个FaceDetail及其confidence
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::FaceRecognition.SearchResponse Search(global::FaceRecognition.SearchRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Search, null, options, request);
      }
      /// <summary>
      /// Search方法实现搜索FaceSet中近似人脸数据，
      /// 若存在匹配数据时返回一个FaceDetail及其confidence
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::FaceRecognition.SearchResponse> SearchAsync(global::FaceRecognition.SearchRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SearchAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Search方法实现搜索FaceSet中近似人脸数据，
      /// 若存在匹配数据时返回一个FaceDetail及其confidence
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::FaceRecognition.SearchResponse> SearchAsync(global::FaceRecognition.SearchRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Search, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override FaceServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new FaceServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(FaceServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Compare, serviceImpl.Compare)
          .AddMethod(__Method_Search, serviceImpl.Search).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, FaceServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Compare, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::FaceRecognition.CompareRequest, global::FaceRecognition.CompareResponse>(serviceImpl.Compare));
      serviceBinder.AddMethod(__Method_Search, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::FaceRecognition.SearchRequest, global::FaceRecognition.SearchResponse>(serviceImpl.Search));
    }

  }
}
#endregion
