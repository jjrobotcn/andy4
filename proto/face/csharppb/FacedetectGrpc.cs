// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: facedetect.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace FaceRecognition {
  public static partial class FaceDetect
  {
    static readonly string __ServiceName = "faceRecognition.FaceDetect";

    static readonly grpc::Marshaller<global::FaceRecognition.FromImageRequest> __Marshaller_faceRecognition_FromImageRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::FaceRecognition.FromImageRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::FaceRecognition.FromImageResponse> __Marshaller_faceRecognition_FromImageResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::FaceRecognition.FromImageResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::FaceRecognition.OnFaceDetectRequest> __Marshaller_faceRecognition_OnFaceDetectRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::FaceRecognition.OnFaceDetectRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::FaceRecognition.OnFaceDetectResponse> __Marshaller_faceRecognition_OnFaceDetectResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::FaceRecognition.OnFaceDetectResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::FaceRecognition.OnFaceSetFaceDetectRequest> __Marshaller_faceRecognition_OnFaceSetFaceDetectRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::FaceRecognition.OnFaceSetFaceDetectRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::FaceRecognition.OnFaceSetFaceDetectResponse> __Marshaller_faceRecognition_OnFaceSetFaceDetectResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::FaceRecognition.OnFaceSetFaceDetectResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::FaceRecognition.FromImageRequest, global::FaceRecognition.FromImageResponse> __Method_FromImage = new grpc::Method<global::FaceRecognition.FromImageRequest, global::FaceRecognition.FromImageResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "FromImage",
        __Marshaller_faceRecognition_FromImageRequest,
        __Marshaller_faceRecognition_FromImageResponse);

    static readonly grpc::Method<global::FaceRecognition.OnFaceDetectRequest, global::FaceRecognition.OnFaceDetectResponse> __Method_OnFaceDetect = new grpc::Method<global::FaceRecognition.OnFaceDetectRequest, global::FaceRecognition.OnFaceDetectResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "OnFaceDetect",
        __Marshaller_faceRecognition_OnFaceDetectRequest,
        __Marshaller_faceRecognition_OnFaceDetectResponse);

    static readonly grpc::Method<global::FaceRecognition.OnFaceSetFaceDetectRequest, global::FaceRecognition.OnFaceSetFaceDetectResponse> __Method_OnFaceSetFaceDetect = new grpc::Method<global::FaceRecognition.OnFaceSetFaceDetectRequest, global::FaceRecognition.OnFaceSetFaceDetectResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "OnFaceSetFaceDetect",
        __Marshaller_faceRecognition_OnFaceSetFaceDetectRequest,
        __Marshaller_faceRecognition_OnFaceSetFaceDetectResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::FaceRecognition.FacedetectReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of FaceDetect</summary>
    [grpc::BindServiceMethod(typeof(FaceDetect), "BindService")]
    public abstract partial class FaceDetectBase
    {
      /// <summary>
      /// FromImage实现对输入图片进行人脸检测，返回检测人脸图片列表
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::FaceRecognition.FromImageResponse> FromImage(global::FaceRecognition.FromImageRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// OnFaceDetect实现动态检测人脸，流式返回检测人脸图片戳列表
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task OnFaceDetect(global::FaceRecognition.OnFaceDetectRequest request, grpc::IServerStreamWriter<global::FaceRecognition.OnFaceDetectResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// OnFaceSetFaceDetect实现动态检测人脸并与指定FaceSet进行对比，流式返回检测结果
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task OnFaceSetFaceDetect(global::FaceRecognition.OnFaceSetFaceDetectRequest request, grpc::IServerStreamWriter<global::FaceRecognition.OnFaceSetFaceDetectResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for FaceDetect</summary>
    public partial class FaceDetectClient : grpc::ClientBase<FaceDetectClient>
    {
      /// <summary>Creates a new client for FaceDetect</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public FaceDetectClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for FaceDetect that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public FaceDetectClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected FaceDetectClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected FaceDetectClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// FromImage实现对输入图片进行人脸检测，返回检测人脸图片列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::FaceRecognition.FromImageResponse FromImage(global::FaceRecognition.FromImageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FromImage(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// FromImage实现对输入图片进行人脸检测，返回检测人脸图片列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::FaceRecognition.FromImageResponse FromImage(global::FaceRecognition.FromImageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_FromImage, null, options, request);
      }
      /// <summary>
      /// FromImage实现对输入图片进行人脸检测，返回检测人脸图片列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::FaceRecognition.FromImageResponse> FromImageAsync(global::FaceRecognition.FromImageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FromImageAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// FromImage实现对输入图片进行人脸检测，返回检测人脸图片列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::FaceRecognition.FromImageResponse> FromImageAsync(global::FaceRecognition.FromImageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_FromImage, null, options, request);
      }
      /// <summary>
      /// OnFaceDetect实现动态检测人脸，流式返回检测人脸图片戳列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::FaceRecognition.OnFaceDetectResponse> OnFaceDetect(global::FaceRecognition.OnFaceDetectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return OnFaceDetect(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// OnFaceDetect实现动态检测人脸，流式返回检测人脸图片戳列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::FaceRecognition.OnFaceDetectResponse> OnFaceDetect(global::FaceRecognition.OnFaceDetectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_OnFaceDetect, null, options, request);
      }
      /// <summary>
      /// OnFaceSetFaceDetect实现动态检测人脸并与指定FaceSet进行对比，流式返回检测结果
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::FaceRecognition.OnFaceSetFaceDetectResponse> OnFaceSetFaceDetect(global::FaceRecognition.OnFaceSetFaceDetectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return OnFaceSetFaceDetect(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// OnFaceSetFaceDetect实现动态检测人脸并与指定FaceSet进行对比，流式返回检测结果
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::FaceRecognition.OnFaceSetFaceDetectResponse> OnFaceSetFaceDetect(global::FaceRecognition.OnFaceSetFaceDetectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_OnFaceSetFaceDetect, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override FaceDetectClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new FaceDetectClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(FaceDetectBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_FromImage, serviceImpl.FromImage)
          .AddMethod(__Method_OnFaceDetect, serviceImpl.OnFaceDetect)
          .AddMethod(__Method_OnFaceSetFaceDetect, serviceImpl.OnFaceSetFaceDetect).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, FaceDetectBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_FromImage, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::FaceRecognition.FromImageRequest, global::FaceRecognition.FromImageResponse>(serviceImpl.FromImage));
      serviceBinder.AddMethod(__Method_OnFaceDetect, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::FaceRecognition.OnFaceDetectRequest, global::FaceRecognition.OnFaceDetectResponse>(serviceImpl.OnFaceDetect));
      serviceBinder.AddMethod(__Method_OnFaceSetFaceDetect, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::FaceRecognition.OnFaceSetFaceDetectRequest, global::FaceRecognition.OnFaceSetFaceDetectResponse>(serviceImpl.OnFaceSetFaceDetect));
    }

  }
}
#endregion
