/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_api_annotations_pb = require('./google/api/annotations_pb.js');
goog.object.extend(proto, google_api_annotations_pb);
goog.exportSymbol('proto.faceRecognition.AddFaceRequest', null, global);
goog.exportSymbol('proto.faceRecognition.AddFaceResponse', null, global);
goog.exportSymbol('proto.faceRecognition.DeleteFaceSetRequest', null, global);
goog.exportSymbol('proto.faceRecognition.DeleteFaceSetResponse', null, global);
goog.exportSymbol('proto.faceRecognition.FaceDetail', null, global);
goog.exportSymbol('proto.faceRecognition.FaceDetailRequest', null, global);
goog.exportSymbol('proto.faceRecognition.FaceDetailResponse', null, global);
goog.exportSymbol('proto.faceRecognition.FaceSet', null, global);
goog.exportSymbol('proto.faceRecognition.ListFaceDetailsRequest', null, global);
goog.exportSymbol('proto.faceRecognition.ListFaceDetailsResponse', null, global);
goog.exportSymbol('proto.faceRecognition.ListFaceSetsRequest', null, global);
goog.exportSymbol('proto.faceRecognition.ListFaceSetsResponse', null, global);
goog.exportSymbol('proto.faceRecognition.NewFaceSetRequest', null, global);
goog.exportSymbol('proto.faceRecognition.NewFaceSetResponse', null, global);
goog.exportSymbol('proto.faceRecognition.RemoveFaceRequest', null, global);
goog.exportSymbol('proto.faceRecognition.RemoveFaceResponse', null, global);
goog.exportSymbol('proto.faceRecognition.UpdateFaceSetRequest', null, global);
goog.exportSymbol('proto.faceRecognition.UpdateFaceSetResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.faceRecognition.FaceSet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.faceRecognition.FaceSet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.faceRecognition.FaceSet.displayName = 'proto.faceRecognition.FaceSet';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.faceRecognition.FaceDetail = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.faceRecognition.FaceDetail, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.faceRecognition.FaceDetail.displayName = 'proto.faceRecognition.FaceDetail';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.faceRecognition.NewFaceSetRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.faceRecognition.NewFaceSetRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.faceRecognition.NewFaceSetRequest.displayName = 'proto.faceRecognition.NewFaceSetRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.faceRecognition.NewFaceSetResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.faceRecognition.NewFaceSetResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.faceRecognition.NewFaceSetResponse.displayName = 'proto.faceRecognition.NewFaceSetResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.faceRecognition.DeleteFaceSetRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.faceRecognition.DeleteFaceSetRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.faceRecognition.DeleteFaceSetRequest.displayName = 'proto.faceRecognition.DeleteFaceSetRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.faceRecognition.DeleteFaceSetResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.faceRecognition.DeleteFaceSetResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.faceRecognition.DeleteFaceSetResponse.displayName = 'proto.faceRecognition.DeleteFaceSetResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.faceRecognition.UpdateFaceSetRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.faceRecognition.UpdateFaceSetRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.faceRecognition.UpdateFaceSetRequest.displayName = 'proto.faceRecognition.UpdateFaceSetRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.faceRecognition.UpdateFaceSetResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.faceRecognition.UpdateFaceSetResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.faceRecognition.UpdateFaceSetResponse.displayName = 'proto.faceRecognition.UpdateFaceSetResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.faceRecognition.ListFaceSetsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.faceRecognition.ListFaceSetsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.faceRecognition.ListFaceSetsRequest.displayName = 'proto.faceRecognition.ListFaceSetsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.faceRecognition.ListFaceSetsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.faceRecognition.ListFaceSetsResponse.repeatedFields_, null);
};
goog.inherits(proto.faceRecognition.ListFaceSetsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.faceRecognition.ListFaceSetsResponse.displayName = 'proto.faceRecognition.ListFaceSetsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.faceRecognition.AddFaceRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.faceRecognition.AddFaceRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.faceRecognition.AddFaceRequest.displayName = 'proto.faceRecognition.AddFaceRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.faceRecognition.AddFaceResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.faceRecognition.AddFaceResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.faceRecognition.AddFaceResponse.displayName = 'proto.faceRecognition.AddFaceResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.faceRecognition.RemoveFaceRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.faceRecognition.RemoveFaceRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.faceRecognition.RemoveFaceRequest.displayName = 'proto.faceRecognition.RemoveFaceRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.faceRecognition.RemoveFaceResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.faceRecognition.RemoveFaceResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.faceRecognition.RemoveFaceResponse.displayName = 'proto.faceRecognition.RemoveFaceResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.faceRecognition.FaceDetailRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.faceRecognition.FaceDetailRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.faceRecognition.FaceDetailRequest.displayName = 'proto.faceRecognition.FaceDetailRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.faceRecognition.FaceDetailResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.faceRecognition.FaceDetailResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.faceRecognition.FaceDetailResponse.displayName = 'proto.faceRecognition.FaceDetailResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.faceRecognition.ListFaceDetailsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.faceRecognition.ListFaceDetailsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.faceRecognition.ListFaceDetailsRequest.displayName = 'proto.faceRecognition.ListFaceDetailsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.faceRecognition.ListFaceDetailsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.faceRecognition.ListFaceDetailsResponse.repeatedFields_, null);
};
goog.inherits(proto.faceRecognition.ListFaceDetailsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.faceRecognition.ListFaceDetailsResponse.displayName = 'proto.faceRecognition.ListFaceDetailsResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.faceRecognition.FaceSet.prototype.toObject = function(opt_includeInstance) {
  return proto.faceRecognition.FaceSet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.faceRecognition.FaceSet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.faceRecognition.FaceSet.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.faceRecognition.FaceSet}
 */
proto.faceRecognition.FaceSet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.faceRecognition.FaceSet;
  return proto.faceRecognition.FaceSet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.faceRecognition.FaceSet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.faceRecognition.FaceSet}
 */
proto.faceRecognition.FaceSet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.faceRecognition.FaceSet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.faceRecognition.FaceSet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.faceRecognition.FaceSet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.faceRecognition.FaceSet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.faceRecognition.FaceSet.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.faceRecognition.FaceSet.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.faceRecognition.FaceSet.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.faceRecognition.FaceSet.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.faceRecognition.FaceDetail.prototype.toObject = function(opt_includeInstance) {
  return proto.faceRecognition.FaceDetail.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.faceRecognition.FaceDetail} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.faceRecognition.FaceDetail.toObject = function(includeInstance, msg) {
  var f, obj = {
    faceToken: jspb.Message.getFieldWithDefault(msg, 1, ""),
    faceImg: msg.getFaceImg_asB64(),
    detailMap: (f = msg.getDetailMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.faceRecognition.FaceDetail}
 */
proto.faceRecognition.FaceDetail.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.faceRecognition.FaceDetail;
  return proto.faceRecognition.FaceDetail.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.faceRecognition.FaceDetail} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.faceRecognition.FaceDetail}
 */
proto.faceRecognition.FaceDetail.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFaceToken(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setFaceImg(value);
      break;
    case 3:
      var value = msg.getDetailMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.faceRecognition.FaceDetail.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.faceRecognition.FaceDetail.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.faceRecognition.FaceDetail} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.faceRecognition.FaceDetail.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFaceToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFaceImg_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getDetailMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * optional string face_token = 1;
 * @return {string}
 */
proto.faceRecognition.FaceDetail.prototype.getFaceToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.faceRecognition.FaceDetail.prototype.setFaceToken = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes face_img = 2;
 * @return {!(string|Uint8Array)}
 */
proto.faceRecognition.FaceDetail.prototype.getFaceImg = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes face_img = 2;
 * This is a type-conversion wrapper around `getFaceImg()`
 * @return {string}
 */
proto.faceRecognition.FaceDetail.prototype.getFaceImg_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getFaceImg()));
};


/**
 * optional bytes face_img = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFaceImg()`
 * @return {!Uint8Array}
 */
proto.faceRecognition.FaceDetail.prototype.getFaceImg_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getFaceImg()));
};


/** @param {!(string|Uint8Array)} value */
proto.faceRecognition.FaceDetail.prototype.setFaceImg = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * map<string, string> detail = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.faceRecognition.FaceDetail.prototype.getDetailMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 */
proto.faceRecognition.FaceDetail.prototype.clearDetailMap = function() {
  this.getDetailMap().clear();
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.faceRecognition.NewFaceSetRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.faceRecognition.NewFaceSetRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.faceRecognition.NewFaceSetRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.faceRecognition.NewFaceSetRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.faceRecognition.NewFaceSetRequest}
 */
proto.faceRecognition.NewFaceSetRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.faceRecognition.NewFaceSetRequest;
  return proto.faceRecognition.NewFaceSetRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.faceRecognition.NewFaceSetRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.faceRecognition.NewFaceSetRequest}
 */
proto.faceRecognition.NewFaceSetRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.faceRecognition.NewFaceSetRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.faceRecognition.NewFaceSetRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.faceRecognition.NewFaceSetRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.faceRecognition.NewFaceSetRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.faceRecognition.NewFaceSetRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.faceRecognition.NewFaceSetRequest.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.faceRecognition.NewFaceSetResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.faceRecognition.NewFaceSetResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.faceRecognition.NewFaceSetResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.faceRecognition.NewFaceSetResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    faceSet: (f = msg.getFaceSet()) && proto.faceRecognition.FaceSet.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.faceRecognition.NewFaceSetResponse}
 */
proto.faceRecognition.NewFaceSetResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.faceRecognition.NewFaceSetResponse;
  return proto.faceRecognition.NewFaceSetResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.faceRecognition.NewFaceSetResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.faceRecognition.NewFaceSetResponse}
 */
proto.faceRecognition.NewFaceSetResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.faceRecognition.FaceSet;
      reader.readMessage(value,proto.faceRecognition.FaceSet.deserializeBinaryFromReader);
      msg.setFaceSet(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.faceRecognition.NewFaceSetResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.faceRecognition.NewFaceSetResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.faceRecognition.NewFaceSetResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.faceRecognition.NewFaceSetResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFaceSet();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.faceRecognition.FaceSet.serializeBinaryToWriter
    );
  }
};


/**
 * optional FaceSet face_set = 1;
 * @return {?proto.faceRecognition.FaceSet}
 */
proto.faceRecognition.NewFaceSetResponse.prototype.getFaceSet = function() {
  return /** @type{?proto.faceRecognition.FaceSet} */ (
    jspb.Message.getWrapperField(this, proto.faceRecognition.FaceSet, 1));
};


/** @param {?proto.faceRecognition.FaceSet|undefined} value */
proto.faceRecognition.NewFaceSetResponse.prototype.setFaceSet = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.faceRecognition.NewFaceSetResponse.prototype.clearFaceSet = function() {
  this.setFaceSet(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.faceRecognition.NewFaceSetResponse.prototype.hasFaceSet = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.faceRecognition.DeleteFaceSetRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.faceRecognition.DeleteFaceSetRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.faceRecognition.DeleteFaceSetRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.faceRecognition.DeleteFaceSetRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    faceSetId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.faceRecognition.DeleteFaceSetRequest}
 */
proto.faceRecognition.DeleteFaceSetRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.faceRecognition.DeleteFaceSetRequest;
  return proto.faceRecognition.DeleteFaceSetRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.faceRecognition.DeleteFaceSetRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.faceRecognition.DeleteFaceSetRequest}
 */
proto.faceRecognition.DeleteFaceSetRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFaceSetId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.faceRecognition.DeleteFaceSetRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.faceRecognition.DeleteFaceSetRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.faceRecognition.DeleteFaceSetRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.faceRecognition.DeleteFaceSetRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFaceSetId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string face_set_id = 1;
 * @return {string}
 */
proto.faceRecognition.DeleteFaceSetRequest.prototype.getFaceSetId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.faceRecognition.DeleteFaceSetRequest.prototype.setFaceSetId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.faceRecognition.DeleteFaceSetResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.faceRecognition.DeleteFaceSetResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.faceRecognition.DeleteFaceSetResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.faceRecognition.DeleteFaceSetResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.faceRecognition.DeleteFaceSetResponse}
 */
proto.faceRecognition.DeleteFaceSetResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.faceRecognition.DeleteFaceSetResponse;
  return proto.faceRecognition.DeleteFaceSetResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.faceRecognition.DeleteFaceSetResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.faceRecognition.DeleteFaceSetResponse}
 */
proto.faceRecognition.DeleteFaceSetResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.faceRecognition.DeleteFaceSetResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.faceRecognition.DeleteFaceSetResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.faceRecognition.DeleteFaceSetResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.faceRecognition.DeleteFaceSetResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.faceRecognition.UpdateFaceSetRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.faceRecognition.UpdateFaceSetRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.faceRecognition.UpdateFaceSetRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.faceRecognition.UpdateFaceSetRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    faceSet: (f = msg.getFaceSet()) && proto.faceRecognition.FaceSet.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.faceRecognition.UpdateFaceSetRequest}
 */
proto.faceRecognition.UpdateFaceSetRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.faceRecognition.UpdateFaceSetRequest;
  return proto.faceRecognition.UpdateFaceSetRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.faceRecognition.UpdateFaceSetRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.faceRecognition.UpdateFaceSetRequest}
 */
proto.faceRecognition.UpdateFaceSetRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.faceRecognition.FaceSet;
      reader.readMessage(value,proto.faceRecognition.FaceSet.deserializeBinaryFromReader);
      msg.setFaceSet(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.faceRecognition.UpdateFaceSetRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.faceRecognition.UpdateFaceSetRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.faceRecognition.UpdateFaceSetRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.faceRecognition.UpdateFaceSetRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFaceSet();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.faceRecognition.FaceSet.serializeBinaryToWriter
    );
  }
};


/**
 * optional FaceSet face_set = 1;
 * @return {?proto.faceRecognition.FaceSet}
 */
proto.faceRecognition.UpdateFaceSetRequest.prototype.getFaceSet = function() {
  return /** @type{?proto.faceRecognition.FaceSet} */ (
    jspb.Message.getWrapperField(this, proto.faceRecognition.FaceSet, 1));
};


/** @param {?proto.faceRecognition.FaceSet|undefined} value */
proto.faceRecognition.UpdateFaceSetRequest.prototype.setFaceSet = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.faceRecognition.UpdateFaceSetRequest.prototype.clearFaceSet = function() {
  this.setFaceSet(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.faceRecognition.UpdateFaceSetRequest.prototype.hasFaceSet = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.faceRecognition.UpdateFaceSetResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.faceRecognition.UpdateFaceSetResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.faceRecognition.UpdateFaceSetResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.faceRecognition.UpdateFaceSetResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    faceSet: (f = msg.getFaceSet()) && proto.faceRecognition.FaceSet.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.faceRecognition.UpdateFaceSetResponse}
 */
proto.faceRecognition.UpdateFaceSetResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.faceRecognition.UpdateFaceSetResponse;
  return proto.faceRecognition.UpdateFaceSetResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.faceRecognition.UpdateFaceSetResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.faceRecognition.UpdateFaceSetResponse}
 */
proto.faceRecognition.UpdateFaceSetResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.faceRecognition.FaceSet;
      reader.readMessage(value,proto.faceRecognition.FaceSet.deserializeBinaryFromReader);
      msg.setFaceSet(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.faceRecognition.UpdateFaceSetResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.faceRecognition.UpdateFaceSetResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.faceRecognition.UpdateFaceSetResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.faceRecognition.UpdateFaceSetResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFaceSet();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.faceRecognition.FaceSet.serializeBinaryToWriter
    );
  }
};


/**
 * optional FaceSet face_set = 1;
 * @return {?proto.faceRecognition.FaceSet}
 */
proto.faceRecognition.UpdateFaceSetResponse.prototype.getFaceSet = function() {
  return /** @type{?proto.faceRecognition.FaceSet} */ (
    jspb.Message.getWrapperField(this, proto.faceRecognition.FaceSet, 1));
};


/** @param {?proto.faceRecognition.FaceSet|undefined} value */
proto.faceRecognition.UpdateFaceSetResponse.prototype.setFaceSet = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.faceRecognition.UpdateFaceSetResponse.prototype.clearFaceSet = function() {
  this.setFaceSet(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.faceRecognition.UpdateFaceSetResponse.prototype.hasFaceSet = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.faceRecognition.ListFaceSetsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.faceRecognition.ListFaceSetsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.faceRecognition.ListFaceSetsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.faceRecognition.ListFaceSetsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.faceRecognition.ListFaceSetsRequest}
 */
proto.faceRecognition.ListFaceSetsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.faceRecognition.ListFaceSetsRequest;
  return proto.faceRecognition.ListFaceSetsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.faceRecognition.ListFaceSetsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.faceRecognition.ListFaceSetsRequest}
 */
proto.faceRecognition.ListFaceSetsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.faceRecognition.ListFaceSetsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.faceRecognition.ListFaceSetsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.faceRecognition.ListFaceSetsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.faceRecognition.ListFaceSetsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.faceRecognition.ListFaceSetsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.faceRecognition.ListFaceSetsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.faceRecognition.ListFaceSetsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.faceRecognition.ListFaceSetsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.faceRecognition.ListFaceSetsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    faceSetsList: jspb.Message.toObjectList(msg.getFaceSetsList(),
    proto.faceRecognition.FaceSet.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.faceRecognition.ListFaceSetsResponse}
 */
proto.faceRecognition.ListFaceSetsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.faceRecognition.ListFaceSetsResponse;
  return proto.faceRecognition.ListFaceSetsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.faceRecognition.ListFaceSetsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.faceRecognition.ListFaceSetsResponse}
 */
proto.faceRecognition.ListFaceSetsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.faceRecognition.FaceSet;
      reader.readMessage(value,proto.faceRecognition.FaceSet.deserializeBinaryFromReader);
      msg.addFaceSets(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.faceRecognition.ListFaceSetsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.faceRecognition.ListFaceSetsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.faceRecognition.ListFaceSetsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.faceRecognition.ListFaceSetsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFaceSetsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.faceRecognition.FaceSet.serializeBinaryToWriter
    );
  }
};


/**
 * repeated FaceSet face_sets = 1;
 * @return {!Array<!proto.faceRecognition.FaceSet>}
 */
proto.faceRecognition.ListFaceSetsResponse.prototype.getFaceSetsList = function() {
  return /** @type{!Array<!proto.faceRecognition.FaceSet>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.faceRecognition.FaceSet, 1));
};


/** @param {!Array<!proto.faceRecognition.FaceSet>} value */
proto.faceRecognition.ListFaceSetsResponse.prototype.setFaceSetsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.faceRecognition.FaceSet=} opt_value
 * @param {number=} opt_index
 * @return {!proto.faceRecognition.FaceSet}
 */
proto.faceRecognition.ListFaceSetsResponse.prototype.addFaceSets = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.faceRecognition.FaceSet, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.faceRecognition.ListFaceSetsResponse.prototype.clearFaceSetsList = function() {
  this.setFaceSetsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.faceRecognition.AddFaceRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.faceRecognition.AddFaceRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.faceRecognition.AddFaceRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.faceRecognition.AddFaceRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    faceSetId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    faceImg: msg.getFaceImg_asB64(),
    detailMap: (f = msg.getDetailMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.faceRecognition.AddFaceRequest}
 */
proto.faceRecognition.AddFaceRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.faceRecognition.AddFaceRequest;
  return proto.faceRecognition.AddFaceRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.faceRecognition.AddFaceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.faceRecognition.AddFaceRequest}
 */
proto.faceRecognition.AddFaceRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFaceSetId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setFaceImg(value);
      break;
    case 3:
      var value = msg.getDetailMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.faceRecognition.AddFaceRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.faceRecognition.AddFaceRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.faceRecognition.AddFaceRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.faceRecognition.AddFaceRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFaceSetId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFaceImg_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getDetailMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * optional string face_set_id = 1;
 * @return {string}
 */
proto.faceRecognition.AddFaceRequest.prototype.getFaceSetId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.faceRecognition.AddFaceRequest.prototype.setFaceSetId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes face_img = 2;
 * @return {!(string|Uint8Array)}
 */
proto.faceRecognition.AddFaceRequest.prototype.getFaceImg = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes face_img = 2;
 * This is a type-conversion wrapper around `getFaceImg()`
 * @return {string}
 */
proto.faceRecognition.AddFaceRequest.prototype.getFaceImg_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getFaceImg()));
};


/**
 * optional bytes face_img = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFaceImg()`
 * @return {!Uint8Array}
 */
proto.faceRecognition.AddFaceRequest.prototype.getFaceImg_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getFaceImg()));
};


/** @param {!(string|Uint8Array)} value */
proto.faceRecognition.AddFaceRequest.prototype.setFaceImg = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * map<string, string> detail = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.faceRecognition.AddFaceRequest.prototype.getDetailMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 */
proto.faceRecognition.AddFaceRequest.prototype.clearDetailMap = function() {
  this.getDetailMap().clear();
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.faceRecognition.AddFaceResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.faceRecognition.AddFaceResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.faceRecognition.AddFaceResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.faceRecognition.AddFaceResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    faceToken: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.faceRecognition.AddFaceResponse}
 */
proto.faceRecognition.AddFaceResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.faceRecognition.AddFaceResponse;
  return proto.faceRecognition.AddFaceResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.faceRecognition.AddFaceResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.faceRecognition.AddFaceResponse}
 */
proto.faceRecognition.AddFaceResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFaceToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.faceRecognition.AddFaceResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.faceRecognition.AddFaceResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.faceRecognition.AddFaceResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.faceRecognition.AddFaceResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFaceToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string face_token = 1;
 * @return {string}
 */
proto.faceRecognition.AddFaceResponse.prototype.getFaceToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.faceRecognition.AddFaceResponse.prototype.setFaceToken = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.faceRecognition.RemoveFaceRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.faceRecognition.RemoveFaceRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.faceRecognition.RemoveFaceRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.faceRecognition.RemoveFaceRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    faceSetId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    faceToken: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.faceRecognition.RemoveFaceRequest}
 */
proto.faceRecognition.RemoveFaceRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.faceRecognition.RemoveFaceRequest;
  return proto.faceRecognition.RemoveFaceRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.faceRecognition.RemoveFaceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.faceRecognition.RemoveFaceRequest}
 */
proto.faceRecognition.RemoveFaceRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFaceSetId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFaceToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.faceRecognition.RemoveFaceRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.faceRecognition.RemoveFaceRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.faceRecognition.RemoveFaceRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.faceRecognition.RemoveFaceRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFaceSetId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFaceToken();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string face_set_id = 1;
 * @return {string}
 */
proto.faceRecognition.RemoveFaceRequest.prototype.getFaceSetId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.faceRecognition.RemoveFaceRequest.prototype.setFaceSetId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string face_token = 2;
 * @return {string}
 */
proto.faceRecognition.RemoveFaceRequest.prototype.getFaceToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.faceRecognition.RemoveFaceRequest.prototype.setFaceToken = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.faceRecognition.RemoveFaceResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.faceRecognition.RemoveFaceResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.faceRecognition.RemoveFaceResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.faceRecognition.RemoveFaceResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.faceRecognition.RemoveFaceResponse}
 */
proto.faceRecognition.RemoveFaceResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.faceRecognition.RemoveFaceResponse;
  return proto.faceRecognition.RemoveFaceResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.faceRecognition.RemoveFaceResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.faceRecognition.RemoveFaceResponse}
 */
proto.faceRecognition.RemoveFaceResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.faceRecognition.RemoveFaceResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.faceRecognition.RemoveFaceResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.faceRecognition.RemoveFaceResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.faceRecognition.RemoveFaceResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.faceRecognition.FaceDetailRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.faceRecognition.FaceDetailRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.faceRecognition.FaceDetailRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.faceRecognition.FaceDetailRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    faceSetId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    faceToken: jspb.Message.getFieldWithDefault(msg, 2, ""),
    withFaceImg: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.faceRecognition.FaceDetailRequest}
 */
proto.faceRecognition.FaceDetailRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.faceRecognition.FaceDetailRequest;
  return proto.faceRecognition.FaceDetailRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.faceRecognition.FaceDetailRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.faceRecognition.FaceDetailRequest}
 */
proto.faceRecognition.FaceDetailRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFaceSetId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFaceToken(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setWithFaceImg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.faceRecognition.FaceDetailRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.faceRecognition.FaceDetailRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.faceRecognition.FaceDetailRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.faceRecognition.FaceDetailRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFaceSetId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFaceToken();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getWithFaceImg();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional string face_set_id = 1;
 * @return {string}
 */
proto.faceRecognition.FaceDetailRequest.prototype.getFaceSetId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.faceRecognition.FaceDetailRequest.prototype.setFaceSetId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string face_token = 2;
 * @return {string}
 */
proto.faceRecognition.FaceDetailRequest.prototype.getFaceToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.faceRecognition.FaceDetailRequest.prototype.setFaceToken = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool with_face_img = 3;
 * @return {boolean}
 */
proto.faceRecognition.FaceDetailRequest.prototype.getWithFaceImg = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.faceRecognition.FaceDetailRequest.prototype.setWithFaceImg = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.faceRecognition.FaceDetailResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.faceRecognition.FaceDetailResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.faceRecognition.FaceDetailResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.faceRecognition.FaceDetailResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    faceDetail: (f = msg.getFaceDetail()) && proto.faceRecognition.FaceDetail.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.faceRecognition.FaceDetailResponse}
 */
proto.faceRecognition.FaceDetailResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.faceRecognition.FaceDetailResponse;
  return proto.faceRecognition.FaceDetailResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.faceRecognition.FaceDetailResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.faceRecognition.FaceDetailResponse}
 */
proto.faceRecognition.FaceDetailResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.faceRecognition.FaceDetail;
      reader.readMessage(value,proto.faceRecognition.FaceDetail.deserializeBinaryFromReader);
      msg.setFaceDetail(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.faceRecognition.FaceDetailResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.faceRecognition.FaceDetailResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.faceRecognition.FaceDetailResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.faceRecognition.FaceDetailResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFaceDetail();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.faceRecognition.FaceDetail.serializeBinaryToWriter
    );
  }
};


/**
 * optional FaceDetail face_detail = 1;
 * @return {?proto.faceRecognition.FaceDetail}
 */
proto.faceRecognition.FaceDetailResponse.prototype.getFaceDetail = function() {
  return /** @type{?proto.faceRecognition.FaceDetail} */ (
    jspb.Message.getWrapperField(this, proto.faceRecognition.FaceDetail, 1));
};


/** @param {?proto.faceRecognition.FaceDetail|undefined} value */
proto.faceRecognition.FaceDetailResponse.prototype.setFaceDetail = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.faceRecognition.FaceDetailResponse.prototype.clearFaceDetail = function() {
  this.setFaceDetail(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.faceRecognition.FaceDetailResponse.prototype.hasFaceDetail = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.faceRecognition.ListFaceDetailsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.faceRecognition.ListFaceDetailsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.faceRecognition.ListFaceDetailsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.faceRecognition.ListFaceDetailsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    faceSetId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    limit: jspb.Message.getFieldWithDefault(msg, 2, 0),
    offset: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.faceRecognition.ListFaceDetailsRequest}
 */
proto.faceRecognition.ListFaceDetailsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.faceRecognition.ListFaceDetailsRequest;
  return proto.faceRecognition.ListFaceDetailsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.faceRecognition.ListFaceDetailsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.faceRecognition.ListFaceDetailsRequest}
 */
proto.faceRecognition.ListFaceDetailsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFaceSetId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLimit(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOffset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.faceRecognition.ListFaceDetailsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.faceRecognition.ListFaceDetailsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.faceRecognition.ListFaceDetailsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.faceRecognition.ListFaceDetailsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFaceSetId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLimit();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getOffset();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional string face_set_id = 1;
 * @return {string}
 */
proto.faceRecognition.ListFaceDetailsRequest.prototype.getFaceSetId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.faceRecognition.ListFaceDetailsRequest.prototype.setFaceSetId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 limit = 2;
 * @return {number}
 */
proto.faceRecognition.ListFaceDetailsRequest.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.faceRecognition.ListFaceDetailsRequest.prototype.setLimit = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 offset = 3;
 * @return {number}
 */
proto.faceRecognition.ListFaceDetailsRequest.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.faceRecognition.ListFaceDetailsRequest.prototype.setOffset = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.faceRecognition.ListFaceDetailsResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.faceRecognition.ListFaceDetailsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.faceRecognition.ListFaceDetailsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.faceRecognition.ListFaceDetailsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.faceRecognition.ListFaceDetailsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    faceSet: (f = msg.getFaceSet()) && proto.faceRecognition.FaceSet.toObject(includeInstance, f),
    faceDetailsList: jspb.Message.toObjectList(msg.getFaceDetailsList(),
    proto.faceRecognition.FaceDetail.toObject, includeInstance),
    total: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.faceRecognition.ListFaceDetailsResponse}
 */
proto.faceRecognition.ListFaceDetailsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.faceRecognition.ListFaceDetailsResponse;
  return proto.faceRecognition.ListFaceDetailsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.faceRecognition.ListFaceDetailsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.faceRecognition.ListFaceDetailsResponse}
 */
proto.faceRecognition.ListFaceDetailsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.faceRecognition.FaceSet;
      reader.readMessage(value,proto.faceRecognition.FaceSet.deserializeBinaryFromReader);
      msg.setFaceSet(value);
      break;
    case 2:
      var value = new proto.faceRecognition.FaceDetail;
      reader.readMessage(value,proto.faceRecognition.FaceDetail.deserializeBinaryFromReader);
      msg.addFaceDetails(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTotal(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.faceRecognition.ListFaceDetailsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.faceRecognition.ListFaceDetailsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.faceRecognition.ListFaceDetailsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.faceRecognition.ListFaceDetailsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFaceSet();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.faceRecognition.FaceSet.serializeBinaryToWriter
    );
  }
  f = message.getFaceDetailsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.faceRecognition.FaceDetail.serializeBinaryToWriter
    );
  }
  f = message.getTotal();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional FaceSet face_set = 1;
 * @return {?proto.faceRecognition.FaceSet}
 */
proto.faceRecognition.ListFaceDetailsResponse.prototype.getFaceSet = function() {
  return /** @type{?proto.faceRecognition.FaceSet} */ (
    jspb.Message.getWrapperField(this, proto.faceRecognition.FaceSet, 1));
};


/** @param {?proto.faceRecognition.FaceSet|undefined} value */
proto.faceRecognition.ListFaceDetailsResponse.prototype.setFaceSet = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.faceRecognition.ListFaceDetailsResponse.prototype.clearFaceSet = function() {
  this.setFaceSet(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.faceRecognition.ListFaceDetailsResponse.prototype.hasFaceSet = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated FaceDetail face_details = 2;
 * @return {!Array<!proto.faceRecognition.FaceDetail>}
 */
proto.faceRecognition.ListFaceDetailsResponse.prototype.getFaceDetailsList = function() {
  return /** @type{!Array<!proto.faceRecognition.FaceDetail>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.faceRecognition.FaceDetail, 2));
};


/** @param {!Array<!proto.faceRecognition.FaceDetail>} value */
proto.faceRecognition.ListFaceDetailsResponse.prototype.setFaceDetailsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.faceRecognition.FaceDetail=} opt_value
 * @param {number=} opt_index
 * @return {!proto.faceRecognition.FaceDetail}
 */
proto.faceRecognition.ListFaceDetailsResponse.prototype.addFaceDetails = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.faceRecognition.FaceDetail, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.faceRecognition.ListFaceDetailsResponse.prototype.clearFaceDetailsList = function() {
  this.setFaceDetailsList([]);
};


/**
 * optional uint32 total = 3;
 * @return {number}
 */
proto.faceRecognition.ListFaceDetailsResponse.prototype.getTotal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.faceRecognition.ListFaceDetailsResponse.prototype.setTotal = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


goog.object.extend(exports, proto.faceRecognition);
