syntax = "proto3";

package faceRecognition;
option java_outer_classname = "FaceDetectPb";

import "google/api/annotations.proto";

service FaceDetect {
    // FromImage实现对输入图片进行人脸检测，返回检测人脸图片列表
    rpc FromImage (FromImageRequest) returns (FromImageResponse) {
        option (google.api.http) = {
            post: "/api/v2/face/detect/from_image"
            body: "*"
        };
    }

    // OnFaceDetect实现动态检测人脸，流式返回检测人脸图片戳列表
    rpc OnFaceDetect (OnFaceDetectRequest) returns (stream OnFaceDetectResponse) {
        option (google.api.http) = {
            // e.g. ws://10.10.10.2:81/api/v2/face/detect/on_face_detect?interval_millisecond=800&with_age=true
            get: "/api/v2/face/detect/on_face_detect"
        };
    }

    // OnFaceSetFaceDetect实现动态检测人脸并与指定FaceSet进行对比，流式返回检测结果
    rpc OnFaceSetFaceDetect (OnFaceSetFaceDetectRequest) returns (stream OnFaceSetFaceDetectResponse) {
        option (google.api.http) = {
            // e.g. ws://10.10.10.2:81/api/v2/face/detect/on_face_set_face_detect?face_set_id=5d673097e9279288b8cfe5df&with_gender=true
            get: "/api/v2/face/detect/on_face_set_face_detect"
        };
    }
}

enum Gender {
    GENDER_UNKNOWN = 0;
    GENDER_MALE = 1;
    GENDER_FEMALE = 2;
}

/*
 人脸中心位置坐标
 坐标由左上角至右下角
 (0,0)   --- (100,0) x
 |
 |
 (0,100) --- (100,100)
 y
*/
message FacePosition {
    uint32 x = 1;
    uint32 y = 2;
}

message FromImageRequest {
    // 检测图片内容
    bytes image = 1;
    // 检测性别
    bool with_gender = 2;
    // 检测年龄
    bool with_age = 3;
    // 检测人脸位置
    bool with_position = 4;
    // 返回人脸图片戳宽度
    bool with_face_crop_width = 5;
}

message FromImageResponse {
    // 检测人脸图片戳列表
    repeated bytes face_crops = 1;
    // 检测人脸性别列表
    repeated Gender genders = 2;
    // 检测人脸年龄列表
    repeated int32 ages = 3;
    // 检测人脸坐标列表
    repeated FacePosition positions = 4;
    // 人脸图片戳宽度列表
    repeated uint32 face_crop_widths = 5;
}

message OnFaceDetectRequest {
    // 检测间隔时间(毫秒)
    uint32 interval_millisecond = 1;
    // 检测性别
    bool with_gender = 2;
    // 检测年龄
    bool with_age = 3;
    // 检测人脸位置
    bool with_position = 4;
    // 返回人脸图片戳宽度
    bool with_face_crop_width = 5;
}

message OnFaceDetectResponse {
    // 检测人脸图片戳列表
    repeated bytes face_crops = 1;
    // 检测人脸性别列表
    repeated Gender genders = 2;
    // 检测人脸年龄列表
    repeated int32 ages = 3;
    // 检测人脸坐标列表
    repeated FacePosition positions = 4;
    // 人脸图片戳宽度列表
    repeated uint32 face_crop_widths = 5;
}

message OnFaceSetFaceDetectRequest {
    // FaceSet.id
    string face_set_id = 1;
    // 返回结果是否包含人脸图片戳
    // false时Response中face数据将为空
    bool with_face_crop = 2;
    // 检测性别
    bool with_gender = 3;
    // 检测年龄
    bool with_age = 4;
    // 检测人脸位置
    bool with_position = 5;
    // 检测间隔时间(毫秒)
    uint32 interval_millisecond = 6;
    // 最低信任值，小于该值的数据将无效并过滤 [0, 1]
    float confidence_min = 7;
    // 返回人脸图片戳宽度
    bool with_face_crop_width = 8;
}

message OnFaceSetFaceDetectResponse {
    // 匹配结果信任值列表 [0, 1.0]
    repeated float confidences = 1;
    // 检测人脸token列表
    repeated string face_tokens = 2;
    // 检测人脸图片戳列表
    repeated bytes face_crops = 3;
    // 检测人脸性别列表
    repeated Gender genders = 4;
    // 检测人脸年龄列表
    repeated int32 ages = 5;
    // 检测人脸坐标列表
    repeated FacePosition positions = 6;
    // 人脸图片戳宽度列表
    repeated uint32 face_crop_widths = 7;
}
