/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_api_annotations_pb = require('./google/api/annotations_pb.js');
goog.object.extend(proto, google_api_annotations_pb);
goog.exportSymbol('proto.handsmotion.AbsoluteMoveRequest', null, global);
goog.exportSymbol('proto.handsmotion.AbsoluteMoveResponse', null, global);
goog.exportSymbol('proto.handsmotion.ArmAdjustmentRequest', null, global);
goog.exportSymbol('proto.handsmotion.ArmAdjustmentResponse', null, global);
goog.exportSymbol('proto.handsmotion.FingersAdjustmentRequest', null, global);
goog.exportSymbol('proto.handsmotion.FingersAdjustmentRequest.FingerMove', null, global);
goog.exportSymbol('proto.handsmotion.FingersAdjustmentRequest.FingerMove.FingerMovementTypes', null, global);
goog.exportSymbol('proto.handsmotion.FingersAdjustmentResponse', null, global);
goog.exportSymbol('proto.handsmotion.GetAbsolutePositionRequest', null, global);
goog.exportSymbol('proto.handsmotion.GetAbsolutePositionResponse', null, global);
goog.exportSymbol('proto.handsmotion.MarkAsOriginalPositionRequest', null, global);
goog.exportSymbol('proto.handsmotion.MarkAsOriginalPositionResponse', null, global);
goog.exportSymbol('proto.handsmotion.MovementScript', null, global);
goog.exportSymbol('proto.handsmotion.Position', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.handsmotion.FingersAdjustmentRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.handsmotion.FingersAdjustmentRequest.oneofGroups_);
};
goog.inherits(proto.handsmotion.FingersAdjustmentRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.handsmotion.FingersAdjustmentRequest.displayName = 'proto.handsmotion.FingersAdjustmentRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.handsmotion.FingersAdjustmentRequest.FingerMove = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.handsmotion.FingersAdjustmentRequest.FingerMove, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.handsmotion.FingersAdjustmentRequest.FingerMove.displayName = 'proto.handsmotion.FingersAdjustmentRequest.FingerMove';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.handsmotion.FingersAdjustmentResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.handsmotion.FingersAdjustmentResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.handsmotion.FingersAdjustmentResponse.displayName = 'proto.handsmotion.FingersAdjustmentResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.handsmotion.ArmAdjustmentRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.handsmotion.ArmAdjustmentRequest.oneofGroups_);
};
goog.inherits(proto.handsmotion.ArmAdjustmentRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.handsmotion.ArmAdjustmentRequest.displayName = 'proto.handsmotion.ArmAdjustmentRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.handsmotion.ArmAdjustmentResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.handsmotion.ArmAdjustmentResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.handsmotion.ArmAdjustmentResponse.displayName = 'proto.handsmotion.ArmAdjustmentResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.handsmotion.Position = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.handsmotion.Position, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.handsmotion.Position.displayName = 'proto.handsmotion.Position';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.handsmotion.MarkAsOriginalPositionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.handsmotion.MarkAsOriginalPositionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.handsmotion.MarkAsOriginalPositionRequest.displayName = 'proto.handsmotion.MarkAsOriginalPositionRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.handsmotion.MarkAsOriginalPositionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.handsmotion.MarkAsOriginalPositionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.handsmotion.MarkAsOriginalPositionResponse.displayName = 'proto.handsmotion.MarkAsOriginalPositionResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.handsmotion.MovementScript = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.handsmotion.MovementScript, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.handsmotion.MovementScript.displayName = 'proto.handsmotion.MovementScript';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.handsmotion.GetAbsolutePositionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.handsmotion.GetAbsolutePositionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.handsmotion.GetAbsolutePositionRequest.displayName = 'proto.handsmotion.GetAbsolutePositionRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.handsmotion.GetAbsolutePositionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.handsmotion.GetAbsolutePositionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.handsmotion.GetAbsolutePositionResponse.displayName = 'proto.handsmotion.GetAbsolutePositionResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.handsmotion.AbsoluteMoveRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.handsmotion.AbsoluteMoveRequest.repeatedFields_, null);
};
goog.inherits(proto.handsmotion.AbsoluteMoveRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.handsmotion.AbsoluteMoveRequest.displayName = 'proto.handsmotion.AbsoluteMoveRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.handsmotion.AbsoluteMoveResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.handsmotion.AbsoluteMoveResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.handsmotion.AbsoluteMoveResponse.displayName = 'proto.handsmotion.AbsoluteMoveResponse';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.handsmotion.FingersAdjustmentRequest.oneofGroups_ = [[2,3]];

/**
 * @enum {number}
 */
proto.handsmotion.FingersAdjustmentRequest.ReqCase = {
  REQ_NOT_SET: 0,
  RESET: 2,
  MOVE: 3
};

/**
 * @return {proto.handsmotion.FingersAdjustmentRequest.ReqCase}
 */
proto.handsmotion.FingersAdjustmentRequest.prototype.getReqCase = function() {
  return /** @type {proto.handsmotion.FingersAdjustmentRequest.ReqCase} */(jspb.Message.computeOneofCase(this, proto.handsmotion.FingersAdjustmentRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.handsmotion.FingersAdjustmentRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.handsmotion.FingersAdjustmentRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.handsmotion.FingersAdjustmentRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.handsmotion.FingersAdjustmentRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    handIdx: jspb.Message.getFieldWithDefault(msg, 1, 0),
    reset: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    move: (f = msg.getMove()) && proto.handsmotion.FingersAdjustmentRequest.FingerMove.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.handsmotion.FingersAdjustmentRequest}
 */
proto.handsmotion.FingersAdjustmentRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.handsmotion.FingersAdjustmentRequest;
  return proto.handsmotion.FingersAdjustmentRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.handsmotion.FingersAdjustmentRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.handsmotion.FingersAdjustmentRequest}
 */
proto.handsmotion.FingersAdjustmentRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHandIdx(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setReset(value);
      break;
    case 3:
      var value = new proto.handsmotion.FingersAdjustmentRequest.FingerMove;
      reader.readMessage(value,proto.handsmotion.FingersAdjustmentRequest.FingerMove.deserializeBinaryFromReader);
      msg.setMove(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.handsmotion.FingersAdjustmentRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.handsmotion.FingersAdjustmentRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.handsmotion.FingersAdjustmentRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.handsmotion.FingersAdjustmentRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHandIdx();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getMove();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.handsmotion.FingersAdjustmentRequest.FingerMove.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.handsmotion.FingersAdjustmentRequest.FingerMove.prototype.toObject = function(opt_includeInstance) {
  return proto.handsmotion.FingersAdjustmentRequest.FingerMove.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.handsmotion.FingersAdjustmentRequest.FingerMove} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.handsmotion.FingersAdjustmentRequest.FingerMove.toObject = function(includeInstance, msg) {
  var f, obj = {
    fingerIdx: jspb.Message.getFieldWithDefault(msg, 2, 0),
    type: jspb.Message.getFieldWithDefault(msg, 3, 0),
    stroke: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.handsmotion.FingersAdjustmentRequest.FingerMove}
 */
proto.handsmotion.FingersAdjustmentRequest.FingerMove.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.handsmotion.FingersAdjustmentRequest.FingerMove;
  return proto.handsmotion.FingersAdjustmentRequest.FingerMove.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.handsmotion.FingersAdjustmentRequest.FingerMove} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.handsmotion.FingersAdjustmentRequest.FingerMove}
 */
proto.handsmotion.FingersAdjustmentRequest.FingerMove.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFingerIdx(value);
      break;
    case 3:
      var value = /** @type {!proto.handsmotion.FingersAdjustmentRequest.FingerMove.FingerMovementTypes} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStroke(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.handsmotion.FingersAdjustmentRequest.FingerMove.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.handsmotion.FingersAdjustmentRequest.FingerMove.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.handsmotion.FingersAdjustmentRequest.FingerMove} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.handsmotion.FingersAdjustmentRequest.FingerMove.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFingerIdx();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getStroke();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.handsmotion.FingersAdjustmentRequest.FingerMove.FingerMovementTypes = {
  LOOSE: 0,
  TIGHT: 1
};

/**
 * optional uint32 finger_idx = 2;
 * @return {number}
 */
proto.handsmotion.FingersAdjustmentRequest.FingerMove.prototype.getFingerIdx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.handsmotion.FingersAdjustmentRequest.FingerMove.prototype.setFingerIdx = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional FingerMovementTypes type = 3;
 * @return {!proto.handsmotion.FingersAdjustmentRequest.FingerMove.FingerMovementTypes}
 */
proto.handsmotion.FingersAdjustmentRequest.FingerMove.prototype.getType = function() {
  return /** @type {!proto.handsmotion.FingersAdjustmentRequest.FingerMove.FingerMovementTypes} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.handsmotion.FingersAdjustmentRequest.FingerMove.FingerMovementTypes} value */
proto.handsmotion.FingersAdjustmentRequest.FingerMove.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional int32 stroke = 4;
 * @return {number}
 */
proto.handsmotion.FingersAdjustmentRequest.FingerMove.prototype.getStroke = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.handsmotion.FingersAdjustmentRequest.FingerMove.prototype.setStroke = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 hand_idx = 1;
 * @return {number}
 */
proto.handsmotion.FingersAdjustmentRequest.prototype.getHandIdx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.handsmotion.FingersAdjustmentRequest.prototype.setHandIdx = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bool reset = 2;
 * @return {boolean}
 */
proto.handsmotion.FingersAdjustmentRequest.prototype.getReset = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.handsmotion.FingersAdjustmentRequest.prototype.setReset = function(value) {
  jspb.Message.setOneofField(this, 2, proto.handsmotion.FingersAdjustmentRequest.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 */
proto.handsmotion.FingersAdjustmentRequest.prototype.clearReset = function() {
  jspb.Message.setOneofField(this, 2, proto.handsmotion.FingersAdjustmentRequest.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.handsmotion.FingersAdjustmentRequest.prototype.hasReset = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional FingerMove move = 3;
 * @return {?proto.handsmotion.FingersAdjustmentRequest.FingerMove}
 */
proto.handsmotion.FingersAdjustmentRequest.prototype.getMove = function() {
  return /** @type{?proto.handsmotion.FingersAdjustmentRequest.FingerMove} */ (
    jspb.Message.getWrapperField(this, proto.handsmotion.FingersAdjustmentRequest.FingerMove, 3));
};


/** @param {?proto.handsmotion.FingersAdjustmentRequest.FingerMove|undefined} value */
proto.handsmotion.FingersAdjustmentRequest.prototype.setMove = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.handsmotion.FingersAdjustmentRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.handsmotion.FingersAdjustmentRequest.prototype.clearMove = function() {
  this.setMove(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.handsmotion.FingersAdjustmentRequest.prototype.hasMove = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.handsmotion.FingersAdjustmentResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.handsmotion.FingersAdjustmentResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.handsmotion.FingersAdjustmentResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.handsmotion.FingersAdjustmentResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.handsmotion.FingersAdjustmentResponse}
 */
proto.handsmotion.FingersAdjustmentResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.handsmotion.FingersAdjustmentResponse;
  return proto.handsmotion.FingersAdjustmentResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.handsmotion.FingersAdjustmentResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.handsmotion.FingersAdjustmentResponse}
 */
proto.handsmotion.FingersAdjustmentResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.handsmotion.FingersAdjustmentResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.handsmotion.FingersAdjustmentResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.handsmotion.FingersAdjustmentResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.handsmotion.FingersAdjustmentResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.handsmotion.ArmAdjustmentRequest.oneofGroups_ = [[2,3]];

/**
 * @enum {number}
 */
proto.handsmotion.ArmAdjustmentRequest.ReqCase = {
  REQ_NOT_SET: 0,
  RESET: 2,
  DISABILITY: 3
};

/**
 * @return {proto.handsmotion.ArmAdjustmentRequest.ReqCase}
 */
proto.handsmotion.ArmAdjustmentRequest.prototype.getReqCase = function() {
  return /** @type {proto.handsmotion.ArmAdjustmentRequest.ReqCase} */(jspb.Message.computeOneofCase(this, proto.handsmotion.ArmAdjustmentRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.handsmotion.ArmAdjustmentRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.handsmotion.ArmAdjustmentRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.handsmotion.ArmAdjustmentRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.handsmotion.ArmAdjustmentRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    handIdx: jspb.Message.getFieldWithDefault(msg, 1, 0),
    reset: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    disability: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.handsmotion.ArmAdjustmentRequest}
 */
proto.handsmotion.ArmAdjustmentRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.handsmotion.ArmAdjustmentRequest;
  return proto.handsmotion.ArmAdjustmentRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.handsmotion.ArmAdjustmentRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.handsmotion.ArmAdjustmentRequest}
 */
proto.handsmotion.ArmAdjustmentRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHandIdx(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setReset(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDisability(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.handsmotion.ArmAdjustmentRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.handsmotion.ArmAdjustmentRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.handsmotion.ArmAdjustmentRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.handsmotion.ArmAdjustmentRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHandIdx();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional uint32 hand_idx = 1;
 * @return {number}
 */
proto.handsmotion.ArmAdjustmentRequest.prototype.getHandIdx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.handsmotion.ArmAdjustmentRequest.prototype.setHandIdx = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bool reset = 2;
 * @return {boolean}
 */
proto.handsmotion.ArmAdjustmentRequest.prototype.getReset = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.handsmotion.ArmAdjustmentRequest.prototype.setReset = function(value) {
  jspb.Message.setOneofField(this, 2, proto.handsmotion.ArmAdjustmentRequest.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 */
proto.handsmotion.ArmAdjustmentRequest.prototype.clearReset = function() {
  jspb.Message.setOneofField(this, 2, proto.handsmotion.ArmAdjustmentRequest.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.handsmotion.ArmAdjustmentRequest.prototype.hasReset = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool disability = 3;
 * @return {boolean}
 */
proto.handsmotion.ArmAdjustmentRequest.prototype.getDisability = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.handsmotion.ArmAdjustmentRequest.prototype.setDisability = function(value) {
  jspb.Message.setOneofField(this, 3, proto.handsmotion.ArmAdjustmentRequest.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 */
proto.handsmotion.ArmAdjustmentRequest.prototype.clearDisability = function() {
  jspb.Message.setOneofField(this, 3, proto.handsmotion.ArmAdjustmentRequest.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.handsmotion.ArmAdjustmentRequest.prototype.hasDisability = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.handsmotion.ArmAdjustmentResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.handsmotion.ArmAdjustmentResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.handsmotion.ArmAdjustmentResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.handsmotion.ArmAdjustmentResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.handsmotion.ArmAdjustmentResponse}
 */
proto.handsmotion.ArmAdjustmentResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.handsmotion.ArmAdjustmentResponse;
  return proto.handsmotion.ArmAdjustmentResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.handsmotion.ArmAdjustmentResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.handsmotion.ArmAdjustmentResponse}
 */
proto.handsmotion.ArmAdjustmentResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.handsmotion.ArmAdjustmentResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.handsmotion.ArmAdjustmentResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.handsmotion.ArmAdjustmentResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.handsmotion.ArmAdjustmentResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.handsmotion.Position.prototype.toObject = function(opt_includeInstance) {
  return proto.handsmotion.Position.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.handsmotion.Position} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.handsmotion.Position.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.handsmotion.Position}
 */
proto.handsmotion.Position.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.handsmotion.Position;
  return proto.handsmotion.Position.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.handsmotion.Position} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.handsmotion.Position}
 */
proto.handsmotion.Position.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.handsmotion.Position.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.handsmotion.Position.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.handsmotion.Position} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.handsmotion.Position.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes data = 1;
 * @return {!(string|Uint8Array)}
 */
proto.handsmotion.Position.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes data = 1;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.handsmotion.Position.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.handsmotion.Position.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/** @param {!(string|Uint8Array)} value */
proto.handsmotion.Position.prototype.setData = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.handsmotion.MarkAsOriginalPositionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.handsmotion.MarkAsOriginalPositionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.handsmotion.MarkAsOriginalPositionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.handsmotion.MarkAsOriginalPositionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.handsmotion.MarkAsOriginalPositionRequest}
 */
proto.handsmotion.MarkAsOriginalPositionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.handsmotion.MarkAsOriginalPositionRequest;
  return proto.handsmotion.MarkAsOriginalPositionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.handsmotion.MarkAsOriginalPositionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.handsmotion.MarkAsOriginalPositionRequest}
 */
proto.handsmotion.MarkAsOriginalPositionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.handsmotion.MarkAsOriginalPositionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.handsmotion.MarkAsOriginalPositionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.handsmotion.MarkAsOriginalPositionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.handsmotion.MarkAsOriginalPositionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.handsmotion.MarkAsOriginalPositionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.handsmotion.MarkAsOriginalPositionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.handsmotion.MarkAsOriginalPositionResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.handsmotion.MarkAsOriginalPositionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.handsmotion.MarkAsOriginalPositionResponse}
 */
proto.handsmotion.MarkAsOriginalPositionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.handsmotion.MarkAsOriginalPositionResponse;
  return proto.handsmotion.MarkAsOriginalPositionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.handsmotion.MarkAsOriginalPositionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.handsmotion.MarkAsOriginalPositionResponse}
 */
proto.handsmotion.MarkAsOriginalPositionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.handsmotion.MarkAsOriginalPositionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.handsmotion.MarkAsOriginalPositionResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.handsmotion.MarkAsOriginalPositionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.handsmotion.MarkAsOriginalPositionResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.handsmotion.MovementScript.prototype.toObject = function(opt_includeInstance) {
  return proto.handsmotion.MovementScript.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.handsmotion.MovementScript} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.handsmotion.MovementScript.toObject = function(includeInstance, msg) {
  var f, obj = {
    position: (f = msg.getPosition()) && proto.handsmotion.Position.toObject(includeInstance, f),
    runTime: jspb.Message.getFieldWithDefault(msg, 2, 0),
    keepTime: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.handsmotion.MovementScript}
 */
proto.handsmotion.MovementScript.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.handsmotion.MovementScript;
  return proto.handsmotion.MovementScript.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.handsmotion.MovementScript} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.handsmotion.MovementScript}
 */
proto.handsmotion.MovementScript.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.handsmotion.Position;
      reader.readMessage(value,proto.handsmotion.Position.deserializeBinaryFromReader);
      msg.setPosition(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRunTime(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setKeepTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.handsmotion.MovementScript.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.handsmotion.MovementScript.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.handsmotion.MovementScript} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.handsmotion.MovementScript.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPosition();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.handsmotion.Position.serializeBinaryToWriter
    );
  }
  f = message.getRunTime();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getKeepTime();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional Position position = 1;
 * @return {?proto.handsmotion.Position}
 */
proto.handsmotion.MovementScript.prototype.getPosition = function() {
  return /** @type{?proto.handsmotion.Position} */ (
    jspb.Message.getWrapperField(this, proto.handsmotion.Position, 1));
};


/** @param {?proto.handsmotion.Position|undefined} value */
proto.handsmotion.MovementScript.prototype.setPosition = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.handsmotion.MovementScript.prototype.clearPosition = function() {
  this.setPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.handsmotion.MovementScript.prototype.hasPosition = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 run_time = 2;
 * @return {number}
 */
proto.handsmotion.MovementScript.prototype.getRunTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.handsmotion.MovementScript.prototype.setRunTime = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 keep_time = 3;
 * @return {number}
 */
proto.handsmotion.MovementScript.prototype.getKeepTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.handsmotion.MovementScript.prototype.setKeepTime = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.handsmotion.GetAbsolutePositionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.handsmotion.GetAbsolutePositionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.handsmotion.GetAbsolutePositionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.handsmotion.GetAbsolutePositionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.handsmotion.GetAbsolutePositionRequest}
 */
proto.handsmotion.GetAbsolutePositionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.handsmotion.GetAbsolutePositionRequest;
  return proto.handsmotion.GetAbsolutePositionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.handsmotion.GetAbsolutePositionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.handsmotion.GetAbsolutePositionRequest}
 */
proto.handsmotion.GetAbsolutePositionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.handsmotion.GetAbsolutePositionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.handsmotion.GetAbsolutePositionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.handsmotion.GetAbsolutePositionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.handsmotion.GetAbsolutePositionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.handsmotion.GetAbsolutePositionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.handsmotion.GetAbsolutePositionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.handsmotion.GetAbsolutePositionResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.handsmotion.GetAbsolutePositionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    position: (f = msg.getPosition()) && proto.handsmotion.Position.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.handsmotion.GetAbsolutePositionResponse}
 */
proto.handsmotion.GetAbsolutePositionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.handsmotion.GetAbsolutePositionResponse;
  return proto.handsmotion.GetAbsolutePositionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.handsmotion.GetAbsolutePositionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.handsmotion.GetAbsolutePositionResponse}
 */
proto.handsmotion.GetAbsolutePositionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.handsmotion.Position;
      reader.readMessage(value,proto.handsmotion.Position.deserializeBinaryFromReader);
      msg.setPosition(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.handsmotion.GetAbsolutePositionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.handsmotion.GetAbsolutePositionResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.handsmotion.GetAbsolutePositionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.handsmotion.GetAbsolutePositionResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPosition();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.handsmotion.Position.serializeBinaryToWriter
    );
  }
};


/**
 * optional Position position = 1;
 * @return {?proto.handsmotion.Position}
 */
proto.handsmotion.GetAbsolutePositionResponse.prototype.getPosition = function() {
  return /** @type{?proto.handsmotion.Position} */ (
    jspb.Message.getWrapperField(this, proto.handsmotion.Position, 1));
};


/** @param {?proto.handsmotion.Position|undefined} value */
proto.handsmotion.GetAbsolutePositionResponse.prototype.setPosition = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.handsmotion.GetAbsolutePositionResponse.prototype.clearPosition = function() {
  this.setPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.handsmotion.GetAbsolutePositionResponse.prototype.hasPosition = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.handsmotion.AbsoluteMoveRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.handsmotion.AbsoluteMoveRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.handsmotion.AbsoluteMoveRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.handsmotion.AbsoluteMoveRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.handsmotion.AbsoluteMoveRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    scriptsList: jspb.Message.toObjectList(msg.getScriptsList(),
    proto.handsmotion.MovementScript.toObject, includeInstance),
    syncMode: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.handsmotion.AbsoluteMoveRequest}
 */
proto.handsmotion.AbsoluteMoveRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.handsmotion.AbsoluteMoveRequest;
  return proto.handsmotion.AbsoluteMoveRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.handsmotion.AbsoluteMoveRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.handsmotion.AbsoluteMoveRequest}
 */
proto.handsmotion.AbsoluteMoveRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.handsmotion.MovementScript;
      reader.readMessage(value,proto.handsmotion.MovementScript.deserializeBinaryFromReader);
      msg.addScripts(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSyncMode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.handsmotion.AbsoluteMoveRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.handsmotion.AbsoluteMoveRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.handsmotion.AbsoluteMoveRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.handsmotion.AbsoluteMoveRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getScriptsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.handsmotion.MovementScript.serializeBinaryToWriter
    );
  }
  f = message.getSyncMode();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * repeated MovementScript scripts = 1;
 * @return {!Array<!proto.handsmotion.MovementScript>}
 */
proto.handsmotion.AbsoluteMoveRequest.prototype.getScriptsList = function() {
  return /** @type{!Array<!proto.handsmotion.MovementScript>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.handsmotion.MovementScript, 1));
};


/** @param {!Array<!proto.handsmotion.MovementScript>} value */
proto.handsmotion.AbsoluteMoveRequest.prototype.setScriptsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.handsmotion.MovementScript=} opt_value
 * @param {number=} opt_index
 * @return {!proto.handsmotion.MovementScript}
 */
proto.handsmotion.AbsoluteMoveRequest.prototype.addScripts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.handsmotion.MovementScript, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.handsmotion.AbsoluteMoveRequest.prototype.clearScriptsList = function() {
  this.setScriptsList([]);
};


/**
 * optional bool sync_mode = 2;
 * @return {boolean}
 */
proto.handsmotion.AbsoluteMoveRequest.prototype.getSyncMode = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.handsmotion.AbsoluteMoveRequest.prototype.setSyncMode = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.handsmotion.AbsoluteMoveResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.handsmotion.AbsoluteMoveResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.handsmotion.AbsoluteMoveResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.handsmotion.AbsoluteMoveResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.handsmotion.AbsoluteMoveResponse}
 */
proto.handsmotion.AbsoluteMoveResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.handsmotion.AbsoluteMoveResponse;
  return proto.handsmotion.AbsoluteMoveResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.handsmotion.AbsoluteMoveResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.handsmotion.AbsoluteMoveResponse}
 */
proto.handsmotion.AbsoluteMoveResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.handsmotion.AbsoluteMoveResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.handsmotion.AbsoluteMoveResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.handsmotion.AbsoluteMoveResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.handsmotion.AbsoluteMoveResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


goog.object.extend(exports, proto.handsmotion);
