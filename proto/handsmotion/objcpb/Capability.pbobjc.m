// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: capability.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "Capability.pbobjc.h"
#import "google/api/Annotations.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"

#pragma mark - CapabilityRoot

@implementation CapabilityRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    registry = [[GPBExtensionRegistry alloc] init];
    // Merge in the imports (direct or indirect) that defined extensions.
    [registry addExtensions:[GAPIAnnotationsRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - CapabilityRoot_FileDescriptor

static GPBFileDescriptor *CapabilityRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"handsmotion"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - FingersAdjustmentRequest

@implementation FingersAdjustmentRequest

@dynamic reqOneOfCase;
@dynamic handIdx;
@dynamic reset;
@dynamic move;

typedef struct FingersAdjustmentRequest__storage_ {
  uint32_t _has_storage_[2];
  uint32_t handIdx;
  FingersAdjustmentRequest_FingerMove *move;
} FingersAdjustmentRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "handIdx",
        .dataTypeSpecific.className = NULL,
        .number = FingersAdjustmentRequest_FieldNumber_HandIdx,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FingersAdjustmentRequest__storage_, handIdx),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "reset",
        .dataTypeSpecific.className = NULL,
        .number = FingersAdjustmentRequest_FieldNumber_Reset,
        .hasIndex = -1,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "move",
        .dataTypeSpecific.className = GPBStringifySymbol(FingersAdjustmentRequest_FingerMove),
        .number = FingersAdjustmentRequest_FieldNumber_Move,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(FingersAdjustmentRequest__storage_, move),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FingersAdjustmentRequest class]
                                     rootClass:[CapabilityRoot class]
                                          file:CapabilityRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FingersAdjustmentRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    static const char *oneofs[] = {
      "req",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void FingersAdjustmentRequest_ClearReqOneOfCase(FingersAdjustmentRequest *message) {
  GPBDescriptor *descriptor = [message descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBMaybeClearOneof(message, oneof, -1, 0);
}
#pragma mark - FingersAdjustmentRequest_FingerMove

@implementation FingersAdjustmentRequest_FingerMove

@dynamic fingerIdx;
@dynamic type;
@dynamic stroke;

typedef struct FingersAdjustmentRequest_FingerMove__storage_ {
  uint32_t _has_storage_[1];
  uint32_t fingerIdx;
  FingersAdjustmentRequest_FingerMove_FingerMovementTypes type;
  int32_t stroke;
} FingersAdjustmentRequest_FingerMove__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "fingerIdx",
        .dataTypeSpecific.className = NULL,
        .number = FingersAdjustmentRequest_FingerMove_FieldNumber_FingerIdx,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FingersAdjustmentRequest_FingerMove__storage_, fingerIdx),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = FingersAdjustmentRequest_FingerMove_FingerMovementTypes_EnumDescriptor,
        .number = FingersAdjustmentRequest_FingerMove_FieldNumber_Type,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(FingersAdjustmentRequest_FingerMove__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "stroke",
        .dataTypeSpecific.className = NULL,
        .number = FingersAdjustmentRequest_FingerMove_FieldNumber_Stroke,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(FingersAdjustmentRequest_FingerMove__storage_, stroke),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FingersAdjustmentRequest_FingerMove class]
                                     rootClass:[CapabilityRoot class]
                                          file:CapabilityRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FingersAdjustmentRequest_FingerMove__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(FingersAdjustmentRequest)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t FingersAdjustmentRequest_FingerMove_Type_RawValue(FingersAdjustmentRequest_FingerMove *message) {
  GPBDescriptor *descriptor = [FingersAdjustmentRequest_FingerMove descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:FingersAdjustmentRequest_FingerMove_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetFingersAdjustmentRequest_FingerMove_Type_RawValue(FingersAdjustmentRequest_FingerMove *message, int32_t value) {
  GPBDescriptor *descriptor = [FingersAdjustmentRequest_FingerMove descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:FingersAdjustmentRequest_FingerMove_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum FingersAdjustmentRequest_FingerMove_FingerMovementTypes

GPBEnumDescriptor *FingersAdjustmentRequest_FingerMove_FingerMovementTypes_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Loose\000Tight\000";
    static const int32_t values[] = {
        FingersAdjustmentRequest_FingerMove_FingerMovementTypes_Loose,
        FingersAdjustmentRequest_FingerMove_FingerMovementTypes_Tight,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(FingersAdjustmentRequest_FingerMove_FingerMovementTypes)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:FingersAdjustmentRequest_FingerMove_FingerMovementTypes_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL FingersAdjustmentRequest_FingerMove_FingerMovementTypes_IsValidValue(int32_t value__) {
  switch (value__) {
    case FingersAdjustmentRequest_FingerMove_FingerMovementTypes_Loose:
    case FingersAdjustmentRequest_FingerMove_FingerMovementTypes_Tight:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - FingersAdjustmentResponse

@implementation FingersAdjustmentResponse


typedef struct FingersAdjustmentResponse__storage_ {
  uint32_t _has_storage_[1];
} FingersAdjustmentResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FingersAdjustmentResponse class]
                                     rootClass:[CapabilityRoot class]
                                          file:CapabilityRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(FingersAdjustmentResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ArmAdjustmentRequest

@implementation ArmAdjustmentRequest

@dynamic reqOneOfCase;
@dynamic handIdx;
@dynamic reset;
@dynamic disability;

typedef struct ArmAdjustmentRequest__storage_ {
  uint32_t _has_storage_[2];
  uint32_t handIdx;
} ArmAdjustmentRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "handIdx",
        .dataTypeSpecific.className = NULL,
        .number = ArmAdjustmentRequest_FieldNumber_HandIdx,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ArmAdjustmentRequest__storage_, handIdx),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "reset",
        .dataTypeSpecific.className = NULL,
        .number = ArmAdjustmentRequest_FieldNumber_Reset,
        .hasIndex = -1,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "disability",
        .dataTypeSpecific.className = NULL,
        .number = ArmAdjustmentRequest_FieldNumber_Disability,
        .hasIndex = -1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ArmAdjustmentRequest class]
                                     rootClass:[CapabilityRoot class]
                                          file:CapabilityRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ArmAdjustmentRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    static const char *oneofs[] = {
      "req",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void ArmAdjustmentRequest_ClearReqOneOfCase(ArmAdjustmentRequest *message) {
  GPBDescriptor *descriptor = [message descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBMaybeClearOneof(message, oneof, -1, 0);
}
#pragma mark - ArmAdjustmentResponse

@implementation ArmAdjustmentResponse


typedef struct ArmAdjustmentResponse__storage_ {
  uint32_t _has_storage_[1];
} ArmAdjustmentResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ArmAdjustmentResponse class]
                                     rootClass:[CapabilityRoot class]
                                          file:CapabilityRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(ArmAdjustmentResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Position

@implementation Position

@dynamic data_p;

typedef struct Position__storage_ {
  uint32_t _has_storage_[1];
  NSData *data_p;
} Position__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "data_p",
        .dataTypeSpecific.className = NULL,
        .number = Position_FieldNumber_Data_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Position__storage_, data_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Position class]
                                     rootClass:[CapabilityRoot class]
                                          file:CapabilityRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Position__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MarkAsOriginalPositionRequest

@implementation MarkAsOriginalPositionRequest


typedef struct MarkAsOriginalPositionRequest__storage_ {
  uint32_t _has_storage_[1];
} MarkAsOriginalPositionRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MarkAsOriginalPositionRequest class]
                                     rootClass:[CapabilityRoot class]
                                          file:CapabilityRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(MarkAsOriginalPositionRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MarkAsOriginalPositionResponse

@implementation MarkAsOriginalPositionResponse


typedef struct MarkAsOriginalPositionResponse__storage_ {
  uint32_t _has_storage_[1];
} MarkAsOriginalPositionResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MarkAsOriginalPositionResponse class]
                                     rootClass:[CapabilityRoot class]
                                          file:CapabilityRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(MarkAsOriginalPositionResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MovementScript

@implementation MovementScript

@dynamic hasPosition, position;
@dynamic runTime;
@dynamic keepTime;

typedef struct MovementScript__storage_ {
  uint32_t _has_storage_[1];
  int32_t runTime;
  int32_t keepTime;
  Position *position;
} MovementScript__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "position",
        .dataTypeSpecific.className = GPBStringifySymbol(Position),
        .number = MovementScript_FieldNumber_Position,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MovementScript__storage_, position),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "runTime",
        .dataTypeSpecific.className = NULL,
        .number = MovementScript_FieldNumber_RunTime,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MovementScript__storage_, runTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "keepTime",
        .dataTypeSpecific.className = NULL,
        .number = MovementScript_FieldNumber_KeepTime,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MovementScript__storage_, keepTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MovementScript class]
                                     rootClass:[CapabilityRoot class]
                                          file:CapabilityRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MovementScript__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetAbsolutePositionRequest

@implementation GetAbsolutePositionRequest


typedef struct GetAbsolutePositionRequest__storage_ {
  uint32_t _has_storage_[1];
} GetAbsolutePositionRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetAbsolutePositionRequest class]
                                     rootClass:[CapabilityRoot class]
                                          file:CapabilityRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(GetAbsolutePositionRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetAbsolutePositionResponse

@implementation GetAbsolutePositionResponse

@dynamic hasPosition, position;

typedef struct GetAbsolutePositionResponse__storage_ {
  uint32_t _has_storage_[1];
  Position *position;
} GetAbsolutePositionResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "position",
        .dataTypeSpecific.className = GPBStringifySymbol(Position),
        .number = GetAbsolutePositionResponse_FieldNumber_Position,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetAbsolutePositionResponse__storage_, position),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetAbsolutePositionResponse class]
                                     rootClass:[CapabilityRoot class]
                                          file:CapabilityRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetAbsolutePositionResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AbsoluteMoveRequest

@implementation AbsoluteMoveRequest

@dynamic scriptsArray, scriptsArray_Count;
@dynamic syncMode;

typedef struct AbsoluteMoveRequest__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *scriptsArray;
} AbsoluteMoveRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "scriptsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(MovementScript),
        .number = AbsoluteMoveRequest_FieldNumber_ScriptsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(AbsoluteMoveRequest__storage_, scriptsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "syncMode",
        .dataTypeSpecific.className = NULL,
        .number = AbsoluteMoveRequest_FieldNumber_SyncMode,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AbsoluteMoveRequest class]
                                     rootClass:[CapabilityRoot class]
                                          file:CapabilityRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AbsoluteMoveRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AbsoluteMoveResponse

@implementation AbsoluteMoveResponse


typedef struct AbsoluteMoveResponse__storage_ {
  uint32_t _has_storage_[1];
} AbsoluteMoveResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AbsoluteMoveResponse class]
                                     rootClass:[CapabilityRoot class]
                                          file:CapabilityRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(AbsoluteMoveResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
