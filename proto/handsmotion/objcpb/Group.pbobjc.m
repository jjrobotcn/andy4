// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: group.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "Group.pbobjc.h"
#import "Capability.pbobjc.h"
#import "google/api/Annotations.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - GroupRoot

@implementation GroupRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    registry = [[GPBExtensionRegistry alloc] init];
    // Merge in the imports (direct or indirect) that defined extensions.
    [registry addExtensions:[GAPIAnnotationsRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - GroupRoot_FileDescriptor

static GPBFileDescriptor *GroupRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"handsmotion"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - MotionMeta

@implementation MotionMeta

@dynamic id_p;
@dynamic name;

typedef struct MotionMeta__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
  NSString *name;
} MotionMeta__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = MotionMeta_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MotionMeta__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = MotionMeta_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MotionMeta__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MotionMeta class]
                                     rootClass:[GroupRoot class]
                                          file:GroupRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MotionMeta__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - NewMotionGroupRequest

@implementation NewMotionGroupRequest

@dynamic name;

typedef struct NewMotionGroupRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *name;
} NewMotionGroupRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = NewMotionGroupRequest_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(NewMotionGroupRequest__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[NewMotionGroupRequest class]
                                     rootClass:[GroupRoot class]
                                          file:GroupRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(NewMotionGroupRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - NewMotionGroupResponse

@implementation NewMotionGroupResponse

@dynamic hasMotion, motion;

typedef struct NewMotionGroupResponse__storage_ {
  uint32_t _has_storage_[1];
  MotionMeta *motion;
} NewMotionGroupResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "motion",
        .dataTypeSpecific.className = GPBStringifySymbol(MotionMeta),
        .number = NewMotionGroupResponse_FieldNumber_Motion,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(NewMotionGroupResponse__storage_, motion),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[NewMotionGroupResponse class]
                                     rootClass:[GroupRoot class]
                                          file:GroupRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(NewMotionGroupResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ListMotionGroupsRequest

@implementation ListMotionGroupsRequest


typedef struct ListMotionGroupsRequest__storage_ {
  uint32_t _has_storage_[1];
} ListMotionGroupsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ListMotionGroupsRequest class]
                                     rootClass:[GroupRoot class]
                                          file:GroupRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(ListMotionGroupsRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ListMotionGroupsResponse

@implementation ListMotionGroupsResponse

@dynamic motionsArray, motionsArray_Count;

typedef struct ListMotionGroupsResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *motionsArray;
} ListMotionGroupsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "motionsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(MotionMeta),
        .number = ListMotionGroupsResponse_FieldNumber_MotionsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ListMotionGroupsResponse__storage_, motionsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ListMotionGroupsResponse class]
                                     rootClass:[GroupRoot class]
                                          file:GroupRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ListMotionGroupsResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DeleteMotionGroupRequest

@implementation DeleteMotionGroupRequest

@dynamic id_p;

typedef struct DeleteMotionGroupRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
} DeleteMotionGroupRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = DeleteMotionGroupRequest_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DeleteMotionGroupRequest__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DeleteMotionGroupRequest class]
                                     rootClass:[GroupRoot class]
                                          file:GroupRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DeleteMotionGroupRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DeleteMotionGroupResponse

@implementation DeleteMotionGroupResponse


typedef struct DeleteMotionGroupResponse__storage_ {
  uint32_t _has_storage_[1];
} DeleteMotionGroupResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DeleteMotionGroupResponse class]
                                     rootClass:[GroupRoot class]
                                          file:GroupRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(DeleteMotionGroupResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetMotionGroupRequest

@implementation GetMotionGroupRequest

@dynamic id_p;

typedef struct GetMotionGroupRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
} GetMotionGroupRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = GetMotionGroupRequest_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetMotionGroupRequest__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetMotionGroupRequest class]
                                     rootClass:[GroupRoot class]
                                          file:GroupRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetMotionGroupRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetMotionGroupResponse

@implementation GetMotionGroupResponse

@dynamic hasMeta, meta;
@dynamic scriptsArray, scriptsArray_Count;

typedef struct GetMotionGroupResponse__storage_ {
  uint32_t _has_storage_[1];
  MotionMeta *meta;
  NSMutableArray *scriptsArray;
} GetMotionGroupResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "meta",
        .dataTypeSpecific.className = GPBStringifySymbol(MotionMeta),
        .number = GetMotionGroupResponse_FieldNumber_Meta,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetMotionGroupResponse__storage_, meta),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "scriptsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(MovementScript),
        .number = GetMotionGroupResponse_FieldNumber_ScriptsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetMotionGroupResponse__storage_, scriptsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetMotionGroupResponse class]
                                     rootClass:[GroupRoot class]
                                          file:GroupRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetMotionGroupResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UpdateMotionMetaRequest

@implementation UpdateMotionMetaRequest

@dynamic hasMotion, motion;

typedef struct UpdateMotionMetaRequest__storage_ {
  uint32_t _has_storage_[1];
  MotionMeta *motion;
} UpdateMotionMetaRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "motion",
        .dataTypeSpecific.className = GPBStringifySymbol(MotionMeta),
        .number = UpdateMotionMetaRequest_FieldNumber_Motion,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UpdateMotionMetaRequest__storage_, motion),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UpdateMotionMetaRequest class]
                                     rootClass:[GroupRoot class]
                                          file:GroupRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UpdateMotionMetaRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UpdateMotionMetaResponse

@implementation UpdateMotionMetaResponse


typedef struct UpdateMotionMetaResponse__storage_ {
  uint32_t _has_storage_[1];
} UpdateMotionMetaResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UpdateMotionMetaResponse class]
                                     rootClass:[GroupRoot class]
                                          file:GroupRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(UpdateMotionMetaResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UpdateMotionScriptsRequest

@implementation UpdateMotionScriptsRequest

@dynamic id_p;
@dynamic scriptsArray, scriptsArray_Count;

typedef struct UpdateMotionScriptsRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
  NSMutableArray *scriptsArray;
} UpdateMotionScriptsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = UpdateMotionScriptsRequest_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UpdateMotionScriptsRequest__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "scriptsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(MovementScript),
        .number = UpdateMotionScriptsRequest_FieldNumber_ScriptsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(UpdateMotionScriptsRequest__storage_, scriptsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UpdateMotionScriptsRequest class]
                                     rootClass:[GroupRoot class]
                                          file:GroupRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UpdateMotionScriptsRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UpdateMotionScriptsResponse

@implementation UpdateMotionScriptsResponse


typedef struct UpdateMotionScriptsResponse__storage_ {
  uint32_t _has_storage_[1];
} UpdateMotionScriptsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UpdateMotionScriptsResponse class]
                                     rootClass:[GroupRoot class]
                                          file:GroupRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(UpdateMotionScriptsResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
