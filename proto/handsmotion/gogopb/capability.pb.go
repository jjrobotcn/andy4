// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: capability.proto

package handsmotion

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// 手指移动类型
type FingersAdjustmentRequest_FingerMove_FingerMovementTypes int32

const (
	// 手指松开
	FingersAdjustmentRequest_FingerMove_LOOSE FingersAdjustmentRequest_FingerMove_FingerMovementTypes = 0
	// 手指收紧
	FingersAdjustmentRequest_FingerMove_TIGHT FingersAdjustmentRequest_FingerMove_FingerMovementTypes = 1
)

var FingersAdjustmentRequest_FingerMove_FingerMovementTypes_name = map[int32]string{
	0: "LOOSE",
	1: "TIGHT",
}

var FingersAdjustmentRequest_FingerMove_FingerMovementTypes_value = map[string]int32{
	"LOOSE": 0,
	"TIGHT": 1,
}

func (x FingersAdjustmentRequest_FingerMove_FingerMovementTypes) String() string {
	return proto.EnumName(FingersAdjustmentRequest_FingerMove_FingerMovementTypes_name, int32(x))
}

func (FingersAdjustmentRequest_FingerMove_FingerMovementTypes) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f2310f95efbbe3ac, []int{0, 0, 0}
}

type FingersAdjustmentRequest struct {
	// 手index 0: 左手 1：右手
	HandIdx uint32 `protobuf:"varint,1,opt,name=hand_idx,json=handIdx,proto3" json:"hand_idx,omitempty"`
	// Types that are valid to be assigned to Req:
	//	*FingersAdjustmentRequest_Reset_
	//	*FingersAdjustmentRequest_Move
	Req                  isFingersAdjustmentRequest_Req `protobuf_oneof:"req"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *FingersAdjustmentRequest) Reset()         { *m = FingersAdjustmentRequest{} }
func (m *FingersAdjustmentRequest) String() string { return proto.CompactTextString(m) }
func (*FingersAdjustmentRequest) ProtoMessage()    {}
func (*FingersAdjustmentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2310f95efbbe3ac, []int{0}
}
func (m *FingersAdjustmentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FingersAdjustmentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FingersAdjustmentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FingersAdjustmentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FingersAdjustmentRequest.Merge(m, src)
}
func (m *FingersAdjustmentRequest) XXX_Size() int {
	return m.Size()
}
func (m *FingersAdjustmentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FingersAdjustmentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FingersAdjustmentRequest proto.InternalMessageInfo

type isFingersAdjustmentRequest_Req interface {
	isFingersAdjustmentRequest_Req()
	MarshalTo([]byte) (int, error)
	Size() int
}

type FingersAdjustmentRequest_Reset_ struct {
	Reset_ bool `protobuf:"varint,2,opt,name=reset,proto3,oneof"`
}
type FingersAdjustmentRequest_Move struct {
	Move *FingersAdjustmentRequest_FingerMove `protobuf:"bytes,3,opt,name=move,proto3,oneof"`
}

func (*FingersAdjustmentRequest_Reset_) isFingersAdjustmentRequest_Req() {}
func (*FingersAdjustmentRequest_Move) isFingersAdjustmentRequest_Req()   {}

func (m *FingersAdjustmentRequest) GetReq() isFingersAdjustmentRequest_Req {
	if m != nil {
		return m.Req
	}
	return nil
}

func (m *FingersAdjustmentRequest) GetHandIdx() uint32 {
	if m != nil {
		return m.HandIdx
	}
	return 0
}

func (m *FingersAdjustmentRequest) GetReset_() bool {
	if x, ok := m.GetReq().(*FingersAdjustmentRequest_Reset_); ok {
		return x.Reset_
	}
	return false
}

func (m *FingersAdjustmentRequest) GetMove() *FingersAdjustmentRequest_FingerMove {
	if x, ok := m.GetReq().(*FingersAdjustmentRequest_Move); ok {
		return x.Move
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*FingersAdjustmentRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _FingersAdjustmentRequest_OneofMarshaler, _FingersAdjustmentRequest_OneofUnmarshaler, _FingersAdjustmentRequest_OneofSizer, []interface{}{
		(*FingersAdjustmentRequest_Reset_)(nil),
		(*FingersAdjustmentRequest_Move)(nil),
	}
}

func _FingersAdjustmentRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*FingersAdjustmentRequest)
	// req
	switch x := m.Req.(type) {
	case *FingersAdjustmentRequest_Reset_:
		t := uint64(0)
		if x.Reset_ {
			t = 1
		}
		_ = b.EncodeVarint(2<<3 | proto.WireVarint)
		_ = b.EncodeVarint(t)
	case *FingersAdjustmentRequest_Move:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Move); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("FingersAdjustmentRequest.Req has unexpected type %T", x)
	}
	return nil
}

func _FingersAdjustmentRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*FingersAdjustmentRequest)
	switch tag {
	case 2: // req.reset
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Req = &FingersAdjustmentRequest_Reset_{x != 0}
		return true, err
	case 3: // req.move
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FingersAdjustmentRequest_FingerMove)
		err := b.DecodeMessage(msg)
		m.Req = &FingersAdjustmentRequest_Move{msg}
		return true, err
	default:
		return false, nil
	}
}

func _FingersAdjustmentRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*FingersAdjustmentRequest)
	// req
	switch x := m.Req.(type) {
	case *FingersAdjustmentRequest_Reset_:
		n += 1 // tag and wire
		n += 1
	case *FingersAdjustmentRequest_Move:
		s := proto.Size(x.Move)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type FingersAdjustmentRequest_FingerMove struct {
	// 手指index 0: 拇指 4：尾指
	FingerIdx uint32 `protobuf:"varint,2,opt,name=finger_idx,json=fingerIdx,proto3" json:"finger_idx,omitempty"`
	// 手指移动类型
	Type FingersAdjustmentRequest_FingerMove_FingerMovementTypes `protobuf:"varint,3,opt,name=type,proto3,enum=handsmotion.FingersAdjustmentRequest_FingerMove_FingerMovementTypes" json:"type,omitempty"`
	// 移动行程 0-3600
	Stroke               int32    `protobuf:"varint,4,opt,name=stroke,proto3" json:"stroke,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FingersAdjustmentRequest_FingerMove) Reset()         { *m = FingersAdjustmentRequest_FingerMove{} }
func (m *FingersAdjustmentRequest_FingerMove) String() string { return proto.CompactTextString(m) }
func (*FingersAdjustmentRequest_FingerMove) ProtoMessage()    {}
func (*FingersAdjustmentRequest_FingerMove) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2310f95efbbe3ac, []int{0, 0}
}
func (m *FingersAdjustmentRequest_FingerMove) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FingersAdjustmentRequest_FingerMove) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FingersAdjustmentRequest_FingerMove.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FingersAdjustmentRequest_FingerMove) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FingersAdjustmentRequest_FingerMove.Merge(m, src)
}
func (m *FingersAdjustmentRequest_FingerMove) XXX_Size() int {
	return m.Size()
}
func (m *FingersAdjustmentRequest_FingerMove) XXX_DiscardUnknown() {
	xxx_messageInfo_FingersAdjustmentRequest_FingerMove.DiscardUnknown(m)
}

var xxx_messageInfo_FingersAdjustmentRequest_FingerMove proto.InternalMessageInfo

func (m *FingersAdjustmentRequest_FingerMove) GetFingerIdx() uint32 {
	if m != nil {
		return m.FingerIdx
	}
	return 0
}

func (m *FingersAdjustmentRequest_FingerMove) GetType() FingersAdjustmentRequest_FingerMove_FingerMovementTypes {
	if m != nil {
		return m.Type
	}
	return FingersAdjustmentRequest_FingerMove_LOOSE
}

func (m *FingersAdjustmentRequest_FingerMove) GetStroke() int32 {
	if m != nil {
		return m.Stroke
	}
	return 0
}

type FingersAdjustmentResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FingersAdjustmentResponse) Reset()         { *m = FingersAdjustmentResponse{} }
func (m *FingersAdjustmentResponse) String() string { return proto.CompactTextString(m) }
func (*FingersAdjustmentResponse) ProtoMessage()    {}
func (*FingersAdjustmentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2310f95efbbe3ac, []int{1}
}
func (m *FingersAdjustmentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FingersAdjustmentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FingersAdjustmentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FingersAdjustmentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FingersAdjustmentResponse.Merge(m, src)
}
func (m *FingersAdjustmentResponse) XXX_Size() int {
	return m.Size()
}
func (m *FingersAdjustmentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FingersAdjustmentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FingersAdjustmentResponse proto.InternalMessageInfo

type ArmAdjustmentRequest struct {
	// 手index 0: 左手 1：右手
	HandIdx uint32 `protobuf:"varint,1,opt,name=hand_idx,json=handIdx,proto3" json:"hand_idx,omitempty"`
	// Types that are valid to be assigned to Req:
	//	*ArmAdjustmentRequest_Reset_
	//	*ArmAdjustmentRequest_Disability
	Req                  isArmAdjustmentRequest_Req `protobuf_oneof:"req"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *ArmAdjustmentRequest) Reset()         { *m = ArmAdjustmentRequest{} }
func (m *ArmAdjustmentRequest) String() string { return proto.CompactTextString(m) }
func (*ArmAdjustmentRequest) ProtoMessage()    {}
func (*ArmAdjustmentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2310f95efbbe3ac, []int{2}
}
func (m *ArmAdjustmentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArmAdjustmentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArmAdjustmentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArmAdjustmentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArmAdjustmentRequest.Merge(m, src)
}
func (m *ArmAdjustmentRequest) XXX_Size() int {
	return m.Size()
}
func (m *ArmAdjustmentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ArmAdjustmentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ArmAdjustmentRequest proto.InternalMessageInfo

type isArmAdjustmentRequest_Req interface {
	isArmAdjustmentRequest_Req()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ArmAdjustmentRequest_Reset_ struct {
	Reset_ bool `protobuf:"varint,2,opt,name=reset,proto3,oneof"`
}
type ArmAdjustmentRequest_Disability struct {
	Disability bool `protobuf:"varint,3,opt,name=disability,proto3,oneof"`
}

func (*ArmAdjustmentRequest_Reset_) isArmAdjustmentRequest_Req()     {}
func (*ArmAdjustmentRequest_Disability) isArmAdjustmentRequest_Req() {}

func (m *ArmAdjustmentRequest) GetReq() isArmAdjustmentRequest_Req {
	if m != nil {
		return m.Req
	}
	return nil
}

func (m *ArmAdjustmentRequest) GetHandIdx() uint32 {
	if m != nil {
		return m.HandIdx
	}
	return 0
}

func (m *ArmAdjustmentRequest) GetReset_() bool {
	if x, ok := m.GetReq().(*ArmAdjustmentRequest_Reset_); ok {
		return x.Reset_
	}
	return false
}

func (m *ArmAdjustmentRequest) GetDisability() bool {
	if x, ok := m.GetReq().(*ArmAdjustmentRequest_Disability); ok {
		return x.Disability
	}
	return false
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ArmAdjustmentRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ArmAdjustmentRequest_OneofMarshaler, _ArmAdjustmentRequest_OneofUnmarshaler, _ArmAdjustmentRequest_OneofSizer, []interface{}{
		(*ArmAdjustmentRequest_Reset_)(nil),
		(*ArmAdjustmentRequest_Disability)(nil),
	}
}

func _ArmAdjustmentRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ArmAdjustmentRequest)
	// req
	switch x := m.Req.(type) {
	case *ArmAdjustmentRequest_Reset_:
		t := uint64(0)
		if x.Reset_ {
			t = 1
		}
		_ = b.EncodeVarint(2<<3 | proto.WireVarint)
		_ = b.EncodeVarint(t)
	case *ArmAdjustmentRequest_Disability:
		t := uint64(0)
		if x.Disability {
			t = 1
		}
		_ = b.EncodeVarint(3<<3 | proto.WireVarint)
		_ = b.EncodeVarint(t)
	case nil:
	default:
		return fmt.Errorf("ArmAdjustmentRequest.Req has unexpected type %T", x)
	}
	return nil
}

func _ArmAdjustmentRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ArmAdjustmentRequest)
	switch tag {
	case 2: // req.reset
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Req = &ArmAdjustmentRequest_Reset_{x != 0}
		return true, err
	case 3: // req.disability
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Req = &ArmAdjustmentRequest_Disability{x != 0}
		return true, err
	default:
		return false, nil
	}
}

func _ArmAdjustmentRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ArmAdjustmentRequest)
	// req
	switch x := m.Req.(type) {
	case *ArmAdjustmentRequest_Reset_:
		n += 1 // tag and wire
		n += 1
	case *ArmAdjustmentRequest_Disability:
		n += 1 // tag and wire
		n += 1
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ArmAdjustmentResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ArmAdjustmentResponse) Reset()         { *m = ArmAdjustmentResponse{} }
func (m *ArmAdjustmentResponse) String() string { return proto.CompactTextString(m) }
func (*ArmAdjustmentResponse) ProtoMessage()    {}
func (*ArmAdjustmentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2310f95efbbe3ac, []int{3}
}
func (m *ArmAdjustmentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArmAdjustmentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArmAdjustmentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArmAdjustmentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArmAdjustmentResponse.Merge(m, src)
}
func (m *ArmAdjustmentResponse) XXX_Size() int {
	return m.Size()
}
func (m *ArmAdjustmentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ArmAdjustmentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ArmAdjustmentResponse proto.InternalMessageInfo

// 位置数据
type Position struct {
	Data                 []byte   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Position) Reset()         { *m = Position{} }
func (m *Position) String() string { return proto.CompactTextString(m) }
func (*Position) ProtoMessage()    {}
func (*Position) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2310f95efbbe3ac, []int{4}
}
func (m *Position) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Position) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Position.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Position) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Position.Merge(m, src)
}
func (m *Position) XXX_Size() int {
	return m.Size()
}
func (m *Position) XXX_DiscardUnknown() {
	xxx_messageInfo_Position.DiscardUnknown(m)
}

var xxx_messageInfo_Position proto.InternalMessageInfo

func (m *Position) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type MarkAsOriginalPositionRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MarkAsOriginalPositionRequest) Reset()         { *m = MarkAsOriginalPositionRequest{} }
func (m *MarkAsOriginalPositionRequest) String() string { return proto.CompactTextString(m) }
func (*MarkAsOriginalPositionRequest) ProtoMessage()    {}
func (*MarkAsOriginalPositionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2310f95efbbe3ac, []int{5}
}
func (m *MarkAsOriginalPositionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MarkAsOriginalPositionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MarkAsOriginalPositionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MarkAsOriginalPositionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarkAsOriginalPositionRequest.Merge(m, src)
}
func (m *MarkAsOriginalPositionRequest) XXX_Size() int {
	return m.Size()
}
func (m *MarkAsOriginalPositionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MarkAsOriginalPositionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MarkAsOriginalPositionRequest proto.InternalMessageInfo

type MarkAsOriginalPositionResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MarkAsOriginalPositionResponse) Reset()         { *m = MarkAsOriginalPositionResponse{} }
func (m *MarkAsOriginalPositionResponse) String() string { return proto.CompactTextString(m) }
func (*MarkAsOriginalPositionResponse) ProtoMessage()    {}
func (*MarkAsOriginalPositionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2310f95efbbe3ac, []int{6}
}
func (m *MarkAsOriginalPositionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MarkAsOriginalPositionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MarkAsOriginalPositionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MarkAsOriginalPositionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarkAsOriginalPositionResponse.Merge(m, src)
}
func (m *MarkAsOriginalPositionResponse) XXX_Size() int {
	return m.Size()
}
func (m *MarkAsOriginalPositionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MarkAsOriginalPositionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MarkAsOriginalPositionResponse proto.InternalMessageInfo

// 运动脚本
type MovementScript struct {
	// 位置数据
	Position *Position `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
	// 运动时间ms
	RunTime int32 `protobuf:"varint,2,opt,name=run_time,json=runTime,proto3" json:"run_time,omitempty"`
	// 保持时间ms
	KeepTime             int32    `protobuf:"varint,3,opt,name=keep_time,json=keepTime,proto3" json:"keep_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MovementScript) Reset()         { *m = MovementScript{} }
func (m *MovementScript) String() string { return proto.CompactTextString(m) }
func (*MovementScript) ProtoMessage()    {}
func (*MovementScript) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2310f95efbbe3ac, []int{7}
}
func (m *MovementScript) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MovementScript) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MovementScript.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MovementScript) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MovementScript.Merge(m, src)
}
func (m *MovementScript) XXX_Size() int {
	return m.Size()
}
func (m *MovementScript) XXX_DiscardUnknown() {
	xxx_messageInfo_MovementScript.DiscardUnknown(m)
}

var xxx_messageInfo_MovementScript proto.InternalMessageInfo

func (m *MovementScript) GetPosition() *Position {
	if m != nil {
		return m.Position
	}
	return nil
}

func (m *MovementScript) GetRunTime() int32 {
	if m != nil {
		return m.RunTime
	}
	return 0
}

func (m *MovementScript) GetKeepTime() int32 {
	if m != nil {
		return m.KeepTime
	}
	return 0
}

type GetAbsolutePositionRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetAbsolutePositionRequest) Reset()         { *m = GetAbsolutePositionRequest{} }
func (m *GetAbsolutePositionRequest) String() string { return proto.CompactTextString(m) }
func (*GetAbsolutePositionRequest) ProtoMessage()    {}
func (*GetAbsolutePositionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2310f95efbbe3ac, []int{8}
}
func (m *GetAbsolutePositionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAbsolutePositionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAbsolutePositionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAbsolutePositionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAbsolutePositionRequest.Merge(m, src)
}
func (m *GetAbsolutePositionRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetAbsolutePositionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAbsolutePositionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAbsolutePositionRequest proto.InternalMessageInfo

type GetAbsolutePositionResponse struct {
	// 位置数据
	Position             *Position `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *GetAbsolutePositionResponse) Reset()         { *m = GetAbsolutePositionResponse{} }
func (m *GetAbsolutePositionResponse) String() string { return proto.CompactTextString(m) }
func (*GetAbsolutePositionResponse) ProtoMessage()    {}
func (*GetAbsolutePositionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2310f95efbbe3ac, []int{9}
}
func (m *GetAbsolutePositionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAbsolutePositionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAbsolutePositionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAbsolutePositionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAbsolutePositionResponse.Merge(m, src)
}
func (m *GetAbsolutePositionResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetAbsolutePositionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAbsolutePositionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetAbsolutePositionResponse proto.InternalMessageInfo

func (m *GetAbsolutePositionResponse) GetPosition() *Position {
	if m != nil {
		return m.Position
	}
	return nil
}

type AbsoluteMoveRequest struct {
	Scripts []*MovementScript `protobuf:"bytes,1,rep,name=scripts,proto3" json:"scripts,omitempty"`
	// 同步标识
	// true: 等待动作完成时返回
	// false: 动作开始执行时立即返回
	SyncMode             bool     `protobuf:"varint,2,opt,name=sync_mode,json=syncMode,proto3" json:"sync_mode,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AbsoluteMoveRequest) Reset()         { *m = AbsoluteMoveRequest{} }
func (m *AbsoluteMoveRequest) String() string { return proto.CompactTextString(m) }
func (*AbsoluteMoveRequest) ProtoMessage()    {}
func (*AbsoluteMoveRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2310f95efbbe3ac, []int{10}
}
func (m *AbsoluteMoveRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AbsoluteMoveRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AbsoluteMoveRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AbsoluteMoveRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AbsoluteMoveRequest.Merge(m, src)
}
func (m *AbsoluteMoveRequest) XXX_Size() int {
	return m.Size()
}
func (m *AbsoluteMoveRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AbsoluteMoveRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AbsoluteMoveRequest proto.InternalMessageInfo

func (m *AbsoluteMoveRequest) GetScripts() []*MovementScript {
	if m != nil {
		return m.Scripts
	}
	return nil
}

func (m *AbsoluteMoveRequest) GetSyncMode() bool {
	if m != nil {
		return m.SyncMode
	}
	return false
}

type AbsoluteMoveResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AbsoluteMoveResponse) Reset()         { *m = AbsoluteMoveResponse{} }
func (m *AbsoluteMoveResponse) String() string { return proto.CompactTextString(m) }
func (*AbsoluteMoveResponse) ProtoMessage()    {}
func (*AbsoluteMoveResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2310f95efbbe3ac, []int{11}
}
func (m *AbsoluteMoveResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AbsoluteMoveResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AbsoluteMoveResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AbsoluteMoveResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AbsoluteMoveResponse.Merge(m, src)
}
func (m *AbsoluteMoveResponse) XXX_Size() int {
	return m.Size()
}
func (m *AbsoluteMoveResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AbsoluteMoveResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AbsoluteMoveResponse proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("handsmotion.FingersAdjustmentRequest_FingerMove_FingerMovementTypes", FingersAdjustmentRequest_FingerMove_FingerMovementTypes_name, FingersAdjustmentRequest_FingerMove_FingerMovementTypes_value)
	proto.RegisterType((*FingersAdjustmentRequest)(nil), "handsmotion.FingersAdjustmentRequest")
	proto.RegisterType((*FingersAdjustmentRequest_FingerMove)(nil), "handsmotion.FingersAdjustmentRequest.FingerMove")
	proto.RegisterType((*FingersAdjustmentResponse)(nil), "handsmotion.FingersAdjustmentResponse")
	proto.RegisterType((*ArmAdjustmentRequest)(nil), "handsmotion.ArmAdjustmentRequest")
	proto.RegisterType((*ArmAdjustmentResponse)(nil), "handsmotion.ArmAdjustmentResponse")
	proto.RegisterType((*Position)(nil), "handsmotion.Position")
	proto.RegisterType((*MarkAsOriginalPositionRequest)(nil), "handsmotion.MarkAsOriginalPositionRequest")
	proto.RegisterType((*MarkAsOriginalPositionResponse)(nil), "handsmotion.MarkAsOriginalPositionResponse")
	proto.RegisterType((*MovementScript)(nil), "handsmotion.MovementScript")
	proto.RegisterType((*GetAbsolutePositionRequest)(nil), "handsmotion.GetAbsolutePositionRequest")
	proto.RegisterType((*GetAbsolutePositionResponse)(nil), "handsmotion.GetAbsolutePositionResponse")
	proto.RegisterType((*AbsoluteMoveRequest)(nil), "handsmotion.AbsoluteMoveRequest")
	proto.RegisterType((*AbsoluteMoveResponse)(nil), "handsmotion.AbsoluteMoveResponse")
}

func init() { proto.RegisterFile("capability.proto", fileDescriptor_f2310f95efbbe3ac) }

var fileDescriptor_f2310f95efbbe3ac = []byte{
	// 745 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x95, 0xdd, 0x4e, 0xdb, 0x48,
	0x14, 0xc7, 0x99, 0x7c, 0x40, 0x38, 0x01, 0xc4, 0x0e, 0x90, 0x0d, 0x0e, 0x64, 0x8d, 0xa5, 0xdd,
	0x8d, 0x40, 0x9b, 0xec, 0x1a, 0xa1, 0x5d, 0x90, 0xb6, 0x52, 0x28, 0xe5, 0x43, 0x2a, 0x02, 0x99,
	0x5c, 0xf4, 0xce, 0x32, 0x78, 0x9a, 0xba, 0x89, 0x3d, 0xc6, 0x33, 0x41, 0x44, 0xbd, 0xeb, 0x7d,
	0x2f, 0xaa, 0x3e, 0x41, 0xaf, 0xfa, 0x08, 0xed, 0x23, 0x54, 0xbd, 0xaa, 0xd4, 0x17, 0xa8, 0x50,
	0x6f, 0xfa, 0x16, 0xd5, 0x8c, 0xed, 0x10, 0x43, 0x20, 0xb4, 0xea, 0x9d, 0x67, 0xce, 0x7f, 0xce,
	0xf9, 0xcd, 0xf9, 0x18, 0xc3, 0xf4, 0x89, 0xe5, 0x5b, 0xc7, 0x4e, 0xdb, 0xe1, 0xdd, 0xaa, 0x1f,
	0x50, 0x4e, 0x71, 0xfe, 0x89, 0xe5, 0xd9, 0xcc, 0xa5, 0xdc, 0xa1, 0x9e, 0xb2, 0xd0, 0xa4, 0xb4,
	0xd9, 0x26, 0x35, 0xcb, 0x77, 0x6a, 0x96, 0xe7, 0x51, 0x6e, 0x89, 0x6d, 0x16, 0x4a, 0xb5, 0xaf,
	0x29, 0x28, 0x6e, 0x3b, 0x5e, 0x93, 0x04, 0xac, 0x6e, 0x3f, 0xed, 0x30, 0xee, 0x12, 0x8f, 0x1b,
	0xe4, 0xb4, 0x43, 0x18, 0xc7, 0xf3, 0x90, 0x13, 0x9e, 0x4c, 0xc7, 0x3e, 0x2f, 0x22, 0x15, 0x55,
	0x26, 0x8d, 0x31, 0xb1, 0xde, 0xb3, 0xcf, 0x71, 0x01, 0xb2, 0x01, 0x61, 0x84, 0x17, 0x53, 0x2a,
	0xaa, 0xe4, 0x76, 0x47, 0x8c, 0x70, 0x89, 0xb7, 0x21, 0xe3, 0xd2, 0x33, 0x52, 0x4c, 0xab, 0xa8,
	0x92, 0xd7, 0xff, 0xae, 0xf6, 0x91, 0x54, 0x6f, 0x8a, 0x13, 0x19, 0xf6, 0xe9, 0x19, 0xd9, 0x1d,
	0x31, 0xe4, 0x79, 0xe5, 0x03, 0x02, 0xb8, 0xdc, 0xc6, 0x8b, 0x00, 0x8f, 0xe5, 0x4a, 0xb2, 0xa4,
	0x24, 0xcb, 0x78, 0xb8, 0x23, 0x68, 0x1e, 0x41, 0x86, 0x77, 0xfd, 0x30, 0xea, 0x94, 0xbe, 0xf5,
	0xbd, 0x51, 0xfb, 0x3e, 0x85, 0xa0, 0xd1, 0xf5, 0x09, 0x33, 0xa4, 0x47, 0x5c, 0x80, 0x51, 0xc6,
	0x03, 0xda, 0x22, 0xc5, 0x8c, 0x8a, 0x2a, 0x59, 0x23, 0x5a, 0x69, 0x2b, 0x30, 0x33, 0xe0, 0x10,
	0x1e, 0x87, 0xec, 0xc3, 0x83, 0x83, 0xa3, 0x07, 0xd3, 0x23, 0xe2, 0xb3, 0xb1, 0xb7, 0xb3, 0xdb,
	0x98, 0x46, 0x9b, 0x59, 0x48, 0x07, 0xe4, 0x54, 0x2b, 0xc1, 0xfc, 0x00, 0x18, 0xe6, 0x53, 0x8f,
	0x11, 0x2d, 0x80, 0xd9, 0x7a, 0xe0, 0xfe, 0x94, 0x1a, 0xa8, 0x00, 0xb6, 0xc3, 0xa2, 0x96, 0x90,
	0x39, 0x11, 0xc6, 0xbe, 0xbd, 0x18, 0xe8, 0x57, 0x98, 0xbb, 0x12, 0x33, 0x82, 0x29, 0x43, 0xee,
	0x90, 0x32, 0x47, 0xe4, 0x0f, 0x63, 0xc8, 0xd8, 0x16, 0xb7, 0x64, 0xf0, 0x09, 0x43, 0x7e, 0x6b,
	0xbf, 0xc1, 0xe2, 0xbe, 0x15, 0xb4, 0xea, 0xec, 0x20, 0x70, 0x9a, 0x8e, 0x67, 0xb5, 0x63, 0x75,
	0x44, 0xad, 0xa9, 0x50, 0xbe, 0x49, 0x10, 0x85, 0x78, 0x06, 0x53, 0x71, 0xea, 0x8e, 0x4e, 0x02,
	0xc7, 0xe7, 0xf8, 0x1f, 0xc8, 0xf9, 0x91, 0x4a, 0x06, 0xcb, 0xeb, 0x73, 0x89, 0x42, 0xf6, 0x5c,
	0xf4, 0x64, 0x22, 0x39, 0x41, 0xc7, 0x33, 0xb9, 0xe3, 0x12, 0x99, 0x84, 0xac, 0x31, 0x16, 0x74,
	0xbc, 0x86, 0xe3, 0x12, 0x5c, 0x82, 0xf1, 0x16, 0x21, 0x7e, 0x68, 0x4b, 0x4b, 0x5b, 0x4e, 0x6c,
	0x08, 0xa3, 0xb6, 0x00, 0xca, 0x0e, 0xe1, 0xf5, 0x63, 0x46, 0xdb, 0x1d, 0x4e, 0xae, 0xc2, 0x1f,
	0x42, 0x69, 0xa0, 0x35, 0x24, 0xff, 0x01, 0x4e, 0xcd, 0x81, 0x99, 0xd8, 0x9d, 0xb8, 0x74, 0x5c,
	0xdb, 0x35, 0x18, 0x63, 0xf2, 0xee, 0xac, 0x88, 0xd4, 0x74, 0x25, 0xaf, 0x97, 0x12, 0x8e, 0x92,
	0xf9, 0x31, 0x62, 0xad, 0xb8, 0x1a, 0xeb, 0x7a, 0x27, 0xa6, 0x4b, 0xed, 0xf0, 0xda, 0x39, 0x23,
	0x27, 0x36, 0xf6, 0xa9, 0x4d, 0xb4, 0x02, 0xcc, 0x26, 0x43, 0x85, 0xd4, 0xfa, 0xbb, 0x51, 0x80,
	0xfb, 0xbd, 0x87, 0x02, 0xbf, 0x46, 0xf0, 0xcb, 0xb5, 0x66, 0xc4, 0xbf, 0xdf, 0x69, 0x72, 0x94,
	0x3f, 0x86, 0xc9, 0xa2, 0x1a, 0xff, 0xff, 0xfc, 0xd3, 0x97, 0x57, 0xa9, 0x7f, 0x35, 0x5d, 0x3e,
	0x3e, 0x67, 0x7a, 0x2d, 0x3c, 0x51, 0x93, 0xa7, 0x6b, 0x97, 0xcf, 0x56, 0x2d, 0x9c, 0x64, 0x66,
	0x5a, 0x3d, 0x1f, 0x1b, 0x68, 0x19, 0xbf, 0x44, 0x30, 0x99, 0xe8, 0x4f, 0xbc, 0x94, 0x08, 0x3c,
	0x68, 0x5e, 0x14, 0xed, 0x36, 0x49, 0xc4, 0xb5, 0x2e, 0xb9, 0x56, 0xb5, 0xea, 0x30, 0x2e, 0x2b,
	0x70, 0xaf, 0x30, 0xbd, 0x45, 0x50, 0x18, 0xdc, 0xd9, 0x78, 0x39, 0x59, 0xbc, 0xdb, 0xe6, 0x43,
	0x59, 0xb9, 0x93, 0x36, 0xc2, 0xdd, 0x92, 0xb8, 0xf7, 0xb4, 0xf5, 0x61, 0xb8, 0xae, 0x15, 0xb4,
	0x4c, 0x8b, 0x99, 0x34, 0xf2, 0x64, 0xc6, 0x0d, 0x28, 0xc8, 0xdf, 0x20, 0x98, 0x19, 0xd0, 0xd6,
	0xf8, 0xcf, 0x04, 0xca, 0xcd, 0x63, 0xa1, 0x54, 0x86, 0x0b, 0x93, 0x75, 0xc7, 0x6b, 0xc3, 0x80,
	0x9b, 0x84, 0x9b, 0x56, 0xe4, 0xa5, 0x07, 0x8b, 0x5f, 0x20, 0x98, 0xe8, 0xef, 0x61, 0xac, 0x26,
	0x6b, 0x7a, 0x7d, 0x92, 0x94, 0xa5, 0x5b, 0x14, 0x11, 0xd4, 0x7f, 0x12, 0x4a, 0xd7, 0xfe, 0x1a,
	0x5a, 0xf4, 0x18, 0x48, 0xfc, 0x88, 0x36, 0xd0, 0xf2, 0xe6, 0xc4, 0xfb, 0x8b, 0x32, 0xfa, 0x78,
	0x51, 0x46, 0x9f, 0x2f, 0xca, 0xe8, 0x78, 0x54, 0xfe, 0x38, 0x57, 0xbf, 0x05, 0x00, 0x00, 0xff,
	0xff, 0x29, 0x56, 0x63, 0x59, 0x77, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CapabilityClient is the client API for Capability service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CapabilityClient interface {
	// 手指调整方法
	// 调整手指动作的开合与重置
	FingersAdjustment(ctx context.Context, in *FingersAdjustmentRequest, opts ...grpc.CallOption) (*FingersAdjustmentResponse, error)
	// 手臂调整方法
	// 调整手臂位置重置、使能与失能。
	// 失能后可通过外力移动至相应位置后通过使能恢复锁定当前位置
	ArmAdjustment(ctx context.Context, in *ArmAdjustmentRequest, opts ...grpc.CallOption) (*ArmAdjustmentResponse, error)
	// 标记当前位置为初始位置
	// 所有位置数据将基于此点进行计算
	MarkAsOriginalPosition(ctx context.Context, in *MarkAsOriginalPositionRequest, opts ...grpc.CallOption) (*MarkAsOriginalPositionResponse, error)
	// 获取当前绝对位置
	GetAbsolutePosition(ctx context.Context, in *GetAbsolutePositionRequest, opts ...grpc.CallOption) (*GetAbsolutePositionResponse, error)
	// 绝对位置移动
	AbsoluteMove(ctx context.Context, in *AbsoluteMoveRequest, opts ...grpc.CallOption) (*AbsoluteMoveResponse, error)
}

type capabilityClient struct {
	cc *grpc.ClientConn
}

func NewCapabilityClient(cc *grpc.ClientConn) CapabilityClient {
	return &capabilityClient{cc}
}

func (c *capabilityClient) FingersAdjustment(ctx context.Context, in *FingersAdjustmentRequest, opts ...grpc.CallOption) (*FingersAdjustmentResponse, error) {
	out := new(FingersAdjustmentResponse)
	err := c.cc.Invoke(ctx, "/handsmotion.Capability/FingersAdjustment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *capabilityClient) ArmAdjustment(ctx context.Context, in *ArmAdjustmentRequest, opts ...grpc.CallOption) (*ArmAdjustmentResponse, error) {
	out := new(ArmAdjustmentResponse)
	err := c.cc.Invoke(ctx, "/handsmotion.Capability/ArmAdjustment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *capabilityClient) MarkAsOriginalPosition(ctx context.Context, in *MarkAsOriginalPositionRequest, opts ...grpc.CallOption) (*MarkAsOriginalPositionResponse, error) {
	out := new(MarkAsOriginalPositionResponse)
	err := c.cc.Invoke(ctx, "/handsmotion.Capability/MarkAsOriginalPosition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *capabilityClient) GetAbsolutePosition(ctx context.Context, in *GetAbsolutePositionRequest, opts ...grpc.CallOption) (*GetAbsolutePositionResponse, error) {
	out := new(GetAbsolutePositionResponse)
	err := c.cc.Invoke(ctx, "/handsmotion.Capability/GetAbsolutePosition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *capabilityClient) AbsoluteMove(ctx context.Context, in *AbsoluteMoveRequest, opts ...grpc.CallOption) (*AbsoluteMoveResponse, error) {
	out := new(AbsoluteMoveResponse)
	err := c.cc.Invoke(ctx, "/handsmotion.Capability/AbsoluteMove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CapabilityServer is the server API for Capability service.
type CapabilityServer interface {
	// 手指调整方法
	// 调整手指动作的开合与重置
	FingersAdjustment(context.Context, *FingersAdjustmentRequest) (*FingersAdjustmentResponse, error)
	// 手臂调整方法
	// 调整手臂位置重置、使能与失能。
	// 失能后可通过外力移动至相应位置后通过使能恢复锁定当前位置
	ArmAdjustment(context.Context, *ArmAdjustmentRequest) (*ArmAdjustmentResponse, error)
	// 标记当前位置为初始位置
	// 所有位置数据将基于此点进行计算
	MarkAsOriginalPosition(context.Context, *MarkAsOriginalPositionRequest) (*MarkAsOriginalPositionResponse, error)
	// 获取当前绝对位置
	GetAbsolutePosition(context.Context, *GetAbsolutePositionRequest) (*GetAbsolutePositionResponse, error)
	// 绝对位置移动
	AbsoluteMove(context.Context, *AbsoluteMoveRequest) (*AbsoluteMoveResponse, error)
}

// UnimplementedCapabilityServer can be embedded to have forward compatible implementations.
type UnimplementedCapabilityServer struct {
}

func (*UnimplementedCapabilityServer) FingersAdjustment(ctx context.Context, req *FingersAdjustmentRequest) (*FingersAdjustmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FingersAdjustment not implemented")
}
func (*UnimplementedCapabilityServer) ArmAdjustment(ctx context.Context, req *ArmAdjustmentRequest) (*ArmAdjustmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArmAdjustment not implemented")
}
func (*UnimplementedCapabilityServer) MarkAsOriginalPosition(ctx context.Context, req *MarkAsOriginalPositionRequest) (*MarkAsOriginalPositionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkAsOriginalPosition not implemented")
}
func (*UnimplementedCapabilityServer) GetAbsolutePosition(ctx context.Context, req *GetAbsolutePositionRequest) (*GetAbsolutePositionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAbsolutePosition not implemented")
}
func (*UnimplementedCapabilityServer) AbsoluteMove(ctx context.Context, req *AbsoluteMoveRequest) (*AbsoluteMoveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AbsoluteMove not implemented")
}

func RegisterCapabilityServer(s *grpc.Server, srv CapabilityServer) {
	s.RegisterService(&_Capability_serviceDesc, srv)
}

func _Capability_FingersAdjustment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FingersAdjustmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CapabilityServer).FingersAdjustment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/handsmotion.Capability/FingersAdjustment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CapabilityServer).FingersAdjustment(ctx, req.(*FingersAdjustmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Capability_ArmAdjustment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArmAdjustmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CapabilityServer).ArmAdjustment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/handsmotion.Capability/ArmAdjustment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CapabilityServer).ArmAdjustment(ctx, req.(*ArmAdjustmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Capability_MarkAsOriginalPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkAsOriginalPositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CapabilityServer).MarkAsOriginalPosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/handsmotion.Capability/MarkAsOriginalPosition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CapabilityServer).MarkAsOriginalPosition(ctx, req.(*MarkAsOriginalPositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Capability_GetAbsolutePosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAbsolutePositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CapabilityServer).GetAbsolutePosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/handsmotion.Capability/GetAbsolutePosition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CapabilityServer).GetAbsolutePosition(ctx, req.(*GetAbsolutePositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Capability_AbsoluteMove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AbsoluteMoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CapabilityServer).AbsoluteMove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/handsmotion.Capability/AbsoluteMove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CapabilityServer).AbsoluteMove(ctx, req.(*AbsoluteMoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Capability_serviceDesc = grpc.ServiceDesc{
	ServiceName: "handsmotion.Capability",
	HandlerType: (*CapabilityServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FingersAdjustment",
			Handler:    _Capability_FingersAdjustment_Handler,
		},
		{
			MethodName: "ArmAdjustment",
			Handler:    _Capability_ArmAdjustment_Handler,
		},
		{
			MethodName: "MarkAsOriginalPosition",
			Handler:    _Capability_MarkAsOriginalPosition_Handler,
		},
		{
			MethodName: "GetAbsolutePosition",
			Handler:    _Capability_GetAbsolutePosition_Handler,
		},
		{
			MethodName: "AbsoluteMove",
			Handler:    _Capability_AbsoluteMove_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "capability.proto",
}

func (m *FingersAdjustmentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FingersAdjustmentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FingersAdjustmentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Req != nil {
		{
			size := m.Req.Size()
			i -= size
			if _, err := m.Req.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.HandIdx != 0 {
		i = encodeVarintCapability(dAtA, i, uint64(m.HandIdx))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FingersAdjustmentRequest_Reset_) MarshalTo(dAtA []byte) (int, error) {
	return m.MarshalToSizedBuffer(dAtA[:m.Size()])
}

func (m *FingersAdjustmentRequest_Reset_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.Reset_ {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x10
	return len(dAtA) - i, nil
}
func (m *FingersAdjustmentRequest_Move) MarshalTo(dAtA []byte) (int, error) {
	return m.MarshalToSizedBuffer(dAtA[:m.Size()])
}

func (m *FingersAdjustmentRequest_Move) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Move != nil {
		{
			size, err := m.Move.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCapability(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *FingersAdjustmentRequest_FingerMove) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FingersAdjustmentRequest_FingerMove) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FingersAdjustmentRequest_FingerMove) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Stroke != 0 {
		i = encodeVarintCapability(dAtA, i, uint64(m.Stroke))
		i--
		dAtA[i] = 0x20
	}
	if m.Type != 0 {
		i = encodeVarintCapability(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x18
	}
	if m.FingerIdx != 0 {
		i = encodeVarintCapability(dAtA, i, uint64(m.FingerIdx))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *FingersAdjustmentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FingersAdjustmentResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FingersAdjustmentResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *ArmAdjustmentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArmAdjustmentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArmAdjustmentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Req != nil {
		{
			size := m.Req.Size()
			i -= size
			if _, err := m.Req.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.HandIdx != 0 {
		i = encodeVarintCapability(dAtA, i, uint64(m.HandIdx))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ArmAdjustmentRequest_Reset_) MarshalTo(dAtA []byte) (int, error) {
	return m.MarshalToSizedBuffer(dAtA[:m.Size()])
}

func (m *ArmAdjustmentRequest_Reset_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.Reset_ {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x10
	return len(dAtA) - i, nil
}
func (m *ArmAdjustmentRequest_Disability) MarshalTo(dAtA []byte) (int, error) {
	return m.MarshalToSizedBuffer(dAtA[:m.Size()])
}

func (m *ArmAdjustmentRequest_Disability) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.Disability {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x18
	return len(dAtA) - i, nil
}
func (m *ArmAdjustmentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArmAdjustmentResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArmAdjustmentResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *Position) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Position) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Position) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintCapability(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MarkAsOriginalPositionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MarkAsOriginalPositionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MarkAsOriginalPositionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *MarkAsOriginalPositionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MarkAsOriginalPositionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MarkAsOriginalPositionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *MovementScript) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MovementScript) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MovementScript) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.KeepTime != 0 {
		i = encodeVarintCapability(dAtA, i, uint64(m.KeepTime))
		i--
		dAtA[i] = 0x18
	}
	if m.RunTime != 0 {
		i = encodeVarintCapability(dAtA, i, uint64(m.RunTime))
		i--
		dAtA[i] = 0x10
	}
	if m.Position != nil {
		{
			size, err := m.Position.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCapability(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetAbsolutePositionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAbsolutePositionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAbsolutePositionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *GetAbsolutePositionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAbsolutePositionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAbsolutePositionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Position != nil {
		{
			size, err := m.Position.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCapability(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AbsoluteMoveRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AbsoluteMoveRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AbsoluteMoveRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SyncMode {
		i--
		if m.SyncMode {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Scripts) > 0 {
		for iNdEx := len(m.Scripts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Scripts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCapability(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AbsoluteMoveResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AbsoluteMoveResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AbsoluteMoveResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func encodeVarintCapability(dAtA []byte, offset int, v uint64) int {
	offset -= sovCapability(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *FingersAdjustmentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HandIdx != 0 {
		n += 1 + sovCapability(uint64(m.HandIdx))
	}
	if m.Req != nil {
		n += m.Req.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FingersAdjustmentRequest_Reset_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *FingersAdjustmentRequest_Move) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Move != nil {
		l = m.Move.Size()
		n += 1 + l + sovCapability(uint64(l))
	}
	return n
}
func (m *FingersAdjustmentRequest_FingerMove) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FingerIdx != 0 {
		n += 1 + sovCapability(uint64(m.FingerIdx))
	}
	if m.Type != 0 {
		n += 1 + sovCapability(uint64(m.Type))
	}
	if m.Stroke != 0 {
		n += 1 + sovCapability(uint64(m.Stroke))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FingersAdjustmentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ArmAdjustmentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HandIdx != 0 {
		n += 1 + sovCapability(uint64(m.HandIdx))
	}
	if m.Req != nil {
		n += m.Req.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ArmAdjustmentRequest_Reset_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *ArmAdjustmentRequest_Disability) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *ArmAdjustmentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Position) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovCapability(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MarkAsOriginalPositionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MarkAsOriginalPositionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MovementScript) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Position != nil {
		l = m.Position.Size()
		n += 1 + l + sovCapability(uint64(l))
	}
	if m.RunTime != 0 {
		n += 1 + sovCapability(uint64(m.RunTime))
	}
	if m.KeepTime != 0 {
		n += 1 + sovCapability(uint64(m.KeepTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAbsolutePositionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAbsolutePositionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Position != nil {
		l = m.Position.Size()
		n += 1 + l + sovCapability(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AbsoluteMoveRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Scripts) > 0 {
		for _, e := range m.Scripts {
			l = e.Size()
			n += 1 + l + sovCapability(uint64(l))
		}
	}
	if m.SyncMode {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AbsoluteMoveResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovCapability(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCapability(x uint64) (n int) {
	return sovCapability(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FingersAdjustmentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCapability
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FingersAdjustmentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FingersAdjustmentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HandIdx", wireType)
			}
			m.HandIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCapability
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HandIdx |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reset_", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCapability
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Req = &FingersAdjustmentRequest_Reset_{b}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Move", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCapability
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCapability
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCapability
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &FingersAdjustmentRequest_FingerMove{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Req = &FingersAdjustmentRequest_Move{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCapability(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCapability
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCapability
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FingersAdjustmentRequest_FingerMove) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCapability
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FingerMove: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FingerMove: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FingerIdx", wireType)
			}
			m.FingerIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCapability
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FingerIdx |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCapability
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= FingersAdjustmentRequest_FingerMove_FingerMovementTypes(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stroke", wireType)
			}
			m.Stroke = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCapability
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stroke |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCapability(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCapability
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCapability
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FingersAdjustmentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCapability
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FingersAdjustmentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FingersAdjustmentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCapability(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCapability
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCapability
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArmAdjustmentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCapability
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArmAdjustmentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArmAdjustmentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HandIdx", wireType)
			}
			m.HandIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCapability
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HandIdx |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reset_", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCapability
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Req = &ArmAdjustmentRequest_Reset_{b}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Disability", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCapability
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Req = &ArmAdjustmentRequest_Disability{b}
		default:
			iNdEx = preIndex
			skippy, err := skipCapability(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCapability
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCapability
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArmAdjustmentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCapability
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArmAdjustmentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArmAdjustmentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCapability(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCapability
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCapability
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Position) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCapability
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Position: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Position: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCapability
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCapability
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCapability
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCapability(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCapability
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCapability
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MarkAsOriginalPositionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCapability
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MarkAsOriginalPositionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MarkAsOriginalPositionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCapability(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCapability
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCapability
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MarkAsOriginalPositionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCapability
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MarkAsOriginalPositionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MarkAsOriginalPositionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCapability(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCapability
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCapability
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MovementScript) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCapability
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MovementScript: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MovementScript: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCapability
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCapability
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCapability
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Position == nil {
				m.Position = &Position{}
			}
			if err := m.Position.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunTime", wireType)
			}
			m.RunTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCapability
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RunTime |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeepTime", wireType)
			}
			m.KeepTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCapability
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeepTime |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCapability(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCapability
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCapability
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAbsolutePositionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCapability
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAbsolutePositionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAbsolutePositionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCapability(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCapability
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCapability
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAbsolutePositionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCapability
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAbsolutePositionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAbsolutePositionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCapability
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCapability
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCapability
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Position == nil {
				m.Position = &Position{}
			}
			if err := m.Position.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCapability(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCapability
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCapability
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AbsoluteMoveRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCapability
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AbsoluteMoveRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AbsoluteMoveRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scripts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCapability
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCapability
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCapability
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Scripts = append(m.Scripts, &MovementScript{})
			if err := m.Scripts[len(m.Scripts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SyncMode", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCapability
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SyncMode = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCapability(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCapability
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCapability
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AbsoluteMoveResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCapability
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AbsoluteMoveResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AbsoluteMoveResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCapability(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCapability
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCapability
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCapability(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCapability
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCapability
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCapability
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCapability
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthCapability
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCapability
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCapability(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthCapability
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCapability = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCapability   = fmt.Errorf("proto: integer overflow")
)
