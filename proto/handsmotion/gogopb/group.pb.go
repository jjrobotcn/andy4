// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: group.proto

package handsmotion

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type MotionMeta struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MotionMeta) Reset()         { *m = MotionMeta{} }
func (m *MotionMeta) String() string { return proto.CompactTextString(m) }
func (*MotionMeta) ProtoMessage()    {}
func (*MotionMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_e10f4c9b19ad8eee, []int{0}
}
func (m *MotionMeta) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MotionMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MotionMeta.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MotionMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MotionMeta.Merge(m, src)
}
func (m *MotionMeta) XXX_Size() int {
	return m.Size()
}
func (m *MotionMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_MotionMeta.DiscardUnknown(m)
}

var xxx_messageInfo_MotionMeta proto.InternalMessageInfo

func (m *MotionMeta) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *MotionMeta) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type NewMotionGroupRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NewMotionGroupRequest) Reset()         { *m = NewMotionGroupRequest{} }
func (m *NewMotionGroupRequest) String() string { return proto.CompactTextString(m) }
func (*NewMotionGroupRequest) ProtoMessage()    {}
func (*NewMotionGroupRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e10f4c9b19ad8eee, []int{1}
}
func (m *NewMotionGroupRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewMotionGroupRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewMotionGroupRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewMotionGroupRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewMotionGroupRequest.Merge(m, src)
}
func (m *NewMotionGroupRequest) XXX_Size() int {
	return m.Size()
}
func (m *NewMotionGroupRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NewMotionGroupRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NewMotionGroupRequest proto.InternalMessageInfo

func (m *NewMotionGroupRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type NewMotionGroupResponse struct {
	Motion               *MotionMeta `protobuf:"bytes,1,opt,name=motion,proto3" json:"motion,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *NewMotionGroupResponse) Reset()         { *m = NewMotionGroupResponse{} }
func (m *NewMotionGroupResponse) String() string { return proto.CompactTextString(m) }
func (*NewMotionGroupResponse) ProtoMessage()    {}
func (*NewMotionGroupResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e10f4c9b19ad8eee, []int{2}
}
func (m *NewMotionGroupResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewMotionGroupResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewMotionGroupResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewMotionGroupResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewMotionGroupResponse.Merge(m, src)
}
func (m *NewMotionGroupResponse) XXX_Size() int {
	return m.Size()
}
func (m *NewMotionGroupResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NewMotionGroupResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NewMotionGroupResponse proto.InternalMessageInfo

func (m *NewMotionGroupResponse) GetMotion() *MotionMeta {
	if m != nil {
		return m.Motion
	}
	return nil
}

type ListMotionGroupsRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListMotionGroupsRequest) Reset()         { *m = ListMotionGroupsRequest{} }
func (m *ListMotionGroupsRequest) String() string { return proto.CompactTextString(m) }
func (*ListMotionGroupsRequest) ProtoMessage()    {}
func (*ListMotionGroupsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e10f4c9b19ad8eee, []int{3}
}
func (m *ListMotionGroupsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListMotionGroupsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListMotionGroupsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListMotionGroupsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListMotionGroupsRequest.Merge(m, src)
}
func (m *ListMotionGroupsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListMotionGroupsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListMotionGroupsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListMotionGroupsRequest proto.InternalMessageInfo

type ListMotionGroupsResponse struct {
	Motions              []*MotionMeta `protobuf:"bytes,1,rep,name=motions,proto3" json:"motions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ListMotionGroupsResponse) Reset()         { *m = ListMotionGroupsResponse{} }
func (m *ListMotionGroupsResponse) String() string { return proto.CompactTextString(m) }
func (*ListMotionGroupsResponse) ProtoMessage()    {}
func (*ListMotionGroupsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e10f4c9b19ad8eee, []int{4}
}
func (m *ListMotionGroupsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListMotionGroupsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListMotionGroupsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListMotionGroupsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListMotionGroupsResponse.Merge(m, src)
}
func (m *ListMotionGroupsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListMotionGroupsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListMotionGroupsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListMotionGroupsResponse proto.InternalMessageInfo

func (m *ListMotionGroupsResponse) GetMotions() []*MotionMeta {
	if m != nil {
		return m.Motions
	}
	return nil
}

type DeleteMotionGroupRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteMotionGroupRequest) Reset()         { *m = DeleteMotionGroupRequest{} }
func (m *DeleteMotionGroupRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteMotionGroupRequest) ProtoMessage()    {}
func (*DeleteMotionGroupRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e10f4c9b19ad8eee, []int{5}
}
func (m *DeleteMotionGroupRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteMotionGroupRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteMotionGroupRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteMotionGroupRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteMotionGroupRequest.Merge(m, src)
}
func (m *DeleteMotionGroupRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteMotionGroupRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteMotionGroupRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteMotionGroupRequest proto.InternalMessageInfo

func (m *DeleteMotionGroupRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type DeleteMotionGroupResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteMotionGroupResponse) Reset()         { *m = DeleteMotionGroupResponse{} }
func (m *DeleteMotionGroupResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteMotionGroupResponse) ProtoMessage()    {}
func (*DeleteMotionGroupResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e10f4c9b19ad8eee, []int{6}
}
func (m *DeleteMotionGroupResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteMotionGroupResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteMotionGroupResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteMotionGroupResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteMotionGroupResponse.Merge(m, src)
}
func (m *DeleteMotionGroupResponse) XXX_Size() int {
	return m.Size()
}
func (m *DeleteMotionGroupResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteMotionGroupResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteMotionGroupResponse proto.InternalMessageInfo

type GetMotionGroupRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetMotionGroupRequest) Reset()         { *m = GetMotionGroupRequest{} }
func (m *GetMotionGroupRequest) String() string { return proto.CompactTextString(m) }
func (*GetMotionGroupRequest) ProtoMessage()    {}
func (*GetMotionGroupRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e10f4c9b19ad8eee, []int{7}
}
func (m *GetMotionGroupRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetMotionGroupRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetMotionGroupRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetMotionGroupRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMotionGroupRequest.Merge(m, src)
}
func (m *GetMotionGroupRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetMotionGroupRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMotionGroupRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetMotionGroupRequest proto.InternalMessageInfo

func (m *GetMotionGroupRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type GetMotionGroupResponse struct {
	Meta                 *MotionMeta       `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	Scripts              []*MovementScript `protobuf:"bytes,2,rep,name=scripts,proto3" json:"scripts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *GetMotionGroupResponse) Reset()         { *m = GetMotionGroupResponse{} }
func (m *GetMotionGroupResponse) String() string { return proto.CompactTextString(m) }
func (*GetMotionGroupResponse) ProtoMessage()    {}
func (*GetMotionGroupResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e10f4c9b19ad8eee, []int{8}
}
func (m *GetMotionGroupResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetMotionGroupResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetMotionGroupResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetMotionGroupResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMotionGroupResponse.Merge(m, src)
}
func (m *GetMotionGroupResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetMotionGroupResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMotionGroupResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetMotionGroupResponse proto.InternalMessageInfo

func (m *GetMotionGroupResponse) GetMeta() *MotionMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *GetMotionGroupResponse) GetScripts() []*MovementScript {
	if m != nil {
		return m.Scripts
	}
	return nil
}

type UpdateMotionMetaRequest struct {
	Motion               *MotionMeta `protobuf:"bytes,2,opt,name=motion,proto3" json:"motion,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *UpdateMotionMetaRequest) Reset()         { *m = UpdateMotionMetaRequest{} }
func (m *UpdateMotionMetaRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateMotionMetaRequest) ProtoMessage()    {}
func (*UpdateMotionMetaRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e10f4c9b19ad8eee, []int{9}
}
func (m *UpdateMotionMetaRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateMotionMetaRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateMotionMetaRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateMotionMetaRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateMotionMetaRequest.Merge(m, src)
}
func (m *UpdateMotionMetaRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateMotionMetaRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateMotionMetaRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateMotionMetaRequest proto.InternalMessageInfo

func (m *UpdateMotionMetaRequest) GetMotion() *MotionMeta {
	if m != nil {
		return m.Motion
	}
	return nil
}

type UpdateMotionMetaResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateMotionMetaResponse) Reset()         { *m = UpdateMotionMetaResponse{} }
func (m *UpdateMotionMetaResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateMotionMetaResponse) ProtoMessage()    {}
func (*UpdateMotionMetaResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e10f4c9b19ad8eee, []int{10}
}
func (m *UpdateMotionMetaResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateMotionMetaResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateMotionMetaResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateMotionMetaResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateMotionMetaResponse.Merge(m, src)
}
func (m *UpdateMotionMetaResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateMotionMetaResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateMotionMetaResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateMotionMetaResponse proto.InternalMessageInfo

type UpdateMotionScriptsRequest struct {
	Id                   string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Scripts              []*MovementScript `protobuf:"bytes,2,rep,name=scripts,proto3" json:"scripts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *UpdateMotionScriptsRequest) Reset()         { *m = UpdateMotionScriptsRequest{} }
func (m *UpdateMotionScriptsRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateMotionScriptsRequest) ProtoMessage()    {}
func (*UpdateMotionScriptsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e10f4c9b19ad8eee, []int{11}
}
func (m *UpdateMotionScriptsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateMotionScriptsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateMotionScriptsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateMotionScriptsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateMotionScriptsRequest.Merge(m, src)
}
func (m *UpdateMotionScriptsRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateMotionScriptsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateMotionScriptsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateMotionScriptsRequest proto.InternalMessageInfo

func (m *UpdateMotionScriptsRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UpdateMotionScriptsRequest) GetScripts() []*MovementScript {
	if m != nil {
		return m.Scripts
	}
	return nil
}

type UpdateMotionScriptsResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateMotionScriptsResponse) Reset()         { *m = UpdateMotionScriptsResponse{} }
func (m *UpdateMotionScriptsResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateMotionScriptsResponse) ProtoMessage()    {}
func (*UpdateMotionScriptsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e10f4c9b19ad8eee, []int{12}
}
func (m *UpdateMotionScriptsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateMotionScriptsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateMotionScriptsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateMotionScriptsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateMotionScriptsResponse.Merge(m, src)
}
func (m *UpdateMotionScriptsResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateMotionScriptsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateMotionScriptsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateMotionScriptsResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MotionMeta)(nil), "handsmotion.MotionMeta")
	proto.RegisterType((*NewMotionGroupRequest)(nil), "handsmotion.NewMotionGroupRequest")
	proto.RegisterType((*NewMotionGroupResponse)(nil), "handsmotion.NewMotionGroupResponse")
	proto.RegisterType((*ListMotionGroupsRequest)(nil), "handsmotion.ListMotionGroupsRequest")
	proto.RegisterType((*ListMotionGroupsResponse)(nil), "handsmotion.ListMotionGroupsResponse")
	proto.RegisterType((*DeleteMotionGroupRequest)(nil), "handsmotion.DeleteMotionGroupRequest")
	proto.RegisterType((*DeleteMotionGroupResponse)(nil), "handsmotion.DeleteMotionGroupResponse")
	proto.RegisterType((*GetMotionGroupRequest)(nil), "handsmotion.GetMotionGroupRequest")
	proto.RegisterType((*GetMotionGroupResponse)(nil), "handsmotion.GetMotionGroupResponse")
	proto.RegisterType((*UpdateMotionMetaRequest)(nil), "handsmotion.UpdateMotionMetaRequest")
	proto.RegisterType((*UpdateMotionMetaResponse)(nil), "handsmotion.UpdateMotionMetaResponse")
	proto.RegisterType((*UpdateMotionScriptsRequest)(nil), "handsmotion.UpdateMotionScriptsRequest")
	proto.RegisterType((*UpdateMotionScriptsResponse)(nil), "handsmotion.UpdateMotionScriptsResponse")
}

func init() { proto.RegisterFile("group.proto", fileDescriptor_e10f4c9b19ad8eee) }

var fileDescriptor_e10f4c9b19ad8eee = []byte{
	// 619 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x95, 0xcf, 0x6e, 0xd3, 0x4e,
	0x10, 0xc7, 0xb5, 0xfe, 0x55, 0xed, 0x8f, 0x29, 0x0a, 0x65, 0xa5, 0x34, 0xae, 0x03, 0x51, 0xb5,
	0xfc, 0x69, 0x95, 0xa2, 0xb8, 0x0d, 0x45, 0x15, 0x11, 0x12, 0x52, 0x85, 0x54, 0x81, 0x08, 0x87,
	0x20, 0x2e, 0xbd, 0x44, 0xdb, 0x64, 0x65, 0x2c, 0x12, 0xdb, 0x64, 0x37, 0xad, 0x90, 0x38, 0xf1,
	0x08, 0x70, 0xe7, 0xc6, 0x03, 0x70, 0xe2, 0xce, 0x89, 0x03, 0x07, 0x24, 0x5e, 0x00, 0x45, 0x3c,
	0x08, 0xca, 0xec, 0x86, 0xc6, 0x8e, 0xed, 0x34, 0xdc, 0xa2, 0xdd, 0xef, 0xcc, 0x7c, 0x66, 0x3c,
	0xdf, 0x0d, 0xac, 0x7a, 0x83, 0x70, 0x18, 0xd5, 0xa2, 0x41, 0xa8, 0x42, 0xba, 0xfa, 0x92, 0x07,
	0x5d, 0xd9, 0x0f, 0x95, 0x1f, 0x06, 0xce, 0x5a, 0x87, 0x47, 0xfc, 0xc4, 0xef, 0xf9, 0xea, 0x8d,
	0xbe, 0x76, 0xae, 0x79, 0x61, 0xe8, 0xf5, 0x84, 0xcb, 0x23, 0xdf, 0xe5, 0x41, 0x10, 0x2a, 0x3e,
	0x16, 0x4a, 0x7d, 0xcb, 0x76, 0x01, 0x9a, 0x18, 0xd9, 0x14, 0x8a, 0xd3, 0x02, 0x58, 0x7e, 0xd7,
	0x26, 0x9b, 0x64, 0xfb, 0x52, 0xcb, 0xf2, 0xbb, 0x94, 0xc2, 0x52, 0xc0, 0xfb, 0xc2, 0xb6, 0xf0,
	0x04, 0x7f, 0xb3, 0x1d, 0x28, 0x3e, 0x13, 0x67, 0x3a, 0xe8, 0x68, 0x8c, 0xd1, 0x12, 0xaf, 0x87,
	0x42, 0xaa, 0xbf, 0x62, 0x32, 0x25, 0x7e, 0x0c, 0xeb, 0x49, 0xb1, 0x8c, 0xc2, 0x40, 0x0a, 0xea,
	0xc2, 0xb2, 0x46, 0x46, 0xfd, 0x6a, 0xbd, 0x54, 0x9b, 0x6a, 0xa3, 0x76, 0xce, 0xd4, 0x32, 0x32,
	0xb6, 0x01, 0xa5, 0xa7, 0xbe, 0x54, 0x53, 0xb9, 0xa4, 0xa9, 0xcc, 0x9a, 0x60, 0xcf, 0x5e, 0x99,
	0x3a, 0x7b, 0xb0, 0xa2, 0x13, 0x48, 0x9b, 0x6c, 0xfe, 0x97, 0x57, 0x68, 0xa2, 0x63, 0x55, 0xb0,
	0x1f, 0x89, 0x9e, 0x50, 0x22, 0xa5, 0xc9, 0xc4, 0x84, 0x58, 0x19, 0x36, 0x52, 0xb4, 0xba, 0x36,
	0xdb, 0x82, 0xe2, 0x91, 0x50, 0x17, 0xc8, 0xf2, 0x16, 0xd6, 0x93, 0x42, 0x83, 0xbf, 0x03, 0x4b,
	0x7d, 0xa1, 0xf8, 0xbc, 0x21, 0xa1, 0x88, 0xde, 0x83, 0x15, 0xd9, 0x19, 0xf8, 0x91, 0x92, 0xb6,
	0x85, 0xbd, 0x96, 0x13, 0xfa, 0x53, 0xd1, 0x17, 0x81, 0x7a, 0x8e, 0x9a, 0xd6, 0x44, 0xcb, 0x9e,
	0x40, 0xe9, 0x45, 0xd4, 0xe5, 0x93, 0x1e, 0x30, 0xa1, 0x01, 0x3d, 0xff, 0x4a, 0xd6, 0xc5, 0xbe,
	0x92, 0x03, 0xf6, 0x6c, 0x2e, 0x33, 0x8e, 0x0e, 0x38, 0xd3, 0x77, 0x1a, 0x43, 0x66, 0xcc, 0xe4,
	0x5f, 0x9b, 0xb9, 0x0e, 0xe5, 0xd4, 0x22, 0x9a, 0xa1, 0xfe, 0xe5, 0x7f, 0xb8, 0x82, 0x13, 0x6e,
	0xf2, 0x80, 0x7b, 0x98, 0x81, 0xbe, 0x27, 0x50, 0x88, 0x6f, 0x29, 0x65, 0xb1, 0x5a, 0xa9, 0xfb,
	0xee, 0xdc, 0xc8, 0xd5, 0x98, 0x9e, 0x0f, 0xde, 0xfd, 0xfc, 0xfd, 0xc1, 0xda, 0x63, 0x77, 0xd0,
	0x7f, 0xa7, 0x75, 0x57, 0xcb, 0x5d, 0x0c, 0x75, 0xd1, 0xc6, 0xd2, 0x0d, 0xc4, 0x59, 0x5b, 0x9f,
	0xb7, 0xf1, 0xa4, 0x41, 0xaa, 0xf4, 0x3b, 0x81, 0xb5, 0xe4, 0x52, 0xd3, 0x9b, 0xb1, 0x92, 0x19,
	0x76, 0x70, 0x6e, 0xcd, 0x51, 0x19, 0xb4, 0x57, 0x88, 0x26, 0x58, 0x2d, 0x0f, 0xad, 0xe7, 0x4b,
	0x15, 0x63, 0x93, 0x0d, 0x52, 0x3d, 0xde, 0xa5, 0x0b, 0x06, 0xd1, 0x8f, 0x04, 0xae, 0xce, 0x18,
	0x85, 0xc6, 0x49, 0xb3, 0x4c, 0xe7, 0xdc, 0x9e, 0x27, 0x33, 0x1d, 0x35, 0xb0, 0xa3, 0x7d, 0xe6,
	0xe6, 0xc1, 0x75, 0x31, 0x7c, 0x66, 0xde, 0x5f, 0x09, 0x14, 0xe2, 0x1e, 0x4c, 0x2c, 0x41, 0xaa,
	0x93, 0x13, 0x4b, 0x90, 0x6e, 0x62, 0xe6, 0x21, 0x17, 0xcf, 0x5f, 0x02, 0x4f, 0xa8, 0x24, 0xd4,
	0x71, 0x8d, 0x2e, 0x14, 0x42, 0x3f, 0x11, 0x28, 0x4e, 0x6f, 0xbf, 0xde, 0xf4, 0xf1, 0xd3, 0x10,
	0xdf, 0x9c, 0x0c, 0xbb, 0x27, 0x36, 0x27, 0xd3, 0xc8, 0x0f, 0xb1, 0x9f, 0xfb, 0x6c, 0x3f, 0x0f,
	0x6e, 0x88, 0xd1, 0x31, 0xbe, 0xf6, 0xf8, 0x95, 0x1a, 0x0f, 0xfb, 0x33, 0x89, 0x3f, 0x13, 0xc8,
	0x69, 0xac, 0x4a, 0xb7, 0x32, 0x21, 0xe2, 0x2f, 0x86, 0xb3, 0x3d, 0x5f, 0x68, 0x80, 0x0f, 0x11,
	0xf8, 0x01, 0x3b, 0x58, 0x14, 0xd8, 0xbc, 0x2a, 0x0d, 0x52, 0x3d, 0xbc, 0xfc, 0x6d, 0x54, 0x21,
	0x3f, 0x46, 0x15, 0xf2, 0x6b, 0x54, 0x21, 0x27, 0xcb, 0xf8, 0xf7, 0x79, 0xf7, 0x4f, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x03, 0x92, 0x33, 0xa2, 0x8a, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GroupManagementClient is the client API for GroupManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GroupManagementClient interface {
	// 新建动作分组
	NewMotionGroup(ctx context.Context, in *NewMotionGroupRequest, opts ...grpc.CallOption) (*NewMotionGroupResponse, error)
	// 获取所有动作分组列表
	ListMotionGroups(ctx context.Context, in *ListMotionGroupsRequest, opts ...grpc.CallOption) (*ListMotionGroupsResponse, error)
	// 删除动作分组
	DeleteMotionGroup(ctx context.Context, in *DeleteMotionGroupRequest, opts ...grpc.CallOption) (*DeleteMotionGroupResponse, error)
	// 获取动作分组
	GetMotionGroup(ctx context.Context, in *GetMotionGroupRequest, opts ...grpc.CallOption) (*GetMotionGroupResponse, error)
	// 更新动作分组Meta
	UpdateMotionGroupMeta(ctx context.Context, in *UpdateMotionMetaRequest, opts ...grpc.CallOption) (*UpdateMotionMetaResponse, error)
	// 更新动作分组Scripts
	UpdateMotionGroupScripts(ctx context.Context, in *UpdateMotionScriptsRequest, opts ...grpc.CallOption) (*UpdateMotionScriptsResponse, error)
}

type groupManagementClient struct {
	cc *grpc.ClientConn
}

func NewGroupManagementClient(cc *grpc.ClientConn) GroupManagementClient {
	return &groupManagementClient{cc}
}

func (c *groupManagementClient) NewMotionGroup(ctx context.Context, in *NewMotionGroupRequest, opts ...grpc.CallOption) (*NewMotionGroupResponse, error) {
	out := new(NewMotionGroupResponse)
	err := c.cc.Invoke(ctx, "/handsmotion.GroupManagement/NewMotionGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupManagementClient) ListMotionGroups(ctx context.Context, in *ListMotionGroupsRequest, opts ...grpc.CallOption) (*ListMotionGroupsResponse, error) {
	out := new(ListMotionGroupsResponse)
	err := c.cc.Invoke(ctx, "/handsmotion.GroupManagement/ListMotionGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupManagementClient) DeleteMotionGroup(ctx context.Context, in *DeleteMotionGroupRequest, opts ...grpc.CallOption) (*DeleteMotionGroupResponse, error) {
	out := new(DeleteMotionGroupResponse)
	err := c.cc.Invoke(ctx, "/handsmotion.GroupManagement/DeleteMotionGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupManagementClient) GetMotionGroup(ctx context.Context, in *GetMotionGroupRequest, opts ...grpc.CallOption) (*GetMotionGroupResponse, error) {
	out := new(GetMotionGroupResponse)
	err := c.cc.Invoke(ctx, "/handsmotion.GroupManagement/GetMotionGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupManagementClient) UpdateMotionGroupMeta(ctx context.Context, in *UpdateMotionMetaRequest, opts ...grpc.CallOption) (*UpdateMotionMetaResponse, error) {
	out := new(UpdateMotionMetaResponse)
	err := c.cc.Invoke(ctx, "/handsmotion.GroupManagement/UpdateMotionGroupMeta", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupManagementClient) UpdateMotionGroupScripts(ctx context.Context, in *UpdateMotionScriptsRequest, opts ...grpc.CallOption) (*UpdateMotionScriptsResponse, error) {
	out := new(UpdateMotionScriptsResponse)
	err := c.cc.Invoke(ctx, "/handsmotion.GroupManagement/UpdateMotionGroupScripts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GroupManagementServer is the server API for GroupManagement service.
type GroupManagementServer interface {
	// 新建动作分组
	NewMotionGroup(context.Context, *NewMotionGroupRequest) (*NewMotionGroupResponse, error)
	// 获取所有动作分组列表
	ListMotionGroups(context.Context, *ListMotionGroupsRequest) (*ListMotionGroupsResponse, error)
	// 删除动作分组
	DeleteMotionGroup(context.Context, *DeleteMotionGroupRequest) (*DeleteMotionGroupResponse, error)
	// 获取动作分组
	GetMotionGroup(context.Context, *GetMotionGroupRequest) (*GetMotionGroupResponse, error)
	// 更新动作分组Meta
	UpdateMotionGroupMeta(context.Context, *UpdateMotionMetaRequest) (*UpdateMotionMetaResponse, error)
	// 更新动作分组Scripts
	UpdateMotionGroupScripts(context.Context, *UpdateMotionScriptsRequest) (*UpdateMotionScriptsResponse, error)
}

// UnimplementedGroupManagementServer can be embedded to have forward compatible implementations.
type UnimplementedGroupManagementServer struct {
}

func (*UnimplementedGroupManagementServer) NewMotionGroup(ctx context.Context, req *NewMotionGroupRequest) (*NewMotionGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewMotionGroup not implemented")
}
func (*UnimplementedGroupManagementServer) ListMotionGroups(ctx context.Context, req *ListMotionGroupsRequest) (*ListMotionGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMotionGroups not implemented")
}
func (*UnimplementedGroupManagementServer) DeleteMotionGroup(ctx context.Context, req *DeleteMotionGroupRequest) (*DeleteMotionGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMotionGroup not implemented")
}
func (*UnimplementedGroupManagementServer) GetMotionGroup(ctx context.Context, req *GetMotionGroupRequest) (*GetMotionGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMotionGroup not implemented")
}
func (*UnimplementedGroupManagementServer) UpdateMotionGroupMeta(ctx context.Context, req *UpdateMotionMetaRequest) (*UpdateMotionMetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMotionGroupMeta not implemented")
}
func (*UnimplementedGroupManagementServer) UpdateMotionGroupScripts(ctx context.Context, req *UpdateMotionScriptsRequest) (*UpdateMotionScriptsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMotionGroupScripts not implemented")
}

func RegisterGroupManagementServer(s *grpc.Server, srv GroupManagementServer) {
	s.RegisterService(&_GroupManagement_serviceDesc, srv)
}

func _GroupManagement_NewMotionGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewMotionGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupManagementServer).NewMotionGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/handsmotion.GroupManagement/NewMotionGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupManagementServer).NewMotionGroup(ctx, req.(*NewMotionGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupManagement_ListMotionGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMotionGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupManagementServer).ListMotionGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/handsmotion.GroupManagement/ListMotionGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupManagementServer).ListMotionGroups(ctx, req.(*ListMotionGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupManagement_DeleteMotionGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMotionGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupManagementServer).DeleteMotionGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/handsmotion.GroupManagement/DeleteMotionGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupManagementServer).DeleteMotionGroup(ctx, req.(*DeleteMotionGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupManagement_GetMotionGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMotionGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupManagementServer).GetMotionGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/handsmotion.GroupManagement/GetMotionGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupManagementServer).GetMotionGroup(ctx, req.(*GetMotionGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupManagement_UpdateMotionGroupMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMotionMetaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupManagementServer).UpdateMotionGroupMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/handsmotion.GroupManagement/UpdateMotionGroupMeta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupManagementServer).UpdateMotionGroupMeta(ctx, req.(*UpdateMotionMetaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupManagement_UpdateMotionGroupScripts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMotionScriptsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupManagementServer).UpdateMotionGroupScripts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/handsmotion.GroupManagement/UpdateMotionGroupScripts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupManagementServer).UpdateMotionGroupScripts(ctx, req.(*UpdateMotionScriptsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GroupManagement_serviceDesc = grpc.ServiceDesc{
	ServiceName: "handsmotion.GroupManagement",
	HandlerType: (*GroupManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewMotionGroup",
			Handler:    _GroupManagement_NewMotionGroup_Handler,
		},
		{
			MethodName: "ListMotionGroups",
			Handler:    _GroupManagement_ListMotionGroups_Handler,
		},
		{
			MethodName: "DeleteMotionGroup",
			Handler:    _GroupManagement_DeleteMotionGroup_Handler,
		},
		{
			MethodName: "GetMotionGroup",
			Handler:    _GroupManagement_GetMotionGroup_Handler,
		},
		{
			MethodName: "UpdateMotionGroupMeta",
			Handler:    _GroupManagement_UpdateMotionGroupMeta_Handler,
		},
		{
			MethodName: "UpdateMotionGroupScripts",
			Handler:    _GroupManagement_UpdateMotionGroupScripts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "group.proto",
}

func (m *MotionMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MotionMeta) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MotionMeta) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintGroup(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintGroup(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NewMotionGroupRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewMotionGroupRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewMotionGroupRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintGroup(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NewMotionGroupResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewMotionGroupResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewMotionGroupResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Motion != nil {
		{
			size, err := m.Motion.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGroup(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListMotionGroupsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListMotionGroupsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListMotionGroupsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *ListMotionGroupsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListMotionGroupsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListMotionGroupsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Motions) > 0 {
		for iNdEx := len(m.Motions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Motions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGroup(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DeleteMotionGroupRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteMotionGroupRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteMotionGroupRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintGroup(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteMotionGroupResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteMotionGroupResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteMotionGroupResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *GetMotionGroupRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMotionGroupRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetMotionGroupRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintGroup(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetMotionGroupResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMotionGroupResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetMotionGroupResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Scripts) > 0 {
		for iNdEx := len(m.Scripts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Scripts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGroup(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Meta != nil {
		{
			size, err := m.Meta.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGroup(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateMotionMetaRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateMotionMetaRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateMotionMetaRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Motion != nil {
		{
			size, err := m.Motion.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGroup(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *UpdateMotionMetaResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateMotionMetaResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateMotionMetaResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *UpdateMotionScriptsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateMotionScriptsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateMotionScriptsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Scripts) > 0 {
		for iNdEx := len(m.Scripts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Scripts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGroup(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintGroup(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateMotionScriptsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateMotionScriptsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateMotionScriptsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func encodeVarintGroup(dAtA []byte, offset int, v uint64) int {
	offset -= sovGroup(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MotionMeta) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovGroup(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGroup(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NewMotionGroupRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGroup(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NewMotionGroupResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Motion != nil {
		l = m.Motion.Size()
		n += 1 + l + sovGroup(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListMotionGroupsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListMotionGroupsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Motions) > 0 {
		for _, e := range m.Motions {
			l = e.Size()
			n += 1 + l + sovGroup(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteMotionGroupRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovGroup(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteMotionGroupResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetMotionGroupRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovGroup(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetMotionGroupResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovGroup(uint64(l))
	}
	if len(m.Scripts) > 0 {
		for _, e := range m.Scripts {
			l = e.Size()
			n += 1 + l + sovGroup(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateMotionMetaRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Motion != nil {
		l = m.Motion.Size()
		n += 1 + l + sovGroup(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateMotionMetaResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateMotionScriptsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovGroup(uint64(l))
	}
	if len(m.Scripts) > 0 {
		for _, e := range m.Scripts {
			l = e.Size()
			n += 1 + l + sovGroup(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateMotionScriptsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovGroup(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGroup(x uint64) (n int) {
	return sovGroup(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MotionMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MotionMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MotionMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGroup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGroup
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGroup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewMotionGroupRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewMotionGroupRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewMotionGroupRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGroup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGroup
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGroup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewMotionGroupResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewMotionGroupResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewMotionGroupResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Motion", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Motion == nil {
				m.Motion = &MotionMeta{}
			}
			if err := m.Motion.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGroup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGroup
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGroup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListMotionGroupsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListMotionGroupsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListMotionGroupsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGroup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGroup
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGroup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListMotionGroupsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListMotionGroupsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListMotionGroupsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Motions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Motions = append(m.Motions, &MotionMeta{})
			if err := m.Motions[len(m.Motions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGroup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGroup
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGroup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteMotionGroupRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteMotionGroupRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteMotionGroupRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGroup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGroup
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGroup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteMotionGroupResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteMotionGroupResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteMotionGroupResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGroup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGroup
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGroup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMotionGroupRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMotionGroupRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMotionGroupRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGroup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGroup
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGroup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMotionGroupResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMotionGroupResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMotionGroupResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &MotionMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scripts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Scripts = append(m.Scripts, &MovementScript{})
			if err := m.Scripts[len(m.Scripts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGroup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGroup
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGroup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateMotionMetaRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateMotionMetaRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateMotionMetaRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Motion", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Motion == nil {
				m.Motion = &MotionMeta{}
			}
			if err := m.Motion.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGroup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGroup
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGroup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateMotionMetaResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateMotionMetaResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateMotionMetaResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGroup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGroup
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGroup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateMotionScriptsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateMotionScriptsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateMotionScriptsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scripts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Scripts = append(m.Scripts, &MovementScript{})
			if err := m.Scripts[len(m.Scripts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGroup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGroup
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGroup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateMotionScriptsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateMotionScriptsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateMotionScriptsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGroup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGroup
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGroup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGroup(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGroup
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGroup
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthGroup
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGroup
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGroup(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthGroup
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGroup = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGroup   = fmt.Errorf("proto: integer overflow")
)
