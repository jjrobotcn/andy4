// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: group.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Handsmotion {
  public static partial class GroupManagement
  {
    static readonly string __ServiceName = "handsmotion.GroupManagement";

    static readonly grpc::Marshaller<global::Handsmotion.NewMotionGroupRequest> __Marshaller_handsmotion_NewMotionGroupRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Handsmotion.NewMotionGroupRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Handsmotion.NewMotionGroupResponse> __Marshaller_handsmotion_NewMotionGroupResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Handsmotion.NewMotionGroupResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Handsmotion.ListMotionGroupsRequest> __Marshaller_handsmotion_ListMotionGroupsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Handsmotion.ListMotionGroupsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Handsmotion.ListMotionGroupsResponse> __Marshaller_handsmotion_ListMotionGroupsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Handsmotion.ListMotionGroupsResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Handsmotion.DeleteMotionGroupRequest> __Marshaller_handsmotion_DeleteMotionGroupRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Handsmotion.DeleteMotionGroupRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Handsmotion.DeleteMotionGroupResponse> __Marshaller_handsmotion_DeleteMotionGroupResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Handsmotion.DeleteMotionGroupResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Handsmotion.GetMotionGroupRequest> __Marshaller_handsmotion_GetMotionGroupRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Handsmotion.GetMotionGroupRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Handsmotion.GetMotionGroupResponse> __Marshaller_handsmotion_GetMotionGroupResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Handsmotion.GetMotionGroupResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Handsmotion.UpdateMotionMetaRequest> __Marshaller_handsmotion_UpdateMotionMetaRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Handsmotion.UpdateMotionMetaRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Handsmotion.UpdateMotionMetaResponse> __Marshaller_handsmotion_UpdateMotionMetaResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Handsmotion.UpdateMotionMetaResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Handsmotion.UpdateMotionScriptsRequest> __Marshaller_handsmotion_UpdateMotionScriptsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Handsmotion.UpdateMotionScriptsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Handsmotion.UpdateMotionScriptsResponse> __Marshaller_handsmotion_UpdateMotionScriptsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Handsmotion.UpdateMotionScriptsResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Handsmotion.NewMotionGroupRequest, global::Handsmotion.NewMotionGroupResponse> __Method_NewMotionGroup = new grpc::Method<global::Handsmotion.NewMotionGroupRequest, global::Handsmotion.NewMotionGroupResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "NewMotionGroup",
        __Marshaller_handsmotion_NewMotionGroupRequest,
        __Marshaller_handsmotion_NewMotionGroupResponse);

    static readonly grpc::Method<global::Handsmotion.ListMotionGroupsRequest, global::Handsmotion.ListMotionGroupsResponse> __Method_ListMotionGroups = new grpc::Method<global::Handsmotion.ListMotionGroupsRequest, global::Handsmotion.ListMotionGroupsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListMotionGroups",
        __Marshaller_handsmotion_ListMotionGroupsRequest,
        __Marshaller_handsmotion_ListMotionGroupsResponse);

    static readonly grpc::Method<global::Handsmotion.DeleteMotionGroupRequest, global::Handsmotion.DeleteMotionGroupResponse> __Method_DeleteMotionGroup = new grpc::Method<global::Handsmotion.DeleteMotionGroupRequest, global::Handsmotion.DeleteMotionGroupResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteMotionGroup",
        __Marshaller_handsmotion_DeleteMotionGroupRequest,
        __Marshaller_handsmotion_DeleteMotionGroupResponse);

    static readonly grpc::Method<global::Handsmotion.GetMotionGroupRequest, global::Handsmotion.GetMotionGroupResponse> __Method_GetMotionGroup = new grpc::Method<global::Handsmotion.GetMotionGroupRequest, global::Handsmotion.GetMotionGroupResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetMotionGroup",
        __Marshaller_handsmotion_GetMotionGroupRequest,
        __Marshaller_handsmotion_GetMotionGroupResponse);

    static readonly grpc::Method<global::Handsmotion.UpdateMotionMetaRequest, global::Handsmotion.UpdateMotionMetaResponse> __Method_UpdateMotionGroupMeta = new grpc::Method<global::Handsmotion.UpdateMotionMetaRequest, global::Handsmotion.UpdateMotionMetaResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateMotionGroupMeta",
        __Marshaller_handsmotion_UpdateMotionMetaRequest,
        __Marshaller_handsmotion_UpdateMotionMetaResponse);

    static readonly grpc::Method<global::Handsmotion.UpdateMotionScriptsRequest, global::Handsmotion.UpdateMotionScriptsResponse> __Method_UpdateMotionGroupScripts = new grpc::Method<global::Handsmotion.UpdateMotionScriptsRequest, global::Handsmotion.UpdateMotionScriptsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateMotionGroupScripts",
        __Marshaller_handsmotion_UpdateMotionScriptsRequest,
        __Marshaller_handsmotion_UpdateMotionScriptsResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Handsmotion.GroupReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of GroupManagement</summary>
    [grpc::BindServiceMethod(typeof(GroupManagement), "BindService")]
    public abstract partial class GroupManagementBase
    {
      /// <summary>
      /// 新建动作分组
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Handsmotion.NewMotionGroupResponse> NewMotionGroup(global::Handsmotion.NewMotionGroupRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 获取所有动作分组列表
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Handsmotion.ListMotionGroupsResponse> ListMotionGroups(global::Handsmotion.ListMotionGroupsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 删除动作分组
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Handsmotion.DeleteMotionGroupResponse> DeleteMotionGroup(global::Handsmotion.DeleteMotionGroupRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 获取动作分组
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Handsmotion.GetMotionGroupResponse> GetMotionGroup(global::Handsmotion.GetMotionGroupRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 更新动作分组Meta
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Handsmotion.UpdateMotionMetaResponse> UpdateMotionGroupMeta(global::Handsmotion.UpdateMotionMetaRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 更新动作分组Scripts
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Handsmotion.UpdateMotionScriptsResponse> UpdateMotionGroupScripts(global::Handsmotion.UpdateMotionScriptsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for GroupManagement</summary>
    public partial class GroupManagementClient : grpc::ClientBase<GroupManagementClient>
    {
      /// <summary>Creates a new client for GroupManagement</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public GroupManagementClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for GroupManagement that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public GroupManagementClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected GroupManagementClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected GroupManagementClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// 新建动作分组
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Handsmotion.NewMotionGroupResponse NewMotionGroup(global::Handsmotion.NewMotionGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return NewMotionGroup(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 新建动作分组
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Handsmotion.NewMotionGroupResponse NewMotionGroup(global::Handsmotion.NewMotionGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_NewMotionGroup, null, options, request);
      }
      /// <summary>
      /// 新建动作分组
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Handsmotion.NewMotionGroupResponse> NewMotionGroupAsync(global::Handsmotion.NewMotionGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return NewMotionGroupAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 新建动作分组
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Handsmotion.NewMotionGroupResponse> NewMotionGroupAsync(global::Handsmotion.NewMotionGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_NewMotionGroup, null, options, request);
      }
      /// <summary>
      /// 获取所有动作分组列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Handsmotion.ListMotionGroupsResponse ListMotionGroups(global::Handsmotion.ListMotionGroupsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListMotionGroups(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 获取所有动作分组列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Handsmotion.ListMotionGroupsResponse ListMotionGroups(global::Handsmotion.ListMotionGroupsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListMotionGroups, null, options, request);
      }
      /// <summary>
      /// 获取所有动作分组列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Handsmotion.ListMotionGroupsResponse> ListMotionGroupsAsync(global::Handsmotion.ListMotionGroupsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListMotionGroupsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 获取所有动作分组列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Handsmotion.ListMotionGroupsResponse> ListMotionGroupsAsync(global::Handsmotion.ListMotionGroupsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListMotionGroups, null, options, request);
      }
      /// <summary>
      /// 删除动作分组
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Handsmotion.DeleteMotionGroupResponse DeleteMotionGroup(global::Handsmotion.DeleteMotionGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteMotionGroup(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 删除动作分组
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Handsmotion.DeleteMotionGroupResponse DeleteMotionGroup(global::Handsmotion.DeleteMotionGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteMotionGroup, null, options, request);
      }
      /// <summary>
      /// 删除动作分组
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Handsmotion.DeleteMotionGroupResponse> DeleteMotionGroupAsync(global::Handsmotion.DeleteMotionGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteMotionGroupAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 删除动作分组
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Handsmotion.DeleteMotionGroupResponse> DeleteMotionGroupAsync(global::Handsmotion.DeleteMotionGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteMotionGroup, null, options, request);
      }
      /// <summary>
      /// 获取动作分组
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Handsmotion.GetMotionGroupResponse GetMotionGroup(global::Handsmotion.GetMotionGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMotionGroup(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 获取动作分组
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Handsmotion.GetMotionGroupResponse GetMotionGroup(global::Handsmotion.GetMotionGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetMotionGroup, null, options, request);
      }
      /// <summary>
      /// 获取动作分组
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Handsmotion.GetMotionGroupResponse> GetMotionGroupAsync(global::Handsmotion.GetMotionGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMotionGroupAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 获取动作分组
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Handsmotion.GetMotionGroupResponse> GetMotionGroupAsync(global::Handsmotion.GetMotionGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetMotionGroup, null, options, request);
      }
      /// <summary>
      /// 更新动作分组Meta
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Handsmotion.UpdateMotionMetaResponse UpdateMotionGroupMeta(global::Handsmotion.UpdateMotionMetaRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateMotionGroupMeta(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 更新动作分组Meta
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Handsmotion.UpdateMotionMetaResponse UpdateMotionGroupMeta(global::Handsmotion.UpdateMotionMetaRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateMotionGroupMeta, null, options, request);
      }
      /// <summary>
      /// 更新动作分组Meta
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Handsmotion.UpdateMotionMetaResponse> UpdateMotionGroupMetaAsync(global::Handsmotion.UpdateMotionMetaRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateMotionGroupMetaAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 更新动作分组Meta
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Handsmotion.UpdateMotionMetaResponse> UpdateMotionGroupMetaAsync(global::Handsmotion.UpdateMotionMetaRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateMotionGroupMeta, null, options, request);
      }
      /// <summary>
      /// 更新动作分组Scripts
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Handsmotion.UpdateMotionScriptsResponse UpdateMotionGroupScripts(global::Handsmotion.UpdateMotionScriptsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateMotionGroupScripts(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 更新动作分组Scripts
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Handsmotion.UpdateMotionScriptsResponse UpdateMotionGroupScripts(global::Handsmotion.UpdateMotionScriptsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateMotionGroupScripts, null, options, request);
      }
      /// <summary>
      /// 更新动作分组Scripts
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Handsmotion.UpdateMotionScriptsResponse> UpdateMotionGroupScriptsAsync(global::Handsmotion.UpdateMotionScriptsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateMotionGroupScriptsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 更新动作分组Scripts
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Handsmotion.UpdateMotionScriptsResponse> UpdateMotionGroupScriptsAsync(global::Handsmotion.UpdateMotionScriptsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateMotionGroupScripts, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override GroupManagementClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new GroupManagementClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(GroupManagementBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_NewMotionGroup, serviceImpl.NewMotionGroup)
          .AddMethod(__Method_ListMotionGroups, serviceImpl.ListMotionGroups)
          .AddMethod(__Method_DeleteMotionGroup, serviceImpl.DeleteMotionGroup)
          .AddMethod(__Method_GetMotionGroup, serviceImpl.GetMotionGroup)
          .AddMethod(__Method_UpdateMotionGroupMeta, serviceImpl.UpdateMotionGroupMeta)
          .AddMethod(__Method_UpdateMotionGroupScripts, serviceImpl.UpdateMotionGroupScripts).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, GroupManagementBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_NewMotionGroup, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Handsmotion.NewMotionGroupRequest, global::Handsmotion.NewMotionGroupResponse>(serviceImpl.NewMotionGroup));
      serviceBinder.AddMethod(__Method_ListMotionGroups, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Handsmotion.ListMotionGroupsRequest, global::Handsmotion.ListMotionGroupsResponse>(serviceImpl.ListMotionGroups));
      serviceBinder.AddMethod(__Method_DeleteMotionGroup, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Handsmotion.DeleteMotionGroupRequest, global::Handsmotion.DeleteMotionGroupResponse>(serviceImpl.DeleteMotionGroup));
      serviceBinder.AddMethod(__Method_GetMotionGroup, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Handsmotion.GetMotionGroupRequest, global::Handsmotion.GetMotionGroupResponse>(serviceImpl.GetMotionGroup));
      serviceBinder.AddMethod(__Method_UpdateMotionGroupMeta, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Handsmotion.UpdateMotionMetaRequest, global::Handsmotion.UpdateMotionMetaResponse>(serviceImpl.UpdateMotionGroupMeta));
      serviceBinder.AddMethod(__Method_UpdateMotionGroupScripts, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Handsmotion.UpdateMotionScriptsRequest, global::Handsmotion.UpdateMotionScriptsResponse>(serviceImpl.UpdateMotionGroupScripts));
    }

  }
}
#endregion
