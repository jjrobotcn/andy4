// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: capability.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Handsmotion {
  public static partial class Capability
  {
    static readonly string __ServiceName = "handsmotion.Capability";

    static readonly grpc::Marshaller<global::Handsmotion.FingersAdjustmentRequest> __Marshaller_handsmotion_FingersAdjustmentRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Handsmotion.FingersAdjustmentRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Handsmotion.FingersAdjustmentResponse> __Marshaller_handsmotion_FingersAdjustmentResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Handsmotion.FingersAdjustmentResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Handsmotion.ArmAdjustmentRequest> __Marshaller_handsmotion_ArmAdjustmentRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Handsmotion.ArmAdjustmentRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Handsmotion.ArmAdjustmentResponse> __Marshaller_handsmotion_ArmAdjustmentResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Handsmotion.ArmAdjustmentResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Handsmotion.MarkAsOriginalPositionRequest> __Marshaller_handsmotion_MarkAsOriginalPositionRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Handsmotion.MarkAsOriginalPositionRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Handsmotion.MarkAsOriginalPositionResponse> __Marshaller_handsmotion_MarkAsOriginalPositionResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Handsmotion.MarkAsOriginalPositionResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Handsmotion.GetAbsolutePositionRequest> __Marshaller_handsmotion_GetAbsolutePositionRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Handsmotion.GetAbsolutePositionRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Handsmotion.GetAbsolutePositionResponse> __Marshaller_handsmotion_GetAbsolutePositionResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Handsmotion.GetAbsolutePositionResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Handsmotion.AbsoluteMoveRequest> __Marshaller_handsmotion_AbsoluteMoveRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Handsmotion.AbsoluteMoveRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Handsmotion.AbsoluteMoveResponse> __Marshaller_handsmotion_AbsoluteMoveResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Handsmotion.AbsoluteMoveResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Handsmotion.FingersAdjustmentRequest, global::Handsmotion.FingersAdjustmentResponse> __Method_FingersAdjustment = new grpc::Method<global::Handsmotion.FingersAdjustmentRequest, global::Handsmotion.FingersAdjustmentResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "FingersAdjustment",
        __Marshaller_handsmotion_FingersAdjustmentRequest,
        __Marshaller_handsmotion_FingersAdjustmentResponse);

    static readonly grpc::Method<global::Handsmotion.ArmAdjustmentRequest, global::Handsmotion.ArmAdjustmentResponse> __Method_ArmAdjustment = new grpc::Method<global::Handsmotion.ArmAdjustmentRequest, global::Handsmotion.ArmAdjustmentResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ArmAdjustment",
        __Marshaller_handsmotion_ArmAdjustmentRequest,
        __Marshaller_handsmotion_ArmAdjustmentResponse);

    static readonly grpc::Method<global::Handsmotion.MarkAsOriginalPositionRequest, global::Handsmotion.MarkAsOriginalPositionResponse> __Method_MarkAsOriginalPosition = new grpc::Method<global::Handsmotion.MarkAsOriginalPositionRequest, global::Handsmotion.MarkAsOriginalPositionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "MarkAsOriginalPosition",
        __Marshaller_handsmotion_MarkAsOriginalPositionRequest,
        __Marshaller_handsmotion_MarkAsOriginalPositionResponse);

    static readonly grpc::Method<global::Handsmotion.GetAbsolutePositionRequest, global::Handsmotion.GetAbsolutePositionResponse> __Method_GetAbsolutePosition = new grpc::Method<global::Handsmotion.GetAbsolutePositionRequest, global::Handsmotion.GetAbsolutePositionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAbsolutePosition",
        __Marshaller_handsmotion_GetAbsolutePositionRequest,
        __Marshaller_handsmotion_GetAbsolutePositionResponse);

    static readonly grpc::Method<global::Handsmotion.AbsoluteMoveRequest, global::Handsmotion.AbsoluteMoveResponse> __Method_AbsoluteMove = new grpc::Method<global::Handsmotion.AbsoluteMoveRequest, global::Handsmotion.AbsoluteMoveResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AbsoluteMove",
        __Marshaller_handsmotion_AbsoluteMoveRequest,
        __Marshaller_handsmotion_AbsoluteMoveResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Handsmotion.CapabilityReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Capability</summary>
    [grpc::BindServiceMethod(typeof(Capability), "BindService")]
    public abstract partial class CapabilityBase
    {
      /// <summary>
      /// 手指调整方法
      /// 调整手指动作的开合与重置
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Handsmotion.FingersAdjustmentResponse> FingersAdjustment(global::Handsmotion.FingersAdjustmentRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 手臂调整方法
      /// 调整手臂位置重置、使能与失能。
      /// 失能后可通过外力移动至相应位置后通过使能恢复锁定当前位置
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Handsmotion.ArmAdjustmentResponse> ArmAdjustment(global::Handsmotion.ArmAdjustmentRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 标记当前位置为初始位置
      /// 所有位置数据将基于此点进行计算
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Handsmotion.MarkAsOriginalPositionResponse> MarkAsOriginalPosition(global::Handsmotion.MarkAsOriginalPositionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 获取当前绝对位置
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Handsmotion.GetAbsolutePositionResponse> GetAbsolutePosition(global::Handsmotion.GetAbsolutePositionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 绝对位置移动
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Handsmotion.AbsoluteMoveResponse> AbsoluteMove(global::Handsmotion.AbsoluteMoveRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Capability</summary>
    public partial class CapabilityClient : grpc::ClientBase<CapabilityClient>
    {
      /// <summary>Creates a new client for Capability</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public CapabilityClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Capability that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public CapabilityClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected CapabilityClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected CapabilityClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// 手指调整方法
      /// 调整手指动作的开合与重置
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Handsmotion.FingersAdjustmentResponse FingersAdjustment(global::Handsmotion.FingersAdjustmentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FingersAdjustment(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 手指调整方法
      /// 调整手指动作的开合与重置
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Handsmotion.FingersAdjustmentResponse FingersAdjustment(global::Handsmotion.FingersAdjustmentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_FingersAdjustment, null, options, request);
      }
      /// <summary>
      /// 手指调整方法
      /// 调整手指动作的开合与重置
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Handsmotion.FingersAdjustmentResponse> FingersAdjustmentAsync(global::Handsmotion.FingersAdjustmentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FingersAdjustmentAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 手指调整方法
      /// 调整手指动作的开合与重置
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Handsmotion.FingersAdjustmentResponse> FingersAdjustmentAsync(global::Handsmotion.FingersAdjustmentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_FingersAdjustment, null, options, request);
      }
      /// <summary>
      /// 手臂调整方法
      /// 调整手臂位置重置、使能与失能。
      /// 失能后可通过外力移动至相应位置后通过使能恢复锁定当前位置
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Handsmotion.ArmAdjustmentResponse ArmAdjustment(global::Handsmotion.ArmAdjustmentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ArmAdjustment(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 手臂调整方法
      /// 调整手臂位置重置、使能与失能。
      /// 失能后可通过外力移动至相应位置后通过使能恢复锁定当前位置
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Handsmotion.ArmAdjustmentResponse ArmAdjustment(global::Handsmotion.ArmAdjustmentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ArmAdjustment, null, options, request);
      }
      /// <summary>
      /// 手臂调整方法
      /// 调整手臂位置重置、使能与失能。
      /// 失能后可通过外力移动至相应位置后通过使能恢复锁定当前位置
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Handsmotion.ArmAdjustmentResponse> ArmAdjustmentAsync(global::Handsmotion.ArmAdjustmentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ArmAdjustmentAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 手臂调整方法
      /// 调整手臂位置重置、使能与失能。
      /// 失能后可通过外力移动至相应位置后通过使能恢复锁定当前位置
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Handsmotion.ArmAdjustmentResponse> ArmAdjustmentAsync(global::Handsmotion.ArmAdjustmentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ArmAdjustment, null, options, request);
      }
      /// <summary>
      /// 标记当前位置为初始位置
      /// 所有位置数据将基于此点进行计算
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Handsmotion.MarkAsOriginalPositionResponse MarkAsOriginalPosition(global::Handsmotion.MarkAsOriginalPositionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MarkAsOriginalPosition(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 标记当前位置为初始位置
      /// 所有位置数据将基于此点进行计算
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Handsmotion.MarkAsOriginalPositionResponse MarkAsOriginalPosition(global::Handsmotion.MarkAsOriginalPositionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_MarkAsOriginalPosition, null, options, request);
      }
      /// <summary>
      /// 标记当前位置为初始位置
      /// 所有位置数据将基于此点进行计算
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Handsmotion.MarkAsOriginalPositionResponse> MarkAsOriginalPositionAsync(global::Handsmotion.MarkAsOriginalPositionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MarkAsOriginalPositionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 标记当前位置为初始位置
      /// 所有位置数据将基于此点进行计算
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Handsmotion.MarkAsOriginalPositionResponse> MarkAsOriginalPositionAsync(global::Handsmotion.MarkAsOriginalPositionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_MarkAsOriginalPosition, null, options, request);
      }
      /// <summary>
      /// 获取当前绝对位置
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Handsmotion.GetAbsolutePositionResponse GetAbsolutePosition(global::Handsmotion.GetAbsolutePositionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAbsolutePosition(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 获取当前绝对位置
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Handsmotion.GetAbsolutePositionResponse GetAbsolutePosition(global::Handsmotion.GetAbsolutePositionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAbsolutePosition, null, options, request);
      }
      /// <summary>
      /// 获取当前绝对位置
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Handsmotion.GetAbsolutePositionResponse> GetAbsolutePositionAsync(global::Handsmotion.GetAbsolutePositionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAbsolutePositionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 获取当前绝对位置
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Handsmotion.GetAbsolutePositionResponse> GetAbsolutePositionAsync(global::Handsmotion.GetAbsolutePositionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAbsolutePosition, null, options, request);
      }
      /// <summary>
      /// 绝对位置移动
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Handsmotion.AbsoluteMoveResponse AbsoluteMove(global::Handsmotion.AbsoluteMoveRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AbsoluteMove(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 绝对位置移动
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Handsmotion.AbsoluteMoveResponse AbsoluteMove(global::Handsmotion.AbsoluteMoveRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AbsoluteMove, null, options, request);
      }
      /// <summary>
      /// 绝对位置移动
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Handsmotion.AbsoluteMoveResponse> AbsoluteMoveAsync(global::Handsmotion.AbsoluteMoveRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AbsoluteMoveAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 绝对位置移动
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Handsmotion.AbsoluteMoveResponse> AbsoluteMoveAsync(global::Handsmotion.AbsoluteMoveRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AbsoluteMove, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override CapabilityClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new CapabilityClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(CapabilityBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_FingersAdjustment, serviceImpl.FingersAdjustment)
          .AddMethod(__Method_ArmAdjustment, serviceImpl.ArmAdjustment)
          .AddMethod(__Method_MarkAsOriginalPosition, serviceImpl.MarkAsOriginalPosition)
          .AddMethod(__Method_GetAbsolutePosition, serviceImpl.GetAbsolutePosition)
          .AddMethod(__Method_AbsoluteMove, serviceImpl.AbsoluteMove).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, CapabilityBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_FingersAdjustment, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Handsmotion.FingersAdjustmentRequest, global::Handsmotion.FingersAdjustmentResponse>(serviceImpl.FingersAdjustment));
      serviceBinder.AddMethod(__Method_ArmAdjustment, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Handsmotion.ArmAdjustmentRequest, global::Handsmotion.ArmAdjustmentResponse>(serviceImpl.ArmAdjustment));
      serviceBinder.AddMethod(__Method_MarkAsOriginalPosition, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Handsmotion.MarkAsOriginalPositionRequest, global::Handsmotion.MarkAsOriginalPositionResponse>(serviceImpl.MarkAsOriginalPosition));
      serviceBinder.AddMethod(__Method_GetAbsolutePosition, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Handsmotion.GetAbsolutePositionRequest, global::Handsmotion.GetAbsolutePositionResponse>(serviceImpl.GetAbsolutePosition));
      serviceBinder.AddMethod(__Method_AbsoluteMove, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Handsmotion.AbsoluteMoveRequest, global::Handsmotion.AbsoluteMoveResponse>(serviceImpl.AbsoluteMove));
    }

  }
}
#endregion
