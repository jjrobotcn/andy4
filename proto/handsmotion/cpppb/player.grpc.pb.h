// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: player.proto
#ifndef GRPC_player_2eproto__INCLUDED
#define GRPC_player_2eproto__INCLUDED

#include "player.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc_impl {
class Channel;
class CompletionQueue;
class ServerCompletionQueue;
}  // namespace grpc_impl

namespace grpc {
namespace experimental {
template <typename RequestT, typename ResponseT>
class MessageAllocator;
}  // namespace experimental
}  // namespace grpc_impl

namespace grpc {
class ServerContext;
}  // namespace grpc

namespace handsmotion {

class Player final {
 public:
  static constexpr char const* service_full_name() {
    return "handsmotion.Player";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Play为播放动作组对象方法
    virtual ::grpc::Status Play(::grpc::ClientContext* context, const ::handsmotion::PlayRequest& request, ::handsmotion::PlayResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::handsmotion::PlayResponse>> AsyncPlay(::grpc::ClientContext* context, const ::handsmotion::PlayRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::handsmotion::PlayResponse>>(AsyncPlayRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::handsmotion::PlayResponse>> PrepareAsyncPlay(::grpc::ClientContext* context, const ::handsmotion::PlayRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::handsmotion::PlayResponse>>(PrepareAsyncPlayRaw(context, request, cq));
    }
    // Stop为停止动作组对象方法
    virtual ::grpc::Status Stop(::grpc::ClientContext* context, const ::handsmotion::StopRequest& request, ::handsmotion::StopResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::handsmotion::StopResponse>> AsyncStop(::grpc::ClientContext* context, const ::handsmotion::StopRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::handsmotion::StopResponse>>(AsyncStopRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::handsmotion::StopResponse>> PrepareAsyncStop(::grpc::ClientContext* context, const ::handsmotion::StopRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::handsmotion::StopResponse>>(PrepareAsyncStopRaw(context, request, cq));
    }
    // Reset为重置初始状态方法
    virtual ::grpc::Status Reset(::grpc::ClientContext* context, const ::handsmotion::ResetRequest& request, ::handsmotion::ResetResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::handsmotion::ResetResponse>> AsyncReset(::grpc::ClientContext* context, const ::handsmotion::ResetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::handsmotion::ResetResponse>>(AsyncResetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::handsmotion::ResetResponse>> PrepareAsyncReset(::grpc::ClientContext* context, const ::handsmotion::ResetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::handsmotion::ResetResponse>>(PrepareAsyncResetRaw(context, request, cq));
    }
    // Playlist为获取动作组对象列表方法
    virtual ::grpc::Status Playlist(::grpc::ClientContext* context, const ::handsmotion::PlaylistRequest& request, ::handsmotion::PlaylistResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::handsmotion::PlaylistResponse>> AsyncPlaylist(::grpc::ClientContext* context, const ::handsmotion::PlaylistRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::handsmotion::PlaylistResponse>>(AsyncPlaylistRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::handsmotion::PlaylistResponse>> PrepareAsyncPlaylist(::grpc::ClientContext* context, const ::handsmotion::PlaylistRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::handsmotion::PlaylistResponse>>(PrepareAsyncPlaylistRaw(context, request, cq));
    }
    // State为查询当前player状态方法
    virtual ::grpc::Status State(::grpc::ClientContext* context, const ::handsmotion::StateRequest& request, ::handsmotion::StateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::handsmotion::StateResponse>> AsyncState(::grpc::ClientContext* context, const ::handsmotion::StateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::handsmotion::StateResponse>>(AsyncStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::handsmotion::StateResponse>> PrepareAsyncState(::grpc::ClientContext* context, const ::handsmotion::StateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::handsmotion::StateResponse>>(PrepareAsyncStateRaw(context, request, cq));
    }
    // OnStateChange为监听State改变方法，当State状态改变时将流式返回State状态数据
    std::unique_ptr< ::grpc::ClientReaderInterface< ::handsmotion::OnStateChangeResponse>> OnStateChange(::grpc::ClientContext* context, const ::handsmotion::OnStateChangeRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::handsmotion::OnStateChangeResponse>>(OnStateChangeRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::handsmotion::OnStateChangeResponse>> AsyncOnStateChange(::grpc::ClientContext* context, const ::handsmotion::OnStateChangeRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::handsmotion::OnStateChangeResponse>>(AsyncOnStateChangeRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::handsmotion::OnStateChangeResponse>> PrepareAsyncOnStateChange(::grpc::ClientContext* context, const ::handsmotion::OnStateChangeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::handsmotion::OnStateChangeResponse>>(PrepareAsyncOnStateChangeRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Play为播放动作组对象方法
      virtual void Play(::grpc::ClientContext* context, const ::handsmotion::PlayRequest* request, ::handsmotion::PlayResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Play(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::handsmotion::PlayResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Play(::grpc::ClientContext* context, const ::handsmotion::PlayRequest* request, ::handsmotion::PlayResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Play(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::handsmotion::PlayResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // Stop为停止动作组对象方法
      virtual void Stop(::grpc::ClientContext* context, const ::handsmotion::StopRequest* request, ::handsmotion::StopResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Stop(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::handsmotion::StopResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Stop(::grpc::ClientContext* context, const ::handsmotion::StopRequest* request, ::handsmotion::StopResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Stop(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::handsmotion::StopResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // Reset为重置初始状态方法
      virtual void Reset(::grpc::ClientContext* context, const ::handsmotion::ResetRequest* request, ::handsmotion::ResetResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Reset(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::handsmotion::ResetResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Reset(::grpc::ClientContext* context, const ::handsmotion::ResetRequest* request, ::handsmotion::ResetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Reset(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::handsmotion::ResetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // Playlist为获取动作组对象列表方法
      virtual void Playlist(::grpc::ClientContext* context, const ::handsmotion::PlaylistRequest* request, ::handsmotion::PlaylistResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Playlist(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::handsmotion::PlaylistResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Playlist(::grpc::ClientContext* context, const ::handsmotion::PlaylistRequest* request, ::handsmotion::PlaylistResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Playlist(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::handsmotion::PlaylistResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // State为查询当前player状态方法
      virtual void State(::grpc::ClientContext* context, const ::handsmotion::StateRequest* request, ::handsmotion::StateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void State(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::handsmotion::StateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void State(::grpc::ClientContext* context, const ::handsmotion::StateRequest* request, ::handsmotion::StateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void State(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::handsmotion::StateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // OnStateChange为监听State改变方法，当State状态改变时将流式返回State状态数据
      virtual void OnStateChange(::grpc::ClientContext* context, ::handsmotion::OnStateChangeRequest* request, ::grpc::experimental::ClientReadReactor< ::handsmotion::OnStateChangeResponse>* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::handsmotion::PlayResponse>* AsyncPlayRaw(::grpc::ClientContext* context, const ::handsmotion::PlayRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::handsmotion::PlayResponse>* PrepareAsyncPlayRaw(::grpc::ClientContext* context, const ::handsmotion::PlayRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::handsmotion::StopResponse>* AsyncStopRaw(::grpc::ClientContext* context, const ::handsmotion::StopRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::handsmotion::StopResponse>* PrepareAsyncStopRaw(::grpc::ClientContext* context, const ::handsmotion::StopRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::handsmotion::ResetResponse>* AsyncResetRaw(::grpc::ClientContext* context, const ::handsmotion::ResetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::handsmotion::ResetResponse>* PrepareAsyncResetRaw(::grpc::ClientContext* context, const ::handsmotion::ResetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::handsmotion::PlaylistResponse>* AsyncPlaylistRaw(::grpc::ClientContext* context, const ::handsmotion::PlaylistRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::handsmotion::PlaylistResponse>* PrepareAsyncPlaylistRaw(::grpc::ClientContext* context, const ::handsmotion::PlaylistRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::handsmotion::StateResponse>* AsyncStateRaw(::grpc::ClientContext* context, const ::handsmotion::StateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::handsmotion::StateResponse>* PrepareAsyncStateRaw(::grpc::ClientContext* context, const ::handsmotion::StateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::handsmotion::OnStateChangeResponse>* OnStateChangeRaw(::grpc::ClientContext* context, const ::handsmotion::OnStateChangeRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::handsmotion::OnStateChangeResponse>* AsyncOnStateChangeRaw(::grpc::ClientContext* context, const ::handsmotion::OnStateChangeRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::handsmotion::OnStateChangeResponse>* PrepareAsyncOnStateChangeRaw(::grpc::ClientContext* context, const ::handsmotion::OnStateChangeRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Play(::grpc::ClientContext* context, const ::handsmotion::PlayRequest& request, ::handsmotion::PlayResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::handsmotion::PlayResponse>> AsyncPlay(::grpc::ClientContext* context, const ::handsmotion::PlayRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::handsmotion::PlayResponse>>(AsyncPlayRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::handsmotion::PlayResponse>> PrepareAsyncPlay(::grpc::ClientContext* context, const ::handsmotion::PlayRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::handsmotion::PlayResponse>>(PrepareAsyncPlayRaw(context, request, cq));
    }
    ::grpc::Status Stop(::grpc::ClientContext* context, const ::handsmotion::StopRequest& request, ::handsmotion::StopResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::handsmotion::StopResponse>> AsyncStop(::grpc::ClientContext* context, const ::handsmotion::StopRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::handsmotion::StopResponse>>(AsyncStopRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::handsmotion::StopResponse>> PrepareAsyncStop(::grpc::ClientContext* context, const ::handsmotion::StopRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::handsmotion::StopResponse>>(PrepareAsyncStopRaw(context, request, cq));
    }
    ::grpc::Status Reset(::grpc::ClientContext* context, const ::handsmotion::ResetRequest& request, ::handsmotion::ResetResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::handsmotion::ResetResponse>> AsyncReset(::grpc::ClientContext* context, const ::handsmotion::ResetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::handsmotion::ResetResponse>>(AsyncResetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::handsmotion::ResetResponse>> PrepareAsyncReset(::grpc::ClientContext* context, const ::handsmotion::ResetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::handsmotion::ResetResponse>>(PrepareAsyncResetRaw(context, request, cq));
    }
    ::grpc::Status Playlist(::grpc::ClientContext* context, const ::handsmotion::PlaylistRequest& request, ::handsmotion::PlaylistResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::handsmotion::PlaylistResponse>> AsyncPlaylist(::grpc::ClientContext* context, const ::handsmotion::PlaylistRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::handsmotion::PlaylistResponse>>(AsyncPlaylistRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::handsmotion::PlaylistResponse>> PrepareAsyncPlaylist(::grpc::ClientContext* context, const ::handsmotion::PlaylistRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::handsmotion::PlaylistResponse>>(PrepareAsyncPlaylistRaw(context, request, cq));
    }
    ::grpc::Status State(::grpc::ClientContext* context, const ::handsmotion::StateRequest& request, ::handsmotion::StateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::handsmotion::StateResponse>> AsyncState(::grpc::ClientContext* context, const ::handsmotion::StateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::handsmotion::StateResponse>>(AsyncStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::handsmotion::StateResponse>> PrepareAsyncState(::grpc::ClientContext* context, const ::handsmotion::StateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::handsmotion::StateResponse>>(PrepareAsyncStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::handsmotion::OnStateChangeResponse>> OnStateChange(::grpc::ClientContext* context, const ::handsmotion::OnStateChangeRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::handsmotion::OnStateChangeResponse>>(OnStateChangeRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::handsmotion::OnStateChangeResponse>> AsyncOnStateChange(::grpc::ClientContext* context, const ::handsmotion::OnStateChangeRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::handsmotion::OnStateChangeResponse>>(AsyncOnStateChangeRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::handsmotion::OnStateChangeResponse>> PrepareAsyncOnStateChange(::grpc::ClientContext* context, const ::handsmotion::OnStateChangeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::handsmotion::OnStateChangeResponse>>(PrepareAsyncOnStateChangeRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void Play(::grpc::ClientContext* context, const ::handsmotion::PlayRequest* request, ::handsmotion::PlayResponse* response, std::function<void(::grpc::Status)>) override;
      void Play(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::handsmotion::PlayResponse* response, std::function<void(::grpc::Status)>) override;
      void Play(::grpc::ClientContext* context, const ::handsmotion::PlayRequest* request, ::handsmotion::PlayResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Play(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::handsmotion::PlayResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Stop(::grpc::ClientContext* context, const ::handsmotion::StopRequest* request, ::handsmotion::StopResponse* response, std::function<void(::grpc::Status)>) override;
      void Stop(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::handsmotion::StopResponse* response, std::function<void(::grpc::Status)>) override;
      void Stop(::grpc::ClientContext* context, const ::handsmotion::StopRequest* request, ::handsmotion::StopResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Stop(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::handsmotion::StopResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Reset(::grpc::ClientContext* context, const ::handsmotion::ResetRequest* request, ::handsmotion::ResetResponse* response, std::function<void(::grpc::Status)>) override;
      void Reset(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::handsmotion::ResetResponse* response, std::function<void(::grpc::Status)>) override;
      void Reset(::grpc::ClientContext* context, const ::handsmotion::ResetRequest* request, ::handsmotion::ResetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Reset(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::handsmotion::ResetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Playlist(::grpc::ClientContext* context, const ::handsmotion::PlaylistRequest* request, ::handsmotion::PlaylistResponse* response, std::function<void(::grpc::Status)>) override;
      void Playlist(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::handsmotion::PlaylistResponse* response, std::function<void(::grpc::Status)>) override;
      void Playlist(::grpc::ClientContext* context, const ::handsmotion::PlaylistRequest* request, ::handsmotion::PlaylistResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Playlist(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::handsmotion::PlaylistResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void State(::grpc::ClientContext* context, const ::handsmotion::StateRequest* request, ::handsmotion::StateResponse* response, std::function<void(::grpc::Status)>) override;
      void State(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::handsmotion::StateResponse* response, std::function<void(::grpc::Status)>) override;
      void State(::grpc::ClientContext* context, const ::handsmotion::StateRequest* request, ::handsmotion::StateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void State(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::handsmotion::StateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void OnStateChange(::grpc::ClientContext* context, ::handsmotion::OnStateChangeRequest* request, ::grpc::experimental::ClientReadReactor< ::handsmotion::OnStateChangeResponse>* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::handsmotion::PlayResponse>* AsyncPlayRaw(::grpc::ClientContext* context, const ::handsmotion::PlayRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::handsmotion::PlayResponse>* PrepareAsyncPlayRaw(::grpc::ClientContext* context, const ::handsmotion::PlayRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::handsmotion::StopResponse>* AsyncStopRaw(::grpc::ClientContext* context, const ::handsmotion::StopRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::handsmotion::StopResponse>* PrepareAsyncStopRaw(::grpc::ClientContext* context, const ::handsmotion::StopRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::handsmotion::ResetResponse>* AsyncResetRaw(::grpc::ClientContext* context, const ::handsmotion::ResetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::handsmotion::ResetResponse>* PrepareAsyncResetRaw(::grpc::ClientContext* context, const ::handsmotion::ResetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::handsmotion::PlaylistResponse>* AsyncPlaylistRaw(::grpc::ClientContext* context, const ::handsmotion::PlaylistRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::handsmotion::PlaylistResponse>* PrepareAsyncPlaylistRaw(::grpc::ClientContext* context, const ::handsmotion::PlaylistRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::handsmotion::StateResponse>* AsyncStateRaw(::grpc::ClientContext* context, const ::handsmotion::StateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::handsmotion::StateResponse>* PrepareAsyncStateRaw(::grpc::ClientContext* context, const ::handsmotion::StateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::handsmotion::OnStateChangeResponse>* OnStateChangeRaw(::grpc::ClientContext* context, const ::handsmotion::OnStateChangeRequest& request) override;
    ::grpc::ClientAsyncReader< ::handsmotion::OnStateChangeResponse>* AsyncOnStateChangeRaw(::grpc::ClientContext* context, const ::handsmotion::OnStateChangeRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::handsmotion::OnStateChangeResponse>* PrepareAsyncOnStateChangeRaw(::grpc::ClientContext* context, const ::handsmotion::OnStateChangeRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Play_;
    const ::grpc::internal::RpcMethod rpcmethod_Stop_;
    const ::grpc::internal::RpcMethod rpcmethod_Reset_;
    const ::grpc::internal::RpcMethod rpcmethod_Playlist_;
    const ::grpc::internal::RpcMethod rpcmethod_State_;
    const ::grpc::internal::RpcMethod rpcmethod_OnStateChange_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Play为播放动作组对象方法
    virtual ::grpc::Status Play(::grpc::ServerContext* context, const ::handsmotion::PlayRequest* request, ::handsmotion::PlayResponse* response);
    // Stop为停止动作组对象方法
    virtual ::grpc::Status Stop(::grpc::ServerContext* context, const ::handsmotion::StopRequest* request, ::handsmotion::StopResponse* response);
    // Reset为重置初始状态方法
    virtual ::grpc::Status Reset(::grpc::ServerContext* context, const ::handsmotion::ResetRequest* request, ::handsmotion::ResetResponse* response);
    // Playlist为获取动作组对象列表方法
    virtual ::grpc::Status Playlist(::grpc::ServerContext* context, const ::handsmotion::PlaylistRequest* request, ::handsmotion::PlaylistResponse* response);
    // State为查询当前player状态方法
    virtual ::grpc::Status State(::grpc::ServerContext* context, const ::handsmotion::StateRequest* request, ::handsmotion::StateResponse* response);
    // OnStateChange为监听State改变方法，当State状态改变时将流式返回State状态数据
    virtual ::grpc::Status OnStateChange(::grpc::ServerContext* context, const ::handsmotion::OnStateChangeRequest* request, ::grpc::ServerWriter< ::handsmotion::OnStateChangeResponse>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_Play : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Play() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Play() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Play(::grpc::ServerContext* context, const ::handsmotion::PlayRequest* request, ::handsmotion::PlayResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPlay(::grpc::ServerContext* context, ::handsmotion::PlayRequest* request, ::grpc::ServerAsyncResponseWriter< ::handsmotion::PlayResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Stop() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stop(::grpc::ServerContext* context, const ::handsmotion::StopRequest* request, ::handsmotion::StopResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStop(::grpc::ServerContext* context, ::handsmotion::StopRequest* request, ::grpc::ServerAsyncResponseWriter< ::handsmotion::StopResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Reset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Reset() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Reset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Reset(::grpc::ServerContext* context, const ::handsmotion::ResetRequest* request, ::handsmotion::ResetResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReset(::grpc::ServerContext* context, ::handsmotion::ResetRequest* request, ::grpc::ServerAsyncResponseWriter< ::handsmotion::ResetResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Playlist : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Playlist() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_Playlist() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Playlist(::grpc::ServerContext* context, const ::handsmotion::PlaylistRequest* request, ::handsmotion::PlaylistResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPlaylist(::grpc::ServerContext* context, ::handsmotion::PlaylistRequest* request, ::grpc::ServerAsyncResponseWriter< ::handsmotion::PlaylistResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_State : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_State() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_State() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status State(::grpc::ServerContext* context, const ::handsmotion::StateRequest* request, ::handsmotion::StateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestState(::grpc::ServerContext* context, ::handsmotion::StateRequest* request, ::grpc::ServerAsyncResponseWriter< ::handsmotion::StateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_OnStateChange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_OnStateChange() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_OnStateChange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnStateChange(::grpc::ServerContext* context, const ::handsmotion::OnStateChangeRequest* request, ::grpc::ServerWriter< ::handsmotion::OnStateChangeResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOnStateChange(::grpc::ServerContext* context, ::handsmotion::OnStateChangeRequest* request, ::grpc::ServerAsyncWriter< ::handsmotion::OnStateChangeResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(5, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Play<WithAsyncMethod_Stop<WithAsyncMethod_Reset<WithAsyncMethod_Playlist<WithAsyncMethod_State<WithAsyncMethod_OnStateChange<Service > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Play : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Play() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::handsmotion::PlayRequest, ::handsmotion::PlayResponse>(
          [this](::grpc::ServerContext* context,
                 const ::handsmotion::PlayRequest* request,
                 ::handsmotion::PlayResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Play(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_Play(
        ::grpc::experimental::MessageAllocator< ::handsmotion::PlayRequest, ::handsmotion::PlayResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::handsmotion::PlayRequest, ::handsmotion::PlayResponse>*>(
          ::grpc::Service::experimental().GetHandler(0))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Play() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Play(::grpc::ServerContext* context, const ::handsmotion::PlayRequest* request, ::handsmotion::PlayResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Play(::grpc::ServerContext* context, const ::handsmotion::PlayRequest* request, ::handsmotion::PlayResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Stop() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::handsmotion::StopRequest, ::handsmotion::StopResponse>(
          [this](::grpc::ServerContext* context,
                 const ::handsmotion::StopRequest* request,
                 ::handsmotion::StopResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Stop(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_Stop(
        ::grpc::experimental::MessageAllocator< ::handsmotion::StopRequest, ::handsmotion::StopResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::handsmotion::StopRequest, ::handsmotion::StopResponse>*>(
          ::grpc::Service::experimental().GetHandler(1))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stop(::grpc::ServerContext* context, const ::handsmotion::StopRequest* request, ::handsmotion::StopResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Stop(::grpc::ServerContext* context, const ::handsmotion::StopRequest* request, ::handsmotion::StopResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Reset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Reset() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::handsmotion::ResetRequest, ::handsmotion::ResetResponse>(
          [this](::grpc::ServerContext* context,
                 const ::handsmotion::ResetRequest* request,
                 ::handsmotion::ResetResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Reset(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_Reset(
        ::grpc::experimental::MessageAllocator< ::handsmotion::ResetRequest, ::handsmotion::ResetResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::handsmotion::ResetRequest, ::handsmotion::ResetResponse>*>(
          ::grpc::Service::experimental().GetHandler(2))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Reset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Reset(::grpc::ServerContext* context, const ::handsmotion::ResetRequest* request, ::handsmotion::ResetResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Reset(::grpc::ServerContext* context, const ::handsmotion::ResetRequest* request, ::handsmotion::ResetResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Playlist : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Playlist() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::handsmotion::PlaylistRequest, ::handsmotion::PlaylistResponse>(
          [this](::grpc::ServerContext* context,
                 const ::handsmotion::PlaylistRequest* request,
                 ::handsmotion::PlaylistResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Playlist(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_Playlist(
        ::grpc::experimental::MessageAllocator< ::handsmotion::PlaylistRequest, ::handsmotion::PlaylistResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::handsmotion::PlaylistRequest, ::handsmotion::PlaylistResponse>*>(
          ::grpc::Service::experimental().GetHandler(3))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Playlist() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Playlist(::grpc::ServerContext* context, const ::handsmotion::PlaylistRequest* request, ::handsmotion::PlaylistResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Playlist(::grpc::ServerContext* context, const ::handsmotion::PlaylistRequest* request, ::handsmotion::PlaylistResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_State : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_State() {
      ::grpc::Service::experimental().MarkMethodCallback(4,
        new ::grpc::internal::CallbackUnaryHandler< ::handsmotion::StateRequest, ::handsmotion::StateResponse>(
          [this](::grpc::ServerContext* context,
                 const ::handsmotion::StateRequest* request,
                 ::handsmotion::StateResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->State(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_State(
        ::grpc::experimental::MessageAllocator< ::handsmotion::StateRequest, ::handsmotion::StateResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::handsmotion::StateRequest, ::handsmotion::StateResponse>*>(
          ::grpc::Service::experimental().GetHandler(4))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_State() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status State(::grpc::ServerContext* context, const ::handsmotion::StateRequest* request, ::handsmotion::StateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void State(::grpc::ServerContext* context, const ::handsmotion::StateRequest* request, ::handsmotion::StateResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_OnStateChange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_OnStateChange() {
      ::grpc::Service::experimental().MarkMethodCallback(5,
        new ::grpc::internal::CallbackServerStreamingHandler< ::handsmotion::OnStateChangeRequest, ::handsmotion::OnStateChangeResponse>(
          [this] { return this->OnStateChange(); }));
    }
    ~ExperimentalWithCallbackMethod_OnStateChange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnStateChange(::grpc::ServerContext* context, const ::handsmotion::OnStateChangeRequest* request, ::grpc::ServerWriter< ::handsmotion::OnStateChangeResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::handsmotion::OnStateChangeRequest, ::handsmotion::OnStateChangeResponse>* OnStateChange() {
      return new ::grpc::internal::UnimplementedWriteReactor<
        ::handsmotion::OnStateChangeRequest, ::handsmotion::OnStateChangeResponse>;}
  };
  typedef ExperimentalWithCallbackMethod_Play<ExperimentalWithCallbackMethod_Stop<ExperimentalWithCallbackMethod_Reset<ExperimentalWithCallbackMethod_Playlist<ExperimentalWithCallbackMethod_State<ExperimentalWithCallbackMethod_OnStateChange<Service > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Play : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Play() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Play() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Play(::grpc::ServerContext* context, const ::handsmotion::PlayRequest* request, ::handsmotion::PlayResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Stop() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stop(::grpc::ServerContext* context, const ::handsmotion::StopRequest* request, ::handsmotion::StopResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Reset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Reset() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Reset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Reset(::grpc::ServerContext* context, const ::handsmotion::ResetRequest* request, ::handsmotion::ResetResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Playlist : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Playlist() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_Playlist() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Playlist(::grpc::ServerContext* context, const ::handsmotion::PlaylistRequest* request, ::handsmotion::PlaylistResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_State : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_State() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_State() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status State(::grpc::ServerContext* context, const ::handsmotion::StateRequest* request, ::handsmotion::StateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_OnStateChange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_OnStateChange() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_OnStateChange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnStateChange(::grpc::ServerContext* context, const ::handsmotion::OnStateChangeRequest* request, ::grpc::ServerWriter< ::handsmotion::OnStateChangeResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Play : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Play() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Play() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Play(::grpc::ServerContext* context, const ::handsmotion::PlayRequest* request, ::handsmotion::PlayResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPlay(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Stop() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stop(::grpc::ServerContext* context, const ::handsmotion::StopRequest* request, ::handsmotion::StopResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStop(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Reset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Reset() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Reset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Reset(::grpc::ServerContext* context, const ::handsmotion::ResetRequest* request, ::handsmotion::ResetResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReset(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Playlist : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Playlist() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_Playlist() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Playlist(::grpc::ServerContext* context, const ::handsmotion::PlaylistRequest* request, ::handsmotion::PlaylistResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPlaylist(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_State : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_State() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_State() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status State(::grpc::ServerContext* context, const ::handsmotion::StateRequest* request, ::handsmotion::StateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestState(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_OnStateChange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_OnStateChange() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_OnStateChange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnStateChange(::grpc::ServerContext* context, const ::handsmotion::OnStateChangeRequest* request, ::grpc::ServerWriter< ::handsmotion::OnStateChangeResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOnStateChange(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(5, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Play : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Play() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Play(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Play() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Play(::grpc::ServerContext* context, const ::handsmotion::PlayRequest* request, ::handsmotion::PlayResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Play(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Stop() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Stop(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stop(::grpc::ServerContext* context, const ::handsmotion::StopRequest* request, ::handsmotion::StopResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Stop(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Reset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Reset() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Reset(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Reset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Reset(::grpc::ServerContext* context, const ::handsmotion::ResetRequest* request, ::handsmotion::ResetResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Reset(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Playlist : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Playlist() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Playlist(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Playlist() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Playlist(::grpc::ServerContext* context, const ::handsmotion::PlaylistRequest* request, ::handsmotion::PlaylistResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Playlist(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_State : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_State() {
      ::grpc::Service::experimental().MarkMethodRawCallback(4,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->State(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_State() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status State(::grpc::ServerContext* context, const ::handsmotion::StateRequest* request, ::handsmotion::StateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void State(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_OnStateChange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_OnStateChange() {
      ::grpc::Service::experimental().MarkMethodRawCallback(5,
        new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this] { return this->OnStateChange(); }));
    }
    ~ExperimentalWithRawCallbackMethod_OnStateChange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnStateChange(::grpc::ServerContext* context, const ::handsmotion::OnStateChangeRequest* request, ::grpc::ServerWriter< ::handsmotion::OnStateChangeResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* OnStateChange() {
      return new ::grpc::internal::UnimplementedWriteReactor<
        ::grpc::ByteBuffer, ::grpc::ByteBuffer>;}
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Play : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Play() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::handsmotion::PlayRequest, ::handsmotion::PlayResponse>(std::bind(&WithStreamedUnaryMethod_Play<BaseClass>::StreamedPlay, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Play() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Play(::grpc::ServerContext* context, const ::handsmotion::PlayRequest* request, ::handsmotion::PlayResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPlay(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::handsmotion::PlayRequest,::handsmotion::PlayResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Stop() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::handsmotion::StopRequest, ::handsmotion::StopResponse>(std::bind(&WithStreamedUnaryMethod_Stop<BaseClass>::StreamedStop, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Stop(::grpc::ServerContext* context, const ::handsmotion::StopRequest* request, ::handsmotion::StopResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStop(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::handsmotion::StopRequest,::handsmotion::StopResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Reset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Reset() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::handsmotion::ResetRequest, ::handsmotion::ResetResponse>(std::bind(&WithStreamedUnaryMethod_Reset<BaseClass>::StreamedReset, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Reset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Reset(::grpc::ServerContext* context, const ::handsmotion::ResetRequest* request, ::handsmotion::ResetResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReset(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::handsmotion::ResetRequest,::handsmotion::ResetResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Playlist : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Playlist() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::handsmotion::PlaylistRequest, ::handsmotion::PlaylistResponse>(std::bind(&WithStreamedUnaryMethod_Playlist<BaseClass>::StreamedPlaylist, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Playlist() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Playlist(::grpc::ServerContext* context, const ::handsmotion::PlaylistRequest* request, ::handsmotion::PlaylistResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPlaylist(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::handsmotion::PlaylistRequest,::handsmotion::PlaylistResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_State : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_State() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::handsmotion::StateRequest, ::handsmotion::StateResponse>(std::bind(&WithStreamedUnaryMethod_State<BaseClass>::StreamedState, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_State() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status State(::grpc::ServerContext* context, const ::handsmotion::StateRequest* request, ::handsmotion::StateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedState(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::handsmotion::StateRequest,::handsmotion::StateResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Play<WithStreamedUnaryMethod_Stop<WithStreamedUnaryMethod_Reset<WithStreamedUnaryMethod_Playlist<WithStreamedUnaryMethod_State<Service > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_OnStateChange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_OnStateChange() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::SplitServerStreamingHandler< ::handsmotion::OnStateChangeRequest, ::handsmotion::OnStateChangeResponse>(std::bind(&WithSplitStreamingMethod_OnStateChange<BaseClass>::StreamedOnStateChange, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_OnStateChange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status OnStateChange(::grpc::ServerContext* context, const ::handsmotion::OnStateChangeRequest* request, ::grpc::ServerWriter< ::handsmotion::OnStateChangeResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedOnStateChange(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::handsmotion::OnStateChangeRequest,::handsmotion::OnStateChangeResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_OnStateChange<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_Play<WithStreamedUnaryMethod_Stop<WithStreamedUnaryMethod_Reset<WithStreamedUnaryMethod_Playlist<WithStreamedUnaryMethod_State<WithSplitStreamingMethod_OnStateChange<Service > > > > > > StreamedService;
};

}  // namespace handsmotion


#endif  // GRPC_player_2eproto__INCLUDED
