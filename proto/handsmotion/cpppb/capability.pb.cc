// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: capability.proto

#include "capability.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_capability_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FingersAdjustmentRequest_FingerMove_capability_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_capability_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MovementScript_capability_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_capability_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Position_capability_2eproto;
namespace handsmotion {
class FingersAdjustmentRequest_FingerMoveDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FingersAdjustmentRequest_FingerMove> _instance;
} _FingersAdjustmentRequest_FingerMove_default_instance_;
class FingersAdjustmentRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FingersAdjustmentRequest> _instance;
  bool reset_;
  const ::handsmotion::FingersAdjustmentRequest_FingerMove* move_;
} _FingersAdjustmentRequest_default_instance_;
class FingersAdjustmentResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FingersAdjustmentResponse> _instance;
} _FingersAdjustmentResponse_default_instance_;
class ArmAdjustmentRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ArmAdjustmentRequest> _instance;
  bool reset_;
  bool disability_;
} _ArmAdjustmentRequest_default_instance_;
class ArmAdjustmentResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ArmAdjustmentResponse> _instance;
} _ArmAdjustmentResponse_default_instance_;
class PositionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Position> _instance;
} _Position_default_instance_;
class MarkAsOriginalPositionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MarkAsOriginalPositionRequest> _instance;
} _MarkAsOriginalPositionRequest_default_instance_;
class MarkAsOriginalPositionResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MarkAsOriginalPositionResponse> _instance;
} _MarkAsOriginalPositionResponse_default_instance_;
class MovementScriptDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MovementScript> _instance;
} _MovementScript_default_instance_;
class GetAbsolutePositionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetAbsolutePositionRequest> _instance;
} _GetAbsolutePositionRequest_default_instance_;
class GetAbsolutePositionResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetAbsolutePositionResponse> _instance;
} _GetAbsolutePositionResponse_default_instance_;
class AbsoluteMoveRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AbsoluteMoveRequest> _instance;
} _AbsoluteMoveRequest_default_instance_;
class AbsoluteMoveResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AbsoluteMoveResponse> _instance;
} _AbsoluteMoveResponse_default_instance_;
}  // namespace handsmotion
static void InitDefaultsscc_info_AbsoluteMoveRequest_capability_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::handsmotion::_AbsoluteMoveRequest_default_instance_;
    new (ptr) ::handsmotion::AbsoluteMoveRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::handsmotion::AbsoluteMoveRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AbsoluteMoveRequest_capability_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_AbsoluteMoveRequest_capability_2eproto}, {
      &scc_info_MovementScript_capability_2eproto.base,}};

static void InitDefaultsscc_info_AbsoluteMoveResponse_capability_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::handsmotion::_AbsoluteMoveResponse_default_instance_;
    new (ptr) ::handsmotion::AbsoluteMoveResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::handsmotion::AbsoluteMoveResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AbsoluteMoveResponse_capability_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AbsoluteMoveResponse_capability_2eproto}, {}};

static void InitDefaultsscc_info_ArmAdjustmentRequest_capability_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::handsmotion::_ArmAdjustmentRequest_default_instance_;
    new (ptr) ::handsmotion::ArmAdjustmentRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::handsmotion::ArmAdjustmentRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ArmAdjustmentRequest_capability_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ArmAdjustmentRequest_capability_2eproto}, {}};

static void InitDefaultsscc_info_ArmAdjustmentResponse_capability_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::handsmotion::_ArmAdjustmentResponse_default_instance_;
    new (ptr) ::handsmotion::ArmAdjustmentResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::handsmotion::ArmAdjustmentResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ArmAdjustmentResponse_capability_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ArmAdjustmentResponse_capability_2eproto}, {}};

static void InitDefaultsscc_info_FingersAdjustmentRequest_capability_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::handsmotion::_FingersAdjustmentRequest_default_instance_;
    new (ptr) ::handsmotion::FingersAdjustmentRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::handsmotion::FingersAdjustmentRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FingersAdjustmentRequest_capability_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_FingersAdjustmentRequest_capability_2eproto}, {
      &scc_info_FingersAdjustmentRequest_FingerMove_capability_2eproto.base,}};

static void InitDefaultsscc_info_FingersAdjustmentRequest_FingerMove_capability_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::handsmotion::_FingersAdjustmentRequest_FingerMove_default_instance_;
    new (ptr) ::handsmotion::FingersAdjustmentRequest_FingerMove();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::handsmotion::FingersAdjustmentRequest_FingerMove::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FingersAdjustmentRequest_FingerMove_capability_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_FingersAdjustmentRequest_FingerMove_capability_2eproto}, {}};

static void InitDefaultsscc_info_FingersAdjustmentResponse_capability_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::handsmotion::_FingersAdjustmentResponse_default_instance_;
    new (ptr) ::handsmotion::FingersAdjustmentResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::handsmotion::FingersAdjustmentResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FingersAdjustmentResponse_capability_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_FingersAdjustmentResponse_capability_2eproto}, {}};

static void InitDefaultsscc_info_GetAbsolutePositionRequest_capability_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::handsmotion::_GetAbsolutePositionRequest_default_instance_;
    new (ptr) ::handsmotion::GetAbsolutePositionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::handsmotion::GetAbsolutePositionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetAbsolutePositionRequest_capability_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GetAbsolutePositionRequest_capability_2eproto}, {}};

static void InitDefaultsscc_info_GetAbsolutePositionResponse_capability_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::handsmotion::_GetAbsolutePositionResponse_default_instance_;
    new (ptr) ::handsmotion::GetAbsolutePositionResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::handsmotion::GetAbsolutePositionResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetAbsolutePositionResponse_capability_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GetAbsolutePositionResponse_capability_2eproto}, {
      &scc_info_Position_capability_2eproto.base,}};

static void InitDefaultsscc_info_MarkAsOriginalPositionRequest_capability_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::handsmotion::_MarkAsOriginalPositionRequest_default_instance_;
    new (ptr) ::handsmotion::MarkAsOriginalPositionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::handsmotion::MarkAsOriginalPositionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MarkAsOriginalPositionRequest_capability_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MarkAsOriginalPositionRequest_capability_2eproto}, {}};

static void InitDefaultsscc_info_MarkAsOriginalPositionResponse_capability_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::handsmotion::_MarkAsOriginalPositionResponse_default_instance_;
    new (ptr) ::handsmotion::MarkAsOriginalPositionResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::handsmotion::MarkAsOriginalPositionResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MarkAsOriginalPositionResponse_capability_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MarkAsOriginalPositionResponse_capability_2eproto}, {}};

static void InitDefaultsscc_info_MovementScript_capability_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::handsmotion::_MovementScript_default_instance_;
    new (ptr) ::handsmotion::MovementScript();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::handsmotion::MovementScript::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MovementScript_capability_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_MovementScript_capability_2eproto}, {
      &scc_info_Position_capability_2eproto.base,}};

static void InitDefaultsscc_info_Position_capability_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::handsmotion::_Position_default_instance_;
    new (ptr) ::handsmotion::Position();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::handsmotion::Position::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Position_capability_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Position_capability_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_capability_2eproto[13];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_capability_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_capability_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_capability_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::handsmotion::FingersAdjustmentRequest_FingerMove, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::handsmotion::FingersAdjustmentRequest_FingerMove, finger_idx_),
  PROTOBUF_FIELD_OFFSET(::handsmotion::FingersAdjustmentRequest_FingerMove, type_),
  PROTOBUF_FIELD_OFFSET(::handsmotion::FingersAdjustmentRequest_FingerMove, stroke_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::handsmotion::FingersAdjustmentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::handsmotion::FingersAdjustmentRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::handsmotion::FingersAdjustmentRequest, hand_idx_),
  offsetof(::handsmotion::FingersAdjustmentRequestDefaultTypeInternal, reset_),
  offsetof(::handsmotion::FingersAdjustmentRequestDefaultTypeInternal, move_),
  PROTOBUF_FIELD_OFFSET(::handsmotion::FingersAdjustmentRequest, req_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::handsmotion::FingersAdjustmentResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::handsmotion::ArmAdjustmentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::handsmotion::ArmAdjustmentRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::handsmotion::ArmAdjustmentRequest, hand_idx_),
  offsetof(::handsmotion::ArmAdjustmentRequestDefaultTypeInternal, reset_),
  offsetof(::handsmotion::ArmAdjustmentRequestDefaultTypeInternal, disability_),
  PROTOBUF_FIELD_OFFSET(::handsmotion::ArmAdjustmentRequest, req_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::handsmotion::ArmAdjustmentResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::handsmotion::Position, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::handsmotion::Position, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::handsmotion::MarkAsOriginalPositionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::handsmotion::MarkAsOriginalPositionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::handsmotion::MovementScript, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::handsmotion::MovementScript, position_),
  PROTOBUF_FIELD_OFFSET(::handsmotion::MovementScript, run_time_),
  PROTOBUF_FIELD_OFFSET(::handsmotion::MovementScript, keep_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::handsmotion::GetAbsolutePositionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::handsmotion::GetAbsolutePositionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::handsmotion::GetAbsolutePositionResponse, position_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::handsmotion::AbsoluteMoveRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::handsmotion::AbsoluteMoveRequest, scripts_),
  PROTOBUF_FIELD_OFFSET(::handsmotion::AbsoluteMoveRequest, sync_mode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::handsmotion::AbsoluteMoveResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::handsmotion::FingersAdjustmentRequest_FingerMove)},
  { 8, -1, sizeof(::handsmotion::FingersAdjustmentRequest)},
  { 17, -1, sizeof(::handsmotion::FingersAdjustmentResponse)},
  { 22, -1, sizeof(::handsmotion::ArmAdjustmentRequest)},
  { 31, -1, sizeof(::handsmotion::ArmAdjustmentResponse)},
  { 36, -1, sizeof(::handsmotion::Position)},
  { 42, -1, sizeof(::handsmotion::MarkAsOriginalPositionRequest)},
  { 47, -1, sizeof(::handsmotion::MarkAsOriginalPositionResponse)},
  { 52, -1, sizeof(::handsmotion::MovementScript)},
  { 60, -1, sizeof(::handsmotion::GetAbsolutePositionRequest)},
  { 65, -1, sizeof(::handsmotion::GetAbsolutePositionResponse)},
  { 71, -1, sizeof(::handsmotion::AbsoluteMoveRequest)},
  { 78, -1, sizeof(::handsmotion::AbsoluteMoveResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::handsmotion::_FingersAdjustmentRequest_FingerMove_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::handsmotion::_FingersAdjustmentRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::handsmotion::_FingersAdjustmentResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::handsmotion::_ArmAdjustmentRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::handsmotion::_ArmAdjustmentResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::handsmotion::_Position_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::handsmotion::_MarkAsOriginalPositionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::handsmotion::_MarkAsOriginalPositionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::handsmotion::_MovementScript_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::handsmotion::_GetAbsolutePositionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::handsmotion::_GetAbsolutePositionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::handsmotion::_AbsoluteMoveRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::handsmotion::_AbsoluteMoveResponse_default_instance_),
};

const char descriptor_table_protodef_capability_2eproto[] =
  "\n\020capability.proto\022\013handsmotion\032\034google/"
  "api/annotations.proto\"\272\002\n\030FingersAdjustm"
  "entRequest\022\020\n\010hand_idx\030\001 \001(\r\022\017\n\005reset\030\002 "
  "\001(\010H\000\022@\n\004move\030\003 \001(\01320.handsmotion.Finger"
  "sAdjustmentRequest.FingerMoveH\000\032\261\001\n\nFing"
  "erMove\022\022\n\nfinger_idx\030\002 \001(\r\022R\n\004type\030\003 \001(\016"
  "2D.handsmotion.FingersAdjustmentRequest."
  "FingerMove.FingerMovementTypes\022\016\n\006stroke"
  "\030\004 \001(\005\"+\n\023FingerMovementTypes\022\t\n\005LOOSE\020\000"
  "\022\t\n\005TIGHT\020\001B\005\n\003req\"\033\n\031FingersAdjustmentR"
  "esponse\"V\n\024ArmAdjustmentRequest\022\020\n\010hand_"
  "idx\030\001 \001(\r\022\017\n\005reset\030\002 \001(\010H\000\022\024\n\ndisability"
  "\030\003 \001(\010H\000B\005\n\003req\"\027\n\025ArmAdjustmentResponse"
  "\"\030\n\010Position\022\014\n\004data\030\001 \001(\014\"\037\n\035MarkAsOrig"
  "inalPositionRequest\" \n\036MarkAsOriginalPos"
  "itionResponse\"^\n\016MovementScript\022\'\n\010posit"
  "ion\030\001 \001(\0132\025.handsmotion.Position\022\020\n\010run_"
  "time\030\002 \001(\005\022\021\n\tkeep_time\030\003 \001(\005\"\034\n\032GetAbso"
  "lutePositionRequest\"F\n\033GetAbsolutePositi"
  "onResponse\022\'\n\010position\030\001 \001(\0132\025.handsmoti"
  "on.Position\"V\n\023AbsoluteMoveRequest\022,\n\007sc"
  "ripts\030\001 \003(\0132\033.handsmotion.MovementScript"
  "\022\021\n\tsync_mode\030\002 \001(\010\"\026\n\024AbsoluteMoveRespo"
  "nse2\270\006\n\nCapability\022\241\001\n\021FingersAdjustment"
  "\022%.handsmotion.FingersAdjustmentRequest\032"
  "&.handsmotion.FingersAdjustmentResponse\""
  "=\202\323\344\223\0027\"2/api/v2/motion/hands/capability"
  "/fingers_adjustment:\001*\022\221\001\n\rArmAdjustment"
  "\022!.handsmotion.ArmAdjustmentRequest\032\".ha"
  "ndsmotion.ArmAdjustmentResponse\"9\202\323\344\223\0023\""
  "./api/v2/motion/hands/capability/arm_adj"
  "ustment:\001*\022\267\001\n\026MarkAsOriginalPosition\022*."
  "handsmotion.MarkAsOriginalPositionReques"
  "t\032+.handsmotion.MarkAsOriginalPositionRe"
  "sponse\"D\202\323\344\223\002>\"9/api/v2/motion/hands/cap"
  "ability/mark_as_original_position:\001*\022\247\001\n"
  "\023GetAbsolutePosition\022\'.handsmotion.GetAb"
  "solutePositionRequest\032(.handsmotion.GetA"
  "bsolutePositionResponse\"=\202\323\344\223\0027\0225/api/v2"
  "/motion/hands/capability/get_absolute_po"
  "sition\022\215\001\n\014AbsoluteMove\022 .handsmotion.Ab"
  "soluteMoveRequest\032!.handsmotion.Absolute"
  "MoveResponse\"8\202\323\344\223\0022\"-/api/v2/motion/han"
  "ds/capability/absolute_move:\001*b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_capability_2eproto_deps[1] = {
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_capability_2eproto_sccs[13] = {
  &scc_info_AbsoluteMoveRequest_capability_2eproto.base,
  &scc_info_AbsoluteMoveResponse_capability_2eproto.base,
  &scc_info_ArmAdjustmentRequest_capability_2eproto.base,
  &scc_info_ArmAdjustmentResponse_capability_2eproto.base,
  &scc_info_FingersAdjustmentRequest_capability_2eproto.base,
  &scc_info_FingersAdjustmentRequest_FingerMove_capability_2eproto.base,
  &scc_info_FingersAdjustmentResponse_capability_2eproto.base,
  &scc_info_GetAbsolutePositionRequest_capability_2eproto.base,
  &scc_info_GetAbsolutePositionResponse_capability_2eproto.base,
  &scc_info_MarkAsOriginalPositionRequest_capability_2eproto.base,
  &scc_info_MarkAsOriginalPositionResponse_capability_2eproto.base,
  &scc_info_MovementScript_capability_2eproto.base,
  &scc_info_Position_capability_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_capability_2eproto_once;
static bool descriptor_table_capability_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_capability_2eproto = {
  &descriptor_table_capability_2eproto_initialized, descriptor_table_protodef_capability_2eproto, "capability.proto", 1758,
  &descriptor_table_capability_2eproto_once, descriptor_table_capability_2eproto_sccs, descriptor_table_capability_2eproto_deps, 13, 1,
  schemas, file_default_instances, TableStruct_capability_2eproto::offsets,
  file_level_metadata_capability_2eproto, 13, file_level_enum_descriptors_capability_2eproto, file_level_service_descriptors_capability_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_capability_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_capability_2eproto), true);
namespace handsmotion {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FingersAdjustmentRequest_FingerMove_FingerMovementTypes_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_capability_2eproto);
  return file_level_enum_descriptors_capability_2eproto[0];
}
bool FingersAdjustmentRequest_FingerMove_FingerMovementTypes_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr FingersAdjustmentRequest_FingerMove_FingerMovementTypes FingersAdjustmentRequest_FingerMove::LOOSE;
constexpr FingersAdjustmentRequest_FingerMove_FingerMovementTypes FingersAdjustmentRequest_FingerMove::TIGHT;
constexpr FingersAdjustmentRequest_FingerMove_FingerMovementTypes FingersAdjustmentRequest_FingerMove::FingerMovementTypes_MIN;
constexpr FingersAdjustmentRequest_FingerMove_FingerMovementTypes FingersAdjustmentRequest_FingerMove::FingerMovementTypes_MAX;
constexpr int FingersAdjustmentRequest_FingerMove::FingerMovementTypes_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void FingersAdjustmentRequest_FingerMove::InitAsDefaultInstance() {
}
class FingersAdjustmentRequest_FingerMove::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FingersAdjustmentRequest_FingerMove::kFingerIdxFieldNumber;
const int FingersAdjustmentRequest_FingerMove::kTypeFieldNumber;
const int FingersAdjustmentRequest_FingerMove::kStrokeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FingersAdjustmentRequest_FingerMove::FingersAdjustmentRequest_FingerMove()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:handsmotion.FingersAdjustmentRequest.FingerMove)
}
FingersAdjustmentRequest_FingerMove::FingersAdjustmentRequest_FingerMove(const FingersAdjustmentRequest_FingerMove& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&finger_idx_, &from.finger_idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&stroke_) -
    reinterpret_cast<char*>(&finger_idx_)) + sizeof(stroke_));
  // @@protoc_insertion_point(copy_constructor:handsmotion.FingersAdjustmentRequest.FingerMove)
}

void FingersAdjustmentRequest_FingerMove::SharedCtor() {
  ::memset(&finger_idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stroke_) -
      reinterpret_cast<char*>(&finger_idx_)) + sizeof(stroke_));
}

FingersAdjustmentRequest_FingerMove::~FingersAdjustmentRequest_FingerMove() {
  // @@protoc_insertion_point(destructor:handsmotion.FingersAdjustmentRequest.FingerMove)
  SharedDtor();
}

void FingersAdjustmentRequest_FingerMove::SharedDtor() {
}

void FingersAdjustmentRequest_FingerMove::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FingersAdjustmentRequest_FingerMove& FingersAdjustmentRequest_FingerMove::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FingersAdjustmentRequest_FingerMove_capability_2eproto.base);
  return *internal_default_instance();
}


void FingersAdjustmentRequest_FingerMove::Clear() {
// @@protoc_insertion_point(message_clear_start:handsmotion.FingersAdjustmentRequest.FingerMove)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&finger_idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stroke_) -
      reinterpret_cast<char*>(&finger_idx_)) + sizeof(stroke_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FingersAdjustmentRequest_FingerMove::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 finger_idx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          finger_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .handsmotion.FingersAdjustmentRequest.FingerMove.FingerMovementTypes type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_type(static_cast<::handsmotion::FingersAdjustmentRequest_FingerMove_FingerMovementTypes>(val));
        } else goto handle_unusual;
        continue;
      // int32 stroke = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          stroke_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FingersAdjustmentRequest_FingerMove::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:handsmotion.FingersAdjustmentRequest.FingerMove)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 finger_idx = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &finger_idx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .handsmotion.FingersAdjustmentRequest.FingerMove.FingerMovementTypes type = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::handsmotion::FingersAdjustmentRequest_FingerMove_FingerMovementTypes >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 stroke = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &stroke_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:handsmotion.FingersAdjustmentRequest.FingerMove)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:handsmotion.FingersAdjustmentRequest.FingerMove)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FingersAdjustmentRequest_FingerMove::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:handsmotion.FingersAdjustmentRequest.FingerMove)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 finger_idx = 2;
  if (this->finger_idx() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->finger_idx(), output);
  }

  // .handsmotion.FingersAdjustmentRequest.FingerMove.FingerMovementTypes type = 3;
  if (this->type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // int32 stroke = 4;
  if (this->stroke() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->stroke(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:handsmotion.FingersAdjustmentRequest.FingerMove)
}

::PROTOBUF_NAMESPACE_ID::uint8* FingersAdjustmentRequest_FingerMove::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:handsmotion.FingersAdjustmentRequest.FingerMove)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 finger_idx = 2;
  if (this->finger_idx() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->finger_idx(), target);
  }

  // .handsmotion.FingersAdjustmentRequest.FingerMove.FingerMovementTypes type = 3;
  if (this->type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // int32 stroke = 4;
  if (this->stroke() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->stroke(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:handsmotion.FingersAdjustmentRequest.FingerMove)
  return target;
}

size_t FingersAdjustmentRequest_FingerMove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:handsmotion.FingersAdjustmentRequest.FingerMove)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 finger_idx = 2;
  if (this->finger_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->finger_idx());
  }

  // .handsmotion.FingersAdjustmentRequest.FingerMove.FingerMovementTypes type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
  }

  // int32 stroke = 4;
  if (this->stroke() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->stroke());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FingersAdjustmentRequest_FingerMove::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:handsmotion.FingersAdjustmentRequest.FingerMove)
  GOOGLE_DCHECK_NE(&from, this);
  const FingersAdjustmentRequest_FingerMove* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FingersAdjustmentRequest_FingerMove>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:handsmotion.FingersAdjustmentRequest.FingerMove)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:handsmotion.FingersAdjustmentRequest.FingerMove)
    MergeFrom(*source);
  }
}

void FingersAdjustmentRequest_FingerMove::MergeFrom(const FingersAdjustmentRequest_FingerMove& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:handsmotion.FingersAdjustmentRequest.FingerMove)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.finger_idx() != 0) {
    set_finger_idx(from.finger_idx());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.stroke() != 0) {
    set_stroke(from.stroke());
  }
}

void FingersAdjustmentRequest_FingerMove::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:handsmotion.FingersAdjustmentRequest.FingerMove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FingersAdjustmentRequest_FingerMove::CopyFrom(const FingersAdjustmentRequest_FingerMove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:handsmotion.FingersAdjustmentRequest.FingerMove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FingersAdjustmentRequest_FingerMove::IsInitialized() const {
  return true;
}

void FingersAdjustmentRequest_FingerMove::Swap(FingersAdjustmentRequest_FingerMove* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FingersAdjustmentRequest_FingerMove::InternalSwap(FingersAdjustmentRequest_FingerMove* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(finger_idx_, other->finger_idx_);
  swap(type_, other->type_);
  swap(stroke_, other->stroke_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FingersAdjustmentRequest_FingerMove::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FingersAdjustmentRequest::InitAsDefaultInstance() {
  ::handsmotion::_FingersAdjustmentRequest_default_instance_.reset_ = false;
  ::handsmotion::_FingersAdjustmentRequest_default_instance_.move_ = const_cast< ::handsmotion::FingersAdjustmentRequest_FingerMove*>(
      ::handsmotion::FingersAdjustmentRequest_FingerMove::internal_default_instance());
}
class FingersAdjustmentRequest::HasBitSetters {
 public:
  static const ::handsmotion::FingersAdjustmentRequest_FingerMove& move(const FingersAdjustmentRequest* msg);
};

const ::handsmotion::FingersAdjustmentRequest_FingerMove&
FingersAdjustmentRequest::HasBitSetters::move(const FingersAdjustmentRequest* msg) {
  return *msg->req_.move_;
}
void FingersAdjustmentRequest::set_allocated_move(::handsmotion::FingersAdjustmentRequest_FingerMove* move) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_req();
  if (move) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      move = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, move, submessage_arena);
    }
    set_has_move();
    req_.move_ = move;
  }
  // @@protoc_insertion_point(field_set_allocated:handsmotion.FingersAdjustmentRequest.move)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FingersAdjustmentRequest::kHandIdxFieldNumber;
const int FingersAdjustmentRequest::kResetFieldNumber;
const int FingersAdjustmentRequest::kMoveFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FingersAdjustmentRequest::FingersAdjustmentRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:handsmotion.FingersAdjustmentRequest)
}
FingersAdjustmentRequest::FingersAdjustmentRequest(const FingersAdjustmentRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hand_idx_ = from.hand_idx_;
  clear_has_req();
  switch (from.req_case()) {
    case kReset: {
      set_reset(from.reset());
      break;
    }
    case kMove: {
      mutable_move()->::handsmotion::FingersAdjustmentRequest_FingerMove::MergeFrom(from.move());
      break;
    }
    case REQ_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:handsmotion.FingersAdjustmentRequest)
}

void FingersAdjustmentRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FingersAdjustmentRequest_capability_2eproto.base);
  hand_idx_ = 0u;
  clear_has_req();
}

FingersAdjustmentRequest::~FingersAdjustmentRequest() {
  // @@protoc_insertion_point(destructor:handsmotion.FingersAdjustmentRequest)
  SharedDtor();
}

void FingersAdjustmentRequest::SharedDtor() {
  if (has_req()) {
    clear_req();
  }
}

void FingersAdjustmentRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FingersAdjustmentRequest& FingersAdjustmentRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FingersAdjustmentRequest_capability_2eproto.base);
  return *internal_default_instance();
}


void FingersAdjustmentRequest::clear_req() {
// @@protoc_insertion_point(one_of_clear_start:handsmotion.FingersAdjustmentRequest)
  switch (req_case()) {
    case kReset: {
      // No need to clear
      break;
    }
    case kMove: {
      delete req_.move_;
      break;
    }
    case REQ_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REQ_NOT_SET;
}


void FingersAdjustmentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:handsmotion.FingersAdjustmentRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hand_idx_ = 0u;
  clear_req();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FingersAdjustmentRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 hand_idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          hand_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool reset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          set_reset(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .handsmotion.FingersAdjustmentRequest.FingerMove move = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_move(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FingersAdjustmentRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:handsmotion.FingersAdjustmentRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 hand_idx = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hand_idx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool reset = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          clear_req();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &req_.reset_)));
          set_has_reset();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .handsmotion.FingersAdjustmentRequest.FingerMove move = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_move()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:handsmotion.FingersAdjustmentRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:handsmotion.FingersAdjustmentRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FingersAdjustmentRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:handsmotion.FingersAdjustmentRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 hand_idx = 1;
  if (this->hand_idx() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->hand_idx(), output);
  }

  // bool reset = 2;
  if (has_reset()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->reset(), output);
  }

  // .handsmotion.FingersAdjustmentRequest.FingerMove move = 3;
  if (has_move()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::move(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:handsmotion.FingersAdjustmentRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* FingersAdjustmentRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:handsmotion.FingersAdjustmentRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 hand_idx = 1;
  if (this->hand_idx() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->hand_idx(), target);
  }

  // bool reset = 2;
  if (has_reset()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->reset(), target);
  }

  // .handsmotion.FingersAdjustmentRequest.FingerMove move = 3;
  if (has_move()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::move(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:handsmotion.FingersAdjustmentRequest)
  return target;
}

size_t FingersAdjustmentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:handsmotion.FingersAdjustmentRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 hand_idx = 1;
  if (this->hand_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->hand_idx());
  }

  switch (req_case()) {
    // bool reset = 2;
    case kReset: {
      total_size += 1 + 1;
      break;
    }
    // .handsmotion.FingersAdjustmentRequest.FingerMove move = 3;
    case kMove: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *req_.move_);
      break;
    }
    case REQ_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FingersAdjustmentRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:handsmotion.FingersAdjustmentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const FingersAdjustmentRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FingersAdjustmentRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:handsmotion.FingersAdjustmentRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:handsmotion.FingersAdjustmentRequest)
    MergeFrom(*source);
  }
}

void FingersAdjustmentRequest::MergeFrom(const FingersAdjustmentRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:handsmotion.FingersAdjustmentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hand_idx() != 0) {
    set_hand_idx(from.hand_idx());
  }
  switch (from.req_case()) {
    case kReset: {
      set_reset(from.reset());
      break;
    }
    case kMove: {
      mutable_move()->::handsmotion::FingersAdjustmentRequest_FingerMove::MergeFrom(from.move());
      break;
    }
    case REQ_NOT_SET: {
      break;
    }
  }
}

void FingersAdjustmentRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:handsmotion.FingersAdjustmentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FingersAdjustmentRequest::CopyFrom(const FingersAdjustmentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:handsmotion.FingersAdjustmentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FingersAdjustmentRequest::IsInitialized() const {
  return true;
}

void FingersAdjustmentRequest::Swap(FingersAdjustmentRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FingersAdjustmentRequest::InternalSwap(FingersAdjustmentRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(hand_idx_, other->hand_idx_);
  swap(req_, other->req_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata FingersAdjustmentRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FingersAdjustmentResponse::InitAsDefaultInstance() {
}
class FingersAdjustmentResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FingersAdjustmentResponse::FingersAdjustmentResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:handsmotion.FingersAdjustmentResponse)
}
FingersAdjustmentResponse::FingersAdjustmentResponse(const FingersAdjustmentResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:handsmotion.FingersAdjustmentResponse)
}

void FingersAdjustmentResponse::SharedCtor() {
}

FingersAdjustmentResponse::~FingersAdjustmentResponse() {
  // @@protoc_insertion_point(destructor:handsmotion.FingersAdjustmentResponse)
  SharedDtor();
}

void FingersAdjustmentResponse::SharedDtor() {
}

void FingersAdjustmentResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FingersAdjustmentResponse& FingersAdjustmentResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FingersAdjustmentResponse_capability_2eproto.base);
  return *internal_default_instance();
}


void FingersAdjustmentResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:handsmotion.FingersAdjustmentResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FingersAdjustmentResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FingersAdjustmentResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:handsmotion.FingersAdjustmentResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:handsmotion.FingersAdjustmentResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:handsmotion.FingersAdjustmentResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FingersAdjustmentResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:handsmotion.FingersAdjustmentResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:handsmotion.FingersAdjustmentResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* FingersAdjustmentResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:handsmotion.FingersAdjustmentResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:handsmotion.FingersAdjustmentResponse)
  return target;
}

size_t FingersAdjustmentResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:handsmotion.FingersAdjustmentResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FingersAdjustmentResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:handsmotion.FingersAdjustmentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const FingersAdjustmentResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FingersAdjustmentResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:handsmotion.FingersAdjustmentResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:handsmotion.FingersAdjustmentResponse)
    MergeFrom(*source);
  }
}

void FingersAdjustmentResponse::MergeFrom(const FingersAdjustmentResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:handsmotion.FingersAdjustmentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void FingersAdjustmentResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:handsmotion.FingersAdjustmentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FingersAdjustmentResponse::CopyFrom(const FingersAdjustmentResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:handsmotion.FingersAdjustmentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FingersAdjustmentResponse::IsInitialized() const {
  return true;
}

void FingersAdjustmentResponse::Swap(FingersAdjustmentResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FingersAdjustmentResponse::InternalSwap(FingersAdjustmentResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FingersAdjustmentResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ArmAdjustmentRequest::InitAsDefaultInstance() {
  ::handsmotion::_ArmAdjustmentRequest_default_instance_.reset_ = false;
  ::handsmotion::_ArmAdjustmentRequest_default_instance_.disability_ = false;
}
class ArmAdjustmentRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ArmAdjustmentRequest::kHandIdxFieldNumber;
const int ArmAdjustmentRequest::kResetFieldNumber;
const int ArmAdjustmentRequest::kDisabilityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ArmAdjustmentRequest::ArmAdjustmentRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:handsmotion.ArmAdjustmentRequest)
}
ArmAdjustmentRequest::ArmAdjustmentRequest(const ArmAdjustmentRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hand_idx_ = from.hand_idx_;
  clear_has_req();
  switch (from.req_case()) {
    case kReset: {
      set_reset(from.reset());
      break;
    }
    case kDisability: {
      set_disability(from.disability());
      break;
    }
    case REQ_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:handsmotion.ArmAdjustmentRequest)
}

void ArmAdjustmentRequest::SharedCtor() {
  hand_idx_ = 0u;
  clear_has_req();
}

ArmAdjustmentRequest::~ArmAdjustmentRequest() {
  // @@protoc_insertion_point(destructor:handsmotion.ArmAdjustmentRequest)
  SharedDtor();
}

void ArmAdjustmentRequest::SharedDtor() {
  if (has_req()) {
    clear_req();
  }
}

void ArmAdjustmentRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ArmAdjustmentRequest& ArmAdjustmentRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ArmAdjustmentRequest_capability_2eproto.base);
  return *internal_default_instance();
}


void ArmAdjustmentRequest::clear_req() {
// @@protoc_insertion_point(one_of_clear_start:handsmotion.ArmAdjustmentRequest)
  switch (req_case()) {
    case kReset: {
      // No need to clear
      break;
    }
    case kDisability: {
      // No need to clear
      break;
    }
    case REQ_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REQ_NOT_SET;
}


void ArmAdjustmentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:handsmotion.ArmAdjustmentRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hand_idx_ = 0u;
  clear_req();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ArmAdjustmentRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 hand_idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          hand_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool reset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          set_reset(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool disability = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          set_disability(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ArmAdjustmentRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:handsmotion.ArmAdjustmentRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 hand_idx = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hand_idx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool reset = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          clear_req();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &req_.reset_)));
          set_has_reset();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool disability = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          clear_req();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &req_.disability_)));
          set_has_disability();
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:handsmotion.ArmAdjustmentRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:handsmotion.ArmAdjustmentRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ArmAdjustmentRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:handsmotion.ArmAdjustmentRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 hand_idx = 1;
  if (this->hand_idx() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->hand_idx(), output);
  }

  // bool reset = 2;
  if (has_reset()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->reset(), output);
  }

  // bool disability = 3;
  if (has_disability()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->disability(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:handsmotion.ArmAdjustmentRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* ArmAdjustmentRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:handsmotion.ArmAdjustmentRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 hand_idx = 1;
  if (this->hand_idx() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->hand_idx(), target);
  }

  // bool reset = 2;
  if (has_reset()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->reset(), target);
  }

  // bool disability = 3;
  if (has_disability()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->disability(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:handsmotion.ArmAdjustmentRequest)
  return target;
}

size_t ArmAdjustmentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:handsmotion.ArmAdjustmentRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 hand_idx = 1;
  if (this->hand_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->hand_idx());
  }

  switch (req_case()) {
    // bool reset = 2;
    case kReset: {
      total_size += 1 + 1;
      break;
    }
    // bool disability = 3;
    case kDisability: {
      total_size += 1 + 1;
      break;
    }
    case REQ_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ArmAdjustmentRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:handsmotion.ArmAdjustmentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ArmAdjustmentRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ArmAdjustmentRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:handsmotion.ArmAdjustmentRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:handsmotion.ArmAdjustmentRequest)
    MergeFrom(*source);
  }
}

void ArmAdjustmentRequest::MergeFrom(const ArmAdjustmentRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:handsmotion.ArmAdjustmentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hand_idx() != 0) {
    set_hand_idx(from.hand_idx());
  }
  switch (from.req_case()) {
    case kReset: {
      set_reset(from.reset());
      break;
    }
    case kDisability: {
      set_disability(from.disability());
      break;
    }
    case REQ_NOT_SET: {
      break;
    }
  }
}

void ArmAdjustmentRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:handsmotion.ArmAdjustmentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArmAdjustmentRequest::CopyFrom(const ArmAdjustmentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:handsmotion.ArmAdjustmentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArmAdjustmentRequest::IsInitialized() const {
  return true;
}

void ArmAdjustmentRequest::Swap(ArmAdjustmentRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ArmAdjustmentRequest::InternalSwap(ArmAdjustmentRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(hand_idx_, other->hand_idx_);
  swap(req_, other->req_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ArmAdjustmentRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ArmAdjustmentResponse::InitAsDefaultInstance() {
}
class ArmAdjustmentResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ArmAdjustmentResponse::ArmAdjustmentResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:handsmotion.ArmAdjustmentResponse)
}
ArmAdjustmentResponse::ArmAdjustmentResponse(const ArmAdjustmentResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:handsmotion.ArmAdjustmentResponse)
}

void ArmAdjustmentResponse::SharedCtor() {
}

ArmAdjustmentResponse::~ArmAdjustmentResponse() {
  // @@protoc_insertion_point(destructor:handsmotion.ArmAdjustmentResponse)
  SharedDtor();
}

void ArmAdjustmentResponse::SharedDtor() {
}

void ArmAdjustmentResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ArmAdjustmentResponse& ArmAdjustmentResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ArmAdjustmentResponse_capability_2eproto.base);
  return *internal_default_instance();
}


void ArmAdjustmentResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:handsmotion.ArmAdjustmentResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ArmAdjustmentResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ArmAdjustmentResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:handsmotion.ArmAdjustmentResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:handsmotion.ArmAdjustmentResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:handsmotion.ArmAdjustmentResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ArmAdjustmentResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:handsmotion.ArmAdjustmentResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:handsmotion.ArmAdjustmentResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* ArmAdjustmentResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:handsmotion.ArmAdjustmentResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:handsmotion.ArmAdjustmentResponse)
  return target;
}

size_t ArmAdjustmentResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:handsmotion.ArmAdjustmentResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ArmAdjustmentResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:handsmotion.ArmAdjustmentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ArmAdjustmentResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ArmAdjustmentResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:handsmotion.ArmAdjustmentResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:handsmotion.ArmAdjustmentResponse)
    MergeFrom(*source);
  }
}

void ArmAdjustmentResponse::MergeFrom(const ArmAdjustmentResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:handsmotion.ArmAdjustmentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ArmAdjustmentResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:handsmotion.ArmAdjustmentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArmAdjustmentResponse::CopyFrom(const ArmAdjustmentResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:handsmotion.ArmAdjustmentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArmAdjustmentResponse::IsInitialized() const {
  return true;
}

void ArmAdjustmentResponse::Swap(ArmAdjustmentResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ArmAdjustmentResponse::InternalSwap(ArmAdjustmentResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ArmAdjustmentResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Position::InitAsDefaultInstance() {
}
class Position::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Position::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Position::Position()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:handsmotion.Position)
}
Position::Position(const Position& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  // @@protoc_insertion_point(copy_constructor:handsmotion.Position)
}

void Position::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Position_capability_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Position::~Position() {
  // @@protoc_insertion_point(destructor:handsmotion.Position)
  SharedDtor();
}

void Position::SharedDtor() {
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Position::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Position& Position::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Position_capability_2eproto.base);
  return *internal_default_instance();
}


void Position::Clear() {
// @@protoc_insertion_point(message_clear_start:handsmotion.Position)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Position::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Position::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:handsmotion.Position)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes data = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:handsmotion.Position)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:handsmotion.Position)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Position::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:handsmotion.Position)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1;
  if (this->data().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:handsmotion.Position)
}

::PROTOBUF_NAMESPACE_ID::uint8* Position::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:handsmotion.Position)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1;
  if (this->data().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:handsmotion.Position)
  return target;
}

size_t Position::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:handsmotion.Position)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 1;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->data());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Position::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:handsmotion.Position)
  GOOGLE_DCHECK_NE(&from, this);
  const Position* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Position>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:handsmotion.Position)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:handsmotion.Position)
    MergeFrom(*source);
  }
}

void Position::MergeFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:handsmotion.Position)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
}

void Position::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:handsmotion.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Position::CopyFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:handsmotion.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Position::IsInitialized() const {
  return true;
}

void Position::Swap(Position* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Position::InternalSwap(Position* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Position::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MarkAsOriginalPositionRequest::InitAsDefaultInstance() {
}
class MarkAsOriginalPositionRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarkAsOriginalPositionRequest::MarkAsOriginalPositionRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:handsmotion.MarkAsOriginalPositionRequest)
}
MarkAsOriginalPositionRequest::MarkAsOriginalPositionRequest(const MarkAsOriginalPositionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:handsmotion.MarkAsOriginalPositionRequest)
}

void MarkAsOriginalPositionRequest::SharedCtor() {
}

MarkAsOriginalPositionRequest::~MarkAsOriginalPositionRequest() {
  // @@protoc_insertion_point(destructor:handsmotion.MarkAsOriginalPositionRequest)
  SharedDtor();
}

void MarkAsOriginalPositionRequest::SharedDtor() {
}

void MarkAsOriginalPositionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MarkAsOriginalPositionRequest& MarkAsOriginalPositionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MarkAsOriginalPositionRequest_capability_2eproto.base);
  return *internal_default_instance();
}


void MarkAsOriginalPositionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:handsmotion.MarkAsOriginalPositionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MarkAsOriginalPositionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MarkAsOriginalPositionRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:handsmotion.MarkAsOriginalPositionRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:handsmotion.MarkAsOriginalPositionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:handsmotion.MarkAsOriginalPositionRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MarkAsOriginalPositionRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:handsmotion.MarkAsOriginalPositionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:handsmotion.MarkAsOriginalPositionRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* MarkAsOriginalPositionRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:handsmotion.MarkAsOriginalPositionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:handsmotion.MarkAsOriginalPositionRequest)
  return target;
}

size_t MarkAsOriginalPositionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:handsmotion.MarkAsOriginalPositionRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarkAsOriginalPositionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:handsmotion.MarkAsOriginalPositionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MarkAsOriginalPositionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MarkAsOriginalPositionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:handsmotion.MarkAsOriginalPositionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:handsmotion.MarkAsOriginalPositionRequest)
    MergeFrom(*source);
  }
}

void MarkAsOriginalPositionRequest::MergeFrom(const MarkAsOriginalPositionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:handsmotion.MarkAsOriginalPositionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MarkAsOriginalPositionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:handsmotion.MarkAsOriginalPositionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarkAsOriginalPositionRequest::CopyFrom(const MarkAsOriginalPositionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:handsmotion.MarkAsOriginalPositionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarkAsOriginalPositionRequest::IsInitialized() const {
  return true;
}

void MarkAsOriginalPositionRequest::Swap(MarkAsOriginalPositionRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarkAsOriginalPositionRequest::InternalSwap(MarkAsOriginalPositionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MarkAsOriginalPositionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MarkAsOriginalPositionResponse::InitAsDefaultInstance() {
}
class MarkAsOriginalPositionResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarkAsOriginalPositionResponse::MarkAsOriginalPositionResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:handsmotion.MarkAsOriginalPositionResponse)
}
MarkAsOriginalPositionResponse::MarkAsOriginalPositionResponse(const MarkAsOriginalPositionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:handsmotion.MarkAsOriginalPositionResponse)
}

void MarkAsOriginalPositionResponse::SharedCtor() {
}

MarkAsOriginalPositionResponse::~MarkAsOriginalPositionResponse() {
  // @@protoc_insertion_point(destructor:handsmotion.MarkAsOriginalPositionResponse)
  SharedDtor();
}

void MarkAsOriginalPositionResponse::SharedDtor() {
}

void MarkAsOriginalPositionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MarkAsOriginalPositionResponse& MarkAsOriginalPositionResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MarkAsOriginalPositionResponse_capability_2eproto.base);
  return *internal_default_instance();
}


void MarkAsOriginalPositionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:handsmotion.MarkAsOriginalPositionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MarkAsOriginalPositionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MarkAsOriginalPositionResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:handsmotion.MarkAsOriginalPositionResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:handsmotion.MarkAsOriginalPositionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:handsmotion.MarkAsOriginalPositionResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MarkAsOriginalPositionResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:handsmotion.MarkAsOriginalPositionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:handsmotion.MarkAsOriginalPositionResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* MarkAsOriginalPositionResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:handsmotion.MarkAsOriginalPositionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:handsmotion.MarkAsOriginalPositionResponse)
  return target;
}

size_t MarkAsOriginalPositionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:handsmotion.MarkAsOriginalPositionResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarkAsOriginalPositionResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:handsmotion.MarkAsOriginalPositionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MarkAsOriginalPositionResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MarkAsOriginalPositionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:handsmotion.MarkAsOriginalPositionResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:handsmotion.MarkAsOriginalPositionResponse)
    MergeFrom(*source);
  }
}

void MarkAsOriginalPositionResponse::MergeFrom(const MarkAsOriginalPositionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:handsmotion.MarkAsOriginalPositionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MarkAsOriginalPositionResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:handsmotion.MarkAsOriginalPositionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarkAsOriginalPositionResponse::CopyFrom(const MarkAsOriginalPositionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:handsmotion.MarkAsOriginalPositionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarkAsOriginalPositionResponse::IsInitialized() const {
  return true;
}

void MarkAsOriginalPositionResponse::Swap(MarkAsOriginalPositionResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarkAsOriginalPositionResponse::InternalSwap(MarkAsOriginalPositionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MarkAsOriginalPositionResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MovementScript::InitAsDefaultInstance() {
  ::handsmotion::_MovementScript_default_instance_._instance.get_mutable()->position_ = const_cast< ::handsmotion::Position*>(
      ::handsmotion::Position::internal_default_instance());
}
class MovementScript::HasBitSetters {
 public:
  static const ::handsmotion::Position& position(const MovementScript* msg);
};

const ::handsmotion::Position&
MovementScript::HasBitSetters::position(const MovementScript* msg) {
  return *msg->position_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MovementScript::kPositionFieldNumber;
const int MovementScript::kRunTimeFieldNumber;
const int MovementScript::kKeepTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MovementScript::MovementScript()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:handsmotion.MovementScript)
}
MovementScript::MovementScript(const MovementScript& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_position()) {
    position_ = new ::handsmotion::Position(*from.position_);
  } else {
    position_ = nullptr;
  }
  ::memcpy(&run_time_, &from.run_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&keep_time_) -
    reinterpret_cast<char*>(&run_time_)) + sizeof(keep_time_));
  // @@protoc_insertion_point(copy_constructor:handsmotion.MovementScript)
}

void MovementScript::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MovementScript_capability_2eproto.base);
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&keep_time_) -
      reinterpret_cast<char*>(&position_)) + sizeof(keep_time_));
}

MovementScript::~MovementScript() {
  // @@protoc_insertion_point(destructor:handsmotion.MovementScript)
  SharedDtor();
}

void MovementScript::SharedDtor() {
  if (this != internal_default_instance()) delete position_;
}

void MovementScript::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MovementScript& MovementScript::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MovementScript_capability_2eproto.base);
  return *internal_default_instance();
}


void MovementScript::Clear() {
// @@protoc_insertion_point(message_clear_start:handsmotion.MovementScript)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  ::memset(&run_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&keep_time_) -
      reinterpret_cast<char*>(&run_time_)) + sizeof(keep_time_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MovementScript::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .handsmotion.Position position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 run_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          run_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 keep_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          keep_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MovementScript::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:handsmotion.MovementScript)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .handsmotion.Position position = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 run_time = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &run_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 keep_time = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &keep_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:handsmotion.MovementScript)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:handsmotion.MovementScript)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MovementScript::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:handsmotion.MovementScript)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .handsmotion.Position position = 1;
  if (this->has_position()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::position(this), output);
  }

  // int32 run_time = 2;
  if (this->run_time() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->run_time(), output);
  }

  // int32 keep_time = 3;
  if (this->keep_time() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->keep_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:handsmotion.MovementScript)
}

::PROTOBUF_NAMESPACE_ID::uint8* MovementScript::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:handsmotion.MovementScript)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .handsmotion.Position position = 1;
  if (this->has_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::position(this), target);
  }

  // int32 run_time = 2;
  if (this->run_time() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->run_time(), target);
  }

  // int32 keep_time = 3;
  if (this->keep_time() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->keep_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:handsmotion.MovementScript)
  return target;
}

size_t MovementScript::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:handsmotion.MovementScript)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .handsmotion.Position position = 1;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // int32 run_time = 2;
  if (this->run_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->run_time());
  }

  // int32 keep_time = 3;
  if (this->keep_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->keep_time());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MovementScript::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:handsmotion.MovementScript)
  GOOGLE_DCHECK_NE(&from, this);
  const MovementScript* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MovementScript>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:handsmotion.MovementScript)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:handsmotion.MovementScript)
    MergeFrom(*source);
  }
}

void MovementScript::MergeFrom(const MovementScript& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:handsmotion.MovementScript)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_position()) {
    mutable_position()->::handsmotion::Position::MergeFrom(from.position());
  }
  if (from.run_time() != 0) {
    set_run_time(from.run_time());
  }
  if (from.keep_time() != 0) {
    set_keep_time(from.keep_time());
  }
}

void MovementScript::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:handsmotion.MovementScript)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MovementScript::CopyFrom(const MovementScript& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:handsmotion.MovementScript)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MovementScript::IsInitialized() const {
  return true;
}

void MovementScript::Swap(MovementScript* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MovementScript::InternalSwap(MovementScript* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(position_, other->position_);
  swap(run_time_, other->run_time_);
  swap(keep_time_, other->keep_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MovementScript::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetAbsolutePositionRequest::InitAsDefaultInstance() {
}
class GetAbsolutePositionRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetAbsolutePositionRequest::GetAbsolutePositionRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:handsmotion.GetAbsolutePositionRequest)
}
GetAbsolutePositionRequest::GetAbsolutePositionRequest(const GetAbsolutePositionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:handsmotion.GetAbsolutePositionRequest)
}

void GetAbsolutePositionRequest::SharedCtor() {
}

GetAbsolutePositionRequest::~GetAbsolutePositionRequest() {
  // @@protoc_insertion_point(destructor:handsmotion.GetAbsolutePositionRequest)
  SharedDtor();
}

void GetAbsolutePositionRequest::SharedDtor() {
}

void GetAbsolutePositionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetAbsolutePositionRequest& GetAbsolutePositionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetAbsolutePositionRequest_capability_2eproto.base);
  return *internal_default_instance();
}


void GetAbsolutePositionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:handsmotion.GetAbsolutePositionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetAbsolutePositionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetAbsolutePositionRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:handsmotion.GetAbsolutePositionRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:handsmotion.GetAbsolutePositionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:handsmotion.GetAbsolutePositionRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetAbsolutePositionRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:handsmotion.GetAbsolutePositionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:handsmotion.GetAbsolutePositionRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAbsolutePositionRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:handsmotion.GetAbsolutePositionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:handsmotion.GetAbsolutePositionRequest)
  return target;
}

size_t GetAbsolutePositionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:handsmotion.GetAbsolutePositionRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAbsolutePositionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:handsmotion.GetAbsolutePositionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAbsolutePositionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetAbsolutePositionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:handsmotion.GetAbsolutePositionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:handsmotion.GetAbsolutePositionRequest)
    MergeFrom(*source);
  }
}

void GetAbsolutePositionRequest::MergeFrom(const GetAbsolutePositionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:handsmotion.GetAbsolutePositionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetAbsolutePositionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:handsmotion.GetAbsolutePositionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAbsolutePositionRequest::CopyFrom(const GetAbsolutePositionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:handsmotion.GetAbsolutePositionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAbsolutePositionRequest::IsInitialized() const {
  return true;
}

void GetAbsolutePositionRequest::Swap(GetAbsolutePositionRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetAbsolutePositionRequest::InternalSwap(GetAbsolutePositionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAbsolutePositionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetAbsolutePositionResponse::InitAsDefaultInstance() {
  ::handsmotion::_GetAbsolutePositionResponse_default_instance_._instance.get_mutable()->position_ = const_cast< ::handsmotion::Position*>(
      ::handsmotion::Position::internal_default_instance());
}
class GetAbsolutePositionResponse::HasBitSetters {
 public:
  static const ::handsmotion::Position& position(const GetAbsolutePositionResponse* msg);
};

const ::handsmotion::Position&
GetAbsolutePositionResponse::HasBitSetters::position(const GetAbsolutePositionResponse* msg) {
  return *msg->position_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetAbsolutePositionResponse::kPositionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetAbsolutePositionResponse::GetAbsolutePositionResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:handsmotion.GetAbsolutePositionResponse)
}
GetAbsolutePositionResponse::GetAbsolutePositionResponse(const GetAbsolutePositionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_position()) {
    position_ = new ::handsmotion::Position(*from.position_);
  } else {
    position_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:handsmotion.GetAbsolutePositionResponse)
}

void GetAbsolutePositionResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetAbsolutePositionResponse_capability_2eproto.base);
  position_ = nullptr;
}

GetAbsolutePositionResponse::~GetAbsolutePositionResponse() {
  // @@protoc_insertion_point(destructor:handsmotion.GetAbsolutePositionResponse)
  SharedDtor();
}

void GetAbsolutePositionResponse::SharedDtor() {
  if (this != internal_default_instance()) delete position_;
}

void GetAbsolutePositionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetAbsolutePositionResponse& GetAbsolutePositionResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetAbsolutePositionResponse_capability_2eproto.base);
  return *internal_default_instance();
}


void GetAbsolutePositionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:handsmotion.GetAbsolutePositionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetAbsolutePositionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .handsmotion.Position position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetAbsolutePositionResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:handsmotion.GetAbsolutePositionResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .handsmotion.Position position = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:handsmotion.GetAbsolutePositionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:handsmotion.GetAbsolutePositionResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetAbsolutePositionResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:handsmotion.GetAbsolutePositionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .handsmotion.Position position = 1;
  if (this->has_position()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::position(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:handsmotion.GetAbsolutePositionResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAbsolutePositionResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:handsmotion.GetAbsolutePositionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .handsmotion.Position position = 1;
  if (this->has_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::position(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:handsmotion.GetAbsolutePositionResponse)
  return target;
}

size_t GetAbsolutePositionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:handsmotion.GetAbsolutePositionResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .handsmotion.Position position = 1;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAbsolutePositionResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:handsmotion.GetAbsolutePositionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAbsolutePositionResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetAbsolutePositionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:handsmotion.GetAbsolutePositionResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:handsmotion.GetAbsolutePositionResponse)
    MergeFrom(*source);
  }
}

void GetAbsolutePositionResponse::MergeFrom(const GetAbsolutePositionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:handsmotion.GetAbsolutePositionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_position()) {
    mutable_position()->::handsmotion::Position::MergeFrom(from.position());
  }
}

void GetAbsolutePositionResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:handsmotion.GetAbsolutePositionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAbsolutePositionResponse::CopyFrom(const GetAbsolutePositionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:handsmotion.GetAbsolutePositionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAbsolutePositionResponse::IsInitialized() const {
  return true;
}

void GetAbsolutePositionResponse::Swap(GetAbsolutePositionResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetAbsolutePositionResponse::InternalSwap(GetAbsolutePositionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(position_, other->position_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAbsolutePositionResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AbsoluteMoveRequest::InitAsDefaultInstance() {
}
class AbsoluteMoveRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AbsoluteMoveRequest::kScriptsFieldNumber;
const int AbsoluteMoveRequest::kSyncModeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AbsoluteMoveRequest::AbsoluteMoveRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:handsmotion.AbsoluteMoveRequest)
}
AbsoluteMoveRequest::AbsoluteMoveRequest(const AbsoluteMoveRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      scripts_(from.scripts_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sync_mode_ = from.sync_mode_;
  // @@protoc_insertion_point(copy_constructor:handsmotion.AbsoluteMoveRequest)
}

void AbsoluteMoveRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AbsoluteMoveRequest_capability_2eproto.base);
  sync_mode_ = false;
}

AbsoluteMoveRequest::~AbsoluteMoveRequest() {
  // @@protoc_insertion_point(destructor:handsmotion.AbsoluteMoveRequest)
  SharedDtor();
}

void AbsoluteMoveRequest::SharedDtor() {
}

void AbsoluteMoveRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AbsoluteMoveRequest& AbsoluteMoveRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AbsoluteMoveRequest_capability_2eproto.base);
  return *internal_default_instance();
}


void AbsoluteMoveRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:handsmotion.AbsoluteMoveRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  scripts_.Clear();
  sync_mode_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AbsoluteMoveRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .handsmotion.MovementScript scripts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_scripts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // bool sync_mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          sync_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AbsoluteMoveRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:handsmotion.AbsoluteMoveRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .handsmotion.MovementScript scripts = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_scripts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool sync_mode = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sync_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:handsmotion.AbsoluteMoveRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:handsmotion.AbsoluteMoveRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AbsoluteMoveRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:handsmotion.AbsoluteMoveRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .handsmotion.MovementScript scripts = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->scripts_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->scripts(static_cast<int>(i)),
      output);
  }

  // bool sync_mode = 2;
  if (this->sync_mode() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->sync_mode(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:handsmotion.AbsoluteMoveRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* AbsoluteMoveRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:handsmotion.AbsoluteMoveRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .handsmotion.MovementScript scripts = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->scripts_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->scripts(static_cast<int>(i)), target);
  }

  // bool sync_mode = 2;
  if (this->sync_mode() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->sync_mode(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:handsmotion.AbsoluteMoveRequest)
  return target;
}

size_t AbsoluteMoveRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:handsmotion.AbsoluteMoveRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .handsmotion.MovementScript scripts = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->scripts_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->scripts(static_cast<int>(i)));
    }
  }

  // bool sync_mode = 2;
  if (this->sync_mode() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AbsoluteMoveRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:handsmotion.AbsoluteMoveRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AbsoluteMoveRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AbsoluteMoveRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:handsmotion.AbsoluteMoveRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:handsmotion.AbsoluteMoveRequest)
    MergeFrom(*source);
  }
}

void AbsoluteMoveRequest::MergeFrom(const AbsoluteMoveRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:handsmotion.AbsoluteMoveRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  scripts_.MergeFrom(from.scripts_);
  if (from.sync_mode() != 0) {
    set_sync_mode(from.sync_mode());
  }
}

void AbsoluteMoveRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:handsmotion.AbsoluteMoveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AbsoluteMoveRequest::CopyFrom(const AbsoluteMoveRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:handsmotion.AbsoluteMoveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AbsoluteMoveRequest::IsInitialized() const {
  return true;
}

void AbsoluteMoveRequest::Swap(AbsoluteMoveRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AbsoluteMoveRequest::InternalSwap(AbsoluteMoveRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&scripts_)->InternalSwap(CastToBase(&other->scripts_));
  swap(sync_mode_, other->sync_mode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AbsoluteMoveRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AbsoluteMoveResponse::InitAsDefaultInstance() {
}
class AbsoluteMoveResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AbsoluteMoveResponse::AbsoluteMoveResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:handsmotion.AbsoluteMoveResponse)
}
AbsoluteMoveResponse::AbsoluteMoveResponse(const AbsoluteMoveResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:handsmotion.AbsoluteMoveResponse)
}

void AbsoluteMoveResponse::SharedCtor() {
}

AbsoluteMoveResponse::~AbsoluteMoveResponse() {
  // @@protoc_insertion_point(destructor:handsmotion.AbsoluteMoveResponse)
  SharedDtor();
}

void AbsoluteMoveResponse::SharedDtor() {
}

void AbsoluteMoveResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AbsoluteMoveResponse& AbsoluteMoveResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AbsoluteMoveResponse_capability_2eproto.base);
  return *internal_default_instance();
}


void AbsoluteMoveResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:handsmotion.AbsoluteMoveResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AbsoluteMoveResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AbsoluteMoveResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:handsmotion.AbsoluteMoveResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:handsmotion.AbsoluteMoveResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:handsmotion.AbsoluteMoveResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AbsoluteMoveResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:handsmotion.AbsoluteMoveResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:handsmotion.AbsoluteMoveResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* AbsoluteMoveResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:handsmotion.AbsoluteMoveResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:handsmotion.AbsoluteMoveResponse)
  return target;
}

size_t AbsoluteMoveResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:handsmotion.AbsoluteMoveResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AbsoluteMoveResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:handsmotion.AbsoluteMoveResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AbsoluteMoveResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AbsoluteMoveResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:handsmotion.AbsoluteMoveResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:handsmotion.AbsoluteMoveResponse)
    MergeFrom(*source);
  }
}

void AbsoluteMoveResponse::MergeFrom(const AbsoluteMoveResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:handsmotion.AbsoluteMoveResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void AbsoluteMoveResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:handsmotion.AbsoluteMoveResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AbsoluteMoveResponse::CopyFrom(const AbsoluteMoveResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:handsmotion.AbsoluteMoveResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AbsoluteMoveResponse::IsInitialized() const {
  return true;
}

void AbsoluteMoveResponse::Swap(AbsoluteMoveResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AbsoluteMoveResponse::InternalSwap(AbsoluteMoveResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AbsoluteMoveResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace handsmotion
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::handsmotion::FingersAdjustmentRequest_FingerMove* Arena::CreateMaybeMessage< ::handsmotion::FingersAdjustmentRequest_FingerMove >(Arena* arena) {
  return Arena::CreateInternal< ::handsmotion::FingersAdjustmentRequest_FingerMove >(arena);
}
template<> PROTOBUF_NOINLINE ::handsmotion::FingersAdjustmentRequest* Arena::CreateMaybeMessage< ::handsmotion::FingersAdjustmentRequest >(Arena* arena) {
  return Arena::CreateInternal< ::handsmotion::FingersAdjustmentRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::handsmotion::FingersAdjustmentResponse* Arena::CreateMaybeMessage< ::handsmotion::FingersAdjustmentResponse >(Arena* arena) {
  return Arena::CreateInternal< ::handsmotion::FingersAdjustmentResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::handsmotion::ArmAdjustmentRequest* Arena::CreateMaybeMessage< ::handsmotion::ArmAdjustmentRequest >(Arena* arena) {
  return Arena::CreateInternal< ::handsmotion::ArmAdjustmentRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::handsmotion::ArmAdjustmentResponse* Arena::CreateMaybeMessage< ::handsmotion::ArmAdjustmentResponse >(Arena* arena) {
  return Arena::CreateInternal< ::handsmotion::ArmAdjustmentResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::handsmotion::Position* Arena::CreateMaybeMessage< ::handsmotion::Position >(Arena* arena) {
  return Arena::CreateInternal< ::handsmotion::Position >(arena);
}
template<> PROTOBUF_NOINLINE ::handsmotion::MarkAsOriginalPositionRequest* Arena::CreateMaybeMessage< ::handsmotion::MarkAsOriginalPositionRequest >(Arena* arena) {
  return Arena::CreateInternal< ::handsmotion::MarkAsOriginalPositionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::handsmotion::MarkAsOriginalPositionResponse* Arena::CreateMaybeMessage< ::handsmotion::MarkAsOriginalPositionResponse >(Arena* arena) {
  return Arena::CreateInternal< ::handsmotion::MarkAsOriginalPositionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::handsmotion::MovementScript* Arena::CreateMaybeMessage< ::handsmotion::MovementScript >(Arena* arena) {
  return Arena::CreateInternal< ::handsmotion::MovementScript >(arena);
}
template<> PROTOBUF_NOINLINE ::handsmotion::GetAbsolutePositionRequest* Arena::CreateMaybeMessage< ::handsmotion::GetAbsolutePositionRequest >(Arena* arena) {
  return Arena::CreateInternal< ::handsmotion::GetAbsolutePositionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::handsmotion::GetAbsolutePositionResponse* Arena::CreateMaybeMessage< ::handsmotion::GetAbsolutePositionResponse >(Arena* arena) {
  return Arena::CreateInternal< ::handsmotion::GetAbsolutePositionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::handsmotion::AbsoluteMoveRequest* Arena::CreateMaybeMessage< ::handsmotion::AbsoluteMoveRequest >(Arena* arena) {
  return Arena::CreateInternal< ::handsmotion::AbsoluteMoveRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::handsmotion::AbsoluteMoveResponse* Arena::CreateMaybeMessage< ::handsmotion::AbsoluteMoveResponse >(Arena* arena) {
  return Arena::CreateInternal< ::handsmotion::AbsoluteMoveResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
