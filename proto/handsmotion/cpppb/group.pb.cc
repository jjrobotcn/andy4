// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: group.proto

#include "group.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_group_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MotionMeta_group_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_capability_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MovementScript_capability_2eproto;
namespace handsmotion {
class MotionMetaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MotionMeta> _instance;
} _MotionMeta_default_instance_;
class NewMotionGroupRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NewMotionGroupRequest> _instance;
} _NewMotionGroupRequest_default_instance_;
class NewMotionGroupResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NewMotionGroupResponse> _instance;
} _NewMotionGroupResponse_default_instance_;
class ListMotionGroupsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListMotionGroupsRequest> _instance;
} _ListMotionGroupsRequest_default_instance_;
class ListMotionGroupsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListMotionGroupsResponse> _instance;
} _ListMotionGroupsResponse_default_instance_;
class DeleteMotionGroupRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteMotionGroupRequest> _instance;
} _DeleteMotionGroupRequest_default_instance_;
class DeleteMotionGroupResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteMotionGroupResponse> _instance;
} _DeleteMotionGroupResponse_default_instance_;
class GetMotionGroupRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetMotionGroupRequest> _instance;
} _GetMotionGroupRequest_default_instance_;
class GetMotionGroupResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetMotionGroupResponse> _instance;
} _GetMotionGroupResponse_default_instance_;
class UpdateMotionMetaRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateMotionMetaRequest> _instance;
} _UpdateMotionMetaRequest_default_instance_;
class UpdateMotionMetaResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateMotionMetaResponse> _instance;
} _UpdateMotionMetaResponse_default_instance_;
class UpdateMotionScriptsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateMotionScriptsRequest> _instance;
} _UpdateMotionScriptsRequest_default_instance_;
class UpdateMotionScriptsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateMotionScriptsResponse> _instance;
} _UpdateMotionScriptsResponse_default_instance_;
}  // namespace handsmotion
static void InitDefaultsscc_info_DeleteMotionGroupRequest_group_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::handsmotion::_DeleteMotionGroupRequest_default_instance_;
    new (ptr) ::handsmotion::DeleteMotionGroupRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::handsmotion::DeleteMotionGroupRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteMotionGroupRequest_group_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DeleteMotionGroupRequest_group_2eproto}, {}};

static void InitDefaultsscc_info_DeleteMotionGroupResponse_group_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::handsmotion::_DeleteMotionGroupResponse_default_instance_;
    new (ptr) ::handsmotion::DeleteMotionGroupResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::handsmotion::DeleteMotionGroupResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteMotionGroupResponse_group_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DeleteMotionGroupResponse_group_2eproto}, {}};

static void InitDefaultsscc_info_GetMotionGroupRequest_group_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::handsmotion::_GetMotionGroupRequest_default_instance_;
    new (ptr) ::handsmotion::GetMotionGroupRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::handsmotion::GetMotionGroupRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetMotionGroupRequest_group_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GetMotionGroupRequest_group_2eproto}, {}};

static void InitDefaultsscc_info_GetMotionGroupResponse_group_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::handsmotion::_GetMotionGroupResponse_default_instance_;
    new (ptr) ::handsmotion::GetMotionGroupResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::handsmotion::GetMotionGroupResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetMotionGroupResponse_group_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_GetMotionGroupResponse_group_2eproto}, {
      &scc_info_MotionMeta_group_2eproto.base,
      &scc_info_MovementScript_capability_2eproto.base,}};

static void InitDefaultsscc_info_ListMotionGroupsRequest_group_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::handsmotion::_ListMotionGroupsRequest_default_instance_;
    new (ptr) ::handsmotion::ListMotionGroupsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::handsmotion::ListMotionGroupsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListMotionGroupsRequest_group_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ListMotionGroupsRequest_group_2eproto}, {}};

static void InitDefaultsscc_info_ListMotionGroupsResponse_group_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::handsmotion::_ListMotionGroupsResponse_default_instance_;
    new (ptr) ::handsmotion::ListMotionGroupsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::handsmotion::ListMotionGroupsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListMotionGroupsResponse_group_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ListMotionGroupsResponse_group_2eproto}, {
      &scc_info_MotionMeta_group_2eproto.base,}};

static void InitDefaultsscc_info_MotionMeta_group_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::handsmotion::_MotionMeta_default_instance_;
    new (ptr) ::handsmotion::MotionMeta();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::handsmotion::MotionMeta::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MotionMeta_group_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MotionMeta_group_2eproto}, {}};

static void InitDefaultsscc_info_NewMotionGroupRequest_group_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::handsmotion::_NewMotionGroupRequest_default_instance_;
    new (ptr) ::handsmotion::NewMotionGroupRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::handsmotion::NewMotionGroupRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NewMotionGroupRequest_group_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_NewMotionGroupRequest_group_2eproto}, {}};

static void InitDefaultsscc_info_NewMotionGroupResponse_group_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::handsmotion::_NewMotionGroupResponse_default_instance_;
    new (ptr) ::handsmotion::NewMotionGroupResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::handsmotion::NewMotionGroupResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NewMotionGroupResponse_group_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_NewMotionGroupResponse_group_2eproto}, {
      &scc_info_MotionMeta_group_2eproto.base,}};

static void InitDefaultsscc_info_UpdateMotionMetaRequest_group_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::handsmotion::_UpdateMotionMetaRequest_default_instance_;
    new (ptr) ::handsmotion::UpdateMotionMetaRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::handsmotion::UpdateMotionMetaRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UpdateMotionMetaRequest_group_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_UpdateMotionMetaRequest_group_2eproto}, {
      &scc_info_MotionMeta_group_2eproto.base,}};

static void InitDefaultsscc_info_UpdateMotionMetaResponse_group_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::handsmotion::_UpdateMotionMetaResponse_default_instance_;
    new (ptr) ::handsmotion::UpdateMotionMetaResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::handsmotion::UpdateMotionMetaResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UpdateMotionMetaResponse_group_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_UpdateMotionMetaResponse_group_2eproto}, {}};

static void InitDefaultsscc_info_UpdateMotionScriptsRequest_group_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::handsmotion::_UpdateMotionScriptsRequest_default_instance_;
    new (ptr) ::handsmotion::UpdateMotionScriptsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::handsmotion::UpdateMotionScriptsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UpdateMotionScriptsRequest_group_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_UpdateMotionScriptsRequest_group_2eproto}, {
      &scc_info_MovementScript_capability_2eproto.base,}};

static void InitDefaultsscc_info_UpdateMotionScriptsResponse_group_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::handsmotion::_UpdateMotionScriptsResponse_default_instance_;
    new (ptr) ::handsmotion::UpdateMotionScriptsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::handsmotion::UpdateMotionScriptsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UpdateMotionScriptsResponse_group_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_UpdateMotionScriptsResponse_group_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_group_2eproto[13];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_group_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_group_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_group_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::handsmotion::MotionMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::handsmotion::MotionMeta, id_),
  PROTOBUF_FIELD_OFFSET(::handsmotion::MotionMeta, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::handsmotion::NewMotionGroupRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::handsmotion::NewMotionGroupRequest, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::handsmotion::NewMotionGroupResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::handsmotion::NewMotionGroupResponse, motion_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::handsmotion::ListMotionGroupsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::handsmotion::ListMotionGroupsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::handsmotion::ListMotionGroupsResponse, motions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::handsmotion::DeleteMotionGroupRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::handsmotion::DeleteMotionGroupRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::handsmotion::DeleteMotionGroupResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::handsmotion::GetMotionGroupRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::handsmotion::GetMotionGroupRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::handsmotion::GetMotionGroupResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::handsmotion::GetMotionGroupResponse, meta_),
  PROTOBUF_FIELD_OFFSET(::handsmotion::GetMotionGroupResponse, scripts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::handsmotion::UpdateMotionMetaRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::handsmotion::UpdateMotionMetaRequest, motion_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::handsmotion::UpdateMotionMetaResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::handsmotion::UpdateMotionScriptsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::handsmotion::UpdateMotionScriptsRequest, id_),
  PROTOBUF_FIELD_OFFSET(::handsmotion::UpdateMotionScriptsRequest, scripts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::handsmotion::UpdateMotionScriptsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::handsmotion::MotionMeta)},
  { 7, -1, sizeof(::handsmotion::NewMotionGroupRequest)},
  { 13, -1, sizeof(::handsmotion::NewMotionGroupResponse)},
  { 19, -1, sizeof(::handsmotion::ListMotionGroupsRequest)},
  { 24, -1, sizeof(::handsmotion::ListMotionGroupsResponse)},
  { 30, -1, sizeof(::handsmotion::DeleteMotionGroupRequest)},
  { 36, -1, sizeof(::handsmotion::DeleteMotionGroupResponse)},
  { 41, -1, sizeof(::handsmotion::GetMotionGroupRequest)},
  { 47, -1, sizeof(::handsmotion::GetMotionGroupResponse)},
  { 54, -1, sizeof(::handsmotion::UpdateMotionMetaRequest)},
  { 60, -1, sizeof(::handsmotion::UpdateMotionMetaResponse)},
  { 65, -1, sizeof(::handsmotion::UpdateMotionScriptsRequest)},
  { 72, -1, sizeof(::handsmotion::UpdateMotionScriptsResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::handsmotion::_MotionMeta_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::handsmotion::_NewMotionGroupRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::handsmotion::_NewMotionGroupResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::handsmotion::_ListMotionGroupsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::handsmotion::_ListMotionGroupsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::handsmotion::_DeleteMotionGroupRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::handsmotion::_DeleteMotionGroupResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::handsmotion::_GetMotionGroupRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::handsmotion::_GetMotionGroupResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::handsmotion::_UpdateMotionMetaRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::handsmotion::_UpdateMotionMetaResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::handsmotion::_UpdateMotionScriptsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::handsmotion::_UpdateMotionScriptsResponse_default_instance_),
};

const char descriptor_table_protodef_group_2eproto[] =
  "\n\013group.proto\022\013handsmotion\032\020capability.p"
  "roto\032\034google/api/annotations.proto\"&\n\nMo"
  "tionMeta\022\n\n\002id\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\"%\n\025Ne"
  "wMotionGroupRequest\022\014\n\004name\030\001 \001(\t\"A\n\026New"
  "MotionGroupResponse\022\'\n\006motion\030\001 \001(\0132\027.ha"
  "ndsmotion.MotionMeta\"\031\n\027ListMotionGroups"
  "Request\"D\n\030ListMotionGroupsResponse\022(\n\007m"
  "otions\030\001 \003(\0132\027.handsmotion.MotionMeta\"&\n"
  "\030DeleteMotionGroupRequest\022\n\n\002id\030\001 \001(\t\"\033\n"
  "\031DeleteMotionGroupResponse\"#\n\025GetMotionG"
  "roupRequest\022\n\n\002id\030\001 \001(\t\"m\n\026GetMotionGrou"
  "pResponse\022%\n\004meta\030\001 \001(\0132\027.handsmotion.Mo"
  "tionMeta\022,\n\007scripts\030\002 \003(\0132\033.handsmotion."
  "MovementScript\"B\n\027UpdateMotionMetaReques"
  "t\022\'\n\006motion\030\002 \001(\0132\027.handsmotion.MotionMe"
  "ta\"\032\n\030UpdateMotionMetaResponse\"V\n\032Update"
  "MotionScriptsRequest\022\n\n\002id\030\001 \001(\t\022,\n\007scri"
  "pts\030\002 \003(\0132\033.handsmotion.MovementScript\"\035"
  "\n\033UpdateMotionScriptsResponse2\267\010\n\017GroupM"
  "anagement\022\222\001\n\016NewMotionGroup\022\".handsmoti"
  "on.NewMotionGroupRequest\032#.handsmotion.N"
  "ewMotionGroupResponse\"7\202\323\344\223\0021\",/api/v2/m"
  "otion/hands/groups/new_motion_group:\001*\022\314"
  "\001\n\020ListMotionGroups\022$.handsmotion.ListMo"
  "tionGroupsRequest\032%.handsmotion.ListMoti"
  "onGroupsResponse\"k\202\323\344\223\002e\"./api/v2/motion"
  "/hands/groups/list_motion_groups:\001*Z0\022./"
  "api/v2/motion/hands/groups/list_motion_g"
  "roups\022\236\001\n\021DeleteMotionGroup\022%.handsmotio"
  "n.DeleteMotionGroupRequest\032&.handsmotion"
  ".DeleteMotionGroupResponse\":\202\323\344\223\0024\"//api"
  "/v2/motion/hands/groups/delete_motion_gr"
  "oup:\001*\022\302\001\n\016GetMotionGroup\022\".handsmotion."
  "GetMotionGroupRequest\032#.handsmotion.GetM"
  "otionGroupResponse\"g\202\323\344\223\002a\",/api/v2/moti"
  "on/hands/groups/get_motion_group:\001*Z.\022,/"
  "api/v2/motion/hands/groups/get_motion_gr"
  "oup\022\245\001\n\025UpdateMotionGroupMeta\022$.handsmot"
  "ion.UpdateMotionMetaRequest\032%.handsmotio"
  "n.UpdateMotionMetaResponse\"\?\202\323\344\223\0029\"4/api"
  "/v2/motion/hands/groups/update_motion_gr"
  "oup_meta:\001*\022\261\001\n\030UpdateMotionGroupScripts"
  "\022\'.handsmotion.UpdateMotionScriptsReques"
  "t\032(.handsmotion.UpdateMotionScriptsRespo"
  "nse\"B\202\323\344\223\002<\"7/api/v2/motion/hands/groups"
  "/update_motion_group_scripts:\001*b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_group_2eproto_deps[2] = {
  &::descriptor_table_capability_2eproto,
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_group_2eproto_sccs[13] = {
  &scc_info_DeleteMotionGroupRequest_group_2eproto.base,
  &scc_info_DeleteMotionGroupResponse_group_2eproto.base,
  &scc_info_GetMotionGroupRequest_group_2eproto.base,
  &scc_info_GetMotionGroupResponse_group_2eproto.base,
  &scc_info_ListMotionGroupsRequest_group_2eproto.base,
  &scc_info_ListMotionGroupsResponse_group_2eproto.base,
  &scc_info_MotionMeta_group_2eproto.base,
  &scc_info_NewMotionGroupRequest_group_2eproto.base,
  &scc_info_NewMotionGroupResponse_group_2eproto.base,
  &scc_info_UpdateMotionMetaRequest_group_2eproto.base,
  &scc_info_UpdateMotionMetaResponse_group_2eproto.base,
  &scc_info_UpdateMotionScriptsRequest_group_2eproto.base,
  &scc_info_UpdateMotionScriptsResponse_group_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_group_2eproto_once;
static bool descriptor_table_group_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_group_2eproto = {
  &descriptor_table_group_2eproto_initialized, descriptor_table_protodef_group_2eproto, "group.proto", 1839,
  &descriptor_table_group_2eproto_once, descriptor_table_group_2eproto_sccs, descriptor_table_group_2eproto_deps, 13, 2,
  schemas, file_default_instances, TableStruct_group_2eproto::offsets,
  file_level_metadata_group_2eproto, 13, file_level_enum_descriptors_group_2eproto, file_level_service_descriptors_group_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_group_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_group_2eproto), true);
namespace handsmotion {

// ===================================================================

void MotionMeta::InitAsDefaultInstance() {
}
class MotionMeta::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MotionMeta::kIdFieldNumber;
const int MotionMeta::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MotionMeta::MotionMeta()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:handsmotion.MotionMeta)
}
MotionMeta::MotionMeta(const MotionMeta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:handsmotion.MotionMeta)
}

void MotionMeta::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MotionMeta_group_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MotionMeta::~MotionMeta() {
  // @@protoc_insertion_point(destructor:handsmotion.MotionMeta)
  SharedDtor();
}

void MotionMeta::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MotionMeta::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MotionMeta& MotionMeta::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MotionMeta_group_2eproto.base);
  return *internal_default_instance();
}


void MotionMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:handsmotion.MotionMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MotionMeta::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_id(), ptr, ctx, "handsmotion.MotionMeta.id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "handsmotion.MotionMeta.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MotionMeta::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:handsmotion.MotionMeta)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "handsmotion.MotionMeta.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "handsmotion.MotionMeta.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:handsmotion.MotionMeta)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:handsmotion.MotionMeta)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MotionMeta::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:handsmotion.MotionMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "handsmotion.MotionMeta.id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "handsmotion.MotionMeta.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:handsmotion.MotionMeta)
}

::PROTOBUF_NAMESPACE_ID::uint8* MotionMeta::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:handsmotion.MotionMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "handsmotion.MotionMeta.id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "handsmotion.MotionMeta.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:handsmotion.MotionMeta)
  return target;
}

size_t MotionMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:handsmotion.MotionMeta)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MotionMeta::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:handsmotion.MotionMeta)
  GOOGLE_DCHECK_NE(&from, this);
  const MotionMeta* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MotionMeta>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:handsmotion.MotionMeta)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:handsmotion.MotionMeta)
    MergeFrom(*source);
  }
}

void MotionMeta::MergeFrom(const MotionMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:handsmotion.MotionMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void MotionMeta::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:handsmotion.MotionMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MotionMeta::CopyFrom(const MotionMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:handsmotion.MotionMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MotionMeta::IsInitialized() const {
  return true;
}

void MotionMeta::Swap(MotionMeta* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MotionMeta::InternalSwap(MotionMeta* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata MotionMeta::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NewMotionGroupRequest::InitAsDefaultInstance() {
}
class NewMotionGroupRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NewMotionGroupRequest::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NewMotionGroupRequest::NewMotionGroupRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:handsmotion.NewMotionGroupRequest)
}
NewMotionGroupRequest::NewMotionGroupRequest(const NewMotionGroupRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:handsmotion.NewMotionGroupRequest)
}

void NewMotionGroupRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NewMotionGroupRequest_group_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

NewMotionGroupRequest::~NewMotionGroupRequest() {
  // @@protoc_insertion_point(destructor:handsmotion.NewMotionGroupRequest)
  SharedDtor();
}

void NewMotionGroupRequest::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NewMotionGroupRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NewMotionGroupRequest& NewMotionGroupRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NewMotionGroupRequest_group_2eproto.base);
  return *internal_default_instance();
}


void NewMotionGroupRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:handsmotion.NewMotionGroupRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NewMotionGroupRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "handsmotion.NewMotionGroupRequest.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NewMotionGroupRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:handsmotion.NewMotionGroupRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "handsmotion.NewMotionGroupRequest.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:handsmotion.NewMotionGroupRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:handsmotion.NewMotionGroupRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NewMotionGroupRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:handsmotion.NewMotionGroupRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "handsmotion.NewMotionGroupRequest.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:handsmotion.NewMotionGroupRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* NewMotionGroupRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:handsmotion.NewMotionGroupRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "handsmotion.NewMotionGroupRequest.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:handsmotion.NewMotionGroupRequest)
  return target;
}

size_t NewMotionGroupRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:handsmotion.NewMotionGroupRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NewMotionGroupRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:handsmotion.NewMotionGroupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const NewMotionGroupRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NewMotionGroupRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:handsmotion.NewMotionGroupRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:handsmotion.NewMotionGroupRequest)
    MergeFrom(*source);
  }
}

void NewMotionGroupRequest::MergeFrom(const NewMotionGroupRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:handsmotion.NewMotionGroupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void NewMotionGroupRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:handsmotion.NewMotionGroupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewMotionGroupRequest::CopyFrom(const NewMotionGroupRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:handsmotion.NewMotionGroupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewMotionGroupRequest::IsInitialized() const {
  return true;
}

void NewMotionGroupRequest::Swap(NewMotionGroupRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NewMotionGroupRequest::InternalSwap(NewMotionGroupRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata NewMotionGroupRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NewMotionGroupResponse::InitAsDefaultInstance() {
  ::handsmotion::_NewMotionGroupResponse_default_instance_._instance.get_mutable()->motion_ = const_cast< ::handsmotion::MotionMeta*>(
      ::handsmotion::MotionMeta::internal_default_instance());
}
class NewMotionGroupResponse::HasBitSetters {
 public:
  static const ::handsmotion::MotionMeta& motion(const NewMotionGroupResponse* msg);
};

const ::handsmotion::MotionMeta&
NewMotionGroupResponse::HasBitSetters::motion(const NewMotionGroupResponse* msg) {
  return *msg->motion_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NewMotionGroupResponse::kMotionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NewMotionGroupResponse::NewMotionGroupResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:handsmotion.NewMotionGroupResponse)
}
NewMotionGroupResponse::NewMotionGroupResponse(const NewMotionGroupResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_motion()) {
    motion_ = new ::handsmotion::MotionMeta(*from.motion_);
  } else {
    motion_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:handsmotion.NewMotionGroupResponse)
}

void NewMotionGroupResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NewMotionGroupResponse_group_2eproto.base);
  motion_ = nullptr;
}

NewMotionGroupResponse::~NewMotionGroupResponse() {
  // @@protoc_insertion_point(destructor:handsmotion.NewMotionGroupResponse)
  SharedDtor();
}

void NewMotionGroupResponse::SharedDtor() {
  if (this != internal_default_instance()) delete motion_;
}

void NewMotionGroupResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NewMotionGroupResponse& NewMotionGroupResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NewMotionGroupResponse_group_2eproto.base);
  return *internal_default_instance();
}


void NewMotionGroupResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:handsmotion.NewMotionGroupResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && motion_ != nullptr) {
    delete motion_;
  }
  motion_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NewMotionGroupResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .handsmotion.MotionMeta motion = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_motion(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NewMotionGroupResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:handsmotion.NewMotionGroupResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .handsmotion.MotionMeta motion = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_motion()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:handsmotion.NewMotionGroupResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:handsmotion.NewMotionGroupResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NewMotionGroupResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:handsmotion.NewMotionGroupResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .handsmotion.MotionMeta motion = 1;
  if (this->has_motion()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::motion(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:handsmotion.NewMotionGroupResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* NewMotionGroupResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:handsmotion.NewMotionGroupResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .handsmotion.MotionMeta motion = 1;
  if (this->has_motion()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::motion(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:handsmotion.NewMotionGroupResponse)
  return target;
}

size_t NewMotionGroupResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:handsmotion.NewMotionGroupResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .handsmotion.MotionMeta motion = 1;
  if (this->has_motion()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *motion_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NewMotionGroupResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:handsmotion.NewMotionGroupResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const NewMotionGroupResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NewMotionGroupResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:handsmotion.NewMotionGroupResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:handsmotion.NewMotionGroupResponse)
    MergeFrom(*source);
  }
}

void NewMotionGroupResponse::MergeFrom(const NewMotionGroupResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:handsmotion.NewMotionGroupResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_motion()) {
    mutable_motion()->::handsmotion::MotionMeta::MergeFrom(from.motion());
  }
}

void NewMotionGroupResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:handsmotion.NewMotionGroupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewMotionGroupResponse::CopyFrom(const NewMotionGroupResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:handsmotion.NewMotionGroupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewMotionGroupResponse::IsInitialized() const {
  return true;
}

void NewMotionGroupResponse::Swap(NewMotionGroupResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NewMotionGroupResponse::InternalSwap(NewMotionGroupResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(motion_, other->motion_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NewMotionGroupResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListMotionGroupsRequest::InitAsDefaultInstance() {
}
class ListMotionGroupsRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListMotionGroupsRequest::ListMotionGroupsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:handsmotion.ListMotionGroupsRequest)
}
ListMotionGroupsRequest::ListMotionGroupsRequest(const ListMotionGroupsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:handsmotion.ListMotionGroupsRequest)
}

void ListMotionGroupsRequest::SharedCtor() {
}

ListMotionGroupsRequest::~ListMotionGroupsRequest() {
  // @@protoc_insertion_point(destructor:handsmotion.ListMotionGroupsRequest)
  SharedDtor();
}

void ListMotionGroupsRequest::SharedDtor() {
}

void ListMotionGroupsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListMotionGroupsRequest& ListMotionGroupsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListMotionGroupsRequest_group_2eproto.base);
  return *internal_default_instance();
}


void ListMotionGroupsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:handsmotion.ListMotionGroupsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ListMotionGroupsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ListMotionGroupsRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:handsmotion.ListMotionGroupsRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:handsmotion.ListMotionGroupsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:handsmotion.ListMotionGroupsRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ListMotionGroupsRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:handsmotion.ListMotionGroupsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:handsmotion.ListMotionGroupsRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* ListMotionGroupsRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:handsmotion.ListMotionGroupsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:handsmotion.ListMotionGroupsRequest)
  return target;
}

size_t ListMotionGroupsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:handsmotion.ListMotionGroupsRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListMotionGroupsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:handsmotion.ListMotionGroupsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListMotionGroupsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListMotionGroupsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:handsmotion.ListMotionGroupsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:handsmotion.ListMotionGroupsRequest)
    MergeFrom(*source);
  }
}

void ListMotionGroupsRequest::MergeFrom(const ListMotionGroupsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:handsmotion.ListMotionGroupsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ListMotionGroupsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:handsmotion.ListMotionGroupsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListMotionGroupsRequest::CopyFrom(const ListMotionGroupsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:handsmotion.ListMotionGroupsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListMotionGroupsRequest::IsInitialized() const {
  return true;
}

void ListMotionGroupsRequest::Swap(ListMotionGroupsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListMotionGroupsRequest::InternalSwap(ListMotionGroupsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListMotionGroupsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListMotionGroupsResponse::InitAsDefaultInstance() {
}
class ListMotionGroupsResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListMotionGroupsResponse::kMotionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListMotionGroupsResponse::ListMotionGroupsResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:handsmotion.ListMotionGroupsResponse)
}
ListMotionGroupsResponse::ListMotionGroupsResponse(const ListMotionGroupsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      motions_(from.motions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:handsmotion.ListMotionGroupsResponse)
}

void ListMotionGroupsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListMotionGroupsResponse_group_2eproto.base);
}

ListMotionGroupsResponse::~ListMotionGroupsResponse() {
  // @@protoc_insertion_point(destructor:handsmotion.ListMotionGroupsResponse)
  SharedDtor();
}

void ListMotionGroupsResponse::SharedDtor() {
}

void ListMotionGroupsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListMotionGroupsResponse& ListMotionGroupsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListMotionGroupsResponse_group_2eproto.base);
  return *internal_default_instance();
}


void ListMotionGroupsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:handsmotion.ListMotionGroupsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  motions_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ListMotionGroupsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .handsmotion.MotionMeta motions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_motions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ListMotionGroupsResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:handsmotion.ListMotionGroupsResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .handsmotion.MotionMeta motions = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_motions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:handsmotion.ListMotionGroupsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:handsmotion.ListMotionGroupsResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ListMotionGroupsResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:handsmotion.ListMotionGroupsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .handsmotion.MotionMeta motions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->motions_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->motions(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:handsmotion.ListMotionGroupsResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* ListMotionGroupsResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:handsmotion.ListMotionGroupsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .handsmotion.MotionMeta motions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->motions_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->motions(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:handsmotion.ListMotionGroupsResponse)
  return target;
}

size_t ListMotionGroupsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:handsmotion.ListMotionGroupsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .handsmotion.MotionMeta motions = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->motions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->motions(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListMotionGroupsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:handsmotion.ListMotionGroupsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListMotionGroupsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListMotionGroupsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:handsmotion.ListMotionGroupsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:handsmotion.ListMotionGroupsResponse)
    MergeFrom(*source);
  }
}

void ListMotionGroupsResponse::MergeFrom(const ListMotionGroupsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:handsmotion.ListMotionGroupsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  motions_.MergeFrom(from.motions_);
}

void ListMotionGroupsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:handsmotion.ListMotionGroupsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListMotionGroupsResponse::CopyFrom(const ListMotionGroupsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:handsmotion.ListMotionGroupsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListMotionGroupsResponse::IsInitialized() const {
  return true;
}

void ListMotionGroupsResponse::Swap(ListMotionGroupsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListMotionGroupsResponse::InternalSwap(ListMotionGroupsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&motions_)->InternalSwap(CastToBase(&other->motions_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListMotionGroupsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteMotionGroupRequest::InitAsDefaultInstance() {
}
class DeleteMotionGroupRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeleteMotionGroupRequest::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteMotionGroupRequest::DeleteMotionGroupRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:handsmotion.DeleteMotionGroupRequest)
}
DeleteMotionGroupRequest::DeleteMotionGroupRequest(const DeleteMotionGroupRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  // @@protoc_insertion_point(copy_constructor:handsmotion.DeleteMotionGroupRequest)
}

void DeleteMotionGroupRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteMotionGroupRequest_group_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeleteMotionGroupRequest::~DeleteMotionGroupRequest() {
  // @@protoc_insertion_point(destructor:handsmotion.DeleteMotionGroupRequest)
  SharedDtor();
}

void DeleteMotionGroupRequest::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteMotionGroupRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteMotionGroupRequest& DeleteMotionGroupRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteMotionGroupRequest_group_2eproto.base);
  return *internal_default_instance();
}


void DeleteMotionGroupRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:handsmotion.DeleteMotionGroupRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeleteMotionGroupRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_id(), ptr, ctx, "handsmotion.DeleteMotionGroupRequest.id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeleteMotionGroupRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:handsmotion.DeleteMotionGroupRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "handsmotion.DeleteMotionGroupRequest.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:handsmotion.DeleteMotionGroupRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:handsmotion.DeleteMotionGroupRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeleteMotionGroupRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:handsmotion.DeleteMotionGroupRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "handsmotion.DeleteMotionGroupRequest.id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:handsmotion.DeleteMotionGroupRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteMotionGroupRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:handsmotion.DeleteMotionGroupRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "handsmotion.DeleteMotionGroupRequest.id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:handsmotion.DeleteMotionGroupRequest)
  return target;
}

size_t DeleteMotionGroupRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:handsmotion.DeleteMotionGroupRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteMotionGroupRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:handsmotion.DeleteMotionGroupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteMotionGroupRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteMotionGroupRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:handsmotion.DeleteMotionGroupRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:handsmotion.DeleteMotionGroupRequest)
    MergeFrom(*source);
  }
}

void DeleteMotionGroupRequest::MergeFrom(const DeleteMotionGroupRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:handsmotion.DeleteMotionGroupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
}

void DeleteMotionGroupRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:handsmotion.DeleteMotionGroupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteMotionGroupRequest::CopyFrom(const DeleteMotionGroupRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:handsmotion.DeleteMotionGroupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteMotionGroupRequest::IsInitialized() const {
  return true;
}

void DeleteMotionGroupRequest::Swap(DeleteMotionGroupRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteMotionGroupRequest::InternalSwap(DeleteMotionGroupRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteMotionGroupRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteMotionGroupResponse::InitAsDefaultInstance() {
}
class DeleteMotionGroupResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteMotionGroupResponse::DeleteMotionGroupResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:handsmotion.DeleteMotionGroupResponse)
}
DeleteMotionGroupResponse::DeleteMotionGroupResponse(const DeleteMotionGroupResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:handsmotion.DeleteMotionGroupResponse)
}

void DeleteMotionGroupResponse::SharedCtor() {
}

DeleteMotionGroupResponse::~DeleteMotionGroupResponse() {
  // @@protoc_insertion_point(destructor:handsmotion.DeleteMotionGroupResponse)
  SharedDtor();
}

void DeleteMotionGroupResponse::SharedDtor() {
}

void DeleteMotionGroupResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteMotionGroupResponse& DeleteMotionGroupResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteMotionGroupResponse_group_2eproto.base);
  return *internal_default_instance();
}


void DeleteMotionGroupResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:handsmotion.DeleteMotionGroupResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeleteMotionGroupResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeleteMotionGroupResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:handsmotion.DeleteMotionGroupResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:handsmotion.DeleteMotionGroupResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:handsmotion.DeleteMotionGroupResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeleteMotionGroupResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:handsmotion.DeleteMotionGroupResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:handsmotion.DeleteMotionGroupResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteMotionGroupResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:handsmotion.DeleteMotionGroupResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:handsmotion.DeleteMotionGroupResponse)
  return target;
}

size_t DeleteMotionGroupResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:handsmotion.DeleteMotionGroupResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteMotionGroupResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:handsmotion.DeleteMotionGroupResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteMotionGroupResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteMotionGroupResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:handsmotion.DeleteMotionGroupResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:handsmotion.DeleteMotionGroupResponse)
    MergeFrom(*source);
  }
}

void DeleteMotionGroupResponse::MergeFrom(const DeleteMotionGroupResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:handsmotion.DeleteMotionGroupResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DeleteMotionGroupResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:handsmotion.DeleteMotionGroupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteMotionGroupResponse::CopyFrom(const DeleteMotionGroupResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:handsmotion.DeleteMotionGroupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteMotionGroupResponse::IsInitialized() const {
  return true;
}

void DeleteMotionGroupResponse::Swap(DeleteMotionGroupResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteMotionGroupResponse::InternalSwap(DeleteMotionGroupResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteMotionGroupResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetMotionGroupRequest::InitAsDefaultInstance() {
}
class GetMotionGroupRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetMotionGroupRequest::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetMotionGroupRequest::GetMotionGroupRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:handsmotion.GetMotionGroupRequest)
}
GetMotionGroupRequest::GetMotionGroupRequest(const GetMotionGroupRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  // @@protoc_insertion_point(copy_constructor:handsmotion.GetMotionGroupRequest)
}

void GetMotionGroupRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetMotionGroupRequest_group_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetMotionGroupRequest::~GetMotionGroupRequest() {
  // @@protoc_insertion_point(destructor:handsmotion.GetMotionGroupRequest)
  SharedDtor();
}

void GetMotionGroupRequest::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetMotionGroupRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetMotionGroupRequest& GetMotionGroupRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetMotionGroupRequest_group_2eproto.base);
  return *internal_default_instance();
}


void GetMotionGroupRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:handsmotion.GetMotionGroupRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetMotionGroupRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_id(), ptr, ctx, "handsmotion.GetMotionGroupRequest.id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetMotionGroupRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:handsmotion.GetMotionGroupRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "handsmotion.GetMotionGroupRequest.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:handsmotion.GetMotionGroupRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:handsmotion.GetMotionGroupRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetMotionGroupRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:handsmotion.GetMotionGroupRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "handsmotion.GetMotionGroupRequest.id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:handsmotion.GetMotionGroupRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetMotionGroupRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:handsmotion.GetMotionGroupRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "handsmotion.GetMotionGroupRequest.id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:handsmotion.GetMotionGroupRequest)
  return target;
}

size_t GetMotionGroupRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:handsmotion.GetMotionGroupRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetMotionGroupRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:handsmotion.GetMotionGroupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetMotionGroupRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetMotionGroupRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:handsmotion.GetMotionGroupRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:handsmotion.GetMotionGroupRequest)
    MergeFrom(*source);
  }
}

void GetMotionGroupRequest::MergeFrom(const GetMotionGroupRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:handsmotion.GetMotionGroupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
}

void GetMotionGroupRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:handsmotion.GetMotionGroupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMotionGroupRequest::CopyFrom(const GetMotionGroupRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:handsmotion.GetMotionGroupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMotionGroupRequest::IsInitialized() const {
  return true;
}

void GetMotionGroupRequest::Swap(GetMotionGroupRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetMotionGroupRequest::InternalSwap(GetMotionGroupRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetMotionGroupRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetMotionGroupResponse::InitAsDefaultInstance() {
  ::handsmotion::_GetMotionGroupResponse_default_instance_._instance.get_mutable()->meta_ = const_cast< ::handsmotion::MotionMeta*>(
      ::handsmotion::MotionMeta::internal_default_instance());
}
class GetMotionGroupResponse::HasBitSetters {
 public:
  static const ::handsmotion::MotionMeta& meta(const GetMotionGroupResponse* msg);
};

const ::handsmotion::MotionMeta&
GetMotionGroupResponse::HasBitSetters::meta(const GetMotionGroupResponse* msg) {
  return *msg->meta_;
}
void GetMotionGroupResponse::clear_scripts() {
  scripts_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetMotionGroupResponse::kMetaFieldNumber;
const int GetMotionGroupResponse::kScriptsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetMotionGroupResponse::GetMotionGroupResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:handsmotion.GetMotionGroupResponse)
}
GetMotionGroupResponse::GetMotionGroupResponse(const GetMotionGroupResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      scripts_(from.scripts_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_meta()) {
    meta_ = new ::handsmotion::MotionMeta(*from.meta_);
  } else {
    meta_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:handsmotion.GetMotionGroupResponse)
}

void GetMotionGroupResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetMotionGroupResponse_group_2eproto.base);
  meta_ = nullptr;
}

GetMotionGroupResponse::~GetMotionGroupResponse() {
  // @@protoc_insertion_point(destructor:handsmotion.GetMotionGroupResponse)
  SharedDtor();
}

void GetMotionGroupResponse::SharedDtor() {
  if (this != internal_default_instance()) delete meta_;
}

void GetMotionGroupResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetMotionGroupResponse& GetMotionGroupResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetMotionGroupResponse_group_2eproto.base);
  return *internal_default_instance();
}


void GetMotionGroupResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:handsmotion.GetMotionGroupResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  scripts_.Clear();
  if (GetArenaNoVirtual() == nullptr && meta_ != nullptr) {
    delete meta_;
  }
  meta_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetMotionGroupResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .handsmotion.MotionMeta meta = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_meta(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .handsmotion.MovementScript scripts = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_scripts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetMotionGroupResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:handsmotion.GetMotionGroupResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .handsmotion.MotionMeta meta = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_meta()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .handsmotion.MovementScript scripts = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_scripts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:handsmotion.GetMotionGroupResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:handsmotion.GetMotionGroupResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetMotionGroupResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:handsmotion.GetMotionGroupResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .handsmotion.MotionMeta meta = 1;
  if (this->has_meta()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::meta(this), output);
  }

  // repeated .handsmotion.MovementScript scripts = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->scripts_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->scripts(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:handsmotion.GetMotionGroupResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetMotionGroupResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:handsmotion.GetMotionGroupResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .handsmotion.MotionMeta meta = 1;
  if (this->has_meta()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::meta(this), target);
  }

  // repeated .handsmotion.MovementScript scripts = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->scripts_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->scripts(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:handsmotion.GetMotionGroupResponse)
  return target;
}

size_t GetMotionGroupResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:handsmotion.GetMotionGroupResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .handsmotion.MovementScript scripts = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->scripts_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->scripts(static_cast<int>(i)));
    }
  }

  // .handsmotion.MotionMeta meta = 1;
  if (this->has_meta()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *meta_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetMotionGroupResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:handsmotion.GetMotionGroupResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetMotionGroupResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetMotionGroupResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:handsmotion.GetMotionGroupResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:handsmotion.GetMotionGroupResponse)
    MergeFrom(*source);
  }
}

void GetMotionGroupResponse::MergeFrom(const GetMotionGroupResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:handsmotion.GetMotionGroupResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  scripts_.MergeFrom(from.scripts_);
  if (from.has_meta()) {
    mutable_meta()->::handsmotion::MotionMeta::MergeFrom(from.meta());
  }
}

void GetMotionGroupResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:handsmotion.GetMotionGroupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMotionGroupResponse::CopyFrom(const GetMotionGroupResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:handsmotion.GetMotionGroupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMotionGroupResponse::IsInitialized() const {
  return true;
}

void GetMotionGroupResponse::Swap(GetMotionGroupResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetMotionGroupResponse::InternalSwap(GetMotionGroupResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&scripts_)->InternalSwap(CastToBase(&other->scripts_));
  swap(meta_, other->meta_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetMotionGroupResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateMotionMetaRequest::InitAsDefaultInstance() {
  ::handsmotion::_UpdateMotionMetaRequest_default_instance_._instance.get_mutable()->motion_ = const_cast< ::handsmotion::MotionMeta*>(
      ::handsmotion::MotionMeta::internal_default_instance());
}
class UpdateMotionMetaRequest::HasBitSetters {
 public:
  static const ::handsmotion::MotionMeta& motion(const UpdateMotionMetaRequest* msg);
};

const ::handsmotion::MotionMeta&
UpdateMotionMetaRequest::HasBitSetters::motion(const UpdateMotionMetaRequest* msg) {
  return *msg->motion_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateMotionMetaRequest::kMotionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateMotionMetaRequest::UpdateMotionMetaRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:handsmotion.UpdateMotionMetaRequest)
}
UpdateMotionMetaRequest::UpdateMotionMetaRequest(const UpdateMotionMetaRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_motion()) {
    motion_ = new ::handsmotion::MotionMeta(*from.motion_);
  } else {
    motion_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:handsmotion.UpdateMotionMetaRequest)
}

void UpdateMotionMetaRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateMotionMetaRequest_group_2eproto.base);
  motion_ = nullptr;
}

UpdateMotionMetaRequest::~UpdateMotionMetaRequest() {
  // @@protoc_insertion_point(destructor:handsmotion.UpdateMotionMetaRequest)
  SharedDtor();
}

void UpdateMotionMetaRequest::SharedDtor() {
  if (this != internal_default_instance()) delete motion_;
}

void UpdateMotionMetaRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateMotionMetaRequest& UpdateMotionMetaRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateMotionMetaRequest_group_2eproto.base);
  return *internal_default_instance();
}


void UpdateMotionMetaRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:handsmotion.UpdateMotionMetaRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && motion_ != nullptr) {
    delete motion_;
  }
  motion_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UpdateMotionMetaRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .handsmotion.MotionMeta motion = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_motion(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UpdateMotionMetaRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:handsmotion.UpdateMotionMetaRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .handsmotion.MotionMeta motion = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_motion()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:handsmotion.UpdateMotionMetaRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:handsmotion.UpdateMotionMetaRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UpdateMotionMetaRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:handsmotion.UpdateMotionMetaRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .handsmotion.MotionMeta motion = 2;
  if (this->has_motion()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::motion(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:handsmotion.UpdateMotionMetaRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateMotionMetaRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:handsmotion.UpdateMotionMetaRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .handsmotion.MotionMeta motion = 2;
  if (this->has_motion()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::motion(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:handsmotion.UpdateMotionMetaRequest)
  return target;
}

size_t UpdateMotionMetaRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:handsmotion.UpdateMotionMetaRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .handsmotion.MotionMeta motion = 2;
  if (this->has_motion()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *motion_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateMotionMetaRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:handsmotion.UpdateMotionMetaRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateMotionMetaRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateMotionMetaRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:handsmotion.UpdateMotionMetaRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:handsmotion.UpdateMotionMetaRequest)
    MergeFrom(*source);
  }
}

void UpdateMotionMetaRequest::MergeFrom(const UpdateMotionMetaRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:handsmotion.UpdateMotionMetaRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_motion()) {
    mutable_motion()->::handsmotion::MotionMeta::MergeFrom(from.motion());
  }
}

void UpdateMotionMetaRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:handsmotion.UpdateMotionMetaRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateMotionMetaRequest::CopyFrom(const UpdateMotionMetaRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:handsmotion.UpdateMotionMetaRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateMotionMetaRequest::IsInitialized() const {
  return true;
}

void UpdateMotionMetaRequest::Swap(UpdateMotionMetaRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateMotionMetaRequest::InternalSwap(UpdateMotionMetaRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(motion_, other->motion_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateMotionMetaRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateMotionMetaResponse::InitAsDefaultInstance() {
}
class UpdateMotionMetaResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateMotionMetaResponse::UpdateMotionMetaResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:handsmotion.UpdateMotionMetaResponse)
}
UpdateMotionMetaResponse::UpdateMotionMetaResponse(const UpdateMotionMetaResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:handsmotion.UpdateMotionMetaResponse)
}

void UpdateMotionMetaResponse::SharedCtor() {
}

UpdateMotionMetaResponse::~UpdateMotionMetaResponse() {
  // @@protoc_insertion_point(destructor:handsmotion.UpdateMotionMetaResponse)
  SharedDtor();
}

void UpdateMotionMetaResponse::SharedDtor() {
}

void UpdateMotionMetaResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateMotionMetaResponse& UpdateMotionMetaResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateMotionMetaResponse_group_2eproto.base);
  return *internal_default_instance();
}


void UpdateMotionMetaResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:handsmotion.UpdateMotionMetaResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UpdateMotionMetaResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UpdateMotionMetaResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:handsmotion.UpdateMotionMetaResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:handsmotion.UpdateMotionMetaResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:handsmotion.UpdateMotionMetaResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UpdateMotionMetaResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:handsmotion.UpdateMotionMetaResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:handsmotion.UpdateMotionMetaResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateMotionMetaResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:handsmotion.UpdateMotionMetaResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:handsmotion.UpdateMotionMetaResponse)
  return target;
}

size_t UpdateMotionMetaResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:handsmotion.UpdateMotionMetaResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateMotionMetaResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:handsmotion.UpdateMotionMetaResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateMotionMetaResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateMotionMetaResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:handsmotion.UpdateMotionMetaResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:handsmotion.UpdateMotionMetaResponse)
    MergeFrom(*source);
  }
}

void UpdateMotionMetaResponse::MergeFrom(const UpdateMotionMetaResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:handsmotion.UpdateMotionMetaResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void UpdateMotionMetaResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:handsmotion.UpdateMotionMetaResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateMotionMetaResponse::CopyFrom(const UpdateMotionMetaResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:handsmotion.UpdateMotionMetaResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateMotionMetaResponse::IsInitialized() const {
  return true;
}

void UpdateMotionMetaResponse::Swap(UpdateMotionMetaResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateMotionMetaResponse::InternalSwap(UpdateMotionMetaResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateMotionMetaResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateMotionScriptsRequest::InitAsDefaultInstance() {
}
class UpdateMotionScriptsRequest::HasBitSetters {
 public:
};

void UpdateMotionScriptsRequest::clear_scripts() {
  scripts_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateMotionScriptsRequest::kIdFieldNumber;
const int UpdateMotionScriptsRequest::kScriptsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateMotionScriptsRequest::UpdateMotionScriptsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:handsmotion.UpdateMotionScriptsRequest)
}
UpdateMotionScriptsRequest::UpdateMotionScriptsRequest(const UpdateMotionScriptsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      scripts_(from.scripts_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  // @@protoc_insertion_point(copy_constructor:handsmotion.UpdateMotionScriptsRequest)
}

void UpdateMotionScriptsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateMotionScriptsRequest_group_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

UpdateMotionScriptsRequest::~UpdateMotionScriptsRequest() {
  // @@protoc_insertion_point(destructor:handsmotion.UpdateMotionScriptsRequest)
  SharedDtor();
}

void UpdateMotionScriptsRequest::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UpdateMotionScriptsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateMotionScriptsRequest& UpdateMotionScriptsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateMotionScriptsRequest_group_2eproto.base);
  return *internal_default_instance();
}


void UpdateMotionScriptsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:handsmotion.UpdateMotionScriptsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  scripts_.Clear();
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UpdateMotionScriptsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_id(), ptr, ctx, "handsmotion.UpdateMotionScriptsRequest.id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .handsmotion.MovementScript scripts = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_scripts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UpdateMotionScriptsRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:handsmotion.UpdateMotionScriptsRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "handsmotion.UpdateMotionScriptsRequest.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .handsmotion.MovementScript scripts = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_scripts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:handsmotion.UpdateMotionScriptsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:handsmotion.UpdateMotionScriptsRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UpdateMotionScriptsRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:handsmotion.UpdateMotionScriptsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "handsmotion.UpdateMotionScriptsRequest.id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // repeated .handsmotion.MovementScript scripts = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->scripts_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->scripts(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:handsmotion.UpdateMotionScriptsRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateMotionScriptsRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:handsmotion.UpdateMotionScriptsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "handsmotion.UpdateMotionScriptsRequest.id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // repeated .handsmotion.MovementScript scripts = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->scripts_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->scripts(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:handsmotion.UpdateMotionScriptsRequest)
  return target;
}

size_t UpdateMotionScriptsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:handsmotion.UpdateMotionScriptsRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .handsmotion.MovementScript scripts = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->scripts_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->scripts(static_cast<int>(i)));
    }
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateMotionScriptsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:handsmotion.UpdateMotionScriptsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateMotionScriptsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateMotionScriptsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:handsmotion.UpdateMotionScriptsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:handsmotion.UpdateMotionScriptsRequest)
    MergeFrom(*source);
  }
}

void UpdateMotionScriptsRequest::MergeFrom(const UpdateMotionScriptsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:handsmotion.UpdateMotionScriptsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  scripts_.MergeFrom(from.scripts_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
}

void UpdateMotionScriptsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:handsmotion.UpdateMotionScriptsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateMotionScriptsRequest::CopyFrom(const UpdateMotionScriptsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:handsmotion.UpdateMotionScriptsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateMotionScriptsRequest::IsInitialized() const {
  return true;
}

void UpdateMotionScriptsRequest::Swap(UpdateMotionScriptsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateMotionScriptsRequest::InternalSwap(UpdateMotionScriptsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&scripts_)->InternalSwap(CastToBase(&other->scripts_));
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateMotionScriptsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateMotionScriptsResponse::InitAsDefaultInstance() {
}
class UpdateMotionScriptsResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateMotionScriptsResponse::UpdateMotionScriptsResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:handsmotion.UpdateMotionScriptsResponse)
}
UpdateMotionScriptsResponse::UpdateMotionScriptsResponse(const UpdateMotionScriptsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:handsmotion.UpdateMotionScriptsResponse)
}

void UpdateMotionScriptsResponse::SharedCtor() {
}

UpdateMotionScriptsResponse::~UpdateMotionScriptsResponse() {
  // @@protoc_insertion_point(destructor:handsmotion.UpdateMotionScriptsResponse)
  SharedDtor();
}

void UpdateMotionScriptsResponse::SharedDtor() {
}

void UpdateMotionScriptsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateMotionScriptsResponse& UpdateMotionScriptsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateMotionScriptsResponse_group_2eproto.base);
  return *internal_default_instance();
}


void UpdateMotionScriptsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:handsmotion.UpdateMotionScriptsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UpdateMotionScriptsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UpdateMotionScriptsResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:handsmotion.UpdateMotionScriptsResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:handsmotion.UpdateMotionScriptsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:handsmotion.UpdateMotionScriptsResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UpdateMotionScriptsResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:handsmotion.UpdateMotionScriptsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:handsmotion.UpdateMotionScriptsResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateMotionScriptsResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:handsmotion.UpdateMotionScriptsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:handsmotion.UpdateMotionScriptsResponse)
  return target;
}

size_t UpdateMotionScriptsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:handsmotion.UpdateMotionScriptsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateMotionScriptsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:handsmotion.UpdateMotionScriptsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateMotionScriptsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateMotionScriptsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:handsmotion.UpdateMotionScriptsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:handsmotion.UpdateMotionScriptsResponse)
    MergeFrom(*source);
  }
}

void UpdateMotionScriptsResponse::MergeFrom(const UpdateMotionScriptsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:handsmotion.UpdateMotionScriptsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void UpdateMotionScriptsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:handsmotion.UpdateMotionScriptsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateMotionScriptsResponse::CopyFrom(const UpdateMotionScriptsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:handsmotion.UpdateMotionScriptsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateMotionScriptsResponse::IsInitialized() const {
  return true;
}

void UpdateMotionScriptsResponse::Swap(UpdateMotionScriptsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateMotionScriptsResponse::InternalSwap(UpdateMotionScriptsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateMotionScriptsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace handsmotion
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::handsmotion::MotionMeta* Arena::CreateMaybeMessage< ::handsmotion::MotionMeta >(Arena* arena) {
  return Arena::CreateInternal< ::handsmotion::MotionMeta >(arena);
}
template<> PROTOBUF_NOINLINE ::handsmotion::NewMotionGroupRequest* Arena::CreateMaybeMessage< ::handsmotion::NewMotionGroupRequest >(Arena* arena) {
  return Arena::CreateInternal< ::handsmotion::NewMotionGroupRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::handsmotion::NewMotionGroupResponse* Arena::CreateMaybeMessage< ::handsmotion::NewMotionGroupResponse >(Arena* arena) {
  return Arena::CreateInternal< ::handsmotion::NewMotionGroupResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::handsmotion::ListMotionGroupsRequest* Arena::CreateMaybeMessage< ::handsmotion::ListMotionGroupsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::handsmotion::ListMotionGroupsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::handsmotion::ListMotionGroupsResponse* Arena::CreateMaybeMessage< ::handsmotion::ListMotionGroupsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::handsmotion::ListMotionGroupsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::handsmotion::DeleteMotionGroupRequest* Arena::CreateMaybeMessage< ::handsmotion::DeleteMotionGroupRequest >(Arena* arena) {
  return Arena::CreateInternal< ::handsmotion::DeleteMotionGroupRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::handsmotion::DeleteMotionGroupResponse* Arena::CreateMaybeMessage< ::handsmotion::DeleteMotionGroupResponse >(Arena* arena) {
  return Arena::CreateInternal< ::handsmotion::DeleteMotionGroupResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::handsmotion::GetMotionGroupRequest* Arena::CreateMaybeMessage< ::handsmotion::GetMotionGroupRequest >(Arena* arena) {
  return Arena::CreateInternal< ::handsmotion::GetMotionGroupRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::handsmotion::GetMotionGroupResponse* Arena::CreateMaybeMessage< ::handsmotion::GetMotionGroupResponse >(Arena* arena) {
  return Arena::CreateInternal< ::handsmotion::GetMotionGroupResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::handsmotion::UpdateMotionMetaRequest* Arena::CreateMaybeMessage< ::handsmotion::UpdateMotionMetaRequest >(Arena* arena) {
  return Arena::CreateInternal< ::handsmotion::UpdateMotionMetaRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::handsmotion::UpdateMotionMetaResponse* Arena::CreateMaybeMessage< ::handsmotion::UpdateMotionMetaResponse >(Arena* arena) {
  return Arena::CreateInternal< ::handsmotion::UpdateMotionMetaResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::handsmotion::UpdateMotionScriptsRequest* Arena::CreateMaybeMessage< ::handsmotion::UpdateMotionScriptsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::handsmotion::UpdateMotionScriptsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::handsmotion::UpdateMotionScriptsResponse* Arena::CreateMaybeMessage< ::handsmotion::UpdateMotionScriptsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::handsmotion::UpdateMotionScriptsResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
