// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: capability.proto

#include "capability.pb.h"
#include "capability.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace handsmotion {

static const char* Capability_method_names[] = {
  "/handsmotion.Capability/FingersAdjustment",
  "/handsmotion.Capability/ArmAdjustment",
  "/handsmotion.Capability/MarkAsOriginalPosition",
  "/handsmotion.Capability/GetAbsolutePosition",
  "/handsmotion.Capability/AbsoluteMove",
};

std::unique_ptr< Capability::Stub> Capability::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Capability::Stub> stub(new Capability::Stub(channel));
  return stub;
}

Capability::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_FingersAdjustment_(Capability_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ArmAdjustment_(Capability_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MarkAsOriginalPosition_(Capability_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAbsolutePosition_(Capability_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AbsoluteMove_(Capability_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Capability::Stub::FingersAdjustment(::grpc::ClientContext* context, const ::handsmotion::FingersAdjustmentRequest& request, ::handsmotion::FingersAdjustmentResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_FingersAdjustment_, context, request, response);
}

void Capability::Stub::experimental_async::FingersAdjustment(::grpc::ClientContext* context, const ::handsmotion::FingersAdjustmentRequest* request, ::handsmotion::FingersAdjustmentResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_FingersAdjustment_, context, request, response, std::move(f));
}

void Capability::Stub::experimental_async::FingersAdjustment(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::handsmotion::FingersAdjustmentResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_FingersAdjustment_, context, request, response, std::move(f));
}

void Capability::Stub::experimental_async::FingersAdjustment(::grpc::ClientContext* context, const ::handsmotion::FingersAdjustmentRequest* request, ::handsmotion::FingersAdjustmentResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_FingersAdjustment_, context, request, response, reactor);
}

void Capability::Stub::experimental_async::FingersAdjustment(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::handsmotion::FingersAdjustmentResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_FingersAdjustment_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::handsmotion::FingersAdjustmentResponse>* Capability::Stub::AsyncFingersAdjustmentRaw(::grpc::ClientContext* context, const ::handsmotion::FingersAdjustmentRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::handsmotion::FingersAdjustmentResponse>::Create(channel_.get(), cq, rpcmethod_FingersAdjustment_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::handsmotion::FingersAdjustmentResponse>* Capability::Stub::PrepareAsyncFingersAdjustmentRaw(::grpc::ClientContext* context, const ::handsmotion::FingersAdjustmentRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::handsmotion::FingersAdjustmentResponse>::Create(channel_.get(), cq, rpcmethod_FingersAdjustment_, context, request, false);
}

::grpc::Status Capability::Stub::ArmAdjustment(::grpc::ClientContext* context, const ::handsmotion::ArmAdjustmentRequest& request, ::handsmotion::ArmAdjustmentResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ArmAdjustment_, context, request, response);
}

void Capability::Stub::experimental_async::ArmAdjustment(::grpc::ClientContext* context, const ::handsmotion::ArmAdjustmentRequest* request, ::handsmotion::ArmAdjustmentResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ArmAdjustment_, context, request, response, std::move(f));
}

void Capability::Stub::experimental_async::ArmAdjustment(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::handsmotion::ArmAdjustmentResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ArmAdjustment_, context, request, response, std::move(f));
}

void Capability::Stub::experimental_async::ArmAdjustment(::grpc::ClientContext* context, const ::handsmotion::ArmAdjustmentRequest* request, ::handsmotion::ArmAdjustmentResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ArmAdjustment_, context, request, response, reactor);
}

void Capability::Stub::experimental_async::ArmAdjustment(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::handsmotion::ArmAdjustmentResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ArmAdjustment_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::handsmotion::ArmAdjustmentResponse>* Capability::Stub::AsyncArmAdjustmentRaw(::grpc::ClientContext* context, const ::handsmotion::ArmAdjustmentRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::handsmotion::ArmAdjustmentResponse>::Create(channel_.get(), cq, rpcmethod_ArmAdjustment_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::handsmotion::ArmAdjustmentResponse>* Capability::Stub::PrepareAsyncArmAdjustmentRaw(::grpc::ClientContext* context, const ::handsmotion::ArmAdjustmentRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::handsmotion::ArmAdjustmentResponse>::Create(channel_.get(), cq, rpcmethod_ArmAdjustment_, context, request, false);
}

::grpc::Status Capability::Stub::MarkAsOriginalPosition(::grpc::ClientContext* context, const ::handsmotion::MarkAsOriginalPositionRequest& request, ::handsmotion::MarkAsOriginalPositionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_MarkAsOriginalPosition_, context, request, response);
}

void Capability::Stub::experimental_async::MarkAsOriginalPosition(::grpc::ClientContext* context, const ::handsmotion::MarkAsOriginalPositionRequest* request, ::handsmotion::MarkAsOriginalPositionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_MarkAsOriginalPosition_, context, request, response, std::move(f));
}

void Capability::Stub::experimental_async::MarkAsOriginalPosition(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::handsmotion::MarkAsOriginalPositionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_MarkAsOriginalPosition_, context, request, response, std::move(f));
}

void Capability::Stub::experimental_async::MarkAsOriginalPosition(::grpc::ClientContext* context, const ::handsmotion::MarkAsOriginalPositionRequest* request, ::handsmotion::MarkAsOriginalPositionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_MarkAsOriginalPosition_, context, request, response, reactor);
}

void Capability::Stub::experimental_async::MarkAsOriginalPosition(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::handsmotion::MarkAsOriginalPositionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_MarkAsOriginalPosition_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::handsmotion::MarkAsOriginalPositionResponse>* Capability::Stub::AsyncMarkAsOriginalPositionRaw(::grpc::ClientContext* context, const ::handsmotion::MarkAsOriginalPositionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::handsmotion::MarkAsOriginalPositionResponse>::Create(channel_.get(), cq, rpcmethod_MarkAsOriginalPosition_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::handsmotion::MarkAsOriginalPositionResponse>* Capability::Stub::PrepareAsyncMarkAsOriginalPositionRaw(::grpc::ClientContext* context, const ::handsmotion::MarkAsOriginalPositionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::handsmotion::MarkAsOriginalPositionResponse>::Create(channel_.get(), cq, rpcmethod_MarkAsOriginalPosition_, context, request, false);
}

::grpc::Status Capability::Stub::GetAbsolutePosition(::grpc::ClientContext* context, const ::handsmotion::GetAbsolutePositionRequest& request, ::handsmotion::GetAbsolutePositionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetAbsolutePosition_, context, request, response);
}

void Capability::Stub::experimental_async::GetAbsolutePosition(::grpc::ClientContext* context, const ::handsmotion::GetAbsolutePositionRequest* request, ::handsmotion::GetAbsolutePositionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetAbsolutePosition_, context, request, response, std::move(f));
}

void Capability::Stub::experimental_async::GetAbsolutePosition(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::handsmotion::GetAbsolutePositionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetAbsolutePosition_, context, request, response, std::move(f));
}

void Capability::Stub::experimental_async::GetAbsolutePosition(::grpc::ClientContext* context, const ::handsmotion::GetAbsolutePositionRequest* request, ::handsmotion::GetAbsolutePositionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetAbsolutePosition_, context, request, response, reactor);
}

void Capability::Stub::experimental_async::GetAbsolutePosition(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::handsmotion::GetAbsolutePositionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetAbsolutePosition_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::handsmotion::GetAbsolutePositionResponse>* Capability::Stub::AsyncGetAbsolutePositionRaw(::grpc::ClientContext* context, const ::handsmotion::GetAbsolutePositionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::handsmotion::GetAbsolutePositionResponse>::Create(channel_.get(), cq, rpcmethod_GetAbsolutePosition_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::handsmotion::GetAbsolutePositionResponse>* Capability::Stub::PrepareAsyncGetAbsolutePositionRaw(::grpc::ClientContext* context, const ::handsmotion::GetAbsolutePositionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::handsmotion::GetAbsolutePositionResponse>::Create(channel_.get(), cq, rpcmethod_GetAbsolutePosition_, context, request, false);
}

::grpc::Status Capability::Stub::AbsoluteMove(::grpc::ClientContext* context, const ::handsmotion::AbsoluteMoveRequest& request, ::handsmotion::AbsoluteMoveResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AbsoluteMove_, context, request, response);
}

void Capability::Stub::experimental_async::AbsoluteMove(::grpc::ClientContext* context, const ::handsmotion::AbsoluteMoveRequest* request, ::handsmotion::AbsoluteMoveResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AbsoluteMove_, context, request, response, std::move(f));
}

void Capability::Stub::experimental_async::AbsoluteMove(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::handsmotion::AbsoluteMoveResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AbsoluteMove_, context, request, response, std::move(f));
}

void Capability::Stub::experimental_async::AbsoluteMove(::grpc::ClientContext* context, const ::handsmotion::AbsoluteMoveRequest* request, ::handsmotion::AbsoluteMoveResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AbsoluteMove_, context, request, response, reactor);
}

void Capability::Stub::experimental_async::AbsoluteMove(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::handsmotion::AbsoluteMoveResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AbsoluteMove_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::handsmotion::AbsoluteMoveResponse>* Capability::Stub::AsyncAbsoluteMoveRaw(::grpc::ClientContext* context, const ::handsmotion::AbsoluteMoveRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::handsmotion::AbsoluteMoveResponse>::Create(channel_.get(), cq, rpcmethod_AbsoluteMove_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::handsmotion::AbsoluteMoveResponse>* Capability::Stub::PrepareAsyncAbsoluteMoveRaw(::grpc::ClientContext* context, const ::handsmotion::AbsoluteMoveRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::handsmotion::AbsoluteMoveResponse>::Create(channel_.get(), cq, rpcmethod_AbsoluteMove_, context, request, false);
}

Capability::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Capability_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Capability::Service, ::handsmotion::FingersAdjustmentRequest, ::handsmotion::FingersAdjustmentResponse>(
          std::mem_fn(&Capability::Service::FingersAdjustment), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Capability_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Capability::Service, ::handsmotion::ArmAdjustmentRequest, ::handsmotion::ArmAdjustmentResponse>(
          std::mem_fn(&Capability::Service::ArmAdjustment), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Capability_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Capability::Service, ::handsmotion::MarkAsOriginalPositionRequest, ::handsmotion::MarkAsOriginalPositionResponse>(
          std::mem_fn(&Capability::Service::MarkAsOriginalPosition), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Capability_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Capability::Service, ::handsmotion::GetAbsolutePositionRequest, ::handsmotion::GetAbsolutePositionResponse>(
          std::mem_fn(&Capability::Service::GetAbsolutePosition), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Capability_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Capability::Service, ::handsmotion::AbsoluteMoveRequest, ::handsmotion::AbsoluteMoveResponse>(
          std::mem_fn(&Capability::Service::AbsoluteMove), this)));
}

Capability::Service::~Service() {
}

::grpc::Status Capability::Service::FingersAdjustment(::grpc::ServerContext* context, const ::handsmotion::FingersAdjustmentRequest* request, ::handsmotion::FingersAdjustmentResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Capability::Service::ArmAdjustment(::grpc::ServerContext* context, const ::handsmotion::ArmAdjustmentRequest* request, ::handsmotion::ArmAdjustmentResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Capability::Service::MarkAsOriginalPosition(::grpc::ServerContext* context, const ::handsmotion::MarkAsOriginalPositionRequest* request, ::handsmotion::MarkAsOriginalPositionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Capability::Service::GetAbsolutePosition(::grpc::ServerContext* context, const ::handsmotion::GetAbsolutePositionRequest* request, ::handsmotion::GetAbsolutePositionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Capability::Service::AbsoluteMove(::grpc::ServerContext* context, const ::handsmotion::AbsoluteMoveRequest* request, ::handsmotion::AbsoluteMoveResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace handsmotion

