// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: group.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_group_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_group_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "capability.pb.h"
#include "google/api/annotations.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_group_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_group_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[13]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_group_2eproto;
namespace handsmotion {
class DeleteMotionGroupRequest;
class DeleteMotionGroupRequestDefaultTypeInternal;
extern DeleteMotionGroupRequestDefaultTypeInternal _DeleteMotionGroupRequest_default_instance_;
class DeleteMotionGroupResponse;
class DeleteMotionGroupResponseDefaultTypeInternal;
extern DeleteMotionGroupResponseDefaultTypeInternal _DeleteMotionGroupResponse_default_instance_;
class GetMotionGroupRequest;
class GetMotionGroupRequestDefaultTypeInternal;
extern GetMotionGroupRequestDefaultTypeInternal _GetMotionGroupRequest_default_instance_;
class GetMotionGroupResponse;
class GetMotionGroupResponseDefaultTypeInternal;
extern GetMotionGroupResponseDefaultTypeInternal _GetMotionGroupResponse_default_instance_;
class ListMotionGroupsRequest;
class ListMotionGroupsRequestDefaultTypeInternal;
extern ListMotionGroupsRequestDefaultTypeInternal _ListMotionGroupsRequest_default_instance_;
class ListMotionGroupsResponse;
class ListMotionGroupsResponseDefaultTypeInternal;
extern ListMotionGroupsResponseDefaultTypeInternal _ListMotionGroupsResponse_default_instance_;
class MotionMeta;
class MotionMetaDefaultTypeInternal;
extern MotionMetaDefaultTypeInternal _MotionMeta_default_instance_;
class NewMotionGroupRequest;
class NewMotionGroupRequestDefaultTypeInternal;
extern NewMotionGroupRequestDefaultTypeInternal _NewMotionGroupRequest_default_instance_;
class NewMotionGroupResponse;
class NewMotionGroupResponseDefaultTypeInternal;
extern NewMotionGroupResponseDefaultTypeInternal _NewMotionGroupResponse_default_instance_;
class UpdateMotionMetaRequest;
class UpdateMotionMetaRequestDefaultTypeInternal;
extern UpdateMotionMetaRequestDefaultTypeInternal _UpdateMotionMetaRequest_default_instance_;
class UpdateMotionMetaResponse;
class UpdateMotionMetaResponseDefaultTypeInternal;
extern UpdateMotionMetaResponseDefaultTypeInternal _UpdateMotionMetaResponse_default_instance_;
class UpdateMotionScriptsRequest;
class UpdateMotionScriptsRequestDefaultTypeInternal;
extern UpdateMotionScriptsRequestDefaultTypeInternal _UpdateMotionScriptsRequest_default_instance_;
class UpdateMotionScriptsResponse;
class UpdateMotionScriptsResponseDefaultTypeInternal;
extern UpdateMotionScriptsResponseDefaultTypeInternal _UpdateMotionScriptsResponse_default_instance_;
}  // namespace handsmotion
PROTOBUF_NAMESPACE_OPEN
template<> ::handsmotion::DeleteMotionGroupRequest* Arena::CreateMaybeMessage<::handsmotion::DeleteMotionGroupRequest>(Arena*);
template<> ::handsmotion::DeleteMotionGroupResponse* Arena::CreateMaybeMessage<::handsmotion::DeleteMotionGroupResponse>(Arena*);
template<> ::handsmotion::GetMotionGroupRequest* Arena::CreateMaybeMessage<::handsmotion::GetMotionGroupRequest>(Arena*);
template<> ::handsmotion::GetMotionGroupResponse* Arena::CreateMaybeMessage<::handsmotion::GetMotionGroupResponse>(Arena*);
template<> ::handsmotion::ListMotionGroupsRequest* Arena::CreateMaybeMessage<::handsmotion::ListMotionGroupsRequest>(Arena*);
template<> ::handsmotion::ListMotionGroupsResponse* Arena::CreateMaybeMessage<::handsmotion::ListMotionGroupsResponse>(Arena*);
template<> ::handsmotion::MotionMeta* Arena::CreateMaybeMessage<::handsmotion::MotionMeta>(Arena*);
template<> ::handsmotion::NewMotionGroupRequest* Arena::CreateMaybeMessage<::handsmotion::NewMotionGroupRequest>(Arena*);
template<> ::handsmotion::NewMotionGroupResponse* Arena::CreateMaybeMessage<::handsmotion::NewMotionGroupResponse>(Arena*);
template<> ::handsmotion::UpdateMotionMetaRequest* Arena::CreateMaybeMessage<::handsmotion::UpdateMotionMetaRequest>(Arena*);
template<> ::handsmotion::UpdateMotionMetaResponse* Arena::CreateMaybeMessage<::handsmotion::UpdateMotionMetaResponse>(Arena*);
template<> ::handsmotion::UpdateMotionScriptsRequest* Arena::CreateMaybeMessage<::handsmotion::UpdateMotionScriptsRequest>(Arena*);
template<> ::handsmotion::UpdateMotionScriptsResponse* Arena::CreateMaybeMessage<::handsmotion::UpdateMotionScriptsResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace handsmotion {

// ===================================================================

class MotionMeta :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:handsmotion.MotionMeta) */ {
 public:
  MotionMeta();
  virtual ~MotionMeta();

  MotionMeta(const MotionMeta& from);
  MotionMeta(MotionMeta&& from) noexcept
    : MotionMeta() {
    *this = ::std::move(from);
  }

  inline MotionMeta& operator=(const MotionMeta& from) {
    CopyFrom(from);
    return *this;
  }
  inline MotionMeta& operator=(MotionMeta&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MotionMeta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MotionMeta* internal_default_instance() {
    return reinterpret_cast<const MotionMeta*>(
               &_MotionMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(MotionMeta* other);
  friend void swap(MotionMeta& a, MotionMeta& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MotionMeta* New() const final {
    return CreateMaybeMessage<MotionMeta>(nullptr);
  }

  MotionMeta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MotionMeta>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MotionMeta& from);
  void MergeFrom(const MotionMeta& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MotionMeta* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "handsmotion.MotionMeta";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_group_2eproto);
    return ::descriptor_table_group_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // @@protoc_insertion_point(class_scope:handsmotion.MotionMeta)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_group_2eproto;
};
// -------------------------------------------------------------------

class NewMotionGroupRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:handsmotion.NewMotionGroupRequest) */ {
 public:
  NewMotionGroupRequest();
  virtual ~NewMotionGroupRequest();

  NewMotionGroupRequest(const NewMotionGroupRequest& from);
  NewMotionGroupRequest(NewMotionGroupRequest&& from) noexcept
    : NewMotionGroupRequest() {
    *this = ::std::move(from);
  }

  inline NewMotionGroupRequest& operator=(const NewMotionGroupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline NewMotionGroupRequest& operator=(NewMotionGroupRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NewMotionGroupRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NewMotionGroupRequest* internal_default_instance() {
    return reinterpret_cast<const NewMotionGroupRequest*>(
               &_NewMotionGroupRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(NewMotionGroupRequest* other);
  friend void swap(NewMotionGroupRequest& a, NewMotionGroupRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NewMotionGroupRequest* New() const final {
    return CreateMaybeMessage<NewMotionGroupRequest>(nullptr);
  }

  NewMotionGroupRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NewMotionGroupRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NewMotionGroupRequest& from);
  void MergeFrom(const NewMotionGroupRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NewMotionGroupRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "handsmotion.NewMotionGroupRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_group_2eproto);
    return ::descriptor_table_group_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // @@protoc_insertion_point(class_scope:handsmotion.NewMotionGroupRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_group_2eproto;
};
// -------------------------------------------------------------------

class NewMotionGroupResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:handsmotion.NewMotionGroupResponse) */ {
 public:
  NewMotionGroupResponse();
  virtual ~NewMotionGroupResponse();

  NewMotionGroupResponse(const NewMotionGroupResponse& from);
  NewMotionGroupResponse(NewMotionGroupResponse&& from) noexcept
    : NewMotionGroupResponse() {
    *this = ::std::move(from);
  }

  inline NewMotionGroupResponse& operator=(const NewMotionGroupResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline NewMotionGroupResponse& operator=(NewMotionGroupResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NewMotionGroupResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NewMotionGroupResponse* internal_default_instance() {
    return reinterpret_cast<const NewMotionGroupResponse*>(
               &_NewMotionGroupResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(NewMotionGroupResponse* other);
  friend void swap(NewMotionGroupResponse& a, NewMotionGroupResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NewMotionGroupResponse* New() const final {
    return CreateMaybeMessage<NewMotionGroupResponse>(nullptr);
  }

  NewMotionGroupResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NewMotionGroupResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NewMotionGroupResponse& from);
  void MergeFrom(const NewMotionGroupResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NewMotionGroupResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "handsmotion.NewMotionGroupResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_group_2eproto);
    return ::descriptor_table_group_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .handsmotion.MotionMeta motion = 1;
  bool has_motion() const;
  void clear_motion();
  static const int kMotionFieldNumber = 1;
  const ::handsmotion::MotionMeta& motion() const;
  ::handsmotion::MotionMeta* release_motion();
  ::handsmotion::MotionMeta* mutable_motion();
  void set_allocated_motion(::handsmotion::MotionMeta* motion);

  // @@protoc_insertion_point(class_scope:handsmotion.NewMotionGroupResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::handsmotion::MotionMeta* motion_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_group_2eproto;
};
// -------------------------------------------------------------------

class ListMotionGroupsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:handsmotion.ListMotionGroupsRequest) */ {
 public:
  ListMotionGroupsRequest();
  virtual ~ListMotionGroupsRequest();

  ListMotionGroupsRequest(const ListMotionGroupsRequest& from);
  ListMotionGroupsRequest(ListMotionGroupsRequest&& from) noexcept
    : ListMotionGroupsRequest() {
    *this = ::std::move(from);
  }

  inline ListMotionGroupsRequest& operator=(const ListMotionGroupsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListMotionGroupsRequest& operator=(ListMotionGroupsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListMotionGroupsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListMotionGroupsRequest* internal_default_instance() {
    return reinterpret_cast<const ListMotionGroupsRequest*>(
               &_ListMotionGroupsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ListMotionGroupsRequest* other);
  friend void swap(ListMotionGroupsRequest& a, ListMotionGroupsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListMotionGroupsRequest* New() const final {
    return CreateMaybeMessage<ListMotionGroupsRequest>(nullptr);
  }

  ListMotionGroupsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListMotionGroupsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListMotionGroupsRequest& from);
  void MergeFrom(const ListMotionGroupsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListMotionGroupsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "handsmotion.ListMotionGroupsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_group_2eproto);
    return ::descriptor_table_group_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:handsmotion.ListMotionGroupsRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_group_2eproto;
};
// -------------------------------------------------------------------

class ListMotionGroupsResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:handsmotion.ListMotionGroupsResponse) */ {
 public:
  ListMotionGroupsResponse();
  virtual ~ListMotionGroupsResponse();

  ListMotionGroupsResponse(const ListMotionGroupsResponse& from);
  ListMotionGroupsResponse(ListMotionGroupsResponse&& from) noexcept
    : ListMotionGroupsResponse() {
    *this = ::std::move(from);
  }

  inline ListMotionGroupsResponse& operator=(const ListMotionGroupsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListMotionGroupsResponse& operator=(ListMotionGroupsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListMotionGroupsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListMotionGroupsResponse* internal_default_instance() {
    return reinterpret_cast<const ListMotionGroupsResponse*>(
               &_ListMotionGroupsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(ListMotionGroupsResponse* other);
  friend void swap(ListMotionGroupsResponse& a, ListMotionGroupsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListMotionGroupsResponse* New() const final {
    return CreateMaybeMessage<ListMotionGroupsResponse>(nullptr);
  }

  ListMotionGroupsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListMotionGroupsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListMotionGroupsResponse& from);
  void MergeFrom(const ListMotionGroupsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListMotionGroupsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "handsmotion.ListMotionGroupsResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_group_2eproto);
    return ::descriptor_table_group_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .handsmotion.MotionMeta motions = 1;
  int motions_size() const;
  void clear_motions();
  static const int kMotionsFieldNumber = 1;
  ::handsmotion::MotionMeta* mutable_motions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::handsmotion::MotionMeta >*
      mutable_motions();
  const ::handsmotion::MotionMeta& motions(int index) const;
  ::handsmotion::MotionMeta* add_motions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::handsmotion::MotionMeta >&
      motions() const;

  // @@protoc_insertion_point(class_scope:handsmotion.ListMotionGroupsResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::handsmotion::MotionMeta > motions_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_group_2eproto;
};
// -------------------------------------------------------------------

class DeleteMotionGroupRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:handsmotion.DeleteMotionGroupRequest) */ {
 public:
  DeleteMotionGroupRequest();
  virtual ~DeleteMotionGroupRequest();

  DeleteMotionGroupRequest(const DeleteMotionGroupRequest& from);
  DeleteMotionGroupRequest(DeleteMotionGroupRequest&& from) noexcept
    : DeleteMotionGroupRequest() {
    *this = ::std::move(from);
  }

  inline DeleteMotionGroupRequest& operator=(const DeleteMotionGroupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteMotionGroupRequest& operator=(DeleteMotionGroupRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteMotionGroupRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteMotionGroupRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteMotionGroupRequest*>(
               &_DeleteMotionGroupRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(DeleteMotionGroupRequest* other);
  friend void swap(DeleteMotionGroupRequest& a, DeleteMotionGroupRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteMotionGroupRequest* New() const final {
    return CreateMaybeMessage<DeleteMotionGroupRequest>(nullptr);
  }

  DeleteMotionGroupRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteMotionGroupRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteMotionGroupRequest& from);
  void MergeFrom(const DeleteMotionGroupRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteMotionGroupRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "handsmotion.DeleteMotionGroupRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_group_2eproto);
    return ::descriptor_table_group_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);

  // @@protoc_insertion_point(class_scope:handsmotion.DeleteMotionGroupRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_group_2eproto;
};
// -------------------------------------------------------------------

class DeleteMotionGroupResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:handsmotion.DeleteMotionGroupResponse) */ {
 public:
  DeleteMotionGroupResponse();
  virtual ~DeleteMotionGroupResponse();

  DeleteMotionGroupResponse(const DeleteMotionGroupResponse& from);
  DeleteMotionGroupResponse(DeleteMotionGroupResponse&& from) noexcept
    : DeleteMotionGroupResponse() {
    *this = ::std::move(from);
  }

  inline DeleteMotionGroupResponse& operator=(const DeleteMotionGroupResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteMotionGroupResponse& operator=(DeleteMotionGroupResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteMotionGroupResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteMotionGroupResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteMotionGroupResponse*>(
               &_DeleteMotionGroupResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(DeleteMotionGroupResponse* other);
  friend void swap(DeleteMotionGroupResponse& a, DeleteMotionGroupResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteMotionGroupResponse* New() const final {
    return CreateMaybeMessage<DeleteMotionGroupResponse>(nullptr);
  }

  DeleteMotionGroupResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteMotionGroupResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteMotionGroupResponse& from);
  void MergeFrom(const DeleteMotionGroupResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteMotionGroupResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "handsmotion.DeleteMotionGroupResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_group_2eproto);
    return ::descriptor_table_group_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:handsmotion.DeleteMotionGroupResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_group_2eproto;
};
// -------------------------------------------------------------------

class GetMotionGroupRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:handsmotion.GetMotionGroupRequest) */ {
 public:
  GetMotionGroupRequest();
  virtual ~GetMotionGroupRequest();

  GetMotionGroupRequest(const GetMotionGroupRequest& from);
  GetMotionGroupRequest(GetMotionGroupRequest&& from) noexcept
    : GetMotionGroupRequest() {
    *this = ::std::move(from);
  }

  inline GetMotionGroupRequest& operator=(const GetMotionGroupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMotionGroupRequest& operator=(GetMotionGroupRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetMotionGroupRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetMotionGroupRequest* internal_default_instance() {
    return reinterpret_cast<const GetMotionGroupRequest*>(
               &_GetMotionGroupRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(GetMotionGroupRequest* other);
  friend void swap(GetMotionGroupRequest& a, GetMotionGroupRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetMotionGroupRequest* New() const final {
    return CreateMaybeMessage<GetMotionGroupRequest>(nullptr);
  }

  GetMotionGroupRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetMotionGroupRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetMotionGroupRequest& from);
  void MergeFrom(const GetMotionGroupRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMotionGroupRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "handsmotion.GetMotionGroupRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_group_2eproto);
    return ::descriptor_table_group_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);

  // @@protoc_insertion_point(class_scope:handsmotion.GetMotionGroupRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_group_2eproto;
};
// -------------------------------------------------------------------

class GetMotionGroupResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:handsmotion.GetMotionGroupResponse) */ {
 public:
  GetMotionGroupResponse();
  virtual ~GetMotionGroupResponse();

  GetMotionGroupResponse(const GetMotionGroupResponse& from);
  GetMotionGroupResponse(GetMotionGroupResponse&& from) noexcept
    : GetMotionGroupResponse() {
    *this = ::std::move(from);
  }

  inline GetMotionGroupResponse& operator=(const GetMotionGroupResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMotionGroupResponse& operator=(GetMotionGroupResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetMotionGroupResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetMotionGroupResponse* internal_default_instance() {
    return reinterpret_cast<const GetMotionGroupResponse*>(
               &_GetMotionGroupResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(GetMotionGroupResponse* other);
  friend void swap(GetMotionGroupResponse& a, GetMotionGroupResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetMotionGroupResponse* New() const final {
    return CreateMaybeMessage<GetMotionGroupResponse>(nullptr);
  }

  GetMotionGroupResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetMotionGroupResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetMotionGroupResponse& from);
  void MergeFrom(const GetMotionGroupResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMotionGroupResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "handsmotion.GetMotionGroupResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_group_2eproto);
    return ::descriptor_table_group_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .handsmotion.MovementScript scripts = 2;
  int scripts_size() const;
  void clear_scripts();
  static const int kScriptsFieldNumber = 2;
  ::handsmotion::MovementScript* mutable_scripts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::handsmotion::MovementScript >*
      mutable_scripts();
  const ::handsmotion::MovementScript& scripts(int index) const;
  ::handsmotion::MovementScript* add_scripts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::handsmotion::MovementScript >&
      scripts() const;

  // .handsmotion.MotionMeta meta = 1;
  bool has_meta() const;
  void clear_meta();
  static const int kMetaFieldNumber = 1;
  const ::handsmotion::MotionMeta& meta() const;
  ::handsmotion::MotionMeta* release_meta();
  ::handsmotion::MotionMeta* mutable_meta();
  void set_allocated_meta(::handsmotion::MotionMeta* meta);

  // @@protoc_insertion_point(class_scope:handsmotion.GetMotionGroupResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::handsmotion::MovementScript > scripts_;
  ::handsmotion::MotionMeta* meta_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_group_2eproto;
};
// -------------------------------------------------------------------

class UpdateMotionMetaRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:handsmotion.UpdateMotionMetaRequest) */ {
 public:
  UpdateMotionMetaRequest();
  virtual ~UpdateMotionMetaRequest();

  UpdateMotionMetaRequest(const UpdateMotionMetaRequest& from);
  UpdateMotionMetaRequest(UpdateMotionMetaRequest&& from) noexcept
    : UpdateMotionMetaRequest() {
    *this = ::std::move(from);
  }

  inline UpdateMotionMetaRequest& operator=(const UpdateMotionMetaRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateMotionMetaRequest& operator=(UpdateMotionMetaRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateMotionMetaRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateMotionMetaRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateMotionMetaRequest*>(
               &_UpdateMotionMetaRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(UpdateMotionMetaRequest* other);
  friend void swap(UpdateMotionMetaRequest& a, UpdateMotionMetaRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateMotionMetaRequest* New() const final {
    return CreateMaybeMessage<UpdateMotionMetaRequest>(nullptr);
  }

  UpdateMotionMetaRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateMotionMetaRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateMotionMetaRequest& from);
  void MergeFrom(const UpdateMotionMetaRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateMotionMetaRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "handsmotion.UpdateMotionMetaRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_group_2eproto);
    return ::descriptor_table_group_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .handsmotion.MotionMeta motion = 2;
  bool has_motion() const;
  void clear_motion();
  static const int kMotionFieldNumber = 2;
  const ::handsmotion::MotionMeta& motion() const;
  ::handsmotion::MotionMeta* release_motion();
  ::handsmotion::MotionMeta* mutable_motion();
  void set_allocated_motion(::handsmotion::MotionMeta* motion);

  // @@protoc_insertion_point(class_scope:handsmotion.UpdateMotionMetaRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::handsmotion::MotionMeta* motion_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_group_2eproto;
};
// -------------------------------------------------------------------

class UpdateMotionMetaResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:handsmotion.UpdateMotionMetaResponse) */ {
 public:
  UpdateMotionMetaResponse();
  virtual ~UpdateMotionMetaResponse();

  UpdateMotionMetaResponse(const UpdateMotionMetaResponse& from);
  UpdateMotionMetaResponse(UpdateMotionMetaResponse&& from) noexcept
    : UpdateMotionMetaResponse() {
    *this = ::std::move(from);
  }

  inline UpdateMotionMetaResponse& operator=(const UpdateMotionMetaResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateMotionMetaResponse& operator=(UpdateMotionMetaResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateMotionMetaResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateMotionMetaResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateMotionMetaResponse*>(
               &_UpdateMotionMetaResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(UpdateMotionMetaResponse* other);
  friend void swap(UpdateMotionMetaResponse& a, UpdateMotionMetaResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateMotionMetaResponse* New() const final {
    return CreateMaybeMessage<UpdateMotionMetaResponse>(nullptr);
  }

  UpdateMotionMetaResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateMotionMetaResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateMotionMetaResponse& from);
  void MergeFrom(const UpdateMotionMetaResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateMotionMetaResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "handsmotion.UpdateMotionMetaResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_group_2eproto);
    return ::descriptor_table_group_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:handsmotion.UpdateMotionMetaResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_group_2eproto;
};
// -------------------------------------------------------------------

class UpdateMotionScriptsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:handsmotion.UpdateMotionScriptsRequest) */ {
 public:
  UpdateMotionScriptsRequest();
  virtual ~UpdateMotionScriptsRequest();

  UpdateMotionScriptsRequest(const UpdateMotionScriptsRequest& from);
  UpdateMotionScriptsRequest(UpdateMotionScriptsRequest&& from) noexcept
    : UpdateMotionScriptsRequest() {
    *this = ::std::move(from);
  }

  inline UpdateMotionScriptsRequest& operator=(const UpdateMotionScriptsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateMotionScriptsRequest& operator=(UpdateMotionScriptsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateMotionScriptsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateMotionScriptsRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateMotionScriptsRequest*>(
               &_UpdateMotionScriptsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(UpdateMotionScriptsRequest* other);
  friend void swap(UpdateMotionScriptsRequest& a, UpdateMotionScriptsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateMotionScriptsRequest* New() const final {
    return CreateMaybeMessage<UpdateMotionScriptsRequest>(nullptr);
  }

  UpdateMotionScriptsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateMotionScriptsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateMotionScriptsRequest& from);
  void MergeFrom(const UpdateMotionScriptsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateMotionScriptsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "handsmotion.UpdateMotionScriptsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_group_2eproto);
    return ::descriptor_table_group_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .handsmotion.MovementScript scripts = 2;
  int scripts_size() const;
  void clear_scripts();
  static const int kScriptsFieldNumber = 2;
  ::handsmotion::MovementScript* mutable_scripts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::handsmotion::MovementScript >*
      mutable_scripts();
  const ::handsmotion::MovementScript& scripts(int index) const;
  ::handsmotion::MovementScript* add_scripts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::handsmotion::MovementScript >&
      scripts() const;

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);

  // @@protoc_insertion_point(class_scope:handsmotion.UpdateMotionScriptsRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::handsmotion::MovementScript > scripts_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_group_2eproto;
};
// -------------------------------------------------------------------

class UpdateMotionScriptsResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:handsmotion.UpdateMotionScriptsResponse) */ {
 public:
  UpdateMotionScriptsResponse();
  virtual ~UpdateMotionScriptsResponse();

  UpdateMotionScriptsResponse(const UpdateMotionScriptsResponse& from);
  UpdateMotionScriptsResponse(UpdateMotionScriptsResponse&& from) noexcept
    : UpdateMotionScriptsResponse() {
    *this = ::std::move(from);
  }

  inline UpdateMotionScriptsResponse& operator=(const UpdateMotionScriptsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateMotionScriptsResponse& operator=(UpdateMotionScriptsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateMotionScriptsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateMotionScriptsResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateMotionScriptsResponse*>(
               &_UpdateMotionScriptsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(UpdateMotionScriptsResponse* other);
  friend void swap(UpdateMotionScriptsResponse& a, UpdateMotionScriptsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateMotionScriptsResponse* New() const final {
    return CreateMaybeMessage<UpdateMotionScriptsResponse>(nullptr);
  }

  UpdateMotionScriptsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateMotionScriptsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateMotionScriptsResponse& from);
  void MergeFrom(const UpdateMotionScriptsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateMotionScriptsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "handsmotion.UpdateMotionScriptsResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_group_2eproto);
    return ::descriptor_table_group_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:handsmotion.UpdateMotionScriptsResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_group_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MotionMeta

// string id = 1;
inline void MotionMeta::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MotionMeta::id() const {
  // @@protoc_insertion_point(field_get:handsmotion.MotionMeta.id)
  return id_.GetNoArena();
}
inline void MotionMeta::set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:handsmotion.MotionMeta.id)
}
inline void MotionMeta::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:handsmotion.MotionMeta.id)
}
inline void MotionMeta::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:handsmotion.MotionMeta.id)
}
inline void MotionMeta::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:handsmotion.MotionMeta.id)
}
inline std::string* MotionMeta::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:handsmotion.MotionMeta.id)
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MotionMeta::release_id() {
  // @@protoc_insertion_point(field_release:handsmotion.MotionMeta.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MotionMeta::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:handsmotion.MotionMeta.id)
}

// string name = 2;
inline void MotionMeta::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MotionMeta::name() const {
  // @@protoc_insertion_point(field_get:handsmotion.MotionMeta.name)
  return name_.GetNoArena();
}
inline void MotionMeta::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:handsmotion.MotionMeta.name)
}
inline void MotionMeta::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:handsmotion.MotionMeta.name)
}
inline void MotionMeta::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:handsmotion.MotionMeta.name)
}
inline void MotionMeta::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:handsmotion.MotionMeta.name)
}
inline std::string* MotionMeta::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:handsmotion.MotionMeta.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MotionMeta::release_name() {
  // @@protoc_insertion_point(field_release:handsmotion.MotionMeta.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MotionMeta::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:handsmotion.MotionMeta.name)
}

// -------------------------------------------------------------------

// NewMotionGroupRequest

// string name = 1;
inline void NewMotionGroupRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NewMotionGroupRequest::name() const {
  // @@protoc_insertion_point(field_get:handsmotion.NewMotionGroupRequest.name)
  return name_.GetNoArena();
}
inline void NewMotionGroupRequest::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:handsmotion.NewMotionGroupRequest.name)
}
inline void NewMotionGroupRequest::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:handsmotion.NewMotionGroupRequest.name)
}
inline void NewMotionGroupRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:handsmotion.NewMotionGroupRequest.name)
}
inline void NewMotionGroupRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:handsmotion.NewMotionGroupRequest.name)
}
inline std::string* NewMotionGroupRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:handsmotion.NewMotionGroupRequest.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NewMotionGroupRequest::release_name() {
  // @@protoc_insertion_point(field_release:handsmotion.NewMotionGroupRequest.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NewMotionGroupRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:handsmotion.NewMotionGroupRequest.name)
}

// -------------------------------------------------------------------

// NewMotionGroupResponse

// .handsmotion.MotionMeta motion = 1;
inline bool NewMotionGroupResponse::has_motion() const {
  return this != internal_default_instance() && motion_ != nullptr;
}
inline void NewMotionGroupResponse::clear_motion() {
  if (GetArenaNoVirtual() == nullptr && motion_ != nullptr) {
    delete motion_;
  }
  motion_ = nullptr;
}
inline const ::handsmotion::MotionMeta& NewMotionGroupResponse::motion() const {
  const ::handsmotion::MotionMeta* p = motion_;
  // @@protoc_insertion_point(field_get:handsmotion.NewMotionGroupResponse.motion)
  return p != nullptr ? *p : *reinterpret_cast<const ::handsmotion::MotionMeta*>(
      &::handsmotion::_MotionMeta_default_instance_);
}
inline ::handsmotion::MotionMeta* NewMotionGroupResponse::release_motion() {
  // @@protoc_insertion_point(field_release:handsmotion.NewMotionGroupResponse.motion)
  
  ::handsmotion::MotionMeta* temp = motion_;
  motion_ = nullptr;
  return temp;
}
inline ::handsmotion::MotionMeta* NewMotionGroupResponse::mutable_motion() {
  
  if (motion_ == nullptr) {
    auto* p = CreateMaybeMessage<::handsmotion::MotionMeta>(GetArenaNoVirtual());
    motion_ = p;
  }
  // @@protoc_insertion_point(field_mutable:handsmotion.NewMotionGroupResponse.motion)
  return motion_;
}
inline void NewMotionGroupResponse::set_allocated_motion(::handsmotion::MotionMeta* motion) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete motion_;
  }
  if (motion) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      motion = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, motion, submessage_arena);
    }
    
  } else {
    
  }
  motion_ = motion;
  // @@protoc_insertion_point(field_set_allocated:handsmotion.NewMotionGroupResponse.motion)
}

// -------------------------------------------------------------------

// ListMotionGroupsRequest

// -------------------------------------------------------------------

// ListMotionGroupsResponse

// repeated .handsmotion.MotionMeta motions = 1;
inline int ListMotionGroupsResponse::motions_size() const {
  return motions_.size();
}
inline void ListMotionGroupsResponse::clear_motions() {
  motions_.Clear();
}
inline ::handsmotion::MotionMeta* ListMotionGroupsResponse::mutable_motions(int index) {
  // @@protoc_insertion_point(field_mutable:handsmotion.ListMotionGroupsResponse.motions)
  return motions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::handsmotion::MotionMeta >*
ListMotionGroupsResponse::mutable_motions() {
  // @@protoc_insertion_point(field_mutable_list:handsmotion.ListMotionGroupsResponse.motions)
  return &motions_;
}
inline const ::handsmotion::MotionMeta& ListMotionGroupsResponse::motions(int index) const {
  // @@protoc_insertion_point(field_get:handsmotion.ListMotionGroupsResponse.motions)
  return motions_.Get(index);
}
inline ::handsmotion::MotionMeta* ListMotionGroupsResponse::add_motions() {
  // @@protoc_insertion_point(field_add:handsmotion.ListMotionGroupsResponse.motions)
  return motions_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::handsmotion::MotionMeta >&
ListMotionGroupsResponse::motions() const {
  // @@protoc_insertion_point(field_list:handsmotion.ListMotionGroupsResponse.motions)
  return motions_;
}

// -------------------------------------------------------------------

// DeleteMotionGroupRequest

// string id = 1;
inline void DeleteMotionGroupRequest::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DeleteMotionGroupRequest::id() const {
  // @@protoc_insertion_point(field_get:handsmotion.DeleteMotionGroupRequest.id)
  return id_.GetNoArena();
}
inline void DeleteMotionGroupRequest::set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:handsmotion.DeleteMotionGroupRequest.id)
}
inline void DeleteMotionGroupRequest::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:handsmotion.DeleteMotionGroupRequest.id)
}
inline void DeleteMotionGroupRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:handsmotion.DeleteMotionGroupRequest.id)
}
inline void DeleteMotionGroupRequest::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:handsmotion.DeleteMotionGroupRequest.id)
}
inline std::string* DeleteMotionGroupRequest::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:handsmotion.DeleteMotionGroupRequest.id)
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeleteMotionGroupRequest::release_id() {
  // @@protoc_insertion_point(field_release:handsmotion.DeleteMotionGroupRequest.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteMotionGroupRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:handsmotion.DeleteMotionGroupRequest.id)
}

// -------------------------------------------------------------------

// DeleteMotionGroupResponse

// -------------------------------------------------------------------

// GetMotionGroupRequest

// string id = 1;
inline void GetMotionGroupRequest::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetMotionGroupRequest::id() const {
  // @@protoc_insertion_point(field_get:handsmotion.GetMotionGroupRequest.id)
  return id_.GetNoArena();
}
inline void GetMotionGroupRequest::set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:handsmotion.GetMotionGroupRequest.id)
}
inline void GetMotionGroupRequest::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:handsmotion.GetMotionGroupRequest.id)
}
inline void GetMotionGroupRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:handsmotion.GetMotionGroupRequest.id)
}
inline void GetMotionGroupRequest::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:handsmotion.GetMotionGroupRequest.id)
}
inline std::string* GetMotionGroupRequest::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:handsmotion.GetMotionGroupRequest.id)
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetMotionGroupRequest::release_id() {
  // @@protoc_insertion_point(field_release:handsmotion.GetMotionGroupRequest.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetMotionGroupRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:handsmotion.GetMotionGroupRequest.id)
}

// -------------------------------------------------------------------

// GetMotionGroupResponse

// .handsmotion.MotionMeta meta = 1;
inline bool GetMotionGroupResponse::has_meta() const {
  return this != internal_default_instance() && meta_ != nullptr;
}
inline void GetMotionGroupResponse::clear_meta() {
  if (GetArenaNoVirtual() == nullptr && meta_ != nullptr) {
    delete meta_;
  }
  meta_ = nullptr;
}
inline const ::handsmotion::MotionMeta& GetMotionGroupResponse::meta() const {
  const ::handsmotion::MotionMeta* p = meta_;
  // @@protoc_insertion_point(field_get:handsmotion.GetMotionGroupResponse.meta)
  return p != nullptr ? *p : *reinterpret_cast<const ::handsmotion::MotionMeta*>(
      &::handsmotion::_MotionMeta_default_instance_);
}
inline ::handsmotion::MotionMeta* GetMotionGroupResponse::release_meta() {
  // @@protoc_insertion_point(field_release:handsmotion.GetMotionGroupResponse.meta)
  
  ::handsmotion::MotionMeta* temp = meta_;
  meta_ = nullptr;
  return temp;
}
inline ::handsmotion::MotionMeta* GetMotionGroupResponse::mutable_meta() {
  
  if (meta_ == nullptr) {
    auto* p = CreateMaybeMessage<::handsmotion::MotionMeta>(GetArenaNoVirtual());
    meta_ = p;
  }
  // @@protoc_insertion_point(field_mutable:handsmotion.GetMotionGroupResponse.meta)
  return meta_;
}
inline void GetMotionGroupResponse::set_allocated_meta(::handsmotion::MotionMeta* meta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete meta_;
  }
  if (meta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      meta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meta, submessage_arena);
    }
    
  } else {
    
  }
  meta_ = meta;
  // @@protoc_insertion_point(field_set_allocated:handsmotion.GetMotionGroupResponse.meta)
}

// repeated .handsmotion.MovementScript scripts = 2;
inline int GetMotionGroupResponse::scripts_size() const {
  return scripts_.size();
}
inline ::handsmotion::MovementScript* GetMotionGroupResponse::mutable_scripts(int index) {
  // @@protoc_insertion_point(field_mutable:handsmotion.GetMotionGroupResponse.scripts)
  return scripts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::handsmotion::MovementScript >*
GetMotionGroupResponse::mutable_scripts() {
  // @@protoc_insertion_point(field_mutable_list:handsmotion.GetMotionGroupResponse.scripts)
  return &scripts_;
}
inline const ::handsmotion::MovementScript& GetMotionGroupResponse::scripts(int index) const {
  // @@protoc_insertion_point(field_get:handsmotion.GetMotionGroupResponse.scripts)
  return scripts_.Get(index);
}
inline ::handsmotion::MovementScript* GetMotionGroupResponse::add_scripts() {
  // @@protoc_insertion_point(field_add:handsmotion.GetMotionGroupResponse.scripts)
  return scripts_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::handsmotion::MovementScript >&
GetMotionGroupResponse::scripts() const {
  // @@protoc_insertion_point(field_list:handsmotion.GetMotionGroupResponse.scripts)
  return scripts_;
}

// -------------------------------------------------------------------

// UpdateMotionMetaRequest

// .handsmotion.MotionMeta motion = 2;
inline bool UpdateMotionMetaRequest::has_motion() const {
  return this != internal_default_instance() && motion_ != nullptr;
}
inline void UpdateMotionMetaRequest::clear_motion() {
  if (GetArenaNoVirtual() == nullptr && motion_ != nullptr) {
    delete motion_;
  }
  motion_ = nullptr;
}
inline const ::handsmotion::MotionMeta& UpdateMotionMetaRequest::motion() const {
  const ::handsmotion::MotionMeta* p = motion_;
  // @@protoc_insertion_point(field_get:handsmotion.UpdateMotionMetaRequest.motion)
  return p != nullptr ? *p : *reinterpret_cast<const ::handsmotion::MotionMeta*>(
      &::handsmotion::_MotionMeta_default_instance_);
}
inline ::handsmotion::MotionMeta* UpdateMotionMetaRequest::release_motion() {
  // @@protoc_insertion_point(field_release:handsmotion.UpdateMotionMetaRequest.motion)
  
  ::handsmotion::MotionMeta* temp = motion_;
  motion_ = nullptr;
  return temp;
}
inline ::handsmotion::MotionMeta* UpdateMotionMetaRequest::mutable_motion() {
  
  if (motion_ == nullptr) {
    auto* p = CreateMaybeMessage<::handsmotion::MotionMeta>(GetArenaNoVirtual());
    motion_ = p;
  }
  // @@protoc_insertion_point(field_mutable:handsmotion.UpdateMotionMetaRequest.motion)
  return motion_;
}
inline void UpdateMotionMetaRequest::set_allocated_motion(::handsmotion::MotionMeta* motion) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete motion_;
  }
  if (motion) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      motion = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, motion, submessage_arena);
    }
    
  } else {
    
  }
  motion_ = motion;
  // @@protoc_insertion_point(field_set_allocated:handsmotion.UpdateMotionMetaRequest.motion)
}

// -------------------------------------------------------------------

// UpdateMotionMetaResponse

// -------------------------------------------------------------------

// UpdateMotionScriptsRequest

// string id = 1;
inline void UpdateMotionScriptsRequest::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UpdateMotionScriptsRequest::id() const {
  // @@protoc_insertion_point(field_get:handsmotion.UpdateMotionScriptsRequest.id)
  return id_.GetNoArena();
}
inline void UpdateMotionScriptsRequest::set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:handsmotion.UpdateMotionScriptsRequest.id)
}
inline void UpdateMotionScriptsRequest::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:handsmotion.UpdateMotionScriptsRequest.id)
}
inline void UpdateMotionScriptsRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:handsmotion.UpdateMotionScriptsRequest.id)
}
inline void UpdateMotionScriptsRequest::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:handsmotion.UpdateMotionScriptsRequest.id)
}
inline std::string* UpdateMotionScriptsRequest::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:handsmotion.UpdateMotionScriptsRequest.id)
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UpdateMotionScriptsRequest::release_id() {
  // @@protoc_insertion_point(field_release:handsmotion.UpdateMotionScriptsRequest.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateMotionScriptsRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:handsmotion.UpdateMotionScriptsRequest.id)
}

// repeated .handsmotion.MovementScript scripts = 2;
inline int UpdateMotionScriptsRequest::scripts_size() const {
  return scripts_.size();
}
inline ::handsmotion::MovementScript* UpdateMotionScriptsRequest::mutable_scripts(int index) {
  // @@protoc_insertion_point(field_mutable:handsmotion.UpdateMotionScriptsRequest.scripts)
  return scripts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::handsmotion::MovementScript >*
UpdateMotionScriptsRequest::mutable_scripts() {
  // @@protoc_insertion_point(field_mutable_list:handsmotion.UpdateMotionScriptsRequest.scripts)
  return &scripts_;
}
inline const ::handsmotion::MovementScript& UpdateMotionScriptsRequest::scripts(int index) const {
  // @@protoc_insertion_point(field_get:handsmotion.UpdateMotionScriptsRequest.scripts)
  return scripts_.Get(index);
}
inline ::handsmotion::MovementScript* UpdateMotionScriptsRequest::add_scripts() {
  // @@protoc_insertion_point(field_add:handsmotion.UpdateMotionScriptsRequest.scripts)
  return scripts_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::handsmotion::MovementScript >&
UpdateMotionScriptsRequest::scripts() const {
  // @@protoc_insertion_point(field_list:handsmotion.UpdateMotionScriptsRequest.scripts)
  return scripts_;
}

// -------------------------------------------------------------------

// UpdateMotionScriptsResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace handsmotion

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_group_2eproto
