// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: capability.proto
#ifndef GRPC_capability_2eproto__INCLUDED
#define GRPC_capability_2eproto__INCLUDED

#include "capability.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc_impl {
class CompletionQueue;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc_impl

namespace grpc {
namespace experimental {
template <typename RequestT, typename ResponseT>
class MessageAllocator;
}  // namespace experimental
}  // namespace grpc

namespace handsmotion {

class Capability final {
 public:
  static constexpr char const* service_full_name() {
    return "handsmotion.Capability";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // 手指调整方法
    // 调整手指动作的开合与重置
    virtual ::grpc::Status FingersAdjustment(::grpc::ClientContext* context, const ::handsmotion::FingersAdjustmentRequest& request, ::handsmotion::FingersAdjustmentResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::handsmotion::FingersAdjustmentResponse>> AsyncFingersAdjustment(::grpc::ClientContext* context, const ::handsmotion::FingersAdjustmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::handsmotion::FingersAdjustmentResponse>>(AsyncFingersAdjustmentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::handsmotion::FingersAdjustmentResponse>> PrepareAsyncFingersAdjustment(::grpc::ClientContext* context, const ::handsmotion::FingersAdjustmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::handsmotion::FingersAdjustmentResponse>>(PrepareAsyncFingersAdjustmentRaw(context, request, cq));
    }
    // 手臂调整方法
    // 调整手臂位置重置、使能与失能。
    // 失能后可通过外力移动至相应位置后通过使能恢复锁定当前位置
    virtual ::grpc::Status ArmAdjustment(::grpc::ClientContext* context, const ::handsmotion::ArmAdjustmentRequest& request, ::handsmotion::ArmAdjustmentResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::handsmotion::ArmAdjustmentResponse>> AsyncArmAdjustment(::grpc::ClientContext* context, const ::handsmotion::ArmAdjustmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::handsmotion::ArmAdjustmentResponse>>(AsyncArmAdjustmentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::handsmotion::ArmAdjustmentResponse>> PrepareAsyncArmAdjustment(::grpc::ClientContext* context, const ::handsmotion::ArmAdjustmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::handsmotion::ArmAdjustmentResponse>>(PrepareAsyncArmAdjustmentRaw(context, request, cq));
    }
    // 标记当前位置为初始位置
    // 所有位置数据将基于此点进行计算
    virtual ::grpc::Status MarkAsOriginalPosition(::grpc::ClientContext* context, const ::handsmotion::MarkAsOriginalPositionRequest& request, ::handsmotion::MarkAsOriginalPositionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::handsmotion::MarkAsOriginalPositionResponse>> AsyncMarkAsOriginalPosition(::grpc::ClientContext* context, const ::handsmotion::MarkAsOriginalPositionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::handsmotion::MarkAsOriginalPositionResponse>>(AsyncMarkAsOriginalPositionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::handsmotion::MarkAsOriginalPositionResponse>> PrepareAsyncMarkAsOriginalPosition(::grpc::ClientContext* context, const ::handsmotion::MarkAsOriginalPositionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::handsmotion::MarkAsOriginalPositionResponse>>(PrepareAsyncMarkAsOriginalPositionRaw(context, request, cq));
    }
    // 获取当前绝对位置
    virtual ::grpc::Status GetAbsolutePosition(::grpc::ClientContext* context, const ::handsmotion::GetAbsolutePositionRequest& request, ::handsmotion::GetAbsolutePositionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::handsmotion::GetAbsolutePositionResponse>> AsyncGetAbsolutePosition(::grpc::ClientContext* context, const ::handsmotion::GetAbsolutePositionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::handsmotion::GetAbsolutePositionResponse>>(AsyncGetAbsolutePositionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::handsmotion::GetAbsolutePositionResponse>> PrepareAsyncGetAbsolutePosition(::grpc::ClientContext* context, const ::handsmotion::GetAbsolutePositionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::handsmotion::GetAbsolutePositionResponse>>(PrepareAsyncGetAbsolutePositionRaw(context, request, cq));
    }
    // 绝对位置移动
    virtual ::grpc::Status AbsoluteMove(::grpc::ClientContext* context, const ::handsmotion::AbsoluteMoveRequest& request, ::handsmotion::AbsoluteMoveResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::handsmotion::AbsoluteMoveResponse>> AsyncAbsoluteMove(::grpc::ClientContext* context, const ::handsmotion::AbsoluteMoveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::handsmotion::AbsoluteMoveResponse>>(AsyncAbsoluteMoveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::handsmotion::AbsoluteMoveResponse>> PrepareAsyncAbsoluteMove(::grpc::ClientContext* context, const ::handsmotion::AbsoluteMoveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::handsmotion::AbsoluteMoveResponse>>(PrepareAsyncAbsoluteMoveRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // 手指调整方法
      // 调整手指动作的开合与重置
      virtual void FingersAdjustment(::grpc::ClientContext* context, const ::handsmotion::FingersAdjustmentRequest* request, ::handsmotion::FingersAdjustmentResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void FingersAdjustment(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::handsmotion::FingersAdjustmentResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void FingersAdjustment(::grpc::ClientContext* context, const ::handsmotion::FingersAdjustmentRequest* request, ::handsmotion::FingersAdjustmentResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void FingersAdjustment(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::handsmotion::FingersAdjustmentResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // 手臂调整方法
      // 调整手臂位置重置、使能与失能。
      // 失能后可通过外力移动至相应位置后通过使能恢复锁定当前位置
      virtual void ArmAdjustment(::grpc::ClientContext* context, const ::handsmotion::ArmAdjustmentRequest* request, ::handsmotion::ArmAdjustmentResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ArmAdjustment(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::handsmotion::ArmAdjustmentResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ArmAdjustment(::grpc::ClientContext* context, const ::handsmotion::ArmAdjustmentRequest* request, ::handsmotion::ArmAdjustmentResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void ArmAdjustment(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::handsmotion::ArmAdjustmentResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // 标记当前位置为初始位置
      // 所有位置数据将基于此点进行计算
      virtual void MarkAsOriginalPosition(::grpc::ClientContext* context, const ::handsmotion::MarkAsOriginalPositionRequest* request, ::handsmotion::MarkAsOriginalPositionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void MarkAsOriginalPosition(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::handsmotion::MarkAsOriginalPositionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void MarkAsOriginalPosition(::grpc::ClientContext* context, const ::handsmotion::MarkAsOriginalPositionRequest* request, ::handsmotion::MarkAsOriginalPositionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void MarkAsOriginalPosition(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::handsmotion::MarkAsOriginalPositionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // 获取当前绝对位置
      virtual void GetAbsolutePosition(::grpc::ClientContext* context, const ::handsmotion::GetAbsolutePositionRequest* request, ::handsmotion::GetAbsolutePositionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAbsolutePosition(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::handsmotion::GetAbsolutePositionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAbsolutePosition(::grpc::ClientContext* context, const ::handsmotion::GetAbsolutePositionRequest* request, ::handsmotion::GetAbsolutePositionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetAbsolutePosition(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::handsmotion::GetAbsolutePositionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // 绝对位置移动
      virtual void AbsoluteMove(::grpc::ClientContext* context, const ::handsmotion::AbsoluteMoveRequest* request, ::handsmotion::AbsoluteMoveResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AbsoluteMove(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::handsmotion::AbsoluteMoveResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AbsoluteMove(::grpc::ClientContext* context, const ::handsmotion::AbsoluteMoveRequest* request, ::handsmotion::AbsoluteMoveResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void AbsoluteMove(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::handsmotion::AbsoluteMoveResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::handsmotion::FingersAdjustmentResponse>* AsyncFingersAdjustmentRaw(::grpc::ClientContext* context, const ::handsmotion::FingersAdjustmentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::handsmotion::FingersAdjustmentResponse>* PrepareAsyncFingersAdjustmentRaw(::grpc::ClientContext* context, const ::handsmotion::FingersAdjustmentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::handsmotion::ArmAdjustmentResponse>* AsyncArmAdjustmentRaw(::grpc::ClientContext* context, const ::handsmotion::ArmAdjustmentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::handsmotion::ArmAdjustmentResponse>* PrepareAsyncArmAdjustmentRaw(::grpc::ClientContext* context, const ::handsmotion::ArmAdjustmentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::handsmotion::MarkAsOriginalPositionResponse>* AsyncMarkAsOriginalPositionRaw(::grpc::ClientContext* context, const ::handsmotion::MarkAsOriginalPositionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::handsmotion::MarkAsOriginalPositionResponse>* PrepareAsyncMarkAsOriginalPositionRaw(::grpc::ClientContext* context, const ::handsmotion::MarkAsOriginalPositionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::handsmotion::GetAbsolutePositionResponse>* AsyncGetAbsolutePositionRaw(::grpc::ClientContext* context, const ::handsmotion::GetAbsolutePositionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::handsmotion::GetAbsolutePositionResponse>* PrepareAsyncGetAbsolutePositionRaw(::grpc::ClientContext* context, const ::handsmotion::GetAbsolutePositionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::handsmotion::AbsoluteMoveResponse>* AsyncAbsoluteMoveRaw(::grpc::ClientContext* context, const ::handsmotion::AbsoluteMoveRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::handsmotion::AbsoluteMoveResponse>* PrepareAsyncAbsoluteMoveRaw(::grpc::ClientContext* context, const ::handsmotion::AbsoluteMoveRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status FingersAdjustment(::grpc::ClientContext* context, const ::handsmotion::FingersAdjustmentRequest& request, ::handsmotion::FingersAdjustmentResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::handsmotion::FingersAdjustmentResponse>> AsyncFingersAdjustment(::grpc::ClientContext* context, const ::handsmotion::FingersAdjustmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::handsmotion::FingersAdjustmentResponse>>(AsyncFingersAdjustmentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::handsmotion::FingersAdjustmentResponse>> PrepareAsyncFingersAdjustment(::grpc::ClientContext* context, const ::handsmotion::FingersAdjustmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::handsmotion::FingersAdjustmentResponse>>(PrepareAsyncFingersAdjustmentRaw(context, request, cq));
    }
    ::grpc::Status ArmAdjustment(::grpc::ClientContext* context, const ::handsmotion::ArmAdjustmentRequest& request, ::handsmotion::ArmAdjustmentResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::handsmotion::ArmAdjustmentResponse>> AsyncArmAdjustment(::grpc::ClientContext* context, const ::handsmotion::ArmAdjustmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::handsmotion::ArmAdjustmentResponse>>(AsyncArmAdjustmentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::handsmotion::ArmAdjustmentResponse>> PrepareAsyncArmAdjustment(::grpc::ClientContext* context, const ::handsmotion::ArmAdjustmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::handsmotion::ArmAdjustmentResponse>>(PrepareAsyncArmAdjustmentRaw(context, request, cq));
    }
    ::grpc::Status MarkAsOriginalPosition(::grpc::ClientContext* context, const ::handsmotion::MarkAsOriginalPositionRequest& request, ::handsmotion::MarkAsOriginalPositionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::handsmotion::MarkAsOriginalPositionResponse>> AsyncMarkAsOriginalPosition(::grpc::ClientContext* context, const ::handsmotion::MarkAsOriginalPositionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::handsmotion::MarkAsOriginalPositionResponse>>(AsyncMarkAsOriginalPositionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::handsmotion::MarkAsOriginalPositionResponse>> PrepareAsyncMarkAsOriginalPosition(::grpc::ClientContext* context, const ::handsmotion::MarkAsOriginalPositionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::handsmotion::MarkAsOriginalPositionResponse>>(PrepareAsyncMarkAsOriginalPositionRaw(context, request, cq));
    }
    ::grpc::Status GetAbsolutePosition(::grpc::ClientContext* context, const ::handsmotion::GetAbsolutePositionRequest& request, ::handsmotion::GetAbsolutePositionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::handsmotion::GetAbsolutePositionResponse>> AsyncGetAbsolutePosition(::grpc::ClientContext* context, const ::handsmotion::GetAbsolutePositionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::handsmotion::GetAbsolutePositionResponse>>(AsyncGetAbsolutePositionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::handsmotion::GetAbsolutePositionResponse>> PrepareAsyncGetAbsolutePosition(::grpc::ClientContext* context, const ::handsmotion::GetAbsolutePositionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::handsmotion::GetAbsolutePositionResponse>>(PrepareAsyncGetAbsolutePositionRaw(context, request, cq));
    }
    ::grpc::Status AbsoluteMove(::grpc::ClientContext* context, const ::handsmotion::AbsoluteMoveRequest& request, ::handsmotion::AbsoluteMoveResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::handsmotion::AbsoluteMoveResponse>> AsyncAbsoluteMove(::grpc::ClientContext* context, const ::handsmotion::AbsoluteMoveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::handsmotion::AbsoluteMoveResponse>>(AsyncAbsoluteMoveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::handsmotion::AbsoluteMoveResponse>> PrepareAsyncAbsoluteMove(::grpc::ClientContext* context, const ::handsmotion::AbsoluteMoveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::handsmotion::AbsoluteMoveResponse>>(PrepareAsyncAbsoluteMoveRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void FingersAdjustment(::grpc::ClientContext* context, const ::handsmotion::FingersAdjustmentRequest* request, ::handsmotion::FingersAdjustmentResponse* response, std::function<void(::grpc::Status)>) override;
      void FingersAdjustment(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::handsmotion::FingersAdjustmentResponse* response, std::function<void(::grpc::Status)>) override;
      void FingersAdjustment(::grpc::ClientContext* context, const ::handsmotion::FingersAdjustmentRequest* request, ::handsmotion::FingersAdjustmentResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void FingersAdjustment(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::handsmotion::FingersAdjustmentResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void ArmAdjustment(::grpc::ClientContext* context, const ::handsmotion::ArmAdjustmentRequest* request, ::handsmotion::ArmAdjustmentResponse* response, std::function<void(::grpc::Status)>) override;
      void ArmAdjustment(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::handsmotion::ArmAdjustmentResponse* response, std::function<void(::grpc::Status)>) override;
      void ArmAdjustment(::grpc::ClientContext* context, const ::handsmotion::ArmAdjustmentRequest* request, ::handsmotion::ArmAdjustmentResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void ArmAdjustment(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::handsmotion::ArmAdjustmentResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void MarkAsOriginalPosition(::grpc::ClientContext* context, const ::handsmotion::MarkAsOriginalPositionRequest* request, ::handsmotion::MarkAsOriginalPositionResponse* response, std::function<void(::grpc::Status)>) override;
      void MarkAsOriginalPosition(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::handsmotion::MarkAsOriginalPositionResponse* response, std::function<void(::grpc::Status)>) override;
      void MarkAsOriginalPosition(::grpc::ClientContext* context, const ::handsmotion::MarkAsOriginalPositionRequest* request, ::handsmotion::MarkAsOriginalPositionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void MarkAsOriginalPosition(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::handsmotion::MarkAsOriginalPositionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetAbsolutePosition(::grpc::ClientContext* context, const ::handsmotion::GetAbsolutePositionRequest* request, ::handsmotion::GetAbsolutePositionResponse* response, std::function<void(::grpc::Status)>) override;
      void GetAbsolutePosition(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::handsmotion::GetAbsolutePositionResponse* response, std::function<void(::grpc::Status)>) override;
      void GetAbsolutePosition(::grpc::ClientContext* context, const ::handsmotion::GetAbsolutePositionRequest* request, ::handsmotion::GetAbsolutePositionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetAbsolutePosition(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::handsmotion::GetAbsolutePositionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void AbsoluteMove(::grpc::ClientContext* context, const ::handsmotion::AbsoluteMoveRequest* request, ::handsmotion::AbsoluteMoveResponse* response, std::function<void(::grpc::Status)>) override;
      void AbsoluteMove(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::handsmotion::AbsoluteMoveResponse* response, std::function<void(::grpc::Status)>) override;
      void AbsoluteMove(::grpc::ClientContext* context, const ::handsmotion::AbsoluteMoveRequest* request, ::handsmotion::AbsoluteMoveResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void AbsoluteMove(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::handsmotion::AbsoluteMoveResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::handsmotion::FingersAdjustmentResponse>* AsyncFingersAdjustmentRaw(::grpc::ClientContext* context, const ::handsmotion::FingersAdjustmentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::handsmotion::FingersAdjustmentResponse>* PrepareAsyncFingersAdjustmentRaw(::grpc::ClientContext* context, const ::handsmotion::FingersAdjustmentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::handsmotion::ArmAdjustmentResponse>* AsyncArmAdjustmentRaw(::grpc::ClientContext* context, const ::handsmotion::ArmAdjustmentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::handsmotion::ArmAdjustmentResponse>* PrepareAsyncArmAdjustmentRaw(::grpc::ClientContext* context, const ::handsmotion::ArmAdjustmentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::handsmotion::MarkAsOriginalPositionResponse>* AsyncMarkAsOriginalPositionRaw(::grpc::ClientContext* context, const ::handsmotion::MarkAsOriginalPositionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::handsmotion::MarkAsOriginalPositionResponse>* PrepareAsyncMarkAsOriginalPositionRaw(::grpc::ClientContext* context, const ::handsmotion::MarkAsOriginalPositionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::handsmotion::GetAbsolutePositionResponse>* AsyncGetAbsolutePositionRaw(::grpc::ClientContext* context, const ::handsmotion::GetAbsolutePositionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::handsmotion::GetAbsolutePositionResponse>* PrepareAsyncGetAbsolutePositionRaw(::grpc::ClientContext* context, const ::handsmotion::GetAbsolutePositionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::handsmotion::AbsoluteMoveResponse>* AsyncAbsoluteMoveRaw(::grpc::ClientContext* context, const ::handsmotion::AbsoluteMoveRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::handsmotion::AbsoluteMoveResponse>* PrepareAsyncAbsoluteMoveRaw(::grpc::ClientContext* context, const ::handsmotion::AbsoluteMoveRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_FingersAdjustment_;
    const ::grpc::internal::RpcMethod rpcmethod_ArmAdjustment_;
    const ::grpc::internal::RpcMethod rpcmethod_MarkAsOriginalPosition_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAbsolutePosition_;
    const ::grpc::internal::RpcMethod rpcmethod_AbsoluteMove_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // 手指调整方法
    // 调整手指动作的开合与重置
    virtual ::grpc::Status FingersAdjustment(::grpc::ServerContext* context, const ::handsmotion::FingersAdjustmentRequest* request, ::handsmotion::FingersAdjustmentResponse* response);
    // 手臂调整方法
    // 调整手臂位置重置、使能与失能。
    // 失能后可通过外力移动至相应位置后通过使能恢复锁定当前位置
    virtual ::grpc::Status ArmAdjustment(::grpc::ServerContext* context, const ::handsmotion::ArmAdjustmentRequest* request, ::handsmotion::ArmAdjustmentResponse* response);
    // 标记当前位置为初始位置
    // 所有位置数据将基于此点进行计算
    virtual ::grpc::Status MarkAsOriginalPosition(::grpc::ServerContext* context, const ::handsmotion::MarkAsOriginalPositionRequest* request, ::handsmotion::MarkAsOriginalPositionResponse* response);
    // 获取当前绝对位置
    virtual ::grpc::Status GetAbsolutePosition(::grpc::ServerContext* context, const ::handsmotion::GetAbsolutePositionRequest* request, ::handsmotion::GetAbsolutePositionResponse* response);
    // 绝对位置移动
    virtual ::grpc::Status AbsoluteMove(::grpc::ServerContext* context, const ::handsmotion::AbsoluteMoveRequest* request, ::handsmotion::AbsoluteMoveResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_FingersAdjustment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_FingersAdjustment() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_FingersAdjustment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FingersAdjustment(::grpc::ServerContext* context, const ::handsmotion::FingersAdjustmentRequest* request, ::handsmotion::FingersAdjustmentResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFingersAdjustment(::grpc::ServerContext* context, ::handsmotion::FingersAdjustmentRequest* request, ::grpc::ServerAsyncResponseWriter< ::handsmotion::FingersAdjustmentResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ArmAdjustment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ArmAdjustment() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ArmAdjustment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ArmAdjustment(::grpc::ServerContext* context, const ::handsmotion::ArmAdjustmentRequest* request, ::handsmotion::ArmAdjustmentResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestArmAdjustment(::grpc::ServerContext* context, ::handsmotion::ArmAdjustmentRequest* request, ::grpc::ServerAsyncResponseWriter< ::handsmotion::ArmAdjustmentResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_MarkAsOriginalPosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_MarkAsOriginalPosition() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_MarkAsOriginalPosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MarkAsOriginalPosition(::grpc::ServerContext* context, const ::handsmotion::MarkAsOriginalPositionRequest* request, ::handsmotion::MarkAsOriginalPositionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMarkAsOriginalPosition(::grpc::ServerContext* context, ::handsmotion::MarkAsOriginalPositionRequest* request, ::grpc::ServerAsyncResponseWriter< ::handsmotion::MarkAsOriginalPositionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAbsolutePosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetAbsolutePosition() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetAbsolutePosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAbsolutePosition(::grpc::ServerContext* context, const ::handsmotion::GetAbsolutePositionRequest* request, ::handsmotion::GetAbsolutePositionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAbsolutePosition(::grpc::ServerContext* context, ::handsmotion::GetAbsolutePositionRequest* request, ::grpc::ServerAsyncResponseWriter< ::handsmotion::GetAbsolutePositionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AbsoluteMove : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_AbsoluteMove() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_AbsoluteMove() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AbsoluteMove(::grpc::ServerContext* context, const ::handsmotion::AbsoluteMoveRequest* request, ::handsmotion::AbsoluteMoveResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAbsoluteMove(::grpc::ServerContext* context, ::handsmotion::AbsoluteMoveRequest* request, ::grpc::ServerAsyncResponseWriter< ::handsmotion::AbsoluteMoveResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_FingersAdjustment<WithAsyncMethod_ArmAdjustment<WithAsyncMethod_MarkAsOriginalPosition<WithAsyncMethod_GetAbsolutePosition<WithAsyncMethod_AbsoluteMove<Service > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_FingersAdjustment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_FingersAdjustment() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::handsmotion::FingersAdjustmentRequest, ::handsmotion::FingersAdjustmentResponse>(
          [this](::grpc::ServerContext* context,
                 const ::handsmotion::FingersAdjustmentRequest* request,
                 ::handsmotion::FingersAdjustmentResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->FingersAdjustment(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_FingersAdjustment(
        ::grpc::experimental::MessageAllocator< ::handsmotion::FingersAdjustmentRequest, ::handsmotion::FingersAdjustmentResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::handsmotion::FingersAdjustmentRequest, ::handsmotion::FingersAdjustmentResponse>*>(
          ::grpc::Service::experimental().GetHandler(0))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_FingersAdjustment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FingersAdjustment(::grpc::ServerContext* context, const ::handsmotion::FingersAdjustmentRequest* request, ::handsmotion::FingersAdjustmentResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void FingersAdjustment(::grpc::ServerContext* context, const ::handsmotion::FingersAdjustmentRequest* request, ::handsmotion::FingersAdjustmentResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ArmAdjustment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_ArmAdjustment() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::handsmotion::ArmAdjustmentRequest, ::handsmotion::ArmAdjustmentResponse>(
          [this](::grpc::ServerContext* context,
                 const ::handsmotion::ArmAdjustmentRequest* request,
                 ::handsmotion::ArmAdjustmentResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->ArmAdjustment(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_ArmAdjustment(
        ::grpc::experimental::MessageAllocator< ::handsmotion::ArmAdjustmentRequest, ::handsmotion::ArmAdjustmentResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::handsmotion::ArmAdjustmentRequest, ::handsmotion::ArmAdjustmentResponse>*>(
          ::grpc::Service::experimental().GetHandler(1))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ArmAdjustment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ArmAdjustment(::grpc::ServerContext* context, const ::handsmotion::ArmAdjustmentRequest* request, ::handsmotion::ArmAdjustmentResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ArmAdjustment(::grpc::ServerContext* context, const ::handsmotion::ArmAdjustmentRequest* request, ::handsmotion::ArmAdjustmentResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_MarkAsOriginalPosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_MarkAsOriginalPosition() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::handsmotion::MarkAsOriginalPositionRequest, ::handsmotion::MarkAsOriginalPositionResponse>(
          [this](::grpc::ServerContext* context,
                 const ::handsmotion::MarkAsOriginalPositionRequest* request,
                 ::handsmotion::MarkAsOriginalPositionResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->MarkAsOriginalPosition(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_MarkAsOriginalPosition(
        ::grpc::experimental::MessageAllocator< ::handsmotion::MarkAsOriginalPositionRequest, ::handsmotion::MarkAsOriginalPositionResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::handsmotion::MarkAsOriginalPositionRequest, ::handsmotion::MarkAsOriginalPositionResponse>*>(
          ::grpc::Service::experimental().GetHandler(2))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_MarkAsOriginalPosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MarkAsOriginalPosition(::grpc::ServerContext* context, const ::handsmotion::MarkAsOriginalPositionRequest* request, ::handsmotion::MarkAsOriginalPositionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void MarkAsOriginalPosition(::grpc::ServerContext* context, const ::handsmotion::MarkAsOriginalPositionRequest* request, ::handsmotion::MarkAsOriginalPositionResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetAbsolutePosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GetAbsolutePosition() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::handsmotion::GetAbsolutePositionRequest, ::handsmotion::GetAbsolutePositionResponse>(
          [this](::grpc::ServerContext* context,
                 const ::handsmotion::GetAbsolutePositionRequest* request,
                 ::handsmotion::GetAbsolutePositionResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetAbsolutePosition(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_GetAbsolutePosition(
        ::grpc::experimental::MessageAllocator< ::handsmotion::GetAbsolutePositionRequest, ::handsmotion::GetAbsolutePositionResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::handsmotion::GetAbsolutePositionRequest, ::handsmotion::GetAbsolutePositionResponse>*>(
          ::grpc::Service::experimental().GetHandler(3))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetAbsolutePosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAbsolutePosition(::grpc::ServerContext* context, const ::handsmotion::GetAbsolutePositionRequest* request, ::handsmotion::GetAbsolutePositionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetAbsolutePosition(::grpc::ServerContext* context, const ::handsmotion::GetAbsolutePositionRequest* request, ::handsmotion::GetAbsolutePositionResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_AbsoluteMove : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_AbsoluteMove() {
      ::grpc::Service::experimental().MarkMethodCallback(4,
        new ::grpc::internal::CallbackUnaryHandler< ::handsmotion::AbsoluteMoveRequest, ::handsmotion::AbsoluteMoveResponse>(
          [this](::grpc::ServerContext* context,
                 const ::handsmotion::AbsoluteMoveRequest* request,
                 ::handsmotion::AbsoluteMoveResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->AbsoluteMove(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_AbsoluteMove(
        ::grpc::experimental::MessageAllocator< ::handsmotion::AbsoluteMoveRequest, ::handsmotion::AbsoluteMoveResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::handsmotion::AbsoluteMoveRequest, ::handsmotion::AbsoluteMoveResponse>*>(
          ::grpc::Service::experimental().GetHandler(4))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_AbsoluteMove() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AbsoluteMove(::grpc::ServerContext* context, const ::handsmotion::AbsoluteMoveRequest* request, ::handsmotion::AbsoluteMoveResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void AbsoluteMove(::grpc::ServerContext* context, const ::handsmotion::AbsoluteMoveRequest* request, ::handsmotion::AbsoluteMoveResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_FingersAdjustment<ExperimentalWithCallbackMethod_ArmAdjustment<ExperimentalWithCallbackMethod_MarkAsOriginalPosition<ExperimentalWithCallbackMethod_GetAbsolutePosition<ExperimentalWithCallbackMethod_AbsoluteMove<Service > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_FingersAdjustment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_FingersAdjustment() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_FingersAdjustment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FingersAdjustment(::grpc::ServerContext* context, const ::handsmotion::FingersAdjustmentRequest* request, ::handsmotion::FingersAdjustmentResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ArmAdjustment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ArmAdjustment() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ArmAdjustment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ArmAdjustment(::grpc::ServerContext* context, const ::handsmotion::ArmAdjustmentRequest* request, ::handsmotion::ArmAdjustmentResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_MarkAsOriginalPosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_MarkAsOriginalPosition() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_MarkAsOriginalPosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MarkAsOriginalPosition(::grpc::ServerContext* context, const ::handsmotion::MarkAsOriginalPositionRequest* request, ::handsmotion::MarkAsOriginalPositionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAbsolutePosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetAbsolutePosition() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetAbsolutePosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAbsolutePosition(::grpc::ServerContext* context, const ::handsmotion::GetAbsolutePositionRequest* request, ::handsmotion::GetAbsolutePositionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AbsoluteMove : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_AbsoluteMove() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_AbsoluteMove() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AbsoluteMove(::grpc::ServerContext* context, const ::handsmotion::AbsoluteMoveRequest* request, ::handsmotion::AbsoluteMoveResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_FingersAdjustment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_FingersAdjustment() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_FingersAdjustment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FingersAdjustment(::grpc::ServerContext* context, const ::handsmotion::FingersAdjustmentRequest* request, ::handsmotion::FingersAdjustmentResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFingersAdjustment(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ArmAdjustment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ArmAdjustment() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ArmAdjustment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ArmAdjustment(::grpc::ServerContext* context, const ::handsmotion::ArmAdjustmentRequest* request, ::handsmotion::ArmAdjustmentResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestArmAdjustment(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_MarkAsOriginalPosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_MarkAsOriginalPosition() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_MarkAsOriginalPosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MarkAsOriginalPosition(::grpc::ServerContext* context, const ::handsmotion::MarkAsOriginalPositionRequest* request, ::handsmotion::MarkAsOriginalPositionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMarkAsOriginalPosition(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAbsolutePosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetAbsolutePosition() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetAbsolutePosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAbsolutePosition(::grpc::ServerContext* context, const ::handsmotion::GetAbsolutePositionRequest* request, ::handsmotion::GetAbsolutePositionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAbsolutePosition(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AbsoluteMove : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_AbsoluteMove() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_AbsoluteMove() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AbsoluteMove(::grpc::ServerContext* context, const ::handsmotion::AbsoluteMoveRequest* request, ::handsmotion::AbsoluteMoveResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAbsoluteMove(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_FingersAdjustment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_FingersAdjustment() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->FingersAdjustment(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_FingersAdjustment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FingersAdjustment(::grpc::ServerContext* context, const ::handsmotion::FingersAdjustmentRequest* request, ::handsmotion::FingersAdjustmentResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void FingersAdjustment(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ArmAdjustment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_ArmAdjustment() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->ArmAdjustment(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_ArmAdjustment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ArmAdjustment(::grpc::ServerContext* context, const ::handsmotion::ArmAdjustmentRequest* request, ::handsmotion::ArmAdjustmentResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ArmAdjustment(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_MarkAsOriginalPosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_MarkAsOriginalPosition() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->MarkAsOriginalPosition(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_MarkAsOriginalPosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MarkAsOriginalPosition(::grpc::ServerContext* context, const ::handsmotion::MarkAsOriginalPositionRequest* request, ::handsmotion::MarkAsOriginalPositionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void MarkAsOriginalPosition(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetAbsolutePosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GetAbsolutePosition() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetAbsolutePosition(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetAbsolutePosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAbsolutePosition(::grpc::ServerContext* context, const ::handsmotion::GetAbsolutePositionRequest* request, ::handsmotion::GetAbsolutePositionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetAbsolutePosition(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_AbsoluteMove : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_AbsoluteMove() {
      ::grpc::Service::experimental().MarkMethodRawCallback(4,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->AbsoluteMove(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_AbsoluteMove() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AbsoluteMove(::grpc::ServerContext* context, const ::handsmotion::AbsoluteMoveRequest* request, ::handsmotion::AbsoluteMoveResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void AbsoluteMove(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_FingersAdjustment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_FingersAdjustment() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::handsmotion::FingersAdjustmentRequest, ::handsmotion::FingersAdjustmentResponse>(std::bind(&WithStreamedUnaryMethod_FingersAdjustment<BaseClass>::StreamedFingersAdjustment, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_FingersAdjustment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FingersAdjustment(::grpc::ServerContext* context, const ::handsmotion::FingersAdjustmentRequest* request, ::handsmotion::FingersAdjustmentResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFingersAdjustment(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::handsmotion::FingersAdjustmentRequest,::handsmotion::FingersAdjustmentResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ArmAdjustment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ArmAdjustment() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::handsmotion::ArmAdjustmentRequest, ::handsmotion::ArmAdjustmentResponse>(std::bind(&WithStreamedUnaryMethod_ArmAdjustment<BaseClass>::StreamedArmAdjustment, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ArmAdjustment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ArmAdjustment(::grpc::ServerContext* context, const ::handsmotion::ArmAdjustmentRequest* request, ::handsmotion::ArmAdjustmentResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedArmAdjustment(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::handsmotion::ArmAdjustmentRequest,::handsmotion::ArmAdjustmentResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_MarkAsOriginalPosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_MarkAsOriginalPosition() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::handsmotion::MarkAsOriginalPositionRequest, ::handsmotion::MarkAsOriginalPositionResponse>(std::bind(&WithStreamedUnaryMethod_MarkAsOriginalPosition<BaseClass>::StreamedMarkAsOriginalPosition, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_MarkAsOriginalPosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status MarkAsOriginalPosition(::grpc::ServerContext* context, const ::handsmotion::MarkAsOriginalPositionRequest* request, ::handsmotion::MarkAsOriginalPositionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedMarkAsOriginalPosition(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::handsmotion::MarkAsOriginalPositionRequest,::handsmotion::MarkAsOriginalPositionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAbsolutePosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetAbsolutePosition() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::handsmotion::GetAbsolutePositionRequest, ::handsmotion::GetAbsolutePositionResponse>(std::bind(&WithStreamedUnaryMethod_GetAbsolutePosition<BaseClass>::StreamedGetAbsolutePosition, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetAbsolutePosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAbsolutePosition(::grpc::ServerContext* context, const ::handsmotion::GetAbsolutePositionRequest* request, ::handsmotion::GetAbsolutePositionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAbsolutePosition(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::handsmotion::GetAbsolutePositionRequest,::handsmotion::GetAbsolutePositionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AbsoluteMove : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_AbsoluteMove() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::handsmotion::AbsoluteMoveRequest, ::handsmotion::AbsoluteMoveResponse>(std::bind(&WithStreamedUnaryMethod_AbsoluteMove<BaseClass>::StreamedAbsoluteMove, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_AbsoluteMove() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AbsoluteMove(::grpc::ServerContext* context, const ::handsmotion::AbsoluteMoveRequest* request, ::handsmotion::AbsoluteMoveResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAbsoluteMove(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::handsmotion::AbsoluteMoveRequest,::handsmotion::AbsoluteMoveResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_FingersAdjustment<WithStreamedUnaryMethod_ArmAdjustment<WithStreamedUnaryMethod_MarkAsOriginalPosition<WithStreamedUnaryMethod_GetAbsolutePosition<WithStreamedUnaryMethod_AbsoluteMove<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_FingersAdjustment<WithStreamedUnaryMethod_ArmAdjustment<WithStreamedUnaryMethod_MarkAsOriginalPosition<WithStreamedUnaryMethod_GetAbsolutePosition<WithStreamedUnaryMethod_AbsoluteMove<Service > > > > > StreamedService;
};

}  // namespace handsmotion


#endif  // GRPC_capability_2eproto__INCLUDED
