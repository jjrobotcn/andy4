// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: capability.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_capability_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_capability_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_capability_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_capability_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[13]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_capability_2eproto;
namespace handsmotion {
class AbsoluteMoveRequest;
class AbsoluteMoveRequestDefaultTypeInternal;
extern AbsoluteMoveRequestDefaultTypeInternal _AbsoluteMoveRequest_default_instance_;
class AbsoluteMoveResponse;
class AbsoluteMoveResponseDefaultTypeInternal;
extern AbsoluteMoveResponseDefaultTypeInternal _AbsoluteMoveResponse_default_instance_;
class ArmAdjustmentRequest;
class ArmAdjustmentRequestDefaultTypeInternal;
extern ArmAdjustmentRequestDefaultTypeInternal _ArmAdjustmentRequest_default_instance_;
class ArmAdjustmentResponse;
class ArmAdjustmentResponseDefaultTypeInternal;
extern ArmAdjustmentResponseDefaultTypeInternal _ArmAdjustmentResponse_default_instance_;
class FingersAdjustmentRequest;
class FingersAdjustmentRequestDefaultTypeInternal;
extern FingersAdjustmentRequestDefaultTypeInternal _FingersAdjustmentRequest_default_instance_;
class FingersAdjustmentRequest_FingerMove;
class FingersAdjustmentRequest_FingerMoveDefaultTypeInternal;
extern FingersAdjustmentRequest_FingerMoveDefaultTypeInternal _FingersAdjustmentRequest_FingerMove_default_instance_;
class FingersAdjustmentResponse;
class FingersAdjustmentResponseDefaultTypeInternal;
extern FingersAdjustmentResponseDefaultTypeInternal _FingersAdjustmentResponse_default_instance_;
class GetAbsolutePositionRequest;
class GetAbsolutePositionRequestDefaultTypeInternal;
extern GetAbsolutePositionRequestDefaultTypeInternal _GetAbsolutePositionRequest_default_instance_;
class GetAbsolutePositionResponse;
class GetAbsolutePositionResponseDefaultTypeInternal;
extern GetAbsolutePositionResponseDefaultTypeInternal _GetAbsolutePositionResponse_default_instance_;
class MarkAsOriginalPositionRequest;
class MarkAsOriginalPositionRequestDefaultTypeInternal;
extern MarkAsOriginalPositionRequestDefaultTypeInternal _MarkAsOriginalPositionRequest_default_instance_;
class MarkAsOriginalPositionResponse;
class MarkAsOriginalPositionResponseDefaultTypeInternal;
extern MarkAsOriginalPositionResponseDefaultTypeInternal _MarkAsOriginalPositionResponse_default_instance_;
class MovementScript;
class MovementScriptDefaultTypeInternal;
extern MovementScriptDefaultTypeInternal _MovementScript_default_instance_;
class Position;
class PositionDefaultTypeInternal;
extern PositionDefaultTypeInternal _Position_default_instance_;
}  // namespace handsmotion
PROTOBUF_NAMESPACE_OPEN
template<> ::handsmotion::AbsoluteMoveRequest* Arena::CreateMaybeMessage<::handsmotion::AbsoluteMoveRequest>(Arena*);
template<> ::handsmotion::AbsoluteMoveResponse* Arena::CreateMaybeMessage<::handsmotion::AbsoluteMoveResponse>(Arena*);
template<> ::handsmotion::ArmAdjustmentRequest* Arena::CreateMaybeMessage<::handsmotion::ArmAdjustmentRequest>(Arena*);
template<> ::handsmotion::ArmAdjustmentResponse* Arena::CreateMaybeMessage<::handsmotion::ArmAdjustmentResponse>(Arena*);
template<> ::handsmotion::FingersAdjustmentRequest* Arena::CreateMaybeMessage<::handsmotion::FingersAdjustmentRequest>(Arena*);
template<> ::handsmotion::FingersAdjustmentRequest_FingerMove* Arena::CreateMaybeMessage<::handsmotion::FingersAdjustmentRequest_FingerMove>(Arena*);
template<> ::handsmotion::FingersAdjustmentResponse* Arena::CreateMaybeMessage<::handsmotion::FingersAdjustmentResponse>(Arena*);
template<> ::handsmotion::GetAbsolutePositionRequest* Arena::CreateMaybeMessage<::handsmotion::GetAbsolutePositionRequest>(Arena*);
template<> ::handsmotion::GetAbsolutePositionResponse* Arena::CreateMaybeMessage<::handsmotion::GetAbsolutePositionResponse>(Arena*);
template<> ::handsmotion::MarkAsOriginalPositionRequest* Arena::CreateMaybeMessage<::handsmotion::MarkAsOriginalPositionRequest>(Arena*);
template<> ::handsmotion::MarkAsOriginalPositionResponse* Arena::CreateMaybeMessage<::handsmotion::MarkAsOriginalPositionResponse>(Arena*);
template<> ::handsmotion::MovementScript* Arena::CreateMaybeMessage<::handsmotion::MovementScript>(Arena*);
template<> ::handsmotion::Position* Arena::CreateMaybeMessage<::handsmotion::Position>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace handsmotion {

enum FingersAdjustmentRequest_FingerMove_FingerMovementTypes : int {
  FingersAdjustmentRequest_FingerMove_FingerMovementTypes_LOOSE = 0,
  FingersAdjustmentRequest_FingerMove_FingerMovementTypes_TIGHT = 1,
  FingersAdjustmentRequest_FingerMove_FingerMovementTypes_FingersAdjustmentRequest_FingerMove_FingerMovementTypes_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  FingersAdjustmentRequest_FingerMove_FingerMovementTypes_FingersAdjustmentRequest_FingerMove_FingerMovementTypes_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool FingersAdjustmentRequest_FingerMove_FingerMovementTypes_IsValid(int value);
constexpr FingersAdjustmentRequest_FingerMove_FingerMovementTypes FingersAdjustmentRequest_FingerMove_FingerMovementTypes_FingerMovementTypes_MIN = FingersAdjustmentRequest_FingerMove_FingerMovementTypes_LOOSE;
constexpr FingersAdjustmentRequest_FingerMove_FingerMovementTypes FingersAdjustmentRequest_FingerMove_FingerMovementTypes_FingerMovementTypes_MAX = FingersAdjustmentRequest_FingerMove_FingerMovementTypes_TIGHT;
constexpr int FingersAdjustmentRequest_FingerMove_FingerMovementTypes_FingerMovementTypes_ARRAYSIZE = FingersAdjustmentRequest_FingerMove_FingerMovementTypes_FingerMovementTypes_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FingersAdjustmentRequest_FingerMove_FingerMovementTypes_descriptor();
template<typename T>
inline const std::string& FingersAdjustmentRequest_FingerMove_FingerMovementTypes_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FingersAdjustmentRequest_FingerMove_FingerMovementTypes>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FingersAdjustmentRequest_FingerMove_FingerMovementTypes_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FingersAdjustmentRequest_FingerMove_FingerMovementTypes_descriptor(), enum_t_value);
}
inline bool FingersAdjustmentRequest_FingerMove_FingerMovementTypes_Parse(
    const std::string& name, FingersAdjustmentRequest_FingerMove_FingerMovementTypes* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FingersAdjustmentRequest_FingerMove_FingerMovementTypes>(
    FingersAdjustmentRequest_FingerMove_FingerMovementTypes_descriptor(), name, value);
}
// ===================================================================

class FingersAdjustmentRequest_FingerMove :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:handsmotion.FingersAdjustmentRequest.FingerMove) */ {
 public:
  FingersAdjustmentRequest_FingerMove();
  virtual ~FingersAdjustmentRequest_FingerMove();

  FingersAdjustmentRequest_FingerMove(const FingersAdjustmentRequest_FingerMove& from);
  FingersAdjustmentRequest_FingerMove(FingersAdjustmentRequest_FingerMove&& from) noexcept
    : FingersAdjustmentRequest_FingerMove() {
    *this = ::std::move(from);
  }

  inline FingersAdjustmentRequest_FingerMove& operator=(const FingersAdjustmentRequest_FingerMove& from) {
    CopyFrom(from);
    return *this;
  }
  inline FingersAdjustmentRequest_FingerMove& operator=(FingersAdjustmentRequest_FingerMove&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FingersAdjustmentRequest_FingerMove& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FingersAdjustmentRequest_FingerMove* internal_default_instance() {
    return reinterpret_cast<const FingersAdjustmentRequest_FingerMove*>(
               &_FingersAdjustmentRequest_FingerMove_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(FingersAdjustmentRequest_FingerMove* other);
  friend void swap(FingersAdjustmentRequest_FingerMove& a, FingersAdjustmentRequest_FingerMove& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FingersAdjustmentRequest_FingerMove* New() const final {
    return CreateMaybeMessage<FingersAdjustmentRequest_FingerMove>(nullptr);
  }

  FingersAdjustmentRequest_FingerMove* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FingersAdjustmentRequest_FingerMove>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FingersAdjustmentRequest_FingerMove& from);
  void MergeFrom(const FingersAdjustmentRequest_FingerMove& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FingersAdjustmentRequest_FingerMove* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "handsmotion.FingersAdjustmentRequest.FingerMove";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_capability_2eproto);
    return ::descriptor_table_capability_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef FingersAdjustmentRequest_FingerMove_FingerMovementTypes FingerMovementTypes;
  static constexpr FingerMovementTypes LOOSE =
    FingersAdjustmentRequest_FingerMove_FingerMovementTypes_LOOSE;
  static constexpr FingerMovementTypes TIGHT =
    FingersAdjustmentRequest_FingerMove_FingerMovementTypes_TIGHT;
  static inline bool FingerMovementTypes_IsValid(int value) {
    return FingersAdjustmentRequest_FingerMove_FingerMovementTypes_IsValid(value);
  }
  static constexpr FingerMovementTypes FingerMovementTypes_MIN =
    FingersAdjustmentRequest_FingerMove_FingerMovementTypes_FingerMovementTypes_MIN;
  static constexpr FingerMovementTypes FingerMovementTypes_MAX =
    FingersAdjustmentRequest_FingerMove_FingerMovementTypes_FingerMovementTypes_MAX;
  static constexpr int FingerMovementTypes_ARRAYSIZE =
    FingersAdjustmentRequest_FingerMove_FingerMovementTypes_FingerMovementTypes_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  FingerMovementTypes_descriptor() {
    return FingersAdjustmentRequest_FingerMove_FingerMovementTypes_descriptor();
  }
  template<typename T>
  static inline const std::string& FingerMovementTypes_Name(T enum_t_value) {
    static_assert(::std::is_same<T, FingerMovementTypes>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function FingerMovementTypes_Name.");
    return FingersAdjustmentRequest_FingerMove_FingerMovementTypes_Name(enum_t_value);
  }
  static inline bool FingerMovementTypes_Parse(const std::string& name,
      FingerMovementTypes* value) {
    return FingersAdjustmentRequest_FingerMove_FingerMovementTypes_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // uint32 finger_idx = 2;
  void clear_finger_idx();
  static const int kFingerIdxFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint32 finger_idx() const;
  void set_finger_idx(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // .handsmotion.FingersAdjustmentRequest.FingerMove.FingerMovementTypes type = 3;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::handsmotion::FingersAdjustmentRequest_FingerMove_FingerMovementTypes type() const;
  void set_type(::handsmotion::FingersAdjustmentRequest_FingerMove_FingerMovementTypes value);

  // int32 stroke = 4;
  void clear_stroke();
  static const int kStrokeFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int32 stroke() const;
  void set_stroke(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:handsmotion.FingersAdjustmentRequest.FingerMove)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 finger_idx_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::int32 stroke_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_capability_2eproto;
};
// -------------------------------------------------------------------

class FingersAdjustmentRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:handsmotion.FingersAdjustmentRequest) */ {
 public:
  FingersAdjustmentRequest();
  virtual ~FingersAdjustmentRequest();

  FingersAdjustmentRequest(const FingersAdjustmentRequest& from);
  FingersAdjustmentRequest(FingersAdjustmentRequest&& from) noexcept
    : FingersAdjustmentRequest() {
    *this = ::std::move(from);
  }

  inline FingersAdjustmentRequest& operator=(const FingersAdjustmentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FingersAdjustmentRequest& operator=(FingersAdjustmentRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FingersAdjustmentRequest& default_instance();

  enum ReqCase {
    kReset = 2,
    kMove = 3,
    REQ_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FingersAdjustmentRequest* internal_default_instance() {
    return reinterpret_cast<const FingersAdjustmentRequest*>(
               &_FingersAdjustmentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(FingersAdjustmentRequest* other);
  friend void swap(FingersAdjustmentRequest& a, FingersAdjustmentRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FingersAdjustmentRequest* New() const final {
    return CreateMaybeMessage<FingersAdjustmentRequest>(nullptr);
  }

  FingersAdjustmentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FingersAdjustmentRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FingersAdjustmentRequest& from);
  void MergeFrom(const FingersAdjustmentRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FingersAdjustmentRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "handsmotion.FingersAdjustmentRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_capability_2eproto);
    return ::descriptor_table_capability_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef FingersAdjustmentRequest_FingerMove FingerMove;

  // accessors -------------------------------------------------------

  // uint32 hand_idx = 1;
  void clear_hand_idx();
  static const int kHandIdxFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint32 hand_idx() const;
  void set_hand_idx(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // bool reset = 2;
  private:
  bool has_reset() const;
  public:
  void clear_reset();
  static const int kResetFieldNumber = 2;
  bool reset() const;
  void set_reset(bool value);

  // .handsmotion.FingersAdjustmentRequest.FingerMove move = 3;
  bool has_move() const;
  void clear_move();
  static const int kMoveFieldNumber = 3;
  const ::handsmotion::FingersAdjustmentRequest_FingerMove& move() const;
  ::handsmotion::FingersAdjustmentRequest_FingerMove* release_move();
  ::handsmotion::FingersAdjustmentRequest_FingerMove* mutable_move();
  void set_allocated_move(::handsmotion::FingersAdjustmentRequest_FingerMove* move);

  void clear_req();
  ReqCase req_case() const;
  // @@protoc_insertion_point(class_scope:handsmotion.FingersAdjustmentRequest)
 private:
  class HasBitSetters;
  void set_has_reset();
  void set_has_move();

  inline bool has_req() const;
  inline void clear_has_req();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 hand_idx_;
  union ReqUnion {
    ReqUnion() {}
    bool reset_;
    ::handsmotion::FingersAdjustmentRequest_FingerMove* move_;
  } req_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_capability_2eproto;
};
// -------------------------------------------------------------------

class FingersAdjustmentResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:handsmotion.FingersAdjustmentResponse) */ {
 public:
  FingersAdjustmentResponse();
  virtual ~FingersAdjustmentResponse();

  FingersAdjustmentResponse(const FingersAdjustmentResponse& from);
  FingersAdjustmentResponse(FingersAdjustmentResponse&& from) noexcept
    : FingersAdjustmentResponse() {
    *this = ::std::move(from);
  }

  inline FingersAdjustmentResponse& operator=(const FingersAdjustmentResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FingersAdjustmentResponse& operator=(FingersAdjustmentResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FingersAdjustmentResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FingersAdjustmentResponse* internal_default_instance() {
    return reinterpret_cast<const FingersAdjustmentResponse*>(
               &_FingersAdjustmentResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(FingersAdjustmentResponse* other);
  friend void swap(FingersAdjustmentResponse& a, FingersAdjustmentResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FingersAdjustmentResponse* New() const final {
    return CreateMaybeMessage<FingersAdjustmentResponse>(nullptr);
  }

  FingersAdjustmentResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FingersAdjustmentResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FingersAdjustmentResponse& from);
  void MergeFrom(const FingersAdjustmentResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FingersAdjustmentResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "handsmotion.FingersAdjustmentResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_capability_2eproto);
    return ::descriptor_table_capability_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:handsmotion.FingersAdjustmentResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_capability_2eproto;
};
// -------------------------------------------------------------------

class ArmAdjustmentRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:handsmotion.ArmAdjustmentRequest) */ {
 public:
  ArmAdjustmentRequest();
  virtual ~ArmAdjustmentRequest();

  ArmAdjustmentRequest(const ArmAdjustmentRequest& from);
  ArmAdjustmentRequest(ArmAdjustmentRequest&& from) noexcept
    : ArmAdjustmentRequest() {
    *this = ::std::move(from);
  }

  inline ArmAdjustmentRequest& operator=(const ArmAdjustmentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ArmAdjustmentRequest& operator=(ArmAdjustmentRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ArmAdjustmentRequest& default_instance();

  enum ReqCase {
    kReset = 2,
    kDisability = 3,
    REQ_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ArmAdjustmentRequest* internal_default_instance() {
    return reinterpret_cast<const ArmAdjustmentRequest*>(
               &_ArmAdjustmentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ArmAdjustmentRequest* other);
  friend void swap(ArmAdjustmentRequest& a, ArmAdjustmentRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ArmAdjustmentRequest* New() const final {
    return CreateMaybeMessage<ArmAdjustmentRequest>(nullptr);
  }

  ArmAdjustmentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ArmAdjustmentRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ArmAdjustmentRequest& from);
  void MergeFrom(const ArmAdjustmentRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ArmAdjustmentRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "handsmotion.ArmAdjustmentRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_capability_2eproto);
    return ::descriptor_table_capability_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 hand_idx = 1;
  void clear_hand_idx();
  static const int kHandIdxFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint32 hand_idx() const;
  void set_hand_idx(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // bool reset = 2;
  private:
  bool has_reset() const;
  public:
  void clear_reset();
  static const int kResetFieldNumber = 2;
  bool reset() const;
  void set_reset(bool value);

  // bool disability = 3;
  private:
  bool has_disability() const;
  public:
  void clear_disability();
  static const int kDisabilityFieldNumber = 3;
  bool disability() const;
  void set_disability(bool value);

  void clear_req();
  ReqCase req_case() const;
  // @@protoc_insertion_point(class_scope:handsmotion.ArmAdjustmentRequest)
 private:
  class HasBitSetters;
  void set_has_reset();
  void set_has_disability();

  inline bool has_req() const;
  inline void clear_has_req();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 hand_idx_;
  union ReqUnion {
    ReqUnion() {}
    bool reset_;
    bool disability_;
  } req_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_capability_2eproto;
};
// -------------------------------------------------------------------

class ArmAdjustmentResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:handsmotion.ArmAdjustmentResponse) */ {
 public:
  ArmAdjustmentResponse();
  virtual ~ArmAdjustmentResponse();

  ArmAdjustmentResponse(const ArmAdjustmentResponse& from);
  ArmAdjustmentResponse(ArmAdjustmentResponse&& from) noexcept
    : ArmAdjustmentResponse() {
    *this = ::std::move(from);
  }

  inline ArmAdjustmentResponse& operator=(const ArmAdjustmentResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ArmAdjustmentResponse& operator=(ArmAdjustmentResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ArmAdjustmentResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ArmAdjustmentResponse* internal_default_instance() {
    return reinterpret_cast<const ArmAdjustmentResponse*>(
               &_ArmAdjustmentResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(ArmAdjustmentResponse* other);
  friend void swap(ArmAdjustmentResponse& a, ArmAdjustmentResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ArmAdjustmentResponse* New() const final {
    return CreateMaybeMessage<ArmAdjustmentResponse>(nullptr);
  }

  ArmAdjustmentResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ArmAdjustmentResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ArmAdjustmentResponse& from);
  void MergeFrom(const ArmAdjustmentResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ArmAdjustmentResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "handsmotion.ArmAdjustmentResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_capability_2eproto);
    return ::descriptor_table_capability_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:handsmotion.ArmAdjustmentResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_capability_2eproto;
};
// -------------------------------------------------------------------

class Position :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:handsmotion.Position) */ {
 public:
  Position();
  virtual ~Position();

  Position(const Position& from);
  Position(Position&& from) noexcept
    : Position() {
    *this = ::std::move(from);
  }

  inline Position& operator=(const Position& from) {
    CopyFrom(from);
    return *this;
  }
  inline Position& operator=(Position&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Position& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Position* internal_default_instance() {
    return reinterpret_cast<const Position*>(
               &_Position_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(Position* other);
  friend void swap(Position& a, Position& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Position* New() const final {
    return CreateMaybeMessage<Position>(nullptr);
  }

  Position* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Position>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Position& from);
  void MergeFrom(const Position& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Position* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "handsmotion.Position";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_capability_2eproto);
    return ::descriptor_table_capability_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes data = 1;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);

  // @@protoc_insertion_point(class_scope:handsmotion.Position)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_capability_2eproto;
};
// -------------------------------------------------------------------

class MarkAsOriginalPositionRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:handsmotion.MarkAsOriginalPositionRequest) */ {
 public:
  MarkAsOriginalPositionRequest();
  virtual ~MarkAsOriginalPositionRequest();

  MarkAsOriginalPositionRequest(const MarkAsOriginalPositionRequest& from);
  MarkAsOriginalPositionRequest(MarkAsOriginalPositionRequest&& from) noexcept
    : MarkAsOriginalPositionRequest() {
    *this = ::std::move(from);
  }

  inline MarkAsOriginalPositionRequest& operator=(const MarkAsOriginalPositionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarkAsOriginalPositionRequest& operator=(MarkAsOriginalPositionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MarkAsOriginalPositionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MarkAsOriginalPositionRequest* internal_default_instance() {
    return reinterpret_cast<const MarkAsOriginalPositionRequest*>(
               &_MarkAsOriginalPositionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(MarkAsOriginalPositionRequest* other);
  friend void swap(MarkAsOriginalPositionRequest& a, MarkAsOriginalPositionRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MarkAsOriginalPositionRequest* New() const final {
    return CreateMaybeMessage<MarkAsOriginalPositionRequest>(nullptr);
  }

  MarkAsOriginalPositionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MarkAsOriginalPositionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MarkAsOriginalPositionRequest& from);
  void MergeFrom(const MarkAsOriginalPositionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarkAsOriginalPositionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "handsmotion.MarkAsOriginalPositionRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_capability_2eproto);
    return ::descriptor_table_capability_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:handsmotion.MarkAsOriginalPositionRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_capability_2eproto;
};
// -------------------------------------------------------------------

class MarkAsOriginalPositionResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:handsmotion.MarkAsOriginalPositionResponse) */ {
 public:
  MarkAsOriginalPositionResponse();
  virtual ~MarkAsOriginalPositionResponse();

  MarkAsOriginalPositionResponse(const MarkAsOriginalPositionResponse& from);
  MarkAsOriginalPositionResponse(MarkAsOriginalPositionResponse&& from) noexcept
    : MarkAsOriginalPositionResponse() {
    *this = ::std::move(from);
  }

  inline MarkAsOriginalPositionResponse& operator=(const MarkAsOriginalPositionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarkAsOriginalPositionResponse& operator=(MarkAsOriginalPositionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MarkAsOriginalPositionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MarkAsOriginalPositionResponse* internal_default_instance() {
    return reinterpret_cast<const MarkAsOriginalPositionResponse*>(
               &_MarkAsOriginalPositionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(MarkAsOriginalPositionResponse* other);
  friend void swap(MarkAsOriginalPositionResponse& a, MarkAsOriginalPositionResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MarkAsOriginalPositionResponse* New() const final {
    return CreateMaybeMessage<MarkAsOriginalPositionResponse>(nullptr);
  }

  MarkAsOriginalPositionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MarkAsOriginalPositionResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MarkAsOriginalPositionResponse& from);
  void MergeFrom(const MarkAsOriginalPositionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarkAsOriginalPositionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "handsmotion.MarkAsOriginalPositionResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_capability_2eproto);
    return ::descriptor_table_capability_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:handsmotion.MarkAsOriginalPositionResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_capability_2eproto;
};
// -------------------------------------------------------------------

class MovementScript :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:handsmotion.MovementScript) */ {
 public:
  MovementScript();
  virtual ~MovementScript();

  MovementScript(const MovementScript& from);
  MovementScript(MovementScript&& from) noexcept
    : MovementScript() {
    *this = ::std::move(from);
  }

  inline MovementScript& operator=(const MovementScript& from) {
    CopyFrom(from);
    return *this;
  }
  inline MovementScript& operator=(MovementScript&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MovementScript& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MovementScript* internal_default_instance() {
    return reinterpret_cast<const MovementScript*>(
               &_MovementScript_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(MovementScript* other);
  friend void swap(MovementScript& a, MovementScript& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MovementScript* New() const final {
    return CreateMaybeMessage<MovementScript>(nullptr);
  }

  MovementScript* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MovementScript>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MovementScript& from);
  void MergeFrom(const MovementScript& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MovementScript* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "handsmotion.MovementScript";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_capability_2eproto);
    return ::descriptor_table_capability_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .handsmotion.Position position = 1;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 1;
  const ::handsmotion::Position& position() const;
  ::handsmotion::Position* release_position();
  ::handsmotion::Position* mutable_position();
  void set_allocated_position(::handsmotion::Position* position);

  // int32 run_time = 2;
  void clear_run_time();
  static const int kRunTimeFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 run_time() const;
  void set_run_time(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 keep_time = 3;
  void clear_keep_time();
  static const int kKeepTimeFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 keep_time() const;
  void set_keep_time(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:handsmotion.MovementScript)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::handsmotion::Position* position_;
  ::PROTOBUF_NAMESPACE_ID::int32 run_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 keep_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_capability_2eproto;
};
// -------------------------------------------------------------------

class GetAbsolutePositionRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:handsmotion.GetAbsolutePositionRequest) */ {
 public:
  GetAbsolutePositionRequest();
  virtual ~GetAbsolutePositionRequest();

  GetAbsolutePositionRequest(const GetAbsolutePositionRequest& from);
  GetAbsolutePositionRequest(GetAbsolutePositionRequest&& from) noexcept
    : GetAbsolutePositionRequest() {
    *this = ::std::move(from);
  }

  inline GetAbsolutePositionRequest& operator=(const GetAbsolutePositionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAbsolutePositionRequest& operator=(GetAbsolutePositionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAbsolutePositionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAbsolutePositionRequest* internal_default_instance() {
    return reinterpret_cast<const GetAbsolutePositionRequest*>(
               &_GetAbsolutePositionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(GetAbsolutePositionRequest* other);
  friend void swap(GetAbsolutePositionRequest& a, GetAbsolutePositionRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetAbsolutePositionRequest* New() const final {
    return CreateMaybeMessage<GetAbsolutePositionRequest>(nullptr);
  }

  GetAbsolutePositionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAbsolutePositionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAbsolutePositionRequest& from);
  void MergeFrom(const GetAbsolutePositionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAbsolutePositionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "handsmotion.GetAbsolutePositionRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_capability_2eproto);
    return ::descriptor_table_capability_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:handsmotion.GetAbsolutePositionRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_capability_2eproto;
};
// -------------------------------------------------------------------

class GetAbsolutePositionResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:handsmotion.GetAbsolutePositionResponse) */ {
 public:
  GetAbsolutePositionResponse();
  virtual ~GetAbsolutePositionResponse();

  GetAbsolutePositionResponse(const GetAbsolutePositionResponse& from);
  GetAbsolutePositionResponse(GetAbsolutePositionResponse&& from) noexcept
    : GetAbsolutePositionResponse() {
    *this = ::std::move(from);
  }

  inline GetAbsolutePositionResponse& operator=(const GetAbsolutePositionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAbsolutePositionResponse& operator=(GetAbsolutePositionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAbsolutePositionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAbsolutePositionResponse* internal_default_instance() {
    return reinterpret_cast<const GetAbsolutePositionResponse*>(
               &_GetAbsolutePositionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(GetAbsolutePositionResponse* other);
  friend void swap(GetAbsolutePositionResponse& a, GetAbsolutePositionResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetAbsolutePositionResponse* New() const final {
    return CreateMaybeMessage<GetAbsolutePositionResponse>(nullptr);
  }

  GetAbsolutePositionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAbsolutePositionResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAbsolutePositionResponse& from);
  void MergeFrom(const GetAbsolutePositionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAbsolutePositionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "handsmotion.GetAbsolutePositionResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_capability_2eproto);
    return ::descriptor_table_capability_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .handsmotion.Position position = 1;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 1;
  const ::handsmotion::Position& position() const;
  ::handsmotion::Position* release_position();
  ::handsmotion::Position* mutable_position();
  void set_allocated_position(::handsmotion::Position* position);

  // @@protoc_insertion_point(class_scope:handsmotion.GetAbsolutePositionResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::handsmotion::Position* position_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_capability_2eproto;
};
// -------------------------------------------------------------------

class AbsoluteMoveRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:handsmotion.AbsoluteMoveRequest) */ {
 public:
  AbsoluteMoveRequest();
  virtual ~AbsoluteMoveRequest();

  AbsoluteMoveRequest(const AbsoluteMoveRequest& from);
  AbsoluteMoveRequest(AbsoluteMoveRequest&& from) noexcept
    : AbsoluteMoveRequest() {
    *this = ::std::move(from);
  }

  inline AbsoluteMoveRequest& operator=(const AbsoluteMoveRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AbsoluteMoveRequest& operator=(AbsoluteMoveRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AbsoluteMoveRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AbsoluteMoveRequest* internal_default_instance() {
    return reinterpret_cast<const AbsoluteMoveRequest*>(
               &_AbsoluteMoveRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(AbsoluteMoveRequest* other);
  friend void swap(AbsoluteMoveRequest& a, AbsoluteMoveRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AbsoluteMoveRequest* New() const final {
    return CreateMaybeMessage<AbsoluteMoveRequest>(nullptr);
  }

  AbsoluteMoveRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AbsoluteMoveRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AbsoluteMoveRequest& from);
  void MergeFrom(const AbsoluteMoveRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AbsoluteMoveRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "handsmotion.AbsoluteMoveRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_capability_2eproto);
    return ::descriptor_table_capability_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .handsmotion.MovementScript scripts = 1;
  int scripts_size() const;
  void clear_scripts();
  static const int kScriptsFieldNumber = 1;
  ::handsmotion::MovementScript* mutable_scripts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::handsmotion::MovementScript >*
      mutable_scripts();
  const ::handsmotion::MovementScript& scripts(int index) const;
  ::handsmotion::MovementScript* add_scripts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::handsmotion::MovementScript >&
      scripts() const;

  // bool sync_mode = 2;
  void clear_sync_mode();
  static const int kSyncModeFieldNumber = 2;
  bool sync_mode() const;
  void set_sync_mode(bool value);

  // @@protoc_insertion_point(class_scope:handsmotion.AbsoluteMoveRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::handsmotion::MovementScript > scripts_;
  bool sync_mode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_capability_2eproto;
};
// -------------------------------------------------------------------

class AbsoluteMoveResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:handsmotion.AbsoluteMoveResponse) */ {
 public:
  AbsoluteMoveResponse();
  virtual ~AbsoluteMoveResponse();

  AbsoluteMoveResponse(const AbsoluteMoveResponse& from);
  AbsoluteMoveResponse(AbsoluteMoveResponse&& from) noexcept
    : AbsoluteMoveResponse() {
    *this = ::std::move(from);
  }

  inline AbsoluteMoveResponse& operator=(const AbsoluteMoveResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AbsoluteMoveResponse& operator=(AbsoluteMoveResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AbsoluteMoveResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AbsoluteMoveResponse* internal_default_instance() {
    return reinterpret_cast<const AbsoluteMoveResponse*>(
               &_AbsoluteMoveResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(AbsoluteMoveResponse* other);
  friend void swap(AbsoluteMoveResponse& a, AbsoluteMoveResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AbsoluteMoveResponse* New() const final {
    return CreateMaybeMessage<AbsoluteMoveResponse>(nullptr);
  }

  AbsoluteMoveResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AbsoluteMoveResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AbsoluteMoveResponse& from);
  void MergeFrom(const AbsoluteMoveResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AbsoluteMoveResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "handsmotion.AbsoluteMoveResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_capability_2eproto);
    return ::descriptor_table_capability_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:handsmotion.AbsoluteMoveResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_capability_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FingersAdjustmentRequest_FingerMove

// uint32 finger_idx = 2;
inline void FingersAdjustmentRequest_FingerMove::clear_finger_idx() {
  finger_idx_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FingersAdjustmentRequest_FingerMove::finger_idx() const {
  // @@protoc_insertion_point(field_get:handsmotion.FingersAdjustmentRequest.FingerMove.finger_idx)
  return finger_idx_;
}
inline void FingersAdjustmentRequest_FingerMove::set_finger_idx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  finger_idx_ = value;
  // @@protoc_insertion_point(field_set:handsmotion.FingersAdjustmentRequest.FingerMove.finger_idx)
}

// .handsmotion.FingersAdjustmentRequest.FingerMove.FingerMovementTypes type = 3;
inline void FingersAdjustmentRequest_FingerMove::clear_type() {
  type_ = 0;
}
inline ::handsmotion::FingersAdjustmentRequest_FingerMove_FingerMovementTypes FingersAdjustmentRequest_FingerMove::type() const {
  // @@protoc_insertion_point(field_get:handsmotion.FingersAdjustmentRequest.FingerMove.type)
  return static_cast< ::handsmotion::FingersAdjustmentRequest_FingerMove_FingerMovementTypes >(type_);
}
inline void FingersAdjustmentRequest_FingerMove::set_type(::handsmotion::FingersAdjustmentRequest_FingerMove_FingerMovementTypes value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:handsmotion.FingersAdjustmentRequest.FingerMove.type)
}

// int32 stroke = 4;
inline void FingersAdjustmentRequest_FingerMove::clear_stroke() {
  stroke_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FingersAdjustmentRequest_FingerMove::stroke() const {
  // @@protoc_insertion_point(field_get:handsmotion.FingersAdjustmentRequest.FingerMove.stroke)
  return stroke_;
}
inline void FingersAdjustmentRequest_FingerMove::set_stroke(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  stroke_ = value;
  // @@protoc_insertion_point(field_set:handsmotion.FingersAdjustmentRequest.FingerMove.stroke)
}

// -------------------------------------------------------------------

// FingersAdjustmentRequest

// uint32 hand_idx = 1;
inline void FingersAdjustmentRequest::clear_hand_idx() {
  hand_idx_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FingersAdjustmentRequest::hand_idx() const {
  // @@protoc_insertion_point(field_get:handsmotion.FingersAdjustmentRequest.hand_idx)
  return hand_idx_;
}
inline void FingersAdjustmentRequest::set_hand_idx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  hand_idx_ = value;
  // @@protoc_insertion_point(field_set:handsmotion.FingersAdjustmentRequest.hand_idx)
}

// bool reset = 2;
inline bool FingersAdjustmentRequest::has_reset() const {
  return req_case() == kReset;
}
inline void FingersAdjustmentRequest::set_has_reset() {
  _oneof_case_[0] = kReset;
}
inline void FingersAdjustmentRequest::clear_reset() {
  if (has_reset()) {
    req_.reset_ = false;
    clear_has_req();
  }
}
inline bool FingersAdjustmentRequest::reset() const {
  // @@protoc_insertion_point(field_get:handsmotion.FingersAdjustmentRequest.reset)
  if (has_reset()) {
    return req_.reset_;
  }
  return false;
}
inline void FingersAdjustmentRequest::set_reset(bool value) {
  if (!has_reset()) {
    clear_req();
    set_has_reset();
  }
  req_.reset_ = value;
  // @@protoc_insertion_point(field_set:handsmotion.FingersAdjustmentRequest.reset)
}

// .handsmotion.FingersAdjustmentRequest.FingerMove move = 3;
inline bool FingersAdjustmentRequest::has_move() const {
  return req_case() == kMove;
}
inline void FingersAdjustmentRequest::set_has_move() {
  _oneof_case_[0] = kMove;
}
inline void FingersAdjustmentRequest::clear_move() {
  if (has_move()) {
    delete req_.move_;
    clear_has_req();
  }
}
inline ::handsmotion::FingersAdjustmentRequest_FingerMove* FingersAdjustmentRequest::release_move() {
  // @@protoc_insertion_point(field_release:handsmotion.FingersAdjustmentRequest.move)
  if (has_move()) {
    clear_has_req();
      ::handsmotion::FingersAdjustmentRequest_FingerMove* temp = req_.move_;
    req_.move_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::handsmotion::FingersAdjustmentRequest_FingerMove& FingersAdjustmentRequest::move() const {
  // @@protoc_insertion_point(field_get:handsmotion.FingersAdjustmentRequest.move)
  return has_move()
      ? *req_.move_
      : *reinterpret_cast< ::handsmotion::FingersAdjustmentRequest_FingerMove*>(&::handsmotion::_FingersAdjustmentRequest_FingerMove_default_instance_);
}
inline ::handsmotion::FingersAdjustmentRequest_FingerMove* FingersAdjustmentRequest::mutable_move() {
  if (!has_move()) {
    clear_req();
    set_has_move();
    req_.move_ = CreateMaybeMessage< ::handsmotion::FingersAdjustmentRequest_FingerMove >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:handsmotion.FingersAdjustmentRequest.move)
  return req_.move_;
}

inline bool FingersAdjustmentRequest::has_req() const {
  return req_case() != REQ_NOT_SET;
}
inline void FingersAdjustmentRequest::clear_has_req() {
  _oneof_case_[0] = REQ_NOT_SET;
}
inline FingersAdjustmentRequest::ReqCase FingersAdjustmentRequest::req_case() const {
  return FingersAdjustmentRequest::ReqCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// FingersAdjustmentResponse

// -------------------------------------------------------------------

// ArmAdjustmentRequest

// uint32 hand_idx = 1;
inline void ArmAdjustmentRequest::clear_hand_idx() {
  hand_idx_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ArmAdjustmentRequest::hand_idx() const {
  // @@protoc_insertion_point(field_get:handsmotion.ArmAdjustmentRequest.hand_idx)
  return hand_idx_;
}
inline void ArmAdjustmentRequest::set_hand_idx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  hand_idx_ = value;
  // @@protoc_insertion_point(field_set:handsmotion.ArmAdjustmentRequest.hand_idx)
}

// bool reset = 2;
inline bool ArmAdjustmentRequest::has_reset() const {
  return req_case() == kReset;
}
inline void ArmAdjustmentRequest::set_has_reset() {
  _oneof_case_[0] = kReset;
}
inline void ArmAdjustmentRequest::clear_reset() {
  if (has_reset()) {
    req_.reset_ = false;
    clear_has_req();
  }
}
inline bool ArmAdjustmentRequest::reset() const {
  // @@protoc_insertion_point(field_get:handsmotion.ArmAdjustmentRequest.reset)
  if (has_reset()) {
    return req_.reset_;
  }
  return false;
}
inline void ArmAdjustmentRequest::set_reset(bool value) {
  if (!has_reset()) {
    clear_req();
    set_has_reset();
  }
  req_.reset_ = value;
  // @@protoc_insertion_point(field_set:handsmotion.ArmAdjustmentRequest.reset)
}

// bool disability = 3;
inline bool ArmAdjustmentRequest::has_disability() const {
  return req_case() == kDisability;
}
inline void ArmAdjustmentRequest::set_has_disability() {
  _oneof_case_[0] = kDisability;
}
inline void ArmAdjustmentRequest::clear_disability() {
  if (has_disability()) {
    req_.disability_ = false;
    clear_has_req();
  }
}
inline bool ArmAdjustmentRequest::disability() const {
  // @@protoc_insertion_point(field_get:handsmotion.ArmAdjustmentRequest.disability)
  if (has_disability()) {
    return req_.disability_;
  }
  return false;
}
inline void ArmAdjustmentRequest::set_disability(bool value) {
  if (!has_disability()) {
    clear_req();
    set_has_disability();
  }
  req_.disability_ = value;
  // @@protoc_insertion_point(field_set:handsmotion.ArmAdjustmentRequest.disability)
}

inline bool ArmAdjustmentRequest::has_req() const {
  return req_case() != REQ_NOT_SET;
}
inline void ArmAdjustmentRequest::clear_has_req() {
  _oneof_case_[0] = REQ_NOT_SET;
}
inline ArmAdjustmentRequest::ReqCase ArmAdjustmentRequest::req_case() const {
  return ArmAdjustmentRequest::ReqCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ArmAdjustmentResponse

// -------------------------------------------------------------------

// Position

// bytes data = 1;
inline void Position::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Position::data() const {
  // @@protoc_insertion_point(field_get:handsmotion.Position.data)
  return data_.GetNoArena();
}
inline void Position::set_data(const std::string& value) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:handsmotion.Position.data)
}
inline void Position::set_data(std::string&& value) {
  
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:handsmotion.Position.data)
}
inline void Position::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:handsmotion.Position.data)
}
inline void Position::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:handsmotion.Position.data)
}
inline std::string* Position::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:handsmotion.Position.data)
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Position::release_data() {
  // @@protoc_insertion_point(field_release:handsmotion.Position.data)
  
  return data_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Position::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:handsmotion.Position.data)
}

// -------------------------------------------------------------------

// MarkAsOriginalPositionRequest

// -------------------------------------------------------------------

// MarkAsOriginalPositionResponse

// -------------------------------------------------------------------

// MovementScript

// .handsmotion.Position position = 1;
inline bool MovementScript::has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline void MovementScript::clear_position() {
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
inline const ::handsmotion::Position& MovementScript::position() const {
  const ::handsmotion::Position* p = position_;
  // @@protoc_insertion_point(field_get:handsmotion.MovementScript.position)
  return p != nullptr ? *p : *reinterpret_cast<const ::handsmotion::Position*>(
      &::handsmotion::_Position_default_instance_);
}
inline ::handsmotion::Position* MovementScript::release_position() {
  // @@protoc_insertion_point(field_release:handsmotion.MovementScript.position)
  
  ::handsmotion::Position* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::handsmotion::Position* MovementScript::mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::handsmotion::Position>(GetArenaNoVirtual());
    position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:handsmotion.MovementScript.position)
  return position_;
}
inline void MovementScript::set_allocated_position(::handsmotion::Position* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:handsmotion.MovementScript.position)
}

// int32 run_time = 2;
inline void MovementScript::clear_run_time() {
  run_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MovementScript::run_time() const {
  // @@protoc_insertion_point(field_get:handsmotion.MovementScript.run_time)
  return run_time_;
}
inline void MovementScript::set_run_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  run_time_ = value;
  // @@protoc_insertion_point(field_set:handsmotion.MovementScript.run_time)
}

// int32 keep_time = 3;
inline void MovementScript::clear_keep_time() {
  keep_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MovementScript::keep_time() const {
  // @@protoc_insertion_point(field_get:handsmotion.MovementScript.keep_time)
  return keep_time_;
}
inline void MovementScript::set_keep_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  keep_time_ = value;
  // @@protoc_insertion_point(field_set:handsmotion.MovementScript.keep_time)
}

// -------------------------------------------------------------------

// GetAbsolutePositionRequest

// -------------------------------------------------------------------

// GetAbsolutePositionResponse

// .handsmotion.Position position = 1;
inline bool GetAbsolutePositionResponse::has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline void GetAbsolutePositionResponse::clear_position() {
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
inline const ::handsmotion::Position& GetAbsolutePositionResponse::position() const {
  const ::handsmotion::Position* p = position_;
  // @@protoc_insertion_point(field_get:handsmotion.GetAbsolutePositionResponse.position)
  return p != nullptr ? *p : *reinterpret_cast<const ::handsmotion::Position*>(
      &::handsmotion::_Position_default_instance_);
}
inline ::handsmotion::Position* GetAbsolutePositionResponse::release_position() {
  // @@protoc_insertion_point(field_release:handsmotion.GetAbsolutePositionResponse.position)
  
  ::handsmotion::Position* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::handsmotion::Position* GetAbsolutePositionResponse::mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::handsmotion::Position>(GetArenaNoVirtual());
    position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:handsmotion.GetAbsolutePositionResponse.position)
  return position_;
}
inline void GetAbsolutePositionResponse::set_allocated_position(::handsmotion::Position* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:handsmotion.GetAbsolutePositionResponse.position)
}

// -------------------------------------------------------------------

// AbsoluteMoveRequest

// repeated .handsmotion.MovementScript scripts = 1;
inline int AbsoluteMoveRequest::scripts_size() const {
  return scripts_.size();
}
inline void AbsoluteMoveRequest::clear_scripts() {
  scripts_.Clear();
}
inline ::handsmotion::MovementScript* AbsoluteMoveRequest::mutable_scripts(int index) {
  // @@protoc_insertion_point(field_mutable:handsmotion.AbsoluteMoveRequest.scripts)
  return scripts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::handsmotion::MovementScript >*
AbsoluteMoveRequest::mutable_scripts() {
  // @@protoc_insertion_point(field_mutable_list:handsmotion.AbsoluteMoveRequest.scripts)
  return &scripts_;
}
inline const ::handsmotion::MovementScript& AbsoluteMoveRequest::scripts(int index) const {
  // @@protoc_insertion_point(field_get:handsmotion.AbsoluteMoveRequest.scripts)
  return scripts_.Get(index);
}
inline ::handsmotion::MovementScript* AbsoluteMoveRequest::add_scripts() {
  // @@protoc_insertion_point(field_add:handsmotion.AbsoluteMoveRequest.scripts)
  return scripts_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::handsmotion::MovementScript >&
AbsoluteMoveRequest::scripts() const {
  // @@protoc_insertion_point(field_list:handsmotion.AbsoluteMoveRequest.scripts)
  return scripts_;
}

// bool sync_mode = 2;
inline void AbsoluteMoveRequest::clear_sync_mode() {
  sync_mode_ = false;
}
inline bool AbsoluteMoveRequest::sync_mode() const {
  // @@protoc_insertion_point(field_get:handsmotion.AbsoluteMoveRequest.sync_mode)
  return sync_mode_;
}
inline void AbsoluteMoveRequest::set_sync_mode(bool value) {
  
  sync_mode_ = value;
  // @@protoc_insertion_point(field_set:handsmotion.AbsoluteMoveRequest.sync_mode)
}

// -------------------------------------------------------------------

// AbsoluteMoveResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace handsmotion

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::handsmotion::FingersAdjustmentRequest_FingerMove_FingerMovementTypes> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::handsmotion::FingersAdjustmentRequest_FingerMove_FingerMovementTypes>() {
  return ::handsmotion::FingersAdjustmentRequest_FingerMove_FingerMovementTypes_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_capability_2eproto
