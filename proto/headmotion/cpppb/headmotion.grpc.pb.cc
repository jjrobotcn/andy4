// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: headmotion.proto

#include "headmotion.pb.h"
#include "headmotion.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace motionService {

static const char* MotionService_method_names[] = {
  "/motionService.MotionService/MoveTo",
  "/motionService.MotionService/PositioningData",
  "/motionService.MotionService/GetPosition",
  "/motionService.MotionService/NewGroup",
  "/motionService.MotionService/ListGroups",
  "/motionService.MotionService/UpdateGroup",
  "/motionService.MotionService/DeleteGroups",
  "/motionService.MotionService/ListGroupTargets",
  "/motionService.MotionService/UpdateGroupTargets",
};

std::unique_ptr< MotionService::Stub> MotionService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MotionService::Stub> stub(new MotionService::Stub(channel));
  return stub;
}

MotionService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_MoveTo_(MotionService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PositioningData_(MotionService_method_names[1], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_GetPosition_(MotionService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_NewGroup_(MotionService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListGroups_(MotionService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateGroup_(MotionService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteGroups_(MotionService_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListGroupTargets_(MotionService_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateGroupTargets_(MotionService_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status MotionService::Stub::MoveTo(::grpc::ClientContext* context, const ::motionService::MoveToRequest& request, ::motionService::MoveToResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_MoveTo_, context, request, response);
}

void MotionService::Stub::experimental_async::MoveTo(::grpc::ClientContext* context, const ::motionService::MoveToRequest* request, ::motionService::MoveToResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_MoveTo_, context, request, response, std::move(f));
}

void MotionService::Stub::experimental_async::MoveTo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::motionService::MoveToResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_MoveTo_, context, request, response, std::move(f));
}

void MotionService::Stub::experimental_async::MoveTo(::grpc::ClientContext* context, const ::motionService::MoveToRequest* request, ::motionService::MoveToResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_MoveTo_, context, request, response, reactor);
}

void MotionService::Stub::experimental_async::MoveTo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::motionService::MoveToResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_MoveTo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::motionService::MoveToResponse>* MotionService::Stub::AsyncMoveToRaw(::grpc::ClientContext* context, const ::motionService::MoveToRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::motionService::MoveToResponse>::Create(channel_.get(), cq, rpcmethod_MoveTo_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::motionService::MoveToResponse>* MotionService::Stub::PrepareAsyncMoveToRaw(::grpc::ClientContext* context, const ::motionService::MoveToRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::motionService::MoveToResponse>::Create(channel_.get(), cq, rpcmethod_MoveTo_, context, request, false);
}

::grpc::ClientReader< ::motionService::PositioningDataResponse>* MotionService::Stub::PositioningDataRaw(::grpc::ClientContext* context, const ::motionService::PositioningDataRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::motionService::PositioningDataResponse>::Create(channel_.get(), rpcmethod_PositioningData_, context, request);
}

void MotionService::Stub::experimental_async::PositioningData(::grpc::ClientContext* context, ::motionService::PositioningDataRequest* request, ::grpc::experimental::ClientReadReactor< ::motionService::PositioningDataResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::motionService::PositioningDataResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_PositioningData_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::motionService::PositioningDataResponse>* MotionService::Stub::AsyncPositioningDataRaw(::grpc::ClientContext* context, const ::motionService::PositioningDataRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::motionService::PositioningDataResponse>::Create(channel_.get(), cq, rpcmethod_PositioningData_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::motionService::PositioningDataResponse>* MotionService::Stub::PrepareAsyncPositioningDataRaw(::grpc::ClientContext* context, const ::motionService::PositioningDataRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::motionService::PositioningDataResponse>::Create(channel_.get(), cq, rpcmethod_PositioningData_, context, request, false, nullptr);
}

::grpc::Status MotionService::Stub::GetPosition(::grpc::ClientContext* context, const ::motionService::GetPositionRequest& request, ::motionService::GetPositionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetPosition_, context, request, response);
}

void MotionService::Stub::experimental_async::GetPosition(::grpc::ClientContext* context, const ::motionService::GetPositionRequest* request, ::motionService::GetPositionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetPosition_, context, request, response, std::move(f));
}

void MotionService::Stub::experimental_async::GetPosition(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::motionService::GetPositionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetPosition_, context, request, response, std::move(f));
}

void MotionService::Stub::experimental_async::GetPosition(::grpc::ClientContext* context, const ::motionService::GetPositionRequest* request, ::motionService::GetPositionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetPosition_, context, request, response, reactor);
}

void MotionService::Stub::experimental_async::GetPosition(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::motionService::GetPositionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetPosition_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::motionService::GetPositionResponse>* MotionService::Stub::AsyncGetPositionRaw(::grpc::ClientContext* context, const ::motionService::GetPositionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::motionService::GetPositionResponse>::Create(channel_.get(), cq, rpcmethod_GetPosition_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::motionService::GetPositionResponse>* MotionService::Stub::PrepareAsyncGetPositionRaw(::grpc::ClientContext* context, const ::motionService::GetPositionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::motionService::GetPositionResponse>::Create(channel_.get(), cq, rpcmethod_GetPosition_, context, request, false);
}

::grpc::Status MotionService::Stub::NewGroup(::grpc::ClientContext* context, const ::motionService::NewGroupRequest& request, ::motionService::NewGroupResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_NewGroup_, context, request, response);
}

void MotionService::Stub::experimental_async::NewGroup(::grpc::ClientContext* context, const ::motionService::NewGroupRequest* request, ::motionService::NewGroupResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_NewGroup_, context, request, response, std::move(f));
}

void MotionService::Stub::experimental_async::NewGroup(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::motionService::NewGroupResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_NewGroup_, context, request, response, std::move(f));
}

void MotionService::Stub::experimental_async::NewGroup(::grpc::ClientContext* context, const ::motionService::NewGroupRequest* request, ::motionService::NewGroupResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_NewGroup_, context, request, response, reactor);
}

void MotionService::Stub::experimental_async::NewGroup(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::motionService::NewGroupResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_NewGroup_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::motionService::NewGroupResponse>* MotionService::Stub::AsyncNewGroupRaw(::grpc::ClientContext* context, const ::motionService::NewGroupRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::motionService::NewGroupResponse>::Create(channel_.get(), cq, rpcmethod_NewGroup_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::motionService::NewGroupResponse>* MotionService::Stub::PrepareAsyncNewGroupRaw(::grpc::ClientContext* context, const ::motionService::NewGroupRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::motionService::NewGroupResponse>::Create(channel_.get(), cq, rpcmethod_NewGroup_, context, request, false);
}

::grpc::Status MotionService::Stub::ListGroups(::grpc::ClientContext* context, const ::motionService::ListGroupsRequest& request, ::motionService::ListGroupsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListGroups_, context, request, response);
}

void MotionService::Stub::experimental_async::ListGroups(::grpc::ClientContext* context, const ::motionService::ListGroupsRequest* request, ::motionService::ListGroupsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListGroups_, context, request, response, std::move(f));
}

void MotionService::Stub::experimental_async::ListGroups(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::motionService::ListGroupsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListGroups_, context, request, response, std::move(f));
}

void MotionService::Stub::experimental_async::ListGroups(::grpc::ClientContext* context, const ::motionService::ListGroupsRequest* request, ::motionService::ListGroupsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListGroups_, context, request, response, reactor);
}

void MotionService::Stub::experimental_async::ListGroups(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::motionService::ListGroupsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListGroups_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::motionService::ListGroupsResponse>* MotionService::Stub::AsyncListGroupsRaw(::grpc::ClientContext* context, const ::motionService::ListGroupsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::motionService::ListGroupsResponse>::Create(channel_.get(), cq, rpcmethod_ListGroups_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::motionService::ListGroupsResponse>* MotionService::Stub::PrepareAsyncListGroupsRaw(::grpc::ClientContext* context, const ::motionService::ListGroupsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::motionService::ListGroupsResponse>::Create(channel_.get(), cq, rpcmethod_ListGroups_, context, request, false);
}

::grpc::Status MotionService::Stub::UpdateGroup(::grpc::ClientContext* context, const ::motionService::UpdateGroupRequest& request, ::motionService::UpdateGroupResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateGroup_, context, request, response);
}

void MotionService::Stub::experimental_async::UpdateGroup(::grpc::ClientContext* context, const ::motionService::UpdateGroupRequest* request, ::motionService::UpdateGroupResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateGroup_, context, request, response, std::move(f));
}

void MotionService::Stub::experimental_async::UpdateGroup(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::motionService::UpdateGroupResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateGroup_, context, request, response, std::move(f));
}

void MotionService::Stub::experimental_async::UpdateGroup(::grpc::ClientContext* context, const ::motionService::UpdateGroupRequest* request, ::motionService::UpdateGroupResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UpdateGroup_, context, request, response, reactor);
}

void MotionService::Stub::experimental_async::UpdateGroup(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::motionService::UpdateGroupResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UpdateGroup_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::motionService::UpdateGroupResponse>* MotionService::Stub::AsyncUpdateGroupRaw(::grpc::ClientContext* context, const ::motionService::UpdateGroupRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::motionService::UpdateGroupResponse>::Create(channel_.get(), cq, rpcmethod_UpdateGroup_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::motionService::UpdateGroupResponse>* MotionService::Stub::PrepareAsyncUpdateGroupRaw(::grpc::ClientContext* context, const ::motionService::UpdateGroupRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::motionService::UpdateGroupResponse>::Create(channel_.get(), cq, rpcmethod_UpdateGroup_, context, request, false);
}

::grpc::Status MotionService::Stub::DeleteGroups(::grpc::ClientContext* context, const ::motionService::DeleteGroupsRequest& request, ::motionService::DeleteGroupsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteGroups_, context, request, response);
}

void MotionService::Stub::experimental_async::DeleteGroups(::grpc::ClientContext* context, const ::motionService::DeleteGroupsRequest* request, ::motionService::DeleteGroupsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteGroups_, context, request, response, std::move(f));
}

void MotionService::Stub::experimental_async::DeleteGroups(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::motionService::DeleteGroupsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteGroups_, context, request, response, std::move(f));
}

void MotionService::Stub::experimental_async::DeleteGroups(::grpc::ClientContext* context, const ::motionService::DeleteGroupsRequest* request, ::motionService::DeleteGroupsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteGroups_, context, request, response, reactor);
}

void MotionService::Stub::experimental_async::DeleteGroups(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::motionService::DeleteGroupsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteGroups_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::motionService::DeleteGroupsResponse>* MotionService::Stub::AsyncDeleteGroupsRaw(::grpc::ClientContext* context, const ::motionService::DeleteGroupsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::motionService::DeleteGroupsResponse>::Create(channel_.get(), cq, rpcmethod_DeleteGroups_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::motionService::DeleteGroupsResponse>* MotionService::Stub::PrepareAsyncDeleteGroupsRaw(::grpc::ClientContext* context, const ::motionService::DeleteGroupsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::motionService::DeleteGroupsResponse>::Create(channel_.get(), cq, rpcmethod_DeleteGroups_, context, request, false);
}

::grpc::Status MotionService::Stub::ListGroupTargets(::grpc::ClientContext* context, const ::motionService::ListGroupTargetsRequest& request, ::motionService::ListGroupTargetsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListGroupTargets_, context, request, response);
}

void MotionService::Stub::experimental_async::ListGroupTargets(::grpc::ClientContext* context, const ::motionService::ListGroupTargetsRequest* request, ::motionService::ListGroupTargetsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListGroupTargets_, context, request, response, std::move(f));
}

void MotionService::Stub::experimental_async::ListGroupTargets(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::motionService::ListGroupTargetsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListGroupTargets_, context, request, response, std::move(f));
}

void MotionService::Stub::experimental_async::ListGroupTargets(::grpc::ClientContext* context, const ::motionService::ListGroupTargetsRequest* request, ::motionService::ListGroupTargetsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListGroupTargets_, context, request, response, reactor);
}

void MotionService::Stub::experimental_async::ListGroupTargets(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::motionService::ListGroupTargetsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListGroupTargets_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::motionService::ListGroupTargetsResponse>* MotionService::Stub::AsyncListGroupTargetsRaw(::grpc::ClientContext* context, const ::motionService::ListGroupTargetsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::motionService::ListGroupTargetsResponse>::Create(channel_.get(), cq, rpcmethod_ListGroupTargets_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::motionService::ListGroupTargetsResponse>* MotionService::Stub::PrepareAsyncListGroupTargetsRaw(::grpc::ClientContext* context, const ::motionService::ListGroupTargetsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::motionService::ListGroupTargetsResponse>::Create(channel_.get(), cq, rpcmethod_ListGroupTargets_, context, request, false);
}

::grpc::Status MotionService::Stub::UpdateGroupTargets(::grpc::ClientContext* context, const ::motionService::UpdateGroupTargetsRequest& request, ::motionService::UpdateGroupTargetsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateGroupTargets_, context, request, response);
}

void MotionService::Stub::experimental_async::UpdateGroupTargets(::grpc::ClientContext* context, const ::motionService::UpdateGroupTargetsRequest* request, ::motionService::UpdateGroupTargetsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateGroupTargets_, context, request, response, std::move(f));
}

void MotionService::Stub::experimental_async::UpdateGroupTargets(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::motionService::UpdateGroupTargetsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateGroupTargets_, context, request, response, std::move(f));
}

void MotionService::Stub::experimental_async::UpdateGroupTargets(::grpc::ClientContext* context, const ::motionService::UpdateGroupTargetsRequest* request, ::motionService::UpdateGroupTargetsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UpdateGroupTargets_, context, request, response, reactor);
}

void MotionService::Stub::experimental_async::UpdateGroupTargets(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::motionService::UpdateGroupTargetsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UpdateGroupTargets_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::motionService::UpdateGroupTargetsResponse>* MotionService::Stub::AsyncUpdateGroupTargetsRaw(::grpc::ClientContext* context, const ::motionService::UpdateGroupTargetsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::motionService::UpdateGroupTargetsResponse>::Create(channel_.get(), cq, rpcmethod_UpdateGroupTargets_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::motionService::UpdateGroupTargetsResponse>* MotionService::Stub::PrepareAsyncUpdateGroupTargetsRaw(::grpc::ClientContext* context, const ::motionService::UpdateGroupTargetsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::motionService::UpdateGroupTargetsResponse>::Create(channel_.get(), cq, rpcmethod_UpdateGroupTargets_, context, request, false);
}

MotionService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MotionService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MotionService::Service, ::motionService::MoveToRequest, ::motionService::MoveToResponse>(
          std::mem_fn(&MotionService::Service::MoveTo), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MotionService_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< MotionService::Service, ::motionService::PositioningDataRequest, ::motionService::PositioningDataResponse>(
          std::mem_fn(&MotionService::Service::PositioningData), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MotionService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MotionService::Service, ::motionService::GetPositionRequest, ::motionService::GetPositionResponse>(
          std::mem_fn(&MotionService::Service::GetPosition), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MotionService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MotionService::Service, ::motionService::NewGroupRequest, ::motionService::NewGroupResponse>(
          std::mem_fn(&MotionService::Service::NewGroup), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MotionService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MotionService::Service, ::motionService::ListGroupsRequest, ::motionService::ListGroupsResponse>(
          std::mem_fn(&MotionService::Service::ListGroups), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MotionService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MotionService::Service, ::motionService::UpdateGroupRequest, ::motionService::UpdateGroupResponse>(
          std::mem_fn(&MotionService::Service::UpdateGroup), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MotionService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MotionService::Service, ::motionService::DeleteGroupsRequest, ::motionService::DeleteGroupsResponse>(
          std::mem_fn(&MotionService::Service::DeleteGroups), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MotionService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MotionService::Service, ::motionService::ListGroupTargetsRequest, ::motionService::ListGroupTargetsResponse>(
          std::mem_fn(&MotionService::Service::ListGroupTargets), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MotionService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MotionService::Service, ::motionService::UpdateGroupTargetsRequest, ::motionService::UpdateGroupTargetsResponse>(
          std::mem_fn(&MotionService::Service::UpdateGroupTargets), this)));
}

MotionService::Service::~Service() {
}

::grpc::Status MotionService::Service::MoveTo(::grpc::ServerContext* context, const ::motionService::MoveToRequest* request, ::motionService::MoveToResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MotionService::Service::PositioningData(::grpc::ServerContext* context, const ::motionService::PositioningDataRequest* request, ::grpc::ServerWriter< ::motionService::PositioningDataResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MotionService::Service::GetPosition(::grpc::ServerContext* context, const ::motionService::GetPositionRequest* request, ::motionService::GetPositionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MotionService::Service::NewGroup(::grpc::ServerContext* context, const ::motionService::NewGroupRequest* request, ::motionService::NewGroupResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MotionService::Service::ListGroups(::grpc::ServerContext* context, const ::motionService::ListGroupsRequest* request, ::motionService::ListGroupsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MotionService::Service::UpdateGroup(::grpc::ServerContext* context, const ::motionService::UpdateGroupRequest* request, ::motionService::UpdateGroupResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MotionService::Service::DeleteGroups(::grpc::ServerContext* context, const ::motionService::DeleteGroupsRequest* request, ::motionService::DeleteGroupsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MotionService::Service::ListGroupTargets(::grpc::ServerContext* context, const ::motionService::ListGroupTargetsRequest* request, ::motionService::ListGroupTargetsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MotionService::Service::UpdateGroupTargets(::grpc::ServerContext* context, const ::motionService::UpdateGroupTargetsRequest* request, ::motionService::UpdateGroupTargetsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace motionService

