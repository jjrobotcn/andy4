// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: headmotion.proto

package motionService

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// 功能类型
type MotionType int32

const (
	// 保留
	MotionType_UNKNOWN_MOTION_TYPE MotionType = 0
	// 头部
	MotionType_HEAD MotionType = 1
)

var MotionType_name = map[int32]string{
	0: "UNKNOWN_MOTION_TYPE",
	1: "HEAD",
}

var MotionType_value = map[string]int32{
	"UNKNOWN_MOTION_TYPE": 0,
	"HEAD":                1,
}

func (x MotionType) String() string {
	return proto.EnumName(MotionType_name, int32(x))
}

func (MotionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f381448c32ed31c0, []int{0}
}

// 位置坐标定义
// 0值为默认居中
type Position struct {
	// x轴位置
	// 正负值, 左值为负
	XAxis int32 `protobuf:"varint,1,opt,name=x_axis,json=xAxis,proto3" json:"x_axis,omitempty"`
	// y轴位置
	// 正负值, 底值为负
	YAxis                int32    `protobuf:"varint,2,opt,name=y_axis,json=yAxis,proto3" json:"y_axis,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Position) Reset()         { *m = Position{} }
func (m *Position) String() string { return proto.CompactTextString(m) }
func (*Position) ProtoMessage()    {}
func (*Position) Descriptor() ([]byte, []int) {
	return fileDescriptor_f381448c32ed31c0, []int{0}
}
func (m *Position) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Position) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Position.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Position) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Position.Merge(m, src)
}
func (m *Position) XXX_Size() int {
	return m.Size()
}
func (m *Position) XXX_DiscardUnknown() {
	xxx_messageInfo_Position.DiscardUnknown(m)
}

var xxx_messageInfo_Position proto.InternalMessageInfo

func (m *Position) GetXAxis() int32 {
	if m != nil {
		return m.XAxis
	}
	return 0
}

func (m *Position) GetYAxis() int32 {
	if m != nil {
		return m.YAxis
	}
	return 0
}

// 运动配置参数定义
type MotionConfig struct {
	// 运动速度
	Speed uint32 `protobuf:"varint,1,opt,name=speed,proto3" json:"speed,omitempty"`
	// 移动到目标后等待时长(毫秒)
	WaitMillisecond      uint32   `protobuf:"varint,2,opt,name=wait_millisecond,json=waitMillisecond,proto3" json:"wait_millisecond,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MotionConfig) Reset()         { *m = MotionConfig{} }
func (m *MotionConfig) String() string { return proto.CompactTextString(m) }
func (*MotionConfig) ProtoMessage()    {}
func (*MotionConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_f381448c32ed31c0, []int{1}
}
func (m *MotionConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MotionConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MotionConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MotionConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MotionConfig.Merge(m, src)
}
func (m *MotionConfig) XXX_Size() int {
	return m.Size()
}
func (m *MotionConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_MotionConfig.DiscardUnknown(m)
}

var xxx_messageInfo_MotionConfig proto.InternalMessageInfo

func (m *MotionConfig) GetSpeed() uint32 {
	if m != nil {
		return m.Speed
	}
	return 0
}

func (m *MotionConfig) GetWaitMillisecond() uint32 {
	if m != nil {
		return m.WaitMillisecond
	}
	return 0
}

// 动作组
type Group struct {
	// 组信息
	GroupInfo *GroupInfo `protobuf:"bytes,1,opt,name=group_info,json=groupInfo,proto3" json:"group_info,omitempty"`
	// 目标列表
	Targets              []*Target `protobuf:"bytes,2,rep,name=targets,proto3" json:"targets,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Group) Reset()         { *m = Group{} }
func (m *Group) String() string { return proto.CompactTextString(m) }
func (*Group) ProtoMessage()    {}
func (*Group) Descriptor() ([]byte, []int) {
	return fileDescriptor_f381448c32ed31c0, []int{2}
}
func (m *Group) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Group) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Group.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Group) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Group.Merge(m, src)
}
func (m *Group) XXX_Size() int {
	return m.Size()
}
func (m *Group) XXX_DiscardUnknown() {
	xxx_messageInfo_Group.DiscardUnknown(m)
}

var xxx_messageInfo_Group proto.InternalMessageInfo

func (m *Group) GetGroupInfo() *GroupInfo {
	if m != nil {
		return m.GroupInfo
	}
	return nil
}

func (m *Group) GetTargets() []*Target {
	if m != nil {
		return m.Targets
	}
	return nil
}

// 组信息
type GroupInfo struct {
	// 组id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// 组名
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// 功能类型
	MotionType           MotionType `protobuf:"varint,3,opt,name=motion_type,json=motionType,proto3,enum=motionService.MotionType" json:"motion_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *GroupInfo) Reset()         { *m = GroupInfo{} }
func (m *GroupInfo) String() string { return proto.CompactTextString(m) }
func (*GroupInfo) ProtoMessage()    {}
func (*GroupInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_f381448c32ed31c0, []int{3}
}
func (m *GroupInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupInfo.Merge(m, src)
}
func (m *GroupInfo) XXX_Size() int {
	return m.Size()
}
func (m *GroupInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupInfo.DiscardUnknown(m)
}

var xxx_messageInfo_GroupInfo proto.InternalMessageInfo

func (m *GroupInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *GroupInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GroupInfo) GetMotionType() MotionType {
	if m != nil {
		return m.MotionType
	}
	return MotionType_UNKNOWN_MOTION_TYPE
}

// 目标点信息
type Target struct {
	// 位置坐标
	Position *Position `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
	// 功能类型
	MotionConfig         *MotionConfig `protobuf:"bytes,2,opt,name=motion_config,json=motionConfig,proto3" json:"motion_config,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Target) Reset()         { *m = Target{} }
func (m *Target) String() string { return proto.CompactTextString(m) }
func (*Target) ProtoMessage()    {}
func (*Target) Descriptor() ([]byte, []int) {
	return fileDescriptor_f381448c32ed31c0, []int{4}
}
func (m *Target) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Target) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Target.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Target) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Target.Merge(m, src)
}
func (m *Target) XXX_Size() int {
	return m.Size()
}
func (m *Target) XXX_DiscardUnknown() {
	xxx_messageInfo_Target.DiscardUnknown(m)
}

var xxx_messageInfo_Target proto.InternalMessageInfo

func (m *Target) GetPosition() *Position {
	if m != nil {
		return m.Position
	}
	return nil
}

func (m *Target) GetMotionConfig() *MotionConfig {
	if m != nil {
		return m.MotionConfig
	}
	return nil
}

// 组目标请求
type GroupTargetRequest struct {
	// Types that are valid to be assigned to GroupIdNameOneof:
	//	*GroupTargetRequest_Id
	//	*GroupTargetRequest_Name
	GroupIdNameOneof     isGroupTargetRequest_GroupIdNameOneof `protobuf_oneof:"group_id_name_oneof"`
	XXX_NoUnkeyedLiteral struct{}                              `json:"-"`
	XXX_unrecognized     []byte                                `json:"-"`
	XXX_sizecache        int32                                 `json:"-"`
}

func (m *GroupTargetRequest) Reset()         { *m = GroupTargetRequest{} }
func (m *GroupTargetRequest) String() string { return proto.CompactTextString(m) }
func (*GroupTargetRequest) ProtoMessage()    {}
func (*GroupTargetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f381448c32ed31c0, []int{5}
}
func (m *GroupTargetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupTargetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupTargetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupTargetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupTargetRequest.Merge(m, src)
}
func (m *GroupTargetRequest) XXX_Size() int {
	return m.Size()
}
func (m *GroupTargetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupTargetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GroupTargetRequest proto.InternalMessageInfo

type isGroupTargetRequest_GroupIdNameOneof interface {
	isGroupTargetRequest_GroupIdNameOneof()
	MarshalTo([]byte) (int, error)
	Size() int
}

type GroupTargetRequest_Id struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3,oneof"`
}
type GroupTargetRequest_Name struct {
	Name string `protobuf:"bytes,2,opt,name=name,proto3,oneof"`
}

func (*GroupTargetRequest_Id) isGroupTargetRequest_GroupIdNameOneof()   {}
func (*GroupTargetRequest_Name) isGroupTargetRequest_GroupIdNameOneof() {}

func (m *GroupTargetRequest) GetGroupIdNameOneof() isGroupTargetRequest_GroupIdNameOneof {
	if m != nil {
		return m.GroupIdNameOneof
	}
	return nil
}

func (m *GroupTargetRequest) GetId() string {
	if x, ok := m.GetGroupIdNameOneof().(*GroupTargetRequest_Id); ok {
		return x.Id
	}
	return ""
}

func (m *GroupTargetRequest) GetName() string {
	if x, ok := m.GetGroupIdNameOneof().(*GroupTargetRequest_Name); ok {
		return x.Name
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*GroupTargetRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _GroupTargetRequest_OneofMarshaler, _GroupTargetRequest_OneofUnmarshaler, _GroupTargetRequest_OneofSizer, []interface{}{
		(*GroupTargetRequest_Id)(nil),
		(*GroupTargetRequest_Name)(nil),
	}
}

func _GroupTargetRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*GroupTargetRequest)
	// group_id_name_oneof
	switch x := m.GroupIdNameOneof.(type) {
	case *GroupTargetRequest_Id:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.Id)
	case *GroupTargetRequest_Name:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.Name)
	case nil:
	default:
		return fmt.Errorf("GroupTargetRequest.GroupIdNameOneof has unexpected type %T", x)
	}
	return nil
}

func _GroupTargetRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*GroupTargetRequest)
	switch tag {
	case 1: // group_id_name_oneof.id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.GroupIdNameOneof = &GroupTargetRequest_Id{x}
		return true, err
	case 2: // group_id_name_oneof.name
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.GroupIdNameOneof = &GroupTargetRequest_Name{x}
		return true, err
	default:
		return false, nil
	}
}

func _GroupTargetRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*GroupTargetRequest)
	// group_id_name_oneof
	switch x := m.GroupIdNameOneof.(type) {
	case *GroupTargetRequest_Id:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.Id)))
		n += len(x.Id)
	case *GroupTargetRequest_Name:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.Name)))
		n += len(x.Name)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// 组目标列表请求
type GroupsTargetRequest struct {
	// 组目标列表
	Groups               []*GroupTargetRequest `protobuf:"bytes,1,rep,name=groups,proto3" json:"groups,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *GroupsTargetRequest) Reset()         { *m = GroupsTargetRequest{} }
func (m *GroupsTargetRequest) String() string { return proto.CompactTextString(m) }
func (*GroupsTargetRequest) ProtoMessage()    {}
func (*GroupsTargetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f381448c32ed31c0, []int{6}
}
func (m *GroupsTargetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupsTargetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupsTargetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupsTargetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupsTargetRequest.Merge(m, src)
}
func (m *GroupsTargetRequest) XXX_Size() int {
	return m.Size()
}
func (m *GroupsTargetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupsTargetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GroupsTargetRequest proto.InternalMessageInfo

func (m *GroupsTargetRequest) GetGroups() []*GroupTargetRequest {
	if m != nil {
		return m.Groups
	}
	return nil
}

// 单点目标请求
type PositionTargetRequest struct {
	// Types that are valid to be assigned to PositionTargetOneof:
	//	*PositionTargetRequest_AbsoluteTarget
	//	*PositionTargetRequest_RelativeTarget
	PositionTargetOneof  isPositionTargetRequest_PositionTargetOneof `protobuf_oneof:"position_target_oneof"`
	XXX_NoUnkeyedLiteral struct{}                                    `json:"-"`
	XXX_unrecognized     []byte                                      `json:"-"`
	XXX_sizecache        int32                                       `json:"-"`
}

func (m *PositionTargetRequest) Reset()         { *m = PositionTargetRequest{} }
func (m *PositionTargetRequest) String() string { return proto.CompactTextString(m) }
func (*PositionTargetRequest) ProtoMessage()    {}
func (*PositionTargetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f381448c32ed31c0, []int{7}
}
func (m *PositionTargetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PositionTargetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PositionTargetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PositionTargetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PositionTargetRequest.Merge(m, src)
}
func (m *PositionTargetRequest) XXX_Size() int {
	return m.Size()
}
func (m *PositionTargetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PositionTargetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PositionTargetRequest proto.InternalMessageInfo

type isPositionTargetRequest_PositionTargetOneof interface {
	isPositionTargetRequest_PositionTargetOneof()
	MarshalTo([]byte) (int, error)
	Size() int
}

type PositionTargetRequest_AbsoluteTarget struct {
	AbsoluteTarget *Target `protobuf:"bytes,1,opt,name=absolute_target,json=absoluteTarget,proto3,oneof"`
}
type PositionTargetRequest_RelativeTarget struct {
	RelativeTarget *Target `protobuf:"bytes,2,opt,name=relative_target,json=relativeTarget,proto3,oneof"`
}

func (*PositionTargetRequest_AbsoluteTarget) isPositionTargetRequest_PositionTargetOneof() {}
func (*PositionTargetRequest_RelativeTarget) isPositionTargetRequest_PositionTargetOneof() {}

func (m *PositionTargetRequest) GetPositionTargetOneof() isPositionTargetRequest_PositionTargetOneof {
	if m != nil {
		return m.PositionTargetOneof
	}
	return nil
}

func (m *PositionTargetRequest) GetAbsoluteTarget() *Target {
	if x, ok := m.GetPositionTargetOneof().(*PositionTargetRequest_AbsoluteTarget); ok {
		return x.AbsoluteTarget
	}
	return nil
}

func (m *PositionTargetRequest) GetRelativeTarget() *Target {
	if x, ok := m.GetPositionTargetOneof().(*PositionTargetRequest_RelativeTarget); ok {
		return x.RelativeTarget
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*PositionTargetRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _PositionTargetRequest_OneofMarshaler, _PositionTargetRequest_OneofUnmarshaler, _PositionTargetRequest_OneofSizer, []interface{}{
		(*PositionTargetRequest_AbsoluteTarget)(nil),
		(*PositionTargetRequest_RelativeTarget)(nil),
	}
}

func _PositionTargetRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*PositionTargetRequest)
	// position_target_oneof
	switch x := m.PositionTargetOneof.(type) {
	case *PositionTargetRequest_AbsoluteTarget:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AbsoluteTarget); err != nil {
			return err
		}
	case *PositionTargetRequest_RelativeTarget:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RelativeTarget); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("PositionTargetRequest.PositionTargetOneof has unexpected type %T", x)
	}
	return nil
}

func _PositionTargetRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*PositionTargetRequest)
	switch tag {
	case 1: // position_target_oneof.absolute_target
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Target)
		err := b.DecodeMessage(msg)
		m.PositionTargetOneof = &PositionTargetRequest_AbsoluteTarget{msg}
		return true, err
	case 2: // position_target_oneof.relative_target
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Target)
		err := b.DecodeMessage(msg)
		m.PositionTargetOneof = &PositionTargetRequest_RelativeTarget{msg}
		return true, err
	default:
		return false, nil
	}
}

func _PositionTargetRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*PositionTargetRequest)
	// position_target_oneof
	switch x := m.PositionTargetOneof.(type) {
	case *PositionTargetRequest_AbsoluteTarget:
		s := proto.Size(x.AbsoluteTarget)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *PositionTargetRequest_RelativeTarget:
		s := proto.Size(x.RelativeTarget)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// 移动功能请求
type MoveToRequest struct {
	MotionType MotionType `protobuf:"varint,1,opt,name=motion_type,json=motionType,proto3,enum=motionService.MotionType" json:"motion_type,omitempty"`
	// Types that are valid to be assigned to TargetRequestOneof:
	//	*MoveToRequest_GroupsTargetRequest
	//	*MoveToRequest_PositionTargetRequest
	TargetRequestOneof isMoveToRequest_TargetRequestOneof `protobuf_oneof:"target_request_oneof"`
	// 清空请求队列， 立即执行
	// 未处理完的动作列表将全部丢弃
	Immediately          bool     `protobuf:"varint,4,opt,name=immediately,proto3" json:"immediately,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MoveToRequest) Reset()         { *m = MoveToRequest{} }
func (m *MoveToRequest) String() string { return proto.CompactTextString(m) }
func (*MoveToRequest) ProtoMessage()    {}
func (*MoveToRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f381448c32ed31c0, []int{8}
}
func (m *MoveToRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MoveToRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MoveToRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MoveToRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MoveToRequest.Merge(m, src)
}
func (m *MoveToRequest) XXX_Size() int {
	return m.Size()
}
func (m *MoveToRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MoveToRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MoveToRequest proto.InternalMessageInfo

type isMoveToRequest_TargetRequestOneof interface {
	isMoveToRequest_TargetRequestOneof()
	MarshalTo([]byte) (int, error)
	Size() int
}

type MoveToRequest_GroupsTargetRequest struct {
	GroupsTargetRequest *GroupsTargetRequest `protobuf:"bytes,2,opt,name=groups_target_request,json=groupsTargetRequest,proto3,oneof"`
}
type MoveToRequest_PositionTargetRequest struct {
	PositionTargetRequest *PositionTargetRequest `protobuf:"bytes,3,opt,name=position_target_request,json=positionTargetRequest,proto3,oneof"`
}

func (*MoveToRequest_GroupsTargetRequest) isMoveToRequest_TargetRequestOneof()   {}
func (*MoveToRequest_PositionTargetRequest) isMoveToRequest_TargetRequestOneof() {}

func (m *MoveToRequest) GetTargetRequestOneof() isMoveToRequest_TargetRequestOneof {
	if m != nil {
		return m.TargetRequestOneof
	}
	return nil
}

func (m *MoveToRequest) GetMotionType() MotionType {
	if m != nil {
		return m.MotionType
	}
	return MotionType_UNKNOWN_MOTION_TYPE
}

func (m *MoveToRequest) GetGroupsTargetRequest() *GroupsTargetRequest {
	if x, ok := m.GetTargetRequestOneof().(*MoveToRequest_GroupsTargetRequest); ok {
		return x.GroupsTargetRequest
	}
	return nil
}

func (m *MoveToRequest) GetPositionTargetRequest() *PositionTargetRequest {
	if x, ok := m.GetTargetRequestOneof().(*MoveToRequest_PositionTargetRequest); ok {
		return x.PositionTargetRequest
	}
	return nil
}

func (m *MoveToRequest) GetImmediately() bool {
	if m != nil {
		return m.Immediately
	}
	return false
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*MoveToRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _MoveToRequest_OneofMarshaler, _MoveToRequest_OneofUnmarshaler, _MoveToRequest_OneofSizer, []interface{}{
		(*MoveToRequest_GroupsTargetRequest)(nil),
		(*MoveToRequest_PositionTargetRequest)(nil),
	}
}

func _MoveToRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*MoveToRequest)
	// target_request_oneof
	switch x := m.TargetRequestOneof.(type) {
	case *MoveToRequest_GroupsTargetRequest:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GroupsTargetRequest); err != nil {
			return err
		}
	case *MoveToRequest_PositionTargetRequest:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PositionTargetRequest); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("MoveToRequest.TargetRequestOneof has unexpected type %T", x)
	}
	return nil
}

func _MoveToRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*MoveToRequest)
	switch tag {
	case 2: // target_request_oneof.groups_target_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GroupsTargetRequest)
		err := b.DecodeMessage(msg)
		m.TargetRequestOneof = &MoveToRequest_GroupsTargetRequest{msg}
		return true, err
	case 3: // target_request_oneof.position_target_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PositionTargetRequest)
		err := b.DecodeMessage(msg)
		m.TargetRequestOneof = &MoveToRequest_PositionTargetRequest{msg}
		return true, err
	default:
		return false, nil
	}
}

func _MoveToRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*MoveToRequest)
	// target_request_oneof
	switch x := m.TargetRequestOneof.(type) {
	case *MoveToRequest_GroupsTargetRequest:
		s := proto.Size(x.GroupsTargetRequest)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *MoveToRequest_PositionTargetRequest:
		s := proto.Size(x.PositionTargetRequest)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// 移动功能结果
type MoveToResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MoveToResponse) Reset()         { *m = MoveToResponse{} }
func (m *MoveToResponse) String() string { return proto.CompactTextString(m) }
func (*MoveToResponse) ProtoMessage()    {}
func (*MoveToResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f381448c32ed31c0, []int{9}
}
func (m *MoveToResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MoveToResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MoveToResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MoveToResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MoveToResponse.Merge(m, src)
}
func (m *MoveToResponse) XXX_Size() int {
	return m.Size()
}
func (m *MoveToResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MoveToResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MoveToResponse proto.InternalMessageInfo

// 获取当前位置信息请求
type GetPositionRequest struct {
	MotionType           MotionType `protobuf:"varint,1,opt,name=motion_type,json=motionType,proto3,enum=motionService.MotionType" json:"motion_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *GetPositionRequest) Reset()         { *m = GetPositionRequest{} }
func (m *GetPositionRequest) String() string { return proto.CompactTextString(m) }
func (*GetPositionRequest) ProtoMessage()    {}
func (*GetPositionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f381448c32ed31c0, []int{10}
}
func (m *GetPositionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPositionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPositionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPositionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPositionRequest.Merge(m, src)
}
func (m *GetPositionRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetPositionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPositionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPositionRequest proto.InternalMessageInfo

func (m *GetPositionRequest) GetMotionType() MotionType {
	if m != nil {
		return m.MotionType
	}
	return MotionType_UNKNOWN_MOTION_TYPE
}

// 获取当前位置信息结果
type GetPositionResponse struct {
	// 功能类型
	MotionType MotionType `protobuf:"varint,1,opt,name=motion_type,json=motionType,proto3,enum=motionService.MotionType" json:"motion_type,omitempty"`
	// 位置坐标
	Position             *Position `protobuf:"bytes,2,opt,name=position,proto3" json:"position,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *GetPositionResponse) Reset()         { *m = GetPositionResponse{} }
func (m *GetPositionResponse) String() string { return proto.CompactTextString(m) }
func (*GetPositionResponse) ProtoMessage()    {}
func (*GetPositionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f381448c32ed31c0, []int{11}
}
func (m *GetPositionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPositionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPositionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPositionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPositionResponse.Merge(m, src)
}
func (m *GetPositionResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetPositionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPositionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetPositionResponse proto.InternalMessageInfo

func (m *GetPositionResponse) GetMotionType() MotionType {
	if m != nil {
		return m.MotionType
	}
	return MotionType_UNKNOWN_MOTION_TYPE
}

func (m *GetPositionResponse) GetPosition() *Position {
	if m != nil {
		return m.Position
	}
	return nil
}

// 持续监听位置消息请求
type PositioningDataRequest struct {
	// 功能类型
	MotionType MotionType `protobuf:"varint,1,opt,name=motion_type,json=motionType,proto3,enum=motionService.MotionType" json:"motion_type,omitempty"`
	// 设备是否失能
	// 需使用手动控制运动功能时启用
	// 服务断开后将自动使能
	Disability           bool     `protobuf:"varint,2,opt,name=disability,proto3" json:"disability,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PositioningDataRequest) Reset()         { *m = PositioningDataRequest{} }
func (m *PositioningDataRequest) String() string { return proto.CompactTextString(m) }
func (*PositioningDataRequest) ProtoMessage()    {}
func (*PositioningDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f381448c32ed31c0, []int{12}
}
func (m *PositioningDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PositioningDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PositioningDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PositioningDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PositioningDataRequest.Merge(m, src)
}
func (m *PositioningDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *PositioningDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PositioningDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PositioningDataRequest proto.InternalMessageInfo

func (m *PositioningDataRequest) GetMotionType() MotionType {
	if m != nil {
		return m.MotionType
	}
	return MotionType_UNKNOWN_MOTION_TYPE
}

func (m *PositioningDataRequest) GetDisability() bool {
	if m != nil {
		return m.Disability
	}
	return false
}

// 持续监听位置消息结果
type PositioningDataResponse struct {
	// 功能类型
	MotionType MotionType `protobuf:"varint,1,opt,name=motion_type,json=motionType,proto3,enum=motionService.MotionType" json:"motion_type,omitempty"`
	// 位置坐标
	Position             *Position `protobuf:"bytes,2,opt,name=position,proto3" json:"position,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *PositioningDataResponse) Reset()         { *m = PositioningDataResponse{} }
func (m *PositioningDataResponse) String() string { return proto.CompactTextString(m) }
func (*PositioningDataResponse) ProtoMessage()    {}
func (*PositioningDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f381448c32ed31c0, []int{13}
}
func (m *PositioningDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PositioningDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PositioningDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PositioningDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PositioningDataResponse.Merge(m, src)
}
func (m *PositioningDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *PositioningDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PositioningDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PositioningDataResponse proto.InternalMessageInfo

func (m *PositioningDataResponse) GetMotionType() MotionType {
	if m != nil {
		return m.MotionType
	}
	return MotionType_UNKNOWN_MOTION_TYPE
}

func (m *PositioningDataResponse) GetPosition() *Position {
	if m != nil {
		return m.Position
	}
	return nil
}

// 创建组请求
type NewGroupRequest struct {
	// 功能类型
	MotionType MotionType `protobuf:"varint,1,opt,name=motion_type,json=motionType,proto3,enum=motionService.MotionType" json:"motion_type,omitempty"`
	// 组名
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NewGroupRequest) Reset()         { *m = NewGroupRequest{} }
func (m *NewGroupRequest) String() string { return proto.CompactTextString(m) }
func (*NewGroupRequest) ProtoMessage()    {}
func (*NewGroupRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f381448c32ed31c0, []int{14}
}
func (m *NewGroupRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewGroupRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewGroupRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewGroupRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewGroupRequest.Merge(m, src)
}
func (m *NewGroupRequest) XXX_Size() int {
	return m.Size()
}
func (m *NewGroupRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NewGroupRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NewGroupRequest proto.InternalMessageInfo

func (m *NewGroupRequest) GetMotionType() MotionType {
	if m != nil {
		return m.MotionType
	}
	return MotionType_UNKNOWN_MOTION_TYPE
}

func (m *NewGroupRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// 创建组结果
type NewGroupResponse struct {
	// 组信息
	GroupInfo            *GroupInfo `protobuf:"bytes,1,opt,name=group_info,json=groupInfo,proto3" json:"group_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *NewGroupResponse) Reset()         { *m = NewGroupResponse{} }
func (m *NewGroupResponse) String() string { return proto.CompactTextString(m) }
func (*NewGroupResponse) ProtoMessage()    {}
func (*NewGroupResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f381448c32ed31c0, []int{15}
}
func (m *NewGroupResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewGroupResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewGroupResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewGroupResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewGroupResponse.Merge(m, src)
}
func (m *NewGroupResponse) XXX_Size() int {
	return m.Size()
}
func (m *NewGroupResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NewGroupResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NewGroupResponse proto.InternalMessageInfo

func (m *NewGroupResponse) GetGroupInfo() *GroupInfo {
	if m != nil {
		return m.GroupInfo
	}
	return nil
}

// 获取组列表请求
type ListGroupsRequest struct {
	// 功能类型
	MotionType           MotionType `protobuf:"varint,1,opt,name=motion_type,json=motionType,proto3,enum=motionService.MotionType" json:"motion_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ListGroupsRequest) Reset()         { *m = ListGroupsRequest{} }
func (m *ListGroupsRequest) String() string { return proto.CompactTextString(m) }
func (*ListGroupsRequest) ProtoMessage()    {}
func (*ListGroupsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f381448c32ed31c0, []int{16}
}
func (m *ListGroupsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListGroupsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListGroupsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListGroupsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListGroupsRequest.Merge(m, src)
}
func (m *ListGroupsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListGroupsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListGroupsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListGroupsRequest proto.InternalMessageInfo

func (m *ListGroupsRequest) GetMotionType() MotionType {
	if m != nil {
		return m.MotionType
	}
	return MotionType_UNKNOWN_MOTION_TYPE
}

// 获取组列表结果
type ListGroupsResponse struct {
	// 组信息列表
	GroupsInfo           []*GroupInfo `protobuf:"bytes,1,rep,name=groups_info,json=groupsInfo,proto3" json:"groups_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ListGroupsResponse) Reset()         { *m = ListGroupsResponse{} }
func (m *ListGroupsResponse) String() string { return proto.CompactTextString(m) }
func (*ListGroupsResponse) ProtoMessage()    {}
func (*ListGroupsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f381448c32ed31c0, []int{17}
}
func (m *ListGroupsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListGroupsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListGroupsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListGroupsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListGroupsResponse.Merge(m, src)
}
func (m *ListGroupsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListGroupsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListGroupsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListGroupsResponse proto.InternalMessageInfo

func (m *ListGroupsResponse) GetGroupsInfo() []*GroupInfo {
	if m != nil {
		return m.GroupsInfo
	}
	return nil
}

// 更新组信息请求
type UpdateGroupRequest struct {
	// 组id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// 组名
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateGroupRequest) Reset()         { *m = UpdateGroupRequest{} }
func (m *UpdateGroupRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateGroupRequest) ProtoMessage()    {}
func (*UpdateGroupRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f381448c32ed31c0, []int{18}
}
func (m *UpdateGroupRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateGroupRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateGroupRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateGroupRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateGroupRequest.Merge(m, src)
}
func (m *UpdateGroupRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateGroupRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateGroupRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateGroupRequest proto.InternalMessageInfo

func (m *UpdateGroupRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UpdateGroupRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// 更新组信息结果
type UpdateGroupResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateGroupResponse) Reset()         { *m = UpdateGroupResponse{} }
func (m *UpdateGroupResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateGroupResponse) ProtoMessage()    {}
func (*UpdateGroupResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f381448c32ed31c0, []int{19}
}
func (m *UpdateGroupResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateGroupResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateGroupResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateGroupResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateGroupResponse.Merge(m, src)
}
func (m *UpdateGroupResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateGroupResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateGroupResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateGroupResponse proto.InternalMessageInfo

// 删除组列表请求
type DeleteGroupsRequest struct {
	// 组id列表
	GroupsId             []string `protobuf:"bytes,1,rep,name=groups_id,json=groupsId,proto3" json:"groups_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteGroupsRequest) Reset()         { *m = DeleteGroupsRequest{} }
func (m *DeleteGroupsRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteGroupsRequest) ProtoMessage()    {}
func (*DeleteGroupsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f381448c32ed31c0, []int{20}
}
func (m *DeleteGroupsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteGroupsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteGroupsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteGroupsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteGroupsRequest.Merge(m, src)
}
func (m *DeleteGroupsRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteGroupsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteGroupsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteGroupsRequest proto.InternalMessageInfo

func (m *DeleteGroupsRequest) GetGroupsId() []string {
	if m != nil {
		return m.GroupsId
	}
	return nil
}

// 删除组列表结果
type DeleteGroupsResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteGroupsResponse) Reset()         { *m = DeleteGroupsResponse{} }
func (m *DeleteGroupsResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteGroupsResponse) ProtoMessage()    {}
func (*DeleteGroupsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f381448c32ed31c0, []int{21}
}
func (m *DeleteGroupsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteGroupsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteGroupsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteGroupsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteGroupsResponse.Merge(m, src)
}
func (m *DeleteGroupsResponse) XXX_Size() int {
	return m.Size()
}
func (m *DeleteGroupsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteGroupsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteGroupsResponse proto.InternalMessageInfo

// 获取组动作点列表请求
type ListGroupTargetsRequest struct {
	// 组id
	GroupId              string   `protobuf:"bytes,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListGroupTargetsRequest) Reset()         { *m = ListGroupTargetsRequest{} }
func (m *ListGroupTargetsRequest) String() string { return proto.CompactTextString(m) }
func (*ListGroupTargetsRequest) ProtoMessage()    {}
func (*ListGroupTargetsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f381448c32ed31c0, []int{22}
}
func (m *ListGroupTargetsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListGroupTargetsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListGroupTargetsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListGroupTargetsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListGroupTargetsRequest.Merge(m, src)
}
func (m *ListGroupTargetsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListGroupTargetsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListGroupTargetsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListGroupTargetsRequest proto.InternalMessageInfo

func (m *ListGroupTargetsRequest) GetGroupId() string {
	if m != nil {
		return m.GroupId
	}
	return ""
}

// 获取组动作点列表结果
type ListGroupTargetsResponse struct {
	// 目标点列表
	Targets              []*Target `protobuf:"bytes,1,rep,name=targets,proto3" json:"targets,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ListGroupTargetsResponse) Reset()         { *m = ListGroupTargetsResponse{} }
func (m *ListGroupTargetsResponse) String() string { return proto.CompactTextString(m) }
func (*ListGroupTargetsResponse) ProtoMessage()    {}
func (*ListGroupTargetsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f381448c32ed31c0, []int{23}
}
func (m *ListGroupTargetsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListGroupTargetsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListGroupTargetsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListGroupTargetsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListGroupTargetsResponse.Merge(m, src)
}
func (m *ListGroupTargetsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListGroupTargetsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListGroupTargetsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListGroupTargetsResponse proto.InternalMessageInfo

func (m *ListGroupTargetsResponse) GetTargets() []*Target {
	if m != nil {
		return m.Targets
	}
	return nil
}

// 更新组动作点列表请求
type UpdateGroupTargetsRequest struct {
	// 组id
	GroupId string `protobuf:"bytes,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	// 目标点列表
	Targets              []*Target `protobuf:"bytes,2,rep,name=targets,proto3" json:"targets,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *UpdateGroupTargetsRequest) Reset()         { *m = UpdateGroupTargetsRequest{} }
func (m *UpdateGroupTargetsRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateGroupTargetsRequest) ProtoMessage()    {}
func (*UpdateGroupTargetsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f381448c32ed31c0, []int{24}
}
func (m *UpdateGroupTargetsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateGroupTargetsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateGroupTargetsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateGroupTargetsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateGroupTargetsRequest.Merge(m, src)
}
func (m *UpdateGroupTargetsRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateGroupTargetsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateGroupTargetsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateGroupTargetsRequest proto.InternalMessageInfo

func (m *UpdateGroupTargetsRequest) GetGroupId() string {
	if m != nil {
		return m.GroupId
	}
	return ""
}

func (m *UpdateGroupTargetsRequest) GetTargets() []*Target {
	if m != nil {
		return m.Targets
	}
	return nil
}

// 更新组动作点列表结果
type UpdateGroupTargetsResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateGroupTargetsResponse) Reset()         { *m = UpdateGroupTargetsResponse{} }
func (m *UpdateGroupTargetsResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateGroupTargetsResponse) ProtoMessage()    {}
func (*UpdateGroupTargetsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f381448c32ed31c0, []int{25}
}
func (m *UpdateGroupTargetsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateGroupTargetsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateGroupTargetsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateGroupTargetsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateGroupTargetsResponse.Merge(m, src)
}
func (m *UpdateGroupTargetsResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateGroupTargetsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateGroupTargetsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateGroupTargetsResponse proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("motionService.MotionType", MotionType_name, MotionType_value)
	proto.RegisterType((*Position)(nil), "motionService.Position")
	proto.RegisterType((*MotionConfig)(nil), "motionService.MotionConfig")
	proto.RegisterType((*Group)(nil), "motionService.Group")
	proto.RegisterType((*GroupInfo)(nil), "motionService.GroupInfo")
	proto.RegisterType((*Target)(nil), "motionService.Target")
	proto.RegisterType((*GroupTargetRequest)(nil), "motionService.GroupTargetRequest")
	proto.RegisterType((*GroupsTargetRequest)(nil), "motionService.GroupsTargetRequest")
	proto.RegisterType((*PositionTargetRequest)(nil), "motionService.PositionTargetRequest")
	proto.RegisterType((*MoveToRequest)(nil), "motionService.MoveToRequest")
	proto.RegisterType((*MoveToResponse)(nil), "motionService.MoveToResponse")
	proto.RegisterType((*GetPositionRequest)(nil), "motionService.GetPositionRequest")
	proto.RegisterType((*GetPositionResponse)(nil), "motionService.GetPositionResponse")
	proto.RegisterType((*PositioningDataRequest)(nil), "motionService.PositioningDataRequest")
	proto.RegisterType((*PositioningDataResponse)(nil), "motionService.PositioningDataResponse")
	proto.RegisterType((*NewGroupRequest)(nil), "motionService.NewGroupRequest")
	proto.RegisterType((*NewGroupResponse)(nil), "motionService.NewGroupResponse")
	proto.RegisterType((*ListGroupsRequest)(nil), "motionService.ListGroupsRequest")
	proto.RegisterType((*ListGroupsResponse)(nil), "motionService.ListGroupsResponse")
	proto.RegisterType((*UpdateGroupRequest)(nil), "motionService.UpdateGroupRequest")
	proto.RegisterType((*UpdateGroupResponse)(nil), "motionService.UpdateGroupResponse")
	proto.RegisterType((*DeleteGroupsRequest)(nil), "motionService.DeleteGroupsRequest")
	proto.RegisterType((*DeleteGroupsResponse)(nil), "motionService.DeleteGroupsResponse")
	proto.RegisterType((*ListGroupTargetsRequest)(nil), "motionService.ListGroupTargetsRequest")
	proto.RegisterType((*ListGroupTargetsResponse)(nil), "motionService.ListGroupTargetsResponse")
	proto.RegisterType((*UpdateGroupTargetsRequest)(nil), "motionService.UpdateGroupTargetsRequest")
	proto.RegisterType((*UpdateGroupTargetsResponse)(nil), "motionService.UpdateGroupTargetsResponse")
}

func init() { proto.RegisterFile("headmotion.proto", fileDescriptor_f381448c32ed31c0) }

var fileDescriptor_f381448c32ed31c0 = []byte{
	// 1143 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x57, 0xcd, 0x6e, 0xdb, 0x46,
	0x10, 0x16, 0xe5, 0x9f, 0x48, 0x23, 0xff, 0xa8, 0x2b, 0xcb, 0x92, 0x69, 0x47, 0x91, 0xd6, 0x8d,
	0xa3, 0x04, 0x85, 0x55, 0x28, 0x05, 0x9a, 0xe4, 0xe4, 0xb8, 0x0e, 0xa2, 0xc0, 0xb5, 0x64, 0x30,
	0x0a, 0xda, 0x5e, 0x4a, 0xd0, 0xe6, 0x5a, 0x59, 0x54, 0xe2, 0x32, 0x22, 0x6d, 0x4b, 0x40, 0x80,
	0x16, 0x3d, 0xf4, 0xd0, 0x5b, 0xd1, 0x53, 0xdf, 0xa3, 0xf7, 0x5e, 0x7b, 0x2c, 0xd0, 0x17, 0x28,
	0x8c, 0x3e, 0x45, 0x4f, 0x05, 0x77, 0x97, 0x12, 0x49, 0xfd, 0x58, 0x69, 0x0c, 0xf4, 0x46, 0x0d,
	0x67, 0xbf, 0xf9, 0xe6, 0x9b, 0xd9, 0x19, 0x0a, 0xd2, 0xaf, 0x89, 0x61, 0x76, 0x98, 0x4b, 0x99,
	0xb5, 0x6b, 0x77, 0x99, 0xcb, 0xd0, 0xb2, 0xf8, 0xf5, 0x92, 0x74, 0x2f, 0xe8, 0x29, 0x51, 0xb7,
	0x5a, 0x8c, 0xb5, 0xda, 0xa4, 0x62, 0xd8, 0xb4, 0x62, 0x58, 0x16, 0x73, 0x0d, 0xef, 0xad, 0x23,
	0x9c, 0xf1, 0x23, 0x48, 0x1c, 0x33, 0x87, 0x7a, 0x26, 0x94, 0x85, 0xc5, 0x9e, 0x6e, 0xf4, 0xa8,
	0x93, 0x57, 0x8a, 0x4a, 0x79, 0x41, 0x5b, 0xe8, 0x3d, 0xed, 0x51, 0xc7, 0x33, 0xf7, 0x85, 0x39,
	0x2e, 0xcc, 0x7d, 0xcf, 0x8c, 0x1b, 0xb0, 0x74, 0xc4, 0x03, 0x7d, 0xc6, 0xac, 0x33, 0xda, 0x42,
	0x6b, 0xb0, 0xe0, 0xd8, 0x84, 0x98, 0xfc, 0xf0, 0xb2, 0x26, 0x7e, 0xa0, 0xfb, 0x90, 0xbe, 0x34,
	0xa8, 0xab, 0x77, 0x68, 0xbb, 0x4d, 0x1d, 0x72, 0xca, 0x2c, 0x93, 0xc3, 0x2c, 0x6b, 0xab, 0x9e,
	0xfd, 0x68, 0x68, 0xc6, 0x6f, 0x60, 0xe1, 0x79, 0x97, 0x9d, 0xdb, 0xe8, 0x53, 0x80, 0x96, 0xf7,
	0xa0, 0x53, 0xeb, 0x8c, 0x71, 0xb8, 0x54, 0x35, 0xbf, 0x1b, 0xca, 0x6a, 0x97, 0x7b, 0xbe, 0xb0,
	0xce, 0x98, 0x96, 0x6c, 0xf9, 0x8f, 0xa8, 0x02, 0xb7, 0x5c, 0xa3, 0xdb, 0x22, 0xae, 0x47, 0x75,
	0xae, 0x9c, 0xaa, 0x66, 0x23, 0xa7, 0x9a, 0xfc, 0xad, 0xe6, 0x7b, 0xe1, 0x6f, 0x20, 0x39, 0x00,
	0x42, 0x2b, 0x10, 0xa7, 0x82, 0x7d, 0x52, 0x8b, 0x53, 0x13, 0x21, 0x98, 0xb7, 0x8c, 0x0e, 0xe1,
	0x74, 0x93, 0x1a, 0x7f, 0x46, 0x4f, 0x20, 0x25, 0x10, 0x75, 0xb7, 0x6f, 0x93, 0xfc, 0x5c, 0x51,
	0x29, 0xaf, 0x54, 0x37, 0x22, 0x51, 0x84, 0x2c, 0xcd, 0xbe, 0x4d, 0x34, 0xe8, 0x0c, 0x9e, 0xf1,
	0xb7, 0xb0, 0x28, 0xe2, 0xa3, 0x87, 0x90, 0xb0, 0xa5, 0xe8, 0x32, 0xbd, 0x5c, 0x04, 0xc2, 0xaf,
	0x89, 0x36, 0x70, 0x44, 0x7b, 0x20, 0x0b, 0xab, 0x9f, 0x72, 0xc1, 0x39, 0xaf, 0x54, 0x75, 0x73,
	0x6c, 0x70, 0x51, 0x13, 0x6d, 0xa9, 0x13, 0xf8, 0x85, 0x5f, 0x02, 0xe2, 0xd9, 0x4a, 0x15, 0xc8,
	0x9b, 0x73, 0xe2, 0xb8, 0x28, 0x3d, 0x4c, 0xbb, 0x16, 0xe3, 0x89, 0xaf, 0x05, 0x13, 0xaf, 0xc5,
	0x44, 0xea, 0xfb, 0x59, 0xc8, 0xc8, 0xaa, 0x98, 0xba, 0x67, 0xd0, 0x99, 0x45, 0xd8, 0x19, 0x3e,
	0x86, 0x0c, 0x07, 0x75, 0xc2, 0xa8, 0x8f, 0x61, 0x91, 0x7b, 0x7b, 0xbd, 0xe4, 0x55, 0xa2, 0x34,
	0xae, 0x7e, 0xa1, 0x23, 0x9a, 0x3c, 0x80, 0x7f, 0x55, 0x20, 0xeb, 0xe7, 0x1f, 0x06, 0xdd, 0x83,
	0x55, 0xe3, 0xc4, 0x61, 0xed, 0x73, 0x97, 0xe8, 0xa2, 0x84, 0x52, 0xbe, 0xf1, 0x75, 0xae, 0xc5,
	0xb4, 0x15, 0xdf, 0x5f, 0x2a, 0xbf, 0x07, 0xab, 0x5d, 0xd2, 0x36, 0x5c, 0x7a, 0x31, 0x40, 0x88,
	0x5f, 0x83, 0xe0, 0xfb, 0x0b, 0xcb, 0x7e, 0x0e, 0xb2, 0x7e, 0x49, 0x24, 0x82, 0x14, 0xe2, 0xb7,
	0x38, 0x2c, 0x1f, 0xb1, 0x0b, 0xd2, 0x64, 0x3e, 0xdd, 0x48, 0xb3, 0x28, 0xef, 0xd0, 0x2c, 0xe8,
	0x4b, 0xc8, 0x0a, 0x39, 0xfc, 0x20, 0x5d, 0x01, 0x2a, 0xe9, 0xe2, 0x71, 0x72, 0x86, 0x4b, 0x50,
	0x8b, 0x69, 0xa2, 0x60, 0x91, 0xca, 0x7c, 0x0d, 0xb9, 0x68, 0x02, 0x3e, 0xf6, 0x1c, 0xc7, 0xfe,
	0x70, 0x42, 0x2f, 0x46, 0xd1, 0x07, 0x3a, 0x84, 0xf1, 0x8b, 0x90, 0xa2, 0x9d, 0x0e, 0x31, 0xa9,
	0xe1, 0x92, 0x76, 0x3f, 0x3f, 0x5f, 0x54, 0xca, 0x09, 0x2d, 0x68, 0xda, 0x5f, 0x87, 0xb5, 0x70,
	0x60, 0xa9, 0x60, 0x1a, 0x56, 0x7c, 0x01, 0x1d, 0x9b, 0x59, 0x0e, 0xc1, 0xc7, 0x80, 0x9e, 0x13,
	0x77, 0x70, 0x19, 0xde, 0x5f, 0x57, 0xfc, 0x83, 0x02, 0x99, 0x10, 0xa4, 0x88, 0xf4, 0x5e, 0xb5,
	0x0a, 0x5e, 0xe7, 0xf8, 0x8c, 0xd7, 0x19, 0xbb, 0xb0, 0xee, 0x5b, 0xa9, 0xd5, 0x3a, 0x30, 0x5c,
	0xe3, 0x26, 0xda, 0xa6, 0x00, 0x60, 0x52, 0xc7, 0x38, 0xa1, 0x6d, 0xea, 0xf6, 0x39, 0x99, 0x84,
	0x16, 0xb0, 0xe0, 0x1f, 0x15, 0xc8, 0x8d, 0x84, 0xfd, 0xbf, 0x24, 0x30, 0x60, 0xb5, 0x4e, 0x2e,
	0x79, 0xeb, 0xde, 0x44, 0xee, 0x63, 0xe6, 0x35, 0x3e, 0x84, 0xf4, 0x30, 0x84, 0xcc, 0xf3, 0xbf,
	0xae, 0x17, 0xdc, 0x80, 0x0f, 0x3e, 0xa7, 0x8e, 0x2b, 0xee, 0xda, 0x4d, 0x34, 0x63, 0x03, 0x50,
	0x10, 0x50, 0xf2, 0x7b, 0x0c, 0x29, 0x79, 0xf5, 0x25, 0xc1, 0xb9, 0xa9, 0x04, 0x45, 0x32, 0x0e,
	0x67, 0xf8, 0x08, 0xd0, 0x2b, 0xdb, 0x34, 0x5c, 0x12, 0x12, 0x75, 0x86, 0xc5, 0x86, 0xb3, 0x90,
	0x09, 0x9d, 0x94, 0x17, 0xb0, 0x0a, 0x99, 0x03, 0xd2, 0x26, 0xd2, 0x3c, 0x48, 0x7a, 0x13, 0x92,
	0x3e, 0x45, 0x93, 0x13, 0x4c, 0x6a, 0x09, 0x49, 0xc3, 0xc4, 0xeb, 0xb0, 0x16, 0x3e, 0x23, 0xb1,
	0x3e, 0x81, 0xdc, 0x20, 0x5b, 0x31, 0x32, 0x06, 0x78, 0x1b, 0x90, 0xf0, 0x77, 0x8b, 0xe4, 0x79,
	0x4b, 0xc8, 0x6e, 0xe2, 0x43, 0xc8, 0x8f, 0x9e, 0x92, 0x4a, 0x05, 0xf6, 0xbd, 0x32, 0xd3, 0xbe,
	0x6f, 0xc1, 0x46, 0x20, 0xcb, 0x99, 0x49, 0xbc, 0xfb, 0x87, 0xc5, 0x16, 0xa8, 0xe3, 0x02, 0x09,
	0xde, 0x0f, 0x2a, 0x00, 0xc3, 0x8e, 0x40, 0x39, 0xc8, 0xbc, 0xaa, 0x1f, 0xd6, 0x1b, 0x5f, 0xd4,
	0xf5, 0xa3, 0x46, 0xf3, 0x45, 0xa3, 0xae, 0x37, 0xbf, 0x3a, 0x7e, 0x96, 0x8e, 0xa1, 0x04, 0xcc,
	0xd7, 0x9e, 0x3d, 0x3d, 0x48, 0x2b, 0xd5, 0x7f, 0x12, 0xde, 0x6e, 0x09, 0x04, 0x44, 0xaf, 0x61,
	0x51, 0xcc, 0x4a, 0xb4, 0x35, 0xd2, 0x6b, 0x81, 0x1d, 0xa4, 0xde, 0x9e, 0xf0, 0x56, 0xd6, 0xa4,
	0xf4, 0xfd, 0x9f, 0x7f, 0xff, 0x1c, 0xdf, 0xc4, 0xeb, 0xfc, 0xf3, 0xf0, 0xa2, 0x5a, 0x11, 0xde,
	0x95, 0x0e, 0xf3, 0x16, 0x24, 0x7b, 0xa2, 0x3c, 0x40, 0x26, 0xac, 0x46, 0x26, 0x06, 0xba, 0x3b,
	0xe1, 0x6e, 0x87, 0x07, 0x99, 0xba, 0x73, 0x9d, 0x9b, 0x24, 0x11, 0xfb, 0x58, 0x41, 0x6f, 0x21,
	0x15, 0x18, 0xcb, 0x68, 0xe4, 0x73, 0x61, 0x64, 0x0b, 0xa8, 0x78, 0x9a, 0x8b, 0x44, 0xde, 0xe1,
	0xe9, 0x15, 0xf1, 0x66, 0x24, 0x3d, 0x6f, 0xf7, 0xf8, 0x63, 0xc8, 0xcb, 0xd1, 0x86, 0x84, 0x3f,
	0x26, 0x50, 0x21, 0x82, 0x1b, 0x19, 0x51, 0xea, 0x9d, 0x89, 0xef, 0x65, 0xd0, 0x6d, 0x1e, 0xf4,
	0x36, 0xce, 0x47, 0x82, 0x5a, 0xe4, 0x52, 0xe7, 0x0d, 0xe5, 0x45, 0xec, 0x01, 0x0c, 0xaf, 0x3e,
	0x2a, 0x46, 0x30, 0x47, 0xc6, 0x8c, 0x5a, 0x9a, 0xe2, 0x21, 0xe3, 0xde, 0xe5, 0x71, 0xef, 0x60,
	0x35, 0x12, 0xb7, 0x4d, 0x1d, 0x57, 0x04, 0x76, 0xbc, 0xc8, 0x6f, 0x21, 0x15, 0x68, 0xcd, 0x11,
	0xa5, 0x47, 0xe7, 0xc7, 0x88, 0xd2, 0xe3, 0x06, 0xc5, 0x24, 0xa5, 0xcf, 0xb9, 0xef, 0x30, 0xef,
	0xef, 0x14, 0x58, 0x0a, 0x4e, 0x07, 0x14, 0x05, 0x1f, 0x33, 0x6e, 0xd4, 0xed, 0xa9, 0x3e, 0x92,
	0xc1, 0x3d, 0xce, 0xa0, 0x84, 0xb7, 0x22, 0x0c, 0x4c, 0xee, 0x1c, 0x10, 0xe0, 0x27, 0x05, 0xd2,
	0xd1, 0x91, 0x82, 0x76, 0x26, 0xe9, 0x1b, 0x1e, 0x12, 0xea, 0xbd, 0x6b, 0xfd, 0x24, 0x9d, 0x8f,
	0x38, 0x9d, 0x1d, 0x5c, 0x9a, 0x58, 0x0d, 0xf9, 0xf5, 0xc5, 0x39, 0xfd, 0xa2, 0x84, 0x26, 0xb7,
	0xcf, 0xaa, 0x3c, 0x59, 0xf9, 0x08, 0xaf, 0xfb, 0x33, 0x78, 0x4a, 0x66, 0xbb, 0x9c, 0x59, 0x19,
	0x6f, 0x4f, 0x29, 0x55, 0x80, 0xdb, 0xfe, 0xd2, 0xef, 0x57, 0x05, 0xe5, 0x8f, 0xab, 0x82, 0xf2,
	0xd7, 0x55, 0x41, 0x39, 0x59, 0xe4, 0xff, 0x1b, 0x1f, 0xfe, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x08,
	0xa7, 0x13, 0x96, 0x78, 0x0e, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MotionServiceClient is the client API for MotionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MotionServiceClient interface {
	// 移动功能
	MoveTo(ctx context.Context, in *MoveToRequest, opts ...grpc.CallOption) (*MoveToResponse, error)
	// 持续监听位置消息
	PositioningData(ctx context.Context, in *PositioningDataRequest, opts ...grpc.CallOption) (MotionService_PositioningDataClient, error)
	// 获取当前位置信息
	GetPosition(ctx context.Context, in *GetPositionRequest, opts ...grpc.CallOption) (*GetPositionResponse, error)
	// 创建组
	NewGroup(ctx context.Context, in *NewGroupRequest, opts ...grpc.CallOption) (*NewGroupResponse, error)
	// 获取组列表
	ListGroups(ctx context.Context, in *ListGroupsRequest, opts ...grpc.CallOption) (*ListGroupsResponse, error)
	// 更新组信息
	UpdateGroup(ctx context.Context, in *UpdateGroupRequest, opts ...grpc.CallOption) (*UpdateGroupResponse, error)
	// 删除组列表
	DeleteGroups(ctx context.Context, in *DeleteGroupsRequest, opts ...grpc.CallOption) (*DeleteGroupsResponse, error)
	// 获取组动作点列表
	ListGroupTargets(ctx context.Context, in *ListGroupTargetsRequest, opts ...grpc.CallOption) (*ListGroupTargetsResponse, error)
	// 更新组动作点列表
	UpdateGroupTargets(ctx context.Context, in *UpdateGroupTargetsRequest, opts ...grpc.CallOption) (*UpdateGroupTargetsResponse, error)
}

type motionServiceClient struct {
	cc *grpc.ClientConn
}

func NewMotionServiceClient(cc *grpc.ClientConn) MotionServiceClient {
	return &motionServiceClient{cc}
}

func (c *motionServiceClient) MoveTo(ctx context.Context, in *MoveToRequest, opts ...grpc.CallOption) (*MoveToResponse, error) {
	out := new(MoveToResponse)
	err := c.cc.Invoke(ctx, "/motionService.MotionService/MoveTo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *motionServiceClient) PositioningData(ctx context.Context, in *PositioningDataRequest, opts ...grpc.CallOption) (MotionService_PositioningDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MotionService_serviceDesc.Streams[0], "/motionService.MotionService/PositioningData", opts...)
	if err != nil {
		return nil, err
	}
	x := &motionServicePositioningDataClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MotionService_PositioningDataClient interface {
	Recv() (*PositioningDataResponse, error)
	grpc.ClientStream
}

type motionServicePositioningDataClient struct {
	grpc.ClientStream
}

func (x *motionServicePositioningDataClient) Recv() (*PositioningDataResponse, error) {
	m := new(PositioningDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *motionServiceClient) GetPosition(ctx context.Context, in *GetPositionRequest, opts ...grpc.CallOption) (*GetPositionResponse, error) {
	out := new(GetPositionResponse)
	err := c.cc.Invoke(ctx, "/motionService.MotionService/GetPosition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *motionServiceClient) NewGroup(ctx context.Context, in *NewGroupRequest, opts ...grpc.CallOption) (*NewGroupResponse, error) {
	out := new(NewGroupResponse)
	err := c.cc.Invoke(ctx, "/motionService.MotionService/NewGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *motionServiceClient) ListGroups(ctx context.Context, in *ListGroupsRequest, opts ...grpc.CallOption) (*ListGroupsResponse, error) {
	out := new(ListGroupsResponse)
	err := c.cc.Invoke(ctx, "/motionService.MotionService/ListGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *motionServiceClient) UpdateGroup(ctx context.Context, in *UpdateGroupRequest, opts ...grpc.CallOption) (*UpdateGroupResponse, error) {
	out := new(UpdateGroupResponse)
	err := c.cc.Invoke(ctx, "/motionService.MotionService/UpdateGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *motionServiceClient) DeleteGroups(ctx context.Context, in *DeleteGroupsRequest, opts ...grpc.CallOption) (*DeleteGroupsResponse, error) {
	out := new(DeleteGroupsResponse)
	err := c.cc.Invoke(ctx, "/motionService.MotionService/DeleteGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *motionServiceClient) ListGroupTargets(ctx context.Context, in *ListGroupTargetsRequest, opts ...grpc.CallOption) (*ListGroupTargetsResponse, error) {
	out := new(ListGroupTargetsResponse)
	err := c.cc.Invoke(ctx, "/motionService.MotionService/ListGroupTargets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *motionServiceClient) UpdateGroupTargets(ctx context.Context, in *UpdateGroupTargetsRequest, opts ...grpc.CallOption) (*UpdateGroupTargetsResponse, error) {
	out := new(UpdateGroupTargetsResponse)
	err := c.cc.Invoke(ctx, "/motionService.MotionService/UpdateGroupTargets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MotionServiceServer is the server API for MotionService service.
type MotionServiceServer interface {
	// 移动功能
	MoveTo(context.Context, *MoveToRequest) (*MoveToResponse, error)
	// 持续监听位置消息
	PositioningData(*PositioningDataRequest, MotionService_PositioningDataServer) error
	// 获取当前位置信息
	GetPosition(context.Context, *GetPositionRequest) (*GetPositionResponse, error)
	// 创建组
	NewGroup(context.Context, *NewGroupRequest) (*NewGroupResponse, error)
	// 获取组列表
	ListGroups(context.Context, *ListGroupsRequest) (*ListGroupsResponse, error)
	// 更新组信息
	UpdateGroup(context.Context, *UpdateGroupRequest) (*UpdateGroupResponse, error)
	// 删除组列表
	DeleteGroups(context.Context, *DeleteGroupsRequest) (*DeleteGroupsResponse, error)
	// 获取组动作点列表
	ListGroupTargets(context.Context, *ListGroupTargetsRequest) (*ListGroupTargetsResponse, error)
	// 更新组动作点列表
	UpdateGroupTargets(context.Context, *UpdateGroupTargetsRequest) (*UpdateGroupTargetsResponse, error)
}

// UnimplementedMotionServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMotionServiceServer struct {
}

func (*UnimplementedMotionServiceServer) MoveTo(ctx context.Context, req *MoveToRequest) (*MoveToResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveTo not implemented")
}
func (*UnimplementedMotionServiceServer) PositioningData(req *PositioningDataRequest, srv MotionService_PositioningDataServer) error {
	return status.Errorf(codes.Unimplemented, "method PositioningData not implemented")
}
func (*UnimplementedMotionServiceServer) GetPosition(ctx context.Context, req *GetPositionRequest) (*GetPositionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPosition not implemented")
}
func (*UnimplementedMotionServiceServer) NewGroup(ctx context.Context, req *NewGroupRequest) (*NewGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewGroup not implemented")
}
func (*UnimplementedMotionServiceServer) ListGroups(ctx context.Context, req *ListGroupsRequest) (*ListGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGroups not implemented")
}
func (*UnimplementedMotionServiceServer) UpdateGroup(ctx context.Context, req *UpdateGroupRequest) (*UpdateGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroup not implemented")
}
func (*UnimplementedMotionServiceServer) DeleteGroups(ctx context.Context, req *DeleteGroupsRequest) (*DeleteGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroups not implemented")
}
func (*UnimplementedMotionServiceServer) ListGroupTargets(ctx context.Context, req *ListGroupTargetsRequest) (*ListGroupTargetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGroupTargets not implemented")
}
func (*UnimplementedMotionServiceServer) UpdateGroupTargets(ctx context.Context, req *UpdateGroupTargetsRequest) (*UpdateGroupTargetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroupTargets not implemented")
}

func RegisterMotionServiceServer(s *grpc.Server, srv MotionServiceServer) {
	s.RegisterService(&_MotionService_serviceDesc, srv)
}

func _MotionService_MoveTo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveToRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MotionServiceServer).MoveTo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/motionService.MotionService/MoveTo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MotionServiceServer).MoveTo(ctx, req.(*MoveToRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MotionService_PositioningData_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PositioningDataRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MotionServiceServer).PositioningData(m, &motionServicePositioningDataServer{stream})
}

type MotionService_PositioningDataServer interface {
	Send(*PositioningDataResponse) error
	grpc.ServerStream
}

type motionServicePositioningDataServer struct {
	grpc.ServerStream
}

func (x *motionServicePositioningDataServer) Send(m *PositioningDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _MotionService_GetPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MotionServiceServer).GetPosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/motionService.MotionService/GetPosition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MotionServiceServer).GetPosition(ctx, req.(*GetPositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MotionService_NewGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MotionServiceServer).NewGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/motionService.MotionService/NewGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MotionServiceServer).NewGroup(ctx, req.(*NewGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MotionService_ListGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MotionServiceServer).ListGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/motionService.MotionService/ListGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MotionServiceServer).ListGroups(ctx, req.(*ListGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MotionService_UpdateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MotionServiceServer).UpdateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/motionService.MotionService/UpdateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MotionServiceServer).UpdateGroup(ctx, req.(*UpdateGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MotionService_DeleteGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MotionServiceServer).DeleteGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/motionService.MotionService/DeleteGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MotionServiceServer).DeleteGroups(ctx, req.(*DeleteGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MotionService_ListGroupTargets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGroupTargetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MotionServiceServer).ListGroupTargets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/motionService.MotionService/ListGroupTargets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MotionServiceServer).ListGroupTargets(ctx, req.(*ListGroupTargetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MotionService_UpdateGroupTargets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGroupTargetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MotionServiceServer).UpdateGroupTargets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/motionService.MotionService/UpdateGroupTargets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MotionServiceServer).UpdateGroupTargets(ctx, req.(*UpdateGroupTargetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MotionService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "motionService.MotionService",
	HandlerType: (*MotionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MoveTo",
			Handler:    _MotionService_MoveTo_Handler,
		},
		{
			MethodName: "GetPosition",
			Handler:    _MotionService_GetPosition_Handler,
		},
		{
			MethodName: "NewGroup",
			Handler:    _MotionService_NewGroup_Handler,
		},
		{
			MethodName: "ListGroups",
			Handler:    _MotionService_ListGroups_Handler,
		},
		{
			MethodName: "UpdateGroup",
			Handler:    _MotionService_UpdateGroup_Handler,
		},
		{
			MethodName: "DeleteGroups",
			Handler:    _MotionService_DeleteGroups_Handler,
		},
		{
			MethodName: "ListGroupTargets",
			Handler:    _MotionService_ListGroupTargets_Handler,
		},
		{
			MethodName: "UpdateGroupTargets",
			Handler:    _MotionService_UpdateGroupTargets_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PositioningData",
			Handler:       _MotionService_PositioningData_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "headmotion.proto",
}

func (m *Position) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Position) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XAxis != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHeadmotion(dAtA, i, uint64(m.XAxis))
	}
	if m.YAxis != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintHeadmotion(dAtA, i, uint64(m.YAxis))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *MotionConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MotionConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Speed != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHeadmotion(dAtA, i, uint64(m.Speed))
	}
	if m.WaitMillisecond != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintHeadmotion(dAtA, i, uint64(m.WaitMillisecond))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Group) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Group) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GroupInfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintHeadmotion(dAtA, i, uint64(m.GroupInfo.Size()))
		n1, err1 := m.GroupInfo.MarshalTo(dAtA[i:])
		if err1 != nil {
			return 0, err1
		}
		i += n1
	}
	if len(m.Targets) > 0 {
		for _, msg := range m.Targets {
			dAtA[i] = 0x12
			i++
			i = encodeVarintHeadmotion(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GroupInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintHeadmotion(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintHeadmotion(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.MotionType != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintHeadmotion(dAtA, i, uint64(m.MotionType))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Target) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Target) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Position != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintHeadmotion(dAtA, i, uint64(m.Position.Size()))
		n2, err2 := m.Position.MarshalTo(dAtA[i:])
		if err2 != nil {
			return 0, err2
		}
		i += n2
	}
	if m.MotionConfig != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintHeadmotion(dAtA, i, uint64(m.MotionConfig.Size()))
		n3, err3 := m.MotionConfig.MarshalTo(dAtA[i:])
		if err3 != nil {
			return 0, err3
		}
		i += n3
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GroupTargetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupTargetRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GroupIdNameOneof != nil {
		nn4, err4 := m.GroupIdNameOneof.MarshalTo(dAtA[i:])
		if err4 != nil {
			return 0, err4
		}
		i += nn4
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GroupTargetRequest_Id) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0xa
	i++
	i = encodeVarintHeadmotion(dAtA, i, uint64(len(m.Id)))
	i += copy(dAtA[i:], m.Id)
	return i, nil
}
func (m *GroupTargetRequest_Name) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x12
	i++
	i = encodeVarintHeadmotion(dAtA, i, uint64(len(m.Name)))
	i += copy(dAtA[i:], m.Name)
	return i, nil
}
func (m *GroupsTargetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupsTargetRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Groups) > 0 {
		for _, msg := range m.Groups {
			dAtA[i] = 0xa
			i++
			i = encodeVarintHeadmotion(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PositionTargetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PositionTargetRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PositionTargetOneof != nil {
		nn5, err5 := m.PositionTargetOneof.MarshalTo(dAtA[i:])
		if err5 != nil {
			return 0, err5
		}
		i += nn5
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PositionTargetRequest_AbsoluteTarget) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AbsoluteTarget != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintHeadmotion(dAtA, i, uint64(m.AbsoluteTarget.Size()))
		n6, err6 := m.AbsoluteTarget.MarshalTo(dAtA[i:])
		if err6 != nil {
			return 0, err6
		}
		i += n6
	}
	return i, nil
}
func (m *PositionTargetRequest_RelativeTarget) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.RelativeTarget != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintHeadmotion(dAtA, i, uint64(m.RelativeTarget.Size()))
		n7, err7 := m.RelativeTarget.MarshalTo(dAtA[i:])
		if err7 != nil {
			return 0, err7
		}
		i += n7
	}
	return i, nil
}
func (m *MoveToRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MoveToRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MotionType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHeadmotion(dAtA, i, uint64(m.MotionType))
	}
	if m.TargetRequestOneof != nil {
		nn8, err8 := m.TargetRequestOneof.MarshalTo(dAtA[i:])
		if err8 != nil {
			return 0, err8
		}
		i += nn8
	}
	if m.Immediately {
		dAtA[i] = 0x20
		i++
		if m.Immediately {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *MoveToRequest_GroupsTargetRequest) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.GroupsTargetRequest != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintHeadmotion(dAtA, i, uint64(m.GroupsTargetRequest.Size()))
		n9, err9 := m.GroupsTargetRequest.MarshalTo(dAtA[i:])
		if err9 != nil {
			return 0, err9
		}
		i += n9
	}
	return i, nil
}
func (m *MoveToRequest_PositionTargetRequest) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.PositionTargetRequest != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintHeadmotion(dAtA, i, uint64(m.PositionTargetRequest.Size()))
		n10, err10 := m.PositionTargetRequest.MarshalTo(dAtA[i:])
		if err10 != nil {
			return 0, err10
		}
		i += n10
	}
	return i, nil
}
func (m *MoveToResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MoveToResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetPositionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPositionRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MotionType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHeadmotion(dAtA, i, uint64(m.MotionType))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetPositionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPositionResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MotionType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHeadmotion(dAtA, i, uint64(m.MotionType))
	}
	if m.Position != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintHeadmotion(dAtA, i, uint64(m.Position.Size()))
		n11, err11 := m.Position.MarshalTo(dAtA[i:])
		if err11 != nil {
			return 0, err11
		}
		i += n11
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PositioningDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PositioningDataRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MotionType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHeadmotion(dAtA, i, uint64(m.MotionType))
	}
	if m.Disability {
		dAtA[i] = 0x10
		i++
		if m.Disability {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PositioningDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PositioningDataResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MotionType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHeadmotion(dAtA, i, uint64(m.MotionType))
	}
	if m.Position != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintHeadmotion(dAtA, i, uint64(m.Position.Size()))
		n12, err12 := m.Position.MarshalTo(dAtA[i:])
		if err12 != nil {
			return 0, err12
		}
		i += n12
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *NewGroupRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewGroupRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MotionType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHeadmotion(dAtA, i, uint64(m.MotionType))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintHeadmotion(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *NewGroupResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewGroupResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GroupInfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintHeadmotion(dAtA, i, uint64(m.GroupInfo.Size()))
		n13, err13 := m.GroupInfo.MarshalTo(dAtA[i:])
		if err13 != nil {
			return 0, err13
		}
		i += n13
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ListGroupsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListGroupsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MotionType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHeadmotion(dAtA, i, uint64(m.MotionType))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ListGroupsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListGroupsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.GroupsInfo) > 0 {
		for _, msg := range m.GroupsInfo {
			dAtA[i] = 0xa
			i++
			i = encodeVarintHeadmotion(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UpdateGroupRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateGroupRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintHeadmotion(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintHeadmotion(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UpdateGroupResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateGroupResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DeleteGroupsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteGroupsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.GroupsId) > 0 {
		for _, s := range m.GroupsId {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DeleteGroupsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteGroupsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ListGroupTargetsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListGroupTargetsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.GroupId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintHeadmotion(dAtA, i, uint64(len(m.GroupId)))
		i += copy(dAtA[i:], m.GroupId)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ListGroupTargetsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListGroupTargetsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Targets) > 0 {
		for _, msg := range m.Targets {
			dAtA[i] = 0xa
			i++
			i = encodeVarintHeadmotion(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UpdateGroupTargetsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateGroupTargetsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.GroupId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintHeadmotion(dAtA, i, uint64(len(m.GroupId)))
		i += copy(dAtA[i:], m.GroupId)
	}
	if len(m.Targets) > 0 {
		for _, msg := range m.Targets {
			dAtA[i] = 0x12
			i++
			i = encodeVarintHeadmotion(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UpdateGroupTargetsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateGroupTargetsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintHeadmotion(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Position) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XAxis != 0 {
		n += 1 + sovHeadmotion(uint64(m.XAxis))
	}
	if m.YAxis != 0 {
		n += 1 + sovHeadmotion(uint64(m.YAxis))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MotionConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Speed != 0 {
		n += 1 + sovHeadmotion(uint64(m.Speed))
	}
	if m.WaitMillisecond != 0 {
		n += 1 + sovHeadmotion(uint64(m.WaitMillisecond))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Group) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GroupInfo != nil {
		l = m.GroupInfo.Size()
		n += 1 + l + sovHeadmotion(uint64(l))
	}
	if len(m.Targets) > 0 {
		for _, e := range m.Targets {
			l = e.Size()
			n += 1 + l + sovHeadmotion(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GroupInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovHeadmotion(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovHeadmotion(uint64(l))
	}
	if m.MotionType != 0 {
		n += 1 + sovHeadmotion(uint64(m.MotionType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Target) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Position != nil {
		l = m.Position.Size()
		n += 1 + l + sovHeadmotion(uint64(l))
	}
	if m.MotionConfig != nil {
		l = m.MotionConfig.Size()
		n += 1 + l + sovHeadmotion(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GroupTargetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GroupIdNameOneof != nil {
		n += m.GroupIdNameOneof.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GroupTargetRequest_Id) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	n += 1 + l + sovHeadmotion(uint64(l))
	return n
}
func (m *GroupTargetRequest_Name) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovHeadmotion(uint64(l))
	return n
}
func (m *GroupsTargetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Groups) > 0 {
		for _, e := range m.Groups {
			l = e.Size()
			n += 1 + l + sovHeadmotion(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PositionTargetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PositionTargetOneof != nil {
		n += m.PositionTargetOneof.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PositionTargetRequest_AbsoluteTarget) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AbsoluteTarget != nil {
		l = m.AbsoluteTarget.Size()
		n += 1 + l + sovHeadmotion(uint64(l))
	}
	return n
}
func (m *PositionTargetRequest_RelativeTarget) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RelativeTarget != nil {
		l = m.RelativeTarget.Size()
		n += 1 + l + sovHeadmotion(uint64(l))
	}
	return n
}
func (m *MoveToRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MotionType != 0 {
		n += 1 + sovHeadmotion(uint64(m.MotionType))
	}
	if m.TargetRequestOneof != nil {
		n += m.TargetRequestOneof.Size()
	}
	if m.Immediately {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MoveToRequest_GroupsTargetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GroupsTargetRequest != nil {
		l = m.GroupsTargetRequest.Size()
		n += 1 + l + sovHeadmotion(uint64(l))
	}
	return n
}
func (m *MoveToRequest_PositionTargetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PositionTargetRequest != nil {
		l = m.PositionTargetRequest.Size()
		n += 1 + l + sovHeadmotion(uint64(l))
	}
	return n
}
func (m *MoveToResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetPositionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MotionType != 0 {
		n += 1 + sovHeadmotion(uint64(m.MotionType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetPositionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MotionType != 0 {
		n += 1 + sovHeadmotion(uint64(m.MotionType))
	}
	if m.Position != nil {
		l = m.Position.Size()
		n += 1 + l + sovHeadmotion(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PositioningDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MotionType != 0 {
		n += 1 + sovHeadmotion(uint64(m.MotionType))
	}
	if m.Disability {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PositioningDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MotionType != 0 {
		n += 1 + sovHeadmotion(uint64(m.MotionType))
	}
	if m.Position != nil {
		l = m.Position.Size()
		n += 1 + l + sovHeadmotion(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NewGroupRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MotionType != 0 {
		n += 1 + sovHeadmotion(uint64(m.MotionType))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovHeadmotion(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NewGroupResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GroupInfo != nil {
		l = m.GroupInfo.Size()
		n += 1 + l + sovHeadmotion(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListGroupsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MotionType != 0 {
		n += 1 + sovHeadmotion(uint64(m.MotionType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListGroupsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.GroupsInfo) > 0 {
		for _, e := range m.GroupsInfo {
			l = e.Size()
			n += 1 + l + sovHeadmotion(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateGroupRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovHeadmotion(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovHeadmotion(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateGroupResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteGroupsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.GroupsId) > 0 {
		for _, s := range m.GroupsId {
			l = len(s)
			n += 1 + l + sovHeadmotion(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteGroupsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListGroupTargetsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GroupId)
	if l > 0 {
		n += 1 + l + sovHeadmotion(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListGroupTargetsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Targets) > 0 {
		for _, e := range m.Targets {
			l = e.Size()
			n += 1 + l + sovHeadmotion(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateGroupTargetsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GroupId)
	if l > 0 {
		n += 1 + l + sovHeadmotion(uint64(l))
	}
	if len(m.Targets) > 0 {
		for _, e := range m.Targets {
			l = e.Size()
			n += 1 + l + sovHeadmotion(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateGroupTargetsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovHeadmotion(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozHeadmotion(x uint64) (n int) {
	return sovHeadmotion(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Position) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeadmotion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Position: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Position: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XAxis", wireType)
			}
			m.XAxis = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeadmotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XAxis |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field YAxis", wireType)
			}
			m.YAxis = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeadmotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.YAxis |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHeadmotion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHeadmotion
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHeadmotion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MotionConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeadmotion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MotionConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MotionConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Speed", wireType)
			}
			m.Speed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeadmotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Speed |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WaitMillisecond", wireType)
			}
			m.WaitMillisecond = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeadmotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WaitMillisecond |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHeadmotion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHeadmotion
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHeadmotion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Group) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeadmotion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Group: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Group: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeadmotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeadmotion
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeadmotion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GroupInfo == nil {
				m.GroupInfo = &GroupInfo{}
			}
			if err := m.GroupInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Targets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeadmotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeadmotion
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeadmotion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Targets = append(m.Targets, &Target{})
			if err := m.Targets[len(m.Targets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHeadmotion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHeadmotion
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHeadmotion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeadmotion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeadmotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHeadmotion
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHeadmotion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeadmotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHeadmotion
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHeadmotion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MotionType", wireType)
			}
			m.MotionType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeadmotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MotionType |= MotionType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHeadmotion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHeadmotion
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHeadmotion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Target) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeadmotion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Target: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Target: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeadmotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeadmotion
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeadmotion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Position == nil {
				m.Position = &Position{}
			}
			if err := m.Position.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MotionConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeadmotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeadmotion
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeadmotion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MotionConfig == nil {
				m.MotionConfig = &MotionConfig{}
			}
			if err := m.MotionConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHeadmotion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHeadmotion
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHeadmotion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupTargetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeadmotion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupTargetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupTargetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeadmotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHeadmotion
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHeadmotion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupIdNameOneof = &GroupTargetRequest_Id{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeadmotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHeadmotion
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHeadmotion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupIdNameOneof = &GroupTargetRequest_Name{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHeadmotion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHeadmotion
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHeadmotion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupsTargetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeadmotion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupsTargetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupsTargetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeadmotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeadmotion
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeadmotion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Groups = append(m.Groups, &GroupTargetRequest{})
			if err := m.Groups[len(m.Groups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHeadmotion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHeadmotion
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHeadmotion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PositionTargetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeadmotion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PositionTargetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PositionTargetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AbsoluteTarget", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeadmotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeadmotion
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeadmotion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Target{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.PositionTargetOneof = &PositionTargetRequest_AbsoluteTarget{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelativeTarget", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeadmotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeadmotion
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeadmotion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Target{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.PositionTargetOneof = &PositionTargetRequest_RelativeTarget{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHeadmotion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHeadmotion
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHeadmotion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MoveToRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeadmotion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MoveToRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MoveToRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MotionType", wireType)
			}
			m.MotionType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeadmotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MotionType |= MotionType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupsTargetRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeadmotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeadmotion
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeadmotion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GroupsTargetRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TargetRequestOneof = &MoveToRequest_GroupsTargetRequest{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PositionTargetRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeadmotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeadmotion
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeadmotion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PositionTargetRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TargetRequestOneof = &MoveToRequest_PositionTargetRequest{v}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Immediately", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeadmotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Immediately = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipHeadmotion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHeadmotion
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHeadmotion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MoveToResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeadmotion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MoveToResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MoveToResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipHeadmotion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHeadmotion
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHeadmotion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPositionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeadmotion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPositionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPositionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MotionType", wireType)
			}
			m.MotionType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeadmotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MotionType |= MotionType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHeadmotion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHeadmotion
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHeadmotion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPositionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeadmotion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPositionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPositionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MotionType", wireType)
			}
			m.MotionType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeadmotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MotionType |= MotionType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeadmotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeadmotion
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeadmotion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Position == nil {
				m.Position = &Position{}
			}
			if err := m.Position.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHeadmotion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHeadmotion
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHeadmotion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PositioningDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeadmotion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PositioningDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PositioningDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MotionType", wireType)
			}
			m.MotionType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeadmotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MotionType |= MotionType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Disability", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeadmotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Disability = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipHeadmotion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHeadmotion
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHeadmotion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PositioningDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeadmotion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PositioningDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PositioningDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MotionType", wireType)
			}
			m.MotionType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeadmotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MotionType |= MotionType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeadmotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeadmotion
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeadmotion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Position == nil {
				m.Position = &Position{}
			}
			if err := m.Position.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHeadmotion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHeadmotion
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHeadmotion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewGroupRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeadmotion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewGroupRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewGroupRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MotionType", wireType)
			}
			m.MotionType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeadmotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MotionType |= MotionType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeadmotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHeadmotion
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHeadmotion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHeadmotion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHeadmotion
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHeadmotion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewGroupResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeadmotion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewGroupResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewGroupResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeadmotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeadmotion
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeadmotion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GroupInfo == nil {
				m.GroupInfo = &GroupInfo{}
			}
			if err := m.GroupInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHeadmotion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHeadmotion
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHeadmotion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListGroupsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeadmotion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListGroupsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListGroupsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MotionType", wireType)
			}
			m.MotionType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeadmotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MotionType |= MotionType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHeadmotion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHeadmotion
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHeadmotion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListGroupsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeadmotion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListGroupsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListGroupsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupsInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeadmotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeadmotion
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeadmotion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupsInfo = append(m.GroupsInfo, &GroupInfo{})
			if err := m.GroupsInfo[len(m.GroupsInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHeadmotion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHeadmotion
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHeadmotion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateGroupRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeadmotion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateGroupRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateGroupRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeadmotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHeadmotion
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHeadmotion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeadmotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHeadmotion
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHeadmotion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHeadmotion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHeadmotion
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHeadmotion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateGroupResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeadmotion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateGroupResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateGroupResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipHeadmotion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHeadmotion
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHeadmotion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteGroupsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeadmotion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteGroupsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteGroupsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupsId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeadmotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHeadmotion
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHeadmotion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupsId = append(m.GroupsId, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHeadmotion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHeadmotion
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHeadmotion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteGroupsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeadmotion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteGroupsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteGroupsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipHeadmotion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHeadmotion
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHeadmotion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListGroupTargetsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeadmotion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListGroupTargetsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListGroupTargetsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeadmotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHeadmotion
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHeadmotion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHeadmotion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHeadmotion
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHeadmotion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListGroupTargetsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeadmotion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListGroupTargetsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListGroupTargetsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Targets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeadmotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeadmotion
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeadmotion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Targets = append(m.Targets, &Target{})
			if err := m.Targets[len(m.Targets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHeadmotion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHeadmotion
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHeadmotion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateGroupTargetsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeadmotion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateGroupTargetsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateGroupTargetsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeadmotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHeadmotion
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHeadmotion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Targets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeadmotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeadmotion
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeadmotion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Targets = append(m.Targets, &Target{})
			if err := m.Targets[len(m.Targets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHeadmotion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHeadmotion
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHeadmotion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateGroupTargetsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeadmotion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateGroupTargetsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateGroupTargetsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipHeadmotion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHeadmotion
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHeadmotion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipHeadmotion(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowHeadmotion
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHeadmotion
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHeadmotion
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthHeadmotion
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthHeadmotion
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowHeadmotion
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipHeadmotion(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthHeadmotion
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthHeadmotion = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowHeadmotion   = fmt.Errorf("proto: integer overflow")
)
