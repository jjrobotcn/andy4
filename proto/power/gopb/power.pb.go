// Code generated by protoc-gen-go. DO NOT EDIT.
// source: power.proto

package powerService

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PowerStatus struct {
	Level                uint32          `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
	IsCharging           bool            `protobuf:"varint,2,opt,name=is_charging,json=isCharging,proto3" json:"is_charging,omitempty"`
	Devices              map[string]bool `protobuf:"bytes,3,rep,name=devices,proto3" json:"devices,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *PowerStatus) Reset()         { *m = PowerStatus{} }
func (m *PowerStatus) String() string { return proto.CompactTextString(m) }
func (*PowerStatus) ProtoMessage()    {}
func (*PowerStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_a4fab2da8ea5416b, []int{0}
}

func (m *PowerStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PowerStatus.Unmarshal(m, b)
}
func (m *PowerStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PowerStatus.Marshal(b, m, deterministic)
}
func (m *PowerStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PowerStatus.Merge(m, src)
}
func (m *PowerStatus) XXX_Size() int {
	return xxx_messageInfo_PowerStatus.Size(m)
}
func (m *PowerStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_PowerStatus.DiscardUnknown(m)
}

var xxx_messageInfo_PowerStatus proto.InternalMessageInfo

func (m *PowerStatus) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *PowerStatus) GetIsCharging() bool {
	if m != nil {
		return m.IsCharging
	}
	return false
}

func (m *PowerStatus) GetDevices() map[string]bool {
	if m != nil {
		return m.Devices
	}
	return nil
}

type GetPowerStatusRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetPowerStatusRequest) Reset()         { *m = GetPowerStatusRequest{} }
func (m *GetPowerStatusRequest) String() string { return proto.CompactTextString(m) }
func (*GetPowerStatusRequest) ProtoMessage()    {}
func (*GetPowerStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a4fab2da8ea5416b, []int{1}
}

func (m *GetPowerStatusRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetPowerStatusRequest.Unmarshal(m, b)
}
func (m *GetPowerStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetPowerStatusRequest.Marshal(b, m, deterministic)
}
func (m *GetPowerStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPowerStatusRequest.Merge(m, src)
}
func (m *GetPowerStatusRequest) XXX_Size() int {
	return xxx_messageInfo_GetPowerStatusRequest.Size(m)
}
func (m *GetPowerStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPowerStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPowerStatusRequest proto.InternalMessageInfo

type GetPowerStatusResponse struct {
	PowerStatus          *PowerStatus `protobuf:"bytes,1,opt,name=power_status,json=powerStatus,proto3" json:"power_status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *GetPowerStatusResponse) Reset()         { *m = GetPowerStatusResponse{} }
func (m *GetPowerStatusResponse) String() string { return proto.CompactTextString(m) }
func (*GetPowerStatusResponse) ProtoMessage()    {}
func (*GetPowerStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a4fab2da8ea5416b, []int{2}
}

func (m *GetPowerStatusResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetPowerStatusResponse.Unmarshal(m, b)
}
func (m *GetPowerStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetPowerStatusResponse.Marshal(b, m, deterministic)
}
func (m *GetPowerStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPowerStatusResponse.Merge(m, src)
}
func (m *GetPowerStatusResponse) XXX_Size() int {
	return xxx_messageInfo_GetPowerStatusResponse.Size(m)
}
func (m *GetPowerStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPowerStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetPowerStatusResponse proto.InternalMessageInfo

func (m *GetPowerStatusResponse) GetPowerStatus() *PowerStatus {
	if m != nil {
		return m.PowerStatus
	}
	return nil
}

func init() {
	proto.RegisterType((*PowerStatus)(nil), "powerService.PowerStatus")
	proto.RegisterMapType((map[string]bool)(nil), "powerService.PowerStatus.DevicesEntry")
	proto.RegisterType((*GetPowerStatusRequest)(nil), "powerService.GetPowerStatusRequest")
	proto.RegisterType((*GetPowerStatusResponse)(nil), "powerService.GetPowerStatusResponse")
}

func init() { proto.RegisterFile("power.proto", fileDescriptor_a4fab2da8ea5416b) }

var fileDescriptor_a4fab2da8ea5416b = []byte{
	// 262 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0x4f, 0x4b, 0xc4, 0x30,
	0x10, 0xc5, 0xcd, 0x16, 0xff, 0x4d, 0xaa, 0x48, 0xf0, 0x4f, 0xdd, 0x8b, 0xa5, 0x8a, 0xf4, 0x54,
	0xa4, 0x5e, 0x64, 0xf1, 0x20, 0xa8, 0x78, 0x5d, 0x22, 0x78, 0x2d, 0x75, 0x1d, 0xd6, 0x62, 0x69,
	0x6a, 0x26, 0xad, 0xec, 0xd7, 0xf3, 0x93, 0x49, 0x93, 0x15, 0xb2, 0xa2, 0xde, 0xfa, 0xde, 0xbc,
	0xce, 0xef, 0x31, 0x01, 0xde, 0xaa, 0x0f, 0xd4, 0x59, 0xab, 0x95, 0x51, 0x22, 0xb4, 0xe2, 0x11,
	0x75, 0x5f, 0xcd, 0x30, 0xf9, 0x64, 0xc0, 0xa7, 0xd6, 0x30, 0xa5, 0xe9, 0x48, 0xec, 0xc3, 0x7a,
	0x8d, 0x3d, 0xd6, 0x11, 0x8b, 0x59, 0xba, 0x23, 0x9d, 0x10, 0x27, 0xc0, 0x2b, 0x2a, 0x66, 0xaf,
	0xa5, 0x9e, 0x57, 0xcd, 0x3c, 0x1a, 0xc5, 0x2c, 0xdd, 0x92, 0x50, 0xd1, 0xed, 0xd2, 0x11, 0x37,
	0xb0, 0xf9, 0x82, 0xc3, 0x42, 0x8a, 0x82, 0x38, 0x48, 0x79, 0x7e, 0x9e, 0xf9, 0x98, 0xcc, 0x43,
	0x64, 0x77, 0x2e, 0x78, 0xdf, 0x18, 0xbd, 0x90, 0xdf, 0xbf, 0x8d, 0x27, 0x10, 0xfa, 0x03, 0xb1,
	0x07, 0xc1, 0x1b, 0x2e, 0x6c, 0x8d, 0x6d, 0x39, 0x7c, 0x0e, 0xd5, 0xfa, 0xb2, 0xee, 0x70, 0x89,
	0x77, 0x62, 0x32, 0xba, 0x62, 0xc9, 0x11, 0x1c, 0x3c, 0xa0, 0xf1, 0x18, 0x12, 0xdf, 0x3b, 0x24,
	0x93, 0x3c, 0xc1, 0xe1, 0xcf, 0x01, 0xb5, 0xaa, 0x21, 0x14, 0xd7, 0xe0, 0xee, 0x50, 0x90, 0xf5,
	0x2d, 0x87, 0xe7, 0xc7, 0x7f, 0xb6, 0x96, 0xee, 0x86, 0x4e, 0xe4, 0x0a, 0xc2, 0xa9, 0x17, 0x14,
	0x05, 0xec, 0xae, 0x72, 0xc4, 0xe9, 0xea, 0xa6, 0x5f, 0xeb, 0x8d, 0xcf, 0xfe, 0x0f, 0xb9, 0xaa,
	0xc9, 0xda, 0x05, 0x7b, 0xde, 0xb0, 0x6f, 0x77, 0xf9, 0x15, 0x00, 0x00, 0xff, 0xff, 0x81, 0xd8,
	0x2b, 0xad, 0xca, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PowerServiceClient is the client API for PowerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PowerServiceClient interface {
	// 获取电源状态数据流
	GetPowerStatus(ctx context.Context, in *GetPowerStatusRequest, opts ...grpc.CallOption) (PowerService_GetPowerStatusClient, error)
}

type powerServiceClient struct {
	cc *grpc.ClientConn
}

func NewPowerServiceClient(cc *grpc.ClientConn) PowerServiceClient {
	return &powerServiceClient{cc}
}

func (c *powerServiceClient) GetPowerStatus(ctx context.Context, in *GetPowerStatusRequest, opts ...grpc.CallOption) (PowerService_GetPowerStatusClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PowerService_serviceDesc.Streams[0], "/powerService.PowerService/GetPowerStatus", opts...)
	if err != nil {
		return nil, err
	}
	x := &powerServiceGetPowerStatusClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PowerService_GetPowerStatusClient interface {
	Recv() (*GetPowerStatusResponse, error)
	grpc.ClientStream
}

type powerServiceGetPowerStatusClient struct {
	grpc.ClientStream
}

func (x *powerServiceGetPowerStatusClient) Recv() (*GetPowerStatusResponse, error) {
	m := new(GetPowerStatusResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PowerServiceServer is the server API for PowerService service.
type PowerServiceServer interface {
	// 获取电源状态数据流
	GetPowerStatus(*GetPowerStatusRequest, PowerService_GetPowerStatusServer) error
}

// UnimplementedPowerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedPowerServiceServer struct {
}

func (*UnimplementedPowerServiceServer) GetPowerStatus(req *GetPowerStatusRequest, srv PowerService_GetPowerStatusServer) error {
	return status.Errorf(codes.Unimplemented, "method GetPowerStatus not implemented")
}

func RegisterPowerServiceServer(s *grpc.Server, srv PowerServiceServer) {
	s.RegisterService(&_PowerService_serviceDesc, srv)
}

func _PowerService_GetPowerStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetPowerStatusRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PowerServiceServer).GetPowerStatus(m, &powerServiceGetPowerStatusServer{stream})
}

type PowerService_GetPowerStatusServer interface {
	Send(*GetPowerStatusResponse) error
	grpc.ServerStream
}

type powerServiceGetPowerStatusServer struct {
	grpc.ServerStream
}

func (x *powerServiceGetPowerStatusServer) Send(m *GetPowerStatusResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _PowerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "powerService.PowerService",
	HandlerType: (*PowerServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetPowerStatus",
			Handler:       _PowerService_GetPowerStatus_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "power.proto",
}
