// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: power.proto

package powerService

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type PowerStatus struct {
	Level                uint32          `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
	IsCharging           bool            `protobuf:"varint,2,opt,name=is_charging,json=isCharging,proto3" json:"is_charging,omitempty"`
	Devices              map[string]bool `protobuf:"bytes,3,rep,name=devices,proto3" json:"devices,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *PowerStatus) Reset()         { *m = PowerStatus{} }
func (m *PowerStatus) String() string { return proto.CompactTextString(m) }
func (*PowerStatus) ProtoMessage()    {}
func (*PowerStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_a4fab2da8ea5416b, []int{0}
}
func (m *PowerStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PowerStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PowerStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PowerStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PowerStatus.Merge(m, src)
}
func (m *PowerStatus) XXX_Size() int {
	return m.Size()
}
func (m *PowerStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_PowerStatus.DiscardUnknown(m)
}

var xxx_messageInfo_PowerStatus proto.InternalMessageInfo

func (m *PowerStatus) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *PowerStatus) GetIsCharging() bool {
	if m != nil {
		return m.IsCharging
	}
	return false
}

func (m *PowerStatus) GetDevices() map[string]bool {
	if m != nil {
		return m.Devices
	}
	return nil
}

type GetPowerStatusRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetPowerStatusRequest) Reset()         { *m = GetPowerStatusRequest{} }
func (m *GetPowerStatusRequest) String() string { return proto.CompactTextString(m) }
func (*GetPowerStatusRequest) ProtoMessage()    {}
func (*GetPowerStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a4fab2da8ea5416b, []int{1}
}
func (m *GetPowerStatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPowerStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPowerStatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPowerStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPowerStatusRequest.Merge(m, src)
}
func (m *GetPowerStatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetPowerStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPowerStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPowerStatusRequest proto.InternalMessageInfo

type GetPowerStatusResponse struct {
	PowerStatus          *PowerStatus `protobuf:"bytes,1,opt,name=power_status,json=powerStatus,proto3" json:"power_status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *GetPowerStatusResponse) Reset()         { *m = GetPowerStatusResponse{} }
func (m *GetPowerStatusResponse) String() string { return proto.CompactTextString(m) }
func (*GetPowerStatusResponse) ProtoMessage()    {}
func (*GetPowerStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a4fab2da8ea5416b, []int{2}
}
func (m *GetPowerStatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPowerStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPowerStatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPowerStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPowerStatusResponse.Merge(m, src)
}
func (m *GetPowerStatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetPowerStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPowerStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetPowerStatusResponse proto.InternalMessageInfo

func (m *GetPowerStatusResponse) GetPowerStatus() *PowerStatus {
	if m != nil {
		return m.PowerStatus
	}
	return nil
}

func init() {
	proto.RegisterType((*PowerStatus)(nil), "powerService.PowerStatus")
	proto.RegisterMapType((map[string]bool)(nil), "powerService.PowerStatus.DevicesEntry")
	proto.RegisterType((*GetPowerStatusRequest)(nil), "powerService.GetPowerStatusRequest")
	proto.RegisterType((*GetPowerStatusResponse)(nil), "powerService.GetPowerStatusResponse")
}

func init() { proto.RegisterFile("power.proto", fileDescriptor_a4fab2da8ea5416b) }

var fileDescriptor_a4fab2da8ea5416b = []byte{
	// 277 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2e, 0xc8, 0x2f, 0x4f,
	0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x01, 0x73, 0x82, 0x53, 0x8b, 0xca, 0x32,
	0x93, 0x53, 0x95, 0x0e, 0x31, 0x72, 0x71, 0x07, 0x80, 0x05, 0x4a, 0x12, 0x4b, 0x4a, 0x8b, 0x85,
	0x44, 0xb8, 0x58, 0x73, 0x52, 0xcb, 0x52, 0x73, 0x24, 0x18, 0x15, 0x18, 0x35, 0x78, 0x83, 0x20,
	0x1c, 0x21, 0x79, 0x2e, 0xee, 0xcc, 0xe2, 0xf8, 0xe4, 0x8c, 0xc4, 0xa2, 0xf4, 0xcc, 0xbc, 0x74,
	0x09, 0x26, 0x05, 0x46, 0x0d, 0x8e, 0x20, 0xae, 0xcc, 0x62, 0x67, 0xa8, 0x88, 0x90, 0x03, 0x17,
	0x7b, 0x4a, 0x2a, 0xc8, 0xc0, 0x62, 0x09, 0x66, 0x05, 0x66, 0x0d, 0x6e, 0x23, 0x35, 0x3d, 0x64,
	0x6b, 0xf4, 0x90, 0xac, 0xd0, 0x73, 0x81, 0x28, 0x74, 0xcd, 0x2b, 0x29, 0xaa, 0x0c, 0x82, 0x69,
	0x93, 0xb2, 0xe2, 0xe2, 0x41, 0x96, 0x10, 0x12, 0xe0, 0x62, 0xce, 0x4e, 0xad, 0x04, 0x3b, 0x83,
	0x33, 0x08, 0xc4, 0x04, 0x39, 0xad, 0x2c, 0x31, 0xa7, 0x34, 0x15, 0x6a, 0x3d, 0x84, 0x63, 0xc5,
	0x64, 0xc1, 0xa8, 0x24, 0xce, 0x25, 0xea, 0x9e, 0x5a, 0x82, 0x64, 0x47, 0x50, 0x6a, 0x61, 0x69,
	0x6a, 0x71, 0x89, 0x52, 0x18, 0x97, 0x18, 0xba, 0x44, 0x71, 0x41, 0x7e, 0x5e, 0x71, 0xaa, 0x90,
	0x0d, 0x17, 0x24, 0x1c, 0xe2, 0x8b, 0xc1, 0xe2, 0x60, 0x7b, 0xb8, 0x8d, 0x24, 0x71, 0xba, 0x3a,
	0x08, 0x12, 0x86, 0x10, 0x8e, 0x51, 0x3e, 0x17, 0x4f, 0x00, 0x92, 0x42, 0xa1, 0x78, 0x2e, 0x3e,
	0x54, 0x7b, 0x84, 0x94, 0x51, 0x4d, 0xc2, 0xea, 0x3c, 0x29, 0x15, 0xfc, 0x8a, 0x20, 0x4e, 0x55,
	0x62, 0x30, 0x60, 0x74, 0xe2, 0x39, 0xf1, 0x48, 0x8e, 0xf1, 0xc2, 0x23, 0x39, 0xc6, 0x07, 0x8f,
	0xe4, 0x18, 0x93, 0xd8, 0xc0, 0x31, 0x69, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x13, 0x3b, 0x07,
	0x32, 0xd8, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PowerServiceClient is the client API for PowerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PowerServiceClient interface {
	// 获取电源状态数据流
	GetPowerStatus(ctx context.Context, in *GetPowerStatusRequest, opts ...grpc.CallOption) (PowerService_GetPowerStatusClient, error)
}

type powerServiceClient struct {
	cc *grpc.ClientConn
}

func NewPowerServiceClient(cc *grpc.ClientConn) PowerServiceClient {
	return &powerServiceClient{cc}
}

func (c *powerServiceClient) GetPowerStatus(ctx context.Context, in *GetPowerStatusRequest, opts ...grpc.CallOption) (PowerService_GetPowerStatusClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PowerService_serviceDesc.Streams[0], "/powerService.PowerService/GetPowerStatus", opts...)
	if err != nil {
		return nil, err
	}
	x := &powerServiceGetPowerStatusClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PowerService_GetPowerStatusClient interface {
	Recv() (*GetPowerStatusResponse, error)
	grpc.ClientStream
}

type powerServiceGetPowerStatusClient struct {
	grpc.ClientStream
}

func (x *powerServiceGetPowerStatusClient) Recv() (*GetPowerStatusResponse, error) {
	m := new(GetPowerStatusResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PowerServiceServer is the server API for PowerService service.
type PowerServiceServer interface {
	// 获取电源状态数据流
	GetPowerStatus(*GetPowerStatusRequest, PowerService_GetPowerStatusServer) error
}

// UnimplementedPowerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedPowerServiceServer struct {
}

func (*UnimplementedPowerServiceServer) GetPowerStatus(req *GetPowerStatusRequest, srv PowerService_GetPowerStatusServer) error {
	return status.Errorf(codes.Unimplemented, "method GetPowerStatus not implemented")
}

func RegisterPowerServiceServer(s *grpc.Server, srv PowerServiceServer) {
	s.RegisterService(&_PowerService_serviceDesc, srv)
}

func _PowerService_GetPowerStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetPowerStatusRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PowerServiceServer).GetPowerStatus(m, &powerServiceGetPowerStatusServer{stream})
}

type PowerService_GetPowerStatusServer interface {
	Send(*GetPowerStatusResponse) error
	grpc.ServerStream
}

type powerServiceGetPowerStatusServer struct {
	grpc.ServerStream
}

func (x *powerServiceGetPowerStatusServer) Send(m *GetPowerStatusResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _PowerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "powerService.PowerService",
	HandlerType: (*PowerServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetPowerStatus",
			Handler:       _PowerService_GetPowerStatus_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "power.proto",
}

func (m *PowerStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PowerStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Level != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPower(dAtA, i, uint64(m.Level))
	}
	if m.IsCharging {
		dAtA[i] = 0x10
		i++
		if m.IsCharging {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Devices) > 0 {
		for k, _ := range m.Devices {
			dAtA[i] = 0x1a
			i++
			v := m.Devices[k]
			mapSize := 1 + len(k) + sovPower(uint64(len(k))) + 1 + 1
			i = encodeVarintPower(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintPower(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x10
			i++
			if v {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i++
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetPowerStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPowerStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetPowerStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPowerStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PowerStatus != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPower(dAtA, i, uint64(m.PowerStatus.Size()))
		n1, err1 := m.PowerStatus.MarshalTo(dAtA[i:])
		if err1 != nil {
			return 0, err1
		}
		i += n1
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintPower(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *PowerStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Level != 0 {
		n += 1 + sovPower(uint64(m.Level))
	}
	if m.IsCharging {
		n += 2
	}
	if len(m.Devices) > 0 {
		for k, v := range m.Devices {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovPower(uint64(len(k))) + 1 + 1
			n += mapEntrySize + 1 + sovPower(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetPowerStatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetPowerStatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PowerStatus != nil {
		l = m.PowerStatus.Size()
		n += 1 + l + sovPower(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovPower(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPower(x uint64) (n int) {
	return sovPower(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PowerStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPower
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PowerStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PowerStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsCharging", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsCharging = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Devices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPower
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPower
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Devices == nil {
				m.Devices = make(map[string]bool)
			}
			var mapkey string
			var mapvalue bool
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPower
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPower
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthPower
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthPower
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapvaluetemp int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPower
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvaluetemp |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					mapvalue = bool(mapvaluetemp != 0)
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipPower(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthPower
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Devices[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPower(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPower
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPower
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPowerStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPower
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPowerStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPowerStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPower(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPower
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPower
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPowerStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPower
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPowerStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPowerStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PowerStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPower
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPower
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PowerStatus == nil {
				m.PowerStatus = &PowerStatus{}
			}
			if err := m.PowerStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPower(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPower
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPower
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPower(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPower
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPower
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPower
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPower
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthPower
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPower
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPower(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthPower
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPower = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPower   = fmt.Errorf("proto: integer overflow")
)
