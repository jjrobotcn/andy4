// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: power.proto

#include "power.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_power_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PowerStatus_DevicesEntry_DoNotUse_power_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_power_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_PowerStatus_power_2eproto;
namespace powerService {
class PowerStatus_DevicesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PowerStatus_DevicesEntry_DoNotUse> _instance;
} _PowerStatus_DevicesEntry_DoNotUse_default_instance_;
class PowerStatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PowerStatus> _instance;
} _PowerStatus_default_instance_;
class GetPowerStatusRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetPowerStatusRequest> _instance;
} _GetPowerStatusRequest_default_instance_;
class GetPowerStatusResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetPowerStatusResponse> _instance;
} _GetPowerStatusResponse_default_instance_;
}  // namespace powerService
static void InitDefaultsPowerStatus_DevicesEntry_DoNotUse_power_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::powerService::_PowerStatus_DevicesEntry_DoNotUse_default_instance_;
    new (ptr) ::powerService::PowerStatus_DevicesEntry_DoNotUse();
  }
  ::powerService::PowerStatus_DevicesEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PowerStatus_DevicesEntry_DoNotUse_power_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPowerStatus_DevicesEntry_DoNotUse_power_2eproto}, {}};

static void InitDefaultsPowerStatus_power_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::powerService::_PowerStatus_default_instance_;
    new (ptr) ::powerService::PowerStatus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::powerService::PowerStatus::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PowerStatus_power_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPowerStatus_power_2eproto}, {
      &scc_info_PowerStatus_DevicesEntry_DoNotUse_power_2eproto.base,}};

static void InitDefaultsGetPowerStatusRequest_power_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::powerService::_GetPowerStatusRequest_default_instance_;
    new (ptr) ::powerService::GetPowerStatusRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::powerService::GetPowerStatusRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetPowerStatusRequest_power_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetPowerStatusRequest_power_2eproto}, {}};

static void InitDefaultsGetPowerStatusResponse_power_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::powerService::_GetPowerStatusResponse_default_instance_;
    new (ptr) ::powerService::GetPowerStatusResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::powerService::GetPowerStatusResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GetPowerStatusResponse_power_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGetPowerStatusResponse_power_2eproto}, {
      &scc_info_PowerStatus_power_2eproto.base,}};

void InitDefaults_power_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_PowerStatus_DevicesEntry_DoNotUse_power_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PowerStatus_power_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetPowerStatusRequest_power_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetPowerStatusResponse_power_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_power_2eproto[4];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_power_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_power_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_power_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::powerService::PowerStatus_DevicesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::powerService::PowerStatus_DevicesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::powerService::PowerStatus_DevicesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::powerService::PowerStatus_DevicesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::powerService::PowerStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::powerService::PowerStatus, level_),
  PROTOBUF_FIELD_OFFSET(::powerService::PowerStatus, is_charging_),
  PROTOBUF_FIELD_OFFSET(::powerService::PowerStatus, devices_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::powerService::GetPowerStatusRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::powerService::GetPowerStatusResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::powerService::GetPowerStatusResponse, power_status_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::powerService::PowerStatus_DevicesEntry_DoNotUse)},
  { 9, -1, sizeof(::powerService::PowerStatus)},
  { 17, -1, sizeof(::powerService::GetPowerStatusRequest)},
  { 22, -1, sizeof(::powerService::GetPowerStatusResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::powerService::_PowerStatus_DevicesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::powerService::_PowerStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::powerService::_GetPowerStatusRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::powerService::_GetPowerStatusResponse_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_power_2eproto = {
  {}, AddDescriptors_power_2eproto, "power.proto", schemas,
  file_default_instances, TableStruct_power_2eproto::offsets,
  file_level_metadata_power_2eproto, 4, file_level_enum_descriptors_power_2eproto, file_level_service_descriptors_power_2eproto,
};

const char descriptor_table_protodef_power_2eproto[] =
  "\n\013power.proto\022\014powerService\"\232\001\n\013PowerSta"
  "tus\022\r\n\005level\030\001 \001(\r\022\023\n\013is_charging\030\002 \001(\010\022"
  "7\n\007devices\030\003 \003(\0132&.powerService.PowerSta"
  "tus.DevicesEntry\032.\n\014DevicesEntry\022\013\n\003key\030"
  "\001 \001(\t\022\r\n\005value\030\002 \001(\010:\0028\001\"\027\n\025GetPowerStat"
  "usRequest\"I\n\026GetPowerStatusResponse\022/\n\014p"
  "ower_status\030\001 \001(\0132\031.powerService.PowerSt"
  "atus2o\n\014PowerService\022_\n\016GetPowerStatus\022#"
  ".powerService.GetPowerStatusRequest\032$.po"
  "werService.GetPowerStatusResponse\"\0000\001b\006p"
  "roto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_power_2eproto = {
  false, InitDefaults_power_2eproto, 
  descriptor_table_protodef_power_2eproto,
  "power.proto", &assign_descriptors_table_power_2eproto, 405,
};

void AddDescriptors_power_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_power_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_power_2eproto = []() { AddDescriptors_power_2eproto(); return true; }();
namespace powerService {

// ===================================================================

PowerStatus_DevicesEntry_DoNotUse::PowerStatus_DevicesEntry_DoNotUse() {}
PowerStatus_DevicesEntry_DoNotUse::PowerStatus_DevicesEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void PowerStatus_DevicesEntry_DoNotUse::MergeFrom(const PowerStatus_DevicesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata PowerStatus_DevicesEntry_DoNotUse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_power_2eproto);
  return ::file_level_metadata_power_2eproto[0];
}
void PowerStatus_DevicesEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PowerStatus_DevicesEntry_DoNotUse::_ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx) {
  using MF = ::google::protobuf::internal::MapField<
      PowerStatus_DevicesEntry_DoNotUse, EntryKeyType, EntryValueType,
      kEntryKeyFieldType, kEntryValueFieldType,
      kEntryDefaultEnumValue>;
  auto mf = static_cast<MF*>(object);
  Parser<MF, ::google::protobuf::Map<EntryKeyType, EntryValueType>> parser(mf);
#define DO_(x) if (!(x)) return false
  DO_(parser.ParseMap(begin, end));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.key().data(), static_cast<int>(parser.key().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "powerService.PowerStatus.DevicesEntry.key"));
#undef DO_
  return true;
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER


// ===================================================================

void PowerStatus::InitAsDefaultInstance() {
}
class PowerStatus::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PowerStatus::kLevelFieldNumber;
const int PowerStatus::kIsChargingFieldNumber;
const int PowerStatus::kDevicesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PowerStatus::PowerStatus()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:powerService.PowerStatus)
}
PowerStatus::PowerStatus(const PowerStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  devices_.MergeFrom(from.devices_);
  ::memcpy(&level_, &from.level_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_charging_) -
    reinterpret_cast<char*>(&level_)) + sizeof(is_charging_));
  // @@protoc_insertion_point(copy_constructor:powerService.PowerStatus)
}

void PowerStatus::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PowerStatus_power_2eproto.base);
  ::memset(&level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_charging_) -
      reinterpret_cast<char*>(&level_)) + sizeof(is_charging_));
}

PowerStatus::~PowerStatus() {
  // @@protoc_insertion_point(destructor:powerService.PowerStatus)
  SharedDtor();
}

void PowerStatus::SharedDtor() {
}

void PowerStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PowerStatus& PowerStatus::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PowerStatus_power_2eproto.base);
  return *internal_default_instance();
}


void PowerStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:powerService.PowerStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  devices_.Clear();
  ::memset(&level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_charging_) -
      reinterpret_cast<char*>(&level_)) + sizeof(is_charging_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PowerStatus::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PowerStatus*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint32 level = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_level(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool is_charging = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_is_charging(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // map<string, bool> devices = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::SlowMapEntryParser;
          auto parse_map = ::powerService::PowerStatus_DevicesEntry_DoNotUse::_ParseMap;
          ctx->extra_parse_data().payload.clear();
          ctx->extra_parse_data().parse_map = parse_map;
          object = &msg->devices_;
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(parse_map(ptr, newend, object, ctx));
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PowerStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:powerService.PowerStatus)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 level = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_charging = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_charging_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, bool> devices = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          PowerStatus_DevicesEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              PowerStatus_DevicesEntry_DoNotUse,
              ::std::string, bool,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_BOOL,
              0 >,
            ::google::protobuf::Map< ::std::string, bool > > parser(&devices_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "powerService.PowerStatus.DevicesEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:powerService.PowerStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:powerService.PowerStatus)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PowerStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:powerService.PowerStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 level = 1;
  if (this->level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->level(), output);
  }

  // bool is_charging = 2;
  if (this->is_charging() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_charging(), output);
  }

  // map<string, bool> devices = 3;
  if (!this->devices().empty()) {
    typedef ::google::protobuf::Map< ::std::string, bool >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "powerService.PowerStatus.DevicesEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->devices().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->devices().size()]);
      typedef ::google::protobuf::Map< ::std::string, bool >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, bool >::const_iterator
          it = this->devices().begin();
          it != this->devices().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<PowerStatus_DevicesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(devices_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(3, *entry, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<PowerStatus_DevicesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, bool >::const_iterator
          it = this->devices().begin();
          it != this->devices().end(); ++it) {
        entry.reset(devices_.NewEntryWrapper(it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(3, *entry, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:powerService.PowerStatus)
}

::google::protobuf::uint8* PowerStatus::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:powerService.PowerStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 level = 1;
  if (this->level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->level(), target);
  }

  // bool is_charging = 2;
  if (this->is_charging() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_charging(), target);
  }

  // map<string, bool> devices = 3;
  if (!this->devices().empty()) {
    typedef ::google::protobuf::Map< ::std::string, bool >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "powerService.PowerStatus.DevicesEntry.key");
      }
    };

    if (false &&
        this->devices().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->devices().size()]);
      typedef ::google::protobuf::Map< ::std::string, bool >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, bool >::const_iterator
          it = this->devices().begin();
          it != this->devices().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<PowerStatus_DevicesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(devices_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(3, *entry, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<PowerStatus_DevicesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, bool >::const_iterator
          it = this->devices().begin();
          it != this->devices().end(); ++it) {
        entry.reset(devices_.NewEntryWrapper(it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(3, *entry, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:powerService.PowerStatus)
  return target;
}

size_t PowerStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:powerService.PowerStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, bool> devices = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->devices_size());
  {
    ::std::unique_ptr<PowerStatus_DevicesEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, bool >::const_iterator
        it = this->devices().begin();
        it != this->devices().end(); ++it) {
      entry.reset(devices_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // uint32 level = 1;
  if (this->level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->level());
  }

  // bool is_charging = 2;
  if (this->is_charging() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PowerStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:powerService.PowerStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const PowerStatus* source =
      ::google::protobuf::DynamicCastToGenerated<PowerStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:powerService.PowerStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:powerService.PowerStatus)
    MergeFrom(*source);
  }
}

void PowerStatus::MergeFrom(const PowerStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:powerService.PowerStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  devices_.MergeFrom(from.devices_);
  if (from.level() != 0) {
    set_level(from.level());
  }
  if (from.is_charging() != 0) {
    set_is_charging(from.is_charging());
  }
}

void PowerStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:powerService.PowerStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PowerStatus::CopyFrom(const PowerStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:powerService.PowerStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PowerStatus::IsInitialized() const {
  return true;
}

void PowerStatus::Swap(PowerStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PowerStatus::InternalSwap(PowerStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  devices_.Swap(&other->devices_);
  swap(level_, other->level_);
  swap(is_charging_, other->is_charging_);
}

::google::protobuf::Metadata PowerStatus::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_power_2eproto);
  return ::file_level_metadata_power_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GetPowerStatusRequest::InitAsDefaultInstance() {
}
class GetPowerStatusRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetPowerStatusRequest::GetPowerStatusRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:powerService.GetPowerStatusRequest)
}
GetPowerStatusRequest::GetPowerStatusRequest(const GetPowerStatusRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:powerService.GetPowerStatusRequest)
}

void GetPowerStatusRequest::SharedCtor() {
}

GetPowerStatusRequest::~GetPowerStatusRequest() {
  // @@protoc_insertion_point(destructor:powerService.GetPowerStatusRequest)
  SharedDtor();
}

void GetPowerStatusRequest::SharedDtor() {
}

void GetPowerStatusRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetPowerStatusRequest& GetPowerStatusRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetPowerStatusRequest_power_2eproto.base);
  return *internal_default_instance();
}


void GetPowerStatusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:powerService.GetPowerStatusRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetPowerStatusRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetPowerStatusRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetPowerStatusRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:powerService.GetPowerStatusRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:powerService.GetPowerStatusRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:powerService.GetPowerStatusRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetPowerStatusRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:powerService.GetPowerStatusRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:powerService.GetPowerStatusRequest)
}

::google::protobuf::uint8* GetPowerStatusRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:powerService.GetPowerStatusRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:powerService.GetPowerStatusRequest)
  return target;
}

size_t GetPowerStatusRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:powerService.GetPowerStatusRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetPowerStatusRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:powerService.GetPowerStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPowerStatusRequest* source =
      ::google::protobuf::DynamicCastToGenerated<GetPowerStatusRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:powerService.GetPowerStatusRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:powerService.GetPowerStatusRequest)
    MergeFrom(*source);
  }
}

void GetPowerStatusRequest::MergeFrom(const GetPowerStatusRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:powerService.GetPowerStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetPowerStatusRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:powerService.GetPowerStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPowerStatusRequest::CopyFrom(const GetPowerStatusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:powerService.GetPowerStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPowerStatusRequest::IsInitialized() const {
  return true;
}

void GetPowerStatusRequest::Swap(GetPowerStatusRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetPowerStatusRequest::InternalSwap(GetPowerStatusRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetPowerStatusRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_power_2eproto);
  return ::file_level_metadata_power_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GetPowerStatusResponse::InitAsDefaultInstance() {
  ::powerService::_GetPowerStatusResponse_default_instance_._instance.get_mutable()->power_status_ = const_cast< ::powerService::PowerStatus*>(
      ::powerService::PowerStatus::internal_default_instance());
}
class GetPowerStatusResponse::HasBitSetters {
 public:
  static const ::powerService::PowerStatus& power_status(const GetPowerStatusResponse* msg);
};

const ::powerService::PowerStatus&
GetPowerStatusResponse::HasBitSetters::power_status(const GetPowerStatusResponse* msg) {
  return *msg->power_status_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetPowerStatusResponse::kPowerStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetPowerStatusResponse::GetPowerStatusResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:powerService.GetPowerStatusResponse)
}
GetPowerStatusResponse::GetPowerStatusResponse(const GetPowerStatusResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_power_status()) {
    power_status_ = new ::powerService::PowerStatus(*from.power_status_);
  } else {
    power_status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:powerService.GetPowerStatusResponse)
}

void GetPowerStatusResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GetPowerStatusResponse_power_2eproto.base);
  power_status_ = nullptr;
}

GetPowerStatusResponse::~GetPowerStatusResponse() {
  // @@protoc_insertion_point(destructor:powerService.GetPowerStatusResponse)
  SharedDtor();
}

void GetPowerStatusResponse::SharedDtor() {
  if (this != internal_default_instance()) delete power_status_;
}

void GetPowerStatusResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetPowerStatusResponse& GetPowerStatusResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetPowerStatusResponse_power_2eproto.base);
  return *internal_default_instance();
}


void GetPowerStatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:powerService.GetPowerStatusResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && power_status_ != nullptr) {
    delete power_status_;
  }
  power_status_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetPowerStatusResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetPowerStatusResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .powerService.PowerStatus power_status = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::powerService::PowerStatus::_InternalParse;
        object = msg->mutable_power_status();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetPowerStatusResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:powerService.GetPowerStatusResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .powerService.PowerStatus power_status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_power_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:powerService.GetPowerStatusResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:powerService.GetPowerStatusResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetPowerStatusResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:powerService.GetPowerStatusResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .powerService.PowerStatus power_status = 1;
  if (this->has_power_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::power_status(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:powerService.GetPowerStatusResponse)
}

::google::protobuf::uint8* GetPowerStatusResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:powerService.GetPowerStatusResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .powerService.PowerStatus power_status = 1;
  if (this->has_power_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::power_status(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:powerService.GetPowerStatusResponse)
  return target;
}

size_t GetPowerStatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:powerService.GetPowerStatusResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .powerService.PowerStatus power_status = 1;
  if (this->has_power_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *power_status_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetPowerStatusResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:powerService.GetPowerStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPowerStatusResponse* source =
      ::google::protobuf::DynamicCastToGenerated<GetPowerStatusResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:powerService.GetPowerStatusResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:powerService.GetPowerStatusResponse)
    MergeFrom(*source);
  }
}

void GetPowerStatusResponse::MergeFrom(const GetPowerStatusResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:powerService.GetPowerStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_power_status()) {
    mutable_power_status()->::powerService::PowerStatus::MergeFrom(from.power_status());
  }
}

void GetPowerStatusResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:powerService.GetPowerStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPowerStatusResponse::CopyFrom(const GetPowerStatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:powerService.GetPowerStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPowerStatusResponse::IsInitialized() const {
  return true;
}

void GetPowerStatusResponse::Swap(GetPowerStatusResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetPowerStatusResponse::InternalSwap(GetPowerStatusResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(power_status_, other->power_status_);
}

::google::protobuf::Metadata GetPowerStatusResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_power_2eproto);
  return ::file_level_metadata_power_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace powerService
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::powerService::PowerStatus_DevicesEntry_DoNotUse* Arena::CreateMaybeMessage< ::powerService::PowerStatus_DevicesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::powerService::PowerStatus_DevicesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::powerService::PowerStatus* Arena::CreateMaybeMessage< ::powerService::PowerStatus >(Arena* arena) {
  return Arena::CreateInternal< ::powerService::PowerStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::powerService::GetPowerStatusRequest* Arena::CreateMaybeMessage< ::powerService::GetPowerStatusRequest >(Arena* arena) {
  return Arena::CreateInternal< ::powerService::GetPowerStatusRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::powerService::GetPowerStatusResponse* Arena::CreateMaybeMessage< ::powerService::GetPowerStatusResponse >(Arena* arena) {
  return Arena::CreateInternal< ::powerService::GetPowerStatusResponse >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
