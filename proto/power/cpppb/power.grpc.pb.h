// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: power.proto
#ifndef GRPC_power_2eproto__INCLUDED
#define GRPC_power_2eproto__INCLUDED

#include "power.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc_impl {
class CompletionQueue;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc_impl

namespace grpc {
namespace experimental {
template <typename RequestT, typename ResponseT>
class MessageAllocator;
}  // namespace experimental
}  // namespace grpc

namespace powerService {

class PowerService final {
 public:
  static constexpr char const* service_full_name() {
    return "powerService.PowerService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // 获取电源状态数据流
    std::unique_ptr< ::grpc::ClientReaderInterface< ::powerService::GetPowerStatusResponse>> GetPowerStatus(::grpc::ClientContext* context, const ::powerService::GetPowerStatusRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::powerService::GetPowerStatusResponse>>(GetPowerStatusRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::powerService::GetPowerStatusResponse>> AsyncGetPowerStatus(::grpc::ClientContext* context, const ::powerService::GetPowerStatusRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::powerService::GetPowerStatusResponse>>(AsyncGetPowerStatusRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::powerService::GetPowerStatusResponse>> PrepareAsyncGetPowerStatus(::grpc::ClientContext* context, const ::powerService::GetPowerStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::powerService::GetPowerStatusResponse>>(PrepareAsyncGetPowerStatusRaw(context, request, cq));
    }
    // 对各模块的电源进行断电方式重启
    virtual ::grpc::Status Reboot(::grpc::ClientContext* context, const ::powerService::RebootRequest& request, ::powerService::RebootResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::powerService::RebootResponse>> AsyncReboot(::grpc::ClientContext* context, const ::powerService::RebootRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::powerService::RebootResponse>>(AsyncRebootRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::powerService::RebootResponse>> PrepareAsyncReboot(::grpc::ClientContext* context, const ::powerService::RebootRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::powerService::RebootResponse>>(PrepareAsyncRebootRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // 获取电源状态数据流
      virtual void GetPowerStatus(::grpc::ClientContext* context, ::powerService::GetPowerStatusRequest* request, ::grpc::experimental::ClientReadReactor< ::powerService::GetPowerStatusResponse>* reactor) = 0;
      // 对各模块的电源进行断电方式重启
      virtual void Reboot(::grpc::ClientContext* context, const ::powerService::RebootRequest* request, ::powerService::RebootResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Reboot(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::powerService::RebootResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Reboot(::grpc::ClientContext* context, const ::powerService::RebootRequest* request, ::powerService::RebootResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Reboot(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::powerService::RebootResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientReaderInterface< ::powerService::GetPowerStatusResponse>* GetPowerStatusRaw(::grpc::ClientContext* context, const ::powerService::GetPowerStatusRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::powerService::GetPowerStatusResponse>* AsyncGetPowerStatusRaw(::grpc::ClientContext* context, const ::powerService::GetPowerStatusRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::powerService::GetPowerStatusResponse>* PrepareAsyncGetPowerStatusRaw(::grpc::ClientContext* context, const ::powerService::GetPowerStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::powerService::RebootResponse>* AsyncRebootRaw(::grpc::ClientContext* context, const ::powerService::RebootRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::powerService::RebootResponse>* PrepareAsyncRebootRaw(::grpc::ClientContext* context, const ::powerService::RebootRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    std::unique_ptr< ::grpc::ClientReader< ::powerService::GetPowerStatusResponse>> GetPowerStatus(::grpc::ClientContext* context, const ::powerService::GetPowerStatusRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::powerService::GetPowerStatusResponse>>(GetPowerStatusRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::powerService::GetPowerStatusResponse>> AsyncGetPowerStatus(::grpc::ClientContext* context, const ::powerService::GetPowerStatusRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::powerService::GetPowerStatusResponse>>(AsyncGetPowerStatusRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::powerService::GetPowerStatusResponse>> PrepareAsyncGetPowerStatus(::grpc::ClientContext* context, const ::powerService::GetPowerStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::powerService::GetPowerStatusResponse>>(PrepareAsyncGetPowerStatusRaw(context, request, cq));
    }
    ::grpc::Status Reboot(::grpc::ClientContext* context, const ::powerService::RebootRequest& request, ::powerService::RebootResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::powerService::RebootResponse>> AsyncReboot(::grpc::ClientContext* context, const ::powerService::RebootRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::powerService::RebootResponse>>(AsyncRebootRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::powerService::RebootResponse>> PrepareAsyncReboot(::grpc::ClientContext* context, const ::powerService::RebootRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::powerService::RebootResponse>>(PrepareAsyncRebootRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void GetPowerStatus(::grpc::ClientContext* context, ::powerService::GetPowerStatusRequest* request, ::grpc::experimental::ClientReadReactor< ::powerService::GetPowerStatusResponse>* reactor) override;
      void Reboot(::grpc::ClientContext* context, const ::powerService::RebootRequest* request, ::powerService::RebootResponse* response, std::function<void(::grpc::Status)>) override;
      void Reboot(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::powerService::RebootResponse* response, std::function<void(::grpc::Status)>) override;
      void Reboot(::grpc::ClientContext* context, const ::powerService::RebootRequest* request, ::powerService::RebootResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Reboot(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::powerService::RebootResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientReader< ::powerService::GetPowerStatusResponse>* GetPowerStatusRaw(::grpc::ClientContext* context, const ::powerService::GetPowerStatusRequest& request) override;
    ::grpc::ClientAsyncReader< ::powerService::GetPowerStatusResponse>* AsyncGetPowerStatusRaw(::grpc::ClientContext* context, const ::powerService::GetPowerStatusRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::powerService::GetPowerStatusResponse>* PrepareAsyncGetPowerStatusRaw(::grpc::ClientContext* context, const ::powerService::GetPowerStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::powerService::RebootResponse>* AsyncRebootRaw(::grpc::ClientContext* context, const ::powerService::RebootRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::powerService::RebootResponse>* PrepareAsyncRebootRaw(::grpc::ClientContext* context, const ::powerService::RebootRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetPowerStatus_;
    const ::grpc::internal::RpcMethod rpcmethod_Reboot_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // 获取电源状态数据流
    virtual ::grpc::Status GetPowerStatus(::grpc::ServerContext* context, const ::powerService::GetPowerStatusRequest* request, ::grpc::ServerWriter< ::powerService::GetPowerStatusResponse>* writer);
    // 对各模块的电源进行断电方式重启
    virtual ::grpc::Status Reboot(::grpc::ServerContext* context, const ::powerService::RebootRequest* request, ::powerService::RebootResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetPowerStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetPowerStatus() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetPowerStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPowerStatus(::grpc::ServerContext* context, const ::powerService::GetPowerStatusRequest* request, ::grpc::ServerWriter< ::powerService::GetPowerStatusResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPowerStatus(::grpc::ServerContext* context, ::powerService::GetPowerStatusRequest* request, ::grpc::ServerAsyncWriter< ::powerService::GetPowerStatusResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Reboot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Reboot() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Reboot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Reboot(::grpc::ServerContext* context, const ::powerService::RebootRequest* request, ::powerService::RebootResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReboot(::grpc::ServerContext* context, ::powerService::RebootRequest* request, ::grpc::ServerAsyncResponseWriter< ::powerService::RebootResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetPowerStatus<WithAsyncMethod_Reboot<Service > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetPowerStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GetPowerStatus() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackServerStreamingHandler< ::powerService::GetPowerStatusRequest, ::powerService::GetPowerStatusResponse>(
          [this] { return this->GetPowerStatus(); }));
    }
    ~ExperimentalWithCallbackMethod_GetPowerStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPowerStatus(::grpc::ServerContext* context, const ::powerService::GetPowerStatusRequest* request, ::grpc::ServerWriter< ::powerService::GetPowerStatusResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::powerService::GetPowerStatusRequest, ::powerService::GetPowerStatusResponse>* GetPowerStatus() {
      return new ::grpc::internal::UnimplementedWriteReactor<
        ::powerService::GetPowerStatusRequest, ::powerService::GetPowerStatusResponse>;}
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Reboot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Reboot() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::powerService::RebootRequest, ::powerService::RebootResponse>(
          [this](::grpc::ServerContext* context,
                 const ::powerService::RebootRequest* request,
                 ::powerService::RebootResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Reboot(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_Reboot(
        ::grpc::experimental::MessageAllocator< ::powerService::RebootRequest, ::powerService::RebootResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::powerService::RebootRequest, ::powerService::RebootResponse>*>(
          ::grpc::Service::experimental().GetHandler(1))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Reboot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Reboot(::grpc::ServerContext* context, const ::powerService::RebootRequest* request, ::powerService::RebootResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Reboot(::grpc::ServerContext* context, const ::powerService::RebootRequest* request, ::powerService::RebootResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_GetPowerStatus<ExperimentalWithCallbackMethod_Reboot<Service > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetPowerStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetPowerStatus() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetPowerStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPowerStatus(::grpc::ServerContext* context, const ::powerService::GetPowerStatusRequest* request, ::grpc::ServerWriter< ::powerService::GetPowerStatusResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Reboot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Reboot() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Reboot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Reboot(::grpc::ServerContext* context, const ::powerService::RebootRequest* request, ::powerService::RebootResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetPowerStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetPowerStatus() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetPowerStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPowerStatus(::grpc::ServerContext* context, const ::powerService::GetPowerStatusRequest* request, ::grpc::ServerWriter< ::powerService::GetPowerStatusResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPowerStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Reboot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Reboot() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Reboot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Reboot(::grpc::ServerContext* context, const ::powerService::RebootRequest* request, ::powerService::RebootResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReboot(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetPowerStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GetPowerStatus() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this] { return this->GetPowerStatus(); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetPowerStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPowerStatus(::grpc::ServerContext* context, const ::powerService::GetPowerStatusRequest* request, ::grpc::ServerWriter< ::powerService::GetPowerStatusResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* GetPowerStatus() {
      return new ::grpc::internal::UnimplementedWriteReactor<
        ::grpc::ByteBuffer, ::grpc::ByteBuffer>;}
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Reboot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Reboot() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Reboot(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Reboot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Reboot(::grpc::ServerContext* context, const ::powerService::RebootRequest* request, ::powerService::RebootResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Reboot(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Reboot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Reboot() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::powerService::RebootRequest, ::powerService::RebootResponse>(std::bind(&WithStreamedUnaryMethod_Reboot<BaseClass>::StreamedReboot, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Reboot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Reboot(::grpc::ServerContext* context, const ::powerService::RebootRequest* request, ::powerService::RebootResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReboot(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::powerService::RebootRequest,::powerService::RebootResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Reboot<Service > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_GetPowerStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_GetPowerStatus() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::SplitServerStreamingHandler< ::powerService::GetPowerStatusRequest, ::powerService::GetPowerStatusResponse>(std::bind(&WithSplitStreamingMethod_GetPowerStatus<BaseClass>::StreamedGetPowerStatus, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_GetPowerStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetPowerStatus(::grpc::ServerContext* context, const ::powerService::GetPowerStatusRequest* request, ::grpc::ServerWriter< ::powerService::GetPowerStatusResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetPowerStatus(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::powerService::GetPowerStatusRequest,::powerService::GetPowerStatusResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_GetPowerStatus<Service > SplitStreamedService;
  typedef WithSplitStreamingMethod_GetPowerStatus<WithStreamedUnaryMethod_Reboot<Service > > StreamedService;
};

}  // namespace powerService


#endif  // GRPC_power_2eproto__INCLUDED
