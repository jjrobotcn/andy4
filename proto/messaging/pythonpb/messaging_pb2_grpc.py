# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import messaging_pb2 as messaging__pb2


class MessagingServiceStub(object):
  """MessagingService消息服务便于开发者在不同设备或应用中实现消息通信广播
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Messaging = channel.stream_stream(
        '/messaging.MessagingService/Messaging',
        request_serializer=messaging__pb2.MessagingRequest.SerializeToString,
        response_deserializer=messaging__pb2.MessagingResponse.FromString,
        )


class MessagingServiceServicer(object):
  """MessagingService消息服务便于开发者在不同设备或应用中实现消息通信广播
  """

  def Messaging(self, request_iterator, context):
    """Messaging为消息发布订阅方法
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_MessagingServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Messaging': grpc.stream_stream_rpc_method_handler(
          servicer.Messaging,
          request_deserializer=messaging__pb2.MessagingRequest.FromString,
          response_serializer=messaging__pb2.MessagingResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'messaging.MessagingService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
