// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: messaging.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Messaging {
  /// <summary>
  /// MessagingService消息服务便于开发者在不同设备或应用中实现消息通信广播
  /// </summary>
  public static partial class MessagingService
  {
    static readonly string __ServiceName = "messaging.MessagingService";

    static readonly grpc::Marshaller<global::Messaging.MessagingRequest> __Marshaller_messaging_MessagingRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Messaging.MessagingRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Messaging.MessagingResponse> __Marshaller_messaging_MessagingResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Messaging.MessagingResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Messaging.MessagingRequest, global::Messaging.MessagingResponse> __Method_Messaging = new grpc::Method<global::Messaging.MessagingRequest, global::Messaging.MessagingResponse>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "Messaging",
        __Marshaller_messaging_MessagingRequest,
        __Marshaller_messaging_MessagingResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Messaging.MessagingReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of MessagingService</summary>
    [grpc::BindServiceMethod(typeof(MessagingService), "BindService")]
    public abstract partial class MessagingServiceBase
    {
      /// <summary>
      /// Messaging为消息发布订阅方法
      /// </summary>
      /// <param name="requestStream">Used for reading requests from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task Messaging(grpc::IAsyncStreamReader<global::Messaging.MessagingRequest> requestStream, grpc::IServerStreamWriter<global::Messaging.MessagingResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for MessagingService</summary>
    public partial class MessagingServiceClient : grpc::ClientBase<MessagingServiceClient>
    {
      /// <summary>Creates a new client for MessagingService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public MessagingServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for MessagingService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public MessagingServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected MessagingServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected MessagingServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Messaging为消息发布订阅方法
      /// </summary>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncDuplexStreamingCall<global::Messaging.MessagingRequest, global::Messaging.MessagingResponse> Messaging(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Messaging(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Messaging为消息发布订阅方法
      /// </summary>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncDuplexStreamingCall<global::Messaging.MessagingRequest, global::Messaging.MessagingResponse> Messaging(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_Messaging, null, options);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override MessagingServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new MessagingServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(MessagingServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Messaging, serviceImpl.Messaging).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, MessagingServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Messaging, serviceImpl == null ? null : new grpc::DuplexStreamingServerMethod<global::Messaging.MessagingRequest, global::Messaging.MessagingResponse>(serviceImpl.Messaging));
    }

  }
}
#endregion
