// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messaging.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "Messaging.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"

#pragma mark - MessagingRoot

@implementation MessagingRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - MessagingRoot_FileDescriptor

static GPBFileDescriptor *MessagingRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"messaging"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Subscribe

@implementation Subscribe

@dynamic topicsArray, topicsArray_Count;

typedef struct Subscribe__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *topicsArray;
} Subscribe__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "topicsArray",
        .dataTypeSpecific.className = NULL,
        .number = Subscribe_FieldNumber_TopicsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Subscribe__storage_, topicsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Subscribe class]
                                     rootClass:[MessagingRoot class]
                                          file:MessagingRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Subscribe__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Unsubscribe

@implementation Unsubscribe

@dynamic topicsArray, topicsArray_Count;

typedef struct Unsubscribe__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *topicsArray;
} Unsubscribe__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "topicsArray",
        .dataTypeSpecific.className = NULL,
        .number = Unsubscribe_FieldNumber_TopicsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Unsubscribe__storage_, topicsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Unsubscribe class]
                                     rootClass:[MessagingRoot class]
                                          file:MessagingRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Unsubscribe__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MessagePublish

@implementation MessagePublish

@dynamic topicsArray, topicsArray_Count;
@dynamic payload;

typedef struct MessagePublish__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *topicsArray;
  NSData *payload;
} MessagePublish__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "topicsArray",
        .dataTypeSpecific.className = NULL,
        .number = MessagePublish_FieldNumber_TopicsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(MessagePublish__storage_, topicsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "payload",
        .dataTypeSpecific.className = NULL,
        .number = MessagePublish_FieldNumber_Payload,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MessagePublish__storage_, payload),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MessagePublish class]
                                     rootClass:[MessagingRoot class]
                                          file:MessagingRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MessagePublish__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MessagingRequest

@implementation MessagingRequest

@dynamic messagingOneofOneOfCase;
@dynamic subscribe;
@dynamic unsubscribe;
@dynamic messagePublish;

typedef struct MessagingRequest__storage_ {
  uint32_t _has_storage_[2];
  Subscribe *subscribe;
  Unsubscribe *unsubscribe;
  MessagePublish *messagePublish;
} MessagingRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "subscribe",
        .dataTypeSpecific.className = GPBStringifySymbol(Subscribe),
        .number = MessagingRequest_FieldNumber_Subscribe,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(MessagingRequest__storage_, subscribe),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "unsubscribe",
        .dataTypeSpecific.className = GPBStringifySymbol(Unsubscribe),
        .number = MessagingRequest_FieldNumber_Unsubscribe,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(MessagingRequest__storage_, unsubscribe),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "messagePublish",
        .dataTypeSpecific.className = GPBStringifySymbol(MessagePublish),
        .number = MessagingRequest_FieldNumber_MessagePublish,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(MessagingRequest__storage_, messagePublish),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MessagingRequest class]
                                     rootClass:[MessagingRoot class]
                                          file:MessagingRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MessagingRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    static const char *oneofs[] = {
      "messagingOneof",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void MessagingRequest_ClearMessagingOneofOneOfCase(MessagingRequest *message) {
  GPBDescriptor *descriptor = [message descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBMaybeClearOneof(message, oneof, -1, 0);
}
#pragma mark - MessagingResponse

@implementation MessagingResponse

@dynamic topic;
@dynamic payload;

typedef struct MessagingResponse__storage_ {
  uint32_t _has_storage_[1];
  NSString *topic;
  NSData *payload;
} MessagingResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "topic",
        .dataTypeSpecific.className = NULL,
        .number = MessagingResponse_FieldNumber_Topic,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MessagingResponse__storage_, topic),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "payload",
        .dataTypeSpecific.className = NULL,
        .number = MessagingResponse_FieldNumber_Payload,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MessagingResponse__storage_, payload),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MessagingResponse class]
                                     rootClass:[MessagingRoot class]
                                          file:MessagingRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MessagingResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
