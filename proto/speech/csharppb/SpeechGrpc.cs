// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: speech.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace SpeechService {
  public static partial class SpeechService
  {
    static readonly string __ServiceName = "speechService.SpeechService";

    static readonly grpc::Marshaller<global::SpeechService.ListenSpeechEventRequest> __Marshaller_speechService_ListenSpeechEventRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SpeechService.ListenSpeechEventRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SpeechService.ListenSpeechEventResponse> __Marshaller_speechService_ListenSpeechEventResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SpeechService.ListenSpeechEventResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SpeechService.TextToSpeechRequest> __Marshaller_speechService_TextToSpeechRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SpeechService.TextToSpeechRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SpeechService.TextToSpeechResponse> __Marshaller_speechService_TextToSpeechResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SpeechService.TextToSpeechResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SpeechService.SpeechStopRequest> __Marshaller_speechService_SpeechStopRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SpeechService.SpeechStopRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SpeechService.SpeechStopResponse> __Marshaller_speechService_SpeechStopResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SpeechService.SpeechStopResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SpeechService.WakeUpRequest> __Marshaller_speechService_WakeUpRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SpeechService.WakeUpRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SpeechService.WakeUpResponse> __Marshaller_speechService_WakeUpResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SpeechService.WakeUpResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SpeechService.HibernateRequest> __Marshaller_speechService_HibernateRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SpeechService.HibernateRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SpeechService.HibernateResponse> __Marshaller_speechService_HibernateResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SpeechService.HibernateResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SpeechService.SetVoiceVolumeRequest> __Marshaller_speechService_SetVoiceVolumeRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SpeechService.SetVoiceVolumeRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SpeechService.SetVoiceVolumeResponse> __Marshaller_speechService_SetVoiceVolumeResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SpeechService.SetVoiceVolumeResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SpeechService.GetVoiceVolumeRequest> __Marshaller_speechService_GetVoiceVolumeRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SpeechService.GetVoiceVolumeRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SpeechService.GetVoiceVolumeResponse> __Marshaller_speechService_GetVoiceVolumeResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SpeechService.GetVoiceVolumeResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SpeechService.SetParamsRequest> __Marshaller_speechService_SetParamsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SpeechService.SetParamsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SpeechService.SetParamsResponse> __Marshaller_speechService_SetParamsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SpeechService.SetParamsResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::SpeechService.ListenSpeechEventRequest, global::SpeechService.ListenSpeechEventResponse> __Method_ListenSpeechEvent = new grpc::Method<global::SpeechService.ListenSpeechEventRequest, global::SpeechService.ListenSpeechEventResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "ListenSpeechEvent",
        __Marshaller_speechService_ListenSpeechEventRequest,
        __Marshaller_speechService_ListenSpeechEventResponse);

    static readonly grpc::Method<global::SpeechService.TextToSpeechRequest, global::SpeechService.TextToSpeechResponse> __Method_TextToSpeech = new grpc::Method<global::SpeechService.TextToSpeechRequest, global::SpeechService.TextToSpeechResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "TextToSpeech",
        __Marshaller_speechService_TextToSpeechRequest,
        __Marshaller_speechService_TextToSpeechResponse);

    static readonly grpc::Method<global::SpeechService.SpeechStopRequest, global::SpeechService.SpeechStopResponse> __Method_SpeechStop = new grpc::Method<global::SpeechService.SpeechStopRequest, global::SpeechService.SpeechStopResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SpeechStop",
        __Marshaller_speechService_SpeechStopRequest,
        __Marshaller_speechService_SpeechStopResponse);

    static readonly grpc::Method<global::SpeechService.WakeUpRequest, global::SpeechService.WakeUpResponse> __Method_WakeUp = new grpc::Method<global::SpeechService.WakeUpRequest, global::SpeechService.WakeUpResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "WakeUp",
        __Marshaller_speechService_WakeUpRequest,
        __Marshaller_speechService_WakeUpResponse);

    static readonly grpc::Method<global::SpeechService.HibernateRequest, global::SpeechService.HibernateResponse> __Method_Hibernate = new grpc::Method<global::SpeechService.HibernateRequest, global::SpeechService.HibernateResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Hibernate",
        __Marshaller_speechService_HibernateRequest,
        __Marshaller_speechService_HibernateResponse);

    static readonly grpc::Method<global::SpeechService.SetVoiceVolumeRequest, global::SpeechService.SetVoiceVolumeResponse> __Method_SetVoiceVolume = new grpc::Method<global::SpeechService.SetVoiceVolumeRequest, global::SpeechService.SetVoiceVolumeResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetVoiceVolume",
        __Marshaller_speechService_SetVoiceVolumeRequest,
        __Marshaller_speechService_SetVoiceVolumeResponse);

    static readonly grpc::Method<global::SpeechService.GetVoiceVolumeRequest, global::SpeechService.GetVoiceVolumeResponse> __Method_GetVoiceVolume = new grpc::Method<global::SpeechService.GetVoiceVolumeRequest, global::SpeechService.GetVoiceVolumeResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetVoiceVolume",
        __Marshaller_speechService_GetVoiceVolumeRequest,
        __Marshaller_speechService_GetVoiceVolumeResponse);

    static readonly grpc::Method<global::SpeechService.SetParamsRequest, global::SpeechService.SetParamsResponse> __Method_SetParams = new grpc::Method<global::SpeechService.SetParamsRequest, global::SpeechService.SetParamsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetParams",
        __Marshaller_speechService_SetParamsRequest,
        __Marshaller_speechService_SetParamsResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::SpeechService.SpeechReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of SpeechService</summary>
    [grpc::BindServiceMethod(typeof(SpeechService), "BindService")]
    public abstract partial class SpeechServiceBase
    {
      /// <summary>
      /// ListenSpeechEvent方法为监听语音事件变更状态流, 具体类型参考: SpeechEvent
      /// ListenSpeechEventRequest中可配置相关状态消息过滤,
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task ListenSpeechEvent(global::SpeechService.ListenSpeechEventRequest request, grpc::IServerStreamWriter<global::SpeechService.ListenSpeechEventResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// TextToSpeech(TTS)方法实现文本输入语音合成自动音频输出
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SpeechService.TextToSpeechResponse> TextToSpeech(global::SpeechService.TextToSpeechRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// SpeechStop方法实现打断语音功能
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SpeechService.SpeechStopResponse> SpeechStop(global::SpeechService.SpeechStopRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 唤醒
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SpeechService.WakeUpResponse> WakeUp(global::SpeechService.WakeUpRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 休眠
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SpeechService.HibernateResponse> Hibernate(global::SpeechService.HibernateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 设置语音音量
      /// v2.1.0
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SpeechService.SetVoiceVolumeResponse> SetVoiceVolume(global::SpeechService.SetVoiceVolumeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 查询语音音量
      /// v2.1.0
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SpeechService.GetVoiceVolumeResponse> GetVoiceVolume(global::SpeechService.GetVoiceVolumeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 配置参数(当前仅支持AIUI模块)
      /// v2.1.0
      /// AIUI模块参数配置参考: https://aiui.xfyun.cn/docs/access_docs (开发-评估板/量产板 => AIUI SDK => 参数配置)
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SpeechService.SetParamsResponse> SetParams(global::SpeechService.SetParamsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for SpeechService</summary>
    public partial class SpeechServiceClient : grpc::ClientBase<SpeechServiceClient>
    {
      /// <summary>Creates a new client for SpeechService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public SpeechServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for SpeechService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public SpeechServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected SpeechServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected SpeechServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// ListenSpeechEvent方法为监听语音事件变更状态流, 具体类型参考: SpeechEvent
      /// ListenSpeechEventRequest中可配置相关状态消息过滤,
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::SpeechService.ListenSpeechEventResponse> ListenSpeechEvent(global::SpeechService.ListenSpeechEventRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListenSpeechEvent(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ListenSpeechEvent方法为监听语音事件变更状态流, 具体类型参考: SpeechEvent
      /// ListenSpeechEventRequest中可配置相关状态消息过滤,
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::SpeechService.ListenSpeechEventResponse> ListenSpeechEvent(global::SpeechService.ListenSpeechEventRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_ListenSpeechEvent, null, options, request);
      }
      /// <summary>
      /// TextToSpeech(TTS)方法实现文本输入语音合成自动音频输出
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SpeechService.TextToSpeechResponse TextToSpeech(global::SpeechService.TextToSpeechRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TextToSpeech(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// TextToSpeech(TTS)方法实现文本输入语音合成自动音频输出
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SpeechService.TextToSpeechResponse TextToSpeech(global::SpeechService.TextToSpeechRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TextToSpeech, null, options, request);
      }
      /// <summary>
      /// TextToSpeech(TTS)方法实现文本输入语音合成自动音频输出
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SpeechService.TextToSpeechResponse> TextToSpeechAsync(global::SpeechService.TextToSpeechRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TextToSpeechAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// TextToSpeech(TTS)方法实现文本输入语音合成自动音频输出
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SpeechService.TextToSpeechResponse> TextToSpeechAsync(global::SpeechService.TextToSpeechRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TextToSpeech, null, options, request);
      }
      /// <summary>
      /// SpeechStop方法实现打断语音功能
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SpeechService.SpeechStopResponse SpeechStop(global::SpeechService.SpeechStopRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SpeechStop(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// SpeechStop方法实现打断语音功能
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SpeechService.SpeechStopResponse SpeechStop(global::SpeechService.SpeechStopRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SpeechStop, null, options, request);
      }
      /// <summary>
      /// SpeechStop方法实现打断语音功能
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SpeechService.SpeechStopResponse> SpeechStopAsync(global::SpeechService.SpeechStopRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SpeechStopAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// SpeechStop方法实现打断语音功能
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SpeechService.SpeechStopResponse> SpeechStopAsync(global::SpeechService.SpeechStopRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SpeechStop, null, options, request);
      }
      /// <summary>
      /// 唤醒
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SpeechService.WakeUpResponse WakeUp(global::SpeechService.WakeUpRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return WakeUp(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 唤醒
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SpeechService.WakeUpResponse WakeUp(global::SpeechService.WakeUpRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_WakeUp, null, options, request);
      }
      /// <summary>
      /// 唤醒
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SpeechService.WakeUpResponse> WakeUpAsync(global::SpeechService.WakeUpRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return WakeUpAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 唤醒
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SpeechService.WakeUpResponse> WakeUpAsync(global::SpeechService.WakeUpRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_WakeUp, null, options, request);
      }
      /// <summary>
      /// 休眠
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SpeechService.HibernateResponse Hibernate(global::SpeechService.HibernateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Hibernate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 休眠
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SpeechService.HibernateResponse Hibernate(global::SpeechService.HibernateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Hibernate, null, options, request);
      }
      /// <summary>
      /// 休眠
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SpeechService.HibernateResponse> HibernateAsync(global::SpeechService.HibernateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return HibernateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 休眠
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SpeechService.HibernateResponse> HibernateAsync(global::SpeechService.HibernateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Hibernate, null, options, request);
      }
      /// <summary>
      /// 设置语音音量
      /// v2.1.0
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SpeechService.SetVoiceVolumeResponse SetVoiceVolume(global::SpeechService.SetVoiceVolumeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetVoiceVolume(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 设置语音音量
      /// v2.1.0
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SpeechService.SetVoiceVolumeResponse SetVoiceVolume(global::SpeechService.SetVoiceVolumeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetVoiceVolume, null, options, request);
      }
      /// <summary>
      /// 设置语音音量
      /// v2.1.0
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SpeechService.SetVoiceVolumeResponse> SetVoiceVolumeAsync(global::SpeechService.SetVoiceVolumeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetVoiceVolumeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 设置语音音量
      /// v2.1.0
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SpeechService.SetVoiceVolumeResponse> SetVoiceVolumeAsync(global::SpeechService.SetVoiceVolumeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetVoiceVolume, null, options, request);
      }
      /// <summary>
      /// 查询语音音量
      /// v2.1.0
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SpeechService.GetVoiceVolumeResponse GetVoiceVolume(global::SpeechService.GetVoiceVolumeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetVoiceVolume(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 查询语音音量
      /// v2.1.0
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SpeechService.GetVoiceVolumeResponse GetVoiceVolume(global::SpeechService.GetVoiceVolumeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetVoiceVolume, null, options, request);
      }
      /// <summary>
      /// 查询语音音量
      /// v2.1.0
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SpeechService.GetVoiceVolumeResponse> GetVoiceVolumeAsync(global::SpeechService.GetVoiceVolumeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetVoiceVolumeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 查询语音音量
      /// v2.1.0
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SpeechService.GetVoiceVolumeResponse> GetVoiceVolumeAsync(global::SpeechService.GetVoiceVolumeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetVoiceVolume, null, options, request);
      }
      /// <summary>
      /// 配置参数(当前仅支持AIUI模块)
      /// v2.1.0
      /// AIUI模块参数配置参考: https://aiui.xfyun.cn/docs/access_docs (开发-评估板/量产板 => AIUI SDK => 参数配置)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SpeechService.SetParamsResponse SetParams(global::SpeechService.SetParamsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetParams(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 配置参数(当前仅支持AIUI模块)
      /// v2.1.0
      /// AIUI模块参数配置参考: https://aiui.xfyun.cn/docs/access_docs (开发-评估板/量产板 => AIUI SDK => 参数配置)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SpeechService.SetParamsResponse SetParams(global::SpeechService.SetParamsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetParams, null, options, request);
      }
      /// <summary>
      /// 配置参数(当前仅支持AIUI模块)
      /// v2.1.0
      /// AIUI模块参数配置参考: https://aiui.xfyun.cn/docs/access_docs (开发-评估板/量产板 => AIUI SDK => 参数配置)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SpeechService.SetParamsResponse> SetParamsAsync(global::SpeechService.SetParamsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetParamsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 配置参数(当前仅支持AIUI模块)
      /// v2.1.0
      /// AIUI模块参数配置参考: https://aiui.xfyun.cn/docs/access_docs (开发-评估板/量产板 => AIUI SDK => 参数配置)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SpeechService.SetParamsResponse> SetParamsAsync(global::SpeechService.SetParamsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetParams, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override SpeechServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new SpeechServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(SpeechServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_ListenSpeechEvent, serviceImpl.ListenSpeechEvent)
          .AddMethod(__Method_TextToSpeech, serviceImpl.TextToSpeech)
          .AddMethod(__Method_SpeechStop, serviceImpl.SpeechStop)
          .AddMethod(__Method_WakeUp, serviceImpl.WakeUp)
          .AddMethod(__Method_Hibernate, serviceImpl.Hibernate)
          .AddMethod(__Method_SetVoiceVolume, serviceImpl.SetVoiceVolume)
          .AddMethod(__Method_GetVoiceVolume, serviceImpl.GetVoiceVolume)
          .AddMethod(__Method_SetParams, serviceImpl.SetParams).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, SpeechServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_ListenSpeechEvent, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::SpeechService.ListenSpeechEventRequest, global::SpeechService.ListenSpeechEventResponse>(serviceImpl.ListenSpeechEvent));
      serviceBinder.AddMethod(__Method_TextToSpeech, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::SpeechService.TextToSpeechRequest, global::SpeechService.TextToSpeechResponse>(serviceImpl.TextToSpeech));
      serviceBinder.AddMethod(__Method_SpeechStop, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::SpeechService.SpeechStopRequest, global::SpeechService.SpeechStopResponse>(serviceImpl.SpeechStop));
      serviceBinder.AddMethod(__Method_WakeUp, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::SpeechService.WakeUpRequest, global::SpeechService.WakeUpResponse>(serviceImpl.WakeUp));
      serviceBinder.AddMethod(__Method_Hibernate, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::SpeechService.HibernateRequest, global::SpeechService.HibernateResponse>(serviceImpl.Hibernate));
      serviceBinder.AddMethod(__Method_SetVoiceVolume, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::SpeechService.SetVoiceVolumeRequest, global::SpeechService.SetVoiceVolumeResponse>(serviceImpl.SetVoiceVolume));
      serviceBinder.AddMethod(__Method_GetVoiceVolume, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::SpeechService.GetVoiceVolumeRequest, global::SpeechService.GetVoiceVolumeResponse>(serviceImpl.GetVoiceVolume));
      serviceBinder.AddMethod(__Method_SetParams, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::SpeechService.SetParamsRequest, global::SpeechService.SetParamsResponse>(serviceImpl.SetParams));
    }

  }
}
#endregion
