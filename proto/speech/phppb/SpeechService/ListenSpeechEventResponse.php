<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: speech.proto

namespace SpeechService;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;
use Google\Protobuf\Internal\GPBWrapperUtils;

/**
 * Generated from protobuf message <code>speechService.ListenSpeechEventResponse</code>
 */
class ListenSpeechEventResponse extends \Google\Protobuf\Internal\Message
{
    /**
     * Generated from protobuf field <code>.speechService.SpeechEvent event_type = 1;</code>
     */
    private $event_type = 0;
    protected $speech_event_oneof;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type int $event_type
     *     @type \SpeechService\WakeUpInfo $wake_up_info
     *     @type \SpeechService\VadInfo $vad_info
     *     @type \SpeechService\ResultInfo $result_info
     *     @type \SpeechService\ErrorInfo $error_info
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Speech::initOnce();
        parent::__construct($data);
    }

    /**
     * Generated from protobuf field <code>.speechService.SpeechEvent event_type = 1;</code>
     * @return int
     */
    public function getEventType()
    {
        return $this->event_type;
    }

    /**
     * Generated from protobuf field <code>.speechService.SpeechEvent event_type = 1;</code>
     * @param int $var
     * @return $this
     */
    public function setEventType($var)
    {
        GPBUtil::checkEnum($var, \SpeechService\SpeechEvent::class);
        $this->event_type = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>.speechService.WakeUpInfo wake_up_info = 2;</code>
     * @return \SpeechService\WakeUpInfo
     */
    public function getWakeUpInfo()
    {
        return $this->readOneof(2);
    }

    /**
     * Generated from protobuf field <code>.speechService.WakeUpInfo wake_up_info = 2;</code>
     * @param \SpeechService\WakeUpInfo $var
     * @return $this
     */
    public function setWakeUpInfo($var)
    {
        GPBUtil::checkMessage($var, \SpeechService\WakeUpInfo::class);
        $this->writeOneof(2, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.speechService.VadInfo vad_info = 3;</code>
     * @return \SpeechService\VadInfo
     */
    public function getVadInfo()
    {
        return $this->readOneof(3);
    }

    /**
     * Generated from protobuf field <code>.speechService.VadInfo vad_info = 3;</code>
     * @param \SpeechService\VadInfo $var
     * @return $this
     */
    public function setVadInfo($var)
    {
        GPBUtil::checkMessage($var, \SpeechService\VadInfo::class);
        $this->writeOneof(3, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.speechService.ResultInfo result_info = 4;</code>
     * @return \SpeechService\ResultInfo
     */
    public function getResultInfo()
    {
        return $this->readOneof(4);
    }

    /**
     * Generated from protobuf field <code>.speechService.ResultInfo result_info = 4;</code>
     * @param \SpeechService\ResultInfo $var
     * @return $this
     */
    public function setResultInfo($var)
    {
        GPBUtil::checkMessage($var, \SpeechService\ResultInfo::class);
        $this->writeOneof(4, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.speechService.ErrorInfo error_info = 5;</code>
     * @return \SpeechService\ErrorInfo
     */
    public function getErrorInfo()
    {
        return $this->readOneof(5);
    }

    /**
     * Generated from protobuf field <code>.speechService.ErrorInfo error_info = 5;</code>
     * @param \SpeechService\ErrorInfo $var
     * @return $this
     */
    public function setErrorInfo($var)
    {
        GPBUtil::checkMessage($var, \SpeechService\ErrorInfo::class);
        $this->writeOneof(5, $var);

        return $this;
    }

    /**
     * @return string
     */
    public function getSpeechEventOneof()
    {
        return $this->whichOneof("speech_event_oneof");
    }

}

