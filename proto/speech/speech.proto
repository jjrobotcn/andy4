syntax = "proto3";

package speechService;

option go_package = "speechpb";

option java_package = "com.jjrobot.andy4.speechpb";
option java_outer_classname = "SpeechServicePB";

service SpeechService {
    // ListenSpeechEvent方法为监听语音事件变更状态流, 具体类型参考: SpeechEvent
    // ListenSpeechEventRequest中可配置相关状态消息过滤,
    rpc ListenSpeechEvent (ListenSpeechEventRequest) returns (stream ListenSpeechEventResponse) {}

    // TextToSpeech(TTS)方法实现文本输入语音合成自动音频输出
    rpc TextToSpeech (TextToSpeechRequest) returns (TextToSpeechResponse) {}

    // SpeechStop方法实现打断语音功能
    rpc SpeechStop (SpeechStopRequest) returns (SpeechStopResponse) {}

    // 唤醒
    rpc WakeUp (WakeUpRequest) returns (WakeUpResponse) {}

    // 休眠
    rpc Hibernate (HibernateRequest) returns (HibernateResponse) {}

    // 设置语音音量
    // v2.1.0
    rpc SetVoiceVolume(SetVoiceVolumeRequest) returns (SetVoiceVolumeResponse) {}

    // 查询语音音量
    // v2.1.0
    rpc GetVoiceVolume(GetVoiceVolumeRequest) returns (GetVoiceVolumeResponse) {}

    // 配置参数(当前仅支持AIUI模块)
    // v2.1.0
    // AIUI模块参数配置参考: https://aiui.xfyun.cn/docs/access_docs (开发-评估板/量产板 => AIUI SDK => 参数配置)
    rpc SetParams(SetParamsRequest) returns (SetParamsResponse) {}
}

enum SpeechEvent {
    UNKNOWN_EVENT = 0; // 零值
    WAKE_UP = 1; // 唤醒
    HIBERNATE = 2; // 休眠
    ERROR = 3; // 识别错误
    VAD = 4; // Voice activity detection 语音活性检测
    RESULT = 5; // 识别结果
    TTS_START = 6; // 文本转音频开始
    TTS_END = 7; // 文本转音频结束
}

// 错误类型
enum ErrorType {
    UNKNOWN_ERROR_TYPE = 0;
    ERR_TIMEOUT = 1; // 超时
    ERR_PARAMS = 2; // 参数错误
    ERR_AUTH = 3; // 授权错误
    ERR_NETWORK = 4; // 网络错误
    ERR_NOT_READY = 5; // 未就绪错误
    ERR_CONFIG = 6; // 配置错误
}

message ErrorInfo {
    ErrorType error_type = 1; // 错误类型
    string info = 2; // 错误描述（设备提供， 可能为空）
    string code = 3; // 错误码（设备提供， 可能为空）
}

// 语音检测
enum VadType {
    UNKNOWM_VAD_TYPE = 0;
    START = 1; // 开始
    END = 2; // 结束
    TIMEOUT = 3; // 检测超时
    VOLUME_CHANGE = 4; // 音量改变
}
message VadInfo {
    VadType vad_type = 1;
    uint32 vol = 2; // 检测音量(VadType == VOLUME_CHANGE时此值有效) 0-100
}

// 唤醒相关数据
message WakeUpInfo {
    int32 angle = 1; // 唤醒角度, 麦克风朝向用户自身左(0)至右(180), 非语音唤醒为-1
    int32 beam = 2; // 拾音波束号, 非语音唤醒为-1
}

// 识别结果
message ResultInfo {
    repeated string words = 1; // 分词结果
    bool sentence_complete = 2; // 是否为完整句
}

message ListenSpeechEventRequest {
    // 是否获取vad状态传入语音音量动态变化
    // 启用与否不影响获取Vad_START, Vad_END
    // 仅影响Vad_VOLUME_CHANGE
    bool with_vad_vol = 1;
}

message ListenSpeechEventResponse {
    SpeechEvent event_type = 1;
    oneof speech_event_oneof {
        WakeUpInfo wake_up_info = 2;
        VadInfo vad_info = 3;
        ResultInfo result_info = 4;
        ErrorInfo error_info = 5;
    }
}

message TextToSpeechRequest {
    string text = 1;
}

message TextToSpeechResponse {
}

message SpeechStopRequest {
}

message SpeechStopResponse {
}

message WakeUpRequest {
    string after_wake_up_speech_text = 1; // 唤醒后语音文本
}

message WakeUpResponse {
}

message HibernateRequest {
}

message HibernateResponse {
}

// 音量信息
message VoiceVolumeInfo {
    // 音量值 0-10
    // aiui模块硬件限制值: 2-10
    uint32 vol = 1;
}

message SetVoiceVolumeRequest {
    VoiceVolumeInfo voice_volume_info = 1;
}

message SetVoiceVolumeResponse {
    VoiceVolumeInfo voice_volume_info = 1;
}

message GetVoiceVolumeRequest {
}

message GetVoiceVolumeResponse {
    VoiceVolumeInfo voice_volume_info = 1;
}

message SetParamsRequest {
    bytes params = 1;
}

message SetParamsResponse {
}
