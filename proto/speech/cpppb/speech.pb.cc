// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: speech.proto

#include "speech.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_speech_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ErrorInfo_speech_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_speech_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ResultInfo_speech_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_speech_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_VadInfo_speech_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_speech_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_VoiceVolumeInfo_speech_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_speech_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_WakeUpInfo_speech_2eproto;
namespace speechService {
class ErrorInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ErrorInfo> _instance;
} _ErrorInfo_default_instance_;
class VadInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VadInfo> _instance;
} _VadInfo_default_instance_;
class WakeUpInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WakeUpInfo> _instance;
} _WakeUpInfo_default_instance_;
class ResultInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResultInfo> _instance;
} _ResultInfo_default_instance_;
class ListenSpeechEventRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ListenSpeechEventRequest> _instance;
} _ListenSpeechEventRequest_default_instance_;
class ListenSpeechEventResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ListenSpeechEventResponse> _instance;
  const ::speechService::WakeUpInfo* wake_up_info_;
  const ::speechService::VadInfo* vad_info_;
  const ::speechService::ResultInfo* result_info_;
  const ::speechService::ErrorInfo* error_info_;
} _ListenSpeechEventResponse_default_instance_;
class TextToSpeechRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TextToSpeechRequest> _instance;
} _TextToSpeechRequest_default_instance_;
class TextToSpeechResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TextToSpeechResponse> _instance;
} _TextToSpeechResponse_default_instance_;
class SpeechStopRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SpeechStopRequest> _instance;
} _SpeechStopRequest_default_instance_;
class SpeechStopResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SpeechStopResponse> _instance;
} _SpeechStopResponse_default_instance_;
class WakeUpRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WakeUpRequest> _instance;
} _WakeUpRequest_default_instance_;
class WakeUpResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WakeUpResponse> _instance;
} _WakeUpResponse_default_instance_;
class HibernateRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HibernateRequest> _instance;
} _HibernateRequest_default_instance_;
class HibernateResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HibernateResponse> _instance;
} _HibernateResponse_default_instance_;
class VoiceVolumeInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VoiceVolumeInfo> _instance;
} _VoiceVolumeInfo_default_instance_;
class SetVoiceVolumeRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SetVoiceVolumeRequest> _instance;
} _SetVoiceVolumeRequest_default_instance_;
class SetVoiceVolumeResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SetVoiceVolumeResponse> _instance;
} _SetVoiceVolumeResponse_default_instance_;
class GetVoiceVolumeRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetVoiceVolumeRequest> _instance;
} _GetVoiceVolumeRequest_default_instance_;
class GetVoiceVolumeResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetVoiceVolumeResponse> _instance;
} _GetVoiceVolumeResponse_default_instance_;
class SetParamsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SetParamsRequest> _instance;
} _SetParamsRequest_default_instance_;
class SetParamsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SetParamsResponse> _instance;
} _SetParamsResponse_default_instance_;
}  // namespace speechService
static void InitDefaultsErrorInfo_speech_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::speechService::_ErrorInfo_default_instance_;
    new (ptr) ::speechService::ErrorInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speechService::ErrorInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ErrorInfo_speech_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsErrorInfo_speech_2eproto}, {}};

static void InitDefaultsVadInfo_speech_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::speechService::_VadInfo_default_instance_;
    new (ptr) ::speechService::VadInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speechService::VadInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_VadInfo_speech_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsVadInfo_speech_2eproto}, {}};

static void InitDefaultsWakeUpInfo_speech_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::speechService::_WakeUpInfo_default_instance_;
    new (ptr) ::speechService::WakeUpInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speechService::WakeUpInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_WakeUpInfo_speech_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsWakeUpInfo_speech_2eproto}, {}};

static void InitDefaultsResultInfo_speech_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::speechService::_ResultInfo_default_instance_;
    new (ptr) ::speechService::ResultInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speechService::ResultInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ResultInfo_speech_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsResultInfo_speech_2eproto}, {}};

static void InitDefaultsListenSpeechEventRequest_speech_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::speechService::_ListenSpeechEventRequest_default_instance_;
    new (ptr) ::speechService::ListenSpeechEventRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speechService::ListenSpeechEventRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ListenSpeechEventRequest_speech_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsListenSpeechEventRequest_speech_2eproto}, {}};

static void InitDefaultsListenSpeechEventResponse_speech_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::speechService::_ListenSpeechEventResponse_default_instance_;
    new (ptr) ::speechService::ListenSpeechEventResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speechService::ListenSpeechEventResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_ListenSpeechEventResponse_speech_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsListenSpeechEventResponse_speech_2eproto}, {
      &scc_info_WakeUpInfo_speech_2eproto.base,
      &scc_info_VadInfo_speech_2eproto.base,
      &scc_info_ResultInfo_speech_2eproto.base,
      &scc_info_ErrorInfo_speech_2eproto.base,}};

static void InitDefaultsTextToSpeechRequest_speech_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::speechService::_TextToSpeechRequest_default_instance_;
    new (ptr) ::speechService::TextToSpeechRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speechService::TextToSpeechRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TextToSpeechRequest_speech_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTextToSpeechRequest_speech_2eproto}, {}};

static void InitDefaultsTextToSpeechResponse_speech_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::speechService::_TextToSpeechResponse_default_instance_;
    new (ptr) ::speechService::TextToSpeechResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speechService::TextToSpeechResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TextToSpeechResponse_speech_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTextToSpeechResponse_speech_2eproto}, {}};

static void InitDefaultsSpeechStopRequest_speech_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::speechService::_SpeechStopRequest_default_instance_;
    new (ptr) ::speechService::SpeechStopRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speechService::SpeechStopRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SpeechStopRequest_speech_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSpeechStopRequest_speech_2eproto}, {}};

static void InitDefaultsSpeechStopResponse_speech_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::speechService::_SpeechStopResponse_default_instance_;
    new (ptr) ::speechService::SpeechStopResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speechService::SpeechStopResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SpeechStopResponse_speech_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSpeechStopResponse_speech_2eproto}, {}};

static void InitDefaultsWakeUpRequest_speech_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::speechService::_WakeUpRequest_default_instance_;
    new (ptr) ::speechService::WakeUpRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speechService::WakeUpRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_WakeUpRequest_speech_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsWakeUpRequest_speech_2eproto}, {}};

static void InitDefaultsWakeUpResponse_speech_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::speechService::_WakeUpResponse_default_instance_;
    new (ptr) ::speechService::WakeUpResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speechService::WakeUpResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_WakeUpResponse_speech_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsWakeUpResponse_speech_2eproto}, {}};

static void InitDefaultsHibernateRequest_speech_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::speechService::_HibernateRequest_default_instance_;
    new (ptr) ::speechService::HibernateRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speechService::HibernateRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_HibernateRequest_speech_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHibernateRequest_speech_2eproto}, {}};

static void InitDefaultsHibernateResponse_speech_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::speechService::_HibernateResponse_default_instance_;
    new (ptr) ::speechService::HibernateResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speechService::HibernateResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_HibernateResponse_speech_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHibernateResponse_speech_2eproto}, {}};

static void InitDefaultsVoiceVolumeInfo_speech_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::speechService::_VoiceVolumeInfo_default_instance_;
    new (ptr) ::speechService::VoiceVolumeInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speechService::VoiceVolumeInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_VoiceVolumeInfo_speech_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsVoiceVolumeInfo_speech_2eproto}, {}};

static void InitDefaultsSetVoiceVolumeRequest_speech_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::speechService::_SetVoiceVolumeRequest_default_instance_;
    new (ptr) ::speechService::SetVoiceVolumeRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speechService::SetVoiceVolumeRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SetVoiceVolumeRequest_speech_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSetVoiceVolumeRequest_speech_2eproto}, {
      &scc_info_VoiceVolumeInfo_speech_2eproto.base,}};

static void InitDefaultsSetVoiceVolumeResponse_speech_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::speechService::_SetVoiceVolumeResponse_default_instance_;
    new (ptr) ::speechService::SetVoiceVolumeResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speechService::SetVoiceVolumeResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SetVoiceVolumeResponse_speech_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSetVoiceVolumeResponse_speech_2eproto}, {
      &scc_info_VoiceVolumeInfo_speech_2eproto.base,}};

static void InitDefaultsGetVoiceVolumeRequest_speech_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::speechService::_GetVoiceVolumeRequest_default_instance_;
    new (ptr) ::speechService::GetVoiceVolumeRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speechService::GetVoiceVolumeRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetVoiceVolumeRequest_speech_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetVoiceVolumeRequest_speech_2eproto}, {}};

static void InitDefaultsGetVoiceVolumeResponse_speech_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::speechService::_GetVoiceVolumeResponse_default_instance_;
    new (ptr) ::speechService::GetVoiceVolumeResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speechService::GetVoiceVolumeResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GetVoiceVolumeResponse_speech_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGetVoiceVolumeResponse_speech_2eproto}, {
      &scc_info_VoiceVolumeInfo_speech_2eproto.base,}};

static void InitDefaultsSetParamsRequest_speech_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::speechService::_SetParamsRequest_default_instance_;
    new (ptr) ::speechService::SetParamsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speechService::SetParamsRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SetParamsRequest_speech_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSetParamsRequest_speech_2eproto}, {}};

static void InitDefaultsSetParamsResponse_speech_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::speechService::_SetParamsResponse_default_instance_;
    new (ptr) ::speechService::SetParamsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speechService::SetParamsResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SetParamsResponse_speech_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSetParamsResponse_speech_2eproto}, {}};

void InitDefaults_speech_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_ErrorInfo_speech_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_VadInfo_speech_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WakeUpInfo_speech_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ResultInfo_speech_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ListenSpeechEventRequest_speech_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ListenSpeechEventResponse_speech_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TextToSpeechRequest_speech_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TextToSpeechResponse_speech_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SpeechStopRequest_speech_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SpeechStopResponse_speech_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WakeUpRequest_speech_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WakeUpResponse_speech_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HibernateRequest_speech_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HibernateResponse_speech_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_VoiceVolumeInfo_speech_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SetVoiceVolumeRequest_speech_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SetVoiceVolumeResponse_speech_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetVoiceVolumeRequest_speech_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetVoiceVolumeResponse_speech_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SetParamsRequest_speech_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SetParamsResponse_speech_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_speech_2eproto[21];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_speech_2eproto[3];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_speech_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_speech_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechService::ErrorInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechService::ErrorInfo, error_type_),
  PROTOBUF_FIELD_OFFSET(::speechService::ErrorInfo, info_),
  PROTOBUF_FIELD_OFFSET(::speechService::ErrorInfo, code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechService::VadInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechService::VadInfo, vad_type_),
  PROTOBUF_FIELD_OFFSET(::speechService::VadInfo, vol_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechService::WakeUpInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechService::WakeUpInfo, angle_),
  PROTOBUF_FIELD_OFFSET(::speechService::WakeUpInfo, beam_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechService::ResultInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechService::ResultInfo, words_),
  PROTOBUF_FIELD_OFFSET(::speechService::ResultInfo, sentence_complete_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechService::ListenSpeechEventRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechService::ListenSpeechEventRequest, with_vad_vol_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechService::ListenSpeechEventResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::speechService::ListenSpeechEventResponse, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechService::ListenSpeechEventResponse, event_type_),
  offsetof(::speechService::ListenSpeechEventResponseDefaultTypeInternal, wake_up_info_),
  offsetof(::speechService::ListenSpeechEventResponseDefaultTypeInternal, vad_info_),
  offsetof(::speechService::ListenSpeechEventResponseDefaultTypeInternal, result_info_),
  offsetof(::speechService::ListenSpeechEventResponseDefaultTypeInternal, error_info_),
  PROTOBUF_FIELD_OFFSET(::speechService::ListenSpeechEventResponse, speech_event_oneof_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechService::TextToSpeechRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechService::TextToSpeechRequest, text_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechService::TextToSpeechResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechService::SpeechStopRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechService::SpeechStopResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechService::WakeUpRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechService::WakeUpRequest, after_wake_up_speech_text_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechService::WakeUpResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechService::HibernateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechService::HibernateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechService::VoiceVolumeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechService::VoiceVolumeInfo, vol_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechService::SetVoiceVolumeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechService::SetVoiceVolumeRequest, voice_volume_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechService::SetVoiceVolumeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechService::SetVoiceVolumeResponse, voice_volume_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechService::GetVoiceVolumeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechService::GetVoiceVolumeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechService::GetVoiceVolumeResponse, voice_volume_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechService::SetParamsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechService::SetParamsRequest, params_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechService::SetParamsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::speechService::ErrorInfo)},
  { 8, -1, sizeof(::speechService::VadInfo)},
  { 15, -1, sizeof(::speechService::WakeUpInfo)},
  { 22, -1, sizeof(::speechService::ResultInfo)},
  { 29, -1, sizeof(::speechService::ListenSpeechEventRequest)},
  { 35, -1, sizeof(::speechService::ListenSpeechEventResponse)},
  { 46, -1, sizeof(::speechService::TextToSpeechRequest)},
  { 52, -1, sizeof(::speechService::TextToSpeechResponse)},
  { 57, -1, sizeof(::speechService::SpeechStopRequest)},
  { 62, -1, sizeof(::speechService::SpeechStopResponse)},
  { 67, -1, sizeof(::speechService::WakeUpRequest)},
  { 73, -1, sizeof(::speechService::WakeUpResponse)},
  { 78, -1, sizeof(::speechService::HibernateRequest)},
  { 83, -1, sizeof(::speechService::HibernateResponse)},
  { 88, -1, sizeof(::speechService::VoiceVolumeInfo)},
  { 94, -1, sizeof(::speechService::SetVoiceVolumeRequest)},
  { 100, -1, sizeof(::speechService::SetVoiceVolumeResponse)},
  { 106, -1, sizeof(::speechService::GetVoiceVolumeRequest)},
  { 111, -1, sizeof(::speechService::GetVoiceVolumeResponse)},
  { 117, -1, sizeof(::speechService::SetParamsRequest)},
  { 123, -1, sizeof(::speechService::SetParamsResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::speechService::_ErrorInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::speechService::_VadInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::speechService::_WakeUpInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::speechService::_ResultInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::speechService::_ListenSpeechEventRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::speechService::_ListenSpeechEventResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::speechService::_TextToSpeechRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::speechService::_TextToSpeechResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::speechService::_SpeechStopRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::speechService::_SpeechStopResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::speechService::_WakeUpRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::speechService::_WakeUpResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::speechService::_HibernateRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::speechService::_HibernateResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::speechService::_VoiceVolumeInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::speechService::_SetVoiceVolumeRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::speechService::_SetVoiceVolumeResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::speechService::_GetVoiceVolumeRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::speechService::_GetVoiceVolumeResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::speechService::_SetParamsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::speechService::_SetParamsResponse_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_speech_2eproto = {
  {}, AddDescriptors_speech_2eproto, "speech.proto", schemas,
  file_default_instances, TableStruct_speech_2eproto::offsets,
  file_level_metadata_speech_2eproto, 21, file_level_enum_descriptors_speech_2eproto, file_level_service_descriptors_speech_2eproto,
};

const char descriptor_table_protodef_speech_2eproto[] =
  "\n\014speech.proto\022\rspeechService\032\034google/ap"
  "i/annotations.proto\"U\n\tErrorInfo\022,\n\nerro"
  "r_type\030\001 \001(\0162\030.speechService.ErrorType\022\014"
  "\n\004info\030\002 \001(\t\022\014\n\004code\030\003 \001(\t\"@\n\007VadInfo\022(\n"
  "\010vad_type\030\001 \001(\0162\026.speechService.VadType\022"
  "\013\n\003vol\030\002 \001(\r\")\n\nWakeUpInfo\022\r\n\005angle\030\001 \001("
  "\005\022\014\n\004beam\030\002 \001(\005\"6\n\nResultInfo\022\r\n\005words\030\001"
  " \003(\t\022\031\n\021sentence_complete\030\002 \001(\010\"0\n\030Liste"
  "nSpeechEventRequest\022\024\n\014with_vad_vol\030\001 \001("
  "\010\"\242\002\n\031ListenSpeechEventResponse\022.\n\nevent"
  "_type\030\001 \001(\0162\032.speechService.SpeechEvent\022"
  "1\n\014wake_up_info\030\002 \001(\0132\031.speechService.Wa"
  "keUpInfoH\000\022*\n\010vad_info\030\003 \001(\0132\026.speechSer"
  "vice.VadInfoH\000\0220\n\013result_info\030\004 \001(\0132\031.sp"
  "eechService.ResultInfoH\000\022.\n\nerror_info\030\005"
  " \001(\0132\030.speechService.ErrorInfoH\000B\024\n\022spee"
  "ch_event_oneof\"#\n\023TextToSpeechRequest\022\014\n"
  "\004text\030\001 \001(\t\"\026\n\024TextToSpeechResponse\"\023\n\021S"
  "peechStopRequest\"\024\n\022SpeechStopResponse\"2"
  "\n\rWakeUpRequest\022!\n\031after_wake_up_speech_"
  "text\030\001 \001(\t\"\020\n\016WakeUpResponse\"\022\n\020Hibernat"
  "eRequest\"\023\n\021HibernateResponse\"\036\n\017VoiceVo"
  "lumeInfo\022\013\n\003vol\030\001 \001(\r\"R\n\025SetVoiceVolumeR"
  "equest\0229\n\021voice_volume_info\030\001 \001(\0132\036.spee"
  "chService.VoiceVolumeInfo\"S\n\026SetVoiceVol"
  "umeResponse\0229\n\021voice_volume_info\030\001 \001(\0132\036"
  ".speechService.VoiceVolumeInfo\"\027\n\025GetVoi"
  "ceVolumeRequest\"S\n\026GetVoiceVolumeRespons"
  "e\0229\n\021voice_volume_info\030\001 \001(\0132\036.speechSer"
  "vice.VoiceVolumeInfo\"\"\n\020SetParamsRequest"
  "\022\016\n\006params\030\001 \001(\014\"\023\n\021SetParamsResponse*x\n"
  "\013SpeechEvent\022\021\n\rUNKNOWN_EVENT\020\000\022\013\n\007WAKE_"
  "UP\020\001\022\r\n\tHIBERNATE\020\002\022\t\n\005ERROR\020\003\022\007\n\003VAD\020\004\022"
  "\n\n\006RESULT\020\005\022\r\n\tTTS_START\020\006\022\013\n\007TTS_END\020\007*"
  "\206\001\n\tErrorType\022\026\n\022UNKNOWN_ERROR_TYPE\020\000\022\017\n"
  "\013ERR_TIMEOUT\020\001\022\016\n\nERR_PARAMS\020\002\022\014\n\010ERR_AU"
  "TH\020\003\022\017\n\013ERR_NETWORK\020\004\022\021\n\rERR_NOT_READY\020\005"
  "\022\016\n\nERR_CONFIG\020\006*S\n\007VadType\022\024\n\020UNKNOWM_V"
  "AD_TYPE\020\000\022\t\n\005START\020\001\022\007\n\003END\020\002\022\013\n\007TIMEOUT"
  "\020\003\022\021\n\rVOLUME_CHANGE\020\0042\335\007\n\rSpeechService\022"
  "j\n\021ListenSpeechEvent\022\'.speechService.Lis"
  "tenSpeechEventRequest\032(.speechService.Li"
  "stenSpeechEventResponse\"\0000\001\022\201\001\n\014TextToSp"
  "eech\022\".speechService.TextToSpeechRequest"
  "\032#.speechService.TextToSpeechResponse\"(\202"
  "\323\344\223\002\"\"\035/api/v2/speech/text_to_speech:\001*\022"
  "u\n\nSpeechStop\022 .speechService.SpeechStop"
  "Request\032!.speechService.SpeechStopRespon"
  "se\"\"\202\323\344\223\002\034\"\032/api/v2/speech/speech_stop\022h"
  "\n\006WakeUp\022\034.speechService.WakeUpRequest\032\035"
  ".speechService.WakeUpResponse\"!\202\323\344\223\002\033\"\026/"
  "api/v2/speech/wake_up:\001*\022p\n\tHibernate\022\037."
  "speechService.HibernateRequest\032 .speechS"
  "ervice.HibernateResponse\" \202\323\344\223\002\032\"\030/api/v"
  "2/speech/hibernate\022\211\001\n\016SetVoiceVolume\022$."
  "speechService.SetVoiceVolumeRequest\032%.sp"
  "eechService.SetVoiceVolumeResponse\"*\202\323\344\223"
  "\002$\"\037/api/v2/speech/set_voice_volume:\001*\022\206"
  "\001\n\016GetVoiceVolume\022$.speechService.GetVoi"
  "ceVolumeRequest\032%.speechService.GetVoice"
  "VolumeResponse\"\'\202\323\344\223\002!\"\037/api/v2/speech/g"
  "et_voice_volume\022t\n\tSetParams\022\037.speechSer"
  "vice.SetParamsRequest\032 .speechService.Se"
  "tParamsResponse\"$\202\323\344\223\002\036\"\031/api/v2/speech/"
  "set_params:\001*b\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_speech_2eproto = {
  false, InitDefaults_speech_2eproto, 
  descriptor_table_protodef_speech_2eproto,
  "speech.proto", &assign_descriptors_table_speech_2eproto, 2581,
};

void AddDescriptors_speech_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
    ::AddDescriptors_google_2fapi_2fannotations_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_speech_2eproto, deps, 1);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_speech_2eproto = []() { AddDescriptors_speech_2eproto(); return true; }();
namespace speechService {
const ::google::protobuf::EnumDescriptor* SpeechEvent_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_speech_2eproto);
  return file_level_enum_descriptors_speech_2eproto[0];
}
bool SpeechEvent_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ErrorType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_speech_2eproto);
  return file_level_enum_descriptors_speech_2eproto[1];
}
bool ErrorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* VadType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_speech_2eproto);
  return file_level_enum_descriptors_speech_2eproto[2];
}
bool VadType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void ErrorInfo::InitAsDefaultInstance() {
}
class ErrorInfo::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ErrorInfo::kErrorTypeFieldNumber;
const int ErrorInfo::kInfoFieldNumber;
const int ErrorInfo::kCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ErrorInfo::ErrorInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:speechService.ErrorInfo)
}
ErrorInfo::ErrorInfo(const ErrorInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.info().size() > 0) {
    info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.info_);
  }
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.code().size() > 0) {
    code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  error_type_ = from.error_type_;
  // @@protoc_insertion_point(copy_constructor:speechService.ErrorInfo)
}

void ErrorInfo::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ErrorInfo_speech_2eproto.base);
  info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_type_ = 0;
}

ErrorInfo::~ErrorInfo() {
  // @@protoc_insertion_point(destructor:speechService.ErrorInfo)
  SharedDtor();
}

void ErrorInfo::SharedDtor() {
  info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ErrorInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ErrorInfo& ErrorInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ErrorInfo_speech_2eproto.base);
  return *internal_default_instance();
}


void ErrorInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:speechService.ErrorInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ErrorInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ErrorInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .speechService.ErrorType error_type = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_error_type(static_cast<::speechService::ErrorType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string info = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("speechService.ErrorInfo.info");
        object = msg->mutable_info();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string code = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("speechService.ErrorInfo.code");
        object = msg->mutable_code();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ErrorInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:speechService.ErrorInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .speechService.ErrorType error_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_error_type(static_cast< ::speechService::ErrorType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_info()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->info().data(), static_cast<int>(this->info().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "speechService.ErrorInfo.info"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string code = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->code().data(), static_cast<int>(this->code().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "speechService.ErrorInfo.code"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:speechService.ErrorInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:speechService.ErrorInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ErrorInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:speechService.ErrorInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .speechService.ErrorType error_type = 1;
  if (this->error_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->error_type(), output);
  }

  // string info = 2;
  if (this->info().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->info().data(), static_cast<int>(this->info().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "speechService.ErrorInfo.info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->info(), output);
  }

  // string code = 3;
  if (this->code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "speechService.ErrorInfo.code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->code(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:speechService.ErrorInfo)
}

::google::protobuf::uint8* ErrorInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechService.ErrorInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .speechService.ErrorType error_type = 1;
  if (this->error_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->error_type(), target);
  }

  // string info = 2;
  if (this->info().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->info().data(), static_cast<int>(this->info().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "speechService.ErrorInfo.info");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->info(), target);
  }

  // string code = 3;
  if (this->code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "speechService.ErrorInfo.code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->code(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechService.ErrorInfo)
  return target;
}

size_t ErrorInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechService.ErrorInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string info = 2;
  if (this->info().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->info());
  }

  // string code = 3;
  if (this->code().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());
  }

  // .speechService.ErrorType error_type = 1;
  if (this->error_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ErrorInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speechService.ErrorInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ErrorInfo* source =
      ::google::protobuf::DynamicCastToGenerated<ErrorInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speechService.ErrorInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speechService.ErrorInfo)
    MergeFrom(*source);
  }
}

void ErrorInfo::MergeFrom(const ErrorInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechService.ErrorInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.info().size() > 0) {

    info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.info_);
  }
  if (from.code().size() > 0) {

    code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  if (from.error_type() != 0) {
    set_error_type(from.error_type());
  }
}

void ErrorInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speechService.ErrorInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ErrorInfo::CopyFrom(const ErrorInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechService.ErrorInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ErrorInfo::IsInitialized() const {
  return true;
}

void ErrorInfo::Swap(ErrorInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ErrorInfo::InternalSwap(ErrorInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  info_.Swap(&other->info_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  code_.Swap(&other->code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(error_type_, other->error_type_);
}

::google::protobuf::Metadata ErrorInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_speech_2eproto);
  return ::file_level_metadata_speech_2eproto[kIndexInFileMessages];
}


// ===================================================================

void VadInfo::InitAsDefaultInstance() {
}
class VadInfo::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VadInfo::kVadTypeFieldNumber;
const int VadInfo::kVolFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VadInfo::VadInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:speechService.VadInfo)
}
VadInfo::VadInfo(const VadInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&vad_type_, &from.vad_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&vol_) -
    reinterpret_cast<char*>(&vad_type_)) + sizeof(vol_));
  // @@protoc_insertion_point(copy_constructor:speechService.VadInfo)
}

void VadInfo::SharedCtor() {
  ::memset(&vad_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vol_) -
      reinterpret_cast<char*>(&vad_type_)) + sizeof(vol_));
}

VadInfo::~VadInfo() {
  // @@protoc_insertion_point(destructor:speechService.VadInfo)
  SharedDtor();
}

void VadInfo::SharedDtor() {
}

void VadInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VadInfo& VadInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_VadInfo_speech_2eproto.base);
  return *internal_default_instance();
}


void VadInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:speechService.VadInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&vad_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vol_) -
      reinterpret_cast<char*>(&vad_type_)) + sizeof(vol_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* VadInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<VadInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .speechService.VadType vad_type = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_vad_type(static_cast<::speechService::VadType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 vol = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_vol(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool VadInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:speechService.VadInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .speechService.VadType vad_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_vad_type(static_cast< ::speechService::VadType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 vol = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vol_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:speechService.VadInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:speechService.VadInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void VadInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:speechService.VadInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .speechService.VadType vad_type = 1;
  if (this->vad_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->vad_type(), output);
  }

  // uint32 vol = 2;
  if (this->vol() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->vol(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:speechService.VadInfo)
}

::google::protobuf::uint8* VadInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechService.VadInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .speechService.VadType vad_type = 1;
  if (this->vad_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->vad_type(), target);
  }

  // uint32 vol = 2;
  if (this->vol() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->vol(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechService.VadInfo)
  return target;
}

size_t VadInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechService.VadInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .speechService.VadType vad_type = 1;
  if (this->vad_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->vad_type());
  }

  // uint32 vol = 2;
  if (this->vol() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->vol());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VadInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speechService.VadInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const VadInfo* source =
      ::google::protobuf::DynamicCastToGenerated<VadInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speechService.VadInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speechService.VadInfo)
    MergeFrom(*source);
  }
}

void VadInfo::MergeFrom(const VadInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechService.VadInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vad_type() != 0) {
    set_vad_type(from.vad_type());
  }
  if (from.vol() != 0) {
    set_vol(from.vol());
  }
}

void VadInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speechService.VadInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VadInfo::CopyFrom(const VadInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechService.VadInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VadInfo::IsInitialized() const {
  return true;
}

void VadInfo::Swap(VadInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VadInfo::InternalSwap(VadInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(vad_type_, other->vad_type_);
  swap(vol_, other->vol_);
}

::google::protobuf::Metadata VadInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_speech_2eproto);
  return ::file_level_metadata_speech_2eproto[kIndexInFileMessages];
}


// ===================================================================

void WakeUpInfo::InitAsDefaultInstance() {
}
class WakeUpInfo::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WakeUpInfo::kAngleFieldNumber;
const int WakeUpInfo::kBeamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WakeUpInfo::WakeUpInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:speechService.WakeUpInfo)
}
WakeUpInfo::WakeUpInfo(const WakeUpInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&angle_, &from.angle_,
    static_cast<size_t>(reinterpret_cast<char*>(&beam_) -
    reinterpret_cast<char*>(&angle_)) + sizeof(beam_));
  // @@protoc_insertion_point(copy_constructor:speechService.WakeUpInfo)
}

void WakeUpInfo::SharedCtor() {
  ::memset(&angle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&beam_) -
      reinterpret_cast<char*>(&angle_)) + sizeof(beam_));
}

WakeUpInfo::~WakeUpInfo() {
  // @@protoc_insertion_point(destructor:speechService.WakeUpInfo)
  SharedDtor();
}

void WakeUpInfo::SharedDtor() {
}

void WakeUpInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WakeUpInfo& WakeUpInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_WakeUpInfo_speech_2eproto.base);
  return *internal_default_instance();
}


void WakeUpInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:speechService.WakeUpInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&angle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&beam_) -
      reinterpret_cast<char*>(&angle_)) + sizeof(beam_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WakeUpInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<WakeUpInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 angle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_angle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 beam = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_beam(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WakeUpInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:speechService.WakeUpInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 angle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 beam = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &beam_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:speechService.WakeUpInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:speechService.WakeUpInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WakeUpInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:speechService.WakeUpInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 angle = 1;
  if (this->angle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->angle(), output);
  }

  // int32 beam = 2;
  if (this->beam() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->beam(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:speechService.WakeUpInfo)
}

::google::protobuf::uint8* WakeUpInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechService.WakeUpInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 angle = 1;
  if (this->angle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->angle(), target);
  }

  // int32 beam = 2;
  if (this->beam() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->beam(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechService.WakeUpInfo)
  return target;
}

size_t WakeUpInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechService.WakeUpInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 angle = 1;
  if (this->angle() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->angle());
  }

  // int32 beam = 2;
  if (this->beam() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->beam());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WakeUpInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speechService.WakeUpInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const WakeUpInfo* source =
      ::google::protobuf::DynamicCastToGenerated<WakeUpInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speechService.WakeUpInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speechService.WakeUpInfo)
    MergeFrom(*source);
  }
}

void WakeUpInfo::MergeFrom(const WakeUpInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechService.WakeUpInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.angle() != 0) {
    set_angle(from.angle());
  }
  if (from.beam() != 0) {
    set_beam(from.beam());
  }
}

void WakeUpInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speechService.WakeUpInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WakeUpInfo::CopyFrom(const WakeUpInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechService.WakeUpInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WakeUpInfo::IsInitialized() const {
  return true;
}

void WakeUpInfo::Swap(WakeUpInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WakeUpInfo::InternalSwap(WakeUpInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(angle_, other->angle_);
  swap(beam_, other->beam_);
}

::google::protobuf::Metadata WakeUpInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_speech_2eproto);
  return ::file_level_metadata_speech_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ResultInfo::InitAsDefaultInstance() {
}
class ResultInfo::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResultInfo::kWordsFieldNumber;
const int ResultInfo::kSentenceCompleteFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResultInfo::ResultInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:speechService.ResultInfo)
}
ResultInfo::ResultInfo(const ResultInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      words_(from.words_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sentence_complete_ = from.sentence_complete_;
  // @@protoc_insertion_point(copy_constructor:speechService.ResultInfo)
}

void ResultInfo::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ResultInfo_speech_2eproto.base);
  sentence_complete_ = false;
}

ResultInfo::~ResultInfo() {
  // @@protoc_insertion_point(destructor:speechService.ResultInfo)
  SharedDtor();
}

void ResultInfo::SharedDtor() {
}

void ResultInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResultInfo& ResultInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ResultInfo_speech_2eproto.base);
  return *internal_default_instance();
}


void ResultInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:speechService.ResultInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  words_.Clear();
  sentence_complete_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ResultInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ResultInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated string words = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("speechService.ResultInfo.words");
          object = msg->add_words();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // bool sentence_complete = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_sentence_complete(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ResultInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:speechService.ResultInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string words = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_words()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->words(this->words_size() - 1).data(),
            static_cast<int>(this->words(this->words_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "speechService.ResultInfo.words"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool sentence_complete = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sentence_complete_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:speechService.ResultInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:speechService.ResultInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ResultInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:speechService.ResultInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string words = 1;
  for (int i = 0, n = this->words_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->words(i).data(), static_cast<int>(this->words(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "speechService.ResultInfo.words");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->words(i), output);
  }

  // bool sentence_complete = 2;
  if (this->sentence_complete() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->sentence_complete(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:speechService.ResultInfo)
}

::google::protobuf::uint8* ResultInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechService.ResultInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string words = 1;
  for (int i = 0, n = this->words_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->words(i).data(), static_cast<int>(this->words(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "speechService.ResultInfo.words");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->words(i), target);
  }

  // bool sentence_complete = 2;
  if (this->sentence_complete() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->sentence_complete(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechService.ResultInfo)
  return target;
}

size_t ResultInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechService.ResultInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string words = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->words_size());
  for (int i = 0, n = this->words_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->words(i));
  }

  // bool sentence_complete = 2;
  if (this->sentence_complete() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResultInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speechService.ResultInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ResultInfo* source =
      ::google::protobuf::DynamicCastToGenerated<ResultInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speechService.ResultInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speechService.ResultInfo)
    MergeFrom(*source);
  }
}

void ResultInfo::MergeFrom(const ResultInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechService.ResultInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  words_.MergeFrom(from.words_);
  if (from.sentence_complete() != 0) {
    set_sentence_complete(from.sentence_complete());
  }
}

void ResultInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speechService.ResultInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResultInfo::CopyFrom(const ResultInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechService.ResultInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResultInfo::IsInitialized() const {
  return true;
}

void ResultInfo::Swap(ResultInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResultInfo::InternalSwap(ResultInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  words_.InternalSwap(CastToBase(&other->words_));
  swap(sentence_complete_, other->sentence_complete_);
}

::google::protobuf::Metadata ResultInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_speech_2eproto);
  return ::file_level_metadata_speech_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ListenSpeechEventRequest::InitAsDefaultInstance() {
}
class ListenSpeechEventRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListenSpeechEventRequest::kWithVadVolFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListenSpeechEventRequest::ListenSpeechEventRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:speechService.ListenSpeechEventRequest)
}
ListenSpeechEventRequest::ListenSpeechEventRequest(const ListenSpeechEventRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  with_vad_vol_ = from.with_vad_vol_;
  // @@protoc_insertion_point(copy_constructor:speechService.ListenSpeechEventRequest)
}

void ListenSpeechEventRequest::SharedCtor() {
  with_vad_vol_ = false;
}

ListenSpeechEventRequest::~ListenSpeechEventRequest() {
  // @@protoc_insertion_point(destructor:speechService.ListenSpeechEventRequest)
  SharedDtor();
}

void ListenSpeechEventRequest::SharedDtor() {
}

void ListenSpeechEventRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListenSpeechEventRequest& ListenSpeechEventRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ListenSpeechEventRequest_speech_2eproto.base);
  return *internal_default_instance();
}


void ListenSpeechEventRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:speechService.ListenSpeechEventRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  with_vad_vol_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ListenSpeechEventRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ListenSpeechEventRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bool with_vad_vol = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_with_vad_vol(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ListenSpeechEventRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:speechService.ListenSpeechEventRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool with_vad_vol = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &with_vad_vol_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:speechService.ListenSpeechEventRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:speechService.ListenSpeechEventRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ListenSpeechEventRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:speechService.ListenSpeechEventRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool with_vad_vol = 1;
  if (this->with_vad_vol() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->with_vad_vol(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:speechService.ListenSpeechEventRequest)
}

::google::protobuf::uint8* ListenSpeechEventRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechService.ListenSpeechEventRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool with_vad_vol = 1;
  if (this->with_vad_vol() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->with_vad_vol(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechService.ListenSpeechEventRequest)
  return target;
}

size_t ListenSpeechEventRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechService.ListenSpeechEventRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool with_vad_vol = 1;
  if (this->with_vad_vol() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListenSpeechEventRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speechService.ListenSpeechEventRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListenSpeechEventRequest* source =
      ::google::protobuf::DynamicCastToGenerated<ListenSpeechEventRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speechService.ListenSpeechEventRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speechService.ListenSpeechEventRequest)
    MergeFrom(*source);
  }
}

void ListenSpeechEventRequest::MergeFrom(const ListenSpeechEventRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechService.ListenSpeechEventRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.with_vad_vol() != 0) {
    set_with_vad_vol(from.with_vad_vol());
  }
}

void ListenSpeechEventRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speechService.ListenSpeechEventRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListenSpeechEventRequest::CopyFrom(const ListenSpeechEventRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechService.ListenSpeechEventRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListenSpeechEventRequest::IsInitialized() const {
  return true;
}

void ListenSpeechEventRequest::Swap(ListenSpeechEventRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListenSpeechEventRequest::InternalSwap(ListenSpeechEventRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(with_vad_vol_, other->with_vad_vol_);
}

::google::protobuf::Metadata ListenSpeechEventRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_speech_2eproto);
  return ::file_level_metadata_speech_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ListenSpeechEventResponse::InitAsDefaultInstance() {
  ::speechService::_ListenSpeechEventResponse_default_instance_.wake_up_info_ = const_cast< ::speechService::WakeUpInfo*>(
      ::speechService::WakeUpInfo::internal_default_instance());
  ::speechService::_ListenSpeechEventResponse_default_instance_.vad_info_ = const_cast< ::speechService::VadInfo*>(
      ::speechService::VadInfo::internal_default_instance());
  ::speechService::_ListenSpeechEventResponse_default_instance_.result_info_ = const_cast< ::speechService::ResultInfo*>(
      ::speechService::ResultInfo::internal_default_instance());
  ::speechService::_ListenSpeechEventResponse_default_instance_.error_info_ = const_cast< ::speechService::ErrorInfo*>(
      ::speechService::ErrorInfo::internal_default_instance());
}
class ListenSpeechEventResponse::HasBitSetters {
 public:
  static const ::speechService::WakeUpInfo& wake_up_info(const ListenSpeechEventResponse* msg);
  static const ::speechService::VadInfo& vad_info(const ListenSpeechEventResponse* msg);
  static const ::speechService::ResultInfo& result_info(const ListenSpeechEventResponse* msg);
  static const ::speechService::ErrorInfo& error_info(const ListenSpeechEventResponse* msg);
};

const ::speechService::WakeUpInfo&
ListenSpeechEventResponse::HasBitSetters::wake_up_info(const ListenSpeechEventResponse* msg) {
  return *msg->speech_event_oneof_.wake_up_info_;
}
const ::speechService::VadInfo&
ListenSpeechEventResponse::HasBitSetters::vad_info(const ListenSpeechEventResponse* msg) {
  return *msg->speech_event_oneof_.vad_info_;
}
const ::speechService::ResultInfo&
ListenSpeechEventResponse::HasBitSetters::result_info(const ListenSpeechEventResponse* msg) {
  return *msg->speech_event_oneof_.result_info_;
}
const ::speechService::ErrorInfo&
ListenSpeechEventResponse::HasBitSetters::error_info(const ListenSpeechEventResponse* msg) {
  return *msg->speech_event_oneof_.error_info_;
}
void ListenSpeechEventResponse::set_allocated_wake_up_info(::speechService::WakeUpInfo* wake_up_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_speech_event_oneof();
  if (wake_up_info) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      wake_up_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, wake_up_info, submessage_arena);
    }
    set_has_wake_up_info();
    speech_event_oneof_.wake_up_info_ = wake_up_info;
  }
  // @@protoc_insertion_point(field_set_allocated:speechService.ListenSpeechEventResponse.wake_up_info)
}
void ListenSpeechEventResponse::set_allocated_vad_info(::speechService::VadInfo* vad_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_speech_event_oneof();
  if (vad_info) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      vad_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, vad_info, submessage_arena);
    }
    set_has_vad_info();
    speech_event_oneof_.vad_info_ = vad_info;
  }
  // @@protoc_insertion_point(field_set_allocated:speechService.ListenSpeechEventResponse.vad_info)
}
void ListenSpeechEventResponse::set_allocated_result_info(::speechService::ResultInfo* result_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_speech_event_oneof();
  if (result_info) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      result_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, result_info, submessage_arena);
    }
    set_has_result_info();
    speech_event_oneof_.result_info_ = result_info;
  }
  // @@protoc_insertion_point(field_set_allocated:speechService.ListenSpeechEventResponse.result_info)
}
void ListenSpeechEventResponse::set_allocated_error_info(::speechService::ErrorInfo* error_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_speech_event_oneof();
  if (error_info) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      error_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, error_info, submessage_arena);
    }
    set_has_error_info();
    speech_event_oneof_.error_info_ = error_info;
  }
  // @@protoc_insertion_point(field_set_allocated:speechService.ListenSpeechEventResponse.error_info)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListenSpeechEventResponse::kEventTypeFieldNumber;
const int ListenSpeechEventResponse::kWakeUpInfoFieldNumber;
const int ListenSpeechEventResponse::kVadInfoFieldNumber;
const int ListenSpeechEventResponse::kResultInfoFieldNumber;
const int ListenSpeechEventResponse::kErrorInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListenSpeechEventResponse::ListenSpeechEventResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:speechService.ListenSpeechEventResponse)
}
ListenSpeechEventResponse::ListenSpeechEventResponse(const ListenSpeechEventResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  event_type_ = from.event_type_;
  clear_has_speech_event_oneof();
  switch (from.speech_event_oneof_case()) {
    case kWakeUpInfo: {
      mutable_wake_up_info()->::speechService::WakeUpInfo::MergeFrom(from.wake_up_info());
      break;
    }
    case kVadInfo: {
      mutable_vad_info()->::speechService::VadInfo::MergeFrom(from.vad_info());
      break;
    }
    case kResultInfo: {
      mutable_result_info()->::speechService::ResultInfo::MergeFrom(from.result_info());
      break;
    }
    case kErrorInfo: {
      mutable_error_info()->::speechService::ErrorInfo::MergeFrom(from.error_info());
      break;
    }
    case SPEECH_EVENT_ONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:speechService.ListenSpeechEventResponse)
}

void ListenSpeechEventResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ListenSpeechEventResponse_speech_2eproto.base);
  event_type_ = 0;
  clear_has_speech_event_oneof();
}

ListenSpeechEventResponse::~ListenSpeechEventResponse() {
  // @@protoc_insertion_point(destructor:speechService.ListenSpeechEventResponse)
  SharedDtor();
}

void ListenSpeechEventResponse::SharedDtor() {
  if (has_speech_event_oneof()) {
    clear_speech_event_oneof();
  }
}

void ListenSpeechEventResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListenSpeechEventResponse& ListenSpeechEventResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ListenSpeechEventResponse_speech_2eproto.base);
  return *internal_default_instance();
}


void ListenSpeechEventResponse::clear_speech_event_oneof() {
// @@protoc_insertion_point(one_of_clear_start:speechService.ListenSpeechEventResponse)
  switch (speech_event_oneof_case()) {
    case kWakeUpInfo: {
      delete speech_event_oneof_.wake_up_info_;
      break;
    }
    case kVadInfo: {
      delete speech_event_oneof_.vad_info_;
      break;
    }
    case kResultInfo: {
      delete speech_event_oneof_.result_info_;
      break;
    }
    case kErrorInfo: {
      delete speech_event_oneof_.error_info_;
      break;
    }
    case SPEECH_EVENT_ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SPEECH_EVENT_ONEOF_NOT_SET;
}


void ListenSpeechEventResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:speechService.ListenSpeechEventResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  event_type_ = 0;
  clear_speech_event_oneof();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ListenSpeechEventResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ListenSpeechEventResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .speechService.SpeechEvent event_type = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_event_type(static_cast<::speechService::SpeechEvent>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .speechService.WakeUpInfo wake_up_info = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::speechService::WakeUpInfo::_InternalParse;
        object = msg->mutable_wake_up_info();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .speechService.VadInfo vad_info = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::speechService::VadInfo::_InternalParse;
        object = msg->mutable_vad_info();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .speechService.ResultInfo result_info = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::speechService::ResultInfo::_InternalParse;
        object = msg->mutable_result_info();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .speechService.ErrorInfo error_info = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::speechService::ErrorInfo::_InternalParse;
        object = msg->mutable_error_info();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ListenSpeechEventResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:speechService.ListenSpeechEventResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .speechService.SpeechEvent event_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_event_type(static_cast< ::speechService::SpeechEvent >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .speechService.WakeUpInfo wake_up_info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_wake_up_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .speechService.VadInfo vad_info = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_vad_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .speechService.ResultInfo result_info = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_result_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .speechService.ErrorInfo error_info = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_error_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:speechService.ListenSpeechEventResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:speechService.ListenSpeechEventResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ListenSpeechEventResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:speechService.ListenSpeechEventResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .speechService.SpeechEvent event_type = 1;
  if (this->event_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->event_type(), output);
  }

  // .speechService.WakeUpInfo wake_up_info = 2;
  if (has_wake_up_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::wake_up_info(this), output);
  }

  // .speechService.VadInfo vad_info = 3;
  if (has_vad_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::vad_info(this), output);
  }

  // .speechService.ResultInfo result_info = 4;
  if (has_result_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::result_info(this), output);
  }

  // .speechService.ErrorInfo error_info = 5;
  if (has_error_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::error_info(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:speechService.ListenSpeechEventResponse)
}

::google::protobuf::uint8* ListenSpeechEventResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechService.ListenSpeechEventResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .speechService.SpeechEvent event_type = 1;
  if (this->event_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->event_type(), target);
  }

  // .speechService.WakeUpInfo wake_up_info = 2;
  if (has_wake_up_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::wake_up_info(this), target);
  }

  // .speechService.VadInfo vad_info = 3;
  if (has_vad_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::vad_info(this), target);
  }

  // .speechService.ResultInfo result_info = 4;
  if (has_result_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::result_info(this), target);
  }

  // .speechService.ErrorInfo error_info = 5;
  if (has_error_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::error_info(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechService.ListenSpeechEventResponse)
  return target;
}

size_t ListenSpeechEventResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechService.ListenSpeechEventResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .speechService.SpeechEvent event_type = 1;
  if (this->event_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->event_type());
  }

  switch (speech_event_oneof_case()) {
    // .speechService.WakeUpInfo wake_up_info = 2;
    case kWakeUpInfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *speech_event_oneof_.wake_up_info_);
      break;
    }
    // .speechService.VadInfo vad_info = 3;
    case kVadInfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *speech_event_oneof_.vad_info_);
      break;
    }
    // .speechService.ResultInfo result_info = 4;
    case kResultInfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *speech_event_oneof_.result_info_);
      break;
    }
    // .speechService.ErrorInfo error_info = 5;
    case kErrorInfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *speech_event_oneof_.error_info_);
      break;
    }
    case SPEECH_EVENT_ONEOF_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListenSpeechEventResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speechService.ListenSpeechEventResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListenSpeechEventResponse* source =
      ::google::protobuf::DynamicCastToGenerated<ListenSpeechEventResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speechService.ListenSpeechEventResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speechService.ListenSpeechEventResponse)
    MergeFrom(*source);
  }
}

void ListenSpeechEventResponse::MergeFrom(const ListenSpeechEventResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechService.ListenSpeechEventResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.event_type() != 0) {
    set_event_type(from.event_type());
  }
  switch (from.speech_event_oneof_case()) {
    case kWakeUpInfo: {
      mutable_wake_up_info()->::speechService::WakeUpInfo::MergeFrom(from.wake_up_info());
      break;
    }
    case kVadInfo: {
      mutable_vad_info()->::speechService::VadInfo::MergeFrom(from.vad_info());
      break;
    }
    case kResultInfo: {
      mutable_result_info()->::speechService::ResultInfo::MergeFrom(from.result_info());
      break;
    }
    case kErrorInfo: {
      mutable_error_info()->::speechService::ErrorInfo::MergeFrom(from.error_info());
      break;
    }
    case SPEECH_EVENT_ONEOF_NOT_SET: {
      break;
    }
  }
}

void ListenSpeechEventResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speechService.ListenSpeechEventResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListenSpeechEventResponse::CopyFrom(const ListenSpeechEventResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechService.ListenSpeechEventResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListenSpeechEventResponse::IsInitialized() const {
  return true;
}

void ListenSpeechEventResponse::Swap(ListenSpeechEventResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListenSpeechEventResponse::InternalSwap(ListenSpeechEventResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(event_type_, other->event_type_);
  swap(speech_event_oneof_, other->speech_event_oneof_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata ListenSpeechEventResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_speech_2eproto);
  return ::file_level_metadata_speech_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TextToSpeechRequest::InitAsDefaultInstance() {
}
class TextToSpeechRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TextToSpeechRequest::kTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TextToSpeechRequest::TextToSpeechRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:speechService.TextToSpeechRequest)
}
TextToSpeechRequest::TextToSpeechRequest(const TextToSpeechRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.text().size() > 0) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  // @@protoc_insertion_point(copy_constructor:speechService.TextToSpeechRequest)
}

void TextToSpeechRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TextToSpeechRequest_speech_2eproto.base);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

TextToSpeechRequest::~TextToSpeechRequest() {
  // @@protoc_insertion_point(destructor:speechService.TextToSpeechRequest)
  SharedDtor();
}

void TextToSpeechRequest::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TextToSpeechRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TextToSpeechRequest& TextToSpeechRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TextToSpeechRequest_speech_2eproto.base);
  return *internal_default_instance();
}


void TextToSpeechRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:speechService.TextToSpeechRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TextToSpeechRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TextToSpeechRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string text = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("speechService.TextToSpeechRequest.text");
        object = msg->mutable_text();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TextToSpeechRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:speechService.TextToSpeechRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string text = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->text().data(), static_cast<int>(this->text().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "speechService.TextToSpeechRequest.text"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:speechService.TextToSpeechRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:speechService.TextToSpeechRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TextToSpeechRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:speechService.TextToSpeechRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string text = 1;
  if (this->text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "speechService.TextToSpeechRequest.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->text(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:speechService.TextToSpeechRequest)
}

::google::protobuf::uint8* TextToSpeechRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechService.TextToSpeechRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string text = 1;
  if (this->text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "speechService.TextToSpeechRequest.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->text(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechService.TextToSpeechRequest)
  return target;
}

size_t TextToSpeechRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechService.TextToSpeechRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string text = 1;
  if (this->text().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TextToSpeechRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speechService.TextToSpeechRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TextToSpeechRequest* source =
      ::google::protobuf::DynamicCastToGenerated<TextToSpeechRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speechService.TextToSpeechRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speechService.TextToSpeechRequest)
    MergeFrom(*source);
  }
}

void TextToSpeechRequest::MergeFrom(const TextToSpeechRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechService.TextToSpeechRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.text().size() > 0) {

    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
}

void TextToSpeechRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speechService.TextToSpeechRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TextToSpeechRequest::CopyFrom(const TextToSpeechRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechService.TextToSpeechRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextToSpeechRequest::IsInitialized() const {
  return true;
}

void TextToSpeechRequest::Swap(TextToSpeechRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TextToSpeechRequest::InternalSwap(TextToSpeechRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  text_.Swap(&other->text_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata TextToSpeechRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_speech_2eproto);
  return ::file_level_metadata_speech_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TextToSpeechResponse::InitAsDefaultInstance() {
}
class TextToSpeechResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TextToSpeechResponse::TextToSpeechResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:speechService.TextToSpeechResponse)
}
TextToSpeechResponse::TextToSpeechResponse(const TextToSpeechResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:speechService.TextToSpeechResponse)
}

void TextToSpeechResponse::SharedCtor() {
}

TextToSpeechResponse::~TextToSpeechResponse() {
  // @@protoc_insertion_point(destructor:speechService.TextToSpeechResponse)
  SharedDtor();
}

void TextToSpeechResponse::SharedDtor() {
}

void TextToSpeechResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TextToSpeechResponse& TextToSpeechResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TextToSpeechResponse_speech_2eproto.base);
  return *internal_default_instance();
}


void TextToSpeechResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:speechService.TextToSpeechResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TextToSpeechResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TextToSpeechResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TextToSpeechResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:speechService.TextToSpeechResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:speechService.TextToSpeechResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:speechService.TextToSpeechResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TextToSpeechResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:speechService.TextToSpeechResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:speechService.TextToSpeechResponse)
}

::google::protobuf::uint8* TextToSpeechResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechService.TextToSpeechResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechService.TextToSpeechResponse)
  return target;
}

size_t TextToSpeechResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechService.TextToSpeechResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TextToSpeechResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speechService.TextToSpeechResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const TextToSpeechResponse* source =
      ::google::protobuf::DynamicCastToGenerated<TextToSpeechResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speechService.TextToSpeechResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speechService.TextToSpeechResponse)
    MergeFrom(*source);
  }
}

void TextToSpeechResponse::MergeFrom(const TextToSpeechResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechService.TextToSpeechResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void TextToSpeechResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speechService.TextToSpeechResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TextToSpeechResponse::CopyFrom(const TextToSpeechResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechService.TextToSpeechResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextToSpeechResponse::IsInitialized() const {
  return true;
}

void TextToSpeechResponse::Swap(TextToSpeechResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TextToSpeechResponse::InternalSwap(TextToSpeechResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TextToSpeechResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_speech_2eproto);
  return ::file_level_metadata_speech_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SpeechStopRequest::InitAsDefaultInstance() {
}
class SpeechStopRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpeechStopRequest::SpeechStopRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:speechService.SpeechStopRequest)
}
SpeechStopRequest::SpeechStopRequest(const SpeechStopRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:speechService.SpeechStopRequest)
}

void SpeechStopRequest::SharedCtor() {
}

SpeechStopRequest::~SpeechStopRequest() {
  // @@protoc_insertion_point(destructor:speechService.SpeechStopRequest)
  SharedDtor();
}

void SpeechStopRequest::SharedDtor() {
}

void SpeechStopRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpeechStopRequest& SpeechStopRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SpeechStopRequest_speech_2eproto.base);
  return *internal_default_instance();
}


void SpeechStopRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:speechService.SpeechStopRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SpeechStopRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SpeechStopRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SpeechStopRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:speechService.SpeechStopRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:speechService.SpeechStopRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:speechService.SpeechStopRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SpeechStopRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:speechService.SpeechStopRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:speechService.SpeechStopRequest)
}

::google::protobuf::uint8* SpeechStopRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechService.SpeechStopRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechService.SpeechStopRequest)
  return target;
}

size_t SpeechStopRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechService.SpeechStopRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpeechStopRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speechService.SpeechStopRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SpeechStopRequest* source =
      ::google::protobuf::DynamicCastToGenerated<SpeechStopRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speechService.SpeechStopRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speechService.SpeechStopRequest)
    MergeFrom(*source);
  }
}

void SpeechStopRequest::MergeFrom(const SpeechStopRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechService.SpeechStopRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SpeechStopRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speechService.SpeechStopRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeechStopRequest::CopyFrom(const SpeechStopRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechService.SpeechStopRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeechStopRequest::IsInitialized() const {
  return true;
}

void SpeechStopRequest::Swap(SpeechStopRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SpeechStopRequest::InternalSwap(SpeechStopRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SpeechStopRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_speech_2eproto);
  return ::file_level_metadata_speech_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SpeechStopResponse::InitAsDefaultInstance() {
}
class SpeechStopResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpeechStopResponse::SpeechStopResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:speechService.SpeechStopResponse)
}
SpeechStopResponse::SpeechStopResponse(const SpeechStopResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:speechService.SpeechStopResponse)
}

void SpeechStopResponse::SharedCtor() {
}

SpeechStopResponse::~SpeechStopResponse() {
  // @@protoc_insertion_point(destructor:speechService.SpeechStopResponse)
  SharedDtor();
}

void SpeechStopResponse::SharedDtor() {
}

void SpeechStopResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpeechStopResponse& SpeechStopResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SpeechStopResponse_speech_2eproto.base);
  return *internal_default_instance();
}


void SpeechStopResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:speechService.SpeechStopResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SpeechStopResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SpeechStopResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SpeechStopResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:speechService.SpeechStopResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:speechService.SpeechStopResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:speechService.SpeechStopResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SpeechStopResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:speechService.SpeechStopResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:speechService.SpeechStopResponse)
}

::google::protobuf::uint8* SpeechStopResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechService.SpeechStopResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechService.SpeechStopResponse)
  return target;
}

size_t SpeechStopResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechService.SpeechStopResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpeechStopResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speechService.SpeechStopResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SpeechStopResponse* source =
      ::google::protobuf::DynamicCastToGenerated<SpeechStopResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speechService.SpeechStopResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speechService.SpeechStopResponse)
    MergeFrom(*source);
  }
}

void SpeechStopResponse::MergeFrom(const SpeechStopResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechService.SpeechStopResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SpeechStopResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speechService.SpeechStopResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeechStopResponse::CopyFrom(const SpeechStopResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechService.SpeechStopResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeechStopResponse::IsInitialized() const {
  return true;
}

void SpeechStopResponse::Swap(SpeechStopResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SpeechStopResponse::InternalSwap(SpeechStopResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SpeechStopResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_speech_2eproto);
  return ::file_level_metadata_speech_2eproto[kIndexInFileMessages];
}


// ===================================================================

void WakeUpRequest::InitAsDefaultInstance() {
}
class WakeUpRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WakeUpRequest::kAfterWakeUpSpeechTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WakeUpRequest::WakeUpRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:speechService.WakeUpRequest)
}
WakeUpRequest::WakeUpRequest(const WakeUpRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  after_wake_up_speech_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.after_wake_up_speech_text().size() > 0) {
    after_wake_up_speech_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.after_wake_up_speech_text_);
  }
  // @@protoc_insertion_point(copy_constructor:speechService.WakeUpRequest)
}

void WakeUpRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_WakeUpRequest_speech_2eproto.base);
  after_wake_up_speech_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

WakeUpRequest::~WakeUpRequest() {
  // @@protoc_insertion_point(destructor:speechService.WakeUpRequest)
  SharedDtor();
}

void WakeUpRequest::SharedDtor() {
  after_wake_up_speech_text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void WakeUpRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WakeUpRequest& WakeUpRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_WakeUpRequest_speech_2eproto.base);
  return *internal_default_instance();
}


void WakeUpRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:speechService.WakeUpRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  after_wake_up_speech_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WakeUpRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<WakeUpRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string after_wake_up_speech_text = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("speechService.WakeUpRequest.after_wake_up_speech_text");
        object = msg->mutable_after_wake_up_speech_text();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WakeUpRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:speechService.WakeUpRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string after_wake_up_speech_text = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_after_wake_up_speech_text()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->after_wake_up_speech_text().data(), static_cast<int>(this->after_wake_up_speech_text().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "speechService.WakeUpRequest.after_wake_up_speech_text"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:speechService.WakeUpRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:speechService.WakeUpRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WakeUpRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:speechService.WakeUpRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string after_wake_up_speech_text = 1;
  if (this->after_wake_up_speech_text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->after_wake_up_speech_text().data(), static_cast<int>(this->after_wake_up_speech_text().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "speechService.WakeUpRequest.after_wake_up_speech_text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->after_wake_up_speech_text(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:speechService.WakeUpRequest)
}

::google::protobuf::uint8* WakeUpRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechService.WakeUpRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string after_wake_up_speech_text = 1;
  if (this->after_wake_up_speech_text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->after_wake_up_speech_text().data(), static_cast<int>(this->after_wake_up_speech_text().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "speechService.WakeUpRequest.after_wake_up_speech_text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->after_wake_up_speech_text(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechService.WakeUpRequest)
  return target;
}

size_t WakeUpRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechService.WakeUpRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string after_wake_up_speech_text = 1;
  if (this->after_wake_up_speech_text().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->after_wake_up_speech_text());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WakeUpRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speechService.WakeUpRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const WakeUpRequest* source =
      ::google::protobuf::DynamicCastToGenerated<WakeUpRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speechService.WakeUpRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speechService.WakeUpRequest)
    MergeFrom(*source);
  }
}

void WakeUpRequest::MergeFrom(const WakeUpRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechService.WakeUpRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.after_wake_up_speech_text().size() > 0) {

    after_wake_up_speech_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.after_wake_up_speech_text_);
  }
}

void WakeUpRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speechService.WakeUpRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WakeUpRequest::CopyFrom(const WakeUpRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechService.WakeUpRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WakeUpRequest::IsInitialized() const {
  return true;
}

void WakeUpRequest::Swap(WakeUpRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WakeUpRequest::InternalSwap(WakeUpRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  after_wake_up_speech_text_.Swap(&other->after_wake_up_speech_text_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata WakeUpRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_speech_2eproto);
  return ::file_level_metadata_speech_2eproto[kIndexInFileMessages];
}


// ===================================================================

void WakeUpResponse::InitAsDefaultInstance() {
}
class WakeUpResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WakeUpResponse::WakeUpResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:speechService.WakeUpResponse)
}
WakeUpResponse::WakeUpResponse(const WakeUpResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:speechService.WakeUpResponse)
}

void WakeUpResponse::SharedCtor() {
}

WakeUpResponse::~WakeUpResponse() {
  // @@protoc_insertion_point(destructor:speechService.WakeUpResponse)
  SharedDtor();
}

void WakeUpResponse::SharedDtor() {
}

void WakeUpResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WakeUpResponse& WakeUpResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_WakeUpResponse_speech_2eproto.base);
  return *internal_default_instance();
}


void WakeUpResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:speechService.WakeUpResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WakeUpResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<WakeUpResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WakeUpResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:speechService.WakeUpResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:speechService.WakeUpResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:speechService.WakeUpResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WakeUpResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:speechService.WakeUpResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:speechService.WakeUpResponse)
}

::google::protobuf::uint8* WakeUpResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechService.WakeUpResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechService.WakeUpResponse)
  return target;
}

size_t WakeUpResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechService.WakeUpResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WakeUpResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speechService.WakeUpResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const WakeUpResponse* source =
      ::google::protobuf::DynamicCastToGenerated<WakeUpResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speechService.WakeUpResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speechService.WakeUpResponse)
    MergeFrom(*source);
  }
}

void WakeUpResponse::MergeFrom(const WakeUpResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechService.WakeUpResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void WakeUpResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speechService.WakeUpResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WakeUpResponse::CopyFrom(const WakeUpResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechService.WakeUpResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WakeUpResponse::IsInitialized() const {
  return true;
}

void WakeUpResponse::Swap(WakeUpResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WakeUpResponse::InternalSwap(WakeUpResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata WakeUpResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_speech_2eproto);
  return ::file_level_metadata_speech_2eproto[kIndexInFileMessages];
}


// ===================================================================

void HibernateRequest::InitAsDefaultInstance() {
}
class HibernateRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HibernateRequest::HibernateRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:speechService.HibernateRequest)
}
HibernateRequest::HibernateRequest(const HibernateRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:speechService.HibernateRequest)
}

void HibernateRequest::SharedCtor() {
}

HibernateRequest::~HibernateRequest() {
  // @@protoc_insertion_point(destructor:speechService.HibernateRequest)
  SharedDtor();
}

void HibernateRequest::SharedDtor() {
}

void HibernateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HibernateRequest& HibernateRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_HibernateRequest_speech_2eproto.base);
  return *internal_default_instance();
}


void HibernateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:speechService.HibernateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HibernateRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<HibernateRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HibernateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:speechService.HibernateRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:speechService.HibernateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:speechService.HibernateRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HibernateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:speechService.HibernateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:speechService.HibernateRequest)
}

::google::protobuf::uint8* HibernateRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechService.HibernateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechService.HibernateRequest)
  return target;
}

size_t HibernateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechService.HibernateRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HibernateRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speechService.HibernateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const HibernateRequest* source =
      ::google::protobuf::DynamicCastToGenerated<HibernateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speechService.HibernateRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speechService.HibernateRequest)
    MergeFrom(*source);
  }
}

void HibernateRequest::MergeFrom(const HibernateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechService.HibernateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void HibernateRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speechService.HibernateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HibernateRequest::CopyFrom(const HibernateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechService.HibernateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HibernateRequest::IsInitialized() const {
  return true;
}

void HibernateRequest::Swap(HibernateRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HibernateRequest::InternalSwap(HibernateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata HibernateRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_speech_2eproto);
  return ::file_level_metadata_speech_2eproto[kIndexInFileMessages];
}


// ===================================================================

void HibernateResponse::InitAsDefaultInstance() {
}
class HibernateResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HibernateResponse::HibernateResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:speechService.HibernateResponse)
}
HibernateResponse::HibernateResponse(const HibernateResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:speechService.HibernateResponse)
}

void HibernateResponse::SharedCtor() {
}

HibernateResponse::~HibernateResponse() {
  // @@protoc_insertion_point(destructor:speechService.HibernateResponse)
  SharedDtor();
}

void HibernateResponse::SharedDtor() {
}

void HibernateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HibernateResponse& HibernateResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_HibernateResponse_speech_2eproto.base);
  return *internal_default_instance();
}


void HibernateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:speechService.HibernateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HibernateResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<HibernateResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HibernateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:speechService.HibernateResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:speechService.HibernateResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:speechService.HibernateResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HibernateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:speechService.HibernateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:speechService.HibernateResponse)
}

::google::protobuf::uint8* HibernateResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechService.HibernateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechService.HibernateResponse)
  return target;
}

size_t HibernateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechService.HibernateResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HibernateResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speechService.HibernateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const HibernateResponse* source =
      ::google::protobuf::DynamicCastToGenerated<HibernateResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speechService.HibernateResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speechService.HibernateResponse)
    MergeFrom(*source);
  }
}

void HibernateResponse::MergeFrom(const HibernateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechService.HibernateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void HibernateResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speechService.HibernateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HibernateResponse::CopyFrom(const HibernateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechService.HibernateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HibernateResponse::IsInitialized() const {
  return true;
}

void HibernateResponse::Swap(HibernateResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HibernateResponse::InternalSwap(HibernateResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata HibernateResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_speech_2eproto);
  return ::file_level_metadata_speech_2eproto[kIndexInFileMessages];
}


// ===================================================================

void VoiceVolumeInfo::InitAsDefaultInstance() {
}
class VoiceVolumeInfo::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VoiceVolumeInfo::kVolFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VoiceVolumeInfo::VoiceVolumeInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:speechService.VoiceVolumeInfo)
}
VoiceVolumeInfo::VoiceVolumeInfo(const VoiceVolumeInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  vol_ = from.vol_;
  // @@protoc_insertion_point(copy_constructor:speechService.VoiceVolumeInfo)
}

void VoiceVolumeInfo::SharedCtor() {
  vol_ = 0u;
}

VoiceVolumeInfo::~VoiceVolumeInfo() {
  // @@protoc_insertion_point(destructor:speechService.VoiceVolumeInfo)
  SharedDtor();
}

void VoiceVolumeInfo::SharedDtor() {
}

void VoiceVolumeInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VoiceVolumeInfo& VoiceVolumeInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_VoiceVolumeInfo_speech_2eproto.base);
  return *internal_default_instance();
}


void VoiceVolumeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:speechService.VoiceVolumeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vol_ = 0u;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* VoiceVolumeInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<VoiceVolumeInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint32 vol = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_vol(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool VoiceVolumeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:speechService.VoiceVolumeInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 vol = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vol_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:speechService.VoiceVolumeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:speechService.VoiceVolumeInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void VoiceVolumeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:speechService.VoiceVolumeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 vol = 1;
  if (this->vol() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->vol(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:speechService.VoiceVolumeInfo)
}

::google::protobuf::uint8* VoiceVolumeInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechService.VoiceVolumeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 vol = 1;
  if (this->vol() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->vol(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechService.VoiceVolumeInfo)
  return target;
}

size_t VoiceVolumeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechService.VoiceVolumeInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 vol = 1;
  if (this->vol() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->vol());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VoiceVolumeInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speechService.VoiceVolumeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const VoiceVolumeInfo* source =
      ::google::protobuf::DynamicCastToGenerated<VoiceVolumeInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speechService.VoiceVolumeInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speechService.VoiceVolumeInfo)
    MergeFrom(*source);
  }
}

void VoiceVolumeInfo::MergeFrom(const VoiceVolumeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechService.VoiceVolumeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vol() != 0) {
    set_vol(from.vol());
  }
}

void VoiceVolumeInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speechService.VoiceVolumeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoiceVolumeInfo::CopyFrom(const VoiceVolumeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechService.VoiceVolumeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoiceVolumeInfo::IsInitialized() const {
  return true;
}

void VoiceVolumeInfo::Swap(VoiceVolumeInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VoiceVolumeInfo::InternalSwap(VoiceVolumeInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(vol_, other->vol_);
}

::google::protobuf::Metadata VoiceVolumeInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_speech_2eproto);
  return ::file_level_metadata_speech_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SetVoiceVolumeRequest::InitAsDefaultInstance() {
  ::speechService::_SetVoiceVolumeRequest_default_instance_._instance.get_mutable()->voice_volume_info_ = const_cast< ::speechService::VoiceVolumeInfo*>(
      ::speechService::VoiceVolumeInfo::internal_default_instance());
}
class SetVoiceVolumeRequest::HasBitSetters {
 public:
  static const ::speechService::VoiceVolumeInfo& voice_volume_info(const SetVoiceVolumeRequest* msg);
};

const ::speechService::VoiceVolumeInfo&
SetVoiceVolumeRequest::HasBitSetters::voice_volume_info(const SetVoiceVolumeRequest* msg) {
  return *msg->voice_volume_info_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetVoiceVolumeRequest::kVoiceVolumeInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetVoiceVolumeRequest::SetVoiceVolumeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:speechService.SetVoiceVolumeRequest)
}
SetVoiceVolumeRequest::SetVoiceVolumeRequest(const SetVoiceVolumeRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_voice_volume_info()) {
    voice_volume_info_ = new ::speechService::VoiceVolumeInfo(*from.voice_volume_info_);
  } else {
    voice_volume_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:speechService.SetVoiceVolumeRequest)
}

void SetVoiceVolumeRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SetVoiceVolumeRequest_speech_2eproto.base);
  voice_volume_info_ = nullptr;
}

SetVoiceVolumeRequest::~SetVoiceVolumeRequest() {
  // @@protoc_insertion_point(destructor:speechService.SetVoiceVolumeRequest)
  SharedDtor();
}

void SetVoiceVolumeRequest::SharedDtor() {
  if (this != internal_default_instance()) delete voice_volume_info_;
}

void SetVoiceVolumeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetVoiceVolumeRequest& SetVoiceVolumeRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SetVoiceVolumeRequest_speech_2eproto.base);
  return *internal_default_instance();
}


void SetVoiceVolumeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:speechService.SetVoiceVolumeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && voice_volume_info_ != nullptr) {
    delete voice_volume_info_;
  }
  voice_volume_info_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SetVoiceVolumeRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SetVoiceVolumeRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .speechService.VoiceVolumeInfo voice_volume_info = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::speechService::VoiceVolumeInfo::_InternalParse;
        object = msg->mutable_voice_volume_info();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SetVoiceVolumeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:speechService.SetVoiceVolumeRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .speechService.VoiceVolumeInfo voice_volume_info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_voice_volume_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:speechService.SetVoiceVolumeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:speechService.SetVoiceVolumeRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SetVoiceVolumeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:speechService.SetVoiceVolumeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .speechService.VoiceVolumeInfo voice_volume_info = 1;
  if (this->has_voice_volume_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::voice_volume_info(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:speechService.SetVoiceVolumeRequest)
}

::google::protobuf::uint8* SetVoiceVolumeRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechService.SetVoiceVolumeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .speechService.VoiceVolumeInfo voice_volume_info = 1;
  if (this->has_voice_volume_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::voice_volume_info(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechService.SetVoiceVolumeRequest)
  return target;
}

size_t SetVoiceVolumeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechService.SetVoiceVolumeRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .speechService.VoiceVolumeInfo voice_volume_info = 1;
  if (this->has_voice_volume_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *voice_volume_info_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetVoiceVolumeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speechService.SetVoiceVolumeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetVoiceVolumeRequest* source =
      ::google::protobuf::DynamicCastToGenerated<SetVoiceVolumeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speechService.SetVoiceVolumeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speechService.SetVoiceVolumeRequest)
    MergeFrom(*source);
  }
}

void SetVoiceVolumeRequest::MergeFrom(const SetVoiceVolumeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechService.SetVoiceVolumeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_voice_volume_info()) {
    mutable_voice_volume_info()->::speechService::VoiceVolumeInfo::MergeFrom(from.voice_volume_info());
  }
}

void SetVoiceVolumeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speechService.SetVoiceVolumeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetVoiceVolumeRequest::CopyFrom(const SetVoiceVolumeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechService.SetVoiceVolumeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetVoiceVolumeRequest::IsInitialized() const {
  return true;
}

void SetVoiceVolumeRequest::Swap(SetVoiceVolumeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetVoiceVolumeRequest::InternalSwap(SetVoiceVolumeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(voice_volume_info_, other->voice_volume_info_);
}

::google::protobuf::Metadata SetVoiceVolumeRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_speech_2eproto);
  return ::file_level_metadata_speech_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SetVoiceVolumeResponse::InitAsDefaultInstance() {
  ::speechService::_SetVoiceVolumeResponse_default_instance_._instance.get_mutable()->voice_volume_info_ = const_cast< ::speechService::VoiceVolumeInfo*>(
      ::speechService::VoiceVolumeInfo::internal_default_instance());
}
class SetVoiceVolumeResponse::HasBitSetters {
 public:
  static const ::speechService::VoiceVolumeInfo& voice_volume_info(const SetVoiceVolumeResponse* msg);
};

const ::speechService::VoiceVolumeInfo&
SetVoiceVolumeResponse::HasBitSetters::voice_volume_info(const SetVoiceVolumeResponse* msg) {
  return *msg->voice_volume_info_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetVoiceVolumeResponse::kVoiceVolumeInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetVoiceVolumeResponse::SetVoiceVolumeResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:speechService.SetVoiceVolumeResponse)
}
SetVoiceVolumeResponse::SetVoiceVolumeResponse(const SetVoiceVolumeResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_voice_volume_info()) {
    voice_volume_info_ = new ::speechService::VoiceVolumeInfo(*from.voice_volume_info_);
  } else {
    voice_volume_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:speechService.SetVoiceVolumeResponse)
}

void SetVoiceVolumeResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SetVoiceVolumeResponse_speech_2eproto.base);
  voice_volume_info_ = nullptr;
}

SetVoiceVolumeResponse::~SetVoiceVolumeResponse() {
  // @@protoc_insertion_point(destructor:speechService.SetVoiceVolumeResponse)
  SharedDtor();
}

void SetVoiceVolumeResponse::SharedDtor() {
  if (this != internal_default_instance()) delete voice_volume_info_;
}

void SetVoiceVolumeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetVoiceVolumeResponse& SetVoiceVolumeResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SetVoiceVolumeResponse_speech_2eproto.base);
  return *internal_default_instance();
}


void SetVoiceVolumeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:speechService.SetVoiceVolumeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && voice_volume_info_ != nullptr) {
    delete voice_volume_info_;
  }
  voice_volume_info_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SetVoiceVolumeResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SetVoiceVolumeResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .speechService.VoiceVolumeInfo voice_volume_info = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::speechService::VoiceVolumeInfo::_InternalParse;
        object = msg->mutable_voice_volume_info();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SetVoiceVolumeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:speechService.SetVoiceVolumeResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .speechService.VoiceVolumeInfo voice_volume_info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_voice_volume_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:speechService.SetVoiceVolumeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:speechService.SetVoiceVolumeResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SetVoiceVolumeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:speechService.SetVoiceVolumeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .speechService.VoiceVolumeInfo voice_volume_info = 1;
  if (this->has_voice_volume_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::voice_volume_info(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:speechService.SetVoiceVolumeResponse)
}

::google::protobuf::uint8* SetVoiceVolumeResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechService.SetVoiceVolumeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .speechService.VoiceVolumeInfo voice_volume_info = 1;
  if (this->has_voice_volume_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::voice_volume_info(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechService.SetVoiceVolumeResponse)
  return target;
}

size_t SetVoiceVolumeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechService.SetVoiceVolumeResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .speechService.VoiceVolumeInfo voice_volume_info = 1;
  if (this->has_voice_volume_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *voice_volume_info_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetVoiceVolumeResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speechService.SetVoiceVolumeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SetVoiceVolumeResponse* source =
      ::google::protobuf::DynamicCastToGenerated<SetVoiceVolumeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speechService.SetVoiceVolumeResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speechService.SetVoiceVolumeResponse)
    MergeFrom(*source);
  }
}

void SetVoiceVolumeResponse::MergeFrom(const SetVoiceVolumeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechService.SetVoiceVolumeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_voice_volume_info()) {
    mutable_voice_volume_info()->::speechService::VoiceVolumeInfo::MergeFrom(from.voice_volume_info());
  }
}

void SetVoiceVolumeResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speechService.SetVoiceVolumeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetVoiceVolumeResponse::CopyFrom(const SetVoiceVolumeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechService.SetVoiceVolumeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetVoiceVolumeResponse::IsInitialized() const {
  return true;
}

void SetVoiceVolumeResponse::Swap(SetVoiceVolumeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetVoiceVolumeResponse::InternalSwap(SetVoiceVolumeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(voice_volume_info_, other->voice_volume_info_);
}

::google::protobuf::Metadata SetVoiceVolumeResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_speech_2eproto);
  return ::file_level_metadata_speech_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GetVoiceVolumeRequest::InitAsDefaultInstance() {
}
class GetVoiceVolumeRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetVoiceVolumeRequest::GetVoiceVolumeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:speechService.GetVoiceVolumeRequest)
}
GetVoiceVolumeRequest::GetVoiceVolumeRequest(const GetVoiceVolumeRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:speechService.GetVoiceVolumeRequest)
}

void GetVoiceVolumeRequest::SharedCtor() {
}

GetVoiceVolumeRequest::~GetVoiceVolumeRequest() {
  // @@protoc_insertion_point(destructor:speechService.GetVoiceVolumeRequest)
  SharedDtor();
}

void GetVoiceVolumeRequest::SharedDtor() {
}

void GetVoiceVolumeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetVoiceVolumeRequest& GetVoiceVolumeRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetVoiceVolumeRequest_speech_2eproto.base);
  return *internal_default_instance();
}


void GetVoiceVolumeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:speechService.GetVoiceVolumeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetVoiceVolumeRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetVoiceVolumeRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetVoiceVolumeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:speechService.GetVoiceVolumeRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:speechService.GetVoiceVolumeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:speechService.GetVoiceVolumeRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetVoiceVolumeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:speechService.GetVoiceVolumeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:speechService.GetVoiceVolumeRequest)
}

::google::protobuf::uint8* GetVoiceVolumeRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechService.GetVoiceVolumeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechService.GetVoiceVolumeRequest)
  return target;
}

size_t GetVoiceVolumeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechService.GetVoiceVolumeRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetVoiceVolumeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speechService.GetVoiceVolumeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetVoiceVolumeRequest* source =
      ::google::protobuf::DynamicCastToGenerated<GetVoiceVolumeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speechService.GetVoiceVolumeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speechService.GetVoiceVolumeRequest)
    MergeFrom(*source);
  }
}

void GetVoiceVolumeRequest::MergeFrom(const GetVoiceVolumeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechService.GetVoiceVolumeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetVoiceVolumeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speechService.GetVoiceVolumeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetVoiceVolumeRequest::CopyFrom(const GetVoiceVolumeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechService.GetVoiceVolumeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetVoiceVolumeRequest::IsInitialized() const {
  return true;
}

void GetVoiceVolumeRequest::Swap(GetVoiceVolumeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetVoiceVolumeRequest::InternalSwap(GetVoiceVolumeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetVoiceVolumeRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_speech_2eproto);
  return ::file_level_metadata_speech_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GetVoiceVolumeResponse::InitAsDefaultInstance() {
  ::speechService::_GetVoiceVolumeResponse_default_instance_._instance.get_mutable()->voice_volume_info_ = const_cast< ::speechService::VoiceVolumeInfo*>(
      ::speechService::VoiceVolumeInfo::internal_default_instance());
}
class GetVoiceVolumeResponse::HasBitSetters {
 public:
  static const ::speechService::VoiceVolumeInfo& voice_volume_info(const GetVoiceVolumeResponse* msg);
};

const ::speechService::VoiceVolumeInfo&
GetVoiceVolumeResponse::HasBitSetters::voice_volume_info(const GetVoiceVolumeResponse* msg) {
  return *msg->voice_volume_info_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetVoiceVolumeResponse::kVoiceVolumeInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetVoiceVolumeResponse::GetVoiceVolumeResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:speechService.GetVoiceVolumeResponse)
}
GetVoiceVolumeResponse::GetVoiceVolumeResponse(const GetVoiceVolumeResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_voice_volume_info()) {
    voice_volume_info_ = new ::speechService::VoiceVolumeInfo(*from.voice_volume_info_);
  } else {
    voice_volume_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:speechService.GetVoiceVolumeResponse)
}

void GetVoiceVolumeResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GetVoiceVolumeResponse_speech_2eproto.base);
  voice_volume_info_ = nullptr;
}

GetVoiceVolumeResponse::~GetVoiceVolumeResponse() {
  // @@protoc_insertion_point(destructor:speechService.GetVoiceVolumeResponse)
  SharedDtor();
}

void GetVoiceVolumeResponse::SharedDtor() {
  if (this != internal_default_instance()) delete voice_volume_info_;
}

void GetVoiceVolumeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetVoiceVolumeResponse& GetVoiceVolumeResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetVoiceVolumeResponse_speech_2eproto.base);
  return *internal_default_instance();
}


void GetVoiceVolumeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:speechService.GetVoiceVolumeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && voice_volume_info_ != nullptr) {
    delete voice_volume_info_;
  }
  voice_volume_info_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetVoiceVolumeResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetVoiceVolumeResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .speechService.VoiceVolumeInfo voice_volume_info = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::speechService::VoiceVolumeInfo::_InternalParse;
        object = msg->mutable_voice_volume_info();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetVoiceVolumeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:speechService.GetVoiceVolumeResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .speechService.VoiceVolumeInfo voice_volume_info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_voice_volume_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:speechService.GetVoiceVolumeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:speechService.GetVoiceVolumeResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetVoiceVolumeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:speechService.GetVoiceVolumeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .speechService.VoiceVolumeInfo voice_volume_info = 1;
  if (this->has_voice_volume_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::voice_volume_info(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:speechService.GetVoiceVolumeResponse)
}

::google::protobuf::uint8* GetVoiceVolumeResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechService.GetVoiceVolumeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .speechService.VoiceVolumeInfo voice_volume_info = 1;
  if (this->has_voice_volume_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::voice_volume_info(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechService.GetVoiceVolumeResponse)
  return target;
}

size_t GetVoiceVolumeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechService.GetVoiceVolumeResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .speechService.VoiceVolumeInfo voice_volume_info = 1;
  if (this->has_voice_volume_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *voice_volume_info_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetVoiceVolumeResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speechService.GetVoiceVolumeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetVoiceVolumeResponse* source =
      ::google::protobuf::DynamicCastToGenerated<GetVoiceVolumeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speechService.GetVoiceVolumeResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speechService.GetVoiceVolumeResponse)
    MergeFrom(*source);
  }
}

void GetVoiceVolumeResponse::MergeFrom(const GetVoiceVolumeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechService.GetVoiceVolumeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_voice_volume_info()) {
    mutable_voice_volume_info()->::speechService::VoiceVolumeInfo::MergeFrom(from.voice_volume_info());
  }
}

void GetVoiceVolumeResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speechService.GetVoiceVolumeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetVoiceVolumeResponse::CopyFrom(const GetVoiceVolumeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechService.GetVoiceVolumeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetVoiceVolumeResponse::IsInitialized() const {
  return true;
}

void GetVoiceVolumeResponse::Swap(GetVoiceVolumeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetVoiceVolumeResponse::InternalSwap(GetVoiceVolumeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(voice_volume_info_, other->voice_volume_info_);
}

::google::protobuf::Metadata GetVoiceVolumeResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_speech_2eproto);
  return ::file_level_metadata_speech_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SetParamsRequest::InitAsDefaultInstance() {
}
class SetParamsRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetParamsRequest::kParamsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetParamsRequest::SetParamsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:speechService.SetParamsRequest)
}
SetParamsRequest::SetParamsRequest(const SetParamsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  params_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.params().size() > 0) {
    params_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.params_);
  }
  // @@protoc_insertion_point(copy_constructor:speechService.SetParamsRequest)
}

void SetParamsRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SetParamsRequest_speech_2eproto.base);
  params_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SetParamsRequest::~SetParamsRequest() {
  // @@protoc_insertion_point(destructor:speechService.SetParamsRequest)
  SharedDtor();
}

void SetParamsRequest::SharedDtor() {
  params_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SetParamsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetParamsRequest& SetParamsRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SetParamsRequest_speech_2eproto.base);
  return *internal_default_instance();
}


void SetParamsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:speechService.SetParamsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  params_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SetParamsRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SetParamsRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bytes params = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_params();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SetParamsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:speechService.SetParamsRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes params = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:speechService.SetParamsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:speechService.SetParamsRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SetParamsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:speechService.SetParamsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes params = 1;
  if (this->params().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->params(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:speechService.SetParamsRequest)
}

::google::protobuf::uint8* SetParamsRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechService.SetParamsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes params = 1;
  if (this->params().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->params(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechService.SetParamsRequest)
  return target;
}

size_t SetParamsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechService.SetParamsRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes params = 1;
  if (this->params().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->params());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetParamsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speechService.SetParamsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetParamsRequest* source =
      ::google::protobuf::DynamicCastToGenerated<SetParamsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speechService.SetParamsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speechService.SetParamsRequest)
    MergeFrom(*source);
  }
}

void SetParamsRequest::MergeFrom(const SetParamsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechService.SetParamsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.params().size() > 0) {

    params_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.params_);
  }
}

void SetParamsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speechService.SetParamsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetParamsRequest::CopyFrom(const SetParamsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechService.SetParamsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetParamsRequest::IsInitialized() const {
  return true;
}

void SetParamsRequest::Swap(SetParamsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetParamsRequest::InternalSwap(SetParamsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  params_.Swap(&other->params_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata SetParamsRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_speech_2eproto);
  return ::file_level_metadata_speech_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SetParamsResponse::InitAsDefaultInstance() {
}
class SetParamsResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetParamsResponse::SetParamsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:speechService.SetParamsResponse)
}
SetParamsResponse::SetParamsResponse(const SetParamsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:speechService.SetParamsResponse)
}

void SetParamsResponse::SharedCtor() {
}

SetParamsResponse::~SetParamsResponse() {
  // @@protoc_insertion_point(destructor:speechService.SetParamsResponse)
  SharedDtor();
}

void SetParamsResponse::SharedDtor() {
}

void SetParamsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetParamsResponse& SetParamsResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SetParamsResponse_speech_2eproto.base);
  return *internal_default_instance();
}


void SetParamsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:speechService.SetParamsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SetParamsResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SetParamsResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SetParamsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:speechService.SetParamsResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:speechService.SetParamsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:speechService.SetParamsResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SetParamsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:speechService.SetParamsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:speechService.SetParamsResponse)
}

::google::protobuf::uint8* SetParamsResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechService.SetParamsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechService.SetParamsResponse)
  return target;
}

size_t SetParamsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechService.SetParamsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetParamsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speechService.SetParamsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SetParamsResponse* source =
      ::google::protobuf::DynamicCastToGenerated<SetParamsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speechService.SetParamsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speechService.SetParamsResponse)
    MergeFrom(*source);
  }
}

void SetParamsResponse::MergeFrom(const SetParamsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechService.SetParamsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SetParamsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speechService.SetParamsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetParamsResponse::CopyFrom(const SetParamsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechService.SetParamsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetParamsResponse::IsInitialized() const {
  return true;
}

void SetParamsResponse::Swap(SetParamsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetParamsResponse::InternalSwap(SetParamsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SetParamsResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_speech_2eproto);
  return ::file_level_metadata_speech_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace speechService
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::speechService::ErrorInfo* Arena::CreateMaybeMessage< ::speechService::ErrorInfo >(Arena* arena) {
  return Arena::CreateInternal< ::speechService::ErrorInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::speechService::VadInfo* Arena::CreateMaybeMessage< ::speechService::VadInfo >(Arena* arena) {
  return Arena::CreateInternal< ::speechService::VadInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::speechService::WakeUpInfo* Arena::CreateMaybeMessage< ::speechService::WakeUpInfo >(Arena* arena) {
  return Arena::CreateInternal< ::speechService::WakeUpInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::speechService::ResultInfo* Arena::CreateMaybeMessage< ::speechService::ResultInfo >(Arena* arena) {
  return Arena::CreateInternal< ::speechService::ResultInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::speechService::ListenSpeechEventRequest* Arena::CreateMaybeMessage< ::speechService::ListenSpeechEventRequest >(Arena* arena) {
  return Arena::CreateInternal< ::speechService::ListenSpeechEventRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::speechService::ListenSpeechEventResponse* Arena::CreateMaybeMessage< ::speechService::ListenSpeechEventResponse >(Arena* arena) {
  return Arena::CreateInternal< ::speechService::ListenSpeechEventResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::speechService::TextToSpeechRequest* Arena::CreateMaybeMessage< ::speechService::TextToSpeechRequest >(Arena* arena) {
  return Arena::CreateInternal< ::speechService::TextToSpeechRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::speechService::TextToSpeechResponse* Arena::CreateMaybeMessage< ::speechService::TextToSpeechResponse >(Arena* arena) {
  return Arena::CreateInternal< ::speechService::TextToSpeechResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::speechService::SpeechStopRequest* Arena::CreateMaybeMessage< ::speechService::SpeechStopRequest >(Arena* arena) {
  return Arena::CreateInternal< ::speechService::SpeechStopRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::speechService::SpeechStopResponse* Arena::CreateMaybeMessage< ::speechService::SpeechStopResponse >(Arena* arena) {
  return Arena::CreateInternal< ::speechService::SpeechStopResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::speechService::WakeUpRequest* Arena::CreateMaybeMessage< ::speechService::WakeUpRequest >(Arena* arena) {
  return Arena::CreateInternal< ::speechService::WakeUpRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::speechService::WakeUpResponse* Arena::CreateMaybeMessage< ::speechService::WakeUpResponse >(Arena* arena) {
  return Arena::CreateInternal< ::speechService::WakeUpResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::speechService::HibernateRequest* Arena::CreateMaybeMessage< ::speechService::HibernateRequest >(Arena* arena) {
  return Arena::CreateInternal< ::speechService::HibernateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::speechService::HibernateResponse* Arena::CreateMaybeMessage< ::speechService::HibernateResponse >(Arena* arena) {
  return Arena::CreateInternal< ::speechService::HibernateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::speechService::VoiceVolumeInfo* Arena::CreateMaybeMessage< ::speechService::VoiceVolumeInfo >(Arena* arena) {
  return Arena::CreateInternal< ::speechService::VoiceVolumeInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::speechService::SetVoiceVolumeRequest* Arena::CreateMaybeMessage< ::speechService::SetVoiceVolumeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::speechService::SetVoiceVolumeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::speechService::SetVoiceVolumeResponse* Arena::CreateMaybeMessage< ::speechService::SetVoiceVolumeResponse >(Arena* arena) {
  return Arena::CreateInternal< ::speechService::SetVoiceVolumeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::speechService::GetVoiceVolumeRequest* Arena::CreateMaybeMessage< ::speechService::GetVoiceVolumeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::speechService::GetVoiceVolumeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::speechService::GetVoiceVolumeResponse* Arena::CreateMaybeMessage< ::speechService::GetVoiceVolumeResponse >(Arena* arena) {
  return Arena::CreateInternal< ::speechService::GetVoiceVolumeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::speechService::SetParamsRequest* Arena::CreateMaybeMessage< ::speechService::SetParamsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::speechService::SetParamsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::speechService::SetParamsResponse* Arena::CreateMaybeMessage< ::speechService::SetParamsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::speechService::SetParamsResponse >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
