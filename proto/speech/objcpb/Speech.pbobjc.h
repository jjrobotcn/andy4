// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: speech.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30002
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30002 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class ErrorInfo;
@class ResultInfo;
@class VadInfo;
@class VoiceVolumeInfo;
@class WakeUpInfo;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum SpeechEvent

typedef GPB_ENUM(SpeechEvent) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  SpeechEvent_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  /** 零值 */
  SpeechEvent_UnknownEvent = 0,

  /** 唤醒 */
  SpeechEvent_WakeUp = 1,

  /** 休眠 */
  SpeechEvent_Hibernate = 2,

  /** 识别错误 */
  SpeechEvent_Error = 3,

  /** Voice activity detection 语音活性检测 */
  SpeechEvent_Vad = 4,

  /** 识别结果 */
  SpeechEvent_Result = 5,

  /** 文本转音频开始 */
  SpeechEvent_TtsStart = 6,

  /** 文本转音频结束 */
  SpeechEvent_TtsEnd = 7,
};

GPBEnumDescriptor *SpeechEvent_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL SpeechEvent_IsValidValue(int32_t value);

#pragma mark - Enum ErrorType

/** 错误类型 */
typedef GPB_ENUM(ErrorType) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  ErrorType_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  ErrorType_UnknownErrorType = 0,

  /** 超时 */
  ErrorType_ErrTimeout = 1,

  /** 参数错误 */
  ErrorType_ErrParams = 2,

  /** 授权错误 */
  ErrorType_ErrAuth = 3,

  /** 网络错误 */
  ErrorType_ErrNetwork = 4,

  /** 未就绪错误 */
  ErrorType_ErrNotReady = 5,

  /** 配置错误 */
  ErrorType_ErrConfig = 6,
};

GPBEnumDescriptor *ErrorType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL ErrorType_IsValidValue(int32_t value);

#pragma mark - Enum VadType

/** 语音检测 */
typedef GPB_ENUM(VadType) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  VadType_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  VadType_UnknowmVadType = 0,

  /** 开始 */
  VadType_Start = 1,

  /** 结束 */
  VadType_End = 2,

  /** 检测超时 */
  VadType_Timeout = 3,

  /** 音量改变 */
  VadType_VolumeChange = 4,
};

GPBEnumDescriptor *VadType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL VadType_IsValidValue(int32_t value);

#pragma mark - SpeechRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
@interface SpeechRoot : GPBRootObject
@end

#pragma mark - ErrorInfo

typedef GPB_ENUM(ErrorInfo_FieldNumber) {
  ErrorInfo_FieldNumber_ErrorType = 1,
  ErrorInfo_FieldNumber_Info = 2,
  ErrorInfo_FieldNumber_Code = 3,
};

@interface ErrorInfo : GPBMessage

/** 错误类型 */
@property(nonatomic, readwrite) ErrorType errorType;

/** 错误描述（设备提供， 可能为空） */
@property(nonatomic, readwrite, copy, null_resettable) NSString *info;

/** 错误码（设备提供， 可能为空） */
@property(nonatomic, readwrite, copy, null_resettable) NSString *code;

@end

/**
 * Fetches the raw value of a @c ErrorInfo's @c errorType property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t ErrorInfo_ErrorType_RawValue(ErrorInfo *message);
/**
 * Sets the raw value of an @c ErrorInfo's @c errorType property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetErrorInfo_ErrorType_RawValue(ErrorInfo *message, int32_t value);

#pragma mark - VadInfo

typedef GPB_ENUM(VadInfo_FieldNumber) {
  VadInfo_FieldNumber_VadType = 1,
  VadInfo_FieldNumber_Vol = 2,
};

@interface VadInfo : GPBMessage

@property(nonatomic, readwrite) VadType vadType;

/** 检测音量(VadType == VOLUME_CHANGE时此值有效) 0-100 */
@property(nonatomic, readwrite) uint32_t vol;

@end

/**
 * Fetches the raw value of a @c VadInfo's @c vadType property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t VadInfo_VadType_RawValue(VadInfo *message);
/**
 * Sets the raw value of an @c VadInfo's @c vadType property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetVadInfo_VadType_RawValue(VadInfo *message, int32_t value);

#pragma mark - WakeUpInfo

typedef GPB_ENUM(WakeUpInfo_FieldNumber) {
  WakeUpInfo_FieldNumber_Angle = 1,
  WakeUpInfo_FieldNumber_Beam = 2,
};

/**
 * 唤醒相关数据
 **/
@interface WakeUpInfo : GPBMessage

/** 唤醒角度, 麦克风朝向用户自身左(0)至右(180), 非语音唤醒为-1 */
@property(nonatomic, readwrite) int32_t angle;

/** 拾音波束号, 非语音唤醒为-1 */
@property(nonatomic, readwrite) int32_t beam;

@end

#pragma mark - ResultInfo

typedef GPB_ENUM(ResultInfo_FieldNumber) {
  ResultInfo_FieldNumber_WordsArray = 1,
  ResultInfo_FieldNumber_SentenceComplete = 2,
};

/**
 * 识别结果
 **/
@interface ResultInfo : GPBMessage

/** 分词结果 */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *wordsArray;
/** The number of items in @c wordsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger wordsArray_Count;

/** 是否为完整句 */
@property(nonatomic, readwrite) BOOL sentenceComplete;

@end

#pragma mark - ListenSpeechEventRequest

typedef GPB_ENUM(ListenSpeechEventRequest_FieldNumber) {
  ListenSpeechEventRequest_FieldNumber_WithVadVol = 1,
};

@interface ListenSpeechEventRequest : GPBMessage

/**
 * 是否获取vad状态传入语音音量动态变化
 * 启用与否不影响获取Vad_START, Vad_END
 * 仅影响Vad_VOLUME_CHANGE
 **/
@property(nonatomic, readwrite) BOOL withVadVol;

@end

#pragma mark - ListenSpeechEventResponse

typedef GPB_ENUM(ListenSpeechEventResponse_FieldNumber) {
  ListenSpeechEventResponse_FieldNumber_EventType = 1,
  ListenSpeechEventResponse_FieldNumber_WakeUpInfo = 2,
  ListenSpeechEventResponse_FieldNumber_VadInfo = 3,
  ListenSpeechEventResponse_FieldNumber_ResultInfo = 4,
  ListenSpeechEventResponse_FieldNumber_ErrorInfo = 5,
};

typedef GPB_ENUM(ListenSpeechEventResponse_SpeechEventOneof_OneOfCase) {
  ListenSpeechEventResponse_SpeechEventOneof_OneOfCase_GPBUnsetOneOfCase = 0,
  ListenSpeechEventResponse_SpeechEventOneof_OneOfCase_WakeUpInfo = 2,
  ListenSpeechEventResponse_SpeechEventOneof_OneOfCase_VadInfo = 3,
  ListenSpeechEventResponse_SpeechEventOneof_OneOfCase_ResultInfo = 4,
  ListenSpeechEventResponse_SpeechEventOneof_OneOfCase_ErrorInfo = 5,
};

@interface ListenSpeechEventResponse : GPBMessage

@property(nonatomic, readwrite) SpeechEvent eventType;

@property(nonatomic, readonly) ListenSpeechEventResponse_SpeechEventOneof_OneOfCase speechEventOneofOneOfCase;

@property(nonatomic, readwrite, strong, null_resettable) WakeUpInfo *wakeUpInfo;

@property(nonatomic, readwrite, strong, null_resettable) VadInfo *vadInfo;

@property(nonatomic, readwrite, strong, null_resettable) ResultInfo *resultInfo;

@property(nonatomic, readwrite, strong, null_resettable) ErrorInfo *errorInfo;

@end

/**
 * Fetches the raw value of a @c ListenSpeechEventResponse's @c eventType property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t ListenSpeechEventResponse_EventType_RawValue(ListenSpeechEventResponse *message);
/**
 * Sets the raw value of an @c ListenSpeechEventResponse's @c eventType property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetListenSpeechEventResponse_EventType_RawValue(ListenSpeechEventResponse *message, int32_t value);

/**
 * Clears whatever value was set for the oneof 'speechEventOneof'.
 **/
void ListenSpeechEventResponse_ClearSpeechEventOneofOneOfCase(ListenSpeechEventResponse *message);

#pragma mark - TextToSpeechRequest

typedef GPB_ENUM(TextToSpeechRequest_FieldNumber) {
  TextToSpeechRequest_FieldNumber_Text = 1,
};

@interface TextToSpeechRequest : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *text;

@end

#pragma mark - TextToSpeechResponse

@interface TextToSpeechResponse : GPBMessage

@end

#pragma mark - SpeechStopRequest

@interface SpeechStopRequest : GPBMessage

@end

#pragma mark - SpeechStopResponse

@interface SpeechStopResponse : GPBMessage

@end

#pragma mark - WakeUpRequest

typedef GPB_ENUM(WakeUpRequest_FieldNumber) {
  WakeUpRequest_FieldNumber_AfterWakeUpSpeechText = 1,
};

@interface WakeUpRequest : GPBMessage

/** 唤醒后语音文本 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *afterWakeUpSpeechText;

@end

#pragma mark - WakeUpResponse

@interface WakeUpResponse : GPBMessage

@end

#pragma mark - HibernateRequest

@interface HibernateRequest : GPBMessage

@end

#pragma mark - HibernateResponse

@interface HibernateResponse : GPBMessage

@end

#pragma mark - VoiceVolumeInfo

typedef GPB_ENUM(VoiceVolumeInfo_FieldNumber) {
  VoiceVolumeInfo_FieldNumber_Vol = 1,
};

/**
 * 音量信息
 **/
@interface VoiceVolumeInfo : GPBMessage

/**
 * 音量值 0-10
 * aiui模块硬件限制值: 2-10
 **/
@property(nonatomic, readwrite) uint32_t vol;

@end

#pragma mark - SetVoiceVolumeRequest

typedef GPB_ENUM(SetVoiceVolumeRequest_FieldNumber) {
  SetVoiceVolumeRequest_FieldNumber_VoiceVolumeInfo = 1,
};

@interface SetVoiceVolumeRequest : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) VoiceVolumeInfo *voiceVolumeInfo;
/** Test to see if @c voiceVolumeInfo has been set. */
@property(nonatomic, readwrite) BOOL hasVoiceVolumeInfo;

@end

#pragma mark - SetVoiceVolumeResponse

typedef GPB_ENUM(SetVoiceVolumeResponse_FieldNumber) {
  SetVoiceVolumeResponse_FieldNumber_VoiceVolumeInfo = 1,
};

@interface SetVoiceVolumeResponse : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) VoiceVolumeInfo *voiceVolumeInfo;
/** Test to see if @c voiceVolumeInfo has been set. */
@property(nonatomic, readwrite) BOOL hasVoiceVolumeInfo;

@end

#pragma mark - GetVoiceVolumeRequest

@interface GetVoiceVolumeRequest : GPBMessage

@end

#pragma mark - GetVoiceVolumeResponse

typedef GPB_ENUM(GetVoiceVolumeResponse_FieldNumber) {
  GetVoiceVolumeResponse_FieldNumber_VoiceVolumeInfo = 1,
};

@interface GetVoiceVolumeResponse : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) VoiceVolumeInfo *voiceVolumeInfo;
/** Test to see if @c voiceVolumeInfo has been set. */
@property(nonatomic, readwrite) BOOL hasVoiceVolumeInfo;

@end

#pragma mark - SetParamsRequest

typedef GPB_ENUM(SetParamsRequest_FieldNumber) {
  SetParamsRequest_FieldNumber_Params = 1,
};

@interface SetParamsRequest : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSData *params;

@end

#pragma mark - SetParamsResponse

@interface SetParamsResponse : GPBMessage

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
