// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: sensor.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SensorService {

  /// <summary>Holder for reflection information generated from sensor.proto</summary>
  public static partial class SensorReflection {

    #region Descriptor
    /// <summary>File descriptor for sensor.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SensorReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgxzZW5zb3IucHJvdG8SDXNlbnNvclNlcnZpY2UiEgoQR2V0RGV0ZWN0UmVx",
            "dWVzdCJ3ChFHZXREZXRlY3RSZXNwb25zZRIxCglkaXJlY3Rpb24YASABKA4y",
            "Hi5zZW5zb3JTZXJ2aWNlLkRldGVjdERpcmVjdGlvbhIvCghkaXN0YW5jZRgC",
            "IAEoDjIdLnNlbnNvclNlcnZpY2UuRGV0ZWN0RGlzdGFuY2UiGwoZR2V0TW90",
            "aW9uSW5kdWN0aW9uUmVxdWVzdCI5ChpHZXRNb3Rpb25JbmR1Y3Rpb25SZXNw",
            "b25zZRIMCgRsZWZ0GAEgASgIEg0KBXJpZ2h0GAIgASgIIhEKD0dldFRvdWNo",
            "UmVxdWVzdCJHChBHZXRUb3VjaFJlc3BvbnNlEhEKCWhhbmRfbGVmdBgBIAEo",
            "CBISCgpoYW5kX3JpZ2h0GAIgASgIEgwKBGhlYWQYAyABKAgiZgoHRGF0YU9i",
            "cxIuCgRkYXRhGAEgAygLMiAuc2Vuc29yU2VydmljZS5EYXRhT2JzLkRhdGFF",
            "bnRyeRorCglEYXRhRW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgF",
            "OgI4ASIoCgdEYXRhQWd2Eg8KB2NhcmRfaWQYASABKAkSDAoEZGF0YRgCIAMo",
            "CCJzCglEYXRhVG91Y2gSNgoHdG91Y2hlZBgBIAMoCzIlLnNlbnNvclNlcnZp",
            "Y2UuRGF0YVRvdWNoLlRvdWNoZWRFbnRyeRouCgxUb3VjaGVkRW50cnkSCwoD",
            "a2V5GAEgASgJEg0KBXZhbHVlGAIgASgIOgI4ASKmAQoJVXBkYXRlUmVxEiYK",
            "BWR0eXBlGAEgASgOMhcuc2Vuc29yU2VydmljZS5EYXRhVHlwZRIjCgNvYnMY",
            "AiABKAsyFi5zZW5zb3JTZXJ2aWNlLkRhdGFPYnMSIwoDYWd2GAMgASgLMhYu",
            "c2Vuc29yU2VydmljZS5EYXRhQWd2EicKBXRvdWNoGAUgASgLMhguc2Vuc29y",
            "U2VydmljZS5EYXRhVG91Y2giDAoKUmF3UmVxdWVzdCKoAQoLUmF3UmVzcG9u",
            "c2USJgoFZHR5cGUYASABKA4yFy5zZW5zb3JTZXJ2aWNlLkRhdGFUeXBlEiMK",
            "A29icxgCIAEoCzIWLnNlbnNvclNlcnZpY2UuRGF0YU9icxIjCgNhZ3YYAyAB",
            "KAsyFi5zZW5zb3JTZXJ2aWNlLkRhdGFBZ3YSJwoFdG91Y2gYBSABKAsyGC5z",
            "ZW5zb3JTZXJ2aWNlLkRhdGFUb3VjaCpSCg9EZXRlY3REaXJlY3Rpb24SDQoJ",
            "X1pFUk9fRElSEAASDwoLUkVMRUFTRV9ESVIQARIICgRMRUZUEAISCgoGQ0VO",
            "VEVSEAMSCQoFUklHSFQQBCpRCg5EZXRlY3REaXN0YW5jZRINCglfWkVST19E",
            "SVMQABIPCgtSRUxFQVNFX0RJUxABEgkKBUNMT1NFEAISCgoGTUVESVVNEAMS",
            "CAoETE9ORxAEKjQKCERhdGFUeXBlEgsKB1VOS05PV04QABIHCgNPQlMQARIH",
            "CgNBR1YQAhIJCgVUT1VDSBAEMuUCCg1TZW5zb3JTZXJ2aWNlElIKCUdldERl",
            "dGVjdBIfLnNlbnNvclNlcnZpY2UuR2V0RGV0ZWN0UmVxdWVzdBogLnNlbnNv",
            "clNlcnZpY2UuR2V0RGV0ZWN0UmVzcG9uc2UiADABEm0KEkdldE1vdGlvbklu",
            "ZHVjdGlvbhIoLnNlbnNvclNlcnZpY2UuR2V0TW90aW9uSW5kdWN0aW9uUmVx",
            "dWVzdBopLnNlbnNvclNlcnZpY2UuR2V0TW90aW9uSW5kdWN0aW9uUmVzcG9u",
            "c2UiADABEk8KCEdldFRvdWNoEh4uc2Vuc29yU2VydmljZS5HZXRUb3VjaFJl",
            "cXVlc3QaHy5zZW5zb3JTZXJ2aWNlLkdldFRvdWNoUmVzcG9uc2UiADABEkAK",
            "A1JhdxIZLnNlbnNvclNlcnZpY2UuUmF3UmVxdWVzdBoaLnNlbnNvclNlcnZp",
            "Y2UuUmF3UmVzcG9uc2UiADABYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::SensorService.DetectDirection), typeof(global::SensorService.DetectDistance), typeof(global::SensorService.DataType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SensorService.GetDetectRequest), global::SensorService.GetDetectRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SensorService.GetDetectResponse), global::SensorService.GetDetectResponse.Parser, new[]{ "Direction", "Distance" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SensorService.GetMotionInductionRequest), global::SensorService.GetMotionInductionRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SensorService.GetMotionInductionResponse), global::SensorService.GetMotionInductionResponse.Parser, new[]{ "Left", "Right" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SensorService.GetTouchRequest), global::SensorService.GetTouchRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SensorService.GetTouchResponse), global::SensorService.GetTouchResponse.Parser, new[]{ "HandLeft", "HandRight", "Head" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SensorService.DataObs), global::SensorService.DataObs.Parser, new[]{ "Data" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::SensorService.DataAgv), global::SensorService.DataAgv.Parser, new[]{ "CardId", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SensorService.DataTouch), global::SensorService.DataTouch.Parser, new[]{ "Touched" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::SensorService.UpdateReq), global::SensorService.UpdateReq.Parser, new[]{ "Dtype", "Obs", "Agv", "Touch" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SensorService.RawRequest), global::SensorService.RawRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SensorService.RawResponse), global::SensorService.RawResponse.Parser, new[]{ "Dtype", "Obs", "Agv", "Touch" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// 检测方向
  /// </summary>
  public enum DetectDirection {
    /// <summary>
    /// 零值, 不使用
    /// </summary>
    [pbr::OriginalName("_ZERO_DIR")] ZeroDir = 0,
    /// <summary>
    /// 释放
    /// </summary>
    [pbr::OriginalName("RELEASE_DIR")] ReleaseDir = 1,
    /// <summary>
    /// 居左
    /// </summary>
    [pbr::OriginalName("LEFT")] Left = 2,
    /// <summary>
    /// 居中
    /// </summary>
    [pbr::OriginalName("CENTER")] Center = 3,
    /// <summary>
    /// 居右
    /// </summary>
    [pbr::OriginalName("RIGHT")] Right = 4,
  }

  /// <summary>
  /// 检测距离
  /// </summary>
  public enum DetectDistance {
    /// <summary>
    /// 零值, 不使用
    /// </summary>
    [pbr::OriginalName("_ZERO_DIS")] ZeroDis = 0,
    /// <summary>
    /// 释放
    /// </summary>
    [pbr::OriginalName("RELEASE_DIS")] ReleaseDis = 1,
    /// <summary>
    /// 近距
    /// </summary>
    [pbr::OriginalName("CLOSE")] Close = 2,
    /// <summary>
    /// 中距
    /// </summary>
    [pbr::OriginalName("MEDIUM")] Medium = 3,
    /// <summary>
    /// 远距
    /// </summary>
    [pbr::OriginalName("LONG")] Long = 4,
  }

  public enum DataType {
    [pbr::OriginalName("UNKNOWN")] Unknown = 0,
    [pbr::OriginalName("OBS")] Obs = 1,
    [pbr::OriginalName("AGV")] Agv = 2,
    [pbr::OriginalName("TOUCH")] Touch = 4,
  }

  #endregion

  #region Messages
  public sealed partial class GetDetectRequest : pb::IMessage<GetDetectRequest> {
    private static readonly pb::MessageParser<GetDetectRequest> _parser = new pb::MessageParser<GetDetectRequest>(() => new GetDetectRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetDetectRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SensorService.SensorReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetDetectRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetDetectRequest(GetDetectRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetDetectRequest Clone() {
      return new GetDetectRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetDetectRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetDetectRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetDetectRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// 传感器状态流数据
  /// stype: 数据类型
  /// </summary>
  public sealed partial class GetDetectResponse : pb::IMessage<GetDetectResponse> {
    private static readonly pb::MessageParser<GetDetectResponse> _parser = new pb::MessageParser<GetDetectResponse>(() => new GetDetectResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetDetectResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SensorService.SensorReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetDetectResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetDetectResponse(GetDetectResponse other) : this() {
      direction_ = other.direction_;
      distance_ = other.distance_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetDetectResponse Clone() {
      return new GetDetectResponse(this);
    }

    /// <summary>Field number for the "direction" field.</summary>
    public const int DirectionFieldNumber = 1;
    private global::SensorService.DetectDirection direction_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SensorService.DetectDirection Direction {
      get { return direction_; }
      set {
        direction_ = value;
      }
    }

    /// <summary>Field number for the "distance" field.</summary>
    public const int DistanceFieldNumber = 2;
    private global::SensorService.DetectDistance distance_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SensorService.DetectDistance Distance {
      get { return distance_; }
      set {
        distance_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetDetectResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetDetectResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Direction != other.Direction) return false;
      if (Distance != other.Distance) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Direction != 0) hash ^= Direction.GetHashCode();
      if (Distance != 0) hash ^= Distance.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Direction != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Direction);
      }
      if (Distance != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Distance);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Direction != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Direction);
      }
      if (Distance != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Distance);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetDetectResponse other) {
      if (other == null) {
        return;
      }
      if (other.Direction != 0) {
        Direction = other.Direction;
      }
      if (other.Distance != 0) {
        Distance = other.Distance;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Direction = (global::SensorService.DetectDirection) input.ReadEnum();
            break;
          }
          case 16: {
            Distance = (global::SensorService.DetectDistance) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetMotionInductionRequest : pb::IMessage<GetMotionInductionRequest> {
    private static readonly pb::MessageParser<GetMotionInductionRequest> _parser = new pb::MessageParser<GetMotionInductionRequest>(() => new GetMotionInductionRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetMotionInductionRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SensorService.SensorReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetMotionInductionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetMotionInductionRequest(GetMotionInductionRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetMotionInductionRequest Clone() {
      return new GetMotionInductionRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetMotionInductionRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetMotionInductionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetMotionInductionRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class GetMotionInductionResponse : pb::IMessage<GetMotionInductionResponse> {
    private static readonly pb::MessageParser<GetMotionInductionResponse> _parser = new pb::MessageParser<GetMotionInductionResponse>(() => new GetMotionInductionResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetMotionInductionResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SensorService.SensorReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetMotionInductionResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetMotionInductionResponse(GetMotionInductionResponse other) : this() {
      left_ = other.left_;
      right_ = other.right_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetMotionInductionResponse Clone() {
      return new GetMotionInductionResponse(this);
    }

    /// <summary>Field number for the "left" field.</summary>
    public const int LeftFieldNumber = 1;
    private bool left_;
    /// <summary>
    /// 左侧感应指示
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Left {
      get { return left_; }
      set {
        left_ = value;
      }
    }

    /// <summary>Field number for the "right" field.</summary>
    public const int RightFieldNumber = 2;
    private bool right_;
    /// <summary>
    /// 右侧感应指示
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Right {
      get { return right_; }
      set {
        right_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetMotionInductionResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetMotionInductionResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Left != other.Left) return false;
      if (Right != other.Right) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Left != false) hash ^= Left.GetHashCode();
      if (Right != false) hash ^= Right.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Left != false) {
        output.WriteRawTag(8);
        output.WriteBool(Left);
      }
      if (Right != false) {
        output.WriteRawTag(16);
        output.WriteBool(Right);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Left != false) {
        size += 1 + 1;
      }
      if (Right != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetMotionInductionResponse other) {
      if (other == null) {
        return;
      }
      if (other.Left != false) {
        Left = other.Left;
      }
      if (other.Right != false) {
        Right = other.Right;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Left = input.ReadBool();
            break;
          }
          case 16: {
            Right = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetTouchRequest : pb::IMessage<GetTouchRequest> {
    private static readonly pb::MessageParser<GetTouchRequest> _parser = new pb::MessageParser<GetTouchRequest>(() => new GetTouchRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetTouchRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SensorService.SensorReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTouchRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTouchRequest(GetTouchRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTouchRequest Clone() {
      return new GetTouchRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetTouchRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetTouchRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetTouchRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// 触摸状态流数据
  /// </summary>
  public sealed partial class GetTouchResponse : pb::IMessage<GetTouchResponse> {
    private static readonly pb::MessageParser<GetTouchResponse> _parser = new pb::MessageParser<GetTouchResponse>(() => new GetTouchResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetTouchResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SensorService.SensorReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTouchResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTouchResponse(GetTouchResponse other) : this() {
      handLeft_ = other.handLeft_;
      handRight_ = other.handRight_;
      head_ = other.head_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTouchResponse Clone() {
      return new GetTouchResponse(this);
    }

    /// <summary>Field number for the "hand_left" field.</summary>
    public const int HandLeftFieldNumber = 1;
    private bool handLeft_;
    /// <summary>
    /// 左手触摸
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HandLeft {
      get { return handLeft_; }
      set {
        handLeft_ = value;
      }
    }

    /// <summary>Field number for the "hand_right" field.</summary>
    public const int HandRightFieldNumber = 2;
    private bool handRight_;
    /// <summary>
    /// 右手触摸
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HandRight {
      get { return handRight_; }
      set {
        handRight_ = value;
      }
    }

    /// <summary>Field number for the "head" field.</summary>
    public const int HeadFieldNumber = 3;
    private bool head_;
    /// <summary>
    /// 头部触摸
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Head {
      get { return head_; }
      set {
        head_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetTouchResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetTouchResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HandLeft != other.HandLeft) return false;
      if (HandRight != other.HandRight) return false;
      if (Head != other.Head) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HandLeft != false) hash ^= HandLeft.GetHashCode();
      if (HandRight != false) hash ^= HandRight.GetHashCode();
      if (Head != false) hash ^= Head.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HandLeft != false) {
        output.WriteRawTag(8);
        output.WriteBool(HandLeft);
      }
      if (HandRight != false) {
        output.WriteRawTag(16);
        output.WriteBool(HandRight);
      }
      if (Head != false) {
        output.WriteRawTag(24);
        output.WriteBool(Head);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HandLeft != false) {
        size += 1 + 1;
      }
      if (HandRight != false) {
        size += 1 + 1;
      }
      if (Head != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetTouchResponse other) {
      if (other == null) {
        return;
      }
      if (other.HandLeft != false) {
        HandLeft = other.HandLeft;
      }
      if (other.HandRight != false) {
        HandRight = other.HandRight;
      }
      if (other.Head != false) {
        Head = other.Head;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            HandLeft = input.ReadBool();
            break;
          }
          case 16: {
            HandRight = input.ReadBool();
            break;
          }
          case 24: {
            Head = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 避障传感器数据
  /// e.g. {"topRight: 30", "bottomMiddle": 10}
  /// *topRight等key非最终使用, 仅作为示例
  /// </summary>
  public sealed partial class DataObs : pb::IMessage<DataObs> {
    private static readonly pb::MessageParser<DataObs> _parser = new pb::MessageParser<DataObs>(() => new DataObs());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DataObs> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SensorService.SensorReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataObs() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataObs(DataObs other) : this() {
      data_ = other.data_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataObs Clone() {
      return new DataObs(this);
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 1;
    private static readonly pbc::MapField<string, int>.Codec _map_data_codec
        = new pbc::MapField<string, int>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForInt32(16), 10);
    private readonly pbc::MapField<string, int> data_ = new pbc::MapField<string, int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, int> Data {
      get { return data_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DataObs);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DataObs other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!Data.Equals(other.Data)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= Data.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      data_.WriteTo(output, _map_data_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += data_.CalculateSize(_map_data_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DataObs other) {
      if (other == null) {
        return;
      }
      data_.Add(other.data_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            data_.AddEntriesFrom(input, _map_data_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// agv数据
  /// card_id: 感应卡点id
  /// data: 是否为激活状态列表
  /// </summary>
  public sealed partial class DataAgv : pb::IMessage<DataAgv> {
    private static readonly pb::MessageParser<DataAgv> _parser = new pb::MessageParser<DataAgv>(() => new DataAgv());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DataAgv> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SensorService.SensorReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataAgv() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataAgv(DataAgv other) : this() {
      cardId_ = other.cardId_;
      data_ = other.data_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataAgv Clone() {
      return new DataAgv(this);
    }

    /// <summary>Field number for the "card_id" field.</summary>
    public const int CardIdFieldNumber = 1;
    private string cardId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CardId {
      get { return cardId_; }
      set {
        cardId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 2;
    private static readonly pb::FieldCodec<bool> _repeated_data_codec
        = pb::FieldCodec.ForBool(18);
    private readonly pbc::RepeatedField<bool> data_ = new pbc::RepeatedField<bool>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<bool> Data {
      get { return data_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DataAgv);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DataAgv other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CardId != other.CardId) return false;
      if(!data_.Equals(other.data_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CardId.Length != 0) hash ^= CardId.GetHashCode();
      hash ^= data_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CardId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CardId);
      }
      data_.WriteTo(output, _repeated_data_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CardId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CardId);
      }
      size += data_.CalculateSize(_repeated_data_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DataAgv other) {
      if (other == null) {
        return;
      }
      if (other.CardId.Length != 0) {
        CardId = other.CardId;
      }
      data_.Add(other.data_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            CardId = input.ReadString();
            break;
          }
          case 18:
          case 16: {
            data_.AddEntriesFrom(input, _repeated_data_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 触摸数据
  /// e.g. {hand_left: false, hand_right: true, head: true}
  /// </summary>
  public sealed partial class DataTouch : pb::IMessage<DataTouch> {
    private static readonly pb::MessageParser<DataTouch> _parser = new pb::MessageParser<DataTouch>(() => new DataTouch());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DataTouch> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SensorService.SensorReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataTouch() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataTouch(DataTouch other) : this() {
      touched_ = other.touched_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataTouch Clone() {
      return new DataTouch(this);
    }

    /// <summary>Field number for the "touched" field.</summary>
    public const int TouchedFieldNumber = 1;
    private static readonly pbc::MapField<string, bool>.Codec _map_touched_codec
        = new pbc::MapField<string, bool>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForBool(16), 10);
    private readonly pbc::MapField<string, bool> touched_ = new pbc::MapField<string, bool>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, bool> Touched {
      get { return touched_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DataTouch);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DataTouch other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!Touched.Equals(other.Touched)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= Touched.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      touched_.WriteTo(output, _map_touched_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += touched_.CalculateSize(_map_touched_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DataTouch other) {
      if (other == null) {
        return;
      }
      touched_.Add(other.touched_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            touched_.AddEntriesFrom(input, _map_touched_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 使用器数据更新请求
  /// dtype: 传感器更新数据类型
  /// </summary>
  public sealed partial class UpdateReq : pb::IMessage<UpdateReq> {
    private static readonly pb::MessageParser<UpdateReq> _parser = new pb::MessageParser<UpdateReq>(() => new UpdateReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SensorService.SensorReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateReq(UpdateReq other) : this() {
      dtype_ = other.dtype_;
      obs_ = other.obs_ != null ? other.obs_.Clone() : null;
      agv_ = other.agv_ != null ? other.agv_.Clone() : null;
      touch_ = other.touch_ != null ? other.touch_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateReq Clone() {
      return new UpdateReq(this);
    }

    /// <summary>Field number for the "dtype" field.</summary>
    public const int DtypeFieldNumber = 1;
    private global::SensorService.DataType dtype_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SensorService.DataType Dtype {
      get { return dtype_; }
      set {
        dtype_ = value;
      }
    }

    /// <summary>Field number for the "obs" field.</summary>
    public const int ObsFieldNumber = 2;
    private global::SensorService.DataObs obs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SensorService.DataObs Obs {
      get { return obs_; }
      set {
        obs_ = value;
      }
    }

    /// <summary>Field number for the "agv" field.</summary>
    public const int AgvFieldNumber = 3;
    private global::SensorService.DataAgv agv_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SensorService.DataAgv Agv {
      get { return agv_; }
      set {
        agv_ = value;
      }
    }

    /// <summary>Field number for the "touch" field.</summary>
    public const int TouchFieldNumber = 5;
    private global::SensorService.DataTouch touch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SensorService.DataTouch Touch {
      get { return touch_; }
      set {
        touch_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Dtype != other.Dtype) return false;
      if (!object.Equals(Obs, other.Obs)) return false;
      if (!object.Equals(Agv, other.Agv)) return false;
      if (!object.Equals(Touch, other.Touch)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Dtype != 0) hash ^= Dtype.GetHashCode();
      if (obs_ != null) hash ^= Obs.GetHashCode();
      if (agv_ != null) hash ^= Agv.GetHashCode();
      if (touch_ != null) hash ^= Touch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Dtype != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Dtype);
      }
      if (obs_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Obs);
      }
      if (agv_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Agv);
      }
      if (touch_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Touch);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Dtype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Dtype);
      }
      if (obs_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Obs);
      }
      if (agv_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Agv);
      }
      if (touch_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Touch);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateReq other) {
      if (other == null) {
        return;
      }
      if (other.Dtype != 0) {
        Dtype = other.Dtype;
      }
      if (other.obs_ != null) {
        if (obs_ == null) {
          Obs = new global::SensorService.DataObs();
        }
        Obs.MergeFrom(other.Obs);
      }
      if (other.agv_ != null) {
        if (agv_ == null) {
          Agv = new global::SensorService.DataAgv();
        }
        Agv.MergeFrom(other.Agv);
      }
      if (other.touch_ != null) {
        if (touch_ == null) {
          Touch = new global::SensorService.DataTouch();
        }
        Touch.MergeFrom(other.Touch);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Dtype = (global::SensorService.DataType) input.ReadEnum();
            break;
          }
          case 18: {
            if (obs_ == null) {
              Obs = new global::SensorService.DataObs();
            }
            input.ReadMessage(Obs);
            break;
          }
          case 26: {
            if (agv_ == null) {
              Agv = new global::SensorService.DataAgv();
            }
            input.ReadMessage(Agv);
            break;
          }
          case 42: {
            if (touch_ == null) {
              Touch = new global::SensorService.DataTouch();
            }
            input.ReadMessage(Touch);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RawRequest : pb::IMessage<RawRequest> {
    private static readonly pb::MessageParser<RawRequest> _parser = new pb::MessageParser<RawRequest>(() => new RawRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RawRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SensorService.SensorReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RawRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RawRequest(RawRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RawRequest Clone() {
      return new RawRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RawRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RawRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RawRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// 原始数据返回
  /// dtype: 传感器更新数据类型
  /// </summary>
  public sealed partial class RawResponse : pb::IMessage<RawResponse> {
    private static readonly pb::MessageParser<RawResponse> _parser = new pb::MessageParser<RawResponse>(() => new RawResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RawResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SensorService.SensorReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RawResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RawResponse(RawResponse other) : this() {
      dtype_ = other.dtype_;
      obs_ = other.obs_ != null ? other.obs_.Clone() : null;
      agv_ = other.agv_ != null ? other.agv_.Clone() : null;
      touch_ = other.touch_ != null ? other.touch_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RawResponse Clone() {
      return new RawResponse(this);
    }

    /// <summary>Field number for the "dtype" field.</summary>
    public const int DtypeFieldNumber = 1;
    private global::SensorService.DataType dtype_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SensorService.DataType Dtype {
      get { return dtype_; }
      set {
        dtype_ = value;
      }
    }

    /// <summary>Field number for the "obs" field.</summary>
    public const int ObsFieldNumber = 2;
    private global::SensorService.DataObs obs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SensorService.DataObs Obs {
      get { return obs_; }
      set {
        obs_ = value;
      }
    }

    /// <summary>Field number for the "agv" field.</summary>
    public const int AgvFieldNumber = 3;
    private global::SensorService.DataAgv agv_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SensorService.DataAgv Agv {
      get { return agv_; }
      set {
        agv_ = value;
      }
    }

    /// <summary>Field number for the "touch" field.</summary>
    public const int TouchFieldNumber = 5;
    private global::SensorService.DataTouch touch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SensorService.DataTouch Touch {
      get { return touch_; }
      set {
        touch_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RawResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RawResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Dtype != other.Dtype) return false;
      if (!object.Equals(Obs, other.Obs)) return false;
      if (!object.Equals(Agv, other.Agv)) return false;
      if (!object.Equals(Touch, other.Touch)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Dtype != 0) hash ^= Dtype.GetHashCode();
      if (obs_ != null) hash ^= Obs.GetHashCode();
      if (agv_ != null) hash ^= Agv.GetHashCode();
      if (touch_ != null) hash ^= Touch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Dtype != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Dtype);
      }
      if (obs_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Obs);
      }
      if (agv_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Agv);
      }
      if (touch_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Touch);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Dtype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Dtype);
      }
      if (obs_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Obs);
      }
      if (agv_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Agv);
      }
      if (touch_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Touch);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RawResponse other) {
      if (other == null) {
        return;
      }
      if (other.Dtype != 0) {
        Dtype = other.Dtype;
      }
      if (other.obs_ != null) {
        if (obs_ == null) {
          Obs = new global::SensorService.DataObs();
        }
        Obs.MergeFrom(other.Obs);
      }
      if (other.agv_ != null) {
        if (agv_ == null) {
          Agv = new global::SensorService.DataAgv();
        }
        Agv.MergeFrom(other.Agv);
      }
      if (other.touch_ != null) {
        if (touch_ == null) {
          Touch = new global::SensorService.DataTouch();
        }
        Touch.MergeFrom(other.Touch);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Dtype = (global::SensorService.DataType) input.ReadEnum();
            break;
          }
          case 18: {
            if (obs_ == null) {
              Obs = new global::SensorService.DataObs();
            }
            input.ReadMessage(Obs);
            break;
          }
          case 26: {
            if (agv_ == null) {
              Agv = new global::SensorService.DataAgv();
            }
            input.ReadMessage(Agv);
            break;
          }
          case 42: {
            if (touch_ == null) {
              Touch = new global::SensorService.DataTouch();
            }
            input.ReadMessage(Touch);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
