syntax = "proto3";

package sensorService;

option go_package = "sensorpb";

option java_package = "com.jjrobot.andy4.sensorpb";
option java_outer_classname = "SensorServicePB";

// sensorService.SensorService 传感器服务
//
// 开发管理平台功能参考: http://10.10.10.2/detect
service SensorService {
    // GetDetect 计算前方障碍的距离与方法
    //
    // 此计算方法受GetMotionInduction数据影响
    rpc GetDetect (GetDetectRequest) returns (stream GetDetectResponse) {}

    // GetMotionInduction 获取动态感应数据
    rpc GetMotionInduction(GetMotionInductionRequest) returns (stream GetMotionInductionResponse) {}

    // GetTouch 获取触摸感应数据
    //
    // 目前支持头部与手部的触摸
    rpc GetTouch (GetTouchRequest) returns (stream GetTouchResponse) {}

    // Raw 内部传感器数据
    //
    // 此方法为底层数据方法，用于上层的计算与调试，通常开发用户不应使用此方法
    rpc Raw (RawRequest) returns (stream RawResponse) {}
}

// 检测方向
enum DetectDirection {
    _ZERO_DIR = 0; // 零值, 不使用
    RELEASE_DIR = 1; // 释放
    LEFT = 2; // 居左
    CENTER = 3; // 居中
    RIGHT = 4; // 居右
}

// 检测距离
enum DetectDistance {
    _ZERO_DIS = 0; // 零值, 不使用
    RELEASE_DIS = 1; // 释放
    CLOSE = 2; // 近距
    MEDIUM = 3; // 中距
    LONG = 4; // 远距
}

message GetDetectRequest {}

// 传感器状态流数据
// stype: 数据类型
message GetDetectResponse {
    DetectDirection direction = 1;
    DetectDistance distance = 2;
}

message GetMotionInductionRequest {}

message GetMotionInductionResponse {
    bool left = 1; // 左侧感应指示
    bool right = 2; // 右侧感应指示
}

message GetTouchRequest {}

// 触摸状态流数据
message GetTouchResponse {
    bool hand_left = 1; // 左手触摸
    bool hand_right = 2; // 右手触摸
    bool head = 3; // 头部触摸
}

enum DataType {
    UNKNOWN = 0;
    OBS = 1;
    AGV = 2;
    TOUCH = 4;
}

// 避障传感器数据
// e.g. {"topRight: 30", "bottomMiddle": 10}
// *topRight等key非最终使用, 仅作为示例
message DataObs {
    map<string, int32> data = 1;
}

// agv数据
// card_id: 感应卡点id
// data: 是否为激活状态列表
message DataAgv {
    string card_id = 1;
    repeated bool data = 2;
}

// 触摸数据
// e.g. {hand_left: false, hand_right: true, head: true}
message DataTouch {
    map<string, bool> touched = 1;
}

// 使用器数据更新请求
// dtype: 传感器更新数据类型
message UpdateReq {
    DataType dtype = 1;
    DataObs obs = 2;
    DataAgv agv = 3;
    DataTouch touch = 5;
}

message RawRequest {}

// 原始数据返回
// dtype: 传感器更新数据类型
message RawResponse {
    DataType dtype = 1;
    DataObs obs = 2;
    DataAgv agv = 3;
    DataTouch touch = 5;
}