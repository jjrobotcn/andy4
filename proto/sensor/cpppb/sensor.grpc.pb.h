// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: sensor.proto
#ifndef GRPC_sensor_2eproto__INCLUDED
#define GRPC_sensor_2eproto__INCLUDED

#include "sensor.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc_impl {
class Channel;
class CompletionQueue;
class ServerCompletionQueue;
}  // namespace grpc_impl

namespace grpc {
namespace experimental {
template <typename RequestT, typename ResponseT>
class MessageAllocator;
}  // namespace experimental
}  // namespace grpc_impl

namespace grpc {
class ServerContext;
}  // namespace grpc

namespace sensorService {

class SensorService final {
 public:
  static constexpr char const* service_full_name() {
    return "sensorService.SensorService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // 获取感应数据流
    std::unique_ptr< ::grpc::ClientReaderInterface< ::sensorService::GetDetectResponse>> GetDetect(::grpc::ClientContext* context, const ::sensorService::GetDetectRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::sensorService::GetDetectResponse>>(GetDetectRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::sensorService::GetDetectResponse>> AsyncGetDetect(::grpc::ClientContext* context, const ::sensorService::GetDetectRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::sensorService::GetDetectResponse>>(AsyncGetDetectRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::sensorService::GetDetectResponse>> PrepareAsyncGetDetect(::grpc::ClientContext* context, const ::sensorService::GetDetectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::sensorService::GetDetectResponse>>(PrepareAsyncGetDetectRaw(context, request, cq));
    }
    // 获取动态感应数据
    // 场景示例： 迎宾感应
    std::unique_ptr< ::grpc::ClientReaderInterface< ::sensorService::GetMotionInductionResponse>> GetMotionInduction(::grpc::ClientContext* context, const ::sensorService::GetMotionInductionRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::sensorService::GetMotionInductionResponse>>(GetMotionInductionRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::sensorService::GetMotionInductionResponse>> AsyncGetMotionInduction(::grpc::ClientContext* context, const ::sensorService::GetMotionInductionRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::sensorService::GetMotionInductionResponse>>(AsyncGetMotionInductionRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::sensorService::GetMotionInductionResponse>> PrepareAsyncGetMotionInduction(::grpc::ClientContext* context, const ::sensorService::GetMotionInductionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::sensorService::GetMotionInductionResponse>>(PrepareAsyncGetMotionInductionRaw(context, request, cq));
    }
    // 获取触摸数据流
    std::unique_ptr< ::grpc::ClientReaderInterface< ::sensorService::GetTouchResponse>> GetTouch(::grpc::ClientContext* context, const ::sensorService::GetTouchRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::sensorService::GetTouchResponse>>(GetTouchRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::sensorService::GetTouchResponse>> AsyncGetTouch(::grpc::ClientContext* context, const ::sensorService::GetTouchRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::sensorService::GetTouchResponse>>(AsyncGetTouchRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::sensorService::GetTouchResponse>> PrepareAsyncGetTouch(::grpc::ClientContext* context, const ::sensorService::GetTouchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::sensorService::GetTouchResponse>>(PrepareAsyncGetTouchRaw(context, request, cq));
    }
    // 获取传感器原始数据调试接口
    std::unique_ptr< ::grpc::ClientReaderInterface< ::sensorService::RawResponse>> Raw(::grpc::ClientContext* context, const ::sensorService::RawRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::sensorService::RawResponse>>(RawRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::sensorService::RawResponse>> AsyncRaw(::grpc::ClientContext* context, const ::sensorService::RawRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::sensorService::RawResponse>>(AsyncRawRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::sensorService::RawResponse>> PrepareAsyncRaw(::grpc::ClientContext* context, const ::sensorService::RawRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::sensorService::RawResponse>>(PrepareAsyncRawRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // 获取感应数据流
      virtual void GetDetect(::grpc::ClientContext* context, ::sensorService::GetDetectRequest* request, ::grpc::experimental::ClientReadReactor< ::sensorService::GetDetectResponse>* reactor) = 0;
      // 获取动态感应数据
      // 场景示例： 迎宾感应
      virtual void GetMotionInduction(::grpc::ClientContext* context, ::sensorService::GetMotionInductionRequest* request, ::grpc::experimental::ClientReadReactor< ::sensorService::GetMotionInductionResponse>* reactor) = 0;
      // 获取触摸数据流
      virtual void GetTouch(::grpc::ClientContext* context, ::sensorService::GetTouchRequest* request, ::grpc::experimental::ClientReadReactor< ::sensorService::GetTouchResponse>* reactor) = 0;
      // 获取传感器原始数据调试接口
      virtual void Raw(::grpc::ClientContext* context, ::sensorService::RawRequest* request, ::grpc::experimental::ClientReadReactor< ::sensorService::RawResponse>* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientReaderInterface< ::sensorService::GetDetectResponse>* GetDetectRaw(::grpc::ClientContext* context, const ::sensorService::GetDetectRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::sensorService::GetDetectResponse>* AsyncGetDetectRaw(::grpc::ClientContext* context, const ::sensorService::GetDetectRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::sensorService::GetDetectResponse>* PrepareAsyncGetDetectRaw(::grpc::ClientContext* context, const ::sensorService::GetDetectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::sensorService::GetMotionInductionResponse>* GetMotionInductionRaw(::grpc::ClientContext* context, const ::sensorService::GetMotionInductionRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::sensorService::GetMotionInductionResponse>* AsyncGetMotionInductionRaw(::grpc::ClientContext* context, const ::sensorService::GetMotionInductionRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::sensorService::GetMotionInductionResponse>* PrepareAsyncGetMotionInductionRaw(::grpc::ClientContext* context, const ::sensorService::GetMotionInductionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::sensorService::GetTouchResponse>* GetTouchRaw(::grpc::ClientContext* context, const ::sensorService::GetTouchRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::sensorService::GetTouchResponse>* AsyncGetTouchRaw(::grpc::ClientContext* context, const ::sensorService::GetTouchRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::sensorService::GetTouchResponse>* PrepareAsyncGetTouchRaw(::grpc::ClientContext* context, const ::sensorService::GetTouchRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::sensorService::RawResponse>* RawRaw(::grpc::ClientContext* context, const ::sensorService::RawRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::sensorService::RawResponse>* AsyncRawRaw(::grpc::ClientContext* context, const ::sensorService::RawRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::sensorService::RawResponse>* PrepareAsyncRawRaw(::grpc::ClientContext* context, const ::sensorService::RawRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    std::unique_ptr< ::grpc::ClientReader< ::sensorService::GetDetectResponse>> GetDetect(::grpc::ClientContext* context, const ::sensorService::GetDetectRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::sensorService::GetDetectResponse>>(GetDetectRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::sensorService::GetDetectResponse>> AsyncGetDetect(::grpc::ClientContext* context, const ::sensorService::GetDetectRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::sensorService::GetDetectResponse>>(AsyncGetDetectRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::sensorService::GetDetectResponse>> PrepareAsyncGetDetect(::grpc::ClientContext* context, const ::sensorService::GetDetectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::sensorService::GetDetectResponse>>(PrepareAsyncGetDetectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::sensorService::GetMotionInductionResponse>> GetMotionInduction(::grpc::ClientContext* context, const ::sensorService::GetMotionInductionRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::sensorService::GetMotionInductionResponse>>(GetMotionInductionRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::sensorService::GetMotionInductionResponse>> AsyncGetMotionInduction(::grpc::ClientContext* context, const ::sensorService::GetMotionInductionRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::sensorService::GetMotionInductionResponse>>(AsyncGetMotionInductionRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::sensorService::GetMotionInductionResponse>> PrepareAsyncGetMotionInduction(::grpc::ClientContext* context, const ::sensorService::GetMotionInductionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::sensorService::GetMotionInductionResponse>>(PrepareAsyncGetMotionInductionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::sensorService::GetTouchResponse>> GetTouch(::grpc::ClientContext* context, const ::sensorService::GetTouchRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::sensorService::GetTouchResponse>>(GetTouchRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::sensorService::GetTouchResponse>> AsyncGetTouch(::grpc::ClientContext* context, const ::sensorService::GetTouchRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::sensorService::GetTouchResponse>>(AsyncGetTouchRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::sensorService::GetTouchResponse>> PrepareAsyncGetTouch(::grpc::ClientContext* context, const ::sensorService::GetTouchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::sensorService::GetTouchResponse>>(PrepareAsyncGetTouchRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::sensorService::RawResponse>> Raw(::grpc::ClientContext* context, const ::sensorService::RawRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::sensorService::RawResponse>>(RawRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::sensorService::RawResponse>> AsyncRaw(::grpc::ClientContext* context, const ::sensorService::RawRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::sensorService::RawResponse>>(AsyncRawRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::sensorService::RawResponse>> PrepareAsyncRaw(::grpc::ClientContext* context, const ::sensorService::RawRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::sensorService::RawResponse>>(PrepareAsyncRawRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void GetDetect(::grpc::ClientContext* context, ::sensorService::GetDetectRequest* request, ::grpc::experimental::ClientReadReactor< ::sensorService::GetDetectResponse>* reactor) override;
      void GetMotionInduction(::grpc::ClientContext* context, ::sensorService::GetMotionInductionRequest* request, ::grpc::experimental::ClientReadReactor< ::sensorService::GetMotionInductionResponse>* reactor) override;
      void GetTouch(::grpc::ClientContext* context, ::sensorService::GetTouchRequest* request, ::grpc::experimental::ClientReadReactor< ::sensorService::GetTouchResponse>* reactor) override;
      void Raw(::grpc::ClientContext* context, ::sensorService::RawRequest* request, ::grpc::experimental::ClientReadReactor< ::sensorService::RawResponse>* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientReader< ::sensorService::GetDetectResponse>* GetDetectRaw(::grpc::ClientContext* context, const ::sensorService::GetDetectRequest& request) override;
    ::grpc::ClientAsyncReader< ::sensorService::GetDetectResponse>* AsyncGetDetectRaw(::grpc::ClientContext* context, const ::sensorService::GetDetectRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::sensorService::GetDetectResponse>* PrepareAsyncGetDetectRaw(::grpc::ClientContext* context, const ::sensorService::GetDetectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::sensorService::GetMotionInductionResponse>* GetMotionInductionRaw(::grpc::ClientContext* context, const ::sensorService::GetMotionInductionRequest& request) override;
    ::grpc::ClientAsyncReader< ::sensorService::GetMotionInductionResponse>* AsyncGetMotionInductionRaw(::grpc::ClientContext* context, const ::sensorService::GetMotionInductionRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::sensorService::GetMotionInductionResponse>* PrepareAsyncGetMotionInductionRaw(::grpc::ClientContext* context, const ::sensorService::GetMotionInductionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::sensorService::GetTouchResponse>* GetTouchRaw(::grpc::ClientContext* context, const ::sensorService::GetTouchRequest& request) override;
    ::grpc::ClientAsyncReader< ::sensorService::GetTouchResponse>* AsyncGetTouchRaw(::grpc::ClientContext* context, const ::sensorService::GetTouchRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::sensorService::GetTouchResponse>* PrepareAsyncGetTouchRaw(::grpc::ClientContext* context, const ::sensorService::GetTouchRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::sensorService::RawResponse>* RawRaw(::grpc::ClientContext* context, const ::sensorService::RawRequest& request) override;
    ::grpc::ClientAsyncReader< ::sensorService::RawResponse>* AsyncRawRaw(::grpc::ClientContext* context, const ::sensorService::RawRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::sensorService::RawResponse>* PrepareAsyncRawRaw(::grpc::ClientContext* context, const ::sensorService::RawRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetDetect_;
    const ::grpc::internal::RpcMethod rpcmethod_GetMotionInduction_;
    const ::grpc::internal::RpcMethod rpcmethod_GetTouch_;
    const ::grpc::internal::RpcMethod rpcmethod_Raw_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // 获取感应数据流
    virtual ::grpc::Status GetDetect(::grpc::ServerContext* context, const ::sensorService::GetDetectRequest* request, ::grpc::ServerWriter< ::sensorService::GetDetectResponse>* writer);
    // 获取动态感应数据
    // 场景示例： 迎宾感应
    virtual ::grpc::Status GetMotionInduction(::grpc::ServerContext* context, const ::sensorService::GetMotionInductionRequest* request, ::grpc::ServerWriter< ::sensorService::GetMotionInductionResponse>* writer);
    // 获取触摸数据流
    virtual ::grpc::Status GetTouch(::grpc::ServerContext* context, const ::sensorService::GetTouchRequest* request, ::grpc::ServerWriter< ::sensorService::GetTouchResponse>* writer);
    // 获取传感器原始数据调试接口
    virtual ::grpc::Status Raw(::grpc::ServerContext* context, const ::sensorService::RawRequest* request, ::grpc::ServerWriter< ::sensorService::RawResponse>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetDetect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetDetect() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetDetect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDetect(::grpc::ServerContext* context, const ::sensorService::GetDetectRequest* request, ::grpc::ServerWriter< ::sensorService::GetDetectResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDetect(::grpc::ServerContext* context, ::sensorService::GetDetectRequest* request, ::grpc::ServerAsyncWriter< ::sensorService::GetDetectResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetMotionInduction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetMotionInduction() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetMotionInduction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMotionInduction(::grpc::ServerContext* context, const ::sensorService::GetMotionInductionRequest* request, ::grpc::ServerWriter< ::sensorService::GetMotionInductionResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMotionInduction(::grpc::ServerContext* context, ::sensorService::GetMotionInductionRequest* request, ::grpc::ServerAsyncWriter< ::sensorService::GetMotionInductionResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTouch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetTouch() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetTouch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTouch(::grpc::ServerContext* context, const ::sensorService::GetTouchRequest* request, ::grpc::ServerWriter< ::sensorService::GetTouchResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTouch(::grpc::ServerContext* context, ::sensorService::GetTouchRequest* request, ::grpc::ServerAsyncWriter< ::sensorService::GetTouchResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Raw : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Raw() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_Raw() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Raw(::grpc::ServerContext* context, const ::sensorService::RawRequest* request, ::grpc::ServerWriter< ::sensorService::RawResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRaw(::grpc::ServerContext* context, ::sensorService::RawRequest* request, ::grpc::ServerAsyncWriter< ::sensorService::RawResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetDetect<WithAsyncMethod_GetMotionInduction<WithAsyncMethod_GetTouch<WithAsyncMethod_Raw<Service > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetDetect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GetDetect() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackServerStreamingHandler< ::sensorService::GetDetectRequest, ::sensorService::GetDetectResponse>(
          [this] { return this->GetDetect(); }));
    }
    ~ExperimentalWithCallbackMethod_GetDetect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDetect(::grpc::ServerContext* context, const ::sensorService::GetDetectRequest* request, ::grpc::ServerWriter< ::sensorService::GetDetectResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::sensorService::GetDetectRequest, ::sensorService::GetDetectResponse>* GetDetect() {
      return new ::grpc::internal::UnimplementedWriteReactor<
        ::sensorService::GetDetectRequest, ::sensorService::GetDetectResponse>;}
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetMotionInduction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GetMotionInduction() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackServerStreamingHandler< ::sensorService::GetMotionInductionRequest, ::sensorService::GetMotionInductionResponse>(
          [this] { return this->GetMotionInduction(); }));
    }
    ~ExperimentalWithCallbackMethod_GetMotionInduction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMotionInduction(::grpc::ServerContext* context, const ::sensorService::GetMotionInductionRequest* request, ::grpc::ServerWriter< ::sensorService::GetMotionInductionResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::sensorService::GetMotionInductionRequest, ::sensorService::GetMotionInductionResponse>* GetMotionInduction() {
      return new ::grpc::internal::UnimplementedWriteReactor<
        ::sensorService::GetMotionInductionRequest, ::sensorService::GetMotionInductionResponse>;}
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetTouch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GetTouch() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc::internal::CallbackServerStreamingHandler< ::sensorService::GetTouchRequest, ::sensorService::GetTouchResponse>(
          [this] { return this->GetTouch(); }));
    }
    ~ExperimentalWithCallbackMethod_GetTouch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTouch(::grpc::ServerContext* context, const ::sensorService::GetTouchRequest* request, ::grpc::ServerWriter< ::sensorService::GetTouchResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::sensorService::GetTouchRequest, ::sensorService::GetTouchResponse>* GetTouch() {
      return new ::grpc::internal::UnimplementedWriteReactor<
        ::sensorService::GetTouchRequest, ::sensorService::GetTouchResponse>;}
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Raw : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Raw() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc::internal::CallbackServerStreamingHandler< ::sensorService::RawRequest, ::sensorService::RawResponse>(
          [this] { return this->Raw(); }));
    }
    ~ExperimentalWithCallbackMethod_Raw() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Raw(::grpc::ServerContext* context, const ::sensorService::RawRequest* request, ::grpc::ServerWriter< ::sensorService::RawResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::sensorService::RawRequest, ::sensorService::RawResponse>* Raw() {
      return new ::grpc::internal::UnimplementedWriteReactor<
        ::sensorService::RawRequest, ::sensorService::RawResponse>;}
  };
  typedef ExperimentalWithCallbackMethod_GetDetect<ExperimentalWithCallbackMethod_GetMotionInduction<ExperimentalWithCallbackMethod_GetTouch<ExperimentalWithCallbackMethod_Raw<Service > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetDetect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetDetect() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetDetect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDetect(::grpc::ServerContext* context, const ::sensorService::GetDetectRequest* request, ::grpc::ServerWriter< ::sensorService::GetDetectResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetMotionInduction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetMotionInduction() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetMotionInduction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMotionInduction(::grpc::ServerContext* context, const ::sensorService::GetMotionInductionRequest* request, ::grpc::ServerWriter< ::sensorService::GetMotionInductionResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetTouch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetTouch() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetTouch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTouch(::grpc::ServerContext* context, const ::sensorService::GetTouchRequest* request, ::grpc::ServerWriter< ::sensorService::GetTouchResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Raw : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Raw() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_Raw() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Raw(::grpc::ServerContext* context, const ::sensorService::RawRequest* request, ::grpc::ServerWriter< ::sensorService::RawResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetDetect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetDetect() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetDetect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDetect(::grpc::ServerContext* context, const ::sensorService::GetDetectRequest* request, ::grpc::ServerWriter< ::sensorService::GetDetectResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDetect(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetMotionInduction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetMotionInduction() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetMotionInduction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMotionInduction(::grpc::ServerContext* context, const ::sensorService::GetMotionInductionRequest* request, ::grpc::ServerWriter< ::sensorService::GetMotionInductionResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMotionInduction(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetTouch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetTouch() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetTouch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTouch(::grpc::ServerContext* context, const ::sensorService::GetTouchRequest* request, ::grpc::ServerWriter< ::sensorService::GetTouchResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTouch(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Raw : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Raw() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_Raw() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Raw(::grpc::ServerContext* context, const ::sensorService::RawRequest* request, ::grpc::ServerWriter< ::sensorService::RawResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRaw(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetDetect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GetDetect() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this] { return this->GetDetect(); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetDetect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDetect(::grpc::ServerContext* context, const ::sensorService::GetDetectRequest* request, ::grpc::ServerWriter< ::sensorService::GetDetectResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* GetDetect() {
      return new ::grpc::internal::UnimplementedWriteReactor<
        ::grpc::ByteBuffer, ::grpc::ByteBuffer>;}
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetMotionInduction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GetMotionInduction() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this] { return this->GetMotionInduction(); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetMotionInduction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMotionInduction(::grpc::ServerContext* context, const ::sensorService::GetMotionInductionRequest* request, ::grpc::ServerWriter< ::sensorService::GetMotionInductionResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* GetMotionInduction() {
      return new ::grpc::internal::UnimplementedWriteReactor<
        ::grpc::ByteBuffer, ::grpc::ByteBuffer>;}
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetTouch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GetTouch() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this] { return this->GetTouch(); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetTouch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTouch(::grpc::ServerContext* context, const ::sensorService::GetTouchRequest* request, ::grpc::ServerWriter< ::sensorService::GetTouchResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* GetTouch() {
      return new ::grpc::internal::UnimplementedWriteReactor<
        ::grpc::ByteBuffer, ::grpc::ByteBuffer>;}
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Raw : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Raw() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this] { return this->Raw(); }));
    }
    ~ExperimentalWithRawCallbackMethod_Raw() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Raw(::grpc::ServerContext* context, const ::sensorService::RawRequest* request, ::grpc::ServerWriter< ::sensorService::RawResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* Raw() {
      return new ::grpc::internal::UnimplementedWriteReactor<
        ::grpc::ByteBuffer, ::grpc::ByteBuffer>;}
  };
  typedef Service StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_GetDetect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_GetDetect() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::SplitServerStreamingHandler< ::sensorService::GetDetectRequest, ::sensorService::GetDetectResponse>(std::bind(&WithSplitStreamingMethod_GetDetect<BaseClass>::StreamedGetDetect, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_GetDetect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetDetect(::grpc::ServerContext* context, const ::sensorService::GetDetectRequest* request, ::grpc::ServerWriter< ::sensorService::GetDetectResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetDetect(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::sensorService::GetDetectRequest,::sensorService::GetDetectResponse>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_GetMotionInduction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_GetMotionInduction() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler< ::sensorService::GetMotionInductionRequest, ::sensorService::GetMotionInductionResponse>(std::bind(&WithSplitStreamingMethod_GetMotionInduction<BaseClass>::StreamedGetMotionInduction, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_GetMotionInduction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetMotionInduction(::grpc::ServerContext* context, const ::sensorService::GetMotionInductionRequest* request, ::grpc::ServerWriter< ::sensorService::GetMotionInductionResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetMotionInduction(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::sensorService::GetMotionInductionRequest,::sensorService::GetMotionInductionResponse>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_GetTouch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_GetTouch() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::SplitServerStreamingHandler< ::sensorService::GetTouchRequest, ::sensorService::GetTouchResponse>(std::bind(&WithSplitStreamingMethod_GetTouch<BaseClass>::StreamedGetTouch, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_GetTouch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetTouch(::grpc::ServerContext* context, const ::sensorService::GetTouchRequest* request, ::grpc::ServerWriter< ::sensorService::GetTouchResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetTouch(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::sensorService::GetTouchRequest,::sensorService::GetTouchResponse>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_Raw : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_Raw() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::SplitServerStreamingHandler< ::sensorService::RawRequest, ::sensorService::RawResponse>(std::bind(&WithSplitStreamingMethod_Raw<BaseClass>::StreamedRaw, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_Raw() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Raw(::grpc::ServerContext* context, const ::sensorService::RawRequest* request, ::grpc::ServerWriter< ::sensorService::RawResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedRaw(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::sensorService::RawRequest,::sensorService::RawResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_GetDetect<WithSplitStreamingMethod_GetMotionInduction<WithSplitStreamingMethod_GetTouch<WithSplitStreamingMethod_Raw<Service > > > > SplitStreamedService;
  typedef WithSplitStreamingMethod_GetDetect<WithSplitStreamingMethod_GetMotionInduction<WithSplitStreamingMethod_GetTouch<WithSplitStreamingMethod_Raw<Service > > > > StreamedService;
};

}  // namespace sensorService


#endif  // GRPC_sensor_2eproto__INCLUDED
