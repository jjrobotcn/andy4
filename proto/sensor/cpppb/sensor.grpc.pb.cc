// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: sensor.proto

#include "sensor.pb.h"
#include "sensor.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace sensorService {

static const char* SensorService_method_names[] = {
  "/sensorService.SensorService/GetDetect",
  "/sensorService.SensorService/GetMotionInduction",
  "/sensorService.SensorService/GetTouch",
  "/sensorService.SensorService/Raw",
};

std::unique_ptr< SensorService::Stub> SensorService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SensorService::Stub> stub(new SensorService::Stub(channel));
  return stub;
}

SensorService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetDetect_(SensorService_method_names[0], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_GetMotionInduction_(SensorService_method_names[1], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_GetTouch_(SensorService_method_names[2], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_Raw_(SensorService_method_names[3], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::ClientReader< ::sensorService::GetDetectResponse>* SensorService::Stub::GetDetectRaw(::grpc::ClientContext* context, const ::sensorService::GetDetectRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::sensorService::GetDetectResponse>::Create(channel_.get(), rpcmethod_GetDetect_, context, request);
}

void SensorService::Stub::experimental_async::GetDetect(::grpc::ClientContext* context, ::sensorService::GetDetectRequest* request, ::grpc::experimental::ClientReadReactor< ::sensorService::GetDetectResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::sensorService::GetDetectResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_GetDetect_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::sensorService::GetDetectResponse>* SensorService::Stub::AsyncGetDetectRaw(::grpc::ClientContext* context, const ::sensorService::GetDetectRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sensorService::GetDetectResponse>::Create(channel_.get(), cq, rpcmethod_GetDetect_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::sensorService::GetDetectResponse>* SensorService::Stub::PrepareAsyncGetDetectRaw(::grpc::ClientContext* context, const ::sensorService::GetDetectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sensorService::GetDetectResponse>::Create(channel_.get(), cq, rpcmethod_GetDetect_, context, request, false, nullptr);
}

::grpc::ClientReader< ::sensorService::GetMotionInductionResponse>* SensorService::Stub::GetMotionInductionRaw(::grpc::ClientContext* context, const ::sensorService::GetMotionInductionRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::sensorService::GetMotionInductionResponse>::Create(channel_.get(), rpcmethod_GetMotionInduction_, context, request);
}

void SensorService::Stub::experimental_async::GetMotionInduction(::grpc::ClientContext* context, ::sensorService::GetMotionInductionRequest* request, ::grpc::experimental::ClientReadReactor< ::sensorService::GetMotionInductionResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::sensorService::GetMotionInductionResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_GetMotionInduction_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::sensorService::GetMotionInductionResponse>* SensorService::Stub::AsyncGetMotionInductionRaw(::grpc::ClientContext* context, const ::sensorService::GetMotionInductionRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sensorService::GetMotionInductionResponse>::Create(channel_.get(), cq, rpcmethod_GetMotionInduction_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::sensorService::GetMotionInductionResponse>* SensorService::Stub::PrepareAsyncGetMotionInductionRaw(::grpc::ClientContext* context, const ::sensorService::GetMotionInductionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sensorService::GetMotionInductionResponse>::Create(channel_.get(), cq, rpcmethod_GetMotionInduction_, context, request, false, nullptr);
}

::grpc::ClientReader< ::sensorService::GetTouchResponse>* SensorService::Stub::GetTouchRaw(::grpc::ClientContext* context, const ::sensorService::GetTouchRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::sensorService::GetTouchResponse>::Create(channel_.get(), rpcmethod_GetTouch_, context, request);
}

void SensorService::Stub::experimental_async::GetTouch(::grpc::ClientContext* context, ::sensorService::GetTouchRequest* request, ::grpc::experimental::ClientReadReactor< ::sensorService::GetTouchResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::sensorService::GetTouchResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_GetTouch_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::sensorService::GetTouchResponse>* SensorService::Stub::AsyncGetTouchRaw(::grpc::ClientContext* context, const ::sensorService::GetTouchRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sensorService::GetTouchResponse>::Create(channel_.get(), cq, rpcmethod_GetTouch_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::sensorService::GetTouchResponse>* SensorService::Stub::PrepareAsyncGetTouchRaw(::grpc::ClientContext* context, const ::sensorService::GetTouchRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sensorService::GetTouchResponse>::Create(channel_.get(), cq, rpcmethod_GetTouch_, context, request, false, nullptr);
}

::grpc::ClientReader< ::sensorService::RawResponse>* SensorService::Stub::RawRaw(::grpc::ClientContext* context, const ::sensorService::RawRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::sensorService::RawResponse>::Create(channel_.get(), rpcmethod_Raw_, context, request);
}

void SensorService::Stub::experimental_async::Raw(::grpc::ClientContext* context, ::sensorService::RawRequest* request, ::grpc::experimental::ClientReadReactor< ::sensorService::RawResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::sensorService::RawResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_Raw_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::sensorService::RawResponse>* SensorService::Stub::AsyncRawRaw(::grpc::ClientContext* context, const ::sensorService::RawRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sensorService::RawResponse>::Create(channel_.get(), cq, rpcmethod_Raw_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::sensorService::RawResponse>* SensorService::Stub::PrepareAsyncRawRaw(::grpc::ClientContext* context, const ::sensorService::RawRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sensorService::RawResponse>::Create(channel_.get(), cq, rpcmethod_Raw_, context, request, false, nullptr);
}

SensorService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SensorService_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< SensorService::Service, ::sensorService::GetDetectRequest, ::sensorService::GetDetectResponse>(
          std::mem_fn(&SensorService::Service::GetDetect), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SensorService_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< SensorService::Service, ::sensorService::GetMotionInductionRequest, ::sensorService::GetMotionInductionResponse>(
          std::mem_fn(&SensorService::Service::GetMotionInduction), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SensorService_method_names[2],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< SensorService::Service, ::sensorService::GetTouchRequest, ::sensorService::GetTouchResponse>(
          std::mem_fn(&SensorService::Service::GetTouch), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SensorService_method_names[3],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< SensorService::Service, ::sensorService::RawRequest, ::sensorService::RawResponse>(
          std::mem_fn(&SensorService::Service::Raw), this)));
}

SensorService::Service::~Service() {
}

::grpc::Status SensorService::Service::GetDetect(::grpc::ServerContext* context, const ::sensorService::GetDetectRequest* request, ::grpc::ServerWriter< ::sensorService::GetDetectResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SensorService::Service::GetMotionInduction(::grpc::ServerContext* context, const ::sensorService::GetMotionInductionRequest* request, ::grpc::ServerWriter< ::sensorService::GetMotionInductionResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SensorService::Service::GetTouch(::grpc::ServerContext* context, const ::sensorService::GetTouchRequest* request, ::grpc::ServerWriter< ::sensorService::GetTouchResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SensorService::Service::Raw(::grpc::ServerContext* context, const ::sensorService::RawRequest* request, ::grpc::ServerWriter< ::sensorService::RawResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace sensorService

