// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: idcard.proto

#ifndef PROTOBUF_INCLUDED_idcard_2eproto
#define PROTOBUF_INCLUDED_idcard_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_idcard_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_idcard_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_idcard_2eproto();
namespace idCardService {
class GetIdInfoRequest;
class GetIdInfoRequestDefaultTypeInternal;
extern GetIdInfoRequestDefaultTypeInternal _GetIdInfoRequest_default_instance_;
class GetIdInfoResponse;
class GetIdInfoResponseDefaultTypeInternal;
extern GetIdInfoResponseDefaultTypeInternal _GetIdInfoResponse_default_instance_;
class IdInfo;
class IdInfoDefaultTypeInternal;
extern IdInfoDefaultTypeInternal _IdInfo_default_instance_;
}  // namespace idCardService
namespace google {
namespace protobuf {
template<> ::idCardService::GetIdInfoRequest* Arena::CreateMaybeMessage<::idCardService::GetIdInfoRequest>(Arena*);
template<> ::idCardService::GetIdInfoResponse* Arena::CreateMaybeMessage<::idCardService::GetIdInfoResponse>(Arena*);
template<> ::idCardService::IdInfo* Arena::CreateMaybeMessage<::idCardService::IdInfo>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace idCardService {

// ===================================================================

class GetIdInfoRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:idCardService.GetIdInfoRequest) */ {
 public:
  GetIdInfoRequest();
  virtual ~GetIdInfoRequest();

  GetIdInfoRequest(const GetIdInfoRequest& from);

  inline GetIdInfoRequest& operator=(const GetIdInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetIdInfoRequest(GetIdInfoRequest&& from) noexcept
    : GetIdInfoRequest() {
    *this = ::std::move(from);
  }

  inline GetIdInfoRequest& operator=(GetIdInfoRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GetIdInfoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetIdInfoRequest* internal_default_instance() {
    return reinterpret_cast<const GetIdInfoRequest*>(
               &_GetIdInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(GetIdInfoRequest* other);
  friend void swap(GetIdInfoRequest& a, GetIdInfoRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetIdInfoRequest* New() const final {
    return CreateMaybeMessage<GetIdInfoRequest>(nullptr);
  }

  GetIdInfoRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetIdInfoRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetIdInfoRequest& from);
  void MergeFrom(const GetIdInfoRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetIdInfoRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:idCardService.GetIdInfoRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_idcard_2eproto;
};
// -------------------------------------------------------------------

class IdInfo final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:idCardService.IdInfo) */ {
 public:
  IdInfo();
  virtual ~IdInfo();

  IdInfo(const IdInfo& from);

  inline IdInfo& operator=(const IdInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IdInfo(IdInfo&& from) noexcept
    : IdInfo() {
    *this = ::std::move(from);
  }

  inline IdInfo& operator=(IdInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const IdInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IdInfo* internal_default_instance() {
    return reinterpret_cast<const IdInfo*>(
               &_IdInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(IdInfo* other);
  friend void swap(IdInfo& a, IdInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IdInfo* New() const final {
    return CreateMaybeMessage<IdInfo>(nullptr);
  }

  IdInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IdInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const IdInfo& from);
  void MergeFrom(const IdInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IdInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string gender = 3;
  void clear_gender();
  static const int kGenderFieldNumber = 3;
  const ::std::string& gender() const;
  void set_gender(const ::std::string& value);
  #if LANG_CXX11
  void set_gender(::std::string&& value);
  #endif
  void set_gender(const char* value);
  void set_gender(const char* value, size_t size);
  ::std::string* mutable_gender();
  ::std::string* release_gender();
  void set_allocated_gender(::std::string* gender);

  // string national = 4;
  void clear_national();
  static const int kNationalFieldNumber = 4;
  const ::std::string& national() const;
  void set_national(const ::std::string& value);
  #if LANG_CXX11
  void set_national(::std::string&& value);
  #endif
  void set_national(const char* value);
  void set_national(const char* value, size_t size);
  ::std::string* mutable_national();
  ::std::string* release_national();
  void set_allocated_national(::std::string* national);

  // string birthday = 5;
  void clear_birthday();
  static const int kBirthdayFieldNumber = 5;
  const ::std::string& birthday() const;
  void set_birthday(const ::std::string& value);
  #if LANG_CXX11
  void set_birthday(::std::string&& value);
  #endif
  void set_birthday(const char* value);
  void set_birthday(const char* value, size_t size);
  ::std::string* mutable_birthday();
  ::std::string* release_birthday();
  void set_allocated_birthday(::std::string* birthday);

  // string address = 6;
  void clear_address();
  static const int kAddressFieldNumber = 6;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // string sign_organization = 7;
  void clear_sign_organization();
  static const int kSignOrganizationFieldNumber = 7;
  const ::std::string& sign_organization() const;
  void set_sign_organization(const ::std::string& value);
  #if LANG_CXX11
  void set_sign_organization(::std::string&& value);
  #endif
  void set_sign_organization(const char* value);
  void set_sign_organization(const char* value, size_t size);
  ::std::string* mutable_sign_organization();
  ::std::string* release_sign_organization();
  void set_allocated_sign_organization(::std::string* sign_organization);

  // string start_date = 8;
  void clear_start_date();
  static const int kStartDateFieldNumber = 8;
  const ::std::string& start_date() const;
  void set_start_date(const ::std::string& value);
  #if LANG_CXX11
  void set_start_date(::std::string&& value);
  #endif
  void set_start_date(const char* value);
  void set_start_date(const char* value, size_t size);
  ::std::string* mutable_start_date();
  ::std::string* release_start_date();
  void set_allocated_start_date(::std::string* start_date);

  // string end_date = 9;
  void clear_end_date();
  static const int kEndDateFieldNumber = 9;
  const ::std::string& end_date() const;
  void set_end_date(const ::std::string& value);
  #if LANG_CXX11
  void set_end_date(::std::string&& value);
  #endif
  void set_end_date(const char* value);
  void set_end_date(const char* value, size_t size);
  ::std::string* mutable_end_date();
  ::std::string* release_end_date();
  void set_allocated_end_date(::std::string* end_date);

  // bytes photo = 10;
  void clear_photo();
  static const int kPhotoFieldNumber = 10;
  const ::std::string& photo() const;
  void set_photo(const ::std::string& value);
  #if LANG_CXX11
  void set_photo(::std::string&& value);
  #endif
  void set_photo(const char* value);
  void set_photo(const void* value, size_t size);
  ::std::string* mutable_photo();
  ::std::string* release_photo();
  void set_allocated_photo(::std::string* photo);

  // @@protoc_insertion_point(class_scope:idCardService.IdInfo)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr gender_;
  ::google::protobuf::internal::ArenaStringPtr national_;
  ::google::protobuf::internal::ArenaStringPtr birthday_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  ::google::protobuf::internal::ArenaStringPtr sign_organization_;
  ::google::protobuf::internal::ArenaStringPtr start_date_;
  ::google::protobuf::internal::ArenaStringPtr end_date_;
  ::google::protobuf::internal::ArenaStringPtr photo_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_idcard_2eproto;
};
// -------------------------------------------------------------------

class GetIdInfoResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:idCardService.GetIdInfoResponse) */ {
 public:
  GetIdInfoResponse();
  virtual ~GetIdInfoResponse();

  GetIdInfoResponse(const GetIdInfoResponse& from);

  inline GetIdInfoResponse& operator=(const GetIdInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetIdInfoResponse(GetIdInfoResponse&& from) noexcept
    : GetIdInfoResponse() {
    *this = ::std::move(from);
  }

  inline GetIdInfoResponse& operator=(GetIdInfoResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GetIdInfoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetIdInfoResponse* internal_default_instance() {
    return reinterpret_cast<const GetIdInfoResponse*>(
               &_GetIdInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(GetIdInfoResponse* other);
  friend void swap(GetIdInfoResponse& a, GetIdInfoResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetIdInfoResponse* New() const final {
    return CreateMaybeMessage<GetIdInfoResponse>(nullptr);
  }

  GetIdInfoResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetIdInfoResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetIdInfoResponse& from);
  void MergeFrom(const GetIdInfoResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetIdInfoResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .idCardService.IdInfo id_info = 1;
  bool has_id_info() const;
  void clear_id_info();
  static const int kIdInfoFieldNumber = 1;
  const ::idCardService::IdInfo& id_info() const;
  ::idCardService::IdInfo* release_id_info();
  ::idCardService::IdInfo* mutable_id_info();
  void set_allocated_id_info(::idCardService::IdInfo* id_info);

  // @@protoc_insertion_point(class_scope:idCardService.GetIdInfoResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::idCardService::IdInfo* id_info_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_idcard_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetIdInfoRequest

// -------------------------------------------------------------------

// IdInfo

// string id = 1;
inline void IdInfo::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IdInfo::id() const {
  // @@protoc_insertion_point(field_get:idCardService.IdInfo.id)
  return id_.GetNoArena();
}
inline void IdInfo::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:idCardService.IdInfo.id)
}
#if LANG_CXX11
inline void IdInfo::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:idCardService.IdInfo.id)
}
#endif
inline void IdInfo::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:idCardService.IdInfo.id)
}
inline void IdInfo::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:idCardService.IdInfo.id)
}
inline ::std::string* IdInfo::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:idCardService.IdInfo.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IdInfo::release_id() {
  // @@protoc_insertion_point(field_release:idCardService.IdInfo.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IdInfo::set_allocated_id(::std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:idCardService.IdInfo.id)
}

// string name = 2;
inline void IdInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IdInfo::name() const {
  // @@protoc_insertion_point(field_get:idCardService.IdInfo.name)
  return name_.GetNoArena();
}
inline void IdInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:idCardService.IdInfo.name)
}
#if LANG_CXX11
inline void IdInfo::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:idCardService.IdInfo.name)
}
#endif
inline void IdInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:idCardService.IdInfo.name)
}
inline void IdInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:idCardService.IdInfo.name)
}
inline ::std::string* IdInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:idCardService.IdInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IdInfo::release_name() {
  // @@protoc_insertion_point(field_release:idCardService.IdInfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IdInfo::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:idCardService.IdInfo.name)
}

// string gender = 3;
inline void IdInfo::clear_gender() {
  gender_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IdInfo::gender() const {
  // @@protoc_insertion_point(field_get:idCardService.IdInfo.gender)
  return gender_.GetNoArena();
}
inline void IdInfo::set_gender(const ::std::string& value) {
  
  gender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:idCardService.IdInfo.gender)
}
#if LANG_CXX11
inline void IdInfo::set_gender(::std::string&& value) {
  
  gender_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:idCardService.IdInfo.gender)
}
#endif
inline void IdInfo::set_gender(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  gender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:idCardService.IdInfo.gender)
}
inline void IdInfo::set_gender(const char* value, size_t size) {
  
  gender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:idCardService.IdInfo.gender)
}
inline ::std::string* IdInfo::mutable_gender() {
  
  // @@protoc_insertion_point(field_mutable:idCardService.IdInfo.gender)
  return gender_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IdInfo::release_gender() {
  // @@protoc_insertion_point(field_release:idCardService.IdInfo.gender)
  
  return gender_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IdInfo::set_allocated_gender(::std::string* gender) {
  if (gender != nullptr) {
    
  } else {
    
  }
  gender_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gender);
  // @@protoc_insertion_point(field_set_allocated:idCardService.IdInfo.gender)
}

// string national = 4;
inline void IdInfo::clear_national() {
  national_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IdInfo::national() const {
  // @@protoc_insertion_point(field_get:idCardService.IdInfo.national)
  return national_.GetNoArena();
}
inline void IdInfo::set_national(const ::std::string& value) {
  
  national_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:idCardService.IdInfo.national)
}
#if LANG_CXX11
inline void IdInfo::set_national(::std::string&& value) {
  
  national_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:idCardService.IdInfo.national)
}
#endif
inline void IdInfo::set_national(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  national_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:idCardService.IdInfo.national)
}
inline void IdInfo::set_national(const char* value, size_t size) {
  
  national_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:idCardService.IdInfo.national)
}
inline ::std::string* IdInfo::mutable_national() {
  
  // @@protoc_insertion_point(field_mutable:idCardService.IdInfo.national)
  return national_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IdInfo::release_national() {
  // @@protoc_insertion_point(field_release:idCardService.IdInfo.national)
  
  return national_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IdInfo::set_allocated_national(::std::string* national) {
  if (national != nullptr) {
    
  } else {
    
  }
  national_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), national);
  // @@protoc_insertion_point(field_set_allocated:idCardService.IdInfo.national)
}

// string birthday = 5;
inline void IdInfo::clear_birthday() {
  birthday_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IdInfo::birthday() const {
  // @@protoc_insertion_point(field_get:idCardService.IdInfo.birthday)
  return birthday_.GetNoArena();
}
inline void IdInfo::set_birthday(const ::std::string& value) {
  
  birthday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:idCardService.IdInfo.birthday)
}
#if LANG_CXX11
inline void IdInfo::set_birthday(::std::string&& value) {
  
  birthday_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:idCardService.IdInfo.birthday)
}
#endif
inline void IdInfo::set_birthday(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  birthday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:idCardService.IdInfo.birthday)
}
inline void IdInfo::set_birthday(const char* value, size_t size) {
  
  birthday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:idCardService.IdInfo.birthday)
}
inline ::std::string* IdInfo::mutable_birthday() {
  
  // @@protoc_insertion_point(field_mutable:idCardService.IdInfo.birthday)
  return birthday_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IdInfo::release_birthday() {
  // @@protoc_insertion_point(field_release:idCardService.IdInfo.birthday)
  
  return birthday_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IdInfo::set_allocated_birthday(::std::string* birthday) {
  if (birthday != nullptr) {
    
  } else {
    
  }
  birthday_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), birthday);
  // @@protoc_insertion_point(field_set_allocated:idCardService.IdInfo.birthday)
}

// string address = 6;
inline void IdInfo::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IdInfo::address() const {
  // @@protoc_insertion_point(field_get:idCardService.IdInfo.address)
  return address_.GetNoArena();
}
inline void IdInfo::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:idCardService.IdInfo.address)
}
#if LANG_CXX11
inline void IdInfo::set_address(::std::string&& value) {
  
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:idCardService.IdInfo.address)
}
#endif
inline void IdInfo::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:idCardService.IdInfo.address)
}
inline void IdInfo::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:idCardService.IdInfo.address)
}
inline ::std::string* IdInfo::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:idCardService.IdInfo.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IdInfo::release_address() {
  // @@protoc_insertion_point(field_release:idCardService.IdInfo.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IdInfo::set_allocated_address(::std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:idCardService.IdInfo.address)
}

// string sign_organization = 7;
inline void IdInfo::clear_sign_organization() {
  sign_organization_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IdInfo::sign_organization() const {
  // @@protoc_insertion_point(field_get:idCardService.IdInfo.sign_organization)
  return sign_organization_.GetNoArena();
}
inline void IdInfo::set_sign_organization(const ::std::string& value) {
  
  sign_organization_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:idCardService.IdInfo.sign_organization)
}
#if LANG_CXX11
inline void IdInfo::set_sign_organization(::std::string&& value) {
  
  sign_organization_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:idCardService.IdInfo.sign_organization)
}
#endif
inline void IdInfo::set_sign_organization(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sign_organization_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:idCardService.IdInfo.sign_organization)
}
inline void IdInfo::set_sign_organization(const char* value, size_t size) {
  
  sign_organization_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:idCardService.IdInfo.sign_organization)
}
inline ::std::string* IdInfo::mutable_sign_organization() {
  
  // @@protoc_insertion_point(field_mutable:idCardService.IdInfo.sign_organization)
  return sign_organization_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IdInfo::release_sign_organization() {
  // @@protoc_insertion_point(field_release:idCardService.IdInfo.sign_organization)
  
  return sign_organization_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IdInfo::set_allocated_sign_organization(::std::string* sign_organization) {
  if (sign_organization != nullptr) {
    
  } else {
    
  }
  sign_organization_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sign_organization);
  // @@protoc_insertion_point(field_set_allocated:idCardService.IdInfo.sign_organization)
}

// string start_date = 8;
inline void IdInfo::clear_start_date() {
  start_date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IdInfo::start_date() const {
  // @@protoc_insertion_point(field_get:idCardService.IdInfo.start_date)
  return start_date_.GetNoArena();
}
inline void IdInfo::set_start_date(const ::std::string& value) {
  
  start_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:idCardService.IdInfo.start_date)
}
#if LANG_CXX11
inline void IdInfo::set_start_date(::std::string&& value) {
  
  start_date_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:idCardService.IdInfo.start_date)
}
#endif
inline void IdInfo::set_start_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  start_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:idCardService.IdInfo.start_date)
}
inline void IdInfo::set_start_date(const char* value, size_t size) {
  
  start_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:idCardService.IdInfo.start_date)
}
inline ::std::string* IdInfo::mutable_start_date() {
  
  // @@protoc_insertion_point(field_mutable:idCardService.IdInfo.start_date)
  return start_date_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IdInfo::release_start_date() {
  // @@protoc_insertion_point(field_release:idCardService.IdInfo.start_date)
  
  return start_date_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IdInfo::set_allocated_start_date(::std::string* start_date) {
  if (start_date != nullptr) {
    
  } else {
    
  }
  start_date_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), start_date);
  // @@protoc_insertion_point(field_set_allocated:idCardService.IdInfo.start_date)
}

// string end_date = 9;
inline void IdInfo::clear_end_date() {
  end_date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IdInfo::end_date() const {
  // @@protoc_insertion_point(field_get:idCardService.IdInfo.end_date)
  return end_date_.GetNoArena();
}
inline void IdInfo::set_end_date(const ::std::string& value) {
  
  end_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:idCardService.IdInfo.end_date)
}
#if LANG_CXX11
inline void IdInfo::set_end_date(::std::string&& value) {
  
  end_date_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:idCardService.IdInfo.end_date)
}
#endif
inline void IdInfo::set_end_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  end_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:idCardService.IdInfo.end_date)
}
inline void IdInfo::set_end_date(const char* value, size_t size) {
  
  end_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:idCardService.IdInfo.end_date)
}
inline ::std::string* IdInfo::mutable_end_date() {
  
  // @@protoc_insertion_point(field_mutable:idCardService.IdInfo.end_date)
  return end_date_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IdInfo::release_end_date() {
  // @@protoc_insertion_point(field_release:idCardService.IdInfo.end_date)
  
  return end_date_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IdInfo::set_allocated_end_date(::std::string* end_date) {
  if (end_date != nullptr) {
    
  } else {
    
  }
  end_date_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), end_date);
  // @@protoc_insertion_point(field_set_allocated:idCardService.IdInfo.end_date)
}

// bytes photo = 10;
inline void IdInfo::clear_photo() {
  photo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IdInfo::photo() const {
  // @@protoc_insertion_point(field_get:idCardService.IdInfo.photo)
  return photo_.GetNoArena();
}
inline void IdInfo::set_photo(const ::std::string& value) {
  
  photo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:idCardService.IdInfo.photo)
}
#if LANG_CXX11
inline void IdInfo::set_photo(::std::string&& value) {
  
  photo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:idCardService.IdInfo.photo)
}
#endif
inline void IdInfo::set_photo(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  photo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:idCardService.IdInfo.photo)
}
inline void IdInfo::set_photo(const void* value, size_t size) {
  
  photo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:idCardService.IdInfo.photo)
}
inline ::std::string* IdInfo::mutable_photo() {
  
  // @@protoc_insertion_point(field_mutable:idCardService.IdInfo.photo)
  return photo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IdInfo::release_photo() {
  // @@protoc_insertion_point(field_release:idCardService.IdInfo.photo)
  
  return photo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IdInfo::set_allocated_photo(::std::string* photo) {
  if (photo != nullptr) {
    
  } else {
    
  }
  photo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), photo);
  // @@protoc_insertion_point(field_set_allocated:idCardService.IdInfo.photo)
}

// -------------------------------------------------------------------

// GetIdInfoResponse

// .idCardService.IdInfo id_info = 1;
inline bool GetIdInfoResponse::has_id_info() const {
  return this != internal_default_instance() && id_info_ != nullptr;
}
inline void GetIdInfoResponse::clear_id_info() {
  if (GetArenaNoVirtual() == nullptr && id_info_ != nullptr) {
    delete id_info_;
  }
  id_info_ = nullptr;
}
inline const ::idCardService::IdInfo& GetIdInfoResponse::id_info() const {
  const ::idCardService::IdInfo* p = id_info_;
  // @@protoc_insertion_point(field_get:idCardService.GetIdInfoResponse.id_info)
  return p != nullptr ? *p : *reinterpret_cast<const ::idCardService::IdInfo*>(
      &::idCardService::_IdInfo_default_instance_);
}
inline ::idCardService::IdInfo* GetIdInfoResponse::release_id_info() {
  // @@protoc_insertion_point(field_release:idCardService.GetIdInfoResponse.id_info)
  
  ::idCardService::IdInfo* temp = id_info_;
  id_info_ = nullptr;
  return temp;
}
inline ::idCardService::IdInfo* GetIdInfoResponse::mutable_id_info() {
  
  if (id_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::idCardService::IdInfo>(GetArenaNoVirtual());
    id_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:idCardService.GetIdInfoResponse.id_info)
  return id_info_;
}
inline void GetIdInfoResponse::set_allocated_id_info(::idCardService::IdInfo* id_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete id_info_;
  }
  if (id_info) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      id_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id_info, submessage_arena);
    }
    
  } else {
    
  }
  id_info_ = id_info;
  // @@protoc_insertion_point(field_set_allocated:idCardService.GetIdInfoResponse.id_info)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace idCardService

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_idcard_2eproto
