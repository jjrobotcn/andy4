// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: idcard.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "Idcard.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - IdcardRoot

@implementation IdcardRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - IdcardRoot_FileDescriptor

static GPBFileDescriptor *IdcardRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"idCardService"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - GetIdInfoRequest

@implementation GetIdInfoRequest


typedef struct GetIdInfoRequest__storage_ {
  uint32_t _has_storage_[1];
} GetIdInfoRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetIdInfoRequest class]
                                     rootClass:[IdcardRoot class]
                                          file:IdcardRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(GetIdInfoRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - IdInfo

@implementation IdInfo

@dynamic id_p;
@dynamic name;
@dynamic gender;
@dynamic national;
@dynamic birthday;
@dynamic address;
@dynamic signOrganization;
@dynamic startDate;
@dynamic endDate;
@dynamic photo;

typedef struct IdInfo__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
  NSString *name;
  NSString *gender;
  NSString *national;
  NSString *birthday;
  NSString *address;
  NSString *signOrganization;
  NSString *startDate;
  NSString *endDate;
  NSData *photo;
} IdInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = IdInfo_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(IdInfo__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = IdInfo_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(IdInfo__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "gender",
        .dataTypeSpecific.className = NULL,
        .number = IdInfo_FieldNumber_Gender,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(IdInfo__storage_, gender),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "national",
        .dataTypeSpecific.className = NULL,
        .number = IdInfo_FieldNumber_National,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(IdInfo__storage_, national),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "birthday",
        .dataTypeSpecific.className = NULL,
        .number = IdInfo_FieldNumber_Birthday,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(IdInfo__storage_, birthday),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "address",
        .dataTypeSpecific.className = NULL,
        .number = IdInfo_FieldNumber_Address,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(IdInfo__storage_, address),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "signOrganization",
        .dataTypeSpecific.className = NULL,
        .number = IdInfo_FieldNumber_SignOrganization,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(IdInfo__storage_, signOrganization),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "startDate",
        .dataTypeSpecific.className = NULL,
        .number = IdInfo_FieldNumber_StartDate,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(IdInfo__storage_, startDate),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "endDate",
        .dataTypeSpecific.className = NULL,
        .number = IdInfo_FieldNumber_EndDate,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(IdInfo__storage_, endDate),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "photo",
        .dataTypeSpecific.className = NULL,
        .number = IdInfo_FieldNumber_Photo,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(IdInfo__storage_, photo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[IdInfo class]
                                     rootClass:[IdcardRoot class]
                                          file:IdcardRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(IdInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetIdInfoResponse

@implementation GetIdInfoResponse

@dynamic hasIdInfo, idInfo;

typedef struct GetIdInfoResponse__storage_ {
  uint32_t _has_storage_[1];
  IdInfo *idInfo;
} GetIdInfoResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "idInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(IdInfo),
        .number = GetIdInfoResponse_FieldNumber_IdInfo,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetIdInfoResponse__storage_, idInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetIdInfoResponse class]
                                     rootClass:[IdcardRoot class]
                                          file:IdcardRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetIdInfoResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
