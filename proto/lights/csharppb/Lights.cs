// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: lights.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace LightsService {

  /// <summary>Holder for reflection information generated from lights.proto</summary>
  public static partial class LightsReflection {

    #region Descriptor
    /// <summary>File descriptor for lights.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static LightsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgxsaWdodHMucHJvdG8SDWxpZ2h0c1NlcnZpY2UaHGdvb2dsZS9hcGkvYW5u",
            "b3RhdGlvbnMucHJvdG8iIQoTUHJldmlld0xpZ2h0UmVxdWVzdBIKCgJpZBgB",
            "IAEoCSIWChRQcmV2aWV3TGlnaHRSZXNwb25zZSJVChBQbGF5TGlnaHRSZXF1",
            "ZXN0EicKBWx0eXBlGAEgASgOMhgubGlnaHRzU2VydmljZS5MaWdodFR5cGUS",
            "CgoCaWQYAiABKAkSDAoEbmFtZRgDIAEoCSITChFQbGF5TGlnaHRSZXNwb25z",
            "ZSI8ChBTdG9wTGlnaHRSZXF1ZXN0EigKBmx0eXBlcxgBIAMoDjIYLmxpZ2h0",
            "c1NlcnZpY2UuTGlnaHRUeXBlIhMKEVN0b3BMaWdodFJlc3BvbnNlInkKCUxp",
            "Z2h0SW5mbxInCgVsdHlwZRgBIAEoDjIYLmxpZ2h0c1NlcnZpY2UuTGlnaHRU",
            "eXBlEgoKAmlkGAIgASgJEgwKBG5hbWUYAyABKAkSKQoGZnJhbWVzGAQgAygL",
            "MhkubGlnaHRzU2VydmljZS5MaWdodEZyYW1lIlIKCkxpZ2h0RnJhbWUSDgoG",
            "Y29sb3JzGAEgAygJEg0KBXNwZWVkGAIgASgNEiUKBG1vZGUYAyABKA4yFy5s",
            "aWdodHNTZXJ2aWNlLlBsYXlNb2RlIjwKEUxpc3RMaWdodHNSZXF1ZXN0EicK",
            "BWx0eXBlGAEgASgOMhgubGlnaHRzU2VydmljZS5MaWdodFR5cGUiQwoSTGlz",
            "dExpZ2h0c1Jlc3BvbnNlEi0KC2xpZ2h0c19pbmZvGAEgAygLMhgubGlnaHRz",
            "U2VydmljZS5MaWdodEluZm8iPwoPTmV3TGlnaHRSZXF1ZXN0EiwKCmxpZ2h0",
            "X2luZm8YASABKAsyGC5saWdodHNTZXJ2aWNlLkxpZ2h0SW5mbyJAChBOZXdM",
            "aWdodFJlc3BvbnNlEiwKCmxpZ2h0X2luZm8YASABKAsyGC5saWdodHNTZXJ2",
            "aWNlLkxpZ2h0SW5mbyJCChJVcGRhdGVMaWdodFJlcXVlc3QSLAoKbGlnaHRf",
            "aW5mbxgBIAEoCzIYLmxpZ2h0c1NlcnZpY2UuTGlnaHRJbmZvIkMKE1VwZGF0",
            "ZUxpZ2h0UmVzcG9uc2USLAoKbGlnaHRfaW5mbxgBIAEoCzIYLmxpZ2h0c1Nl",
            "cnZpY2UuTGlnaHRJbmZvIigKE0RlbGV0ZUxpZ2h0c1JlcXVlc3QSEQoJbGln",
            "aHRzX2lkGAEgAygJIhYKFERlbGV0ZUxpZ2h0c1Jlc3BvbnNlIg4KDFN0YXRl",
            "UmVxdWVzdCI2Cg1TdGF0ZVJlc3BvbnNlEhEKCWlzX2FjdGl2ZRgBIAEoCBIS",
            "Cgppc19wbGF5aW5nGAIgASgIIh8KDVN3aXRjaFJlcXVlc3QSDgoGYWN0aXZl",
            "GAEgASgIIiMKDlN3aXRjaFJlc3BvbnNlEhEKCWlzX2FjdGl2ZRgBIAEoCCo6",
            "CglMaWdodFR5cGUSDQoJVU5ERUZJTkVEEAASCQoFTU9VVEgQARIJCgVIQU5E",
            "UxACEggKBEVBUlMQAypICghQbGF5TW9kZRIKCgZQUkVTRVQQABIKCgZBTFdB",
            "WVMQARILCgdNQVJRVUVFEAISCQoFRkxBU0gQAxIMCghUSUNLVE9DSxAEMrYI",
            "Cg1MaWdodHNTZXJ2aWNlEoABCgxQcmV2aWV3TGlnaHQSIi5saWdodHNTZXJ2",
            "aWNlLlByZXZpZXdMaWdodFJlcXVlc3QaIy5saWdodHNTZXJ2aWNlLlByZXZp",
            "ZXdMaWdodFJlc3BvbnNlIieC0+STAiEiHC9hcGkvdjIvbGlnaHRzL3ByZXZp",
            "ZXdfbGlnaHQ6ASoSdAoJUGxheUxpZ2h0Eh8ubGlnaHRzU2VydmljZS5QbGF5",
            "TGlnaHRSZXF1ZXN0GiAubGlnaHRzU2VydmljZS5QbGF5TGlnaHRSZXNwb25z",
            "ZSIkgtPkkwIeIhkvYXBpL3YyL2xpZ2h0cy9wbGF5X2xpZ2h0OgEqEnQKCVN0",
            "b3BMaWdodBIfLmxpZ2h0c1NlcnZpY2UuU3RvcExpZ2h0UmVxdWVzdBogLmxp",
            "Z2h0c1NlcnZpY2UuU3RvcExpZ2h0UmVzcG9uc2UiJILT5JMCHiIZL2FwaS92",
            "Mi9saWdodHMvc3RvcF9saWdodDoBKhJ4CgpMaXN0TGlnaHRzEiAubGlnaHRz",
            "U2VydmljZS5MaXN0TGlnaHRzUmVxdWVzdBohLmxpZ2h0c1NlcnZpY2UuTGlz",
            "dExpZ2h0c1Jlc3BvbnNlIiWC0+STAh8iGi9hcGkvdjIvbGlnaHRzL2xpc3Rf",
            "bGlnaHRzOgEqEnAKCE5ld0xpZ2h0Eh4ubGlnaHRzU2VydmljZS5OZXdMaWdo",
            "dFJlcXVlc3QaHy5saWdodHNTZXJ2aWNlLk5ld0xpZ2h0UmVzcG9uc2UiI4LT",
            "5JMCHSIYL2FwaS92Mi9saWdodHMvbmV3X2xpZ2h0OgEqEnwKC1VwZGF0ZUxp",
            "Z2h0EiEubGlnaHRzU2VydmljZS5VcGRhdGVMaWdodFJlcXVlc3QaIi5saWdo",
            "dHNTZXJ2aWNlLlVwZGF0ZUxpZ2h0UmVzcG9uc2UiJoLT5JMCICIbL2FwaS92",
            "Mi9saWdodHMvdXBkYXRlX2xpZ2h0OgEqEoABCgxEZWxldGVMaWdodHMSIi5s",
            "aWdodHNTZXJ2aWNlLkRlbGV0ZUxpZ2h0c1JlcXVlc3QaIy5saWdodHNTZXJ2",
            "aWNlLkRlbGV0ZUxpZ2h0c1Jlc3BvbnNlIieC0+STAiEiHC9hcGkvdjIvbGln",
            "aHRzL2RlbGV0ZV9saWdodHM6ASoSYAoFU3RhdGUSGy5saWdodHNTZXJ2aWNl",
            "LlN0YXRlUmVxdWVzdBocLmxpZ2h0c1NlcnZpY2UuU3RhdGVSZXNwb25zZSIc",
            "gtPkkwIWEhQvYXBpL3YyL2xpZ2h0cy9zdGF0ZRJnCgZTd2l0Y2gSHC5saWdo",
            "dHNTZXJ2aWNlLlN3aXRjaFJlcXVlc3QaHS5saWdodHNTZXJ2aWNlLlN3aXRj",
            "aFJlc3BvbnNlIiCC0+STAhoiFS9hcGkvdjIvbGlnaHRzL3N3aXRjaDoBKmIG",
            "cHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Api.AnnotationsReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::LightsService.LightType), typeof(global::LightsService.PlayMode), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::LightsService.PreviewLightRequest), global::LightsService.PreviewLightRequest.Parser, new[]{ "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LightsService.PreviewLightResponse), global::LightsService.PreviewLightResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LightsService.PlayLightRequest), global::LightsService.PlayLightRequest.Parser, new[]{ "Ltype", "Id", "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LightsService.PlayLightResponse), global::LightsService.PlayLightResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LightsService.StopLightRequest), global::LightsService.StopLightRequest.Parser, new[]{ "Ltypes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LightsService.StopLightResponse), global::LightsService.StopLightResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LightsService.LightInfo), global::LightsService.LightInfo.Parser, new[]{ "Ltype", "Id", "Name", "Frames" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LightsService.LightFrame), global::LightsService.LightFrame.Parser, new[]{ "Colors", "Speed", "Mode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LightsService.ListLightsRequest), global::LightsService.ListLightsRequest.Parser, new[]{ "Ltype" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LightsService.ListLightsResponse), global::LightsService.ListLightsResponse.Parser, new[]{ "LightsInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LightsService.NewLightRequest), global::LightsService.NewLightRequest.Parser, new[]{ "LightInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LightsService.NewLightResponse), global::LightsService.NewLightResponse.Parser, new[]{ "LightInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LightsService.UpdateLightRequest), global::LightsService.UpdateLightRequest.Parser, new[]{ "LightInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LightsService.UpdateLightResponse), global::LightsService.UpdateLightResponse.Parser, new[]{ "LightInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LightsService.DeleteLightsRequest), global::LightsService.DeleteLightsRequest.Parser, new[]{ "LightsId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LightsService.DeleteLightsResponse), global::LightsService.DeleteLightsResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LightsService.StateRequest), global::LightsService.StateRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LightsService.StateResponse), global::LightsService.StateResponse.Parser, new[]{ "IsActive", "IsPlaying" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LightsService.SwitchRequest), global::LightsService.SwitchRequest.Parser, new[]{ "Active" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LightsService.SwitchResponse), global::LightsService.SwitchResponse.Parser, new[]{ "IsActive" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// 灯光类型
  /// </summary>
  public enum LightType {
    /// <summary>
    /// 保留， 不使用
    /// </summary>
    [pbr::OriginalName("UNDEFINED")] Undefined = 0,
    /// <summary>
    /// 嘴部灯光
    /// </summary>
    [pbr::OriginalName("MOUTH")] Mouth = 1,
    /// <summary>
    /// 手臂灯光
    /// </summary>
    [pbr::OriginalName("HANDS")] Hands = 2,
    /// <summary>
    /// 耳朵灯光
    /// </summary>
    [pbr::OriginalName("EARS")] Ears = 3,
  }

  /// <summary>
  /// 播放模式
  /// </summary>
  public enum PlayMode {
    /// <summary>
    /// 预置模式 默认为ALWAYS
    /// </summary>
    [pbr::OriginalName("PRESET")] Preset = 0,
    /// <summary>
    /// 常亮模式
    /// </summary>
    [pbr::OriginalName("ALWAYS")] Always = 1,
    /// <summary>
    /// 滚动模式
    /// [1,2,3] => [2,3,1] => [3,1,2]
    /// </summary>
    [pbr::OriginalName("MARQUEE")] Marquee = 2,
    /// <summary>
    /// 闪烁模式
    /// [true, true] => [false, false]
    /// </summary>
    [pbr::OriginalName("FLASH")] Flash = 3,
    /// <summary>
    /// 跳动模式
    /// [true, false, true, false] => [false, true, false, true]
    /// </summary>
    [pbr::OriginalName("TICKTOCK")] Ticktock = 4,
  }

  #endregion

  #region Messages
  /// <summary>
  /// 预览灯光请求
  /// </summary>
  public sealed partial class PreviewLightRequest : pb::IMessage<PreviewLightRequest> {
    private static readonly pb::MessageParser<PreviewLightRequest> _parser = new pb::MessageParser<PreviewLightRequest>(() => new PreviewLightRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PreviewLightRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LightsService.LightsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PreviewLightRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PreviewLightRequest(PreviewLightRequest other) : this() {
      id_ = other.id_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PreviewLightRequest Clone() {
      return new PreviewLightRequest(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// 灯光id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PreviewLightRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PreviewLightRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PreviewLightRequest other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 预览灯光结果
  /// </summary>
  public sealed partial class PreviewLightResponse : pb::IMessage<PreviewLightResponse> {
    private static readonly pb::MessageParser<PreviewLightResponse> _parser = new pb::MessageParser<PreviewLightResponse>(() => new PreviewLightResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PreviewLightResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LightsService.LightsReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PreviewLightResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PreviewLightResponse(PreviewLightResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PreviewLightResponse Clone() {
      return new PreviewLightResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PreviewLightResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PreviewLightResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PreviewLightResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// 播放灯光请求
  /// </summary>
  public sealed partial class PlayLightRequest : pb::IMessage<PlayLightRequest> {
    private static readonly pb::MessageParser<PlayLightRequest> _parser = new pb::MessageParser<PlayLightRequest>(() => new PlayLightRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayLightRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LightsService.LightsReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayLightRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayLightRequest(PlayLightRequest other) : this() {
      ltype_ = other.ltype_;
      id_ = other.id_;
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayLightRequest Clone() {
      return new PlayLightRequest(this);
    }

    /// <summary>Field number for the "ltype" field.</summary>
    public const int LtypeFieldNumber = 1;
    private global::LightsService.LightType ltype_ = 0;
    /// <summary>
    /// 灯光类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LightsService.LightType Ltype {
      get { return ltype_; }
      set {
        ltype_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private string id_ = "";
    /// <summary>
    /// 灯光id
    /// name参数非空时将优先匹配
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    /// <summary>
    /// 灯光名
    /// 仅匹配
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayLightRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayLightRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ltype != other.Ltype) return false;
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ltype != 0) hash ^= Ltype.GetHashCode();
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ltype != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Ltype);
      }
      if (Id.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ltype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Ltype);
      }
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayLightRequest other) {
      if (other == null) {
        return;
      }
      if (other.Ltype != 0) {
        Ltype = other.Ltype;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Ltype = (global::LightsService.LightType) input.ReadEnum();
            break;
          }
          case 18: {
            Id = input.ReadString();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 播放灯光请求结果
  /// </summary>
  public sealed partial class PlayLightResponse : pb::IMessage<PlayLightResponse> {
    private static readonly pb::MessageParser<PlayLightResponse> _parser = new pb::MessageParser<PlayLightResponse>(() => new PlayLightResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayLightResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LightsService.LightsReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayLightResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayLightResponse(PlayLightResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayLightResponse Clone() {
      return new PlayLightResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayLightResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayLightResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayLightResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// 停止灯光请求
  /// </summary>
  public sealed partial class StopLightRequest : pb::IMessage<StopLightRequest> {
    private static readonly pb::MessageParser<StopLightRequest> _parser = new pb::MessageParser<StopLightRequest>(() => new StopLightRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StopLightRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LightsService.LightsReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopLightRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopLightRequest(StopLightRequest other) : this() {
      ltypes_ = other.ltypes_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopLightRequest Clone() {
      return new StopLightRequest(this);
    }

    /// <summary>Field number for the "ltypes" field.</summary>
    public const int LtypesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::LightsService.LightType> _repeated_ltypes_codec
        = pb::FieldCodec.ForEnum(10, x => (int) x, x => (global::LightsService.LightType) x);
    private readonly pbc::RepeatedField<global::LightsService.LightType> ltypes_ = new pbc::RepeatedField<global::LightsService.LightType>();
    /// <summary>
    /// 灯光类型列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::LightsService.LightType> Ltypes {
      get { return ltypes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StopLightRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StopLightRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!ltypes_.Equals(other.ltypes_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= ltypes_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      ltypes_.WriteTo(output, _repeated_ltypes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += ltypes_.CalculateSize(_repeated_ltypes_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StopLightRequest other) {
      if (other == null) {
        return;
      }
      ltypes_.Add(other.ltypes_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            ltypes_.AddEntriesFrom(input, _repeated_ltypes_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 停止灯光结果
  /// </summary>
  public sealed partial class StopLightResponse : pb::IMessage<StopLightResponse> {
    private static readonly pb::MessageParser<StopLightResponse> _parser = new pb::MessageParser<StopLightResponse>(() => new StopLightResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StopLightResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LightsService.LightsReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopLightResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopLightResponse(StopLightResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopLightResponse Clone() {
      return new StopLightResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StopLightResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StopLightResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StopLightResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// 灯光数据明细
  /// </summary>
  public sealed partial class LightInfo : pb::IMessage<LightInfo> {
    private static readonly pb::MessageParser<LightInfo> _parser = new pb::MessageParser<LightInfo>(() => new LightInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LightInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LightsService.LightsReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LightInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LightInfo(LightInfo other) : this() {
      ltype_ = other.ltype_;
      id_ = other.id_;
      name_ = other.name_;
      frames_ = other.frames_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LightInfo Clone() {
      return new LightInfo(this);
    }

    /// <summary>Field number for the "ltype" field.</summary>
    public const int LtypeFieldNumber = 1;
    private global::LightsService.LightType ltype_ = 0;
    /// <summary>
    /// 灯光类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LightsService.LightType Ltype {
      get { return ltype_; }
      set {
        ltype_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private string id_ = "";
    /// <summary>
    /// 灯光id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    /// <summary>
    /// 灯光名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "frames" field.</summary>
    public const int FramesFieldNumber = 4;
    private static readonly pb::FieldCodec<global::LightsService.LightFrame> _repeated_frames_codec
        = pb::FieldCodec.ForMessage(34, global::LightsService.LightFrame.Parser);
    private readonly pbc::RepeatedField<global::LightsService.LightFrame> frames_ = new pbc::RepeatedField<global::LightsService.LightFrame>();
    /// <summary>
    /// 灯光帧列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::LightsService.LightFrame> Frames {
      get { return frames_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LightInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LightInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ltype != other.Ltype) return false;
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if(!frames_.Equals(other.frames_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ltype != 0) hash ^= Ltype.GetHashCode();
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= frames_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ltype != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Ltype);
      }
      if (Id.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      frames_.WriteTo(output, _repeated_frames_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ltype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Ltype);
      }
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += frames_.CalculateSize(_repeated_frames_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LightInfo other) {
      if (other == null) {
        return;
      }
      if (other.Ltype != 0) {
        Ltype = other.Ltype;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      frames_.Add(other.frames_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Ltype = (global::LightsService.LightType) input.ReadEnum();
            break;
          }
          case 18: {
            Id = input.ReadString();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            frames_.AddEntriesFrom(input, _repeated_frames_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 灯光帧
  /// </summary>
  public sealed partial class LightFrame : pb::IMessage<LightFrame> {
    private static readonly pb::MessageParser<LightFrame> _parser = new pb::MessageParser<LightFrame>(() => new LightFrame());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LightFrame> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LightsService.LightsReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LightFrame() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LightFrame(LightFrame other) : this() {
      colors_ = other.colors_.Clone();
      speed_ = other.speed_;
      mode_ = other.mode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LightFrame Clone() {
      return new LightFrame(this);
    }

    /// <summary>Field number for the "colors" field.</summary>
    public const int ColorsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_colors_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> colors_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// 灯光hex数据列表
    /// e.g. #31ebd1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Colors {
      get { return colors_; }
    }

    /// <summary>Field number for the "speed" field.</summary>
    public const int SpeedFieldNumber = 2;
    private uint speed_;
    /// <summary>
    /// 播放速度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    /// <summary>Field number for the "mode" field.</summary>
    public const int ModeFieldNumber = 3;
    private global::LightsService.PlayMode mode_ = 0;
    /// <summary>
    /// 播放模式
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LightsService.PlayMode Mode {
      get { return mode_; }
      set {
        mode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LightFrame);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LightFrame other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!colors_.Equals(other.colors_)) return false;
      if (Speed != other.Speed) return false;
      if (Mode != other.Mode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= colors_.GetHashCode();
      if (Speed != 0) hash ^= Speed.GetHashCode();
      if (Mode != 0) hash ^= Mode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      colors_.WriteTo(output, _repeated_colors_codec);
      if (Speed != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Speed);
      }
      if (Mode != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Mode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += colors_.CalculateSize(_repeated_colors_codec);
      if (Speed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Speed);
      }
      if (Mode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LightFrame other) {
      if (other == null) {
        return;
      }
      colors_.Add(other.colors_);
      if (other.Speed != 0) {
        Speed = other.Speed;
      }
      if (other.Mode != 0) {
        Mode = other.Mode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            colors_.AddEntriesFrom(input, _repeated_colors_codec);
            break;
          }
          case 16: {
            Speed = input.ReadUInt32();
            break;
          }
          case 24: {
            Mode = (global::LightsService.PlayMode) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 获取灯光数据请求
  /// </summary>
  public sealed partial class ListLightsRequest : pb::IMessage<ListLightsRequest> {
    private static readonly pb::MessageParser<ListLightsRequest> _parser = new pb::MessageParser<ListLightsRequest>(() => new ListLightsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListLightsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LightsService.LightsReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListLightsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListLightsRequest(ListLightsRequest other) : this() {
      ltype_ = other.ltype_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListLightsRequest Clone() {
      return new ListLightsRequest(this);
    }

    /// <summary>Field number for the "ltype" field.</summary>
    public const int LtypeFieldNumber = 1;
    private global::LightsService.LightType ltype_ = 0;
    /// <summary>
    /// 灯光类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LightsService.LightType Ltype {
      get { return ltype_; }
      set {
        ltype_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListLightsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListLightsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ltype != other.Ltype) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ltype != 0) hash ^= Ltype.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ltype != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Ltype);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ltype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Ltype);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListLightsRequest other) {
      if (other == null) {
        return;
      }
      if (other.Ltype != 0) {
        Ltype = other.Ltype;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Ltype = (global::LightsService.LightType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 获取灯光数据结果
  /// </summary>
  public sealed partial class ListLightsResponse : pb::IMessage<ListLightsResponse> {
    private static readonly pb::MessageParser<ListLightsResponse> _parser = new pb::MessageParser<ListLightsResponse>(() => new ListLightsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListLightsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LightsService.LightsReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListLightsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListLightsResponse(ListLightsResponse other) : this() {
      lightsInfo_ = other.lightsInfo_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListLightsResponse Clone() {
      return new ListLightsResponse(this);
    }

    /// <summary>Field number for the "lights_info" field.</summary>
    public const int LightsInfoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::LightsService.LightInfo> _repeated_lightsInfo_codec
        = pb::FieldCodec.ForMessage(10, global::LightsService.LightInfo.Parser);
    private readonly pbc::RepeatedField<global::LightsService.LightInfo> lightsInfo_ = new pbc::RepeatedField<global::LightsService.LightInfo>();
    /// <summary>
    /// 灯光数据明细列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::LightsService.LightInfo> LightsInfo {
      get { return lightsInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListLightsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListLightsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!lightsInfo_.Equals(other.lightsInfo_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= lightsInfo_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      lightsInfo_.WriteTo(output, _repeated_lightsInfo_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += lightsInfo_.CalculateSize(_repeated_lightsInfo_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListLightsResponse other) {
      if (other == null) {
        return;
      }
      lightsInfo_.Add(other.lightsInfo_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            lightsInfo_.AddEntriesFrom(input, _repeated_lightsInfo_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 创建灯光请求
  /// </summary>
  public sealed partial class NewLightRequest : pb::IMessage<NewLightRequest> {
    private static readonly pb::MessageParser<NewLightRequest> _parser = new pb::MessageParser<NewLightRequest>(() => new NewLightRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NewLightRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LightsService.LightsReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewLightRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewLightRequest(NewLightRequest other) : this() {
      lightInfo_ = other.lightInfo_ != null ? other.lightInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewLightRequest Clone() {
      return new NewLightRequest(this);
    }

    /// <summary>Field number for the "light_info" field.</summary>
    public const int LightInfoFieldNumber = 1;
    private global::LightsService.LightInfo lightInfo_;
    /// <summary>
    /// 灯光数据明细
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LightsService.LightInfo LightInfo {
      get { return lightInfo_; }
      set {
        lightInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NewLightRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NewLightRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(LightInfo, other.LightInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (lightInfo_ != null) hash ^= LightInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (lightInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(LightInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (lightInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LightInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NewLightRequest other) {
      if (other == null) {
        return;
      }
      if (other.lightInfo_ != null) {
        if (lightInfo_ == null) {
          LightInfo = new global::LightsService.LightInfo();
        }
        LightInfo.MergeFrom(other.LightInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (lightInfo_ == null) {
              LightInfo = new global::LightsService.LightInfo();
            }
            input.ReadMessage(LightInfo);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 创建灯光结果
  /// </summary>
  public sealed partial class NewLightResponse : pb::IMessage<NewLightResponse> {
    private static readonly pb::MessageParser<NewLightResponse> _parser = new pb::MessageParser<NewLightResponse>(() => new NewLightResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NewLightResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LightsService.LightsReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewLightResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewLightResponse(NewLightResponse other) : this() {
      lightInfo_ = other.lightInfo_ != null ? other.lightInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewLightResponse Clone() {
      return new NewLightResponse(this);
    }

    /// <summary>Field number for the "light_info" field.</summary>
    public const int LightInfoFieldNumber = 1;
    private global::LightsService.LightInfo lightInfo_;
    /// <summary>
    /// 灯光数据明细
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LightsService.LightInfo LightInfo {
      get { return lightInfo_; }
      set {
        lightInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NewLightResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NewLightResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(LightInfo, other.LightInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (lightInfo_ != null) hash ^= LightInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (lightInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(LightInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (lightInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LightInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NewLightResponse other) {
      if (other == null) {
        return;
      }
      if (other.lightInfo_ != null) {
        if (lightInfo_ == null) {
          LightInfo = new global::LightsService.LightInfo();
        }
        LightInfo.MergeFrom(other.LightInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (lightInfo_ == null) {
              LightInfo = new global::LightsService.LightInfo();
            }
            input.ReadMessage(LightInfo);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 更新灯光数据请求
  /// </summary>
  public sealed partial class UpdateLightRequest : pb::IMessage<UpdateLightRequest> {
    private static readonly pb::MessageParser<UpdateLightRequest> _parser = new pb::MessageParser<UpdateLightRequest>(() => new UpdateLightRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateLightRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LightsService.LightsReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateLightRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateLightRequest(UpdateLightRequest other) : this() {
      lightInfo_ = other.lightInfo_ != null ? other.lightInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateLightRequest Clone() {
      return new UpdateLightRequest(this);
    }

    /// <summary>Field number for the "light_info" field.</summary>
    public const int LightInfoFieldNumber = 1;
    private global::LightsService.LightInfo lightInfo_;
    /// <summary>
    /// 灯光数据明细
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LightsService.LightInfo LightInfo {
      get { return lightInfo_; }
      set {
        lightInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateLightRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateLightRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(LightInfo, other.LightInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (lightInfo_ != null) hash ^= LightInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (lightInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(LightInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (lightInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LightInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateLightRequest other) {
      if (other == null) {
        return;
      }
      if (other.lightInfo_ != null) {
        if (lightInfo_ == null) {
          LightInfo = new global::LightsService.LightInfo();
        }
        LightInfo.MergeFrom(other.LightInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (lightInfo_ == null) {
              LightInfo = new global::LightsService.LightInfo();
            }
            input.ReadMessage(LightInfo);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 更新灯光数据结果
  /// </summary>
  public sealed partial class UpdateLightResponse : pb::IMessage<UpdateLightResponse> {
    private static readonly pb::MessageParser<UpdateLightResponse> _parser = new pb::MessageParser<UpdateLightResponse>(() => new UpdateLightResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateLightResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LightsService.LightsReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateLightResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateLightResponse(UpdateLightResponse other) : this() {
      lightInfo_ = other.lightInfo_ != null ? other.lightInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateLightResponse Clone() {
      return new UpdateLightResponse(this);
    }

    /// <summary>Field number for the "light_info" field.</summary>
    public const int LightInfoFieldNumber = 1;
    private global::LightsService.LightInfo lightInfo_;
    /// <summary>
    /// 灯光数据明细
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LightsService.LightInfo LightInfo {
      get { return lightInfo_; }
      set {
        lightInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateLightResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateLightResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(LightInfo, other.LightInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (lightInfo_ != null) hash ^= LightInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (lightInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(LightInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (lightInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LightInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateLightResponse other) {
      if (other == null) {
        return;
      }
      if (other.lightInfo_ != null) {
        if (lightInfo_ == null) {
          LightInfo = new global::LightsService.LightInfo();
        }
        LightInfo.MergeFrom(other.LightInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (lightInfo_ == null) {
              LightInfo = new global::LightsService.LightInfo();
            }
            input.ReadMessage(LightInfo);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 删除灯光请求
  /// </summary>
  public sealed partial class DeleteLightsRequest : pb::IMessage<DeleteLightsRequest> {
    private static readonly pb::MessageParser<DeleteLightsRequest> _parser = new pb::MessageParser<DeleteLightsRequest>(() => new DeleteLightsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteLightsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LightsService.LightsReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteLightsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteLightsRequest(DeleteLightsRequest other) : this() {
      lightsId_ = other.lightsId_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteLightsRequest Clone() {
      return new DeleteLightsRequest(this);
    }

    /// <summary>Field number for the "lights_id" field.</summary>
    public const int LightsIdFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_lightsId_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> lightsId_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// 删除灯光id列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> LightsId {
      get { return lightsId_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteLightsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteLightsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!lightsId_.Equals(other.lightsId_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= lightsId_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      lightsId_.WriteTo(output, _repeated_lightsId_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += lightsId_.CalculateSize(_repeated_lightsId_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteLightsRequest other) {
      if (other == null) {
        return;
      }
      lightsId_.Add(other.lightsId_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            lightsId_.AddEntriesFrom(input, _repeated_lightsId_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 删除灯光结果
  /// </summary>
  public sealed partial class DeleteLightsResponse : pb::IMessage<DeleteLightsResponse> {
    private static readonly pb::MessageParser<DeleteLightsResponse> _parser = new pb::MessageParser<DeleteLightsResponse>(() => new DeleteLightsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteLightsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LightsService.LightsReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteLightsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteLightsResponse(DeleteLightsResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteLightsResponse Clone() {
      return new DeleteLightsResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteLightsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteLightsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteLightsResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class StateRequest : pb::IMessage<StateRequest> {
    private static readonly pb::MessageParser<StateRequest> _parser = new pb::MessageParser<StateRequest>(() => new StateRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StateRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LightsService.LightsReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StateRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StateRequest(StateRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StateRequest Clone() {
      return new StateRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StateRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StateRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StateRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class StateResponse : pb::IMessage<StateResponse> {
    private static readonly pb::MessageParser<StateResponse> _parser = new pb::MessageParser<StateResponse>(() => new StateResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StateResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LightsService.LightsReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StateResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StateResponse(StateResponse other) : this() {
      isActive_ = other.isActive_;
      isPlaying_ = other.isPlaying_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StateResponse Clone() {
      return new StateResponse(this);
    }

    /// <summary>Field number for the "is_active" field.</summary>
    public const int IsActiveFieldNumber = 1;
    private bool isActive_;
    /// <summary>
    /// 当前是否启用
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsActive {
      get { return isActive_; }
      set {
        isActive_ = value;
      }
    }

    /// <summary>Field number for the "is_playing" field.</summary>
    public const int IsPlayingFieldNumber = 2;
    private bool isPlaying_;
    /// <summary>
    /// 当前是否在播放中
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPlaying {
      get { return isPlaying_; }
      set {
        isPlaying_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StateResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StateResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsActive != other.IsActive) return false;
      if (IsPlaying != other.IsPlaying) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsActive != false) hash ^= IsActive.GetHashCode();
      if (IsPlaying != false) hash ^= IsPlaying.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsActive != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsActive);
      }
      if (IsPlaying != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsPlaying);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsActive != false) {
        size += 1 + 1;
      }
      if (IsPlaying != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StateResponse other) {
      if (other == null) {
        return;
      }
      if (other.IsActive != false) {
        IsActive = other.IsActive;
      }
      if (other.IsPlaying != false) {
        IsPlaying = other.IsPlaying;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IsActive = input.ReadBool();
            break;
          }
          case 16: {
            IsPlaying = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SwitchRequest : pb::IMessage<SwitchRequest> {
    private static readonly pb::MessageParser<SwitchRequest> _parser = new pb::MessageParser<SwitchRequest>(() => new SwitchRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SwitchRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LightsService.LightsReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SwitchRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SwitchRequest(SwitchRequest other) : this() {
      active_ = other.active_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SwitchRequest Clone() {
      return new SwitchRequest(this);
    }

    /// <summary>Field number for the "active" field.</summary>
    public const int ActiveFieldNumber = 1;
    private bool active_;
    /// <summary>
    /// 启用与关闭
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Active {
      get { return active_; }
      set {
        active_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SwitchRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SwitchRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Active != other.Active) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Active != false) hash ^= Active.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Active != false) {
        output.WriteRawTag(8);
        output.WriteBool(Active);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Active != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SwitchRequest other) {
      if (other == null) {
        return;
      }
      if (other.Active != false) {
        Active = other.Active;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Active = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SwitchResponse : pb::IMessage<SwitchResponse> {
    private static readonly pb::MessageParser<SwitchResponse> _parser = new pb::MessageParser<SwitchResponse>(() => new SwitchResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SwitchResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LightsService.LightsReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SwitchResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SwitchResponse(SwitchResponse other) : this() {
      isActive_ = other.isActive_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SwitchResponse Clone() {
      return new SwitchResponse(this);
    }

    /// <summary>Field number for the "is_active" field.</summary>
    public const int IsActiveFieldNumber = 1;
    private bool isActive_;
    /// <summary>
    /// 当前是否启用
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsActive {
      get { return isActive_; }
      set {
        isActive_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SwitchResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SwitchResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsActive != other.IsActive) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsActive != false) hash ^= IsActive.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsActive != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsActive);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsActive != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SwitchResponse other) {
      if (other == null) {
        return;
      }
      if (other.IsActive != false) {
        IsActive = other.IsActive;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IsActive = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
