// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: lights.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace LightsService {
  public static partial class LightsService
  {
    static readonly string __ServiceName = "lightsService.LightsService";

    static readonly grpc::Marshaller<global::LightsService.PreviewLightRequest> __Marshaller_lightsService_PreviewLightRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::LightsService.PreviewLightRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::LightsService.PreviewLightResponse> __Marshaller_lightsService_PreviewLightResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::LightsService.PreviewLightResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::LightsService.PlayLightRequest> __Marshaller_lightsService_PlayLightRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::LightsService.PlayLightRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::LightsService.PlayLightResponse> __Marshaller_lightsService_PlayLightResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::LightsService.PlayLightResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::LightsService.StopLightRequest> __Marshaller_lightsService_StopLightRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::LightsService.StopLightRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::LightsService.StopLightResponse> __Marshaller_lightsService_StopLightResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::LightsService.StopLightResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::LightsService.ListLightsRequest> __Marshaller_lightsService_ListLightsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::LightsService.ListLightsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::LightsService.ListLightsResponse> __Marshaller_lightsService_ListLightsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::LightsService.ListLightsResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::LightsService.NewLightRequest> __Marshaller_lightsService_NewLightRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::LightsService.NewLightRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::LightsService.NewLightResponse> __Marshaller_lightsService_NewLightResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::LightsService.NewLightResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::LightsService.UpdateLightRequest> __Marshaller_lightsService_UpdateLightRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::LightsService.UpdateLightRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::LightsService.UpdateLightResponse> __Marshaller_lightsService_UpdateLightResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::LightsService.UpdateLightResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::LightsService.DeleteLightsRequest> __Marshaller_lightsService_DeleteLightsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::LightsService.DeleteLightsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::LightsService.DeleteLightsResponse> __Marshaller_lightsService_DeleteLightsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::LightsService.DeleteLightsResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::LightsService.PreviewLightRequest, global::LightsService.PreviewLightResponse> __Method_PreviewLight = new grpc::Method<global::LightsService.PreviewLightRequest, global::LightsService.PreviewLightResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PreviewLight",
        __Marshaller_lightsService_PreviewLightRequest,
        __Marshaller_lightsService_PreviewLightResponse);

    static readonly grpc::Method<global::LightsService.PlayLightRequest, global::LightsService.PlayLightResponse> __Method_PlayLight = new grpc::Method<global::LightsService.PlayLightRequest, global::LightsService.PlayLightResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PlayLight",
        __Marshaller_lightsService_PlayLightRequest,
        __Marshaller_lightsService_PlayLightResponse);

    static readonly grpc::Method<global::LightsService.StopLightRequest, global::LightsService.StopLightResponse> __Method_StopLight = new grpc::Method<global::LightsService.StopLightRequest, global::LightsService.StopLightResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "StopLight",
        __Marshaller_lightsService_StopLightRequest,
        __Marshaller_lightsService_StopLightResponse);

    static readonly grpc::Method<global::LightsService.ListLightsRequest, global::LightsService.ListLightsResponse> __Method_ListLights = new grpc::Method<global::LightsService.ListLightsRequest, global::LightsService.ListLightsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListLights",
        __Marshaller_lightsService_ListLightsRequest,
        __Marshaller_lightsService_ListLightsResponse);

    static readonly grpc::Method<global::LightsService.NewLightRequest, global::LightsService.NewLightResponse> __Method_NewLight = new grpc::Method<global::LightsService.NewLightRequest, global::LightsService.NewLightResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "NewLight",
        __Marshaller_lightsService_NewLightRequest,
        __Marshaller_lightsService_NewLightResponse);

    static readonly grpc::Method<global::LightsService.UpdateLightRequest, global::LightsService.UpdateLightResponse> __Method_UpdateLight = new grpc::Method<global::LightsService.UpdateLightRequest, global::LightsService.UpdateLightResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateLight",
        __Marshaller_lightsService_UpdateLightRequest,
        __Marshaller_lightsService_UpdateLightResponse);

    static readonly grpc::Method<global::LightsService.DeleteLightsRequest, global::LightsService.DeleteLightsResponse> __Method_DeleteLights = new grpc::Method<global::LightsService.DeleteLightsRequest, global::LightsService.DeleteLightsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteLights",
        __Marshaller_lightsService_DeleteLightsRequest,
        __Marshaller_lightsService_DeleteLightsResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::LightsService.LightsReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of LightsService</summary>
    [grpc::BindServiceMethod(typeof(LightsService), "BindService")]
    public abstract partial class LightsServiceBase
    {
      /// <summary>
      /// 预览灯光
      /// 创建灯光后使用此方法生成灯光文件
      /// 在未生成灯光文件前调用PlayLight将无效
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::LightsService.PreviewLightResponse> PreviewLight(global::LightsService.PreviewLightRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 播放灯光
      /// 需在播放前执行PreviewLight生成灯光文件
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::LightsService.PlayLightResponse> PlayLight(global::LightsService.PlayLightRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 停止灯光
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::LightsService.StopLightResponse> StopLight(global::LightsService.StopLightRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 获取灯光数据
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::LightsService.ListLightsResponse> ListLights(global::LightsService.ListLightsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 创建灯光
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::LightsService.NewLightResponse> NewLight(global::LightsService.NewLightRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 更新灯光数据
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::LightsService.UpdateLightResponse> UpdateLight(global::LightsService.UpdateLightRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 删除灯光
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::LightsService.DeleteLightsResponse> DeleteLights(global::LightsService.DeleteLightsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for LightsService</summary>
    public partial class LightsServiceClient : grpc::ClientBase<LightsServiceClient>
    {
      /// <summary>Creates a new client for LightsService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public LightsServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for LightsService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public LightsServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected LightsServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected LightsServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// 预览灯光
      /// 创建灯光后使用此方法生成灯光文件
      /// 在未生成灯光文件前调用PlayLight将无效
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::LightsService.PreviewLightResponse PreviewLight(global::LightsService.PreviewLightRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PreviewLight(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 预览灯光
      /// 创建灯光后使用此方法生成灯光文件
      /// 在未生成灯光文件前调用PlayLight将无效
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::LightsService.PreviewLightResponse PreviewLight(global::LightsService.PreviewLightRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PreviewLight, null, options, request);
      }
      /// <summary>
      /// 预览灯光
      /// 创建灯光后使用此方法生成灯光文件
      /// 在未生成灯光文件前调用PlayLight将无效
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::LightsService.PreviewLightResponse> PreviewLightAsync(global::LightsService.PreviewLightRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PreviewLightAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 预览灯光
      /// 创建灯光后使用此方法生成灯光文件
      /// 在未生成灯光文件前调用PlayLight将无效
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::LightsService.PreviewLightResponse> PreviewLightAsync(global::LightsService.PreviewLightRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PreviewLight, null, options, request);
      }
      /// <summary>
      /// 播放灯光
      /// 需在播放前执行PreviewLight生成灯光文件
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::LightsService.PlayLightResponse PlayLight(global::LightsService.PlayLightRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PlayLight(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 播放灯光
      /// 需在播放前执行PreviewLight生成灯光文件
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::LightsService.PlayLightResponse PlayLight(global::LightsService.PlayLightRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PlayLight, null, options, request);
      }
      /// <summary>
      /// 播放灯光
      /// 需在播放前执行PreviewLight生成灯光文件
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::LightsService.PlayLightResponse> PlayLightAsync(global::LightsService.PlayLightRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PlayLightAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 播放灯光
      /// 需在播放前执行PreviewLight生成灯光文件
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::LightsService.PlayLightResponse> PlayLightAsync(global::LightsService.PlayLightRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PlayLight, null, options, request);
      }
      /// <summary>
      /// 停止灯光
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::LightsService.StopLightResponse StopLight(global::LightsService.StopLightRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StopLight(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 停止灯光
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::LightsService.StopLightResponse StopLight(global::LightsService.StopLightRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_StopLight, null, options, request);
      }
      /// <summary>
      /// 停止灯光
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::LightsService.StopLightResponse> StopLightAsync(global::LightsService.StopLightRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StopLightAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 停止灯光
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::LightsService.StopLightResponse> StopLightAsync(global::LightsService.StopLightRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_StopLight, null, options, request);
      }
      /// <summary>
      /// 获取灯光数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::LightsService.ListLightsResponse ListLights(global::LightsService.ListLightsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListLights(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 获取灯光数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::LightsService.ListLightsResponse ListLights(global::LightsService.ListLightsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListLights, null, options, request);
      }
      /// <summary>
      /// 获取灯光数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::LightsService.ListLightsResponse> ListLightsAsync(global::LightsService.ListLightsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListLightsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 获取灯光数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::LightsService.ListLightsResponse> ListLightsAsync(global::LightsService.ListLightsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListLights, null, options, request);
      }
      /// <summary>
      /// 创建灯光
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::LightsService.NewLightResponse NewLight(global::LightsService.NewLightRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return NewLight(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 创建灯光
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::LightsService.NewLightResponse NewLight(global::LightsService.NewLightRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_NewLight, null, options, request);
      }
      /// <summary>
      /// 创建灯光
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::LightsService.NewLightResponse> NewLightAsync(global::LightsService.NewLightRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return NewLightAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 创建灯光
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::LightsService.NewLightResponse> NewLightAsync(global::LightsService.NewLightRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_NewLight, null, options, request);
      }
      /// <summary>
      /// 更新灯光数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::LightsService.UpdateLightResponse UpdateLight(global::LightsService.UpdateLightRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateLight(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 更新灯光数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::LightsService.UpdateLightResponse UpdateLight(global::LightsService.UpdateLightRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateLight, null, options, request);
      }
      /// <summary>
      /// 更新灯光数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::LightsService.UpdateLightResponse> UpdateLightAsync(global::LightsService.UpdateLightRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateLightAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 更新灯光数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::LightsService.UpdateLightResponse> UpdateLightAsync(global::LightsService.UpdateLightRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateLight, null, options, request);
      }
      /// <summary>
      /// 删除灯光
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::LightsService.DeleteLightsResponse DeleteLights(global::LightsService.DeleteLightsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteLights(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 删除灯光
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::LightsService.DeleteLightsResponse DeleteLights(global::LightsService.DeleteLightsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteLights, null, options, request);
      }
      /// <summary>
      /// 删除灯光
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::LightsService.DeleteLightsResponse> DeleteLightsAsync(global::LightsService.DeleteLightsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteLightsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 删除灯光
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::LightsService.DeleteLightsResponse> DeleteLightsAsync(global::LightsService.DeleteLightsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteLights, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override LightsServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new LightsServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(LightsServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_PreviewLight, serviceImpl.PreviewLight)
          .AddMethod(__Method_PlayLight, serviceImpl.PlayLight)
          .AddMethod(__Method_StopLight, serviceImpl.StopLight)
          .AddMethod(__Method_ListLights, serviceImpl.ListLights)
          .AddMethod(__Method_NewLight, serviceImpl.NewLight)
          .AddMethod(__Method_UpdateLight, serviceImpl.UpdateLight)
          .AddMethod(__Method_DeleteLights, serviceImpl.DeleteLights).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, LightsServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_PreviewLight, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::LightsService.PreviewLightRequest, global::LightsService.PreviewLightResponse>(serviceImpl.PreviewLight));
      serviceBinder.AddMethod(__Method_PlayLight, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::LightsService.PlayLightRequest, global::LightsService.PlayLightResponse>(serviceImpl.PlayLight));
      serviceBinder.AddMethod(__Method_StopLight, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::LightsService.StopLightRequest, global::LightsService.StopLightResponse>(serviceImpl.StopLight));
      serviceBinder.AddMethod(__Method_ListLights, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::LightsService.ListLightsRequest, global::LightsService.ListLightsResponse>(serviceImpl.ListLights));
      serviceBinder.AddMethod(__Method_NewLight, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::LightsService.NewLightRequest, global::LightsService.NewLightResponse>(serviceImpl.NewLight));
      serviceBinder.AddMethod(__Method_UpdateLight, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::LightsService.UpdateLightRequest, global::LightsService.UpdateLightResponse>(serviceImpl.UpdateLight));
      serviceBinder.AddMethod(__Method_DeleteLights, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::LightsService.DeleteLightsRequest, global::LightsService.DeleteLightsResponse>(serviceImpl.DeleteLights));
    }

  }
}
#endregion
