// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lights.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30002
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30002 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class LightFrame;
@class LightInfo;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum LightType

/** 灯光类型 */
typedef GPB_ENUM(LightType) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  LightType_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  /** 保留， 不使用 */
  LightType_Undefined = 0,

  /** 嘴部灯光 */
  LightType_Mouth = 1,

  /** 手臂灯光 */
  LightType_Hands = 2,

  /** 耳朵灯光 */
  LightType_Ears = 3,
};

GPBEnumDescriptor *LightType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL LightType_IsValidValue(int32_t value);

#pragma mark - Enum PlayMode

/** 播放模式 */
typedef GPB_ENUM(PlayMode) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  PlayMode_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  /** 预置模式 默认为ALWAYS */
  PlayMode_Preset = 0,

  /** 常亮模式 */
  PlayMode_Always = 1,

  /**
   * 滚动模式
   * [1,2,3] => [2,3,1] => [3,1,2]
   **/
  PlayMode_Marquee = 2,

  /**
   * 闪烁模式
   * [true, true] => [false, false]
   **/
  PlayMode_Flash = 3,

  /**
   * 跳动模式
   * [true, false, true, false] => [false, true, false, true]
   **/
  PlayMode_Ticktock = 4,
};

GPBEnumDescriptor *PlayMode_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL PlayMode_IsValidValue(int32_t value);

#pragma mark - LightsRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
@interface LightsRoot : GPBRootObject
@end

#pragma mark - PreviewLightRequest

typedef GPB_ENUM(PreviewLightRequest_FieldNumber) {
  PreviewLightRequest_FieldNumber_Id_p = 1,
};

/**
 * 预览灯光请求
 **/
@interface PreviewLightRequest : GPBMessage

/** 灯光id */
@property(nonatomic, readwrite, copy, null_resettable) NSString *id_p;

@end

#pragma mark - PreviewLightResponse

/**
 * 预览灯光结果
 **/
@interface PreviewLightResponse : GPBMessage

@end

#pragma mark - PlayLightRequest

typedef GPB_ENUM(PlayLightRequest_FieldNumber) {
  PlayLightRequest_FieldNumber_Ltype = 1,
  PlayLightRequest_FieldNumber_Id_p = 2,
  PlayLightRequest_FieldNumber_Name = 3,
};

/**
 * 播放灯光请求
 **/
@interface PlayLightRequest : GPBMessage

/** 灯光类型 */
@property(nonatomic, readwrite) LightType ltype;

/**
 * 灯光id
 * name参数非空时将优先匹配
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *id_p;

/**
 * 灯光名
 * 仅匹配
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *name;

@end

/**
 * Fetches the raw value of a @c PlayLightRequest's @c ltype property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t PlayLightRequest_Ltype_RawValue(PlayLightRequest *message);
/**
 * Sets the raw value of an @c PlayLightRequest's @c ltype property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetPlayLightRequest_Ltype_RawValue(PlayLightRequest *message, int32_t value);

#pragma mark - PlayLightResponse

/**
 * 播放灯光请求结果
 **/
@interface PlayLightResponse : GPBMessage

@end

#pragma mark - StopLightRequest

typedef GPB_ENUM(StopLightRequest_FieldNumber) {
  StopLightRequest_FieldNumber_LtypesArray = 1,
};

/**
 * 停止灯光请求
 **/
@interface StopLightRequest : GPBMessage

/** 灯光类型列表 */
// |ltypesArray| contains |LightType|
@property(nonatomic, readwrite, strong, null_resettable) GPBEnumArray *ltypesArray;
/** The number of items in @c ltypesArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger ltypesArray_Count;

@end

#pragma mark - StopLightResponse

/**
 * 停止灯光结果
 **/
@interface StopLightResponse : GPBMessage

@end

#pragma mark - LightInfo

typedef GPB_ENUM(LightInfo_FieldNumber) {
  LightInfo_FieldNumber_Ltype = 1,
  LightInfo_FieldNumber_Id_p = 2,
  LightInfo_FieldNumber_Name = 3,
  LightInfo_FieldNumber_FramesArray = 4,
};

/**
 * 灯光数据明细
 **/
@interface LightInfo : GPBMessage

/** 灯光类型 */
@property(nonatomic, readwrite) LightType ltype;

/** 灯光id */
@property(nonatomic, readwrite, copy, null_resettable) NSString *id_p;

/** 灯光名 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *name;

/** 灯光帧列表 */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<LightFrame*> *framesArray;
/** The number of items in @c framesArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger framesArray_Count;

@end

/**
 * Fetches the raw value of a @c LightInfo's @c ltype property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t LightInfo_Ltype_RawValue(LightInfo *message);
/**
 * Sets the raw value of an @c LightInfo's @c ltype property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetLightInfo_Ltype_RawValue(LightInfo *message, int32_t value);

#pragma mark - LightFrame

typedef GPB_ENUM(LightFrame_FieldNumber) {
  LightFrame_FieldNumber_ColorsArray = 1,
  LightFrame_FieldNumber_Speed = 2,
  LightFrame_FieldNumber_Mode = 3,
};

/**
 * 灯光帧
 **/
@interface LightFrame : GPBMessage

/**
 * 灯光hex数据列表
 * e.g. #31ebd1
 **/
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *colorsArray;
/** The number of items in @c colorsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger colorsArray_Count;

/** 播放速度 */
@property(nonatomic, readwrite) uint32_t speed;

/** 播放模式 */
@property(nonatomic, readwrite) PlayMode mode;

@end

/**
 * Fetches the raw value of a @c LightFrame's @c mode property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t LightFrame_Mode_RawValue(LightFrame *message);
/**
 * Sets the raw value of an @c LightFrame's @c mode property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetLightFrame_Mode_RawValue(LightFrame *message, int32_t value);

#pragma mark - ListLightsRequest

typedef GPB_ENUM(ListLightsRequest_FieldNumber) {
  ListLightsRequest_FieldNumber_Ltype = 1,
};

/**
 * 获取灯光数据请求
 **/
@interface ListLightsRequest : GPBMessage

/** 灯光类型 */
@property(nonatomic, readwrite) LightType ltype;

@end

/**
 * Fetches the raw value of a @c ListLightsRequest's @c ltype property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t ListLightsRequest_Ltype_RawValue(ListLightsRequest *message);
/**
 * Sets the raw value of an @c ListLightsRequest's @c ltype property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetListLightsRequest_Ltype_RawValue(ListLightsRequest *message, int32_t value);

#pragma mark - ListLightsResponse

typedef GPB_ENUM(ListLightsResponse_FieldNumber) {
  ListLightsResponse_FieldNumber_LightsInfoArray = 1,
};

/**
 * 获取灯光数据结果
 **/
@interface ListLightsResponse : GPBMessage

/** 灯光数据明细列表 */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<LightInfo*> *lightsInfoArray;
/** The number of items in @c lightsInfoArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger lightsInfoArray_Count;

@end

#pragma mark - NewLightRequest

typedef GPB_ENUM(NewLightRequest_FieldNumber) {
  NewLightRequest_FieldNumber_LightInfo = 1,
};

/**
 * 创建灯光请求
 **/
@interface NewLightRequest : GPBMessage

/** 灯光数据明细 */
@property(nonatomic, readwrite, strong, null_resettable) LightInfo *lightInfo;
/** Test to see if @c lightInfo has been set. */
@property(nonatomic, readwrite) BOOL hasLightInfo;

@end

#pragma mark - NewLightResponse

typedef GPB_ENUM(NewLightResponse_FieldNumber) {
  NewLightResponse_FieldNumber_LightInfo = 1,
};

/**
 * 创建灯光结果
 **/
@interface NewLightResponse : GPBMessage

/** 灯光数据明细 */
@property(nonatomic, readwrite, strong, null_resettable) LightInfo *lightInfo;
/** Test to see if @c lightInfo has been set. */
@property(nonatomic, readwrite) BOOL hasLightInfo;

@end

#pragma mark - UpdateLightRequest

typedef GPB_ENUM(UpdateLightRequest_FieldNumber) {
  UpdateLightRequest_FieldNumber_LightInfo = 1,
};

/**
 * 更新灯光数据请求
 **/
@interface UpdateLightRequest : GPBMessage

/** 灯光数据明细 */
@property(nonatomic, readwrite, strong, null_resettable) LightInfo *lightInfo;
/** Test to see if @c lightInfo has been set. */
@property(nonatomic, readwrite) BOOL hasLightInfo;

@end

#pragma mark - UpdateLightResponse

typedef GPB_ENUM(UpdateLightResponse_FieldNumber) {
  UpdateLightResponse_FieldNumber_LightInfo = 1,
};

/**
 * 更新灯光数据结果
 **/
@interface UpdateLightResponse : GPBMessage

/** 灯光数据明细 */
@property(nonatomic, readwrite, strong, null_resettable) LightInfo *lightInfo;
/** Test to see if @c lightInfo has been set. */
@property(nonatomic, readwrite) BOOL hasLightInfo;

@end

#pragma mark - DeleteLightsRequest

typedef GPB_ENUM(DeleteLightsRequest_FieldNumber) {
  DeleteLightsRequest_FieldNumber_LightsIdArray = 1,
};

/**
 * 删除灯光请求
 **/
@interface DeleteLightsRequest : GPBMessage

/** 删除灯光id列表 */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *lightsIdArray;
/** The number of items in @c lightsIdArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger lightsIdArray_Count;

@end

#pragma mark - DeleteLightsResponse

/**
 * 删除灯光结果
 **/
@interface DeleteLightsResponse : GPBMessage

@end

#pragma mark - StateRequest

@interface StateRequest : GPBMessage

@end

#pragma mark - StateResponse

typedef GPB_ENUM(StateResponse_FieldNumber) {
  StateResponse_FieldNumber_IsActive = 1,
  StateResponse_FieldNumber_IsPlaying = 2,
};

@interface StateResponse : GPBMessage

/** 当前是否启用 */
@property(nonatomic, readwrite) BOOL isActive;

/** 当前是否在播放中 */
@property(nonatomic, readwrite) BOOL isPlaying;

@end

#pragma mark - SwitchRequest

typedef GPB_ENUM(SwitchRequest_FieldNumber) {
  SwitchRequest_FieldNumber_Active = 1,
};

@interface SwitchRequest : GPBMessage

/** 启用与关闭 */
@property(nonatomic, readwrite) BOOL active;

@end

#pragma mark - SwitchResponse

typedef GPB_ENUM(SwitchResponse_FieldNumber) {
  SwitchResponse_FieldNumber_IsActive = 1,
};

@interface SwitchResponse : GPBMessage

/** 当前是否启用 */
@property(nonatomic, readwrite) BOOL isActive;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
