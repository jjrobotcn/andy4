// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lights.proto

#include "lights.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_lights_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_LightFrame_lights_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_lights_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_LightInfo_lights_2eproto;
namespace lightsService {
class PreviewLightRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PreviewLightRequest> _instance;
} _PreviewLightRequest_default_instance_;
class PreviewLightResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PreviewLightResponse> _instance;
} _PreviewLightResponse_default_instance_;
class PlayLightRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayLightRequest> _instance;
} _PlayLightRequest_default_instance_;
class PlayLightResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayLightResponse> _instance;
} _PlayLightResponse_default_instance_;
class StopLightRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StopLightRequest> _instance;
} _StopLightRequest_default_instance_;
class StopLightResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StopLightResponse> _instance;
} _StopLightResponse_default_instance_;
class LightInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LightInfo> _instance;
} _LightInfo_default_instance_;
class LightFrameDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LightFrame> _instance;
} _LightFrame_default_instance_;
class ListLightsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ListLightsRequest> _instance;
} _ListLightsRequest_default_instance_;
class ListLightsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ListLightsResponse> _instance;
} _ListLightsResponse_default_instance_;
class NewLightRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NewLightRequest> _instance;
} _NewLightRequest_default_instance_;
class NewLightResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NewLightResponse> _instance;
} _NewLightResponse_default_instance_;
class UpdateLightRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UpdateLightRequest> _instance;
} _UpdateLightRequest_default_instance_;
class UpdateLightResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UpdateLightResponse> _instance;
} _UpdateLightResponse_default_instance_;
class DeleteLightsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeleteLightsRequest> _instance;
} _DeleteLightsRequest_default_instance_;
class DeleteLightsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeleteLightsResponse> _instance;
} _DeleteLightsResponse_default_instance_;
}  // namespace lightsService
static void InitDefaultsPreviewLightRequest_lights_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lightsService::_PreviewLightRequest_default_instance_;
    new (ptr) ::lightsService::PreviewLightRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lightsService::PreviewLightRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PreviewLightRequest_lights_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPreviewLightRequest_lights_2eproto}, {}};

static void InitDefaultsPreviewLightResponse_lights_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lightsService::_PreviewLightResponse_default_instance_;
    new (ptr) ::lightsService::PreviewLightResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lightsService::PreviewLightResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PreviewLightResponse_lights_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPreviewLightResponse_lights_2eproto}, {}};

static void InitDefaultsPlayLightRequest_lights_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lightsService::_PlayLightRequest_default_instance_;
    new (ptr) ::lightsService::PlayLightRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lightsService::PlayLightRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PlayLightRequest_lights_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPlayLightRequest_lights_2eproto}, {}};

static void InitDefaultsPlayLightResponse_lights_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lightsService::_PlayLightResponse_default_instance_;
    new (ptr) ::lightsService::PlayLightResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lightsService::PlayLightResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PlayLightResponse_lights_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPlayLightResponse_lights_2eproto}, {}};

static void InitDefaultsStopLightRequest_lights_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lightsService::_StopLightRequest_default_instance_;
    new (ptr) ::lightsService::StopLightRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lightsService::StopLightRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_StopLightRequest_lights_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsStopLightRequest_lights_2eproto}, {}};

static void InitDefaultsStopLightResponse_lights_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lightsService::_StopLightResponse_default_instance_;
    new (ptr) ::lightsService::StopLightResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lightsService::StopLightResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_StopLightResponse_lights_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsStopLightResponse_lights_2eproto}, {}};

static void InitDefaultsLightInfo_lights_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lightsService::_LightInfo_default_instance_;
    new (ptr) ::lightsService::LightInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lightsService::LightInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_LightInfo_lights_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLightInfo_lights_2eproto}, {
      &scc_info_LightFrame_lights_2eproto.base,}};

static void InitDefaultsLightFrame_lights_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lightsService::_LightFrame_default_instance_;
    new (ptr) ::lightsService::LightFrame();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lightsService::LightFrame::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LightFrame_lights_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLightFrame_lights_2eproto}, {}};

static void InitDefaultsListLightsRequest_lights_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lightsService::_ListLightsRequest_default_instance_;
    new (ptr) ::lightsService::ListLightsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lightsService::ListLightsRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ListLightsRequest_lights_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsListLightsRequest_lights_2eproto}, {}};

static void InitDefaultsListLightsResponse_lights_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lightsService::_ListLightsResponse_default_instance_;
    new (ptr) ::lightsService::ListLightsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lightsService::ListLightsResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ListLightsResponse_lights_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsListLightsResponse_lights_2eproto}, {
      &scc_info_LightInfo_lights_2eproto.base,}};

static void InitDefaultsNewLightRequest_lights_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lightsService::_NewLightRequest_default_instance_;
    new (ptr) ::lightsService::NewLightRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lightsService::NewLightRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_NewLightRequest_lights_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsNewLightRequest_lights_2eproto}, {
      &scc_info_LightInfo_lights_2eproto.base,}};

static void InitDefaultsNewLightResponse_lights_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lightsService::_NewLightResponse_default_instance_;
    new (ptr) ::lightsService::NewLightResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lightsService::NewLightResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_NewLightResponse_lights_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsNewLightResponse_lights_2eproto}, {
      &scc_info_LightInfo_lights_2eproto.base,}};

static void InitDefaultsUpdateLightRequest_lights_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lightsService::_UpdateLightRequest_default_instance_;
    new (ptr) ::lightsService::UpdateLightRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lightsService::UpdateLightRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_UpdateLightRequest_lights_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsUpdateLightRequest_lights_2eproto}, {
      &scc_info_LightInfo_lights_2eproto.base,}};

static void InitDefaultsUpdateLightResponse_lights_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lightsService::_UpdateLightResponse_default_instance_;
    new (ptr) ::lightsService::UpdateLightResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lightsService::UpdateLightResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_UpdateLightResponse_lights_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsUpdateLightResponse_lights_2eproto}, {
      &scc_info_LightInfo_lights_2eproto.base,}};

static void InitDefaultsDeleteLightsRequest_lights_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lightsService::_DeleteLightsRequest_default_instance_;
    new (ptr) ::lightsService::DeleteLightsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lightsService::DeleteLightsRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DeleteLightsRequest_lights_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDeleteLightsRequest_lights_2eproto}, {}};

static void InitDefaultsDeleteLightsResponse_lights_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lightsService::_DeleteLightsResponse_default_instance_;
    new (ptr) ::lightsService::DeleteLightsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lightsService::DeleteLightsResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DeleteLightsResponse_lights_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDeleteLightsResponse_lights_2eproto}, {}};

void InitDefaults_lights_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_PreviewLightRequest_lights_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PreviewLightResponse_lights_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlayLightRequest_lights_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlayLightResponse_lights_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StopLightRequest_lights_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StopLightResponse_lights_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LightInfo_lights_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LightFrame_lights_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ListLightsRequest_lights_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ListLightsResponse_lights_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NewLightRequest_lights_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NewLightResponse_lights_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UpdateLightRequest_lights_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UpdateLightResponse_lights_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DeleteLightsRequest_lights_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DeleteLightsResponse_lights_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_lights_2eproto[16];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_lights_2eproto[2];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_lights_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_lights_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lightsService::PreviewLightRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lightsService::PreviewLightRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lightsService::PreviewLightResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lightsService::PlayLightRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lightsService::PlayLightRequest, ltype_),
  PROTOBUF_FIELD_OFFSET(::lightsService::PlayLightRequest, id_),
  PROTOBUF_FIELD_OFFSET(::lightsService::PlayLightRequest, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lightsService::PlayLightResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lightsService::StopLightRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lightsService::StopLightRequest, ltypes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lightsService::StopLightResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lightsService::LightInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lightsService::LightInfo, ltype_),
  PROTOBUF_FIELD_OFFSET(::lightsService::LightInfo, id_),
  PROTOBUF_FIELD_OFFSET(::lightsService::LightInfo, name_),
  PROTOBUF_FIELD_OFFSET(::lightsService::LightInfo, frames_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lightsService::LightFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lightsService::LightFrame, colors_),
  PROTOBUF_FIELD_OFFSET(::lightsService::LightFrame, speed_),
  PROTOBUF_FIELD_OFFSET(::lightsService::LightFrame, mode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lightsService::ListLightsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lightsService::ListLightsRequest, ltype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lightsService::ListLightsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lightsService::ListLightsResponse, lights_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lightsService::NewLightRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lightsService::NewLightRequest, light_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lightsService::NewLightResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lightsService::NewLightResponse, light_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lightsService::UpdateLightRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lightsService::UpdateLightRequest, light_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lightsService::UpdateLightResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lightsService::UpdateLightResponse, light_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lightsService::DeleteLightsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lightsService::DeleteLightsRequest, lights_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lightsService::DeleteLightsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::lightsService::PreviewLightRequest)},
  { 6, -1, sizeof(::lightsService::PreviewLightResponse)},
  { 11, -1, sizeof(::lightsService::PlayLightRequest)},
  { 19, -1, sizeof(::lightsService::PlayLightResponse)},
  { 24, -1, sizeof(::lightsService::StopLightRequest)},
  { 30, -1, sizeof(::lightsService::StopLightResponse)},
  { 35, -1, sizeof(::lightsService::LightInfo)},
  { 44, -1, sizeof(::lightsService::LightFrame)},
  { 52, -1, sizeof(::lightsService::ListLightsRequest)},
  { 58, -1, sizeof(::lightsService::ListLightsResponse)},
  { 64, -1, sizeof(::lightsService::NewLightRequest)},
  { 70, -1, sizeof(::lightsService::NewLightResponse)},
  { 76, -1, sizeof(::lightsService::UpdateLightRequest)},
  { 82, -1, sizeof(::lightsService::UpdateLightResponse)},
  { 88, -1, sizeof(::lightsService::DeleteLightsRequest)},
  { 94, -1, sizeof(::lightsService::DeleteLightsResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::lightsService::_PreviewLightRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::lightsService::_PreviewLightResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::lightsService::_PlayLightRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::lightsService::_PlayLightResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::lightsService::_StopLightRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::lightsService::_StopLightResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::lightsService::_LightInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::lightsService::_LightFrame_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::lightsService::_ListLightsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::lightsService::_ListLightsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::lightsService::_NewLightRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::lightsService::_NewLightResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::lightsService::_UpdateLightRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::lightsService::_UpdateLightResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::lightsService::_DeleteLightsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::lightsService::_DeleteLightsResponse_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_lights_2eproto = {
  {}, AddDescriptors_lights_2eproto, "lights.proto", schemas,
  file_default_instances, TableStruct_lights_2eproto::offsets,
  file_level_metadata_lights_2eproto, 16, file_level_enum_descriptors_lights_2eproto, file_level_service_descriptors_lights_2eproto,
};

const char descriptor_table_protodef_lights_2eproto[] =
  "\n\014lights.proto\022\rlightsService\032\034google/ap"
  "i/annotations.proto\"!\n\023PreviewLightReque"
  "st\022\n\n\002id\030\001 \001(\t\"\026\n\024PreviewLightResponse\"U"
  "\n\020PlayLightRequest\022\'\n\005ltype\030\001 \001(\0162\030.ligh"
  "tsService.LightType\022\n\n\002id\030\002 \001(\t\022\014\n\004name\030"
  "\003 \001(\t\"\023\n\021PlayLightResponse\"<\n\020StopLightR"
  "equest\022(\n\006ltypes\030\001 \003(\0162\030.lightsService.L"
  "ightType\"\023\n\021StopLightResponse\"y\n\tLightIn"
  "fo\022\'\n\005ltype\030\001 \001(\0162\030.lightsService.LightT"
  "ype\022\n\n\002id\030\002 \001(\t\022\014\n\004name\030\003 \001(\t\022)\n\006frames\030"
  "\004 \003(\0132\031.lightsService.LightFrame\"R\n\nLigh"
  "tFrame\022\016\n\006colors\030\001 \003(\t\022\r\n\005speed\030\002 \001(\r\022%\n"
  "\004mode\030\003 \001(\0162\027.lightsService.PlayMode\"<\n\021"
  "ListLightsRequest\022\'\n\005ltype\030\001 \001(\0162\030.light"
  "sService.LightType\"C\n\022ListLightsResponse"
  "\022-\n\013lights_info\030\001 \003(\0132\030.lightsService.Li"
  "ghtInfo\"\?\n\017NewLightRequest\022,\n\nlight_info"
  "\030\001 \001(\0132\030.lightsService.LightInfo\"@\n\020NewL"
  "ightResponse\022,\n\nlight_info\030\001 \001(\0132\030.light"
  "sService.LightInfo\"B\n\022UpdateLightRequest"
  "\022,\n\nlight_info\030\001 \001(\0132\030.lightsService.Lig"
  "htInfo\"C\n\023UpdateLightResponse\022,\n\nlight_i"
  "nfo\030\001 \001(\0132\030.lightsService.LightInfo\"(\n\023D"
  "eleteLightsRequest\022\021\n\tlights_id\030\001 \003(\t\"\026\n"
  "\024DeleteLightsResponse*:\n\tLightType\022\r\n\tUN"
  "DEFINED\020\000\022\t\n\005MOUTH\020\001\022\t\n\005HANDS\020\002\022\010\n\004EARS\020"
  "\003*H\n\010PlayMode\022\n\n\006PRESET\020\000\022\n\n\006ALWAYS\020\001\022\013\n"
  "\007MARQUEE\020\002\022\t\n\005FLASH\020\003\022\014\n\010TICKTOCK\020\0042\353\006\n\r"
  "LightsService\022\200\001\n\014PreviewLight\022\".lightsS"
  "ervice.PreviewLightRequest\032#.lightsServi"
  "ce.PreviewLightResponse\"\'\202\323\344\223\002!\"\034/api/v2"
  "/lights/preview_light:\001*\022t\n\tPlayLight\022\037."
  "lightsService.PlayLightRequest\032 .lightsS"
  "ervice.PlayLightResponse\"$\202\323\344\223\002\036\"\031/api/v"
  "2/lights/play_light:\001*\022t\n\tStopLight\022\037.li"
  "ghtsService.StopLightRequest\032 .lightsSer"
  "vice.StopLightResponse\"$\202\323\344\223\002\036\"\031/api/v2/"
  "lights/stop_light:\001*\022x\n\nListLights\022 .lig"
  "htsService.ListLightsRequest\032!.lightsSer"
  "vice.ListLightsResponse\"%\202\323\344\223\002\037\"\032/api/v2"
  "/lights/list_lights:\001*\022p\n\010NewLight\022\036.lig"
  "htsService.NewLightRequest\032\037.lightsServi"
  "ce.NewLightResponse\"#\202\323\344\223\002\035\"\030/api/v2/lig"
  "hts/new_light:\001*\022|\n\013UpdateLight\022!.lights"
  "Service.UpdateLightRequest\032\".lightsServi"
  "ce.UpdateLightResponse\"&\202\323\344\223\002 \"\033/api/v2/"
  "lights/update_light:\001*\022\200\001\n\014DeleteLights\022"
  "\".lightsService.DeleteLightsRequest\032#.li"
  "ghtsService.DeleteLightsResponse\"\'\202\323\344\223\002!"
  "\"\034/api/v2/lights/delete_lights:\001*b\006proto"
  "3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_lights_2eproto = {
  false, InitDefaults_lights_2eproto, 
  descriptor_table_protodef_lights_2eproto,
  "lights.proto", &assign_descriptors_table_lights_2eproto, 2001,
};

void AddDescriptors_lights_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
    ::AddDescriptors_google_2fapi_2fannotations_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_lights_2eproto, deps, 1);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_lights_2eproto = []() { AddDescriptors_lights_2eproto(); return true; }();
namespace lightsService {
const ::google::protobuf::EnumDescriptor* LightType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_lights_2eproto);
  return file_level_enum_descriptors_lights_2eproto[0];
}
bool LightType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PlayMode_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_lights_2eproto);
  return file_level_enum_descriptors_lights_2eproto[1];
}
bool PlayMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void PreviewLightRequest::InitAsDefaultInstance() {
}
class PreviewLightRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PreviewLightRequest::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PreviewLightRequest::PreviewLightRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lightsService.PreviewLightRequest)
}
PreviewLightRequest::PreviewLightRequest(const PreviewLightRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  // @@protoc_insertion_point(copy_constructor:lightsService.PreviewLightRequest)
}

void PreviewLightRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PreviewLightRequest_lights_2eproto.base);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PreviewLightRequest::~PreviewLightRequest() {
  // @@protoc_insertion_point(destructor:lightsService.PreviewLightRequest)
  SharedDtor();
}

void PreviewLightRequest::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PreviewLightRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PreviewLightRequest& PreviewLightRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PreviewLightRequest_lights_2eproto.base);
  return *internal_default_instance();
}


void PreviewLightRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:lightsService.PreviewLightRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PreviewLightRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PreviewLightRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("lightsService.PreviewLightRequest.id");
        object = msg->mutable_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PreviewLightRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lightsService.PreviewLightRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lightsService.PreviewLightRequest.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lightsService.PreviewLightRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lightsService.PreviewLightRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PreviewLightRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lightsService.PreviewLightRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lightsService.PreviewLightRequest.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:lightsService.PreviewLightRequest)
}

::google::protobuf::uint8* PreviewLightRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lightsService.PreviewLightRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lightsService.PreviewLightRequest.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lightsService.PreviewLightRequest)
  return target;
}

size_t PreviewLightRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lightsService.PreviewLightRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PreviewLightRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lightsService.PreviewLightRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PreviewLightRequest* source =
      ::google::protobuf::DynamicCastToGenerated<PreviewLightRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lightsService.PreviewLightRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lightsService.PreviewLightRequest)
    MergeFrom(*source);
  }
}

void PreviewLightRequest::MergeFrom(const PreviewLightRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lightsService.PreviewLightRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
}

void PreviewLightRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lightsService.PreviewLightRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PreviewLightRequest::CopyFrom(const PreviewLightRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lightsService.PreviewLightRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PreviewLightRequest::IsInitialized() const {
  return true;
}

void PreviewLightRequest::Swap(PreviewLightRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PreviewLightRequest::InternalSwap(PreviewLightRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata PreviewLightRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_lights_2eproto);
  return ::file_level_metadata_lights_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PreviewLightResponse::InitAsDefaultInstance() {
}
class PreviewLightResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PreviewLightResponse::PreviewLightResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lightsService.PreviewLightResponse)
}
PreviewLightResponse::PreviewLightResponse(const PreviewLightResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:lightsService.PreviewLightResponse)
}

void PreviewLightResponse::SharedCtor() {
}

PreviewLightResponse::~PreviewLightResponse() {
  // @@protoc_insertion_point(destructor:lightsService.PreviewLightResponse)
  SharedDtor();
}

void PreviewLightResponse::SharedDtor() {
}

void PreviewLightResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PreviewLightResponse& PreviewLightResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PreviewLightResponse_lights_2eproto.base);
  return *internal_default_instance();
}


void PreviewLightResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:lightsService.PreviewLightResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PreviewLightResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PreviewLightResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PreviewLightResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lightsService.PreviewLightResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:lightsService.PreviewLightResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lightsService.PreviewLightResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PreviewLightResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lightsService.PreviewLightResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:lightsService.PreviewLightResponse)
}

::google::protobuf::uint8* PreviewLightResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lightsService.PreviewLightResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lightsService.PreviewLightResponse)
  return target;
}

size_t PreviewLightResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lightsService.PreviewLightResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PreviewLightResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lightsService.PreviewLightResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PreviewLightResponse* source =
      ::google::protobuf::DynamicCastToGenerated<PreviewLightResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lightsService.PreviewLightResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lightsService.PreviewLightResponse)
    MergeFrom(*source);
  }
}

void PreviewLightResponse::MergeFrom(const PreviewLightResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lightsService.PreviewLightResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PreviewLightResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lightsService.PreviewLightResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PreviewLightResponse::CopyFrom(const PreviewLightResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lightsService.PreviewLightResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PreviewLightResponse::IsInitialized() const {
  return true;
}

void PreviewLightResponse::Swap(PreviewLightResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PreviewLightResponse::InternalSwap(PreviewLightResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PreviewLightResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_lights_2eproto);
  return ::file_level_metadata_lights_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PlayLightRequest::InitAsDefaultInstance() {
}
class PlayLightRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayLightRequest::kLtypeFieldNumber;
const int PlayLightRequest::kIdFieldNumber;
const int PlayLightRequest::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayLightRequest::PlayLightRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lightsService.PlayLightRequest)
}
PlayLightRequest::PlayLightRequest(const PlayLightRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ltype_ = from.ltype_;
  // @@protoc_insertion_point(copy_constructor:lightsService.PlayLightRequest)
}

void PlayLightRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PlayLightRequest_lights_2eproto.base);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ltype_ = 0;
}

PlayLightRequest::~PlayLightRequest() {
  // @@protoc_insertion_point(destructor:lightsService.PlayLightRequest)
  SharedDtor();
}

void PlayLightRequest::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PlayLightRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayLightRequest& PlayLightRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PlayLightRequest_lights_2eproto.base);
  return *internal_default_instance();
}


void PlayLightRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:lightsService.PlayLightRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ltype_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlayLightRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PlayLightRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .lightsService.LightType ltype = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_ltype(static_cast<::lightsService::LightType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("lightsService.PlayLightRequest.id");
        object = msg->mutable_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string name = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("lightsService.PlayLightRequest.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlayLightRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lightsService.PlayLightRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .lightsService.LightType ltype = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_ltype(static_cast< ::lightsService::LightType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lightsService.PlayLightRequest.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lightsService.PlayLightRequest.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lightsService.PlayLightRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lightsService.PlayLightRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlayLightRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lightsService.PlayLightRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .lightsService.LightType ltype = 1;
  if (this->ltype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ltype(), output);
  }

  // string id = 2;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lightsService.PlayLightRequest.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->id(), output);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lightsService.PlayLightRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:lightsService.PlayLightRequest)
}

::google::protobuf::uint8* PlayLightRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lightsService.PlayLightRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .lightsService.LightType ltype = 1;
  if (this->ltype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ltype(), target);
  }

  // string id = 2;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lightsService.PlayLightRequest.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->id(), target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lightsService.PlayLightRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lightsService.PlayLightRequest)
  return target;
}

size_t PlayLightRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lightsService.PlayLightRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 2;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .lightsService.LightType ltype = 1;
  if (this->ltype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ltype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayLightRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lightsService.PlayLightRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayLightRequest* source =
      ::google::protobuf::DynamicCastToGenerated<PlayLightRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lightsService.PlayLightRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lightsService.PlayLightRequest)
    MergeFrom(*source);
  }
}

void PlayLightRequest::MergeFrom(const PlayLightRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lightsService.PlayLightRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.ltype() != 0) {
    set_ltype(from.ltype());
  }
}

void PlayLightRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lightsService.PlayLightRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayLightRequest::CopyFrom(const PlayLightRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lightsService.PlayLightRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayLightRequest::IsInitialized() const {
  return true;
}

void PlayLightRequest::Swap(PlayLightRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayLightRequest::InternalSwap(PlayLightRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ltype_, other->ltype_);
}

::google::protobuf::Metadata PlayLightRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_lights_2eproto);
  return ::file_level_metadata_lights_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PlayLightResponse::InitAsDefaultInstance() {
}
class PlayLightResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayLightResponse::PlayLightResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lightsService.PlayLightResponse)
}
PlayLightResponse::PlayLightResponse(const PlayLightResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:lightsService.PlayLightResponse)
}

void PlayLightResponse::SharedCtor() {
}

PlayLightResponse::~PlayLightResponse() {
  // @@protoc_insertion_point(destructor:lightsService.PlayLightResponse)
  SharedDtor();
}

void PlayLightResponse::SharedDtor() {
}

void PlayLightResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayLightResponse& PlayLightResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PlayLightResponse_lights_2eproto.base);
  return *internal_default_instance();
}


void PlayLightResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:lightsService.PlayLightResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlayLightResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PlayLightResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlayLightResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lightsService.PlayLightResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:lightsService.PlayLightResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lightsService.PlayLightResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlayLightResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lightsService.PlayLightResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:lightsService.PlayLightResponse)
}

::google::protobuf::uint8* PlayLightResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lightsService.PlayLightResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lightsService.PlayLightResponse)
  return target;
}

size_t PlayLightResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lightsService.PlayLightResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayLightResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lightsService.PlayLightResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayLightResponse* source =
      ::google::protobuf::DynamicCastToGenerated<PlayLightResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lightsService.PlayLightResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lightsService.PlayLightResponse)
    MergeFrom(*source);
  }
}

void PlayLightResponse::MergeFrom(const PlayLightResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lightsService.PlayLightResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PlayLightResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lightsService.PlayLightResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayLightResponse::CopyFrom(const PlayLightResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lightsService.PlayLightResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayLightResponse::IsInitialized() const {
  return true;
}

void PlayLightResponse::Swap(PlayLightResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayLightResponse::InternalSwap(PlayLightResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PlayLightResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_lights_2eproto);
  return ::file_level_metadata_lights_2eproto[kIndexInFileMessages];
}


// ===================================================================

void StopLightRequest::InitAsDefaultInstance() {
}
class StopLightRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StopLightRequest::kLtypesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StopLightRequest::StopLightRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lightsService.StopLightRequest)
}
StopLightRequest::StopLightRequest(const StopLightRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      ltypes_(from.ltypes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:lightsService.StopLightRequest)
}

void StopLightRequest::SharedCtor() {
}

StopLightRequest::~StopLightRequest() {
  // @@protoc_insertion_point(destructor:lightsService.StopLightRequest)
  SharedDtor();
}

void StopLightRequest::SharedDtor() {
}

void StopLightRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StopLightRequest& StopLightRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_StopLightRequest_lights_2eproto.base);
  return *internal_default_instance();
}


void StopLightRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:lightsService.StopLightRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ltypes_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StopLightRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<StopLightRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .lightsService.LightType ltypes = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) == 10) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedEnumParser;
          object = msg->mutable_ltypes();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        do {
          ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
          msg->add_ltypes(static_cast<::lightsService::LightType>(val));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 8 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StopLightRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lightsService.StopLightRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .lightsService.LightType ltypes = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(static_cast<int>(length));
          while (input->BytesUntilLimit() > 0) {
            int value = 0;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_ltypes(static_cast< ::lightsService::LightType >(value));
          }
          input->PopLimit(limit);
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_ltypes(static_cast< ::lightsService::LightType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lightsService.StopLightRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lightsService.StopLightRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StopLightRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lightsService.StopLightRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .lightsService.LightType ltypes = 1;
  if (this->ltypes_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_ltypes_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->ltypes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->ltypes(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:lightsService.StopLightRequest)
}

::google::protobuf::uint8* StopLightRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lightsService.StopLightRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .lightsService.LightType ltypes = 1;
  if (this->ltypes_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(      _ltypes_cached_byte_size_.load(std::memory_order_relaxed),
        target);
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->ltypes_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lightsService.StopLightRequest)
  return target;
}

size_t StopLightRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lightsService.StopLightRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .lightsService.LightType ltypes = 1;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->ltypes_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->ltypes(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _ltypes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StopLightRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lightsService.StopLightRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StopLightRequest* source =
      ::google::protobuf::DynamicCastToGenerated<StopLightRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lightsService.StopLightRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lightsService.StopLightRequest)
    MergeFrom(*source);
  }
}

void StopLightRequest::MergeFrom(const StopLightRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lightsService.StopLightRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ltypes_.MergeFrom(from.ltypes_);
}

void StopLightRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lightsService.StopLightRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopLightRequest::CopyFrom(const StopLightRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lightsService.StopLightRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopLightRequest::IsInitialized() const {
  return true;
}

void StopLightRequest::Swap(StopLightRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StopLightRequest::InternalSwap(StopLightRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ltypes_.InternalSwap(&other->ltypes_);
}

::google::protobuf::Metadata StopLightRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_lights_2eproto);
  return ::file_level_metadata_lights_2eproto[kIndexInFileMessages];
}


// ===================================================================

void StopLightResponse::InitAsDefaultInstance() {
}
class StopLightResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StopLightResponse::StopLightResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lightsService.StopLightResponse)
}
StopLightResponse::StopLightResponse(const StopLightResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:lightsService.StopLightResponse)
}

void StopLightResponse::SharedCtor() {
}

StopLightResponse::~StopLightResponse() {
  // @@protoc_insertion_point(destructor:lightsService.StopLightResponse)
  SharedDtor();
}

void StopLightResponse::SharedDtor() {
}

void StopLightResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StopLightResponse& StopLightResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_StopLightResponse_lights_2eproto.base);
  return *internal_default_instance();
}


void StopLightResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:lightsService.StopLightResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StopLightResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<StopLightResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StopLightResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lightsService.StopLightResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:lightsService.StopLightResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lightsService.StopLightResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StopLightResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lightsService.StopLightResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:lightsService.StopLightResponse)
}

::google::protobuf::uint8* StopLightResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lightsService.StopLightResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lightsService.StopLightResponse)
  return target;
}

size_t StopLightResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lightsService.StopLightResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StopLightResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lightsService.StopLightResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const StopLightResponse* source =
      ::google::protobuf::DynamicCastToGenerated<StopLightResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lightsService.StopLightResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lightsService.StopLightResponse)
    MergeFrom(*source);
  }
}

void StopLightResponse::MergeFrom(const StopLightResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lightsService.StopLightResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void StopLightResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lightsService.StopLightResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopLightResponse::CopyFrom(const StopLightResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lightsService.StopLightResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopLightResponse::IsInitialized() const {
  return true;
}

void StopLightResponse::Swap(StopLightResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StopLightResponse::InternalSwap(StopLightResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata StopLightResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_lights_2eproto);
  return ::file_level_metadata_lights_2eproto[kIndexInFileMessages];
}


// ===================================================================

void LightInfo::InitAsDefaultInstance() {
}
class LightInfo::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LightInfo::kLtypeFieldNumber;
const int LightInfo::kIdFieldNumber;
const int LightInfo::kNameFieldNumber;
const int LightInfo::kFramesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LightInfo::LightInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lightsService.LightInfo)
}
LightInfo::LightInfo(const LightInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      frames_(from.frames_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ltype_ = from.ltype_;
  // @@protoc_insertion_point(copy_constructor:lightsService.LightInfo)
}

void LightInfo::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_LightInfo_lights_2eproto.base);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ltype_ = 0;
}

LightInfo::~LightInfo() {
  // @@protoc_insertion_point(destructor:lightsService.LightInfo)
  SharedDtor();
}

void LightInfo::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LightInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LightInfo& LightInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LightInfo_lights_2eproto.base);
  return *internal_default_instance();
}


void LightInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:lightsService.LightInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  frames_.Clear();
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ltype_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LightInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LightInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .lightsService.LightType ltype = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_ltype(static_cast<::lightsService::LightType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("lightsService.LightInfo.id");
        object = msg->mutable_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string name = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("lightsService.LightInfo.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated .lightsService.LightFrame frames = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::lightsService::LightFrame::_InternalParse;
          object = msg->add_frames();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LightInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lightsService.LightInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .lightsService.LightType ltype = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_ltype(static_cast< ::lightsService::LightType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lightsService.LightInfo.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lightsService.LightInfo.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .lightsService.LightFrame frames = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_frames()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lightsService.LightInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lightsService.LightInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LightInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lightsService.LightInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .lightsService.LightType ltype = 1;
  if (this->ltype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ltype(), output);
  }

  // string id = 2;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lightsService.LightInfo.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->id(), output);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lightsService.LightInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // repeated .lightsService.LightFrame frames = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->frames_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->frames(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:lightsService.LightInfo)
}

::google::protobuf::uint8* LightInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lightsService.LightInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .lightsService.LightType ltype = 1;
  if (this->ltype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ltype(), target);
  }

  // string id = 2;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lightsService.LightInfo.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->id(), target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lightsService.LightInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // repeated .lightsService.LightFrame frames = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->frames_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->frames(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lightsService.LightInfo)
  return target;
}

size_t LightInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lightsService.LightInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .lightsService.LightFrame frames = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->frames_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->frames(static_cast<int>(i)));
    }
  }

  // string id = 2;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .lightsService.LightType ltype = 1;
  if (this->ltype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ltype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LightInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lightsService.LightInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const LightInfo* source =
      ::google::protobuf::DynamicCastToGenerated<LightInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lightsService.LightInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lightsService.LightInfo)
    MergeFrom(*source);
  }
}

void LightInfo::MergeFrom(const LightInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lightsService.LightInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  frames_.MergeFrom(from.frames_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.ltype() != 0) {
    set_ltype(from.ltype());
  }
}

void LightInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lightsService.LightInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LightInfo::CopyFrom(const LightInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lightsService.LightInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LightInfo::IsInitialized() const {
  return true;
}

void LightInfo::Swap(LightInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LightInfo::InternalSwap(LightInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&frames_)->InternalSwap(CastToBase(&other->frames_));
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ltype_, other->ltype_);
}

::google::protobuf::Metadata LightInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_lights_2eproto);
  return ::file_level_metadata_lights_2eproto[kIndexInFileMessages];
}


// ===================================================================

void LightFrame::InitAsDefaultInstance() {
}
class LightFrame::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LightFrame::kColorsFieldNumber;
const int LightFrame::kSpeedFieldNumber;
const int LightFrame::kModeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LightFrame::LightFrame()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lightsService.LightFrame)
}
LightFrame::LightFrame(const LightFrame& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      colors_(from.colors_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&speed_, &from.speed_,
    static_cast<size_t>(reinterpret_cast<char*>(&mode_) -
    reinterpret_cast<char*>(&speed_)) + sizeof(mode_));
  // @@protoc_insertion_point(copy_constructor:lightsService.LightFrame)
}

void LightFrame::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_LightFrame_lights_2eproto.base);
  ::memset(&speed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mode_) -
      reinterpret_cast<char*>(&speed_)) + sizeof(mode_));
}

LightFrame::~LightFrame() {
  // @@protoc_insertion_point(destructor:lightsService.LightFrame)
  SharedDtor();
}

void LightFrame::SharedDtor() {
}

void LightFrame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LightFrame& LightFrame::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LightFrame_lights_2eproto.base);
  return *internal_default_instance();
}


void LightFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:lightsService.LightFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  colors_.Clear();
  ::memset(&speed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mode_) -
      reinterpret_cast<char*>(&speed_)) + sizeof(mode_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LightFrame::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LightFrame*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated string colors = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("lightsService.LightFrame.colors");
          object = msg->add_colors();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // uint32 speed = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_speed(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .lightsService.PlayMode mode = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_mode(static_cast<::lightsService::PlayMode>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LightFrame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lightsService.LightFrame)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string colors = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_colors()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->colors(this->colors_size() - 1).data(),
            static_cast<int>(this->colors(this->colors_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lightsService.LightFrame.colors"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 speed = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .lightsService.PlayMode mode = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mode(static_cast< ::lightsService::PlayMode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lightsService.LightFrame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lightsService.LightFrame)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LightFrame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lightsService.LightFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string colors = 1;
  for (int i = 0, n = this->colors_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->colors(i).data(), static_cast<int>(this->colors(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lightsService.LightFrame.colors");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->colors(i), output);
  }

  // uint32 speed = 2;
  if (this->speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->speed(), output);
  }

  // .lightsService.PlayMode mode = 3;
  if (this->mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->mode(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:lightsService.LightFrame)
}

::google::protobuf::uint8* LightFrame::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lightsService.LightFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string colors = 1;
  for (int i = 0, n = this->colors_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->colors(i).data(), static_cast<int>(this->colors(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lightsService.LightFrame.colors");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->colors(i), target);
  }

  // uint32 speed = 2;
  if (this->speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->speed(), target);
  }

  // .lightsService.PlayMode mode = 3;
  if (this->mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->mode(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lightsService.LightFrame)
  return target;
}

size_t LightFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lightsService.LightFrame)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string colors = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->colors_size());
  for (int i = 0, n = this->colors_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->colors(i));
  }

  // uint32 speed = 2;
  if (this->speed() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->speed());
  }

  // .lightsService.PlayMode mode = 3;
  if (this->mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LightFrame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lightsService.LightFrame)
  GOOGLE_DCHECK_NE(&from, this);
  const LightFrame* source =
      ::google::protobuf::DynamicCastToGenerated<LightFrame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lightsService.LightFrame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lightsService.LightFrame)
    MergeFrom(*source);
  }
}

void LightFrame::MergeFrom(const LightFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lightsService.LightFrame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  colors_.MergeFrom(from.colors_);
  if (from.speed() != 0) {
    set_speed(from.speed());
  }
  if (from.mode() != 0) {
    set_mode(from.mode());
  }
}

void LightFrame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lightsService.LightFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LightFrame::CopyFrom(const LightFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lightsService.LightFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LightFrame::IsInitialized() const {
  return true;
}

void LightFrame::Swap(LightFrame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LightFrame::InternalSwap(LightFrame* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  colors_.InternalSwap(CastToBase(&other->colors_));
  swap(speed_, other->speed_);
  swap(mode_, other->mode_);
}

::google::protobuf::Metadata LightFrame::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_lights_2eproto);
  return ::file_level_metadata_lights_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ListLightsRequest::InitAsDefaultInstance() {
}
class ListLightsRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListLightsRequest::kLtypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListLightsRequest::ListLightsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lightsService.ListLightsRequest)
}
ListLightsRequest::ListLightsRequest(const ListLightsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ltype_ = from.ltype_;
  // @@protoc_insertion_point(copy_constructor:lightsService.ListLightsRequest)
}

void ListLightsRequest::SharedCtor() {
  ltype_ = 0;
}

ListLightsRequest::~ListLightsRequest() {
  // @@protoc_insertion_point(destructor:lightsService.ListLightsRequest)
  SharedDtor();
}

void ListLightsRequest::SharedDtor() {
}

void ListLightsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListLightsRequest& ListLightsRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ListLightsRequest_lights_2eproto.base);
  return *internal_default_instance();
}


void ListLightsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:lightsService.ListLightsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ltype_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ListLightsRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ListLightsRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .lightsService.LightType ltype = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_ltype(static_cast<::lightsService::LightType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ListLightsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lightsService.ListLightsRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .lightsService.LightType ltype = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_ltype(static_cast< ::lightsService::LightType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lightsService.ListLightsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lightsService.ListLightsRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ListLightsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lightsService.ListLightsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .lightsService.LightType ltype = 1;
  if (this->ltype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ltype(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:lightsService.ListLightsRequest)
}

::google::protobuf::uint8* ListLightsRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lightsService.ListLightsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .lightsService.LightType ltype = 1;
  if (this->ltype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ltype(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lightsService.ListLightsRequest)
  return target;
}

size_t ListLightsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lightsService.ListLightsRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .lightsService.LightType ltype = 1;
  if (this->ltype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ltype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListLightsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lightsService.ListLightsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListLightsRequest* source =
      ::google::protobuf::DynamicCastToGenerated<ListLightsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lightsService.ListLightsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lightsService.ListLightsRequest)
    MergeFrom(*source);
  }
}

void ListLightsRequest::MergeFrom(const ListLightsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lightsService.ListLightsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ltype() != 0) {
    set_ltype(from.ltype());
  }
}

void ListLightsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lightsService.ListLightsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListLightsRequest::CopyFrom(const ListLightsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lightsService.ListLightsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListLightsRequest::IsInitialized() const {
  return true;
}

void ListLightsRequest::Swap(ListLightsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListLightsRequest::InternalSwap(ListLightsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(ltype_, other->ltype_);
}

::google::protobuf::Metadata ListLightsRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_lights_2eproto);
  return ::file_level_metadata_lights_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ListLightsResponse::InitAsDefaultInstance() {
}
class ListLightsResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListLightsResponse::kLightsInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListLightsResponse::ListLightsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lightsService.ListLightsResponse)
}
ListLightsResponse::ListLightsResponse(const ListLightsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      lights_info_(from.lights_info_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:lightsService.ListLightsResponse)
}

void ListLightsResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ListLightsResponse_lights_2eproto.base);
}

ListLightsResponse::~ListLightsResponse() {
  // @@protoc_insertion_point(destructor:lightsService.ListLightsResponse)
  SharedDtor();
}

void ListLightsResponse::SharedDtor() {
}

void ListLightsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListLightsResponse& ListLightsResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ListLightsResponse_lights_2eproto.base);
  return *internal_default_instance();
}


void ListLightsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:lightsService.ListLightsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lights_info_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ListLightsResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ListLightsResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .lightsService.LightInfo lights_info = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::lightsService::LightInfo::_InternalParse;
          object = msg->add_lights_info();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ListLightsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lightsService.ListLightsResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .lightsService.LightInfo lights_info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_lights_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lightsService.ListLightsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lightsService.ListLightsResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ListLightsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lightsService.ListLightsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .lightsService.LightInfo lights_info = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lights_info_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->lights_info(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:lightsService.ListLightsResponse)
}

::google::protobuf::uint8* ListLightsResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lightsService.ListLightsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .lightsService.LightInfo lights_info = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lights_info_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->lights_info(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lightsService.ListLightsResponse)
  return target;
}

size_t ListLightsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lightsService.ListLightsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .lightsService.LightInfo lights_info = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->lights_info_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->lights_info(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListLightsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lightsService.ListLightsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListLightsResponse* source =
      ::google::protobuf::DynamicCastToGenerated<ListLightsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lightsService.ListLightsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lightsService.ListLightsResponse)
    MergeFrom(*source);
  }
}

void ListLightsResponse::MergeFrom(const ListLightsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lightsService.ListLightsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lights_info_.MergeFrom(from.lights_info_);
}

void ListLightsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lightsService.ListLightsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListLightsResponse::CopyFrom(const ListLightsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lightsService.ListLightsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListLightsResponse::IsInitialized() const {
  return true;
}

void ListLightsResponse::Swap(ListLightsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListLightsResponse::InternalSwap(ListLightsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&lights_info_)->InternalSwap(CastToBase(&other->lights_info_));
}

::google::protobuf::Metadata ListLightsResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_lights_2eproto);
  return ::file_level_metadata_lights_2eproto[kIndexInFileMessages];
}


// ===================================================================

void NewLightRequest::InitAsDefaultInstance() {
  ::lightsService::_NewLightRequest_default_instance_._instance.get_mutable()->light_info_ = const_cast< ::lightsService::LightInfo*>(
      ::lightsService::LightInfo::internal_default_instance());
}
class NewLightRequest::HasBitSetters {
 public:
  static const ::lightsService::LightInfo& light_info(const NewLightRequest* msg);
};

const ::lightsService::LightInfo&
NewLightRequest::HasBitSetters::light_info(const NewLightRequest* msg) {
  return *msg->light_info_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NewLightRequest::kLightInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NewLightRequest::NewLightRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lightsService.NewLightRequest)
}
NewLightRequest::NewLightRequest(const NewLightRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_light_info()) {
    light_info_ = new ::lightsService::LightInfo(*from.light_info_);
  } else {
    light_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:lightsService.NewLightRequest)
}

void NewLightRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_NewLightRequest_lights_2eproto.base);
  light_info_ = nullptr;
}

NewLightRequest::~NewLightRequest() {
  // @@protoc_insertion_point(destructor:lightsService.NewLightRequest)
  SharedDtor();
}

void NewLightRequest::SharedDtor() {
  if (this != internal_default_instance()) delete light_info_;
}

void NewLightRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NewLightRequest& NewLightRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_NewLightRequest_lights_2eproto.base);
  return *internal_default_instance();
}


void NewLightRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:lightsService.NewLightRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && light_info_ != nullptr) {
    delete light_info_;
  }
  light_info_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NewLightRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<NewLightRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .lightsService.LightInfo light_info = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::lightsService::LightInfo::_InternalParse;
        object = msg->mutable_light_info();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NewLightRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lightsService.NewLightRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .lightsService.LightInfo light_info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_light_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lightsService.NewLightRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lightsService.NewLightRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NewLightRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lightsService.NewLightRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .lightsService.LightInfo light_info = 1;
  if (this->has_light_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::light_info(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:lightsService.NewLightRequest)
}

::google::protobuf::uint8* NewLightRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lightsService.NewLightRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .lightsService.LightInfo light_info = 1;
  if (this->has_light_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::light_info(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lightsService.NewLightRequest)
  return target;
}

size_t NewLightRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lightsService.NewLightRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .lightsService.LightInfo light_info = 1;
  if (this->has_light_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *light_info_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NewLightRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lightsService.NewLightRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const NewLightRequest* source =
      ::google::protobuf::DynamicCastToGenerated<NewLightRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lightsService.NewLightRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lightsService.NewLightRequest)
    MergeFrom(*source);
  }
}

void NewLightRequest::MergeFrom(const NewLightRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lightsService.NewLightRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_light_info()) {
    mutable_light_info()->::lightsService::LightInfo::MergeFrom(from.light_info());
  }
}

void NewLightRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lightsService.NewLightRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewLightRequest::CopyFrom(const NewLightRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lightsService.NewLightRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewLightRequest::IsInitialized() const {
  return true;
}

void NewLightRequest::Swap(NewLightRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NewLightRequest::InternalSwap(NewLightRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(light_info_, other->light_info_);
}

::google::protobuf::Metadata NewLightRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_lights_2eproto);
  return ::file_level_metadata_lights_2eproto[kIndexInFileMessages];
}


// ===================================================================

void NewLightResponse::InitAsDefaultInstance() {
  ::lightsService::_NewLightResponse_default_instance_._instance.get_mutable()->light_info_ = const_cast< ::lightsService::LightInfo*>(
      ::lightsService::LightInfo::internal_default_instance());
}
class NewLightResponse::HasBitSetters {
 public:
  static const ::lightsService::LightInfo& light_info(const NewLightResponse* msg);
};

const ::lightsService::LightInfo&
NewLightResponse::HasBitSetters::light_info(const NewLightResponse* msg) {
  return *msg->light_info_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NewLightResponse::kLightInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NewLightResponse::NewLightResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lightsService.NewLightResponse)
}
NewLightResponse::NewLightResponse(const NewLightResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_light_info()) {
    light_info_ = new ::lightsService::LightInfo(*from.light_info_);
  } else {
    light_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:lightsService.NewLightResponse)
}

void NewLightResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_NewLightResponse_lights_2eproto.base);
  light_info_ = nullptr;
}

NewLightResponse::~NewLightResponse() {
  // @@protoc_insertion_point(destructor:lightsService.NewLightResponse)
  SharedDtor();
}

void NewLightResponse::SharedDtor() {
  if (this != internal_default_instance()) delete light_info_;
}

void NewLightResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NewLightResponse& NewLightResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_NewLightResponse_lights_2eproto.base);
  return *internal_default_instance();
}


void NewLightResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:lightsService.NewLightResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && light_info_ != nullptr) {
    delete light_info_;
  }
  light_info_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NewLightResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<NewLightResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .lightsService.LightInfo light_info = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::lightsService::LightInfo::_InternalParse;
        object = msg->mutable_light_info();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NewLightResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lightsService.NewLightResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .lightsService.LightInfo light_info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_light_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lightsService.NewLightResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lightsService.NewLightResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NewLightResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lightsService.NewLightResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .lightsService.LightInfo light_info = 1;
  if (this->has_light_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::light_info(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:lightsService.NewLightResponse)
}

::google::protobuf::uint8* NewLightResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lightsService.NewLightResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .lightsService.LightInfo light_info = 1;
  if (this->has_light_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::light_info(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lightsService.NewLightResponse)
  return target;
}

size_t NewLightResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lightsService.NewLightResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .lightsService.LightInfo light_info = 1;
  if (this->has_light_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *light_info_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NewLightResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lightsService.NewLightResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const NewLightResponse* source =
      ::google::protobuf::DynamicCastToGenerated<NewLightResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lightsService.NewLightResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lightsService.NewLightResponse)
    MergeFrom(*source);
  }
}

void NewLightResponse::MergeFrom(const NewLightResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lightsService.NewLightResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_light_info()) {
    mutable_light_info()->::lightsService::LightInfo::MergeFrom(from.light_info());
  }
}

void NewLightResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lightsService.NewLightResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewLightResponse::CopyFrom(const NewLightResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lightsService.NewLightResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewLightResponse::IsInitialized() const {
  return true;
}

void NewLightResponse::Swap(NewLightResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NewLightResponse::InternalSwap(NewLightResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(light_info_, other->light_info_);
}

::google::protobuf::Metadata NewLightResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_lights_2eproto);
  return ::file_level_metadata_lights_2eproto[kIndexInFileMessages];
}


// ===================================================================

void UpdateLightRequest::InitAsDefaultInstance() {
  ::lightsService::_UpdateLightRequest_default_instance_._instance.get_mutable()->light_info_ = const_cast< ::lightsService::LightInfo*>(
      ::lightsService::LightInfo::internal_default_instance());
}
class UpdateLightRequest::HasBitSetters {
 public:
  static const ::lightsService::LightInfo& light_info(const UpdateLightRequest* msg);
};

const ::lightsService::LightInfo&
UpdateLightRequest::HasBitSetters::light_info(const UpdateLightRequest* msg) {
  return *msg->light_info_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateLightRequest::kLightInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateLightRequest::UpdateLightRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lightsService.UpdateLightRequest)
}
UpdateLightRequest::UpdateLightRequest(const UpdateLightRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_light_info()) {
    light_info_ = new ::lightsService::LightInfo(*from.light_info_);
  } else {
    light_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:lightsService.UpdateLightRequest)
}

void UpdateLightRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_UpdateLightRequest_lights_2eproto.base);
  light_info_ = nullptr;
}

UpdateLightRequest::~UpdateLightRequest() {
  // @@protoc_insertion_point(destructor:lightsService.UpdateLightRequest)
  SharedDtor();
}

void UpdateLightRequest::SharedDtor() {
  if (this != internal_default_instance()) delete light_info_;
}

void UpdateLightRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateLightRequest& UpdateLightRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_UpdateLightRequest_lights_2eproto.base);
  return *internal_default_instance();
}


void UpdateLightRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:lightsService.UpdateLightRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && light_info_ != nullptr) {
    delete light_info_;
  }
  light_info_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UpdateLightRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<UpdateLightRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .lightsService.LightInfo light_info = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::lightsService::LightInfo::_InternalParse;
        object = msg->mutable_light_info();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UpdateLightRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lightsService.UpdateLightRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .lightsService.LightInfo light_info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_light_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lightsService.UpdateLightRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lightsService.UpdateLightRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UpdateLightRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lightsService.UpdateLightRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .lightsService.LightInfo light_info = 1;
  if (this->has_light_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::light_info(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:lightsService.UpdateLightRequest)
}

::google::protobuf::uint8* UpdateLightRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lightsService.UpdateLightRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .lightsService.LightInfo light_info = 1;
  if (this->has_light_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::light_info(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lightsService.UpdateLightRequest)
  return target;
}

size_t UpdateLightRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lightsService.UpdateLightRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .lightsService.LightInfo light_info = 1;
  if (this->has_light_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *light_info_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateLightRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lightsService.UpdateLightRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateLightRequest* source =
      ::google::protobuf::DynamicCastToGenerated<UpdateLightRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lightsService.UpdateLightRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lightsService.UpdateLightRequest)
    MergeFrom(*source);
  }
}

void UpdateLightRequest::MergeFrom(const UpdateLightRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lightsService.UpdateLightRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_light_info()) {
    mutable_light_info()->::lightsService::LightInfo::MergeFrom(from.light_info());
  }
}

void UpdateLightRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lightsService.UpdateLightRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateLightRequest::CopyFrom(const UpdateLightRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lightsService.UpdateLightRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateLightRequest::IsInitialized() const {
  return true;
}

void UpdateLightRequest::Swap(UpdateLightRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateLightRequest::InternalSwap(UpdateLightRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(light_info_, other->light_info_);
}

::google::protobuf::Metadata UpdateLightRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_lights_2eproto);
  return ::file_level_metadata_lights_2eproto[kIndexInFileMessages];
}


// ===================================================================

void UpdateLightResponse::InitAsDefaultInstance() {
  ::lightsService::_UpdateLightResponse_default_instance_._instance.get_mutable()->light_info_ = const_cast< ::lightsService::LightInfo*>(
      ::lightsService::LightInfo::internal_default_instance());
}
class UpdateLightResponse::HasBitSetters {
 public:
  static const ::lightsService::LightInfo& light_info(const UpdateLightResponse* msg);
};

const ::lightsService::LightInfo&
UpdateLightResponse::HasBitSetters::light_info(const UpdateLightResponse* msg) {
  return *msg->light_info_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateLightResponse::kLightInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateLightResponse::UpdateLightResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lightsService.UpdateLightResponse)
}
UpdateLightResponse::UpdateLightResponse(const UpdateLightResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_light_info()) {
    light_info_ = new ::lightsService::LightInfo(*from.light_info_);
  } else {
    light_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:lightsService.UpdateLightResponse)
}

void UpdateLightResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_UpdateLightResponse_lights_2eproto.base);
  light_info_ = nullptr;
}

UpdateLightResponse::~UpdateLightResponse() {
  // @@protoc_insertion_point(destructor:lightsService.UpdateLightResponse)
  SharedDtor();
}

void UpdateLightResponse::SharedDtor() {
  if (this != internal_default_instance()) delete light_info_;
}

void UpdateLightResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateLightResponse& UpdateLightResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_UpdateLightResponse_lights_2eproto.base);
  return *internal_default_instance();
}


void UpdateLightResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:lightsService.UpdateLightResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && light_info_ != nullptr) {
    delete light_info_;
  }
  light_info_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UpdateLightResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<UpdateLightResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .lightsService.LightInfo light_info = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::lightsService::LightInfo::_InternalParse;
        object = msg->mutable_light_info();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UpdateLightResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lightsService.UpdateLightResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .lightsService.LightInfo light_info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_light_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lightsService.UpdateLightResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lightsService.UpdateLightResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UpdateLightResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lightsService.UpdateLightResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .lightsService.LightInfo light_info = 1;
  if (this->has_light_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::light_info(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:lightsService.UpdateLightResponse)
}

::google::protobuf::uint8* UpdateLightResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lightsService.UpdateLightResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .lightsService.LightInfo light_info = 1;
  if (this->has_light_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::light_info(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lightsService.UpdateLightResponse)
  return target;
}

size_t UpdateLightResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lightsService.UpdateLightResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .lightsService.LightInfo light_info = 1;
  if (this->has_light_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *light_info_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateLightResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lightsService.UpdateLightResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateLightResponse* source =
      ::google::protobuf::DynamicCastToGenerated<UpdateLightResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lightsService.UpdateLightResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lightsService.UpdateLightResponse)
    MergeFrom(*source);
  }
}

void UpdateLightResponse::MergeFrom(const UpdateLightResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lightsService.UpdateLightResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_light_info()) {
    mutable_light_info()->::lightsService::LightInfo::MergeFrom(from.light_info());
  }
}

void UpdateLightResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lightsService.UpdateLightResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateLightResponse::CopyFrom(const UpdateLightResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lightsService.UpdateLightResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateLightResponse::IsInitialized() const {
  return true;
}

void UpdateLightResponse::Swap(UpdateLightResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateLightResponse::InternalSwap(UpdateLightResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(light_info_, other->light_info_);
}

::google::protobuf::Metadata UpdateLightResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_lights_2eproto);
  return ::file_level_metadata_lights_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DeleteLightsRequest::InitAsDefaultInstance() {
}
class DeleteLightsRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeleteLightsRequest::kLightsIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteLightsRequest::DeleteLightsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lightsService.DeleteLightsRequest)
}
DeleteLightsRequest::DeleteLightsRequest(const DeleteLightsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      lights_id_(from.lights_id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:lightsService.DeleteLightsRequest)
}

void DeleteLightsRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_DeleteLightsRequest_lights_2eproto.base);
}

DeleteLightsRequest::~DeleteLightsRequest() {
  // @@protoc_insertion_point(destructor:lightsService.DeleteLightsRequest)
  SharedDtor();
}

void DeleteLightsRequest::SharedDtor() {
}

void DeleteLightsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteLightsRequest& DeleteLightsRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DeleteLightsRequest_lights_2eproto.base);
  return *internal_default_instance();
}


void DeleteLightsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:lightsService.DeleteLightsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lights_id_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeleteLightsRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DeleteLightsRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated string lights_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("lightsService.DeleteLightsRequest.lights_id");
          object = msg->add_lights_id();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeleteLightsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lightsService.DeleteLightsRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string lights_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_lights_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->lights_id(this->lights_id_size() - 1).data(),
            static_cast<int>(this->lights_id(this->lights_id_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lightsService.DeleteLightsRequest.lights_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lightsService.DeleteLightsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lightsService.DeleteLightsRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeleteLightsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lightsService.DeleteLightsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string lights_id = 1;
  for (int i = 0, n = this->lights_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lights_id(i).data(), static_cast<int>(this->lights_id(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lightsService.DeleteLightsRequest.lights_id");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->lights_id(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:lightsService.DeleteLightsRequest)
}

::google::protobuf::uint8* DeleteLightsRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lightsService.DeleteLightsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string lights_id = 1;
  for (int i = 0, n = this->lights_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lights_id(i).data(), static_cast<int>(this->lights_id(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lightsService.DeleteLightsRequest.lights_id");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->lights_id(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lightsService.DeleteLightsRequest)
  return target;
}

size_t DeleteLightsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lightsService.DeleteLightsRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string lights_id = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->lights_id_size());
  for (int i = 0, n = this->lights_id_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->lights_id(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteLightsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lightsService.DeleteLightsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteLightsRequest* source =
      ::google::protobuf::DynamicCastToGenerated<DeleteLightsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lightsService.DeleteLightsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lightsService.DeleteLightsRequest)
    MergeFrom(*source);
  }
}

void DeleteLightsRequest::MergeFrom(const DeleteLightsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lightsService.DeleteLightsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lights_id_.MergeFrom(from.lights_id_);
}

void DeleteLightsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lightsService.DeleteLightsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteLightsRequest::CopyFrom(const DeleteLightsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lightsService.DeleteLightsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteLightsRequest::IsInitialized() const {
  return true;
}

void DeleteLightsRequest::Swap(DeleteLightsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteLightsRequest::InternalSwap(DeleteLightsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  lights_id_.InternalSwap(CastToBase(&other->lights_id_));
}

::google::protobuf::Metadata DeleteLightsRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_lights_2eproto);
  return ::file_level_metadata_lights_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DeleteLightsResponse::InitAsDefaultInstance() {
}
class DeleteLightsResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteLightsResponse::DeleteLightsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lightsService.DeleteLightsResponse)
}
DeleteLightsResponse::DeleteLightsResponse(const DeleteLightsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:lightsService.DeleteLightsResponse)
}

void DeleteLightsResponse::SharedCtor() {
}

DeleteLightsResponse::~DeleteLightsResponse() {
  // @@protoc_insertion_point(destructor:lightsService.DeleteLightsResponse)
  SharedDtor();
}

void DeleteLightsResponse::SharedDtor() {
}

void DeleteLightsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteLightsResponse& DeleteLightsResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DeleteLightsResponse_lights_2eproto.base);
  return *internal_default_instance();
}


void DeleteLightsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:lightsService.DeleteLightsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeleteLightsResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DeleteLightsResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeleteLightsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lightsService.DeleteLightsResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:lightsService.DeleteLightsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lightsService.DeleteLightsResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeleteLightsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lightsService.DeleteLightsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:lightsService.DeleteLightsResponse)
}

::google::protobuf::uint8* DeleteLightsResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lightsService.DeleteLightsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lightsService.DeleteLightsResponse)
  return target;
}

size_t DeleteLightsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lightsService.DeleteLightsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteLightsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lightsService.DeleteLightsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteLightsResponse* source =
      ::google::protobuf::DynamicCastToGenerated<DeleteLightsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lightsService.DeleteLightsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lightsService.DeleteLightsResponse)
    MergeFrom(*source);
  }
}

void DeleteLightsResponse::MergeFrom(const DeleteLightsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lightsService.DeleteLightsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DeleteLightsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lightsService.DeleteLightsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteLightsResponse::CopyFrom(const DeleteLightsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lightsService.DeleteLightsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteLightsResponse::IsInitialized() const {
  return true;
}

void DeleteLightsResponse::Swap(DeleteLightsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteLightsResponse::InternalSwap(DeleteLightsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DeleteLightsResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_lights_2eproto);
  return ::file_level_metadata_lights_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace lightsService
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::lightsService::PreviewLightRequest* Arena::CreateMaybeMessage< ::lightsService::PreviewLightRequest >(Arena* arena) {
  return Arena::CreateInternal< ::lightsService::PreviewLightRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::lightsService::PreviewLightResponse* Arena::CreateMaybeMessage< ::lightsService::PreviewLightResponse >(Arena* arena) {
  return Arena::CreateInternal< ::lightsService::PreviewLightResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::lightsService::PlayLightRequest* Arena::CreateMaybeMessage< ::lightsService::PlayLightRequest >(Arena* arena) {
  return Arena::CreateInternal< ::lightsService::PlayLightRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::lightsService::PlayLightResponse* Arena::CreateMaybeMessage< ::lightsService::PlayLightResponse >(Arena* arena) {
  return Arena::CreateInternal< ::lightsService::PlayLightResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::lightsService::StopLightRequest* Arena::CreateMaybeMessage< ::lightsService::StopLightRequest >(Arena* arena) {
  return Arena::CreateInternal< ::lightsService::StopLightRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::lightsService::StopLightResponse* Arena::CreateMaybeMessage< ::lightsService::StopLightResponse >(Arena* arena) {
  return Arena::CreateInternal< ::lightsService::StopLightResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::lightsService::LightInfo* Arena::CreateMaybeMessage< ::lightsService::LightInfo >(Arena* arena) {
  return Arena::CreateInternal< ::lightsService::LightInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::lightsService::LightFrame* Arena::CreateMaybeMessage< ::lightsService::LightFrame >(Arena* arena) {
  return Arena::CreateInternal< ::lightsService::LightFrame >(arena);
}
template<> PROTOBUF_NOINLINE ::lightsService::ListLightsRequest* Arena::CreateMaybeMessage< ::lightsService::ListLightsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::lightsService::ListLightsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::lightsService::ListLightsResponse* Arena::CreateMaybeMessage< ::lightsService::ListLightsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::lightsService::ListLightsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::lightsService::NewLightRequest* Arena::CreateMaybeMessage< ::lightsService::NewLightRequest >(Arena* arena) {
  return Arena::CreateInternal< ::lightsService::NewLightRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::lightsService::NewLightResponse* Arena::CreateMaybeMessage< ::lightsService::NewLightResponse >(Arena* arena) {
  return Arena::CreateInternal< ::lightsService::NewLightResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::lightsService::UpdateLightRequest* Arena::CreateMaybeMessage< ::lightsService::UpdateLightRequest >(Arena* arena) {
  return Arena::CreateInternal< ::lightsService::UpdateLightRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::lightsService::UpdateLightResponse* Arena::CreateMaybeMessage< ::lightsService::UpdateLightResponse >(Arena* arena) {
  return Arena::CreateInternal< ::lightsService::UpdateLightResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::lightsService::DeleteLightsRequest* Arena::CreateMaybeMessage< ::lightsService::DeleteLightsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::lightsService::DeleteLightsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::lightsService::DeleteLightsResponse* Arena::CreateMaybeMessage< ::lightsService::DeleteLightsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::lightsService::DeleteLightsResponse >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
