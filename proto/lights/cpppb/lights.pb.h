// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lights.proto

#ifndef PROTOBUF_INCLUDED_lights_2eproto
#define PROTOBUF_INCLUDED_lights_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_lights_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_lights_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[16]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_lights_2eproto();
namespace lightsService {
class DeleteLightsRequest;
class DeleteLightsRequestDefaultTypeInternal;
extern DeleteLightsRequestDefaultTypeInternal _DeleteLightsRequest_default_instance_;
class DeleteLightsResponse;
class DeleteLightsResponseDefaultTypeInternal;
extern DeleteLightsResponseDefaultTypeInternal _DeleteLightsResponse_default_instance_;
class LightFrame;
class LightFrameDefaultTypeInternal;
extern LightFrameDefaultTypeInternal _LightFrame_default_instance_;
class LightInfo;
class LightInfoDefaultTypeInternal;
extern LightInfoDefaultTypeInternal _LightInfo_default_instance_;
class ListLightsRequest;
class ListLightsRequestDefaultTypeInternal;
extern ListLightsRequestDefaultTypeInternal _ListLightsRequest_default_instance_;
class ListLightsResponse;
class ListLightsResponseDefaultTypeInternal;
extern ListLightsResponseDefaultTypeInternal _ListLightsResponse_default_instance_;
class NewLightRequest;
class NewLightRequestDefaultTypeInternal;
extern NewLightRequestDefaultTypeInternal _NewLightRequest_default_instance_;
class NewLightResponse;
class NewLightResponseDefaultTypeInternal;
extern NewLightResponseDefaultTypeInternal _NewLightResponse_default_instance_;
class PlayLightRequest;
class PlayLightRequestDefaultTypeInternal;
extern PlayLightRequestDefaultTypeInternal _PlayLightRequest_default_instance_;
class PlayLightResponse;
class PlayLightResponseDefaultTypeInternal;
extern PlayLightResponseDefaultTypeInternal _PlayLightResponse_default_instance_;
class PreviewLightRequest;
class PreviewLightRequestDefaultTypeInternal;
extern PreviewLightRequestDefaultTypeInternal _PreviewLightRequest_default_instance_;
class PreviewLightResponse;
class PreviewLightResponseDefaultTypeInternal;
extern PreviewLightResponseDefaultTypeInternal _PreviewLightResponse_default_instance_;
class StopLightRequest;
class StopLightRequestDefaultTypeInternal;
extern StopLightRequestDefaultTypeInternal _StopLightRequest_default_instance_;
class StopLightResponse;
class StopLightResponseDefaultTypeInternal;
extern StopLightResponseDefaultTypeInternal _StopLightResponse_default_instance_;
class UpdateLightRequest;
class UpdateLightRequestDefaultTypeInternal;
extern UpdateLightRequestDefaultTypeInternal _UpdateLightRequest_default_instance_;
class UpdateLightResponse;
class UpdateLightResponseDefaultTypeInternal;
extern UpdateLightResponseDefaultTypeInternal _UpdateLightResponse_default_instance_;
}  // namespace lightsService
namespace google {
namespace protobuf {
template<> ::lightsService::DeleteLightsRequest* Arena::CreateMaybeMessage<::lightsService::DeleteLightsRequest>(Arena*);
template<> ::lightsService::DeleteLightsResponse* Arena::CreateMaybeMessage<::lightsService::DeleteLightsResponse>(Arena*);
template<> ::lightsService::LightFrame* Arena::CreateMaybeMessage<::lightsService::LightFrame>(Arena*);
template<> ::lightsService::LightInfo* Arena::CreateMaybeMessage<::lightsService::LightInfo>(Arena*);
template<> ::lightsService::ListLightsRequest* Arena::CreateMaybeMessage<::lightsService::ListLightsRequest>(Arena*);
template<> ::lightsService::ListLightsResponse* Arena::CreateMaybeMessage<::lightsService::ListLightsResponse>(Arena*);
template<> ::lightsService::NewLightRequest* Arena::CreateMaybeMessage<::lightsService::NewLightRequest>(Arena*);
template<> ::lightsService::NewLightResponse* Arena::CreateMaybeMessage<::lightsService::NewLightResponse>(Arena*);
template<> ::lightsService::PlayLightRequest* Arena::CreateMaybeMessage<::lightsService::PlayLightRequest>(Arena*);
template<> ::lightsService::PlayLightResponse* Arena::CreateMaybeMessage<::lightsService::PlayLightResponse>(Arena*);
template<> ::lightsService::PreviewLightRequest* Arena::CreateMaybeMessage<::lightsService::PreviewLightRequest>(Arena*);
template<> ::lightsService::PreviewLightResponse* Arena::CreateMaybeMessage<::lightsService::PreviewLightResponse>(Arena*);
template<> ::lightsService::StopLightRequest* Arena::CreateMaybeMessage<::lightsService::StopLightRequest>(Arena*);
template<> ::lightsService::StopLightResponse* Arena::CreateMaybeMessage<::lightsService::StopLightResponse>(Arena*);
template<> ::lightsService::UpdateLightRequest* Arena::CreateMaybeMessage<::lightsService::UpdateLightRequest>(Arena*);
template<> ::lightsService::UpdateLightResponse* Arena::CreateMaybeMessage<::lightsService::UpdateLightResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace lightsService {

enum LightType {
  UNDEFINED = 0,
  MOUTH = 1,
  HANDS = 2,
  EARS = 3,
  LightType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  LightType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool LightType_IsValid(int value);
const LightType LightType_MIN = UNDEFINED;
const LightType LightType_MAX = EARS;
const int LightType_ARRAYSIZE = LightType_MAX + 1;

const ::google::protobuf::EnumDescriptor* LightType_descriptor();
inline const ::std::string& LightType_Name(LightType value) {
  return ::google::protobuf::internal::NameOfEnum(
    LightType_descriptor(), value);
}
inline bool LightType_Parse(
    const ::std::string& name, LightType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LightType>(
    LightType_descriptor(), name, value);
}
enum PlayMode {
  PRESET = 0,
  ALWAYS = 1,
  MARQUEE = 2,
  FLASH = 3,
  TICKTOCK = 4,
  PlayMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  PlayMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool PlayMode_IsValid(int value);
const PlayMode PlayMode_MIN = PRESET;
const PlayMode PlayMode_MAX = TICKTOCK;
const int PlayMode_ARRAYSIZE = PlayMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* PlayMode_descriptor();
inline const ::std::string& PlayMode_Name(PlayMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    PlayMode_descriptor(), value);
}
inline bool PlayMode_Parse(
    const ::std::string& name, PlayMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PlayMode>(
    PlayMode_descriptor(), name, value);
}
// ===================================================================

class PreviewLightRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lightsService.PreviewLightRequest) */ {
 public:
  PreviewLightRequest();
  virtual ~PreviewLightRequest();

  PreviewLightRequest(const PreviewLightRequest& from);

  inline PreviewLightRequest& operator=(const PreviewLightRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PreviewLightRequest(PreviewLightRequest&& from) noexcept
    : PreviewLightRequest() {
    *this = ::std::move(from);
  }

  inline PreviewLightRequest& operator=(PreviewLightRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const PreviewLightRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PreviewLightRequest* internal_default_instance() {
    return reinterpret_cast<const PreviewLightRequest*>(
               &_PreviewLightRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(PreviewLightRequest* other);
  friend void swap(PreviewLightRequest& a, PreviewLightRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PreviewLightRequest* New() const final {
    return CreateMaybeMessage<PreviewLightRequest>(nullptr);
  }

  PreviewLightRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PreviewLightRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PreviewLightRequest& from);
  void MergeFrom(const PreviewLightRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PreviewLightRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // @@protoc_insertion_point(class_scope:lightsService.PreviewLightRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lights_2eproto;
};
// -------------------------------------------------------------------

class PreviewLightResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lightsService.PreviewLightResponse) */ {
 public:
  PreviewLightResponse();
  virtual ~PreviewLightResponse();

  PreviewLightResponse(const PreviewLightResponse& from);

  inline PreviewLightResponse& operator=(const PreviewLightResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PreviewLightResponse(PreviewLightResponse&& from) noexcept
    : PreviewLightResponse() {
    *this = ::std::move(from);
  }

  inline PreviewLightResponse& operator=(PreviewLightResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const PreviewLightResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PreviewLightResponse* internal_default_instance() {
    return reinterpret_cast<const PreviewLightResponse*>(
               &_PreviewLightResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(PreviewLightResponse* other);
  friend void swap(PreviewLightResponse& a, PreviewLightResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PreviewLightResponse* New() const final {
    return CreateMaybeMessage<PreviewLightResponse>(nullptr);
  }

  PreviewLightResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PreviewLightResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PreviewLightResponse& from);
  void MergeFrom(const PreviewLightResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PreviewLightResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:lightsService.PreviewLightResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lights_2eproto;
};
// -------------------------------------------------------------------

class PlayLightRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lightsService.PlayLightRequest) */ {
 public:
  PlayLightRequest();
  virtual ~PlayLightRequest();

  PlayLightRequest(const PlayLightRequest& from);

  inline PlayLightRequest& operator=(const PlayLightRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayLightRequest(PlayLightRequest&& from) noexcept
    : PlayLightRequest() {
    *this = ::std::move(from);
  }

  inline PlayLightRequest& operator=(PlayLightRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const PlayLightRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayLightRequest* internal_default_instance() {
    return reinterpret_cast<const PlayLightRequest*>(
               &_PlayLightRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(PlayLightRequest* other);
  friend void swap(PlayLightRequest& a, PlayLightRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayLightRequest* New() const final {
    return CreateMaybeMessage<PlayLightRequest>(nullptr);
  }

  PlayLightRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PlayLightRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PlayLightRequest& from);
  void MergeFrom(const PlayLightRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayLightRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .lightsService.LightType ltype = 1;
  void clear_ltype();
  static const int kLtypeFieldNumber = 1;
  ::lightsService::LightType ltype() const;
  void set_ltype(::lightsService::LightType value);

  // @@protoc_insertion_point(class_scope:lightsService.PlayLightRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  int ltype_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lights_2eproto;
};
// -------------------------------------------------------------------

class PlayLightResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lightsService.PlayLightResponse) */ {
 public:
  PlayLightResponse();
  virtual ~PlayLightResponse();

  PlayLightResponse(const PlayLightResponse& from);

  inline PlayLightResponse& operator=(const PlayLightResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayLightResponse(PlayLightResponse&& from) noexcept
    : PlayLightResponse() {
    *this = ::std::move(from);
  }

  inline PlayLightResponse& operator=(PlayLightResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const PlayLightResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayLightResponse* internal_default_instance() {
    return reinterpret_cast<const PlayLightResponse*>(
               &_PlayLightResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(PlayLightResponse* other);
  friend void swap(PlayLightResponse& a, PlayLightResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayLightResponse* New() const final {
    return CreateMaybeMessage<PlayLightResponse>(nullptr);
  }

  PlayLightResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PlayLightResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PlayLightResponse& from);
  void MergeFrom(const PlayLightResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayLightResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:lightsService.PlayLightResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lights_2eproto;
};
// -------------------------------------------------------------------

class StopLightRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lightsService.StopLightRequest) */ {
 public:
  StopLightRequest();
  virtual ~StopLightRequest();

  StopLightRequest(const StopLightRequest& from);

  inline StopLightRequest& operator=(const StopLightRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StopLightRequest(StopLightRequest&& from) noexcept
    : StopLightRequest() {
    *this = ::std::move(from);
  }

  inline StopLightRequest& operator=(StopLightRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const StopLightRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StopLightRequest* internal_default_instance() {
    return reinterpret_cast<const StopLightRequest*>(
               &_StopLightRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(StopLightRequest* other);
  friend void swap(StopLightRequest& a, StopLightRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StopLightRequest* New() const final {
    return CreateMaybeMessage<StopLightRequest>(nullptr);
  }

  StopLightRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StopLightRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StopLightRequest& from);
  void MergeFrom(const StopLightRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopLightRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .lightsService.LightType ltypes = 1;
  int ltypes_size() const;
  void clear_ltypes();
  static const int kLtypesFieldNumber = 1;
  ::lightsService::LightType ltypes(int index) const;
  void set_ltypes(int index, ::lightsService::LightType value);
  void add_ltypes(::lightsService::LightType value);
  const ::google::protobuf::RepeatedField<int>& ltypes() const;
  ::google::protobuf::RepeatedField<int>* mutable_ltypes();

  // @@protoc_insertion_point(class_scope:lightsService.StopLightRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField<int> ltypes_;
  mutable std::atomic<int> _ltypes_cached_byte_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lights_2eproto;
};
// -------------------------------------------------------------------

class StopLightResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lightsService.StopLightResponse) */ {
 public:
  StopLightResponse();
  virtual ~StopLightResponse();

  StopLightResponse(const StopLightResponse& from);

  inline StopLightResponse& operator=(const StopLightResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StopLightResponse(StopLightResponse&& from) noexcept
    : StopLightResponse() {
    *this = ::std::move(from);
  }

  inline StopLightResponse& operator=(StopLightResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const StopLightResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StopLightResponse* internal_default_instance() {
    return reinterpret_cast<const StopLightResponse*>(
               &_StopLightResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(StopLightResponse* other);
  friend void swap(StopLightResponse& a, StopLightResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StopLightResponse* New() const final {
    return CreateMaybeMessage<StopLightResponse>(nullptr);
  }

  StopLightResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StopLightResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StopLightResponse& from);
  void MergeFrom(const StopLightResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopLightResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:lightsService.StopLightResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lights_2eproto;
};
// -------------------------------------------------------------------

class LightInfo final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lightsService.LightInfo) */ {
 public:
  LightInfo();
  virtual ~LightInfo();

  LightInfo(const LightInfo& from);

  inline LightInfo& operator=(const LightInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LightInfo(LightInfo&& from) noexcept
    : LightInfo() {
    *this = ::std::move(from);
  }

  inline LightInfo& operator=(LightInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LightInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LightInfo* internal_default_instance() {
    return reinterpret_cast<const LightInfo*>(
               &_LightInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(LightInfo* other);
  friend void swap(LightInfo& a, LightInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LightInfo* New() const final {
    return CreateMaybeMessage<LightInfo>(nullptr);
  }

  LightInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LightInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LightInfo& from);
  void MergeFrom(const LightInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LightInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .lightsService.LightFrame frames = 4;
  int frames_size() const;
  void clear_frames();
  static const int kFramesFieldNumber = 4;
  ::lightsService::LightFrame* mutable_frames(int index);
  ::google::protobuf::RepeatedPtrField< ::lightsService::LightFrame >*
      mutable_frames();
  const ::lightsService::LightFrame& frames(int index) const;
  ::lightsService::LightFrame* add_frames();
  const ::google::protobuf::RepeatedPtrField< ::lightsService::LightFrame >&
      frames() const;

  // string id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .lightsService.LightType ltype = 1;
  void clear_ltype();
  static const int kLtypeFieldNumber = 1;
  ::lightsService::LightType ltype() const;
  void set_ltype(::lightsService::LightType value);

  // @@protoc_insertion_point(class_scope:lightsService.LightInfo)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::lightsService::LightFrame > frames_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  int ltype_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lights_2eproto;
};
// -------------------------------------------------------------------

class LightFrame final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lightsService.LightFrame) */ {
 public:
  LightFrame();
  virtual ~LightFrame();

  LightFrame(const LightFrame& from);

  inline LightFrame& operator=(const LightFrame& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LightFrame(LightFrame&& from) noexcept
    : LightFrame() {
    *this = ::std::move(from);
  }

  inline LightFrame& operator=(LightFrame&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LightFrame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LightFrame* internal_default_instance() {
    return reinterpret_cast<const LightFrame*>(
               &_LightFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(LightFrame* other);
  friend void swap(LightFrame& a, LightFrame& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LightFrame* New() const final {
    return CreateMaybeMessage<LightFrame>(nullptr);
  }

  LightFrame* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LightFrame>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LightFrame& from);
  void MergeFrom(const LightFrame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LightFrame* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string colors = 1;
  int colors_size() const;
  void clear_colors();
  static const int kColorsFieldNumber = 1;
  const ::std::string& colors(int index) const;
  ::std::string* mutable_colors(int index);
  void set_colors(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_colors(int index, ::std::string&& value);
  #endif
  void set_colors(int index, const char* value);
  void set_colors(int index, const char* value, size_t size);
  ::std::string* add_colors();
  void add_colors(const ::std::string& value);
  #if LANG_CXX11
  void add_colors(::std::string&& value);
  #endif
  void add_colors(const char* value);
  void add_colors(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& colors() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_colors();

  // uint32 speed = 2;
  void clear_speed();
  static const int kSpeedFieldNumber = 2;
  ::google::protobuf::uint32 speed() const;
  void set_speed(::google::protobuf::uint32 value);

  // .lightsService.PlayMode mode = 3;
  void clear_mode();
  static const int kModeFieldNumber = 3;
  ::lightsService::PlayMode mode() const;
  void set_mode(::lightsService::PlayMode value);

  // @@protoc_insertion_point(class_scope:lightsService.LightFrame)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> colors_;
  ::google::protobuf::uint32 speed_;
  int mode_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lights_2eproto;
};
// -------------------------------------------------------------------

class ListLightsRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lightsService.ListLightsRequest) */ {
 public:
  ListLightsRequest();
  virtual ~ListLightsRequest();

  ListLightsRequest(const ListLightsRequest& from);

  inline ListLightsRequest& operator=(const ListLightsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListLightsRequest(ListLightsRequest&& from) noexcept
    : ListLightsRequest() {
    *this = ::std::move(from);
  }

  inline ListLightsRequest& operator=(ListLightsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ListLightsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListLightsRequest* internal_default_instance() {
    return reinterpret_cast<const ListLightsRequest*>(
               &_ListLightsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(ListLightsRequest* other);
  friend void swap(ListLightsRequest& a, ListLightsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListLightsRequest* New() const final {
    return CreateMaybeMessage<ListLightsRequest>(nullptr);
  }

  ListLightsRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListLightsRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListLightsRequest& from);
  void MergeFrom(const ListLightsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListLightsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .lightsService.LightType ltype = 1;
  void clear_ltype();
  static const int kLtypeFieldNumber = 1;
  ::lightsService::LightType ltype() const;
  void set_ltype(::lightsService::LightType value);

  // @@protoc_insertion_point(class_scope:lightsService.ListLightsRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int ltype_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lights_2eproto;
};
// -------------------------------------------------------------------

class ListLightsResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lightsService.ListLightsResponse) */ {
 public:
  ListLightsResponse();
  virtual ~ListLightsResponse();

  ListLightsResponse(const ListLightsResponse& from);

  inline ListLightsResponse& operator=(const ListLightsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListLightsResponse(ListLightsResponse&& from) noexcept
    : ListLightsResponse() {
    *this = ::std::move(from);
  }

  inline ListLightsResponse& operator=(ListLightsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ListLightsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListLightsResponse* internal_default_instance() {
    return reinterpret_cast<const ListLightsResponse*>(
               &_ListLightsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(ListLightsResponse* other);
  friend void swap(ListLightsResponse& a, ListLightsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListLightsResponse* New() const final {
    return CreateMaybeMessage<ListLightsResponse>(nullptr);
  }

  ListLightsResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListLightsResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListLightsResponse& from);
  void MergeFrom(const ListLightsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListLightsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .lightsService.LightInfo lights_info = 1;
  int lights_info_size() const;
  void clear_lights_info();
  static const int kLightsInfoFieldNumber = 1;
  ::lightsService::LightInfo* mutable_lights_info(int index);
  ::google::protobuf::RepeatedPtrField< ::lightsService::LightInfo >*
      mutable_lights_info();
  const ::lightsService::LightInfo& lights_info(int index) const;
  ::lightsService::LightInfo* add_lights_info();
  const ::google::protobuf::RepeatedPtrField< ::lightsService::LightInfo >&
      lights_info() const;

  // @@protoc_insertion_point(class_scope:lightsService.ListLightsResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::lightsService::LightInfo > lights_info_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lights_2eproto;
};
// -------------------------------------------------------------------

class NewLightRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lightsService.NewLightRequest) */ {
 public:
  NewLightRequest();
  virtual ~NewLightRequest();

  NewLightRequest(const NewLightRequest& from);

  inline NewLightRequest& operator=(const NewLightRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NewLightRequest(NewLightRequest&& from) noexcept
    : NewLightRequest() {
    *this = ::std::move(from);
  }

  inline NewLightRequest& operator=(NewLightRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const NewLightRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NewLightRequest* internal_default_instance() {
    return reinterpret_cast<const NewLightRequest*>(
               &_NewLightRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(NewLightRequest* other);
  friend void swap(NewLightRequest& a, NewLightRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NewLightRequest* New() const final {
    return CreateMaybeMessage<NewLightRequest>(nullptr);
  }

  NewLightRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NewLightRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NewLightRequest& from);
  void MergeFrom(const NewLightRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NewLightRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .lightsService.LightInfo light_info = 1;
  bool has_light_info() const;
  void clear_light_info();
  static const int kLightInfoFieldNumber = 1;
  const ::lightsService::LightInfo& light_info() const;
  ::lightsService::LightInfo* release_light_info();
  ::lightsService::LightInfo* mutable_light_info();
  void set_allocated_light_info(::lightsService::LightInfo* light_info);

  // @@protoc_insertion_point(class_scope:lightsService.NewLightRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::lightsService::LightInfo* light_info_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lights_2eproto;
};
// -------------------------------------------------------------------

class NewLightResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lightsService.NewLightResponse) */ {
 public:
  NewLightResponse();
  virtual ~NewLightResponse();

  NewLightResponse(const NewLightResponse& from);

  inline NewLightResponse& operator=(const NewLightResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NewLightResponse(NewLightResponse&& from) noexcept
    : NewLightResponse() {
    *this = ::std::move(from);
  }

  inline NewLightResponse& operator=(NewLightResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const NewLightResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NewLightResponse* internal_default_instance() {
    return reinterpret_cast<const NewLightResponse*>(
               &_NewLightResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(NewLightResponse* other);
  friend void swap(NewLightResponse& a, NewLightResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NewLightResponse* New() const final {
    return CreateMaybeMessage<NewLightResponse>(nullptr);
  }

  NewLightResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NewLightResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NewLightResponse& from);
  void MergeFrom(const NewLightResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NewLightResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .lightsService.LightInfo light_info = 1;
  bool has_light_info() const;
  void clear_light_info();
  static const int kLightInfoFieldNumber = 1;
  const ::lightsService::LightInfo& light_info() const;
  ::lightsService::LightInfo* release_light_info();
  ::lightsService::LightInfo* mutable_light_info();
  void set_allocated_light_info(::lightsService::LightInfo* light_info);

  // @@protoc_insertion_point(class_scope:lightsService.NewLightResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::lightsService::LightInfo* light_info_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lights_2eproto;
};
// -------------------------------------------------------------------

class UpdateLightRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lightsService.UpdateLightRequest) */ {
 public:
  UpdateLightRequest();
  virtual ~UpdateLightRequest();

  UpdateLightRequest(const UpdateLightRequest& from);

  inline UpdateLightRequest& operator=(const UpdateLightRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateLightRequest(UpdateLightRequest&& from) noexcept
    : UpdateLightRequest() {
    *this = ::std::move(from);
  }

  inline UpdateLightRequest& operator=(UpdateLightRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const UpdateLightRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateLightRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateLightRequest*>(
               &_UpdateLightRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(UpdateLightRequest* other);
  friend void swap(UpdateLightRequest& a, UpdateLightRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateLightRequest* New() const final {
    return CreateMaybeMessage<UpdateLightRequest>(nullptr);
  }

  UpdateLightRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UpdateLightRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UpdateLightRequest& from);
  void MergeFrom(const UpdateLightRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateLightRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .lightsService.LightInfo light_info = 1;
  bool has_light_info() const;
  void clear_light_info();
  static const int kLightInfoFieldNumber = 1;
  const ::lightsService::LightInfo& light_info() const;
  ::lightsService::LightInfo* release_light_info();
  ::lightsService::LightInfo* mutable_light_info();
  void set_allocated_light_info(::lightsService::LightInfo* light_info);

  // @@protoc_insertion_point(class_scope:lightsService.UpdateLightRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::lightsService::LightInfo* light_info_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lights_2eproto;
};
// -------------------------------------------------------------------

class UpdateLightResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lightsService.UpdateLightResponse) */ {
 public:
  UpdateLightResponse();
  virtual ~UpdateLightResponse();

  UpdateLightResponse(const UpdateLightResponse& from);

  inline UpdateLightResponse& operator=(const UpdateLightResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateLightResponse(UpdateLightResponse&& from) noexcept
    : UpdateLightResponse() {
    *this = ::std::move(from);
  }

  inline UpdateLightResponse& operator=(UpdateLightResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const UpdateLightResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateLightResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateLightResponse*>(
               &_UpdateLightResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(UpdateLightResponse* other);
  friend void swap(UpdateLightResponse& a, UpdateLightResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateLightResponse* New() const final {
    return CreateMaybeMessage<UpdateLightResponse>(nullptr);
  }

  UpdateLightResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UpdateLightResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UpdateLightResponse& from);
  void MergeFrom(const UpdateLightResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateLightResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .lightsService.LightInfo light_info = 1;
  bool has_light_info() const;
  void clear_light_info();
  static const int kLightInfoFieldNumber = 1;
  const ::lightsService::LightInfo& light_info() const;
  ::lightsService::LightInfo* release_light_info();
  ::lightsService::LightInfo* mutable_light_info();
  void set_allocated_light_info(::lightsService::LightInfo* light_info);

  // @@protoc_insertion_point(class_scope:lightsService.UpdateLightResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::lightsService::LightInfo* light_info_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lights_2eproto;
};
// -------------------------------------------------------------------

class DeleteLightsRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lightsService.DeleteLightsRequest) */ {
 public:
  DeleteLightsRequest();
  virtual ~DeleteLightsRequest();

  DeleteLightsRequest(const DeleteLightsRequest& from);

  inline DeleteLightsRequest& operator=(const DeleteLightsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteLightsRequest(DeleteLightsRequest&& from) noexcept
    : DeleteLightsRequest() {
    *this = ::std::move(from);
  }

  inline DeleteLightsRequest& operator=(DeleteLightsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DeleteLightsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteLightsRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteLightsRequest*>(
               &_DeleteLightsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(DeleteLightsRequest* other);
  friend void swap(DeleteLightsRequest& a, DeleteLightsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteLightsRequest* New() const final {
    return CreateMaybeMessage<DeleteLightsRequest>(nullptr);
  }

  DeleteLightsRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeleteLightsRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeleteLightsRequest& from);
  void MergeFrom(const DeleteLightsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteLightsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string lights_id = 1;
  int lights_id_size() const;
  void clear_lights_id();
  static const int kLightsIdFieldNumber = 1;
  const ::std::string& lights_id(int index) const;
  ::std::string* mutable_lights_id(int index);
  void set_lights_id(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_lights_id(int index, ::std::string&& value);
  #endif
  void set_lights_id(int index, const char* value);
  void set_lights_id(int index, const char* value, size_t size);
  ::std::string* add_lights_id();
  void add_lights_id(const ::std::string& value);
  #if LANG_CXX11
  void add_lights_id(::std::string&& value);
  #endif
  void add_lights_id(const char* value);
  void add_lights_id(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& lights_id() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_lights_id();

  // @@protoc_insertion_point(class_scope:lightsService.DeleteLightsRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> lights_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lights_2eproto;
};
// -------------------------------------------------------------------

class DeleteLightsResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lightsService.DeleteLightsResponse) */ {
 public:
  DeleteLightsResponse();
  virtual ~DeleteLightsResponse();

  DeleteLightsResponse(const DeleteLightsResponse& from);

  inline DeleteLightsResponse& operator=(const DeleteLightsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteLightsResponse(DeleteLightsResponse&& from) noexcept
    : DeleteLightsResponse() {
    *this = ::std::move(from);
  }

  inline DeleteLightsResponse& operator=(DeleteLightsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DeleteLightsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteLightsResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteLightsResponse*>(
               &_DeleteLightsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(DeleteLightsResponse* other);
  friend void swap(DeleteLightsResponse& a, DeleteLightsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteLightsResponse* New() const final {
    return CreateMaybeMessage<DeleteLightsResponse>(nullptr);
  }

  DeleteLightsResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeleteLightsResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeleteLightsResponse& from);
  void MergeFrom(const DeleteLightsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteLightsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:lightsService.DeleteLightsResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lights_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PreviewLightRequest

// string id = 1;
inline void PreviewLightRequest::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PreviewLightRequest::id() const {
  // @@protoc_insertion_point(field_get:lightsService.PreviewLightRequest.id)
  return id_.GetNoArena();
}
inline void PreviewLightRequest::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lightsService.PreviewLightRequest.id)
}
#if LANG_CXX11
inline void PreviewLightRequest::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lightsService.PreviewLightRequest.id)
}
#endif
inline void PreviewLightRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lightsService.PreviewLightRequest.id)
}
inline void PreviewLightRequest::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lightsService.PreviewLightRequest.id)
}
inline ::std::string* PreviewLightRequest::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:lightsService.PreviewLightRequest.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PreviewLightRequest::release_id() {
  // @@protoc_insertion_point(field_release:lightsService.PreviewLightRequest.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PreviewLightRequest::set_allocated_id(::std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:lightsService.PreviewLightRequest.id)
}

// -------------------------------------------------------------------

// PreviewLightResponse

// -------------------------------------------------------------------

// PlayLightRequest

// .lightsService.LightType ltype = 1;
inline void PlayLightRequest::clear_ltype() {
  ltype_ = 0;
}
inline ::lightsService::LightType PlayLightRequest::ltype() const {
  // @@protoc_insertion_point(field_get:lightsService.PlayLightRequest.ltype)
  return static_cast< ::lightsService::LightType >(ltype_);
}
inline void PlayLightRequest::set_ltype(::lightsService::LightType value) {
  
  ltype_ = value;
  // @@protoc_insertion_point(field_set:lightsService.PlayLightRequest.ltype)
}

// string id = 2;
inline void PlayLightRequest::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlayLightRequest::id() const {
  // @@protoc_insertion_point(field_get:lightsService.PlayLightRequest.id)
  return id_.GetNoArena();
}
inline void PlayLightRequest::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lightsService.PlayLightRequest.id)
}
#if LANG_CXX11
inline void PlayLightRequest::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lightsService.PlayLightRequest.id)
}
#endif
inline void PlayLightRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lightsService.PlayLightRequest.id)
}
inline void PlayLightRequest::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lightsService.PlayLightRequest.id)
}
inline ::std::string* PlayLightRequest::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:lightsService.PlayLightRequest.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayLightRequest::release_id() {
  // @@protoc_insertion_point(field_release:lightsService.PlayLightRequest.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayLightRequest::set_allocated_id(::std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:lightsService.PlayLightRequest.id)
}

// string name = 3;
inline void PlayLightRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlayLightRequest::name() const {
  // @@protoc_insertion_point(field_get:lightsService.PlayLightRequest.name)
  return name_.GetNoArena();
}
inline void PlayLightRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lightsService.PlayLightRequest.name)
}
#if LANG_CXX11
inline void PlayLightRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lightsService.PlayLightRequest.name)
}
#endif
inline void PlayLightRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lightsService.PlayLightRequest.name)
}
inline void PlayLightRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lightsService.PlayLightRequest.name)
}
inline ::std::string* PlayLightRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:lightsService.PlayLightRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayLightRequest::release_name() {
  // @@protoc_insertion_point(field_release:lightsService.PlayLightRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayLightRequest::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:lightsService.PlayLightRequest.name)
}

// -------------------------------------------------------------------

// PlayLightResponse

// -------------------------------------------------------------------

// StopLightRequest

// repeated .lightsService.LightType ltypes = 1;
inline int StopLightRequest::ltypes_size() const {
  return ltypes_.size();
}
inline void StopLightRequest::clear_ltypes() {
  ltypes_.Clear();
}
inline ::lightsService::LightType StopLightRequest::ltypes(int index) const {
  // @@protoc_insertion_point(field_get:lightsService.StopLightRequest.ltypes)
  return static_cast< ::lightsService::LightType >(ltypes_.Get(index));
}
inline void StopLightRequest::set_ltypes(int index, ::lightsService::LightType value) {
  ltypes_.Set(index, value);
  // @@protoc_insertion_point(field_set:lightsService.StopLightRequest.ltypes)
}
inline void StopLightRequest::add_ltypes(::lightsService::LightType value) {
  ltypes_.Add(value);
  // @@protoc_insertion_point(field_add:lightsService.StopLightRequest.ltypes)
}
inline const ::google::protobuf::RepeatedField<int>&
StopLightRequest::ltypes() const {
  // @@protoc_insertion_point(field_list:lightsService.StopLightRequest.ltypes)
  return ltypes_;
}
inline ::google::protobuf::RepeatedField<int>*
StopLightRequest::mutable_ltypes() {
  // @@protoc_insertion_point(field_mutable_list:lightsService.StopLightRequest.ltypes)
  return &ltypes_;
}

// -------------------------------------------------------------------

// StopLightResponse

// -------------------------------------------------------------------

// LightInfo

// .lightsService.LightType ltype = 1;
inline void LightInfo::clear_ltype() {
  ltype_ = 0;
}
inline ::lightsService::LightType LightInfo::ltype() const {
  // @@protoc_insertion_point(field_get:lightsService.LightInfo.ltype)
  return static_cast< ::lightsService::LightType >(ltype_);
}
inline void LightInfo::set_ltype(::lightsService::LightType value) {
  
  ltype_ = value;
  // @@protoc_insertion_point(field_set:lightsService.LightInfo.ltype)
}

// string id = 2;
inline void LightInfo::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LightInfo::id() const {
  // @@protoc_insertion_point(field_get:lightsService.LightInfo.id)
  return id_.GetNoArena();
}
inline void LightInfo::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lightsService.LightInfo.id)
}
#if LANG_CXX11
inline void LightInfo::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lightsService.LightInfo.id)
}
#endif
inline void LightInfo::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lightsService.LightInfo.id)
}
inline void LightInfo::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lightsService.LightInfo.id)
}
inline ::std::string* LightInfo::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:lightsService.LightInfo.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LightInfo::release_id() {
  // @@protoc_insertion_point(field_release:lightsService.LightInfo.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LightInfo::set_allocated_id(::std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:lightsService.LightInfo.id)
}

// string name = 3;
inline void LightInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LightInfo::name() const {
  // @@protoc_insertion_point(field_get:lightsService.LightInfo.name)
  return name_.GetNoArena();
}
inline void LightInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lightsService.LightInfo.name)
}
#if LANG_CXX11
inline void LightInfo::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lightsService.LightInfo.name)
}
#endif
inline void LightInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lightsService.LightInfo.name)
}
inline void LightInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lightsService.LightInfo.name)
}
inline ::std::string* LightInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:lightsService.LightInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LightInfo::release_name() {
  // @@protoc_insertion_point(field_release:lightsService.LightInfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LightInfo::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:lightsService.LightInfo.name)
}

// repeated .lightsService.LightFrame frames = 4;
inline int LightInfo::frames_size() const {
  return frames_.size();
}
inline void LightInfo::clear_frames() {
  frames_.Clear();
}
inline ::lightsService::LightFrame* LightInfo::mutable_frames(int index) {
  // @@protoc_insertion_point(field_mutable:lightsService.LightInfo.frames)
  return frames_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::lightsService::LightFrame >*
LightInfo::mutable_frames() {
  // @@protoc_insertion_point(field_mutable_list:lightsService.LightInfo.frames)
  return &frames_;
}
inline const ::lightsService::LightFrame& LightInfo::frames(int index) const {
  // @@protoc_insertion_point(field_get:lightsService.LightInfo.frames)
  return frames_.Get(index);
}
inline ::lightsService::LightFrame* LightInfo::add_frames() {
  // @@protoc_insertion_point(field_add:lightsService.LightInfo.frames)
  return frames_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::lightsService::LightFrame >&
LightInfo::frames() const {
  // @@protoc_insertion_point(field_list:lightsService.LightInfo.frames)
  return frames_;
}

// -------------------------------------------------------------------

// LightFrame

// repeated string colors = 1;
inline int LightFrame::colors_size() const {
  return colors_.size();
}
inline void LightFrame::clear_colors() {
  colors_.Clear();
}
inline const ::std::string& LightFrame::colors(int index) const {
  // @@protoc_insertion_point(field_get:lightsService.LightFrame.colors)
  return colors_.Get(index);
}
inline ::std::string* LightFrame::mutable_colors(int index) {
  // @@protoc_insertion_point(field_mutable:lightsService.LightFrame.colors)
  return colors_.Mutable(index);
}
inline void LightFrame::set_colors(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:lightsService.LightFrame.colors)
  colors_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void LightFrame::set_colors(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:lightsService.LightFrame.colors)
  colors_.Mutable(index)->assign(std::move(value));
}
#endif
inline void LightFrame::set_colors(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  colors_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:lightsService.LightFrame.colors)
}
inline void LightFrame::set_colors(int index, const char* value, size_t size) {
  colors_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lightsService.LightFrame.colors)
}
inline ::std::string* LightFrame::add_colors() {
  // @@protoc_insertion_point(field_add_mutable:lightsService.LightFrame.colors)
  return colors_.Add();
}
inline void LightFrame::add_colors(const ::std::string& value) {
  colors_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:lightsService.LightFrame.colors)
}
#if LANG_CXX11
inline void LightFrame::add_colors(::std::string&& value) {
  colors_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:lightsService.LightFrame.colors)
}
#endif
inline void LightFrame::add_colors(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  colors_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:lightsService.LightFrame.colors)
}
inline void LightFrame::add_colors(const char* value, size_t size) {
  colors_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:lightsService.LightFrame.colors)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
LightFrame::colors() const {
  // @@protoc_insertion_point(field_list:lightsService.LightFrame.colors)
  return colors_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
LightFrame::mutable_colors() {
  // @@protoc_insertion_point(field_mutable_list:lightsService.LightFrame.colors)
  return &colors_;
}

// uint32 speed = 2;
inline void LightFrame::clear_speed() {
  speed_ = 0u;
}
inline ::google::protobuf::uint32 LightFrame::speed() const {
  // @@protoc_insertion_point(field_get:lightsService.LightFrame.speed)
  return speed_;
}
inline void LightFrame::set_speed(::google::protobuf::uint32 value) {
  
  speed_ = value;
  // @@protoc_insertion_point(field_set:lightsService.LightFrame.speed)
}

// .lightsService.PlayMode mode = 3;
inline void LightFrame::clear_mode() {
  mode_ = 0;
}
inline ::lightsService::PlayMode LightFrame::mode() const {
  // @@protoc_insertion_point(field_get:lightsService.LightFrame.mode)
  return static_cast< ::lightsService::PlayMode >(mode_);
}
inline void LightFrame::set_mode(::lightsService::PlayMode value) {
  
  mode_ = value;
  // @@protoc_insertion_point(field_set:lightsService.LightFrame.mode)
}

// -------------------------------------------------------------------

// ListLightsRequest

// .lightsService.LightType ltype = 1;
inline void ListLightsRequest::clear_ltype() {
  ltype_ = 0;
}
inline ::lightsService::LightType ListLightsRequest::ltype() const {
  // @@protoc_insertion_point(field_get:lightsService.ListLightsRequest.ltype)
  return static_cast< ::lightsService::LightType >(ltype_);
}
inline void ListLightsRequest::set_ltype(::lightsService::LightType value) {
  
  ltype_ = value;
  // @@protoc_insertion_point(field_set:lightsService.ListLightsRequest.ltype)
}

// -------------------------------------------------------------------

// ListLightsResponse

// repeated .lightsService.LightInfo lights_info = 1;
inline int ListLightsResponse::lights_info_size() const {
  return lights_info_.size();
}
inline void ListLightsResponse::clear_lights_info() {
  lights_info_.Clear();
}
inline ::lightsService::LightInfo* ListLightsResponse::mutable_lights_info(int index) {
  // @@protoc_insertion_point(field_mutable:lightsService.ListLightsResponse.lights_info)
  return lights_info_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::lightsService::LightInfo >*
ListLightsResponse::mutable_lights_info() {
  // @@protoc_insertion_point(field_mutable_list:lightsService.ListLightsResponse.lights_info)
  return &lights_info_;
}
inline const ::lightsService::LightInfo& ListLightsResponse::lights_info(int index) const {
  // @@protoc_insertion_point(field_get:lightsService.ListLightsResponse.lights_info)
  return lights_info_.Get(index);
}
inline ::lightsService::LightInfo* ListLightsResponse::add_lights_info() {
  // @@protoc_insertion_point(field_add:lightsService.ListLightsResponse.lights_info)
  return lights_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::lightsService::LightInfo >&
ListLightsResponse::lights_info() const {
  // @@protoc_insertion_point(field_list:lightsService.ListLightsResponse.lights_info)
  return lights_info_;
}

// -------------------------------------------------------------------

// NewLightRequest

// .lightsService.LightInfo light_info = 1;
inline bool NewLightRequest::has_light_info() const {
  return this != internal_default_instance() && light_info_ != nullptr;
}
inline void NewLightRequest::clear_light_info() {
  if (GetArenaNoVirtual() == nullptr && light_info_ != nullptr) {
    delete light_info_;
  }
  light_info_ = nullptr;
}
inline const ::lightsService::LightInfo& NewLightRequest::light_info() const {
  const ::lightsService::LightInfo* p = light_info_;
  // @@protoc_insertion_point(field_get:lightsService.NewLightRequest.light_info)
  return p != nullptr ? *p : *reinterpret_cast<const ::lightsService::LightInfo*>(
      &::lightsService::_LightInfo_default_instance_);
}
inline ::lightsService::LightInfo* NewLightRequest::release_light_info() {
  // @@protoc_insertion_point(field_release:lightsService.NewLightRequest.light_info)
  
  ::lightsService::LightInfo* temp = light_info_;
  light_info_ = nullptr;
  return temp;
}
inline ::lightsService::LightInfo* NewLightRequest::mutable_light_info() {
  
  if (light_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::lightsService::LightInfo>(GetArenaNoVirtual());
    light_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:lightsService.NewLightRequest.light_info)
  return light_info_;
}
inline void NewLightRequest::set_allocated_light_info(::lightsService::LightInfo* light_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete light_info_;
  }
  if (light_info) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      light_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, light_info, submessage_arena);
    }
    
  } else {
    
  }
  light_info_ = light_info;
  // @@protoc_insertion_point(field_set_allocated:lightsService.NewLightRequest.light_info)
}

// -------------------------------------------------------------------

// NewLightResponse

// .lightsService.LightInfo light_info = 1;
inline bool NewLightResponse::has_light_info() const {
  return this != internal_default_instance() && light_info_ != nullptr;
}
inline void NewLightResponse::clear_light_info() {
  if (GetArenaNoVirtual() == nullptr && light_info_ != nullptr) {
    delete light_info_;
  }
  light_info_ = nullptr;
}
inline const ::lightsService::LightInfo& NewLightResponse::light_info() const {
  const ::lightsService::LightInfo* p = light_info_;
  // @@protoc_insertion_point(field_get:lightsService.NewLightResponse.light_info)
  return p != nullptr ? *p : *reinterpret_cast<const ::lightsService::LightInfo*>(
      &::lightsService::_LightInfo_default_instance_);
}
inline ::lightsService::LightInfo* NewLightResponse::release_light_info() {
  // @@protoc_insertion_point(field_release:lightsService.NewLightResponse.light_info)
  
  ::lightsService::LightInfo* temp = light_info_;
  light_info_ = nullptr;
  return temp;
}
inline ::lightsService::LightInfo* NewLightResponse::mutable_light_info() {
  
  if (light_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::lightsService::LightInfo>(GetArenaNoVirtual());
    light_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:lightsService.NewLightResponse.light_info)
  return light_info_;
}
inline void NewLightResponse::set_allocated_light_info(::lightsService::LightInfo* light_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete light_info_;
  }
  if (light_info) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      light_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, light_info, submessage_arena);
    }
    
  } else {
    
  }
  light_info_ = light_info;
  // @@protoc_insertion_point(field_set_allocated:lightsService.NewLightResponse.light_info)
}

// -------------------------------------------------------------------

// UpdateLightRequest

// .lightsService.LightInfo light_info = 1;
inline bool UpdateLightRequest::has_light_info() const {
  return this != internal_default_instance() && light_info_ != nullptr;
}
inline void UpdateLightRequest::clear_light_info() {
  if (GetArenaNoVirtual() == nullptr && light_info_ != nullptr) {
    delete light_info_;
  }
  light_info_ = nullptr;
}
inline const ::lightsService::LightInfo& UpdateLightRequest::light_info() const {
  const ::lightsService::LightInfo* p = light_info_;
  // @@protoc_insertion_point(field_get:lightsService.UpdateLightRequest.light_info)
  return p != nullptr ? *p : *reinterpret_cast<const ::lightsService::LightInfo*>(
      &::lightsService::_LightInfo_default_instance_);
}
inline ::lightsService::LightInfo* UpdateLightRequest::release_light_info() {
  // @@protoc_insertion_point(field_release:lightsService.UpdateLightRequest.light_info)
  
  ::lightsService::LightInfo* temp = light_info_;
  light_info_ = nullptr;
  return temp;
}
inline ::lightsService::LightInfo* UpdateLightRequest::mutable_light_info() {
  
  if (light_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::lightsService::LightInfo>(GetArenaNoVirtual());
    light_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:lightsService.UpdateLightRequest.light_info)
  return light_info_;
}
inline void UpdateLightRequest::set_allocated_light_info(::lightsService::LightInfo* light_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete light_info_;
  }
  if (light_info) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      light_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, light_info, submessage_arena);
    }
    
  } else {
    
  }
  light_info_ = light_info;
  // @@protoc_insertion_point(field_set_allocated:lightsService.UpdateLightRequest.light_info)
}

// -------------------------------------------------------------------

// UpdateLightResponse

// .lightsService.LightInfo light_info = 1;
inline bool UpdateLightResponse::has_light_info() const {
  return this != internal_default_instance() && light_info_ != nullptr;
}
inline void UpdateLightResponse::clear_light_info() {
  if (GetArenaNoVirtual() == nullptr && light_info_ != nullptr) {
    delete light_info_;
  }
  light_info_ = nullptr;
}
inline const ::lightsService::LightInfo& UpdateLightResponse::light_info() const {
  const ::lightsService::LightInfo* p = light_info_;
  // @@protoc_insertion_point(field_get:lightsService.UpdateLightResponse.light_info)
  return p != nullptr ? *p : *reinterpret_cast<const ::lightsService::LightInfo*>(
      &::lightsService::_LightInfo_default_instance_);
}
inline ::lightsService::LightInfo* UpdateLightResponse::release_light_info() {
  // @@protoc_insertion_point(field_release:lightsService.UpdateLightResponse.light_info)
  
  ::lightsService::LightInfo* temp = light_info_;
  light_info_ = nullptr;
  return temp;
}
inline ::lightsService::LightInfo* UpdateLightResponse::mutable_light_info() {
  
  if (light_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::lightsService::LightInfo>(GetArenaNoVirtual());
    light_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:lightsService.UpdateLightResponse.light_info)
  return light_info_;
}
inline void UpdateLightResponse::set_allocated_light_info(::lightsService::LightInfo* light_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete light_info_;
  }
  if (light_info) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      light_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, light_info, submessage_arena);
    }
    
  } else {
    
  }
  light_info_ = light_info;
  // @@protoc_insertion_point(field_set_allocated:lightsService.UpdateLightResponse.light_info)
}

// -------------------------------------------------------------------

// DeleteLightsRequest

// repeated string lights_id = 1;
inline int DeleteLightsRequest::lights_id_size() const {
  return lights_id_.size();
}
inline void DeleteLightsRequest::clear_lights_id() {
  lights_id_.Clear();
}
inline const ::std::string& DeleteLightsRequest::lights_id(int index) const {
  // @@protoc_insertion_point(field_get:lightsService.DeleteLightsRequest.lights_id)
  return lights_id_.Get(index);
}
inline ::std::string* DeleteLightsRequest::mutable_lights_id(int index) {
  // @@protoc_insertion_point(field_mutable:lightsService.DeleteLightsRequest.lights_id)
  return lights_id_.Mutable(index);
}
inline void DeleteLightsRequest::set_lights_id(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:lightsService.DeleteLightsRequest.lights_id)
  lights_id_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void DeleteLightsRequest::set_lights_id(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:lightsService.DeleteLightsRequest.lights_id)
  lights_id_.Mutable(index)->assign(std::move(value));
}
#endif
inline void DeleteLightsRequest::set_lights_id(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  lights_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:lightsService.DeleteLightsRequest.lights_id)
}
inline void DeleteLightsRequest::set_lights_id(int index, const char* value, size_t size) {
  lights_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lightsService.DeleteLightsRequest.lights_id)
}
inline ::std::string* DeleteLightsRequest::add_lights_id() {
  // @@protoc_insertion_point(field_add_mutable:lightsService.DeleteLightsRequest.lights_id)
  return lights_id_.Add();
}
inline void DeleteLightsRequest::add_lights_id(const ::std::string& value) {
  lights_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:lightsService.DeleteLightsRequest.lights_id)
}
#if LANG_CXX11
inline void DeleteLightsRequest::add_lights_id(::std::string&& value) {
  lights_id_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:lightsService.DeleteLightsRequest.lights_id)
}
#endif
inline void DeleteLightsRequest::add_lights_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  lights_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:lightsService.DeleteLightsRequest.lights_id)
}
inline void DeleteLightsRequest::add_lights_id(const char* value, size_t size) {
  lights_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:lightsService.DeleteLightsRequest.lights_id)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
DeleteLightsRequest::lights_id() const {
  // @@protoc_insertion_point(field_list:lightsService.DeleteLightsRequest.lights_id)
  return lights_id_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
DeleteLightsRequest::mutable_lights_id() {
  // @@protoc_insertion_point(field_mutable_list:lightsService.DeleteLightsRequest.lights_id)
  return &lights_id_;
}

// -------------------------------------------------------------------

// DeleteLightsResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace lightsService

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::lightsService::LightType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lightsService::LightType>() {
  return ::lightsService::LightType_descriptor();
}
template <> struct is_proto_enum< ::lightsService::PlayMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lightsService::PlayMode>() {
  return ::lightsService::PlayMode_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_lights_2eproto
