// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: nav.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace NavService {
  public static partial class NavController
  {
    static readonly string __ServiceName = "navService.NavController";

    static readonly grpc::Marshaller<global::NavService.MoveRequest> __Marshaller_navService_MoveRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::NavService.MoveRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::NavService.MoveResponse> __Marshaller_navService_MoveResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::NavService.MoveResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::NavService.NavToRequest> __Marshaller_navService_NavToRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::NavService.NavToRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::NavService.NavToResponse> __Marshaller_navService_NavToResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::NavService.NavToResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::NavService.NavStopRequest> __Marshaller_navService_NavStopRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::NavService.NavStopRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::NavService.NavStopResponse> __Marshaller_navService_NavStopResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::NavService.NavStopResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::NavService.AutoChargeRequest> __Marshaller_navService_AutoChargeRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::NavService.AutoChargeRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::NavService.AutoChargeResponse> __Marshaller_navService_AutoChargeResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::NavService.AutoChargeResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::NavService.RotateRequest> __Marshaller_navService_RotateRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::NavService.RotateRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::NavService.RotateResponse> __Marshaller_navService_RotateResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::NavService.RotateResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::NavService.OnNavEventChangeRequest> __Marshaller_navService_OnNavEventChangeRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::NavService.OnNavEventChangeRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::NavService.OnNavEventChangeResponse> __Marshaller_navService_OnNavEventChangeResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::NavService.OnNavEventChangeResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::NavService.LocationResetRequest> __Marshaller_navService_LocationResetRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::NavService.LocationResetRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::NavService.LocationResetResponse> __Marshaller_navService_LocationResetResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::NavService.LocationResetResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::NavService.NewRouteRequest> __Marshaller_navService_NewRouteRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::NavService.NewRouteRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::NavService.NewRouteResponse> __Marshaller_navService_NewRouteResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::NavService.NewRouteResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::NavService.ListRoutesRequest> __Marshaller_navService_ListRoutesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::NavService.ListRoutesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::NavService.ListRoutesResponse> __Marshaller_navService_ListRoutesResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::NavService.ListRoutesResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::NavService.UpdateRouteRequest> __Marshaller_navService_UpdateRouteRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::NavService.UpdateRouteRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::NavService.UpdateRouteResponse> __Marshaller_navService_UpdateRouteResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::NavService.UpdateRouteResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::NavService.DeleteRoutesRequest> __Marshaller_navService_DeleteRoutesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::NavService.DeleteRoutesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::NavService.DeleteRoutesResponse> __Marshaller_navService_DeleteRoutesResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::NavService.DeleteRoutesResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::NavService.MoveRequest, global::NavService.MoveResponse> __Method_Move = new grpc::Method<global::NavService.MoveRequest, global::NavService.MoveResponse>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "Move",
        __Marshaller_navService_MoveRequest,
        __Marshaller_navService_MoveResponse);

    static readonly grpc::Method<global::NavService.NavToRequest, global::NavService.NavToResponse> __Method_NavTo = new grpc::Method<global::NavService.NavToRequest, global::NavService.NavToResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "NavTo",
        __Marshaller_navService_NavToRequest,
        __Marshaller_navService_NavToResponse);

    static readonly grpc::Method<global::NavService.NavStopRequest, global::NavService.NavStopResponse> __Method_NavStop = new grpc::Method<global::NavService.NavStopRequest, global::NavService.NavStopResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "NavStop",
        __Marshaller_navService_NavStopRequest,
        __Marshaller_navService_NavStopResponse);

    static readonly grpc::Method<global::NavService.AutoChargeRequest, global::NavService.AutoChargeResponse> __Method_AutoCharge = new grpc::Method<global::NavService.AutoChargeRequest, global::NavService.AutoChargeResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AutoCharge",
        __Marshaller_navService_AutoChargeRequest,
        __Marshaller_navService_AutoChargeResponse);

    static readonly grpc::Method<global::NavService.RotateRequest, global::NavService.RotateResponse> __Method_Rotate = new grpc::Method<global::NavService.RotateRequest, global::NavService.RotateResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Rotate",
        __Marshaller_navService_RotateRequest,
        __Marshaller_navService_RotateResponse);

    static readonly grpc::Method<global::NavService.OnNavEventChangeRequest, global::NavService.OnNavEventChangeResponse> __Method_OnNavEventChange = new grpc::Method<global::NavService.OnNavEventChangeRequest, global::NavService.OnNavEventChangeResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "OnNavEventChange",
        __Marshaller_navService_OnNavEventChangeRequest,
        __Marshaller_navService_OnNavEventChangeResponse);

    static readonly grpc::Method<global::NavService.LocationResetRequest, global::NavService.LocationResetResponse> __Method_LocationReset = new grpc::Method<global::NavService.LocationResetRequest, global::NavService.LocationResetResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "LocationReset",
        __Marshaller_navService_LocationResetRequest,
        __Marshaller_navService_LocationResetResponse);

    static readonly grpc::Method<global::NavService.NewRouteRequest, global::NavService.NewRouteResponse> __Method_NewRoute = new grpc::Method<global::NavService.NewRouteRequest, global::NavService.NewRouteResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "NewRoute",
        __Marshaller_navService_NewRouteRequest,
        __Marshaller_navService_NewRouteResponse);

    static readonly grpc::Method<global::NavService.ListRoutesRequest, global::NavService.ListRoutesResponse> __Method_ListRoutes = new grpc::Method<global::NavService.ListRoutesRequest, global::NavService.ListRoutesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListRoutes",
        __Marshaller_navService_ListRoutesRequest,
        __Marshaller_navService_ListRoutesResponse);

    static readonly grpc::Method<global::NavService.UpdateRouteRequest, global::NavService.UpdateRouteResponse> __Method_UpdateRoute = new grpc::Method<global::NavService.UpdateRouteRequest, global::NavService.UpdateRouteResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateRoute",
        __Marshaller_navService_UpdateRouteRequest,
        __Marshaller_navService_UpdateRouteResponse);

    static readonly grpc::Method<global::NavService.DeleteRoutesRequest, global::NavService.DeleteRoutesResponse> __Method_DeleteRoutes = new grpc::Method<global::NavService.DeleteRoutesRequest, global::NavService.DeleteRoutesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteRoutes",
        __Marshaller_navService_DeleteRoutesRequest,
        __Marshaller_navService_DeleteRoutesResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::NavService.NavReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of NavController</summary>
    [grpc::BindServiceMethod(typeof(NavController), "BindService")]
    public abstract partial class NavControllerBase
    {
      /// <summary>
      /// 遥控移动
      /// 当机器人处于非空闲及遥控移动状态时， 当前链接将被强制关闭, 错误描述为: "[naving|charging|rotating] reject"
      /// 当机器人处于 *其它用户* 的遥控移动状态时， *你* 将收到MoveStatusResponse状态码REJ_MOVING
      /// 当机器人处于 *你* 的遥控移动状态时, 请在500ms内持续发送遥控指令， 超时将自动停止移动
      /// 当机器人处于 *你* 的遥控移动状态时, 若5秒后无遥控指令的更新, *你* 将接收到MoveStatusResponse状态码RELEASED，
      /// 此时遥控移动控制权交由抢占的 *其它用户* 或其它类型目标的操作
      /// </summary>
      /// <param name="requestStream">Used for reading requests from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task Move(grpc::IAsyncStreamReader<global::NavService.MoveRequest> requestStream, grpc::IServerStreamWriter<global::NavService.MoveResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 导航
      /// 当机器人处理遥控移动中|充电中|旋转中时, 错误描述为: "[moving|charging|rotating] reject"
      /// 当机器人处理空闲或导航状态时, 将收到导航的目标NavTarget与导航或失败状态
      /// 使用目标导航时支持同步异步模式, 参考NavToRequest.sync_mode的参数描述
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::NavService.NavToResponse> NavTo(global::NavService.NavToRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 停止
      /// 静止: 立即返回STOPPED
      /// 旋转中: 返回旋转状态, STOPPED或CANCEL, 超时3秒
      /// 其它: 错误描述为: "[moving|charging] reject"
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::NavService.NavStopResponse> NavStop(global::NavService.NavStopRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 自动充电
      /// 当前为充电中|充电连接中: 请求类型为charge|charge_preset等待状态为CHARGE_STATUS_CHARGING|CHARGE_STATUS_CONNECTING|CHARGE_STATUS_RELEASED后返回
      /// 当前为充电中|充电连接中: 请求类型为cancel等待状态为CHARGE_STATUS_RELEASED后返回
      /// 当前为已释放: 请求类型为cancel将直接返回CHARGE_STATUS_RELEASED
      /// 当前为已释放: 请求类型为charge|charge_preset等待状态为CHARGE_STATUS_CHARGING后返回
      /// 超时错误: 发送请求后默认60秒后未收到状态更新返回错误描述, 超时时间可在AutoChargeRequest中自定义配置
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::NavService.AutoChargeResponse> AutoCharge(global::NavService.AutoChargeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 原地旋转
      /// 当旋转完成后返回STOPPED
      /// 当用户使用NavStop中止时将返回CANCEL
      /// 若超时30秒未执行完毕将返回超时错误
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::NavService.RotateResponse> Rotate(global::NavService.RotateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 导航事件监听
      /// 监听导航模块中各类事件的变动更新
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task OnNavEventChange(global::NavService.OnNavEventChangeRequest request, grpc::IServerStreamWriter<global::NavService.OnNavEventChangeResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// >=2.2.0
      /// 重置当前定位
      /// 用于发生定位异常/错误状态，重新初始化导航定位
      /// 重定位错误：定位状态超时|无地图|UWB错误
      /// 重定位超时判断: 默认3s，仅在非错误状态下重置
      /// *目前仅支持无线导航版本，磁导航版本中将直接返回成功状态
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::NavService.LocationResetResponse> LocationReset(global::NavService.LocationResetRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 新建线路
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::NavService.NewRouteResponse> NewRoute(global::NavService.NewRouteRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 获取线路
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::NavService.ListRoutesResponse> ListRoutes(global::NavService.ListRoutesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 更新线路信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::NavService.UpdateRouteResponse> UpdateRoute(global::NavService.UpdateRouteRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 删除线路
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::NavService.DeleteRoutesResponse> DeleteRoutes(global::NavService.DeleteRoutesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for NavController</summary>
    public partial class NavControllerClient : grpc::ClientBase<NavControllerClient>
    {
      /// <summary>Creates a new client for NavController</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public NavControllerClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for NavController that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public NavControllerClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected NavControllerClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected NavControllerClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// 遥控移动
      /// 当机器人处于非空闲及遥控移动状态时， 当前链接将被强制关闭, 错误描述为: "[naving|charging|rotating] reject"
      /// 当机器人处于 *其它用户* 的遥控移动状态时， *你* 将收到MoveStatusResponse状态码REJ_MOVING
      /// 当机器人处于 *你* 的遥控移动状态时, 请在500ms内持续发送遥控指令， 超时将自动停止移动
      /// 当机器人处于 *你* 的遥控移动状态时, 若5秒后无遥控指令的更新, *你* 将接收到MoveStatusResponse状态码RELEASED，
      /// 此时遥控移动控制权交由抢占的 *其它用户* 或其它类型目标的操作
      /// </summary>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncDuplexStreamingCall<global::NavService.MoveRequest, global::NavService.MoveResponse> Move(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Move(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 遥控移动
      /// 当机器人处于非空闲及遥控移动状态时， 当前链接将被强制关闭, 错误描述为: "[naving|charging|rotating] reject"
      /// 当机器人处于 *其它用户* 的遥控移动状态时， *你* 将收到MoveStatusResponse状态码REJ_MOVING
      /// 当机器人处于 *你* 的遥控移动状态时, 请在500ms内持续发送遥控指令， 超时将自动停止移动
      /// 当机器人处于 *你* 的遥控移动状态时, 若5秒后无遥控指令的更新, *你* 将接收到MoveStatusResponse状态码RELEASED，
      /// 此时遥控移动控制权交由抢占的 *其它用户* 或其它类型目标的操作
      /// </summary>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncDuplexStreamingCall<global::NavService.MoveRequest, global::NavService.MoveResponse> Move(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_Move, null, options);
      }
      /// <summary>
      /// 导航
      /// 当机器人处理遥控移动中|充电中|旋转中时, 错误描述为: "[moving|charging|rotating] reject"
      /// 当机器人处理空闲或导航状态时, 将收到导航的目标NavTarget与导航或失败状态
      /// 使用目标导航时支持同步异步模式, 参考NavToRequest.sync_mode的参数描述
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::NavService.NavToResponse NavTo(global::NavService.NavToRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return NavTo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 导航
      /// 当机器人处理遥控移动中|充电中|旋转中时, 错误描述为: "[moving|charging|rotating] reject"
      /// 当机器人处理空闲或导航状态时, 将收到导航的目标NavTarget与导航或失败状态
      /// 使用目标导航时支持同步异步模式, 参考NavToRequest.sync_mode的参数描述
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::NavService.NavToResponse NavTo(global::NavService.NavToRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_NavTo, null, options, request);
      }
      /// <summary>
      /// 导航
      /// 当机器人处理遥控移动中|充电中|旋转中时, 错误描述为: "[moving|charging|rotating] reject"
      /// 当机器人处理空闲或导航状态时, 将收到导航的目标NavTarget与导航或失败状态
      /// 使用目标导航时支持同步异步模式, 参考NavToRequest.sync_mode的参数描述
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::NavService.NavToResponse> NavToAsync(global::NavService.NavToRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return NavToAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 导航
      /// 当机器人处理遥控移动中|充电中|旋转中时, 错误描述为: "[moving|charging|rotating] reject"
      /// 当机器人处理空闲或导航状态时, 将收到导航的目标NavTarget与导航或失败状态
      /// 使用目标导航时支持同步异步模式, 参考NavToRequest.sync_mode的参数描述
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::NavService.NavToResponse> NavToAsync(global::NavService.NavToRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_NavTo, null, options, request);
      }
      /// <summary>
      /// 停止
      /// 静止: 立即返回STOPPED
      /// 旋转中: 返回旋转状态, STOPPED或CANCEL, 超时3秒
      /// 其它: 错误描述为: "[moving|charging] reject"
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::NavService.NavStopResponse NavStop(global::NavService.NavStopRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return NavStop(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 停止
      /// 静止: 立即返回STOPPED
      /// 旋转中: 返回旋转状态, STOPPED或CANCEL, 超时3秒
      /// 其它: 错误描述为: "[moving|charging] reject"
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::NavService.NavStopResponse NavStop(global::NavService.NavStopRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_NavStop, null, options, request);
      }
      /// <summary>
      /// 停止
      /// 静止: 立即返回STOPPED
      /// 旋转中: 返回旋转状态, STOPPED或CANCEL, 超时3秒
      /// 其它: 错误描述为: "[moving|charging] reject"
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::NavService.NavStopResponse> NavStopAsync(global::NavService.NavStopRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return NavStopAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 停止
      /// 静止: 立即返回STOPPED
      /// 旋转中: 返回旋转状态, STOPPED或CANCEL, 超时3秒
      /// 其它: 错误描述为: "[moving|charging] reject"
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::NavService.NavStopResponse> NavStopAsync(global::NavService.NavStopRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_NavStop, null, options, request);
      }
      /// <summary>
      /// 自动充电
      /// 当前为充电中|充电连接中: 请求类型为charge|charge_preset等待状态为CHARGE_STATUS_CHARGING|CHARGE_STATUS_CONNECTING|CHARGE_STATUS_RELEASED后返回
      /// 当前为充电中|充电连接中: 请求类型为cancel等待状态为CHARGE_STATUS_RELEASED后返回
      /// 当前为已释放: 请求类型为cancel将直接返回CHARGE_STATUS_RELEASED
      /// 当前为已释放: 请求类型为charge|charge_preset等待状态为CHARGE_STATUS_CHARGING后返回
      /// 超时错误: 发送请求后默认60秒后未收到状态更新返回错误描述, 超时时间可在AutoChargeRequest中自定义配置
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::NavService.AutoChargeResponse AutoCharge(global::NavService.AutoChargeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AutoCharge(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 自动充电
      /// 当前为充电中|充电连接中: 请求类型为charge|charge_preset等待状态为CHARGE_STATUS_CHARGING|CHARGE_STATUS_CONNECTING|CHARGE_STATUS_RELEASED后返回
      /// 当前为充电中|充电连接中: 请求类型为cancel等待状态为CHARGE_STATUS_RELEASED后返回
      /// 当前为已释放: 请求类型为cancel将直接返回CHARGE_STATUS_RELEASED
      /// 当前为已释放: 请求类型为charge|charge_preset等待状态为CHARGE_STATUS_CHARGING后返回
      /// 超时错误: 发送请求后默认60秒后未收到状态更新返回错误描述, 超时时间可在AutoChargeRequest中自定义配置
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::NavService.AutoChargeResponse AutoCharge(global::NavService.AutoChargeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AutoCharge, null, options, request);
      }
      /// <summary>
      /// 自动充电
      /// 当前为充电中|充电连接中: 请求类型为charge|charge_preset等待状态为CHARGE_STATUS_CHARGING|CHARGE_STATUS_CONNECTING|CHARGE_STATUS_RELEASED后返回
      /// 当前为充电中|充电连接中: 请求类型为cancel等待状态为CHARGE_STATUS_RELEASED后返回
      /// 当前为已释放: 请求类型为cancel将直接返回CHARGE_STATUS_RELEASED
      /// 当前为已释放: 请求类型为charge|charge_preset等待状态为CHARGE_STATUS_CHARGING后返回
      /// 超时错误: 发送请求后默认60秒后未收到状态更新返回错误描述, 超时时间可在AutoChargeRequest中自定义配置
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::NavService.AutoChargeResponse> AutoChargeAsync(global::NavService.AutoChargeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AutoChargeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 自动充电
      /// 当前为充电中|充电连接中: 请求类型为charge|charge_preset等待状态为CHARGE_STATUS_CHARGING|CHARGE_STATUS_CONNECTING|CHARGE_STATUS_RELEASED后返回
      /// 当前为充电中|充电连接中: 请求类型为cancel等待状态为CHARGE_STATUS_RELEASED后返回
      /// 当前为已释放: 请求类型为cancel将直接返回CHARGE_STATUS_RELEASED
      /// 当前为已释放: 请求类型为charge|charge_preset等待状态为CHARGE_STATUS_CHARGING后返回
      /// 超时错误: 发送请求后默认60秒后未收到状态更新返回错误描述, 超时时间可在AutoChargeRequest中自定义配置
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::NavService.AutoChargeResponse> AutoChargeAsync(global::NavService.AutoChargeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AutoCharge, null, options, request);
      }
      /// <summary>
      /// 原地旋转
      /// 当旋转完成后返回STOPPED
      /// 当用户使用NavStop中止时将返回CANCEL
      /// 若超时30秒未执行完毕将返回超时错误
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::NavService.RotateResponse Rotate(global::NavService.RotateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Rotate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 原地旋转
      /// 当旋转完成后返回STOPPED
      /// 当用户使用NavStop中止时将返回CANCEL
      /// 若超时30秒未执行完毕将返回超时错误
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::NavService.RotateResponse Rotate(global::NavService.RotateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Rotate, null, options, request);
      }
      /// <summary>
      /// 原地旋转
      /// 当旋转完成后返回STOPPED
      /// 当用户使用NavStop中止时将返回CANCEL
      /// 若超时30秒未执行完毕将返回超时错误
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::NavService.RotateResponse> RotateAsync(global::NavService.RotateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RotateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 原地旋转
      /// 当旋转完成后返回STOPPED
      /// 当用户使用NavStop中止时将返回CANCEL
      /// 若超时30秒未执行完毕将返回超时错误
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::NavService.RotateResponse> RotateAsync(global::NavService.RotateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Rotate, null, options, request);
      }
      /// <summary>
      /// 导航事件监听
      /// 监听导航模块中各类事件的变动更新
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::NavService.OnNavEventChangeResponse> OnNavEventChange(global::NavService.OnNavEventChangeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return OnNavEventChange(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 导航事件监听
      /// 监听导航模块中各类事件的变动更新
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::NavService.OnNavEventChangeResponse> OnNavEventChange(global::NavService.OnNavEventChangeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_OnNavEventChange, null, options, request);
      }
      /// <summary>
      /// >=2.2.0
      /// 重置当前定位
      /// 用于发生定位异常/错误状态，重新初始化导航定位
      /// 重定位错误：定位状态超时|无地图|UWB错误
      /// 重定位超时判断: 默认3s，仅在非错误状态下重置
      /// *目前仅支持无线导航版本，磁导航版本中将直接返回成功状态
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::NavService.LocationResetResponse LocationReset(global::NavService.LocationResetRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LocationReset(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// >=2.2.0
      /// 重置当前定位
      /// 用于发生定位异常/错误状态，重新初始化导航定位
      /// 重定位错误：定位状态超时|无地图|UWB错误
      /// 重定位超时判断: 默认3s，仅在非错误状态下重置
      /// *目前仅支持无线导航版本，磁导航版本中将直接返回成功状态
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::NavService.LocationResetResponse LocationReset(global::NavService.LocationResetRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_LocationReset, null, options, request);
      }
      /// <summary>
      /// >=2.2.0
      /// 重置当前定位
      /// 用于发生定位异常/错误状态，重新初始化导航定位
      /// 重定位错误：定位状态超时|无地图|UWB错误
      /// 重定位超时判断: 默认3s，仅在非错误状态下重置
      /// *目前仅支持无线导航版本，磁导航版本中将直接返回成功状态
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::NavService.LocationResetResponse> LocationResetAsync(global::NavService.LocationResetRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LocationResetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// >=2.2.0
      /// 重置当前定位
      /// 用于发生定位异常/错误状态，重新初始化导航定位
      /// 重定位错误：定位状态超时|无地图|UWB错误
      /// 重定位超时判断: 默认3s，仅在非错误状态下重置
      /// *目前仅支持无线导航版本，磁导航版本中将直接返回成功状态
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::NavService.LocationResetResponse> LocationResetAsync(global::NavService.LocationResetRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_LocationReset, null, options, request);
      }
      /// <summary>
      /// 新建线路
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::NavService.NewRouteResponse NewRoute(global::NavService.NewRouteRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return NewRoute(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 新建线路
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::NavService.NewRouteResponse NewRoute(global::NavService.NewRouteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_NewRoute, null, options, request);
      }
      /// <summary>
      /// 新建线路
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::NavService.NewRouteResponse> NewRouteAsync(global::NavService.NewRouteRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return NewRouteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 新建线路
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::NavService.NewRouteResponse> NewRouteAsync(global::NavService.NewRouteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_NewRoute, null, options, request);
      }
      /// <summary>
      /// 获取线路
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::NavService.ListRoutesResponse ListRoutes(global::NavService.ListRoutesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListRoutes(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 获取线路
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::NavService.ListRoutesResponse ListRoutes(global::NavService.ListRoutesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListRoutes, null, options, request);
      }
      /// <summary>
      /// 获取线路
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::NavService.ListRoutesResponse> ListRoutesAsync(global::NavService.ListRoutesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListRoutesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 获取线路
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::NavService.ListRoutesResponse> ListRoutesAsync(global::NavService.ListRoutesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListRoutes, null, options, request);
      }
      /// <summary>
      /// 更新线路信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::NavService.UpdateRouteResponse UpdateRoute(global::NavService.UpdateRouteRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateRoute(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 更新线路信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::NavService.UpdateRouteResponse UpdateRoute(global::NavService.UpdateRouteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateRoute, null, options, request);
      }
      /// <summary>
      /// 更新线路信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::NavService.UpdateRouteResponse> UpdateRouteAsync(global::NavService.UpdateRouteRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateRouteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 更新线路信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::NavService.UpdateRouteResponse> UpdateRouteAsync(global::NavService.UpdateRouteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateRoute, null, options, request);
      }
      /// <summary>
      /// 删除线路
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::NavService.DeleteRoutesResponse DeleteRoutes(global::NavService.DeleteRoutesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteRoutes(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 删除线路
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::NavService.DeleteRoutesResponse DeleteRoutes(global::NavService.DeleteRoutesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteRoutes, null, options, request);
      }
      /// <summary>
      /// 删除线路
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::NavService.DeleteRoutesResponse> DeleteRoutesAsync(global::NavService.DeleteRoutesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteRoutesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 删除线路
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::NavService.DeleteRoutesResponse> DeleteRoutesAsync(global::NavService.DeleteRoutesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteRoutes, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override NavControllerClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new NavControllerClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(NavControllerBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Move, serviceImpl.Move)
          .AddMethod(__Method_NavTo, serviceImpl.NavTo)
          .AddMethod(__Method_NavStop, serviceImpl.NavStop)
          .AddMethod(__Method_AutoCharge, serviceImpl.AutoCharge)
          .AddMethod(__Method_Rotate, serviceImpl.Rotate)
          .AddMethod(__Method_OnNavEventChange, serviceImpl.OnNavEventChange)
          .AddMethod(__Method_LocationReset, serviceImpl.LocationReset)
          .AddMethod(__Method_NewRoute, serviceImpl.NewRoute)
          .AddMethod(__Method_ListRoutes, serviceImpl.ListRoutes)
          .AddMethod(__Method_UpdateRoute, serviceImpl.UpdateRoute)
          .AddMethod(__Method_DeleteRoutes, serviceImpl.DeleteRoutes).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, NavControllerBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Move, serviceImpl == null ? null : new grpc::DuplexStreamingServerMethod<global::NavService.MoveRequest, global::NavService.MoveResponse>(serviceImpl.Move));
      serviceBinder.AddMethod(__Method_NavTo, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::NavService.NavToRequest, global::NavService.NavToResponse>(serviceImpl.NavTo));
      serviceBinder.AddMethod(__Method_NavStop, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::NavService.NavStopRequest, global::NavService.NavStopResponse>(serviceImpl.NavStop));
      serviceBinder.AddMethod(__Method_AutoCharge, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::NavService.AutoChargeRequest, global::NavService.AutoChargeResponse>(serviceImpl.AutoCharge));
      serviceBinder.AddMethod(__Method_Rotate, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::NavService.RotateRequest, global::NavService.RotateResponse>(serviceImpl.Rotate));
      serviceBinder.AddMethod(__Method_OnNavEventChange, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::NavService.OnNavEventChangeRequest, global::NavService.OnNavEventChangeResponse>(serviceImpl.OnNavEventChange));
      serviceBinder.AddMethod(__Method_LocationReset, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::NavService.LocationResetRequest, global::NavService.LocationResetResponse>(serviceImpl.LocationReset));
      serviceBinder.AddMethod(__Method_NewRoute, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::NavService.NewRouteRequest, global::NavService.NewRouteResponse>(serviceImpl.NewRoute));
      serviceBinder.AddMethod(__Method_ListRoutes, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::NavService.ListRoutesRequest, global::NavService.ListRoutesResponse>(serviceImpl.ListRoutes));
      serviceBinder.AddMethod(__Method_UpdateRoute, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::NavService.UpdateRouteRequest, global::NavService.UpdateRouteResponse>(serviceImpl.UpdateRoute));
      serviceBinder.AddMethod(__Method_DeleteRoutes, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::NavService.DeleteRoutesRequest, global::NavService.DeleteRoutesResponse>(serviceImpl.DeleteRoutes));
    }

  }
}
#endregion
