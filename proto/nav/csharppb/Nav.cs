// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: nav.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace NavService {

  /// <summary>Holder for reflection information generated from nav.proto</summary>
  public static partial class NavReflection {

    #region Descriptor
    /// <summary>File descriptor for nav.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static NavReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgluYXYucHJvdG8SCm5hdlNlcnZpY2UaHGdvb2dsZS9hcGkvYW5ub3RhdGlv",
            "bnMucHJvdG8iaAoLTW92ZVJlcXVlc3QSDQoFc3BlZWQYASABKA0SDgoGcnNw",
            "ZWVkGAIgASgNEiwKCWRpcmVjdGlvbhgDIAEoDjIZLm5hdlNlcnZpY2UuTW92",
            "ZURpcmVjdGlvbhIMCgRtb2RlGAQgASgJIjsKDE1vdmVSZXNwb25zZRIrCgtz",
            "dGF0dXNfY29kZRgBIAEoDjIWLm5hdlNlcnZpY2UuU3RhdHVzQ29kZSIoCglO",
            "YXZUYXJnZXQSDQoFaW5kZXgYASABKAkSDAoEbmFtZRgCIAEoCSKFAQoKTmF2",
            "Um9hbWluZxIxChBuYXZfcm9hbWluZ190eXBlGAEgASgOMhcubmF2U2Vydmlj",
            "ZS5Sb2FtaW5nVHlwZRIQCgh3YWl0X3NlYxgCIAEoBRIeChZyb2FtaW5nX3Rh",
            "cmdldF9pbmRleGVzGAMgAygJEhIKCm9yZGVyX2xvb3AYBCABKAgilAEKDE5h",
            "dlRvUmVxdWVzdBInCgZ0YXJnZXQYASABKAsyFS5uYXZTZXJ2aWNlLk5hdlRh",
            "cmdldEgAEikKB3JvYW1pbmcYAyABKAsyFi5uYXZTZXJ2aWNlLk5hdlJvYW1p",
            "bmdIABINCgVzcGVlZBgCIAEoDRIRCglzeW5jX21vZGUYBCABKAhCDgoMdGFy",
            "Z2V0X29uZW9mIosBCg1OYXZUb1Jlc3BvbnNlEisKC3N0YXR1c19jb2RlGAEg",
            "ASgOMhYubmF2U2VydmljZS5TdGF0dXNDb2RlEicKBnRhcmdldBgCIAEoCzIV",
            "Lm5hdlNlcnZpY2UuTmF2VGFyZ2V0SAASFAoKaXNfcm9hbWluZxgDIAEoCEgA",
            "Qg4KDHRhcmdldF9vbmVvZiIQCg5OYXZTdG9wUmVxdWVzdCI+Cg9OYXZTdG9w",
            "UmVzcG9uc2USKwoLc3RhdHVzX2NvZGUYASABKA4yFi5uYXZTZXJ2aWNlLlN0",
            "YXR1c0NvZGUifAoRQXV0b0NoYXJnZVJlcXVlc3QSEAoGY2hhcmdlGAEgASgI",
            "SAASEAoGY2FuY2VsGAIgASgISAASFwoNY2hhcmdlX3ByZXNldBgDIAEoCEgA",
            "EhMKC3RpbWVvdXRfc2VjGAQgASgNQhUKE2NoYXJnZV9vcHRpb25fb25lb2Yi",
            "TgoSQXV0b0NoYXJnZVJlc3BvbnNlEjgKEmNoYXJnZV9zdGF0dXNfY29kZRgB",
            "IAEoDjIcLm5hdlNlcnZpY2UuQ2hhcmdlU3RhdHVzQ29kZSJECg1Sb3RhdGVS",
            "ZXF1ZXN0Eg8KBWFuZ2xlGAEgASgFSAASEgoIcm9sbGJhY2sYAiABKAhIAEIO",
            "Cgxyb3RhdGVfb25lb2YiPQoOUm90YXRlUmVzcG9uc2USKwoLc3RhdHVzX2Nv",
            "ZGUYASABKA4yFi5uYXZTZXJ2aWNlLlN0YXR1c0NvZGUiGQoXT25OYXZFdmVu",
            "dENoYW5nZVJlcXVlc3QiOAoJTW92ZUV2ZW50EisKC3N0YXR1c19jb2RlGAEg",
            "ASgOMhYubmF2U2VydmljZS5TdGF0dXNDb2RlImIKCE5hdkV2ZW50EisKC3N0",
            "YXR1c19jb2RlGAEgASgOMhYubmF2U2VydmljZS5TdGF0dXNDb2RlEikKCm5h",
            "dl90YXJnZXQYAiABKAsyFS5uYXZTZXJ2aWNlLk5hdlRhcmdldCJLCg9BdXRv",
            "Q2hhcmdlRXZlbnQSOAoSY2hhcmdlX3N0YXR1c19jb2RlGAEgASgOMhwubmF2",
            "U2VydmljZS5DaGFyZ2VTdGF0dXNDb2RlIjoKC1JvdGF0ZUV2ZW50EisKC3N0",
            "YXR1c19jb2RlGAEgASgOMhYubmF2U2VydmljZS5TdGF0dXNDb2RlIp8CChhP",
            "bk5hdkV2ZW50Q2hhbmdlUmVzcG9uc2USMAoObmF2X2V2ZW50X3R5cGUYASAB",
            "KA4yGC5uYXZTZXJ2aWNlLk5hdkV2ZW50VHlwZRIrCgptb3ZlX2V2ZW50GAIg",
            "ASgLMhUubmF2U2VydmljZS5Nb3ZlRXZlbnRIABIpCgluYXZfZXZlbnQYAyAB",
            "KAsyFC5uYXZTZXJ2aWNlLk5hdkV2ZW50SAASLwoMcm90YXRlX2V2ZW50GAQg",
            "ASgLMhcubmF2U2VydmljZS5Sb3RhdGVFdmVudEgAEjgKEWF1dG9fY2hhcmdl",
            "X2V2ZW50GAUgASgLMhsubmF2U2VydmljZS5BdXRvQ2hhcmdlRXZlbnRIAEIO",
            "CgxjaGFuZ2Vfb25lb2YiFgoUTG9jYXRpb25SZXNldFJlcXVlc3QiFwoVTG9j",
            "YXRpb25SZXNldFJlc3BvbnNlImIKBVJvdXRlEgoKAmlkGAEgASgJEgwKBG5h",
            "bWUYAiABKAkSEQoJaXNfYWN0aXZlGAMgASgIEiwKDHJvdXRlX3BvaW50cxgE",
            "IAMoCzIWLm5hdlNlcnZpY2UuUm91dGVQb2ludCIqCgpSb3V0ZVBvaW50EgwK",
            "BG5hbWUYASABKAkSDgoGcm90YXRlGAIgASgNIjMKD05ld1JvdXRlUmVxdWVz",
            "dBIgCgVyb3V0ZRgBIAEoCzIRLm5hdlNlcnZpY2UuUm91dGUiNAoQTmV3Um91",
            "dGVSZXNwb25zZRIgCgVyb3V0ZRgBIAEoCzIRLm5hdlNlcnZpY2UuUm91dGUi",
            "EwoRTGlzdFJvdXRlc1JlcXVlc3QiNwoSTGlzdFJvdXRlc1Jlc3BvbnNlEiEK",
            "BnJvdXRlcxgBIAMoCzIRLm5hdlNlcnZpY2UuUm91dGUiHQoPR2V0Um91dGVS",
            "ZXF1ZXN0EgoKAmlkGAEgASgJIjQKEEdldFJvdXRlUmVzcG9uc2USIAoFcm91",
            "dGUYASABKAsyES5uYXZTZXJ2aWNlLlJvdXRlIjYKElVwZGF0ZVJvdXRlUmVx",
            "dWVzdBIgCgVyb3V0ZRgBIAEoCzIRLm5hdlNlcnZpY2UuUm91dGUiNwoTVXBk",
            "YXRlUm91dGVSZXNwb25zZRIgCgVyb3V0ZRgBIAEoCzIRLm5hdlNlcnZpY2Uu",
            "Um91dGUiKAoTRGVsZXRlUm91dGVzUmVxdWVzdBIRCglyb3V0ZXNfaWQYASAD",
            "KAkiFgoURGVsZXRlUm91dGVzUmVzcG9uc2Uq7gEKClN0YXR1c0NvZGUSCwoH",
            "VU5LTk9XThAAEgsKB1NUT1BQRUQQARIKCgZNT1ZJTkcQAhINCglQUkVQQVJJ",
            "TkcQAxIKCgZDQU5DRUwQBBIMCghSRUxFQVNFRBAFEhAKDEVSUl9PQlNUQUNM",
            "RRAKEhEKDUVSUl9OT1RfUkVBRFkQCxISCg5FUlJfTU9UT1JfRkFJTBAMEhQK",
            "EEVSUl9XUk9OR19UQVJHRVQQDRIOCgpSRUpfTU9WSU5HEBQSDgoKUkVKX05B",
            "VklORxAVEhAKDFJFSl9DSEFSR0lORxAWEhAKDFJFSl9ST1RBVElORxAXKpgB",
            "Cg1Nb3ZlRGlyZWN0aW9uEgsKB1JFTEVBU0UQABILCgdGT1JXQVJEEAESDAoI",
            "QkFDS1dBUkQQAhIICgRMRUZUEAMSCQoFUklHSFQQBBIQCgxMRUZUX0ZPUldB",
            "UkQQBRIRCg1SSUdIVF9GT1JXQVJEEAYSEQoNTEVGVF9CQUNLV0FSRBAHEhIK",
            "DlJJR0hUX0JBQ0tXQVJEEAgqWQoLUm9hbWluZ1R5cGUSGQoVUk9BTUlOR19U",
            "WVBFX0NPTlRJTlVFEAASFgoSUk9BTUlOR19UWVBFX09SREVSEAESFwoTUk9B",
            "TUlOR19UWVBFX1JBTkRPTRACKvoBChBDaGFyZ2VTdGF0dXNDb2RlEhkKFUNI",
            "QVJHRV9TVEFUVVNfVU5LTk9XThAAEhsKF0NIQVJHRV9TVEFUVVNfUFJFUEFS",
            "SU5HEAESGgoWQ0hBUkdFX1NUQVRVU19SRUxFQVNFRBACEhwKGENIQVJHRV9T",
            "VEFUVVNfQ09OTkVDVElORxADEhoKFkNIQVJHRV9TVEFUVVNfQ0hBUkdJTkcQ",
            "BBIfChtDSEFSR0VfU1RBVFVTX0RJU0NPTk5FQ1RJTkcQBRIXChNDSEFSR0Vf",
            "Q09OTkVDVF9GQUlMEAYSHgoaQ0hBUkdFX1NUQVRVU19OQVZfT0JTVEFDTEUQ",
            "BypuCgxOYXZFdmVudFR5cGUSFgoSTkFWX0VWRU5UX1JFVkVSU0VEEAASDgoK",
            "TU9WRV9FVkVOVBABEg0KCU5BVl9FVkVOVBACEhUKEUFVVE9fQ0hBUkdFX0VW",
            "RU5UEAMSEAoMUk9UQVRFX0VWRU5UEAQytgkKDU5hdkNvbnRyb2xsZXISPwoE",
            "TW92ZRIXLm5hdlNlcnZpY2UuTW92ZVJlcXVlc3QaGC5uYXZTZXJ2aWNlLk1v",
            "dmVSZXNwb25zZSIAKAEwARJbCgVOYXZUbxIYLm5hdlNlcnZpY2UuTmF2VG9S",
            "ZXF1ZXN0GhkubmF2U2VydmljZS5OYXZUb1Jlc3BvbnNlIh2C0+STAhciEi9h",
            "cGkvdjIvbmF2L25hdl90bzoBKhJjCgdOYXZTdG9wEhoubmF2U2VydmljZS5O",
            "YXZTdG9wUmVxdWVzdBobLm5hdlNlcnZpY2UuTmF2U3RvcFJlc3BvbnNlIh+C",
            "0+STAhkiFC9hcGkvdjIvbmF2L25hdl9zdG9wOgEqEm8KCkF1dG9DaGFyZ2US",
            "HS5uYXZTZXJ2aWNlLkF1dG9DaGFyZ2VSZXF1ZXN0Gh4ubmF2U2VydmljZS5B",
            "dXRvQ2hhcmdlUmVzcG9uc2UiIoLT5JMCHCIXL2FwaS92Mi9uYXYvYXV0b19j",
            "aGFyZ2U6ASoSXgoGUm90YXRlEhkubmF2U2VydmljZS5Sb3RhdGVSZXF1ZXN0",
            "GhoubmF2U2VydmljZS5Sb3RhdGVSZXNwb25zZSIdgtPkkwIXIhIvYXBpL3Yy",
            "L25hdi9yb3RhdGU6ASoSiwEKEE9uTmF2RXZlbnRDaGFuZ2USIy5uYXZTZXJ2",
            "aWNlLk9uTmF2RXZlbnRDaGFuZ2VSZXF1ZXN0GiQubmF2U2VydmljZS5Pbk5h",
            "dkV2ZW50Q2hhbmdlUmVzcG9uc2UiKoLT5JMCJCIfL2FwaS92Mi9uYXYvb25f",
            "bmF2X2V2ZW50X2NoYW5nZToBKjABEnsKDUxvY2F0aW9uUmVzZXQSIC5uYXZT",
            "ZXJ2aWNlLkxvY2F0aW9uUmVzZXRSZXF1ZXN0GiEubmF2U2VydmljZS5Mb2Nh",
            "dGlvblJlc2V0UmVzcG9uc2UiJYLT5JMCHyIaL2FwaS92Mi9uYXYvbG9jYXRp",
            "b25fcmVzZXQ6ASoSZwoITmV3Um91dGUSGy5uYXZTZXJ2aWNlLk5ld1JvdXRl",
            "UmVxdWVzdBocLm5hdlNlcnZpY2UuTmV3Um91dGVSZXNwb25zZSIggtPkkwIa",
            "IhUvYXBpL3YyL25hdi9uZXdfcm91dGU6ASoSbwoKTGlzdFJvdXRlcxIdLm5h",
            "dlNlcnZpY2UuTGlzdFJvdXRlc1JlcXVlc3QaHi5uYXZTZXJ2aWNlLkxpc3RS",
            "b3V0ZXNSZXNwb25zZSIigtPkkwIcIhcvYXBpL3YyL25hdi9saXN0X3JvdXRl",
            "czoBKhJzCgtVcGRhdGVSb3V0ZRIeLm5hdlNlcnZpY2UuVXBkYXRlUm91dGVS",
            "ZXF1ZXN0Gh8ubmF2U2VydmljZS5VcGRhdGVSb3V0ZVJlc3BvbnNlIiOC0+ST",
            "Ah0iGC9hcGkvdjIvbmF2L3VwZGF0ZV9yb3V0ZToBKhJ3CgxEZWxldGVSb3V0",
            "ZXMSHy5uYXZTZXJ2aWNlLkRlbGV0ZVJvdXRlc1JlcXVlc3QaIC5uYXZTZXJ2",
            "aWNlLkRlbGV0ZVJvdXRlc1Jlc3BvbnNlIiSC0+STAh4iGS9hcGkvdjIvbmF2",
            "L2RlbGV0ZV9yb3V0ZXM6ASpiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Api.AnnotationsReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::NavService.StatusCode), typeof(global::NavService.MoveDirection), typeof(global::NavService.RoamingType), typeof(global::NavService.ChargeStatusCode), typeof(global::NavService.NavEventType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::NavService.MoveRequest), global::NavService.MoveRequest.Parser, new[]{ "Speed", "Rspeed", "Direction", "Mode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NavService.MoveResponse), global::NavService.MoveResponse.Parser, new[]{ "StatusCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NavService.NavTarget), global::NavService.NavTarget.Parser, new[]{ "Index", "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NavService.NavRoaming), global::NavService.NavRoaming.Parser, new[]{ "NavRoamingType", "WaitSec", "RoamingTargetIndexes", "OrderLoop" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NavService.NavToRequest), global::NavService.NavToRequest.Parser, new[]{ "Target", "Roaming", "Speed", "SyncMode" }, new[]{ "TargetOneof" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NavService.NavToResponse), global::NavService.NavToResponse.Parser, new[]{ "StatusCode", "Target", "IsRoaming" }, new[]{ "TargetOneof" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NavService.NavStopRequest), global::NavService.NavStopRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NavService.NavStopResponse), global::NavService.NavStopResponse.Parser, new[]{ "StatusCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NavService.AutoChargeRequest), global::NavService.AutoChargeRequest.Parser, new[]{ "Charge", "Cancel", "ChargePreset", "TimeoutSec" }, new[]{ "ChargeOptionOneof" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NavService.AutoChargeResponse), global::NavService.AutoChargeResponse.Parser, new[]{ "ChargeStatusCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NavService.RotateRequest), global::NavService.RotateRequest.Parser, new[]{ "Angle", "Rollback" }, new[]{ "RotateOneof" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NavService.RotateResponse), global::NavService.RotateResponse.Parser, new[]{ "StatusCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NavService.OnNavEventChangeRequest), global::NavService.OnNavEventChangeRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NavService.MoveEvent), global::NavService.MoveEvent.Parser, new[]{ "StatusCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NavService.NavEvent), global::NavService.NavEvent.Parser, new[]{ "StatusCode", "NavTarget" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NavService.AutoChargeEvent), global::NavService.AutoChargeEvent.Parser, new[]{ "ChargeStatusCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NavService.RotateEvent), global::NavService.RotateEvent.Parser, new[]{ "StatusCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NavService.OnNavEventChangeResponse), global::NavService.OnNavEventChangeResponse.Parser, new[]{ "NavEventType", "MoveEvent", "NavEvent", "RotateEvent", "AutoChargeEvent" }, new[]{ "ChangeOneof" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NavService.LocationResetRequest), global::NavService.LocationResetRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NavService.LocationResetResponse), global::NavService.LocationResetResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NavService.Route), global::NavService.Route.Parser, new[]{ "Id", "Name", "IsActive", "RoutePoints" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NavService.RoutePoint), global::NavService.RoutePoint.Parser, new[]{ "Name", "Rotate" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NavService.NewRouteRequest), global::NavService.NewRouteRequest.Parser, new[]{ "Route" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NavService.NewRouteResponse), global::NavService.NewRouteResponse.Parser, new[]{ "Route" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NavService.ListRoutesRequest), global::NavService.ListRoutesRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NavService.ListRoutesResponse), global::NavService.ListRoutesResponse.Parser, new[]{ "Routes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NavService.GetRouteRequest), global::NavService.GetRouteRequest.Parser, new[]{ "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NavService.GetRouteResponse), global::NavService.GetRouteResponse.Parser, new[]{ "Route" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NavService.UpdateRouteRequest), global::NavService.UpdateRouteRequest.Parser, new[]{ "Route" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NavService.UpdateRouteResponse), global::NavService.UpdateRouteResponse.Parser, new[]{ "Route" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NavService.DeleteRoutesRequest), global::NavService.DeleteRoutesRequest.Parser, new[]{ "RoutesId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NavService.DeleteRoutesResponse), global::NavService.DeleteRoutesResponse.Parser, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum StatusCode {
    /// <summary>
    /// 状态零值, 不使用
    /// </summary>
    [pbr::OriginalName("UNKNOWN")] Unknown = 0,
    /// <summary>
    /// 停止状态
    /// 遥控移动状态: 已停止
    /// 导航状态: 导航结束
    /// 旋转状态: 旋转结束
    /// </summary>
    [pbr::OriginalName("STOPPED")] Stopped = 1,
    /// <summary>
    /// 移动中状态
    /// 遥控移动状态: 遥控移动中
    /// 导航状态: 导航移动中
    /// 旋转状态: 旋转中
    /// </summary>
    [pbr::OriginalName("MOVING")] Moving = 2,
    /// <summary>
    /// 准备状态
    /// 导航状态: 导航准备中
    /// 旋转状态: 旋转准备中
    /// </summary>
    [pbr::OriginalName("PREPARING")] Preparing = 3,
    /// <summary>
    /// 用户取消状态
    /// 导航状态: 导航被中止
    /// 旋转状态: 旋转被中止
    /// </summary>
    [pbr::OriginalName("CANCEL")] Cancel = 4,
    /// <summary>
    /// 遥控控制权释放状态
    /// 遥控移动状态: 遥控权限超时释放,
    /// 其它遥控端可接管遥控控制权,
    /// 其它类型操作可接管
    /// </summary>
    [pbr::OriginalName("RELEASED")] Released = 5,
    /// <summary>
    /// 遇到障碍物
    /// 遥控移动状态: 遥控移动遇到障碍物
    /// 导航状态: 导航过程中遇到障碍(自动导航方式支持自动避障)
    /// </summary>
    [pbr::OriginalName("ERR_OBSTACLE")] ErrObstacle = 10,
    /// <summary>
    /// 未就绪状态
    /// </summary>
    [pbr::OriginalName("ERR_NOT_READY")] ErrNotReady = 11,
    /// <summary>
    /// 电机错误
    /// </summary>
    [pbr::OriginalName("ERR_MOTOR_FAIL")] ErrMotorFail = 12,
    /// <summary>
    /// 导航目标错误
    /// </summary>
    [pbr::OriginalName("ERR_WRONG_TARGET")] ErrWrongTarget = 13,
    /// <summary>
    /// 操作被拒绝， 当前遥控移动中
    /// </summary>
    [pbr::OriginalName("REJ_MOVING")] RejMoving = 20,
    /// <summary>
    /// 操作被拒绝， 当前导航中
    /// </summary>
    [pbr::OriginalName("REJ_NAVING")] RejNaving = 21,
    /// <summary>
    /// 操作被拒绝， 当前充电中
    /// </summary>
    [pbr::OriginalName("REJ_CHARGING")] RejCharging = 22,
    /// <summary>
    /// 操作被拒绝， 当前旋转中
    /// </summary>
    [pbr::OriginalName("REJ_ROTATING")] RejRotating = 23,
  }

  /// <summary>
  /// 移动方向
  /// </summary>
  public enum MoveDirection {
    /// <summary>
    /// 释放方向, 空值
    /// </summary>
    [pbr::OriginalName("RELEASE")] Release = 0,
    [pbr::OriginalName("FORWARD")] Forward = 1,
    [pbr::OriginalName("BACKWARD")] Backward = 2,
    [pbr::OriginalName("LEFT")] Left = 3,
    [pbr::OriginalName("RIGHT")] Right = 4,
    [pbr::OriginalName("LEFT_FORWARD")] LeftForward = 5,
    [pbr::OriginalName("RIGHT_FORWARD")] RightForward = 6,
    [pbr::OriginalName("LEFT_BACKWARD")] LeftBackward = 7,
    [pbr::OriginalName("RIGHT_BACKWARD")] RightBackward = 8,
  }

  /// <summary>
  /// 导航漫游方式
  /// </summary>
  public enum RoamingType {
    /// <summary>
    /// 继续上次NavStop中断的漫游
    /// </summary>
    [pbr::OriginalName("ROAMING_TYPE_CONTINUE")] Continue = 0,
    /// <summary>
    /// 有序漫游
    /// </summary>
    [pbr::OriginalName("ROAMING_TYPE_ORDER")] Order = 1,
    /// <summary>
    /// 随机漫游
    /// </summary>
    [pbr::OriginalName("ROAMING_TYPE_RANDOM")] Random = 2,
  }

  /// <summary>
  /// 充电状态码
  /// </summary>
  public enum ChargeStatusCode {
    /// <summary>
    /// 状态零值
    /// </summary>
    [pbr::OriginalName("CHARGE_STATUS_UNKNOWN")] ChargeStatusUnknown = 0,
    /// <summary>
    /// 准备中
    /// 充电导航: 导航开始/CHARGE_STATUS_NAV_OBSTACLE导航恢复
    /// </summary>
    [pbr::OriginalName("CHARGE_STATUS_PREPARING")] ChargeStatusPreparing = 1,
    /// <summary>
    /// 已释放
    /// 充电断开结束完成与未充电时为此状态
    /// </summary>
    [pbr::OriginalName("CHARGE_STATUS_RELEASED")] ChargeStatusReleased = 2,
    /// <summary>
    /// 充电连接中
    /// </summary>
    [pbr::OriginalName("CHARGE_STATUS_CONNECTING")] ChargeStatusConnecting = 3,
    /// <summary>
    /// 充电中
    /// </summary>
    [pbr::OriginalName("CHARGE_STATUS_CHARGING")] ChargeStatusCharging = 4,
    /// <summary>
    /// 充电断开中
    /// </summary>
    [pbr::OriginalName("CHARGE_STATUS_DISCONNECTING")] ChargeStatusDisconnecting = 5,
    /// <summary>
    /// 连接失败
    /// </summary>
    [pbr::OriginalName("CHARGE_CONNECT_FAIL")] ChargeConnectFail = 6,
    /// <summary>
    /// 充电导航过程遇到障碍
    /// 2.2.7新增
    /// </summary>
    [pbr::OriginalName("CHARGE_STATUS_NAV_OBSTACLE")] ChargeStatusNavObstacle = 7,
  }

  /// <summary>
  /// 导航事件
  /// </summary>
  public enum NavEventType {
    /// <summary>
    /// 事件零值(不使用)
    /// </summary>
    [pbr::OriginalName("NAV_EVENT_REVERSED")] NavEventReversed = 0,
    /// <summary>
    /// 移动事件
    /// </summary>
    [pbr::OriginalName("MOVE_EVENT")] MoveEvent = 1,
    /// <summary>
    /// 导航事件
    /// </summary>
    [pbr::OriginalName("NAV_EVENT")] NavEvent = 2,
    /// <summary>
    /// 自动充电事件
    /// </summary>
    [pbr::OriginalName("AUTO_CHARGE_EVENT")] AutoChargeEvent = 3,
    /// <summary>
    /// 旋转状态事件
    /// </summary>
    [pbr::OriginalName("ROTATE_EVENT")] RotateEvent = 4,
  }

  #endregion

  #region Messages
  public sealed partial class MoveRequest : pb::IMessage<MoveRequest> {
    private static readonly pb::MessageParser<MoveRequest> _parser = new pb::MessageParser<MoveRequest>(() => new MoveRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MoveRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NavService.NavReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveRequest(MoveRequest other) : this() {
      speed_ = other.speed_;
      rspeed_ = other.rspeed_;
      direction_ = other.direction_;
      mode_ = other.mode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveRequest Clone() {
      return new MoveRequest(this);
    }

    /// <summary>Field number for the "speed" field.</summary>
    public const int SpeedFieldNumber = 1;
    private uint speed_;
    /// <summary>
    /// 移动速度 0-100
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    /// <summary>Field number for the "rspeed" field.</summary>
    public const int RspeedFieldNumber = 2;
    private uint rspeed_;
    /// <summary>
    /// 旋转速度 0-10 默认3* 仅前后方向时此数值无效
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Rspeed {
      get { return rspeed_; }
      set {
        rspeed_ = value;
      }
    }

    /// <summary>Field number for the "direction" field.</summary>
    public const int DirectionFieldNumber = 3;
    private global::NavService.MoveDirection direction_ = 0;
    /// <summary>
    /// 移动方向
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NavService.MoveDirection Direction {
      get { return direction_; }
      set {
        direction_ = value;
      }
    }

    /// <summary>Field number for the "mode" field.</summary>
    public const int ModeFieldNumber = 4;
    private string mode_ = "";
    /// <summary>
    /// 移动模式(safe*|force)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Mode {
      get { return mode_; }
      set {
        mode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MoveRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MoveRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Speed != other.Speed) return false;
      if (Rspeed != other.Rspeed) return false;
      if (Direction != other.Direction) return false;
      if (Mode != other.Mode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Speed != 0) hash ^= Speed.GetHashCode();
      if (Rspeed != 0) hash ^= Rspeed.GetHashCode();
      if (Direction != 0) hash ^= Direction.GetHashCode();
      if (Mode.Length != 0) hash ^= Mode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Speed != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Speed);
      }
      if (Rspeed != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Rspeed);
      }
      if (Direction != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Direction);
      }
      if (Mode.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Mode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Speed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Speed);
      }
      if (Rspeed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Rspeed);
      }
      if (Direction != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Direction);
      }
      if (Mode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Mode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MoveRequest other) {
      if (other == null) {
        return;
      }
      if (other.Speed != 0) {
        Speed = other.Speed;
      }
      if (other.Rspeed != 0) {
        Rspeed = other.Rspeed;
      }
      if (other.Direction != 0) {
        Direction = other.Direction;
      }
      if (other.Mode.Length != 0) {
        Mode = other.Mode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Speed = input.ReadUInt32();
            break;
          }
          case 16: {
            Rspeed = input.ReadUInt32();
            break;
          }
          case 24: {
            Direction = (global::NavService.MoveDirection) input.ReadEnum();
            break;
          }
          case 34: {
            Mode = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MoveResponse : pb::IMessage<MoveResponse> {
    private static readonly pb::MessageParser<MoveResponse> _parser = new pb::MessageParser<MoveResponse>(() => new MoveResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MoveResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NavService.NavReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveResponse(MoveResponse other) : this() {
      statusCode_ = other.statusCode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveResponse Clone() {
      return new MoveResponse(this);
    }

    /// <summary>Field number for the "status_code" field.</summary>
    public const int StatusCodeFieldNumber = 1;
    private global::NavService.StatusCode statusCode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NavService.StatusCode StatusCode {
      get { return statusCode_; }
      set {
        statusCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MoveResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MoveResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StatusCode != other.StatusCode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StatusCode != 0) hash ^= StatusCode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StatusCode != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) StatusCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StatusCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) StatusCode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MoveResponse other) {
      if (other == null) {
        return;
      }
      if (other.StatusCode != 0) {
        StatusCode = other.StatusCode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StatusCode = (global::NavService.StatusCode) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 导航目标信息
  /// 判断顺序为index>name
  /// </summary>
  public sealed partial class NavTarget : pb::IMessage<NavTarget> {
    private static readonly pb::MessageParser<NavTarget> _parser = new pb::MessageParser<NavTarget>(() => new NavTarget());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NavTarget> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NavService.NavReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NavTarget() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NavTarget(NavTarget other) : this() {
      index_ = other.index_;
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NavTarget Clone() {
      return new NavTarget(this);
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 1;
    private string index_ = "";
    /// <summary>
    /// 激活线路中线路点序号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Index {
      get { return index_; }
      set {
        index_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// 激活线路中线路点名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NavTarget);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NavTarget other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Index.Length != 0) hash ^= Index.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Index);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Index);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NavTarget other) {
      if (other == null) {
        return;
      }
      if (other.Index.Length != 0) {
        Index = other.Index;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Index = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NavRoaming : pb::IMessage<NavRoaming> {
    private static readonly pb::MessageParser<NavRoaming> _parser = new pb::MessageParser<NavRoaming>(() => new NavRoaming());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NavRoaming> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NavService.NavReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NavRoaming() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NavRoaming(NavRoaming other) : this() {
      navRoamingType_ = other.navRoamingType_;
      waitSec_ = other.waitSec_;
      roamingTargetIndexes_ = other.roamingTargetIndexes_.Clone();
      orderLoop_ = other.orderLoop_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NavRoaming Clone() {
      return new NavRoaming(this);
    }

    /// <summary>Field number for the "nav_roaming_type" field.</summary>
    public const int NavRoamingTypeFieldNumber = 1;
    private global::NavService.RoamingType navRoamingType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NavService.RoamingType NavRoamingType {
      get { return navRoamingType_; }
      set {
        navRoamingType_ = value;
      }
    }

    /// <summary>Field number for the "wait_sec" field.</summary>
    public const int WaitSecFieldNumber = 2;
    private int waitSec_;
    /// <summary>
    /// 到达漫游点后等待时间， -1为无限等待可通过ROAMING_TYPE_CONTINUE继续， 0为不等待(默认)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WaitSec {
      get { return waitSec_; }
      set {
        waitSec_ = value;
      }
    }

    /// <summary>Field number for the "roaming_target_indexes" field.</summary>
    public const int RoamingTargetIndexesFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_roamingTargetIndexes_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> roamingTargetIndexes_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// 漫游点索引， 为空时将漫游全部点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> RoamingTargetIndexes {
      get { return roamingTargetIndexes_; }
    }

    /// <summary>Field number for the "order_loop" field.</summary>
    public const int OrderLoopFieldNumber = 4;
    private bool orderLoop_;
    /// <summary>
    /// 是否循环(仅有序巡航)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OrderLoop {
      get { return orderLoop_; }
      set {
        orderLoop_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NavRoaming);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NavRoaming other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NavRoamingType != other.NavRoamingType) return false;
      if (WaitSec != other.WaitSec) return false;
      if(!roamingTargetIndexes_.Equals(other.roamingTargetIndexes_)) return false;
      if (OrderLoop != other.OrderLoop) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NavRoamingType != 0) hash ^= NavRoamingType.GetHashCode();
      if (WaitSec != 0) hash ^= WaitSec.GetHashCode();
      hash ^= roamingTargetIndexes_.GetHashCode();
      if (OrderLoop != false) hash ^= OrderLoop.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NavRoamingType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) NavRoamingType);
      }
      if (WaitSec != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(WaitSec);
      }
      roamingTargetIndexes_.WriteTo(output, _repeated_roamingTargetIndexes_codec);
      if (OrderLoop != false) {
        output.WriteRawTag(32);
        output.WriteBool(OrderLoop);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NavRoamingType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) NavRoamingType);
      }
      if (WaitSec != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WaitSec);
      }
      size += roamingTargetIndexes_.CalculateSize(_repeated_roamingTargetIndexes_codec);
      if (OrderLoop != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NavRoaming other) {
      if (other == null) {
        return;
      }
      if (other.NavRoamingType != 0) {
        NavRoamingType = other.NavRoamingType;
      }
      if (other.WaitSec != 0) {
        WaitSec = other.WaitSec;
      }
      roamingTargetIndexes_.Add(other.roamingTargetIndexes_);
      if (other.OrderLoop != false) {
        OrderLoop = other.OrderLoop;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            NavRoamingType = (global::NavService.RoamingType) input.ReadEnum();
            break;
          }
          case 16: {
            WaitSec = input.ReadInt32();
            break;
          }
          case 26: {
            roamingTargetIndexes_.AddEntriesFrom(input, _repeated_roamingTargetIndexes_codec);
            break;
          }
          case 32: {
            OrderLoop = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 导航请求
  /// </summary>
  public sealed partial class NavToRequest : pb::IMessage<NavToRequest> {
    private static readonly pb::MessageParser<NavToRequest> _parser = new pb::MessageParser<NavToRequest>(() => new NavToRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NavToRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NavService.NavReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NavToRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NavToRequest(NavToRequest other) : this() {
      speed_ = other.speed_;
      syncMode_ = other.syncMode_;
      switch (other.TargetOneofCase) {
        case TargetOneofOneofCase.Target:
          Target = other.Target.Clone();
          break;
        case TargetOneofOneofCase.Roaming:
          Roaming = other.Roaming.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NavToRequest Clone() {
      return new NavToRequest(this);
    }

    /// <summary>Field number for the "target" field.</summary>
    public const int TargetFieldNumber = 1;
    /// <summary>
    /// 导航请求目标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NavService.NavTarget Target {
      get { return targetOneofCase_ == TargetOneofOneofCase.Target ? (global::NavService.NavTarget) targetOneof_ : null; }
      set {
        targetOneof_ = value;
        targetOneofCase_ = value == null ? TargetOneofOneofCase.None : TargetOneofOneofCase.Target;
      }
    }

    /// <summary>Field number for the "roaming" field.</summary>
    public const int RoamingFieldNumber = 3;
    /// <summary>
    /// 导航漫游(需底盘类型支持)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NavService.NavRoaming Roaming {
      get { return targetOneofCase_ == TargetOneofOneofCase.Roaming ? (global::NavService.NavRoaming) targetOneof_ : null; }
      set {
        targetOneof_ = value;
        targetOneofCase_ = value == null ? TargetOneofOneofCase.None : TargetOneofOneofCase.Roaming;
      }
    }

    /// <summary>Field number for the "speed" field.</summary>
    public const int SpeedFieldNumber = 2;
    private uint speed_;
    /// <summary>
    /// 导航移动速度(需底盘类型支持)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    /// <summary>Field number for the "sync_mode" field.</summary>
    public const int SyncModeFieldNumber = 4;
    private bool syncMode_;
    /// <summary>
    /// 同步模式标识
    /// *false: 当导航开始时立即返回PREPARING, 漫游模式强制为异步
    /// true: 目标模式下当导航STOPPED|CANCEL|ERR*时返回
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SyncMode {
      get { return syncMode_; }
      set {
        syncMode_ = value;
      }
    }

    private object targetOneof_;
    /// <summary>Enum of possible cases for the "target_oneof" oneof.</summary>
    public enum TargetOneofOneofCase {
      None = 0,
      Target = 1,
      Roaming = 3,
    }
    private TargetOneofOneofCase targetOneofCase_ = TargetOneofOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TargetOneofOneofCase TargetOneofCase {
      get { return targetOneofCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTargetOneof() {
      targetOneofCase_ = TargetOneofOneofCase.None;
      targetOneof_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NavToRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NavToRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Target, other.Target)) return false;
      if (!object.Equals(Roaming, other.Roaming)) return false;
      if (Speed != other.Speed) return false;
      if (SyncMode != other.SyncMode) return false;
      if (TargetOneofCase != other.TargetOneofCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (targetOneofCase_ == TargetOneofOneofCase.Target) hash ^= Target.GetHashCode();
      if (targetOneofCase_ == TargetOneofOneofCase.Roaming) hash ^= Roaming.GetHashCode();
      if (Speed != 0) hash ^= Speed.GetHashCode();
      if (SyncMode != false) hash ^= SyncMode.GetHashCode();
      hash ^= (int) targetOneofCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (targetOneofCase_ == TargetOneofOneofCase.Target) {
        output.WriteRawTag(10);
        output.WriteMessage(Target);
      }
      if (Speed != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Speed);
      }
      if (targetOneofCase_ == TargetOneofOneofCase.Roaming) {
        output.WriteRawTag(26);
        output.WriteMessage(Roaming);
      }
      if (SyncMode != false) {
        output.WriteRawTag(32);
        output.WriteBool(SyncMode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (targetOneofCase_ == TargetOneofOneofCase.Target) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Target);
      }
      if (targetOneofCase_ == TargetOneofOneofCase.Roaming) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Roaming);
      }
      if (Speed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Speed);
      }
      if (SyncMode != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NavToRequest other) {
      if (other == null) {
        return;
      }
      if (other.Speed != 0) {
        Speed = other.Speed;
      }
      if (other.SyncMode != false) {
        SyncMode = other.SyncMode;
      }
      switch (other.TargetOneofCase) {
        case TargetOneofOneofCase.Target:
          if (Target == null) {
            Target = new global::NavService.NavTarget();
          }
          Target.MergeFrom(other.Target);
          break;
        case TargetOneofOneofCase.Roaming:
          if (Roaming == null) {
            Roaming = new global::NavService.NavRoaming();
          }
          Roaming.MergeFrom(other.Roaming);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::NavService.NavTarget subBuilder = new global::NavService.NavTarget();
            if (targetOneofCase_ == TargetOneofOneofCase.Target) {
              subBuilder.MergeFrom(Target);
            }
            input.ReadMessage(subBuilder);
            Target = subBuilder;
            break;
          }
          case 16: {
            Speed = input.ReadUInt32();
            break;
          }
          case 26: {
            global::NavService.NavRoaming subBuilder = new global::NavService.NavRoaming();
            if (targetOneofCase_ == TargetOneofOneofCase.Roaming) {
              subBuilder.MergeFrom(Roaming);
            }
            input.ReadMessage(subBuilder);
            Roaming = subBuilder;
            break;
          }
          case 32: {
            SyncMode = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 导航状态
  /// </summary>
  public sealed partial class NavToResponse : pb::IMessage<NavToResponse> {
    private static readonly pb::MessageParser<NavToResponse> _parser = new pb::MessageParser<NavToResponse>(() => new NavToResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NavToResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NavService.NavReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NavToResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NavToResponse(NavToResponse other) : this() {
      statusCode_ = other.statusCode_;
      switch (other.TargetOneofCase) {
        case TargetOneofOneofCase.Target:
          Target = other.Target.Clone();
          break;
        case TargetOneofOneofCase.IsRoaming:
          IsRoaming = other.IsRoaming;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NavToResponse Clone() {
      return new NavToResponse(this);
    }

    /// <summary>Field number for the "status_code" field.</summary>
    public const int StatusCodeFieldNumber = 1;
    private global::NavService.StatusCode statusCode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NavService.StatusCode StatusCode {
      get { return statusCode_; }
      set {
        statusCode_ = value;
      }
    }

    /// <summary>Field number for the "target" field.</summary>
    public const int TargetFieldNumber = 2;
    /// <summary>
    /// 导航请求目标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NavService.NavTarget Target {
      get { return targetOneofCase_ == TargetOneofOneofCase.Target ? (global::NavService.NavTarget) targetOneof_ : null; }
      set {
        targetOneof_ = value;
        targetOneofCase_ = value == null ? TargetOneofOneofCase.None : TargetOneofOneofCase.Target;
      }
    }

    /// <summary>Field number for the "is_roaming" field.</summary>
    public const int IsRoamingFieldNumber = 3;
    /// <summary>
    /// 漫游模式
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsRoaming {
      get { return targetOneofCase_ == TargetOneofOneofCase.IsRoaming ? (bool) targetOneof_ : false; }
      set {
        targetOneof_ = value;
        targetOneofCase_ = TargetOneofOneofCase.IsRoaming;
      }
    }

    private object targetOneof_;
    /// <summary>Enum of possible cases for the "target_oneof" oneof.</summary>
    public enum TargetOneofOneofCase {
      None = 0,
      Target = 2,
      IsRoaming = 3,
    }
    private TargetOneofOneofCase targetOneofCase_ = TargetOneofOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TargetOneofOneofCase TargetOneofCase {
      get { return targetOneofCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTargetOneof() {
      targetOneofCase_ = TargetOneofOneofCase.None;
      targetOneof_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NavToResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NavToResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StatusCode != other.StatusCode) return false;
      if (!object.Equals(Target, other.Target)) return false;
      if (IsRoaming != other.IsRoaming) return false;
      if (TargetOneofCase != other.TargetOneofCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StatusCode != 0) hash ^= StatusCode.GetHashCode();
      if (targetOneofCase_ == TargetOneofOneofCase.Target) hash ^= Target.GetHashCode();
      if (targetOneofCase_ == TargetOneofOneofCase.IsRoaming) hash ^= IsRoaming.GetHashCode();
      hash ^= (int) targetOneofCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StatusCode != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) StatusCode);
      }
      if (targetOneofCase_ == TargetOneofOneofCase.Target) {
        output.WriteRawTag(18);
        output.WriteMessage(Target);
      }
      if (targetOneofCase_ == TargetOneofOneofCase.IsRoaming) {
        output.WriteRawTag(24);
        output.WriteBool(IsRoaming);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StatusCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) StatusCode);
      }
      if (targetOneofCase_ == TargetOneofOneofCase.Target) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Target);
      }
      if (targetOneofCase_ == TargetOneofOneofCase.IsRoaming) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NavToResponse other) {
      if (other == null) {
        return;
      }
      if (other.StatusCode != 0) {
        StatusCode = other.StatusCode;
      }
      switch (other.TargetOneofCase) {
        case TargetOneofOneofCase.Target:
          if (Target == null) {
            Target = new global::NavService.NavTarget();
          }
          Target.MergeFrom(other.Target);
          break;
        case TargetOneofOneofCase.IsRoaming:
          IsRoaming = other.IsRoaming;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StatusCode = (global::NavService.StatusCode) input.ReadEnum();
            break;
          }
          case 18: {
            global::NavService.NavTarget subBuilder = new global::NavService.NavTarget();
            if (targetOneofCase_ == TargetOneofOneofCase.Target) {
              subBuilder.MergeFrom(Target);
            }
            input.ReadMessage(subBuilder);
            Target = subBuilder;
            break;
          }
          case 24: {
            IsRoaming = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 导航停止请求
  /// </summary>
  public sealed partial class NavStopRequest : pb::IMessage<NavStopRequest> {
    private static readonly pb::MessageParser<NavStopRequest> _parser = new pb::MessageParser<NavStopRequest>(() => new NavStopRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NavStopRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NavService.NavReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NavStopRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NavStopRequest(NavStopRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NavStopRequest Clone() {
      return new NavStopRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NavStopRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NavStopRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NavStopRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// 导航停止状态
  /// </summary>
  public sealed partial class NavStopResponse : pb::IMessage<NavStopResponse> {
    private static readonly pb::MessageParser<NavStopResponse> _parser = new pb::MessageParser<NavStopResponse>(() => new NavStopResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NavStopResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NavService.NavReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NavStopResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NavStopResponse(NavStopResponse other) : this() {
      statusCode_ = other.statusCode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NavStopResponse Clone() {
      return new NavStopResponse(this);
    }

    /// <summary>Field number for the "status_code" field.</summary>
    public const int StatusCodeFieldNumber = 1;
    private global::NavService.StatusCode statusCode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NavService.StatusCode StatusCode {
      get { return statusCode_; }
      set {
        statusCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NavStopResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NavStopResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StatusCode != other.StatusCode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StatusCode != 0) hash ^= StatusCode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StatusCode != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) StatusCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StatusCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) StatusCode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NavStopResponse other) {
      if (other == null) {
        return;
      }
      if (other.StatusCode != 0) {
        StatusCode = other.StatusCode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StatusCode = (global::NavService.StatusCode) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 充电请求
  /// </summary>
  public sealed partial class AutoChargeRequest : pb::IMessage<AutoChargeRequest> {
    private static readonly pb::MessageParser<AutoChargeRequest> _parser = new pb::MessageParser<AutoChargeRequest>(() => new AutoChargeRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AutoChargeRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NavService.NavReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AutoChargeRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AutoChargeRequest(AutoChargeRequest other) : this() {
      timeoutSec_ = other.timeoutSec_;
      switch (other.ChargeOptionOneofCase) {
        case ChargeOptionOneofOneofCase.Charge:
          Charge = other.Charge;
          break;
        case ChargeOptionOneofOneofCase.Cancel:
          Cancel = other.Cancel;
          break;
        case ChargeOptionOneofOneofCase.ChargePreset:
          ChargePreset = other.ChargePreset;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AutoChargeRequest Clone() {
      return new AutoChargeRequest(this);
    }

    /// <summary>Field number for the "charge" field.</summary>
    public const int ChargeFieldNumber = 1;
    /// <summary>
    /// 当前已在充电桩附近, 直接开始充电
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Charge {
      get { return chargeOptionOneofCase_ == ChargeOptionOneofOneofCase.Charge ? (bool) chargeOptionOneof_ : false; }
      set {
        chargeOptionOneof_ = value;
        chargeOptionOneofCase_ = ChargeOptionOneofOneofCase.Charge;
      }
    }

    /// <summary>Field number for the "cancel" field.</summary>
    public const int CancelFieldNumber = 2;
    /// <summary>
    /// 取消充电
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Cancel {
      get { return chargeOptionOneofCase_ == ChargeOptionOneofOneofCase.Cancel ? (bool) chargeOptionOneof_ : false; }
      set {
        chargeOptionOneof_ = value;
        chargeOptionOneofCase_ = ChargeOptionOneofOneofCase.Cancel;
      }
    }

    /// <summary>Field number for the "charge_preset" field.</summary>
    public const int ChargePresetFieldNumber = 3;
    /// <summary>
    /// 至设置的第一个预设充电点充电
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ChargePreset {
      get { return chargeOptionOneofCase_ == ChargeOptionOneofOneofCase.ChargePreset ? (bool) chargeOptionOneof_ : false; }
      set {
        chargeOptionOneof_ = value;
        chargeOptionOneofCase_ = ChargeOptionOneofOneofCase.ChargePreset;
      }
    }

    /// <summary>Field number for the "timeout_sec" field.</summary>
    public const int TimeoutSecFieldNumber = 4;
    private uint timeoutSec_;
    /// <summary>
    /// 等待充电状态为CHARGE_STATUS_CHARGING的超时配置(秒), 默认60s
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TimeoutSec {
      get { return timeoutSec_; }
      set {
        timeoutSec_ = value;
      }
    }

    private object chargeOptionOneof_;
    /// <summary>Enum of possible cases for the "charge_option_oneof" oneof.</summary>
    public enum ChargeOptionOneofOneofCase {
      None = 0,
      Charge = 1,
      Cancel = 2,
      ChargePreset = 3,
    }
    private ChargeOptionOneofOneofCase chargeOptionOneofCase_ = ChargeOptionOneofOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChargeOptionOneofOneofCase ChargeOptionOneofCase {
      get { return chargeOptionOneofCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearChargeOptionOneof() {
      chargeOptionOneofCase_ = ChargeOptionOneofOneofCase.None;
      chargeOptionOneof_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AutoChargeRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AutoChargeRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Charge != other.Charge) return false;
      if (Cancel != other.Cancel) return false;
      if (ChargePreset != other.ChargePreset) return false;
      if (TimeoutSec != other.TimeoutSec) return false;
      if (ChargeOptionOneofCase != other.ChargeOptionOneofCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (chargeOptionOneofCase_ == ChargeOptionOneofOneofCase.Charge) hash ^= Charge.GetHashCode();
      if (chargeOptionOneofCase_ == ChargeOptionOneofOneofCase.Cancel) hash ^= Cancel.GetHashCode();
      if (chargeOptionOneofCase_ == ChargeOptionOneofOneofCase.ChargePreset) hash ^= ChargePreset.GetHashCode();
      if (TimeoutSec != 0) hash ^= TimeoutSec.GetHashCode();
      hash ^= (int) chargeOptionOneofCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (chargeOptionOneofCase_ == ChargeOptionOneofOneofCase.Charge) {
        output.WriteRawTag(8);
        output.WriteBool(Charge);
      }
      if (chargeOptionOneofCase_ == ChargeOptionOneofOneofCase.Cancel) {
        output.WriteRawTag(16);
        output.WriteBool(Cancel);
      }
      if (chargeOptionOneofCase_ == ChargeOptionOneofOneofCase.ChargePreset) {
        output.WriteRawTag(24);
        output.WriteBool(ChargePreset);
      }
      if (TimeoutSec != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(TimeoutSec);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (chargeOptionOneofCase_ == ChargeOptionOneofOneofCase.Charge) {
        size += 1 + 1;
      }
      if (chargeOptionOneofCase_ == ChargeOptionOneofOneofCase.Cancel) {
        size += 1 + 1;
      }
      if (chargeOptionOneofCase_ == ChargeOptionOneofOneofCase.ChargePreset) {
        size += 1 + 1;
      }
      if (TimeoutSec != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimeoutSec);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AutoChargeRequest other) {
      if (other == null) {
        return;
      }
      if (other.TimeoutSec != 0) {
        TimeoutSec = other.TimeoutSec;
      }
      switch (other.ChargeOptionOneofCase) {
        case ChargeOptionOneofOneofCase.Charge:
          Charge = other.Charge;
          break;
        case ChargeOptionOneofOneofCase.Cancel:
          Cancel = other.Cancel;
          break;
        case ChargeOptionOneofOneofCase.ChargePreset:
          ChargePreset = other.ChargePreset;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Charge = input.ReadBool();
            break;
          }
          case 16: {
            Cancel = input.ReadBool();
            break;
          }
          case 24: {
            ChargePreset = input.ReadBool();
            break;
          }
          case 32: {
            TimeoutSec = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 充电状态反馈
  /// </summary>
  public sealed partial class AutoChargeResponse : pb::IMessage<AutoChargeResponse> {
    private static readonly pb::MessageParser<AutoChargeResponse> _parser = new pb::MessageParser<AutoChargeResponse>(() => new AutoChargeResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AutoChargeResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NavService.NavReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AutoChargeResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AutoChargeResponse(AutoChargeResponse other) : this() {
      chargeStatusCode_ = other.chargeStatusCode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AutoChargeResponse Clone() {
      return new AutoChargeResponse(this);
    }

    /// <summary>Field number for the "charge_status_code" field.</summary>
    public const int ChargeStatusCodeFieldNumber = 1;
    private global::NavService.ChargeStatusCode chargeStatusCode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NavService.ChargeStatusCode ChargeStatusCode {
      get { return chargeStatusCode_; }
      set {
        chargeStatusCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AutoChargeResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AutoChargeResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChargeStatusCode != other.ChargeStatusCode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChargeStatusCode != 0) hash ^= ChargeStatusCode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChargeStatusCode != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ChargeStatusCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChargeStatusCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ChargeStatusCode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AutoChargeResponse other) {
      if (other == null) {
        return;
      }
      if (other.ChargeStatusCode != 0) {
        ChargeStatusCode = other.ChargeStatusCode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChargeStatusCode = (global::NavService.ChargeStatusCode) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 原地旋转请求
  /// </summary>
  public sealed partial class RotateRequest : pb::IMessage<RotateRequest> {
    private static readonly pb::MessageParser<RotateRequest> _parser = new pb::MessageParser<RotateRequest>(() => new RotateRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RotateRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NavService.NavReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RotateRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RotateRequest(RotateRequest other) : this() {
      switch (other.RotateOneofCase) {
        case RotateOneofOneofCase.Angle:
          Angle = other.Angle;
          break;
        case RotateOneofOneofCase.Rollback:
          Rollback = other.Rollback;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RotateRequest Clone() {
      return new RotateRequest(this);
    }

    /// <summary>Field number for the "angle" field.</summary>
    public const int AngleFieldNumber = 1;
    /// <summary>
    /// 基于当前角度的旋转角度参数 左:-180 ~ 右:180
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Angle {
      get { return rotateOneofCase_ == RotateOneofOneofCase.Angle ? (int) rotateOneof_ : 0; }
      set {
        rotateOneof_ = value;
        rotateOneofCase_ = RotateOneofOneofCase.Angle;
      }
    }

    /// <summary>Field number for the "rollback" field.</summary>
    public const int RollbackFieldNumber = 2;
    /// <summary>
    /// 回滚旋转角度
    /// 回滚角度的记录为更新angle角度值时的当前角度，
    /// 若在旋转过程中更新新角度或再次回滚， 下次回滚角度将记录为当前角度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Rollback {
      get { return rotateOneofCase_ == RotateOneofOneofCase.Rollback ? (bool) rotateOneof_ : false; }
      set {
        rotateOneof_ = value;
        rotateOneofCase_ = RotateOneofOneofCase.Rollback;
      }
    }

    private object rotateOneof_;
    /// <summary>Enum of possible cases for the "rotate_oneof" oneof.</summary>
    public enum RotateOneofOneofCase {
      None = 0,
      Angle = 1,
      Rollback = 2,
    }
    private RotateOneofOneofCase rotateOneofCase_ = RotateOneofOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RotateOneofOneofCase RotateOneofCase {
      get { return rotateOneofCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRotateOneof() {
      rotateOneofCase_ = RotateOneofOneofCase.None;
      rotateOneof_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RotateRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RotateRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Angle != other.Angle) return false;
      if (Rollback != other.Rollback) return false;
      if (RotateOneofCase != other.RotateOneofCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (rotateOneofCase_ == RotateOneofOneofCase.Angle) hash ^= Angle.GetHashCode();
      if (rotateOneofCase_ == RotateOneofOneofCase.Rollback) hash ^= Rollback.GetHashCode();
      hash ^= (int) rotateOneofCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (rotateOneofCase_ == RotateOneofOneofCase.Angle) {
        output.WriteRawTag(8);
        output.WriteInt32(Angle);
      }
      if (rotateOneofCase_ == RotateOneofOneofCase.Rollback) {
        output.WriteRawTag(16);
        output.WriteBool(Rollback);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (rotateOneofCase_ == RotateOneofOneofCase.Angle) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Angle);
      }
      if (rotateOneofCase_ == RotateOneofOneofCase.Rollback) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RotateRequest other) {
      if (other == null) {
        return;
      }
      switch (other.RotateOneofCase) {
        case RotateOneofOneofCase.Angle:
          Angle = other.Angle;
          break;
        case RotateOneofOneofCase.Rollback:
          Rollback = other.Rollback;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Angle = input.ReadInt32();
            break;
          }
          case 16: {
            Rollback = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RotateResponse : pb::IMessage<RotateResponse> {
    private static readonly pb::MessageParser<RotateResponse> _parser = new pb::MessageParser<RotateResponse>(() => new RotateResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RotateResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NavService.NavReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RotateResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RotateResponse(RotateResponse other) : this() {
      statusCode_ = other.statusCode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RotateResponse Clone() {
      return new RotateResponse(this);
    }

    /// <summary>Field number for the "status_code" field.</summary>
    public const int StatusCodeFieldNumber = 1;
    private global::NavService.StatusCode statusCode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NavService.StatusCode StatusCode {
      get { return statusCode_; }
      set {
        statusCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RotateResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RotateResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StatusCode != other.StatusCode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StatusCode != 0) hash ^= StatusCode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StatusCode != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) StatusCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StatusCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) StatusCode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RotateResponse other) {
      if (other == null) {
        return;
      }
      if (other.StatusCode != 0) {
        StatusCode = other.StatusCode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StatusCode = (global::NavService.StatusCode) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class OnNavEventChangeRequest : pb::IMessage<OnNavEventChangeRequest> {
    private static readonly pb::MessageParser<OnNavEventChangeRequest> _parser = new pb::MessageParser<OnNavEventChangeRequest>(() => new OnNavEventChangeRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OnNavEventChangeRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NavService.NavReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OnNavEventChangeRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OnNavEventChangeRequest(OnNavEventChangeRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OnNavEventChangeRequest Clone() {
      return new OnNavEventChangeRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OnNavEventChangeRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OnNavEventChangeRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OnNavEventChangeRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class MoveEvent : pb::IMessage<MoveEvent> {
    private static readonly pb::MessageParser<MoveEvent> _parser = new pb::MessageParser<MoveEvent>(() => new MoveEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MoveEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NavService.NavReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveEvent(MoveEvent other) : this() {
      statusCode_ = other.statusCode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveEvent Clone() {
      return new MoveEvent(this);
    }

    /// <summary>Field number for the "status_code" field.</summary>
    public const int StatusCodeFieldNumber = 1;
    private global::NavService.StatusCode statusCode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NavService.StatusCode StatusCode {
      get { return statusCode_; }
      set {
        statusCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MoveEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MoveEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StatusCode != other.StatusCode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StatusCode != 0) hash ^= StatusCode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StatusCode != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) StatusCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StatusCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) StatusCode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MoveEvent other) {
      if (other == null) {
        return;
      }
      if (other.StatusCode != 0) {
        StatusCode = other.StatusCode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StatusCode = (global::NavService.StatusCode) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NavEvent : pb::IMessage<NavEvent> {
    private static readonly pb::MessageParser<NavEvent> _parser = new pb::MessageParser<NavEvent>(() => new NavEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NavEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NavService.NavReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NavEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NavEvent(NavEvent other) : this() {
      statusCode_ = other.statusCode_;
      navTarget_ = other.navTarget_ != null ? other.navTarget_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NavEvent Clone() {
      return new NavEvent(this);
    }

    /// <summary>Field number for the "status_code" field.</summary>
    public const int StatusCodeFieldNumber = 1;
    private global::NavService.StatusCode statusCode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NavService.StatusCode StatusCode {
      get { return statusCode_; }
      set {
        statusCode_ = value;
      }
    }

    /// <summary>Field number for the "nav_target" field.</summary>
    public const int NavTargetFieldNumber = 2;
    private global::NavService.NavTarget navTarget_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NavService.NavTarget NavTarget {
      get { return navTarget_; }
      set {
        navTarget_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NavEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NavEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StatusCode != other.StatusCode) return false;
      if (!object.Equals(NavTarget, other.NavTarget)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StatusCode != 0) hash ^= StatusCode.GetHashCode();
      if (navTarget_ != null) hash ^= NavTarget.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StatusCode != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) StatusCode);
      }
      if (navTarget_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(NavTarget);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StatusCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) StatusCode);
      }
      if (navTarget_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NavTarget);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NavEvent other) {
      if (other == null) {
        return;
      }
      if (other.StatusCode != 0) {
        StatusCode = other.StatusCode;
      }
      if (other.navTarget_ != null) {
        if (navTarget_ == null) {
          NavTarget = new global::NavService.NavTarget();
        }
        NavTarget.MergeFrom(other.NavTarget);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StatusCode = (global::NavService.StatusCode) input.ReadEnum();
            break;
          }
          case 18: {
            if (navTarget_ == null) {
              NavTarget = new global::NavService.NavTarget();
            }
            input.ReadMessage(NavTarget);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AutoChargeEvent : pb::IMessage<AutoChargeEvent> {
    private static readonly pb::MessageParser<AutoChargeEvent> _parser = new pb::MessageParser<AutoChargeEvent>(() => new AutoChargeEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AutoChargeEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NavService.NavReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AutoChargeEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AutoChargeEvent(AutoChargeEvent other) : this() {
      chargeStatusCode_ = other.chargeStatusCode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AutoChargeEvent Clone() {
      return new AutoChargeEvent(this);
    }

    /// <summary>Field number for the "charge_status_code" field.</summary>
    public const int ChargeStatusCodeFieldNumber = 1;
    private global::NavService.ChargeStatusCode chargeStatusCode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NavService.ChargeStatusCode ChargeStatusCode {
      get { return chargeStatusCode_; }
      set {
        chargeStatusCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AutoChargeEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AutoChargeEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChargeStatusCode != other.ChargeStatusCode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChargeStatusCode != 0) hash ^= ChargeStatusCode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChargeStatusCode != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ChargeStatusCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChargeStatusCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ChargeStatusCode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AutoChargeEvent other) {
      if (other == null) {
        return;
      }
      if (other.ChargeStatusCode != 0) {
        ChargeStatusCode = other.ChargeStatusCode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChargeStatusCode = (global::NavService.ChargeStatusCode) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RotateEvent : pb::IMessage<RotateEvent> {
    private static readonly pb::MessageParser<RotateEvent> _parser = new pb::MessageParser<RotateEvent>(() => new RotateEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RotateEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NavService.NavReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RotateEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RotateEvent(RotateEvent other) : this() {
      statusCode_ = other.statusCode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RotateEvent Clone() {
      return new RotateEvent(this);
    }

    /// <summary>Field number for the "status_code" field.</summary>
    public const int StatusCodeFieldNumber = 1;
    private global::NavService.StatusCode statusCode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NavService.StatusCode StatusCode {
      get { return statusCode_; }
      set {
        statusCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RotateEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RotateEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StatusCode != other.StatusCode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StatusCode != 0) hash ^= StatusCode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StatusCode != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) StatusCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StatusCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) StatusCode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RotateEvent other) {
      if (other == null) {
        return;
      }
      if (other.StatusCode != 0) {
        StatusCode = other.StatusCode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StatusCode = (global::NavService.StatusCode) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class OnNavEventChangeResponse : pb::IMessage<OnNavEventChangeResponse> {
    private static readonly pb::MessageParser<OnNavEventChangeResponse> _parser = new pb::MessageParser<OnNavEventChangeResponse>(() => new OnNavEventChangeResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OnNavEventChangeResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NavService.NavReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OnNavEventChangeResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OnNavEventChangeResponse(OnNavEventChangeResponse other) : this() {
      navEventType_ = other.navEventType_;
      switch (other.ChangeOneofCase) {
        case ChangeOneofOneofCase.MoveEvent:
          MoveEvent = other.MoveEvent.Clone();
          break;
        case ChangeOneofOneofCase.NavEvent:
          NavEvent = other.NavEvent.Clone();
          break;
        case ChangeOneofOneofCase.RotateEvent:
          RotateEvent = other.RotateEvent.Clone();
          break;
        case ChangeOneofOneofCase.AutoChargeEvent:
          AutoChargeEvent = other.AutoChargeEvent.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OnNavEventChangeResponse Clone() {
      return new OnNavEventChangeResponse(this);
    }

    /// <summary>Field number for the "nav_event_type" field.</summary>
    public const int NavEventTypeFieldNumber = 1;
    private global::NavService.NavEventType navEventType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NavService.NavEventType NavEventType {
      get { return navEventType_; }
      set {
        navEventType_ = value;
      }
    }

    /// <summary>Field number for the "move_event" field.</summary>
    public const int MoveEventFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NavService.MoveEvent MoveEvent {
      get { return changeOneofCase_ == ChangeOneofOneofCase.MoveEvent ? (global::NavService.MoveEvent) changeOneof_ : null; }
      set {
        changeOneof_ = value;
        changeOneofCase_ = value == null ? ChangeOneofOneofCase.None : ChangeOneofOneofCase.MoveEvent;
      }
    }

    /// <summary>Field number for the "nav_event" field.</summary>
    public const int NavEventFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NavService.NavEvent NavEvent {
      get { return changeOneofCase_ == ChangeOneofOneofCase.NavEvent ? (global::NavService.NavEvent) changeOneof_ : null; }
      set {
        changeOneof_ = value;
        changeOneofCase_ = value == null ? ChangeOneofOneofCase.None : ChangeOneofOneofCase.NavEvent;
      }
    }

    /// <summary>Field number for the "rotate_event" field.</summary>
    public const int RotateEventFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NavService.RotateEvent RotateEvent {
      get { return changeOneofCase_ == ChangeOneofOneofCase.RotateEvent ? (global::NavService.RotateEvent) changeOneof_ : null; }
      set {
        changeOneof_ = value;
        changeOneofCase_ = value == null ? ChangeOneofOneofCase.None : ChangeOneofOneofCase.RotateEvent;
      }
    }

    /// <summary>Field number for the "auto_charge_event" field.</summary>
    public const int AutoChargeEventFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NavService.AutoChargeEvent AutoChargeEvent {
      get { return changeOneofCase_ == ChangeOneofOneofCase.AutoChargeEvent ? (global::NavService.AutoChargeEvent) changeOneof_ : null; }
      set {
        changeOneof_ = value;
        changeOneofCase_ = value == null ? ChangeOneofOneofCase.None : ChangeOneofOneofCase.AutoChargeEvent;
      }
    }

    private object changeOneof_;
    /// <summary>Enum of possible cases for the "change_oneof" oneof.</summary>
    public enum ChangeOneofOneofCase {
      None = 0,
      MoveEvent = 2,
      NavEvent = 3,
      RotateEvent = 4,
      AutoChargeEvent = 5,
    }
    private ChangeOneofOneofCase changeOneofCase_ = ChangeOneofOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeOneofOneofCase ChangeOneofCase {
      get { return changeOneofCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearChangeOneof() {
      changeOneofCase_ = ChangeOneofOneofCase.None;
      changeOneof_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OnNavEventChangeResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OnNavEventChangeResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NavEventType != other.NavEventType) return false;
      if (!object.Equals(MoveEvent, other.MoveEvent)) return false;
      if (!object.Equals(NavEvent, other.NavEvent)) return false;
      if (!object.Equals(RotateEvent, other.RotateEvent)) return false;
      if (!object.Equals(AutoChargeEvent, other.AutoChargeEvent)) return false;
      if (ChangeOneofCase != other.ChangeOneofCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NavEventType != 0) hash ^= NavEventType.GetHashCode();
      if (changeOneofCase_ == ChangeOneofOneofCase.MoveEvent) hash ^= MoveEvent.GetHashCode();
      if (changeOneofCase_ == ChangeOneofOneofCase.NavEvent) hash ^= NavEvent.GetHashCode();
      if (changeOneofCase_ == ChangeOneofOneofCase.RotateEvent) hash ^= RotateEvent.GetHashCode();
      if (changeOneofCase_ == ChangeOneofOneofCase.AutoChargeEvent) hash ^= AutoChargeEvent.GetHashCode();
      hash ^= (int) changeOneofCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NavEventType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) NavEventType);
      }
      if (changeOneofCase_ == ChangeOneofOneofCase.MoveEvent) {
        output.WriteRawTag(18);
        output.WriteMessage(MoveEvent);
      }
      if (changeOneofCase_ == ChangeOneofOneofCase.NavEvent) {
        output.WriteRawTag(26);
        output.WriteMessage(NavEvent);
      }
      if (changeOneofCase_ == ChangeOneofOneofCase.RotateEvent) {
        output.WriteRawTag(34);
        output.WriteMessage(RotateEvent);
      }
      if (changeOneofCase_ == ChangeOneofOneofCase.AutoChargeEvent) {
        output.WriteRawTag(42);
        output.WriteMessage(AutoChargeEvent);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NavEventType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) NavEventType);
      }
      if (changeOneofCase_ == ChangeOneofOneofCase.MoveEvent) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MoveEvent);
      }
      if (changeOneofCase_ == ChangeOneofOneofCase.NavEvent) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NavEvent);
      }
      if (changeOneofCase_ == ChangeOneofOneofCase.RotateEvent) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RotateEvent);
      }
      if (changeOneofCase_ == ChangeOneofOneofCase.AutoChargeEvent) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AutoChargeEvent);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OnNavEventChangeResponse other) {
      if (other == null) {
        return;
      }
      if (other.NavEventType != 0) {
        NavEventType = other.NavEventType;
      }
      switch (other.ChangeOneofCase) {
        case ChangeOneofOneofCase.MoveEvent:
          if (MoveEvent == null) {
            MoveEvent = new global::NavService.MoveEvent();
          }
          MoveEvent.MergeFrom(other.MoveEvent);
          break;
        case ChangeOneofOneofCase.NavEvent:
          if (NavEvent == null) {
            NavEvent = new global::NavService.NavEvent();
          }
          NavEvent.MergeFrom(other.NavEvent);
          break;
        case ChangeOneofOneofCase.RotateEvent:
          if (RotateEvent == null) {
            RotateEvent = new global::NavService.RotateEvent();
          }
          RotateEvent.MergeFrom(other.RotateEvent);
          break;
        case ChangeOneofOneofCase.AutoChargeEvent:
          if (AutoChargeEvent == null) {
            AutoChargeEvent = new global::NavService.AutoChargeEvent();
          }
          AutoChargeEvent.MergeFrom(other.AutoChargeEvent);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            NavEventType = (global::NavService.NavEventType) input.ReadEnum();
            break;
          }
          case 18: {
            global::NavService.MoveEvent subBuilder = new global::NavService.MoveEvent();
            if (changeOneofCase_ == ChangeOneofOneofCase.MoveEvent) {
              subBuilder.MergeFrom(MoveEvent);
            }
            input.ReadMessage(subBuilder);
            MoveEvent = subBuilder;
            break;
          }
          case 26: {
            global::NavService.NavEvent subBuilder = new global::NavService.NavEvent();
            if (changeOneofCase_ == ChangeOneofOneofCase.NavEvent) {
              subBuilder.MergeFrom(NavEvent);
            }
            input.ReadMessage(subBuilder);
            NavEvent = subBuilder;
            break;
          }
          case 34: {
            global::NavService.RotateEvent subBuilder = new global::NavService.RotateEvent();
            if (changeOneofCase_ == ChangeOneofOneofCase.RotateEvent) {
              subBuilder.MergeFrom(RotateEvent);
            }
            input.ReadMessage(subBuilder);
            RotateEvent = subBuilder;
            break;
          }
          case 42: {
            global::NavService.AutoChargeEvent subBuilder = new global::NavService.AutoChargeEvent();
            if (changeOneofCase_ == ChangeOneofOneofCase.AutoChargeEvent) {
              subBuilder.MergeFrom(AutoChargeEvent);
            }
            input.ReadMessage(subBuilder);
            AutoChargeEvent = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class LocationResetRequest : pb::IMessage<LocationResetRequest> {
    private static readonly pb::MessageParser<LocationResetRequest> _parser = new pb::MessageParser<LocationResetRequest>(() => new LocationResetRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LocationResetRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NavService.NavReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocationResetRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocationResetRequest(LocationResetRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocationResetRequest Clone() {
      return new LocationResetRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LocationResetRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LocationResetRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LocationResetRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class LocationResetResponse : pb::IMessage<LocationResetResponse> {
    private static readonly pb::MessageParser<LocationResetResponse> _parser = new pb::MessageParser<LocationResetResponse>(() => new LocationResetResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LocationResetResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NavService.NavReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocationResetResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocationResetResponse(LocationResetResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocationResetResponse Clone() {
      return new LocationResetResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LocationResetResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LocationResetResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LocationResetResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// 线路数据
  /// </summary>
  public sealed partial class Route : pb::IMessage<Route> {
    private static readonly pb::MessageParser<Route> _parser = new pb::MessageParser<Route>(() => new Route());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Route> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NavService.NavReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Route() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Route(Route other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      isActive_ = other.isActive_;
      routePoints_ = other.routePoints_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Route Clone() {
      return new Route(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// 线路id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// 线路名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "is_active" field.</summary>
    public const int IsActiveFieldNumber = 3;
    private bool isActive_;
    /// <summary>
    /// 当前线路被激活, 导航功能需要匹配激活线路使用
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsActive {
      get { return isActive_; }
      set {
        isActive_ = value;
      }
    }

    /// <summary>Field number for the "route_points" field.</summary>
    public const int RoutePointsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::NavService.RoutePoint> _repeated_routePoints_codec
        = pb::FieldCodec.ForMessage(34, global::NavService.RoutePoint.Parser);
    private readonly pbc::RepeatedField<global::NavService.RoutePoint> routePoints_ = new pbc::RepeatedField<global::NavService.RoutePoint>();
    /// <summary>
    /// 线路点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NavService.RoutePoint> RoutePoints {
      get { return routePoints_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Route);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Route other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (IsActive != other.IsActive) return false;
      if(!routePoints_.Equals(other.routePoints_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (IsActive != false) hash ^= IsActive.GetHashCode();
      hash ^= routePoints_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (IsActive != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsActive);
      }
      routePoints_.WriteTo(output, _repeated_routePoints_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (IsActive != false) {
        size += 1 + 1;
      }
      size += routePoints_.CalculateSize(_repeated_routePoints_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Route other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.IsActive != false) {
        IsActive = other.IsActive;
      }
      routePoints_.Add(other.routePoints_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            IsActive = input.ReadBool();
            break;
          }
          case 34: {
            routePoints_.AddEntriesFrom(input, _repeated_routePoints_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 线路点数据
  /// </summary>
  public sealed partial class RoutePoint : pb::IMessage<RoutePoint> {
    private static readonly pb::MessageParser<RoutePoint> _parser = new pb::MessageParser<RoutePoint>(() => new RoutePoint());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoutePoint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NavService.NavReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoutePoint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoutePoint(RoutePoint other) : this() {
      name_ = other.name_;
      rotate_ = other.rotate_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoutePoint Clone() {
      return new RoutePoint(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// 线路点名 创建时若为空将生成随机名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "rotate" field.</summary>
    public const int RotateFieldNumber = 2;
    private uint rotate_;
    /// <summary>
    /// 线路点角度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Rotate {
      get { return rotate_; }
      set {
        rotate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoutePoint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoutePoint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Rotate != other.Rotate) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Rotate != 0) hash ^= Rotate.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Rotate != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Rotate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Rotate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Rotate);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoutePoint other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Rotate != 0) {
        Rotate = other.Rotate;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            Rotate = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 创建线路请求
  /// route.name为空时将创建随机名
  /// route.is_active仅允许唯一激活, 若创建线路指定为激活将自动设置此线路为激活
  /// route.route_points若为空将自动创建默认数量线路点
  /// </summary>
  public sealed partial class NewRouteRequest : pb::IMessage<NewRouteRequest> {
    private static readonly pb::MessageParser<NewRouteRequest> _parser = new pb::MessageParser<NewRouteRequest>(() => new NewRouteRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NewRouteRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NavService.NavReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewRouteRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewRouteRequest(NewRouteRequest other) : this() {
      route_ = other.route_ != null ? other.route_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewRouteRequest Clone() {
      return new NewRouteRequest(this);
    }

    /// <summary>Field number for the "route" field.</summary>
    public const int RouteFieldNumber = 1;
    private global::NavService.Route route_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NavService.Route Route {
      get { return route_; }
      set {
        route_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NewRouteRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NewRouteRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Route, other.Route)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (route_ != null) hash ^= Route.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (route_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Route);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (route_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Route);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NewRouteRequest other) {
      if (other == null) {
        return;
      }
      if (other.route_ != null) {
        if (route_ == null) {
          Route = new global::NavService.Route();
        }
        Route.MergeFrom(other.Route);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (route_ == null) {
              Route = new global::NavService.Route();
            }
            input.ReadMessage(Route);
            break;
          }
        }
      }
    }

  }

  public sealed partial class NewRouteResponse : pb::IMessage<NewRouteResponse> {
    private static readonly pb::MessageParser<NewRouteResponse> _parser = new pb::MessageParser<NewRouteResponse>(() => new NewRouteResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NewRouteResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NavService.NavReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewRouteResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewRouteResponse(NewRouteResponse other) : this() {
      route_ = other.route_ != null ? other.route_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewRouteResponse Clone() {
      return new NewRouteResponse(this);
    }

    /// <summary>Field number for the "route" field.</summary>
    public const int RouteFieldNumber = 1;
    private global::NavService.Route route_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NavService.Route Route {
      get { return route_; }
      set {
        route_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NewRouteResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NewRouteResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Route, other.Route)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (route_ != null) hash ^= Route.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (route_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Route);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (route_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Route);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NewRouteResponse other) {
      if (other == null) {
        return;
      }
      if (other.route_ != null) {
        if (route_ == null) {
          Route = new global::NavService.Route();
        }
        Route.MergeFrom(other.Route);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (route_ == null) {
              Route = new global::NavService.Route();
            }
            input.ReadMessage(Route);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ListRoutesRequest : pb::IMessage<ListRoutesRequest> {
    private static readonly pb::MessageParser<ListRoutesRequest> _parser = new pb::MessageParser<ListRoutesRequest>(() => new ListRoutesRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListRoutesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NavService.NavReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListRoutesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListRoutesRequest(ListRoutesRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListRoutesRequest Clone() {
      return new ListRoutesRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListRoutesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListRoutesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListRoutesRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class ListRoutesResponse : pb::IMessage<ListRoutesResponse> {
    private static readonly pb::MessageParser<ListRoutesResponse> _parser = new pb::MessageParser<ListRoutesResponse>(() => new ListRoutesResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListRoutesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NavService.NavReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListRoutesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListRoutesResponse(ListRoutesResponse other) : this() {
      routes_ = other.routes_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListRoutesResponse Clone() {
      return new ListRoutesResponse(this);
    }

    /// <summary>Field number for the "routes" field.</summary>
    public const int RoutesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::NavService.Route> _repeated_routes_codec
        = pb::FieldCodec.ForMessage(10, global::NavService.Route.Parser);
    private readonly pbc::RepeatedField<global::NavService.Route> routes_ = new pbc::RepeatedField<global::NavService.Route>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NavService.Route> Routes {
      get { return routes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListRoutesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListRoutesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!routes_.Equals(other.routes_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= routes_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      routes_.WriteTo(output, _repeated_routes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += routes_.CalculateSize(_repeated_routes_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListRoutesResponse other) {
      if (other == null) {
        return;
      }
      routes_.Add(other.routes_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            routes_.AddEntriesFrom(input, _repeated_routes_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetRouteRequest : pb::IMessage<GetRouteRequest> {
    private static readonly pb::MessageParser<GetRouteRequest> _parser = new pb::MessageParser<GetRouteRequest>(() => new GetRouteRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetRouteRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NavService.NavReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRouteRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRouteRequest(GetRouteRequest other) : this() {
      id_ = other.id_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRouteRequest Clone() {
      return new GetRouteRequest(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetRouteRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetRouteRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetRouteRequest other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetRouteResponse : pb::IMessage<GetRouteResponse> {
    private static readonly pb::MessageParser<GetRouteResponse> _parser = new pb::MessageParser<GetRouteResponse>(() => new GetRouteResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetRouteResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NavService.NavReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRouteResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRouteResponse(GetRouteResponse other) : this() {
      route_ = other.route_ != null ? other.route_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRouteResponse Clone() {
      return new GetRouteResponse(this);
    }

    /// <summary>Field number for the "route" field.</summary>
    public const int RouteFieldNumber = 1;
    private global::NavService.Route route_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NavService.Route Route {
      get { return route_; }
      set {
        route_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetRouteResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetRouteResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Route, other.Route)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (route_ != null) hash ^= Route.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (route_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Route);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (route_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Route);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetRouteResponse other) {
      if (other == null) {
        return;
      }
      if (other.route_ != null) {
        if (route_ == null) {
          Route = new global::NavService.Route();
        }
        Route.MergeFrom(other.Route);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (route_ == null) {
              Route = new global::NavService.Route();
            }
            input.ReadMessage(Route);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 更新线路请求
  /// route.id根据此id获取线路
  /// route.name不可为空
  /// route.route_points不可为空
  /// </summary>
  public sealed partial class UpdateRouteRequest : pb::IMessage<UpdateRouteRequest> {
    private static readonly pb::MessageParser<UpdateRouteRequest> _parser = new pb::MessageParser<UpdateRouteRequest>(() => new UpdateRouteRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateRouteRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NavService.NavReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateRouteRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateRouteRequest(UpdateRouteRequest other) : this() {
      route_ = other.route_ != null ? other.route_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateRouteRequest Clone() {
      return new UpdateRouteRequest(this);
    }

    /// <summary>Field number for the "route" field.</summary>
    public const int RouteFieldNumber = 1;
    private global::NavService.Route route_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NavService.Route Route {
      get { return route_; }
      set {
        route_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateRouteRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateRouteRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Route, other.Route)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (route_ != null) hash ^= Route.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (route_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Route);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (route_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Route);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateRouteRequest other) {
      if (other == null) {
        return;
      }
      if (other.route_ != null) {
        if (route_ == null) {
          Route = new global::NavService.Route();
        }
        Route.MergeFrom(other.Route);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (route_ == null) {
              Route = new global::NavService.Route();
            }
            input.ReadMessage(Route);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UpdateRouteResponse : pb::IMessage<UpdateRouteResponse> {
    private static readonly pb::MessageParser<UpdateRouteResponse> _parser = new pb::MessageParser<UpdateRouteResponse>(() => new UpdateRouteResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateRouteResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NavService.NavReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateRouteResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateRouteResponse(UpdateRouteResponse other) : this() {
      route_ = other.route_ != null ? other.route_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateRouteResponse Clone() {
      return new UpdateRouteResponse(this);
    }

    /// <summary>Field number for the "route" field.</summary>
    public const int RouteFieldNumber = 1;
    private global::NavService.Route route_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NavService.Route Route {
      get { return route_; }
      set {
        route_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateRouteResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateRouteResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Route, other.Route)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (route_ != null) hash ^= Route.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (route_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Route);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (route_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Route);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateRouteResponse other) {
      if (other == null) {
        return;
      }
      if (other.route_ != null) {
        if (route_ == null) {
          Route = new global::NavService.Route();
        }
        Route.MergeFrom(other.Route);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (route_ == null) {
              Route = new global::NavService.Route();
            }
            input.ReadMessage(Route);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DeleteRoutesRequest : pb::IMessage<DeleteRoutesRequest> {
    private static readonly pb::MessageParser<DeleteRoutesRequest> _parser = new pb::MessageParser<DeleteRoutesRequest>(() => new DeleteRoutesRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteRoutesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NavService.NavReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteRoutesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteRoutesRequest(DeleteRoutesRequest other) : this() {
      routesId_ = other.routesId_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteRoutesRequest Clone() {
      return new DeleteRoutesRequest(this);
    }

    /// <summary>Field number for the "routes_id" field.</summary>
    public const int RoutesIdFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_routesId_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> routesId_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> RoutesId {
      get { return routesId_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteRoutesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteRoutesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!routesId_.Equals(other.routesId_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= routesId_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      routesId_.WriteTo(output, _repeated_routesId_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += routesId_.CalculateSize(_repeated_routesId_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteRoutesRequest other) {
      if (other == null) {
        return;
      }
      routesId_.Add(other.routesId_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            routesId_.AddEntriesFrom(input, _repeated_routesId_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DeleteRoutesResponse : pb::IMessage<DeleteRoutesResponse> {
    private static readonly pb::MessageParser<DeleteRoutesResponse> _parser = new pb::MessageParser<DeleteRoutesResponse>(() => new DeleteRoutesResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteRoutesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NavService.NavReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteRoutesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteRoutesResponse(DeleteRoutesResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteRoutesResponse Clone() {
      return new DeleteRoutesResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteRoutesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteRoutesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteRoutesResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
