// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: map.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace NavService {
  public static partial class Map
  {
    static readonly string __ServiceName = "navService.Map";

    static readonly grpc::Marshaller<global::NavService.GetMapInfoRequest> __Marshaller_navService_GetMapInfoRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::NavService.GetMapInfoRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::NavService.GetMapInfoResponse> __Marshaller_navService_GetMapInfoResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::NavService.GetMapInfoResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::NavService.MapPositionStreamRequest> __Marshaller_navService_MapPositionStreamRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::NavService.MapPositionStreamRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::NavService.MapPositionStreamResponse> __Marshaller_navService_MapPositionStreamResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::NavService.MapPositionStreamResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::NavService.LocationResetRequest> __Marshaller_navService_LocationResetRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::NavService.LocationResetRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::NavService.LocationResetResponse> __Marshaller_navService_LocationResetResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::NavService.LocationResetResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::NavService.GetMapInfoRequest, global::NavService.GetMapInfoResponse> __Method_GetMapInfo = new grpc::Method<global::NavService.GetMapInfoRequest, global::NavService.GetMapInfoResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetMapInfo",
        __Marshaller_navService_GetMapInfoRequest,
        __Marshaller_navService_GetMapInfoResponse);

    static readonly grpc::Method<global::NavService.MapPositionStreamRequest, global::NavService.MapPositionStreamResponse> __Method_MapPositionStream = new grpc::Method<global::NavService.MapPositionStreamRequest, global::NavService.MapPositionStreamResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "MapPositionStream",
        __Marshaller_navService_MapPositionStreamRequest,
        __Marshaller_navService_MapPositionStreamResponse);

    static readonly grpc::Method<global::NavService.LocationResetRequest, global::NavService.LocationResetResponse> __Method_LocationReset = new grpc::Method<global::NavService.LocationResetRequest, global::NavService.LocationResetResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "LocationReset",
        __Marshaller_navService_LocationResetRequest,
        __Marshaller_navService_LocationResetResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::NavService.MapReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Map</summary>
    [grpc::BindServiceMethod(typeof(Map), "BindService")]
    public abstract partial class MapBase
    {
      public virtual global::System.Threading.Tasks.Task<global::NavService.GetMapInfoResponse> GetMapInfo(global::NavService.GetMapInfoRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task MapPositionStream(global::NavService.MapPositionStreamRequest request, grpc::IServerStreamWriter<global::NavService.MapPositionStreamResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 重置当前定位
      /// 用于发生定位异常/错误状态，重新初始化导航定位
      /// 重定位错误：定位状态超时|无地图|UWB错误
      /// 重定位超时判断: 默认10s，仅在非错误状态下重置
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::NavService.LocationResetResponse> LocationReset(global::NavService.LocationResetRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Map</summary>
    public partial class MapClient : grpc::ClientBase<MapClient>
    {
      /// <summary>Creates a new client for Map</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public MapClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Map that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public MapClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected MapClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected MapClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::NavService.GetMapInfoResponse GetMapInfo(global::NavService.GetMapInfoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMapInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::NavService.GetMapInfoResponse GetMapInfo(global::NavService.GetMapInfoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetMapInfo, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::NavService.GetMapInfoResponse> GetMapInfoAsync(global::NavService.GetMapInfoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMapInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::NavService.GetMapInfoResponse> GetMapInfoAsync(global::NavService.GetMapInfoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetMapInfo, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::NavService.MapPositionStreamResponse> MapPositionStream(global::NavService.MapPositionStreamRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MapPositionStream(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::NavService.MapPositionStreamResponse> MapPositionStream(global::NavService.MapPositionStreamRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_MapPositionStream, null, options, request);
      }
      /// <summary>
      /// 重置当前定位
      /// 用于发生定位异常/错误状态，重新初始化导航定位
      /// 重定位错误：定位状态超时|无地图|UWB错误
      /// 重定位超时判断: 默认10s，仅在非错误状态下重置
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::NavService.LocationResetResponse LocationReset(global::NavService.LocationResetRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LocationReset(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 重置当前定位
      /// 用于发生定位异常/错误状态，重新初始化导航定位
      /// 重定位错误：定位状态超时|无地图|UWB错误
      /// 重定位超时判断: 默认10s，仅在非错误状态下重置
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::NavService.LocationResetResponse LocationReset(global::NavService.LocationResetRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_LocationReset, null, options, request);
      }
      /// <summary>
      /// 重置当前定位
      /// 用于发生定位异常/错误状态，重新初始化导航定位
      /// 重定位错误：定位状态超时|无地图|UWB错误
      /// 重定位超时判断: 默认10s，仅在非错误状态下重置
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::NavService.LocationResetResponse> LocationResetAsync(global::NavService.LocationResetRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LocationResetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 重置当前定位
      /// 用于发生定位异常/错误状态，重新初始化导航定位
      /// 重定位错误：定位状态超时|无地图|UWB错误
      /// 重定位超时判断: 默认10s，仅在非错误状态下重置
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::NavService.LocationResetResponse> LocationResetAsync(global::NavService.LocationResetRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_LocationReset, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override MapClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new MapClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(MapBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetMapInfo, serviceImpl.GetMapInfo)
          .AddMethod(__Method_MapPositionStream, serviceImpl.MapPositionStream)
          .AddMethod(__Method_LocationReset, serviceImpl.LocationReset).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, MapBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetMapInfo, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::NavService.GetMapInfoRequest, global::NavService.GetMapInfoResponse>(serviceImpl.GetMapInfo));
      serviceBinder.AddMethod(__Method_MapPositionStream, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::NavService.MapPositionStreamRequest, global::NavService.MapPositionStreamResponse>(serviceImpl.MapPositionStream));
      serviceBinder.AddMethod(__Method_LocationReset, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::NavService.LocationResetRequest, global::NavService.LocationResetResponse>(serviceImpl.LocationReset));
    }

  }
}
#endregion
