// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: map.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "Map.pbobjc.h"
#import "google/api/Annotations.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - MapRoot

@implementation MapRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    registry = [[GPBExtensionRegistry alloc] init];
    // Merge in the imports (direct or indirect) that defined extensions.
    [registry addExtensions:[GAPIAnnotationsRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - MapRoot_FileDescriptor

static GPBFileDescriptor *MapRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"navService"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - MapPosition

@implementation MapPosition

@dynamic x;
@dynamic y;
@dynamic angle;

typedef struct MapPosition__storage_ {
  uint32_t _has_storage_[1];
  uint32_t x;
  uint32_t y;
  uint32_t angle;
} MapPosition__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "x",
        .dataTypeSpecific.className = NULL,
        .number = MapPosition_FieldNumber_X,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MapPosition__storage_, x),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "y",
        .dataTypeSpecific.className = NULL,
        .number = MapPosition_FieldNumber_Y,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MapPosition__storage_, y),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "angle",
        .dataTypeSpecific.className = NULL,
        .number = MapPosition_FieldNumber_Angle,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MapPosition__storage_, angle),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MapPosition class]
                                     rootClass:[MapRoot class]
                                          file:MapRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MapPosition__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetMapInfoRequest

@implementation GetMapInfoRequest

@dynamic noMapImage;
@dynamic noMapPoints;

typedef struct GetMapInfoRequest__storage_ {
  uint32_t _has_storage_[1];
} GetMapInfoRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "noMapImage",
        .dataTypeSpecific.className = NULL,
        .number = GetMapInfoRequest_FieldNumber_NoMapImage,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "noMapPoints",
        .dataTypeSpecific.className = NULL,
        .number = GetMapInfoRequest_FieldNumber_NoMapPoints,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetMapInfoRequest class]
                                     rootClass:[MapRoot class]
                                          file:MapRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetMapInfoRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetMapInfoResponse

@implementation GetMapInfoResponse

@dynamic id_p;
@dynamic name;
@dynamic hasMapImage, mapImage;
@dynamic mapPointsArray, mapPointsArray_Count;

typedef struct GetMapInfoResponse__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
  NSString *name;
  GetMapInfoResponse_MapImage *mapImage;
  NSMutableArray *mapPointsArray;
} GetMapInfoResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = GetMapInfoResponse_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetMapInfoResponse__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = GetMapInfoResponse_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetMapInfoResponse__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "mapImage",
        .dataTypeSpecific.className = GPBStringifySymbol(GetMapInfoResponse_MapImage),
        .number = GetMapInfoResponse_FieldNumber_MapImage,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetMapInfoResponse__storage_, mapImage),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "mapPointsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(GetMapInfoResponse_MapPoint),
        .number = GetMapInfoResponse_FieldNumber_MapPointsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetMapInfoResponse__storage_, mapPointsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetMapInfoResponse class]
                                     rootClass:[MapRoot class]
                                          file:MapRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetMapInfoResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetMapInfoResponse_MapImage

@implementation GetMapInfoResponse_MapImage

@dynamic width;
@dynamic height;
@dynamic image;

typedef struct GetMapInfoResponse_MapImage__storage_ {
  uint32_t _has_storage_[1];
  uint32_t width;
  uint32_t height;
  NSData *image;
} GetMapInfoResponse_MapImage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "width",
        .dataTypeSpecific.className = NULL,
        .number = GetMapInfoResponse_MapImage_FieldNumber_Width,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetMapInfoResponse_MapImage__storage_, width),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "height",
        .dataTypeSpecific.className = NULL,
        .number = GetMapInfoResponse_MapImage_FieldNumber_Height,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetMapInfoResponse_MapImage__storage_, height),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "image",
        .dataTypeSpecific.className = NULL,
        .number = GetMapInfoResponse_MapImage_FieldNumber_Image,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetMapInfoResponse_MapImage__storage_, image),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetMapInfoResponse_MapImage class]
                                     rootClass:[MapRoot class]
                                          file:MapRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetMapInfoResponse_MapImage__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(GetMapInfoResponse)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetMapInfoResponse_MapPoint

@implementation GetMapInfoResponse_MapPoint

@dynamic name;
@dynamic hasPosition, position;

typedef struct GetMapInfoResponse_MapPoint__storage_ {
  uint32_t _has_storage_[1];
  NSString *name;
  MapPosition *position;
} GetMapInfoResponse_MapPoint__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = GetMapInfoResponse_MapPoint_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetMapInfoResponse_MapPoint__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "position",
        .dataTypeSpecific.className = GPBStringifySymbol(MapPosition),
        .number = GetMapInfoResponse_MapPoint_FieldNumber_Position,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetMapInfoResponse_MapPoint__storage_, position),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetMapInfoResponse_MapPoint class]
                                     rootClass:[MapRoot class]
                                          file:MapRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetMapInfoResponse_MapPoint__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(GetMapInfoResponse)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MapPositionStreamRequest

@implementation MapPositionStreamRequest


typedef struct MapPositionStreamRequest__storage_ {
  uint32_t _has_storage_[1];
} MapPositionStreamRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MapPositionStreamRequest class]
                                     rootClass:[MapRoot class]
                                          file:MapRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(MapPositionStreamRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MapPositionStreamResponse

@implementation MapPositionStreamResponse

@dynamic hasPosition, position;

typedef struct MapPositionStreamResponse__storage_ {
  uint32_t _has_storage_[1];
  MapPosition *position;
} MapPositionStreamResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "position",
        .dataTypeSpecific.className = GPBStringifySymbol(MapPosition),
        .number = MapPositionStreamResponse_FieldNumber_Position,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MapPositionStreamResponse__storage_, position),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MapPositionStreamResponse class]
                                     rootClass:[MapRoot class]
                                          file:MapRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MapPositionStreamResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - LocationResetRequest

@implementation LocationResetRequest


typedef struct LocationResetRequest__storage_ {
  uint32_t _has_storage_[1];
} LocationResetRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[LocationResetRequest class]
                                     rootClass:[MapRoot class]
                                          file:MapRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(LocationResetRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - LocationResetResponse

@implementation LocationResetResponse


typedef struct LocationResetResponse__storage_ {
  uint32_t _has_storage_[1];
} LocationResetResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[LocationResetResponse class]
                                     rootClass:[MapRoot class]
                                          file:MapRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(LocationResetResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
