// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: map.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_map_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_map_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_map_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_map_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_map_2eproto;
namespace navService {
class GetMapInfoRequest;
class GetMapInfoRequestDefaultTypeInternal;
extern GetMapInfoRequestDefaultTypeInternal _GetMapInfoRequest_default_instance_;
class GetMapInfoResponse;
class GetMapInfoResponseDefaultTypeInternal;
extern GetMapInfoResponseDefaultTypeInternal _GetMapInfoResponse_default_instance_;
class GetMapInfoResponse_MapImage;
class GetMapInfoResponse_MapImageDefaultTypeInternal;
extern GetMapInfoResponse_MapImageDefaultTypeInternal _GetMapInfoResponse_MapImage_default_instance_;
class GetMapInfoResponse_MapPoint;
class GetMapInfoResponse_MapPointDefaultTypeInternal;
extern GetMapInfoResponse_MapPointDefaultTypeInternal _GetMapInfoResponse_MapPoint_default_instance_;
class LocationResetRequest;
class LocationResetRequestDefaultTypeInternal;
extern LocationResetRequestDefaultTypeInternal _LocationResetRequest_default_instance_;
class LocationResetResponse;
class LocationResetResponseDefaultTypeInternal;
extern LocationResetResponseDefaultTypeInternal _LocationResetResponse_default_instance_;
class MapPosition;
class MapPositionDefaultTypeInternal;
extern MapPositionDefaultTypeInternal _MapPosition_default_instance_;
class MapPositionStreamRequest;
class MapPositionStreamRequestDefaultTypeInternal;
extern MapPositionStreamRequestDefaultTypeInternal _MapPositionStreamRequest_default_instance_;
class MapPositionStreamResponse;
class MapPositionStreamResponseDefaultTypeInternal;
extern MapPositionStreamResponseDefaultTypeInternal _MapPositionStreamResponse_default_instance_;
}  // namespace navService
PROTOBUF_NAMESPACE_OPEN
template<> ::navService::GetMapInfoRequest* Arena::CreateMaybeMessage<::navService::GetMapInfoRequest>(Arena*);
template<> ::navService::GetMapInfoResponse* Arena::CreateMaybeMessage<::navService::GetMapInfoResponse>(Arena*);
template<> ::navService::GetMapInfoResponse_MapImage* Arena::CreateMaybeMessage<::navService::GetMapInfoResponse_MapImage>(Arena*);
template<> ::navService::GetMapInfoResponse_MapPoint* Arena::CreateMaybeMessage<::navService::GetMapInfoResponse_MapPoint>(Arena*);
template<> ::navService::LocationResetRequest* Arena::CreateMaybeMessage<::navService::LocationResetRequest>(Arena*);
template<> ::navService::LocationResetResponse* Arena::CreateMaybeMessage<::navService::LocationResetResponse>(Arena*);
template<> ::navService::MapPosition* Arena::CreateMaybeMessage<::navService::MapPosition>(Arena*);
template<> ::navService::MapPositionStreamRequest* Arena::CreateMaybeMessage<::navService::MapPositionStreamRequest>(Arena*);
template<> ::navService::MapPositionStreamResponse* Arena::CreateMaybeMessage<::navService::MapPositionStreamResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace navService {

// ===================================================================

class MapPosition :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:navService.MapPosition) */ {
 public:
  MapPosition();
  virtual ~MapPosition();

  MapPosition(const MapPosition& from);
  MapPosition(MapPosition&& from) noexcept
    : MapPosition() {
    *this = ::std::move(from);
  }

  inline MapPosition& operator=(const MapPosition& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapPosition& operator=(MapPosition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MapPosition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MapPosition* internal_default_instance() {
    return reinterpret_cast<const MapPosition*>(
               &_MapPosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(MapPosition* other);
  friend void swap(MapPosition& a, MapPosition& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MapPosition* New() const final {
    return CreateMaybeMessage<MapPosition>(nullptr);
  }

  MapPosition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MapPosition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MapPosition& from);
  void MergeFrom(const MapPosition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapPosition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "navService.MapPosition";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint32 x() const;
  void set_x(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint32 y() const;
  void set_y(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 angle = 3;
  void clear_angle();
  static const int kAngleFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::uint32 angle() const;
  void set_angle(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:navService.MapPosition)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 x_;
  ::PROTOBUF_NAMESPACE_ID::uint32 y_;
  ::PROTOBUF_NAMESPACE_ID::uint32 angle_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class GetMapInfoRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:navService.GetMapInfoRequest) */ {
 public:
  GetMapInfoRequest();
  virtual ~GetMapInfoRequest();

  GetMapInfoRequest(const GetMapInfoRequest& from);
  GetMapInfoRequest(GetMapInfoRequest&& from) noexcept
    : GetMapInfoRequest() {
    *this = ::std::move(from);
  }

  inline GetMapInfoRequest& operator=(const GetMapInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMapInfoRequest& operator=(GetMapInfoRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetMapInfoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetMapInfoRequest* internal_default_instance() {
    return reinterpret_cast<const GetMapInfoRequest*>(
               &_GetMapInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(GetMapInfoRequest* other);
  friend void swap(GetMapInfoRequest& a, GetMapInfoRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetMapInfoRequest* New() const final {
    return CreateMaybeMessage<GetMapInfoRequest>(nullptr);
  }

  GetMapInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetMapInfoRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetMapInfoRequest& from);
  void MergeFrom(const GetMapInfoRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMapInfoRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "navService.GetMapInfoRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool no_map_image = 1;
  void clear_no_map_image();
  static const int kNoMapImageFieldNumber = 1;
  bool no_map_image() const;
  void set_no_map_image(bool value);

  // bool no_map_points = 2;
  void clear_no_map_points();
  static const int kNoMapPointsFieldNumber = 2;
  bool no_map_points() const;
  void set_no_map_points(bool value);

  // @@protoc_insertion_point(class_scope:navService.GetMapInfoRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool no_map_image_;
  bool no_map_points_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class GetMapInfoResponse_MapImage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:navService.GetMapInfoResponse.MapImage) */ {
 public:
  GetMapInfoResponse_MapImage();
  virtual ~GetMapInfoResponse_MapImage();

  GetMapInfoResponse_MapImage(const GetMapInfoResponse_MapImage& from);
  GetMapInfoResponse_MapImage(GetMapInfoResponse_MapImage&& from) noexcept
    : GetMapInfoResponse_MapImage() {
    *this = ::std::move(from);
  }

  inline GetMapInfoResponse_MapImage& operator=(const GetMapInfoResponse_MapImage& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMapInfoResponse_MapImage& operator=(GetMapInfoResponse_MapImage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetMapInfoResponse_MapImage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetMapInfoResponse_MapImage* internal_default_instance() {
    return reinterpret_cast<const GetMapInfoResponse_MapImage*>(
               &_GetMapInfoResponse_MapImage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(GetMapInfoResponse_MapImage* other);
  friend void swap(GetMapInfoResponse_MapImage& a, GetMapInfoResponse_MapImage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetMapInfoResponse_MapImage* New() const final {
    return CreateMaybeMessage<GetMapInfoResponse_MapImage>(nullptr);
  }

  GetMapInfoResponse_MapImage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetMapInfoResponse_MapImage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetMapInfoResponse_MapImage& from);
  void MergeFrom(const GetMapInfoResponse_MapImage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMapInfoResponse_MapImage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "navService.GetMapInfoResponse.MapImage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes image = 3;
  void clear_image();
  static const int kImageFieldNumber = 3;
  const std::string& image() const;
  void set_image(const std::string& value);
  void set_image(std::string&& value);
  void set_image(const char* value);
  void set_image(const void* value, size_t size);
  std::string* mutable_image();
  std::string* release_image();
  void set_allocated_image(std::string* image);

  // uint32 width = 1;
  void clear_width();
  static const int kWidthFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 height = 2;
  void clear_height();
  static const int kHeightFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:navService.GetMapInfoResponse.MapImage)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_;
  ::PROTOBUF_NAMESPACE_ID::uint32 width_;
  ::PROTOBUF_NAMESPACE_ID::uint32 height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class GetMapInfoResponse_MapPoint :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:navService.GetMapInfoResponse.MapPoint) */ {
 public:
  GetMapInfoResponse_MapPoint();
  virtual ~GetMapInfoResponse_MapPoint();

  GetMapInfoResponse_MapPoint(const GetMapInfoResponse_MapPoint& from);
  GetMapInfoResponse_MapPoint(GetMapInfoResponse_MapPoint&& from) noexcept
    : GetMapInfoResponse_MapPoint() {
    *this = ::std::move(from);
  }

  inline GetMapInfoResponse_MapPoint& operator=(const GetMapInfoResponse_MapPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMapInfoResponse_MapPoint& operator=(GetMapInfoResponse_MapPoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetMapInfoResponse_MapPoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetMapInfoResponse_MapPoint* internal_default_instance() {
    return reinterpret_cast<const GetMapInfoResponse_MapPoint*>(
               &_GetMapInfoResponse_MapPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(GetMapInfoResponse_MapPoint* other);
  friend void swap(GetMapInfoResponse_MapPoint& a, GetMapInfoResponse_MapPoint& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetMapInfoResponse_MapPoint* New() const final {
    return CreateMaybeMessage<GetMapInfoResponse_MapPoint>(nullptr);
  }

  GetMapInfoResponse_MapPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetMapInfoResponse_MapPoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetMapInfoResponse_MapPoint& from);
  void MergeFrom(const GetMapInfoResponse_MapPoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMapInfoResponse_MapPoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "navService.GetMapInfoResponse.MapPoint";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // .navService.MapPosition position = 2;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 2;
  const ::navService::MapPosition& position() const;
  ::navService::MapPosition* release_position();
  ::navService::MapPosition* mutable_position();
  void set_allocated_position(::navService::MapPosition* position);

  // @@protoc_insertion_point(class_scope:navService.GetMapInfoResponse.MapPoint)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::navService::MapPosition* position_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class GetMapInfoResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:navService.GetMapInfoResponse) */ {
 public:
  GetMapInfoResponse();
  virtual ~GetMapInfoResponse();

  GetMapInfoResponse(const GetMapInfoResponse& from);
  GetMapInfoResponse(GetMapInfoResponse&& from) noexcept
    : GetMapInfoResponse() {
    *this = ::std::move(from);
  }

  inline GetMapInfoResponse& operator=(const GetMapInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMapInfoResponse& operator=(GetMapInfoResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetMapInfoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetMapInfoResponse* internal_default_instance() {
    return reinterpret_cast<const GetMapInfoResponse*>(
               &_GetMapInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(GetMapInfoResponse* other);
  friend void swap(GetMapInfoResponse& a, GetMapInfoResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetMapInfoResponse* New() const final {
    return CreateMaybeMessage<GetMapInfoResponse>(nullptr);
  }

  GetMapInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetMapInfoResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetMapInfoResponse& from);
  void MergeFrom(const GetMapInfoResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMapInfoResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "navService.GetMapInfoResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef GetMapInfoResponse_MapImage MapImage;
  typedef GetMapInfoResponse_MapPoint MapPoint;

  // accessors -------------------------------------------------------

  // repeated .navService.GetMapInfoResponse.MapPoint map_points = 4;
  int map_points_size() const;
  void clear_map_points();
  static const int kMapPointsFieldNumber = 4;
  ::navService::GetMapInfoResponse_MapPoint* mutable_map_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::navService::GetMapInfoResponse_MapPoint >*
      mutable_map_points();
  const ::navService::GetMapInfoResponse_MapPoint& map_points(int index) const;
  ::navService::GetMapInfoResponse_MapPoint* add_map_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::navService::GetMapInfoResponse_MapPoint >&
      map_points() const;

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // .navService.GetMapInfoResponse.MapImage map_image = 3;
  bool has_map_image() const;
  void clear_map_image();
  static const int kMapImageFieldNumber = 3;
  const ::navService::GetMapInfoResponse_MapImage& map_image() const;
  ::navService::GetMapInfoResponse_MapImage* release_map_image();
  ::navService::GetMapInfoResponse_MapImage* mutable_map_image();
  void set_allocated_map_image(::navService::GetMapInfoResponse_MapImage* map_image);

  // @@protoc_insertion_point(class_scope:navService.GetMapInfoResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::navService::GetMapInfoResponse_MapPoint > map_points_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::navService::GetMapInfoResponse_MapImage* map_image_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class MapPositionStreamRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:navService.MapPositionStreamRequest) */ {
 public:
  MapPositionStreamRequest();
  virtual ~MapPositionStreamRequest();

  MapPositionStreamRequest(const MapPositionStreamRequest& from);
  MapPositionStreamRequest(MapPositionStreamRequest&& from) noexcept
    : MapPositionStreamRequest() {
    *this = ::std::move(from);
  }

  inline MapPositionStreamRequest& operator=(const MapPositionStreamRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapPositionStreamRequest& operator=(MapPositionStreamRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MapPositionStreamRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MapPositionStreamRequest* internal_default_instance() {
    return reinterpret_cast<const MapPositionStreamRequest*>(
               &_MapPositionStreamRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(MapPositionStreamRequest* other);
  friend void swap(MapPositionStreamRequest& a, MapPositionStreamRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MapPositionStreamRequest* New() const final {
    return CreateMaybeMessage<MapPositionStreamRequest>(nullptr);
  }

  MapPositionStreamRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MapPositionStreamRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MapPositionStreamRequest& from);
  void MergeFrom(const MapPositionStreamRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapPositionStreamRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "navService.MapPositionStreamRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:navService.MapPositionStreamRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class MapPositionStreamResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:navService.MapPositionStreamResponse) */ {
 public:
  MapPositionStreamResponse();
  virtual ~MapPositionStreamResponse();

  MapPositionStreamResponse(const MapPositionStreamResponse& from);
  MapPositionStreamResponse(MapPositionStreamResponse&& from) noexcept
    : MapPositionStreamResponse() {
    *this = ::std::move(from);
  }

  inline MapPositionStreamResponse& operator=(const MapPositionStreamResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapPositionStreamResponse& operator=(MapPositionStreamResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MapPositionStreamResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MapPositionStreamResponse* internal_default_instance() {
    return reinterpret_cast<const MapPositionStreamResponse*>(
               &_MapPositionStreamResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(MapPositionStreamResponse* other);
  friend void swap(MapPositionStreamResponse& a, MapPositionStreamResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MapPositionStreamResponse* New() const final {
    return CreateMaybeMessage<MapPositionStreamResponse>(nullptr);
  }

  MapPositionStreamResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MapPositionStreamResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MapPositionStreamResponse& from);
  void MergeFrom(const MapPositionStreamResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapPositionStreamResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "navService.MapPositionStreamResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .navService.MapPosition position = 1;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 1;
  const ::navService::MapPosition& position() const;
  ::navService::MapPosition* release_position();
  ::navService::MapPosition* mutable_position();
  void set_allocated_position(::navService::MapPosition* position);

  // @@protoc_insertion_point(class_scope:navService.MapPositionStreamResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::navService::MapPosition* position_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class LocationResetRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:navService.LocationResetRequest) */ {
 public:
  LocationResetRequest();
  virtual ~LocationResetRequest();

  LocationResetRequest(const LocationResetRequest& from);
  LocationResetRequest(LocationResetRequest&& from) noexcept
    : LocationResetRequest() {
    *this = ::std::move(from);
  }

  inline LocationResetRequest& operator=(const LocationResetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocationResetRequest& operator=(LocationResetRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LocationResetRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LocationResetRequest* internal_default_instance() {
    return reinterpret_cast<const LocationResetRequest*>(
               &_LocationResetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(LocationResetRequest* other);
  friend void swap(LocationResetRequest& a, LocationResetRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LocationResetRequest* New() const final {
    return CreateMaybeMessage<LocationResetRequest>(nullptr);
  }

  LocationResetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LocationResetRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LocationResetRequest& from);
  void MergeFrom(const LocationResetRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocationResetRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "navService.LocationResetRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:navService.LocationResetRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class LocationResetResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:navService.LocationResetResponse) */ {
 public:
  LocationResetResponse();
  virtual ~LocationResetResponse();

  LocationResetResponse(const LocationResetResponse& from);
  LocationResetResponse(LocationResetResponse&& from) noexcept
    : LocationResetResponse() {
    *this = ::std::move(from);
  }

  inline LocationResetResponse& operator=(const LocationResetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocationResetResponse& operator=(LocationResetResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LocationResetResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LocationResetResponse* internal_default_instance() {
    return reinterpret_cast<const LocationResetResponse*>(
               &_LocationResetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(LocationResetResponse* other);
  friend void swap(LocationResetResponse& a, LocationResetResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LocationResetResponse* New() const final {
    return CreateMaybeMessage<LocationResetResponse>(nullptr);
  }

  LocationResetResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LocationResetResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LocationResetResponse& from);
  void MergeFrom(const LocationResetResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocationResetResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "navService.LocationResetResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:navService.LocationResetResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_map_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MapPosition

// uint32 x = 1;
inline void MapPosition::clear_x() {
  x_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MapPosition::x() const {
  // @@protoc_insertion_point(field_get:navService.MapPosition.x)
  return x_;
}
inline void MapPosition::set_x(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:navService.MapPosition.x)
}

// uint32 y = 2;
inline void MapPosition::clear_y() {
  y_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MapPosition::y() const {
  // @@protoc_insertion_point(field_get:navService.MapPosition.y)
  return y_;
}
inline void MapPosition::set_y(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:navService.MapPosition.y)
}

// uint32 angle = 3;
inline void MapPosition::clear_angle() {
  angle_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MapPosition::angle() const {
  // @@protoc_insertion_point(field_get:navService.MapPosition.angle)
  return angle_;
}
inline void MapPosition::set_angle(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  angle_ = value;
  // @@protoc_insertion_point(field_set:navService.MapPosition.angle)
}

// -------------------------------------------------------------------

// GetMapInfoRequest

// bool no_map_image = 1;
inline void GetMapInfoRequest::clear_no_map_image() {
  no_map_image_ = false;
}
inline bool GetMapInfoRequest::no_map_image() const {
  // @@protoc_insertion_point(field_get:navService.GetMapInfoRequest.no_map_image)
  return no_map_image_;
}
inline void GetMapInfoRequest::set_no_map_image(bool value) {
  
  no_map_image_ = value;
  // @@protoc_insertion_point(field_set:navService.GetMapInfoRequest.no_map_image)
}

// bool no_map_points = 2;
inline void GetMapInfoRequest::clear_no_map_points() {
  no_map_points_ = false;
}
inline bool GetMapInfoRequest::no_map_points() const {
  // @@protoc_insertion_point(field_get:navService.GetMapInfoRequest.no_map_points)
  return no_map_points_;
}
inline void GetMapInfoRequest::set_no_map_points(bool value) {
  
  no_map_points_ = value;
  // @@protoc_insertion_point(field_set:navService.GetMapInfoRequest.no_map_points)
}

// -------------------------------------------------------------------

// GetMapInfoResponse_MapImage

// uint32 width = 1;
inline void GetMapInfoResponse_MapImage::clear_width() {
  width_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetMapInfoResponse_MapImage::width() const {
  // @@protoc_insertion_point(field_get:navService.GetMapInfoResponse.MapImage.width)
  return width_;
}
inline void GetMapInfoResponse_MapImage::set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:navService.GetMapInfoResponse.MapImage.width)
}

// uint32 height = 2;
inline void GetMapInfoResponse_MapImage::clear_height() {
  height_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetMapInfoResponse_MapImage::height() const {
  // @@protoc_insertion_point(field_get:navService.GetMapInfoResponse.MapImage.height)
  return height_;
}
inline void GetMapInfoResponse_MapImage::set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:navService.GetMapInfoResponse.MapImage.height)
}

// bytes image = 3;
inline void GetMapInfoResponse_MapImage::clear_image() {
  image_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetMapInfoResponse_MapImage::image() const {
  // @@protoc_insertion_point(field_get:navService.GetMapInfoResponse.MapImage.image)
  return image_.GetNoArena();
}
inline void GetMapInfoResponse_MapImage::set_image(const std::string& value) {
  
  image_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:navService.GetMapInfoResponse.MapImage.image)
}
inline void GetMapInfoResponse_MapImage::set_image(std::string&& value) {
  
  image_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:navService.GetMapInfoResponse.MapImage.image)
}
inline void GetMapInfoResponse_MapImage::set_image(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  image_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:navService.GetMapInfoResponse.MapImage.image)
}
inline void GetMapInfoResponse_MapImage::set_image(const void* value, size_t size) {
  
  image_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:navService.GetMapInfoResponse.MapImage.image)
}
inline std::string* GetMapInfoResponse_MapImage::mutable_image() {
  
  // @@protoc_insertion_point(field_mutable:navService.GetMapInfoResponse.MapImage.image)
  return image_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetMapInfoResponse_MapImage::release_image() {
  // @@protoc_insertion_point(field_release:navService.GetMapInfoResponse.MapImage.image)
  
  return image_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetMapInfoResponse_MapImage::set_allocated_image(std::string* image) {
  if (image != nullptr) {
    
  } else {
    
  }
  image_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), image);
  // @@protoc_insertion_point(field_set_allocated:navService.GetMapInfoResponse.MapImage.image)
}

// -------------------------------------------------------------------

// GetMapInfoResponse_MapPoint

// string name = 1;
inline void GetMapInfoResponse_MapPoint::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetMapInfoResponse_MapPoint::name() const {
  // @@protoc_insertion_point(field_get:navService.GetMapInfoResponse.MapPoint.name)
  return name_.GetNoArena();
}
inline void GetMapInfoResponse_MapPoint::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:navService.GetMapInfoResponse.MapPoint.name)
}
inline void GetMapInfoResponse_MapPoint::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:navService.GetMapInfoResponse.MapPoint.name)
}
inline void GetMapInfoResponse_MapPoint::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:navService.GetMapInfoResponse.MapPoint.name)
}
inline void GetMapInfoResponse_MapPoint::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:navService.GetMapInfoResponse.MapPoint.name)
}
inline std::string* GetMapInfoResponse_MapPoint::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:navService.GetMapInfoResponse.MapPoint.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetMapInfoResponse_MapPoint::release_name() {
  // @@protoc_insertion_point(field_release:navService.GetMapInfoResponse.MapPoint.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetMapInfoResponse_MapPoint::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:navService.GetMapInfoResponse.MapPoint.name)
}

// .navService.MapPosition position = 2;
inline bool GetMapInfoResponse_MapPoint::has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline void GetMapInfoResponse_MapPoint::clear_position() {
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
inline const ::navService::MapPosition& GetMapInfoResponse_MapPoint::position() const {
  const ::navService::MapPosition* p = position_;
  // @@protoc_insertion_point(field_get:navService.GetMapInfoResponse.MapPoint.position)
  return p != nullptr ? *p : *reinterpret_cast<const ::navService::MapPosition*>(
      &::navService::_MapPosition_default_instance_);
}
inline ::navService::MapPosition* GetMapInfoResponse_MapPoint::release_position() {
  // @@protoc_insertion_point(field_release:navService.GetMapInfoResponse.MapPoint.position)
  
  ::navService::MapPosition* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::navService::MapPosition* GetMapInfoResponse_MapPoint::mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::navService::MapPosition>(GetArenaNoVirtual());
    position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:navService.GetMapInfoResponse.MapPoint.position)
  return position_;
}
inline void GetMapInfoResponse_MapPoint::set_allocated_position(::navService::MapPosition* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:navService.GetMapInfoResponse.MapPoint.position)
}

// -------------------------------------------------------------------

// GetMapInfoResponse

// string id = 1;
inline void GetMapInfoResponse::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetMapInfoResponse::id() const {
  // @@protoc_insertion_point(field_get:navService.GetMapInfoResponse.id)
  return id_.GetNoArena();
}
inline void GetMapInfoResponse::set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:navService.GetMapInfoResponse.id)
}
inline void GetMapInfoResponse::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:navService.GetMapInfoResponse.id)
}
inline void GetMapInfoResponse::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:navService.GetMapInfoResponse.id)
}
inline void GetMapInfoResponse::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:navService.GetMapInfoResponse.id)
}
inline std::string* GetMapInfoResponse::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:navService.GetMapInfoResponse.id)
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetMapInfoResponse::release_id() {
  // @@protoc_insertion_point(field_release:navService.GetMapInfoResponse.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetMapInfoResponse::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:navService.GetMapInfoResponse.id)
}

// string name = 2;
inline void GetMapInfoResponse::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetMapInfoResponse::name() const {
  // @@protoc_insertion_point(field_get:navService.GetMapInfoResponse.name)
  return name_.GetNoArena();
}
inline void GetMapInfoResponse::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:navService.GetMapInfoResponse.name)
}
inline void GetMapInfoResponse::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:navService.GetMapInfoResponse.name)
}
inline void GetMapInfoResponse::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:navService.GetMapInfoResponse.name)
}
inline void GetMapInfoResponse::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:navService.GetMapInfoResponse.name)
}
inline std::string* GetMapInfoResponse::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:navService.GetMapInfoResponse.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetMapInfoResponse::release_name() {
  // @@protoc_insertion_point(field_release:navService.GetMapInfoResponse.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetMapInfoResponse::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:navService.GetMapInfoResponse.name)
}

// .navService.GetMapInfoResponse.MapImage map_image = 3;
inline bool GetMapInfoResponse::has_map_image() const {
  return this != internal_default_instance() && map_image_ != nullptr;
}
inline void GetMapInfoResponse::clear_map_image() {
  if (GetArenaNoVirtual() == nullptr && map_image_ != nullptr) {
    delete map_image_;
  }
  map_image_ = nullptr;
}
inline const ::navService::GetMapInfoResponse_MapImage& GetMapInfoResponse::map_image() const {
  const ::navService::GetMapInfoResponse_MapImage* p = map_image_;
  // @@protoc_insertion_point(field_get:navService.GetMapInfoResponse.map_image)
  return p != nullptr ? *p : *reinterpret_cast<const ::navService::GetMapInfoResponse_MapImage*>(
      &::navService::_GetMapInfoResponse_MapImage_default_instance_);
}
inline ::navService::GetMapInfoResponse_MapImage* GetMapInfoResponse::release_map_image() {
  // @@protoc_insertion_point(field_release:navService.GetMapInfoResponse.map_image)
  
  ::navService::GetMapInfoResponse_MapImage* temp = map_image_;
  map_image_ = nullptr;
  return temp;
}
inline ::navService::GetMapInfoResponse_MapImage* GetMapInfoResponse::mutable_map_image() {
  
  if (map_image_ == nullptr) {
    auto* p = CreateMaybeMessage<::navService::GetMapInfoResponse_MapImage>(GetArenaNoVirtual());
    map_image_ = p;
  }
  // @@protoc_insertion_point(field_mutable:navService.GetMapInfoResponse.map_image)
  return map_image_;
}
inline void GetMapInfoResponse::set_allocated_map_image(::navService::GetMapInfoResponse_MapImage* map_image) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete map_image_;
  }
  if (map_image) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      map_image = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, map_image, submessage_arena);
    }
    
  } else {
    
  }
  map_image_ = map_image;
  // @@protoc_insertion_point(field_set_allocated:navService.GetMapInfoResponse.map_image)
}

// repeated .navService.GetMapInfoResponse.MapPoint map_points = 4;
inline int GetMapInfoResponse::map_points_size() const {
  return map_points_.size();
}
inline void GetMapInfoResponse::clear_map_points() {
  map_points_.Clear();
}
inline ::navService::GetMapInfoResponse_MapPoint* GetMapInfoResponse::mutable_map_points(int index) {
  // @@protoc_insertion_point(field_mutable:navService.GetMapInfoResponse.map_points)
  return map_points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::navService::GetMapInfoResponse_MapPoint >*
GetMapInfoResponse::mutable_map_points() {
  // @@protoc_insertion_point(field_mutable_list:navService.GetMapInfoResponse.map_points)
  return &map_points_;
}
inline const ::navService::GetMapInfoResponse_MapPoint& GetMapInfoResponse::map_points(int index) const {
  // @@protoc_insertion_point(field_get:navService.GetMapInfoResponse.map_points)
  return map_points_.Get(index);
}
inline ::navService::GetMapInfoResponse_MapPoint* GetMapInfoResponse::add_map_points() {
  // @@protoc_insertion_point(field_add:navService.GetMapInfoResponse.map_points)
  return map_points_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::navService::GetMapInfoResponse_MapPoint >&
GetMapInfoResponse::map_points() const {
  // @@protoc_insertion_point(field_list:navService.GetMapInfoResponse.map_points)
  return map_points_;
}

// -------------------------------------------------------------------

// MapPositionStreamRequest

// -------------------------------------------------------------------

// MapPositionStreamResponse

// .navService.MapPosition position = 1;
inline bool MapPositionStreamResponse::has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline void MapPositionStreamResponse::clear_position() {
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
inline const ::navService::MapPosition& MapPositionStreamResponse::position() const {
  const ::navService::MapPosition* p = position_;
  // @@protoc_insertion_point(field_get:navService.MapPositionStreamResponse.position)
  return p != nullptr ? *p : *reinterpret_cast<const ::navService::MapPosition*>(
      &::navService::_MapPosition_default_instance_);
}
inline ::navService::MapPosition* MapPositionStreamResponse::release_position() {
  // @@protoc_insertion_point(field_release:navService.MapPositionStreamResponse.position)
  
  ::navService::MapPosition* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::navService::MapPosition* MapPositionStreamResponse::mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::navService::MapPosition>(GetArenaNoVirtual());
    position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:navService.MapPositionStreamResponse.position)
  return position_;
}
inline void MapPositionStreamResponse::set_allocated_position(::navService::MapPosition* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:navService.MapPositionStreamResponse.position)
}

// -------------------------------------------------------------------

// LocationResetRequest

// -------------------------------------------------------------------

// LocationResetResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace navService

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_map_2eproto
