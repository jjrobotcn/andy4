// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nav.proto

#include "nav.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_nav_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AutoChargeEvent_nav_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_map_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MapPosition_map_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nav_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MoveEvent_nav_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nav_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NavEvent_nav_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nav_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NavRoaming_nav_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nav_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NavTarget_nav_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nav_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RotateEvent_nav_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nav_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Route_nav_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nav_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoutePoint_nav_2eproto;
namespace navService {
class MoveRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoveRequest> _instance;
} _MoveRequest_default_instance_;
class MoveResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoveResponse> _instance;
} _MoveResponse_default_instance_;
class NavTargetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NavTarget> _instance;
} _NavTarget_default_instance_;
class NavRoamingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NavRoaming> _instance;
} _NavRoaming_default_instance_;
class NavToRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NavToRequest> _instance;
  const ::navService::NavTarget* target_;
  const ::navService::NavRoaming* roaming_;
  const ::navService::MapPosition* map_position_;
} _NavToRequest_default_instance_;
class NavToResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NavToResponse> _instance;
  const ::navService::NavTarget* target_;
  bool is_roaming_;
  const ::navService::MapPosition* map_position_;
} _NavToResponse_default_instance_;
class NavStopRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NavStopRequest> _instance;
} _NavStopRequest_default_instance_;
class NavStopResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NavStopResponse> _instance;
} _NavStopResponse_default_instance_;
class AutoChargeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AutoChargeRequest> _instance;
  bool charge_;
  bool cancel_;
  bool charge_preset_;
} _AutoChargeRequest_default_instance_;
class AutoChargeResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AutoChargeResponse> _instance;
} _AutoChargeResponse_default_instance_;
class RotateRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RotateRequest> _instance;
  ::PROTOBUF_NAMESPACE_ID::int32 angle_;
  bool rollback_;
} _RotateRequest_default_instance_;
class RotateResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RotateResponse> _instance;
} _RotateResponse_default_instance_;
class OnNavEventChangeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OnNavEventChangeRequest> _instance;
} _OnNavEventChangeRequest_default_instance_;
class MoveEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoveEvent> _instance;
} _MoveEvent_default_instance_;
class NavEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NavEvent> _instance;
} _NavEvent_default_instance_;
class AutoChargeEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AutoChargeEvent> _instance;
} _AutoChargeEvent_default_instance_;
class RotateEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RotateEvent> _instance;
} _RotateEvent_default_instance_;
class OnNavEventChangeResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OnNavEventChangeResponse> _instance;
  const ::navService::MoveEvent* move_event_;
  const ::navService::NavEvent* nav_event_;
  const ::navService::RotateEvent* rotate_event_;
  const ::navService::AutoChargeEvent* auto_charge_event_;
} _OnNavEventChangeResponse_default_instance_;
class RouteDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Route> _instance;
} _Route_default_instance_;
class RoutePointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoutePoint> _instance;
} _RoutePoint_default_instance_;
class NewRouteRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NewRouteRequest> _instance;
} _NewRouteRequest_default_instance_;
class NewRouteResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NewRouteResponse> _instance;
} _NewRouteResponse_default_instance_;
class ListRoutesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListRoutesRequest> _instance;
} _ListRoutesRequest_default_instance_;
class ListRoutesResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListRoutesResponse> _instance;
} _ListRoutesResponse_default_instance_;
class GetRouteRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetRouteRequest> _instance;
} _GetRouteRequest_default_instance_;
class GetRouteResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetRouteResponse> _instance;
} _GetRouteResponse_default_instance_;
class UpdateRouteRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateRouteRequest> _instance;
} _UpdateRouteRequest_default_instance_;
class UpdateRouteResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateRouteResponse> _instance;
} _UpdateRouteResponse_default_instance_;
class DeleteRoutesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteRoutesRequest> _instance;
} _DeleteRoutesRequest_default_instance_;
class DeleteRoutesResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteRoutesResponse> _instance;
} _DeleteRoutesResponse_default_instance_;
}  // namespace navService
static void InitDefaultsscc_info_AutoChargeEvent_nav_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::navService::_AutoChargeEvent_default_instance_;
    new (ptr) ::navService::AutoChargeEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::navService::AutoChargeEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AutoChargeEvent_nav_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AutoChargeEvent_nav_2eproto}, {}};

static void InitDefaultsscc_info_AutoChargeRequest_nav_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::navService::_AutoChargeRequest_default_instance_;
    new (ptr) ::navService::AutoChargeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::navService::AutoChargeRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AutoChargeRequest_nav_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AutoChargeRequest_nav_2eproto}, {}};

static void InitDefaultsscc_info_AutoChargeResponse_nav_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::navService::_AutoChargeResponse_default_instance_;
    new (ptr) ::navService::AutoChargeResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::navService::AutoChargeResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AutoChargeResponse_nav_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AutoChargeResponse_nav_2eproto}, {}};

static void InitDefaultsscc_info_DeleteRoutesRequest_nav_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::navService::_DeleteRoutesRequest_default_instance_;
    new (ptr) ::navService::DeleteRoutesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::navService::DeleteRoutesRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteRoutesRequest_nav_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DeleteRoutesRequest_nav_2eproto}, {}};

static void InitDefaultsscc_info_DeleteRoutesResponse_nav_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::navService::_DeleteRoutesResponse_default_instance_;
    new (ptr) ::navService::DeleteRoutesResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::navService::DeleteRoutesResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteRoutesResponse_nav_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DeleteRoutesResponse_nav_2eproto}, {}};

static void InitDefaultsscc_info_GetRouteRequest_nav_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::navService::_GetRouteRequest_default_instance_;
    new (ptr) ::navService::GetRouteRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::navService::GetRouteRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetRouteRequest_nav_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GetRouteRequest_nav_2eproto}, {}};

static void InitDefaultsscc_info_GetRouteResponse_nav_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::navService::_GetRouteResponse_default_instance_;
    new (ptr) ::navService::GetRouteResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::navService::GetRouteResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetRouteResponse_nav_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GetRouteResponse_nav_2eproto}, {
      &scc_info_Route_nav_2eproto.base,}};

static void InitDefaultsscc_info_ListRoutesRequest_nav_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::navService::_ListRoutesRequest_default_instance_;
    new (ptr) ::navService::ListRoutesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::navService::ListRoutesRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListRoutesRequest_nav_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ListRoutesRequest_nav_2eproto}, {}};

static void InitDefaultsscc_info_ListRoutesResponse_nav_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::navService::_ListRoutesResponse_default_instance_;
    new (ptr) ::navService::ListRoutesResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::navService::ListRoutesResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListRoutesResponse_nav_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ListRoutesResponse_nav_2eproto}, {
      &scc_info_Route_nav_2eproto.base,}};

static void InitDefaultsscc_info_MoveEvent_nav_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::navService::_MoveEvent_default_instance_;
    new (ptr) ::navService::MoveEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::navService::MoveEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MoveEvent_nav_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MoveEvent_nav_2eproto}, {}};

static void InitDefaultsscc_info_MoveRequest_nav_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::navService::_MoveRequest_default_instance_;
    new (ptr) ::navService::MoveRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::navService::MoveRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MoveRequest_nav_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MoveRequest_nav_2eproto}, {}};

static void InitDefaultsscc_info_MoveResponse_nav_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::navService::_MoveResponse_default_instance_;
    new (ptr) ::navService::MoveResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::navService::MoveResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MoveResponse_nav_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MoveResponse_nav_2eproto}, {}};

static void InitDefaultsscc_info_NavEvent_nav_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::navService::_NavEvent_default_instance_;
    new (ptr) ::navService::NavEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::navService::NavEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NavEvent_nav_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_NavEvent_nav_2eproto}, {
      &scc_info_NavTarget_nav_2eproto.base,}};

static void InitDefaultsscc_info_NavRoaming_nav_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::navService::_NavRoaming_default_instance_;
    new (ptr) ::navService::NavRoaming();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::navService::NavRoaming::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NavRoaming_nav_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_NavRoaming_nav_2eproto}, {}};

static void InitDefaultsscc_info_NavStopRequest_nav_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::navService::_NavStopRequest_default_instance_;
    new (ptr) ::navService::NavStopRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::navService::NavStopRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NavStopRequest_nav_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_NavStopRequest_nav_2eproto}, {}};

static void InitDefaultsscc_info_NavStopResponse_nav_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::navService::_NavStopResponse_default_instance_;
    new (ptr) ::navService::NavStopResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::navService::NavStopResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NavStopResponse_nav_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_NavStopResponse_nav_2eproto}, {}};

static void InitDefaultsscc_info_NavTarget_nav_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::navService::_NavTarget_default_instance_;
    new (ptr) ::navService::NavTarget();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::navService::NavTarget::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NavTarget_nav_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_NavTarget_nav_2eproto}, {}};

static void InitDefaultsscc_info_NavToRequest_nav_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::navService::_NavToRequest_default_instance_;
    new (ptr) ::navService::NavToRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::navService::NavToRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_NavToRequest_nav_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_NavToRequest_nav_2eproto}, {
      &scc_info_NavTarget_nav_2eproto.base,
      &scc_info_NavRoaming_nav_2eproto.base,
      &scc_info_MapPosition_map_2eproto.base,}};

static void InitDefaultsscc_info_NavToResponse_nav_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::navService::_NavToResponse_default_instance_;
    new (ptr) ::navService::NavToResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::navService::NavToResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_NavToResponse_nav_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_NavToResponse_nav_2eproto}, {
      &scc_info_NavTarget_nav_2eproto.base,
      &scc_info_MapPosition_map_2eproto.base,}};

static void InitDefaultsscc_info_NewRouteRequest_nav_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::navService::_NewRouteRequest_default_instance_;
    new (ptr) ::navService::NewRouteRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::navService::NewRouteRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NewRouteRequest_nav_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_NewRouteRequest_nav_2eproto}, {
      &scc_info_Route_nav_2eproto.base,}};

static void InitDefaultsscc_info_NewRouteResponse_nav_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::navService::_NewRouteResponse_default_instance_;
    new (ptr) ::navService::NewRouteResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::navService::NewRouteResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NewRouteResponse_nav_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_NewRouteResponse_nav_2eproto}, {
      &scc_info_Route_nav_2eproto.base,}};

static void InitDefaultsscc_info_OnNavEventChangeRequest_nav_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::navService::_OnNavEventChangeRequest_default_instance_;
    new (ptr) ::navService::OnNavEventChangeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::navService::OnNavEventChangeRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OnNavEventChangeRequest_nav_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_OnNavEventChangeRequest_nav_2eproto}, {}};

static void InitDefaultsscc_info_OnNavEventChangeResponse_nav_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::navService::_OnNavEventChangeResponse_default_instance_;
    new (ptr) ::navService::OnNavEventChangeResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::navService::OnNavEventChangeResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_OnNavEventChangeResponse_nav_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsscc_info_OnNavEventChangeResponse_nav_2eproto}, {
      &scc_info_MoveEvent_nav_2eproto.base,
      &scc_info_NavEvent_nav_2eproto.base,
      &scc_info_RotateEvent_nav_2eproto.base,
      &scc_info_AutoChargeEvent_nav_2eproto.base,}};

static void InitDefaultsscc_info_RotateEvent_nav_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::navService::_RotateEvent_default_instance_;
    new (ptr) ::navService::RotateEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::navService::RotateEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RotateEvent_nav_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RotateEvent_nav_2eproto}, {}};

static void InitDefaultsscc_info_RotateRequest_nav_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::navService::_RotateRequest_default_instance_;
    new (ptr) ::navService::RotateRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::navService::RotateRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RotateRequest_nav_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RotateRequest_nav_2eproto}, {}};

static void InitDefaultsscc_info_RotateResponse_nav_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::navService::_RotateResponse_default_instance_;
    new (ptr) ::navService::RotateResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::navService::RotateResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RotateResponse_nav_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RotateResponse_nav_2eproto}, {}};

static void InitDefaultsscc_info_Route_nav_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::navService::_Route_default_instance_;
    new (ptr) ::navService::Route();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::navService::Route::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Route_nav_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_Route_nav_2eproto}, {
      &scc_info_RoutePoint_nav_2eproto.base,}};

static void InitDefaultsscc_info_RoutePoint_nav_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::navService::_RoutePoint_default_instance_;
    new (ptr) ::navService::RoutePoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::navService::RoutePoint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoutePoint_nav_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RoutePoint_nav_2eproto}, {}};

static void InitDefaultsscc_info_UpdateRouteRequest_nav_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::navService::_UpdateRouteRequest_default_instance_;
    new (ptr) ::navService::UpdateRouteRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::navService::UpdateRouteRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UpdateRouteRequest_nav_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_UpdateRouteRequest_nav_2eproto}, {
      &scc_info_Route_nav_2eproto.base,}};

static void InitDefaultsscc_info_UpdateRouteResponse_nav_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::navService::_UpdateRouteResponse_default_instance_;
    new (ptr) ::navService::UpdateRouteResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::navService::UpdateRouteResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UpdateRouteResponse_nav_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_UpdateRouteResponse_nav_2eproto}, {
      &scc_info_Route_nav_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_nav_2eproto[30];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_nav_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_nav_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_nav_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::navService::MoveRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::navService::MoveRequest, speed_),
  PROTOBUF_FIELD_OFFSET(::navService::MoveRequest, rspeed_),
  PROTOBUF_FIELD_OFFSET(::navService::MoveRequest, direction_),
  PROTOBUF_FIELD_OFFSET(::navService::MoveRequest, mode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::navService::MoveResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::navService::MoveResponse, status_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::navService::NavTarget, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::navService::NavTarget, index_),
  PROTOBUF_FIELD_OFFSET(::navService::NavTarget, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::navService::NavRoaming, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::navService::NavRoaming, nav_roaming_type_),
  PROTOBUF_FIELD_OFFSET(::navService::NavRoaming, wait_sec_),
  PROTOBUF_FIELD_OFFSET(::navService::NavRoaming, roaming_target_indexes_),
  PROTOBUF_FIELD_OFFSET(::navService::NavRoaming, order_loop_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::navService::NavToRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::navService::NavToRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::navService::NavToRequestDefaultTypeInternal, target_),
  offsetof(::navService::NavToRequestDefaultTypeInternal, roaming_),
  offsetof(::navService::NavToRequestDefaultTypeInternal, map_position_),
  PROTOBUF_FIELD_OFFSET(::navService::NavToRequest, speed_),
  PROTOBUF_FIELD_OFFSET(::navService::NavToRequest, sync_mode_),
  PROTOBUF_FIELD_OFFSET(::navService::NavToRequest, target_oneof_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::navService::NavToResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::navService::NavToResponse, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::navService::NavToResponse, status_code_),
  offsetof(::navService::NavToResponseDefaultTypeInternal, target_),
  offsetof(::navService::NavToResponseDefaultTypeInternal, is_roaming_),
  offsetof(::navService::NavToResponseDefaultTypeInternal, map_position_),
  PROTOBUF_FIELD_OFFSET(::navService::NavToResponse, target_oneof_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::navService::NavStopRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::navService::NavStopResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::navService::NavStopResponse, status_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::navService::AutoChargeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::navService::AutoChargeRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::navService::AutoChargeRequestDefaultTypeInternal, charge_),
  offsetof(::navService::AutoChargeRequestDefaultTypeInternal, cancel_),
  offsetof(::navService::AutoChargeRequestDefaultTypeInternal, charge_preset_),
  PROTOBUF_FIELD_OFFSET(::navService::AutoChargeRequest, timeout_sec_),
  PROTOBUF_FIELD_OFFSET(::navService::AutoChargeRequest, charge_option_oneof_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::navService::AutoChargeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::navService::AutoChargeResponse, charge_status_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::navService::RotateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::navService::RotateRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::navService::RotateRequestDefaultTypeInternal, angle_),
  offsetof(::navService::RotateRequestDefaultTypeInternal, rollback_),
  PROTOBUF_FIELD_OFFSET(::navService::RotateRequest, rotate_oneof_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::navService::RotateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::navService::RotateResponse, status_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::navService::OnNavEventChangeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::navService::MoveEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::navService::MoveEvent, status_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::navService::NavEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::navService::NavEvent, status_code_),
  PROTOBUF_FIELD_OFFSET(::navService::NavEvent, nav_target_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::navService::AutoChargeEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::navService::AutoChargeEvent, charge_status_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::navService::RotateEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::navService::RotateEvent, status_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::navService::OnNavEventChangeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::navService::OnNavEventChangeResponse, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::navService::OnNavEventChangeResponse, nav_event_type_),
  offsetof(::navService::OnNavEventChangeResponseDefaultTypeInternal, move_event_),
  offsetof(::navService::OnNavEventChangeResponseDefaultTypeInternal, nav_event_),
  offsetof(::navService::OnNavEventChangeResponseDefaultTypeInternal, rotate_event_),
  offsetof(::navService::OnNavEventChangeResponseDefaultTypeInternal, auto_charge_event_),
  PROTOBUF_FIELD_OFFSET(::navService::OnNavEventChangeResponse, change_oneof_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::navService::Route, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::navService::Route, id_),
  PROTOBUF_FIELD_OFFSET(::navService::Route, name_),
  PROTOBUF_FIELD_OFFSET(::navService::Route, is_active_),
  PROTOBUF_FIELD_OFFSET(::navService::Route, route_points_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::navService::RoutePoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::navService::RoutePoint, name_),
  PROTOBUF_FIELD_OFFSET(::navService::RoutePoint, rotate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::navService::NewRouteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::navService::NewRouteRequest, route_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::navService::NewRouteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::navService::NewRouteResponse, route_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::navService::ListRoutesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::navService::ListRoutesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::navService::ListRoutesResponse, routes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::navService::GetRouteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::navService::GetRouteRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::navService::GetRouteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::navService::GetRouteResponse, route_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::navService::UpdateRouteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::navService::UpdateRouteRequest, route_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::navService::UpdateRouteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::navService::UpdateRouteResponse, route_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::navService::DeleteRoutesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::navService::DeleteRoutesRequest, routes_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::navService::DeleteRoutesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::navService::MoveRequest)},
  { 9, -1, sizeof(::navService::MoveResponse)},
  { 15, -1, sizeof(::navService::NavTarget)},
  { 22, -1, sizeof(::navService::NavRoaming)},
  { 31, -1, sizeof(::navService::NavToRequest)},
  { 42, -1, sizeof(::navService::NavToResponse)},
  { 52, -1, sizeof(::navService::NavStopRequest)},
  { 57, -1, sizeof(::navService::NavStopResponse)},
  { 63, -1, sizeof(::navService::AutoChargeRequest)},
  { 73, -1, sizeof(::navService::AutoChargeResponse)},
  { 79, -1, sizeof(::navService::RotateRequest)},
  { 87, -1, sizeof(::navService::RotateResponse)},
  { 93, -1, sizeof(::navService::OnNavEventChangeRequest)},
  { 98, -1, sizeof(::navService::MoveEvent)},
  { 104, -1, sizeof(::navService::NavEvent)},
  { 111, -1, sizeof(::navService::AutoChargeEvent)},
  { 117, -1, sizeof(::navService::RotateEvent)},
  { 123, -1, sizeof(::navService::OnNavEventChangeResponse)},
  { 134, -1, sizeof(::navService::Route)},
  { 143, -1, sizeof(::navService::RoutePoint)},
  { 150, -1, sizeof(::navService::NewRouteRequest)},
  { 156, -1, sizeof(::navService::NewRouteResponse)},
  { 162, -1, sizeof(::navService::ListRoutesRequest)},
  { 167, -1, sizeof(::navService::ListRoutesResponse)},
  { 173, -1, sizeof(::navService::GetRouteRequest)},
  { 179, -1, sizeof(::navService::GetRouteResponse)},
  { 185, -1, sizeof(::navService::UpdateRouteRequest)},
  { 191, -1, sizeof(::navService::UpdateRouteResponse)},
  { 197, -1, sizeof(::navService::DeleteRoutesRequest)},
  { 203, -1, sizeof(::navService::DeleteRoutesResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::navService::_MoveRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::navService::_MoveResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::navService::_NavTarget_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::navService::_NavRoaming_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::navService::_NavToRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::navService::_NavToResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::navService::_NavStopRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::navService::_NavStopResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::navService::_AutoChargeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::navService::_AutoChargeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::navService::_RotateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::navService::_RotateResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::navService::_OnNavEventChangeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::navService::_MoveEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::navService::_NavEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::navService::_AutoChargeEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::navService::_RotateEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::navService::_OnNavEventChangeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::navService::_Route_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::navService::_RoutePoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::navService::_NewRouteRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::navService::_NewRouteResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::navService::_ListRoutesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::navService::_ListRoutesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::navService::_GetRouteRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::navService::_GetRouteResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::navService::_UpdateRouteRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::navService::_UpdateRouteResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::navService::_DeleteRoutesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::navService::_DeleteRoutesResponse_default_instance_),
};

const char descriptor_table_protodef_nav_2eproto[] =
  "\n\tnav.proto\022\nnavService\032\034google/api/anno"
  "tations.proto\032\tmap.proto\"h\n\013MoveRequest\022"
  "\r\n\005speed\030\001 \001(\r\022\016\n\006rspeed\030\002 \001(\r\022,\n\tdirect"
  "ion\030\003 \001(\0162\031.navService.MoveDirection\022\014\n\004"
  "mode\030\004 \001(\t\";\n\014MoveResponse\022+\n\013status_cod"
  "e\030\001 \001(\0162\026.navService.StatusCode\"(\n\tNavTa"
  "rget\022\r\n\005index\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\"\205\001\n\nNa"
  "vRoaming\0221\n\020nav_roaming_type\030\001 \001(\0162\027.nav"
  "Service.RoamingType\022\020\n\010wait_sec\030\002 \001(\005\022\036\n"
  "\026roaming_target_indexes\030\003 \003(\t\022\022\n\norder_l"
  "oop\030\004 \001(\010\"\305\001\n\014NavToRequest\022\'\n\006target\030\001 \001"
  "(\0132\025.navService.NavTargetH\000\022)\n\007roaming\030\003"
  " \001(\0132\026.navService.NavRoamingH\000\022/\n\014map_po"
  "sition\030\005 \001(\0132\027.navService.MapPositionH\000\022"
  "\r\n\005speed\030\002 \001(\r\022\021\n\tsync_mode\030\004 \001(\010B\016\n\014tar"
  "get_oneof\"\274\001\n\rNavToResponse\022+\n\013status_co"
  "de\030\001 \001(\0162\026.navService.StatusCode\022\'\n\006targ"
  "et\030\002 \001(\0132\025.navService.NavTargetH\000\022\024\n\nis_"
  "roaming\030\003 \001(\010H\000\022/\n\014map_position\030\004 \001(\0132\027."
  "navService.MapPositionH\000B\016\n\014target_oneof"
  "\"\020\n\016NavStopRequest\">\n\017NavStopResponse\022+\n"
  "\013status_code\030\001 \001(\0162\026.navService.StatusCo"
  "de\"|\n\021AutoChargeRequest\022\020\n\006charge\030\001 \001(\010H"
  "\000\022\020\n\006cancel\030\002 \001(\010H\000\022\027\n\rcharge_preset\030\003 \001"
  "(\010H\000\022\023\n\013timeout_sec\030\004 \001(\rB\025\n\023charge_opti"
  "on_oneof\"N\n\022AutoChargeResponse\0228\n\022charge"
  "_status_code\030\001 \001(\0162\034.navService.ChargeSt"
  "atusCode\"D\n\rRotateRequest\022\017\n\005angle\030\001 \001(\005"
  "H\000\022\022\n\010rollback\030\002 \001(\010H\000B\016\n\014rotate_oneof\"="
  "\n\016RotateResponse\022+\n\013status_code\030\001 \001(\0162\026."
  "navService.StatusCode\"\031\n\027OnNavEventChang"
  "eRequest\"8\n\tMoveEvent\022+\n\013status_code\030\001 \001"
  "(\0162\026.navService.StatusCode\"b\n\010NavEvent\022+"
  "\n\013status_code\030\001 \001(\0162\026.navService.StatusC"
  "ode\022)\n\nnav_target\030\002 \001(\0132\025.navService.Nav"
  "Target\"K\n\017AutoChargeEvent\0228\n\022charge_stat"
  "us_code\030\001 \001(\0162\034.navService.ChargeStatusC"
  "ode\":\n\013RotateEvent\022+\n\013status_code\030\001 \001(\0162"
  "\026.navService.StatusCode\"\237\002\n\030OnNavEventCh"
  "angeResponse\0220\n\016nav_event_type\030\001 \001(\0162\030.n"
  "avService.NavEventType\022+\n\nmove_event\030\002 \001"
  "(\0132\025.navService.MoveEventH\000\022)\n\tnav_event"
  "\030\003 \001(\0132\024.navService.NavEventH\000\022/\n\014rotate"
  "_event\030\004 \001(\0132\027.navService.RotateEventH\000\022"
  "8\n\021auto_charge_event\030\005 \001(\0132\033.navService."
  "AutoChargeEventH\000B\016\n\014change_oneof\"b\n\005Rou"
  "te\022\n\n\002id\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022\021\n\tis_activ"
  "e\030\003 \001(\010\022,\n\014route_points\030\004 \003(\0132\026.navServi"
  "ce.RoutePoint\"*\n\nRoutePoint\022\014\n\004name\030\001 \001("
  "\t\022\016\n\006rotate\030\002 \001(\r\"3\n\017NewRouteRequest\022 \n\005"
  "route\030\001 \001(\0132\021.navService.Route\"4\n\020NewRou"
  "teResponse\022 \n\005route\030\001 \001(\0132\021.navService.R"
  "oute\"\023\n\021ListRoutesRequest\"7\n\022ListRoutesR"
  "esponse\022!\n\006routes\030\001 \003(\0132\021.navService.Rou"
  "te\"\035\n\017GetRouteRequest\022\n\n\002id\030\001 \001(\t\"4\n\020Get"
  "RouteResponse\022 \n\005route\030\001 \001(\0132\021.navServic"
  "e.Route\"6\n\022UpdateRouteRequest\022 \n\005route\030\001"
  " \001(\0132\021.navService.Route\"7\n\023UpdateRouteRe"
  "sponse\022 \n\005route\030\001 \001(\0132\021.navService.Route"
  "\"(\n\023DeleteRoutesRequest\022\021\n\troutes_id\030\001 \003"
  "(\t\"\026\n\024DeleteRoutesResponse*\356\001\n\nStatusCod"
  "e\022\013\n\007UNKNOWN\020\000\022\013\n\007STOPPED\020\001\022\n\n\006MOVING\020\002\022"
  "\r\n\tPREPARING\020\003\022\n\n\006CANCEL\020\004\022\014\n\010RELEASED\020\005"
  "\022\020\n\014ERR_OBSTACLE\020\n\022\021\n\rERR_NOT_READY\020\013\022\022\n"
  "\016ERR_MOTOR_FAIL\020\014\022\024\n\020ERR_WRONG_TARGET\020\r\022"
  "\016\n\nREJ_MOVING\020\024\022\016\n\nREJ_NAVING\020\025\022\020\n\014REJ_C"
  "HARGING\020\026\022\020\n\014REJ_ROTATING\020\027*\230\001\n\rMoveDire"
  "ction\022\013\n\007RELEASE\020\000\022\013\n\007FORWARD\020\001\022\014\n\010BACKW"
  "ARD\020\002\022\010\n\004LEFT\020\003\022\t\n\005RIGHT\020\004\022\020\n\014LEFT_FORWA"
  "RD\020\005\022\021\n\rRIGHT_FORWARD\020\006\022\021\n\rLEFT_BACKWARD"
  "\020\007\022\022\n\016RIGHT_BACKWARD\020\010*Y\n\013RoamingType\022\031\n"
  "\025ROAMING_TYPE_CONTINUE\020\000\022\026\n\022ROAMING_TYPE"
  "_ORDER\020\001\022\027\n\023ROAMING_TYPE_RANDOM\020\002*\372\001\n\020Ch"
  "argeStatusCode\022\031\n\025CHARGE_STATUS_UNKNOWN\020"
  "\000\022\033\n\027CHARGE_STATUS_PREPARING\020\001\022\032\n\026CHARGE"
  "_STATUS_RELEASED\020\002\022\034\n\030CHARGE_STATUS_CONN"
  "ECTING\020\003\022\032\n\026CHARGE_STATUS_CHARGING\020\004\022\037\n\033"
  "CHARGE_STATUS_DISCONNECTING\020\005\022\027\n\023CHARGE_"
  "CONNECT_FAIL\020\006\022\036\n\032CHARGE_STATUS_NAV_OBST"
  "ACLE\020\007*n\n\014NavEventType\022\026\n\022NAV_EVENT_REVE"
  "RSED\020\000\022\016\n\nMOVE_EVENT\020\001\022\r\n\tNAV_EVENT\020\002\022\025\n"
  "\021AUTO_CHARGE_EVENT\020\003\022\020\n\014ROTATE_EVENT\020\0042\316"
  "\010\n\rNavController\022W\n\004Move\022\027.navService.Mo"
  "veRequest\032\030.navService.MoveResponse\"\030\202\323\344"
  "\223\002\022\022\020/api/v2/nav/move(\0010\001\022[\n\005NavTo\022\030.nav"
  "Service.NavToRequest\032\031.navService.NavToR"
  "esponse\"\035\202\323\344\223\002\027\"\022/api/v2/nav/nav_to:\001*\022c"
  "\n\007NavStop\022\032.navService.NavStopRequest\032\033."
  "navService.NavStopResponse\"\037\202\323\344\223\002\031\"\024/api"
  "/v2/nav/nav_stop:\001*\022o\n\nAutoCharge\022\035.navS"
  "ervice.AutoChargeRequest\032\036.navService.Au"
  "toChargeResponse\"\"\202\323\344\223\002\034\"\027/api/v2/nav/au"
  "to_charge:\001*\022^\n\006Rotate\022\031.navService.Rota"
  "teRequest\032\032.navService.RotateResponse\"\035\202"
  "\323\344\223\002\027\"\022/api/v2/nav/rotate:\001*\022\210\001\n\020OnNavEv"
  "entChange\022#.navService.OnNavEventChangeR"
  "equest\032$.navService.OnNavEventChangeResp"
  "onse\"\'\202\323\344\223\002!\022\037/api/v2/nav/on_nav_event_c"
  "hange0\001\022g\n\010NewRoute\022\033.navService.NewRout"
  "eRequest\032\034.navService.NewRouteResponse\" "
  "\202\323\344\223\002\032\"\025/api/v2/nav/new_route:\001*\022o\n\nList"
  "Routes\022\035.navService.ListRoutesRequest\032\036."
  "navService.ListRoutesResponse\"\"\202\323\344\223\002\034\"\027/"
  "api/v2/nav/list_routes:\001*\022s\n\013UpdateRoute"
  "\022\036.navService.UpdateRouteRequest\032\037.navSe"
  "rvice.UpdateRouteResponse\"#\202\323\344\223\002\035\"\030/api/"
  "v2/nav/update_route:\001*\022w\n\014DeleteRoutes\022\037"
  ".navService.DeleteRoutesRequest\032 .navSer"
  "vice.DeleteRoutesResponse\"$\202\323\344\223\002\036\"\031/api/"
  "v2/nav/delete_routes:\001*b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_nav_2eproto_deps[2] = {
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
  &::descriptor_table_map_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_nav_2eproto_sccs[30] = {
  &scc_info_AutoChargeEvent_nav_2eproto.base,
  &scc_info_AutoChargeRequest_nav_2eproto.base,
  &scc_info_AutoChargeResponse_nav_2eproto.base,
  &scc_info_DeleteRoutesRequest_nav_2eproto.base,
  &scc_info_DeleteRoutesResponse_nav_2eproto.base,
  &scc_info_GetRouteRequest_nav_2eproto.base,
  &scc_info_GetRouteResponse_nav_2eproto.base,
  &scc_info_ListRoutesRequest_nav_2eproto.base,
  &scc_info_ListRoutesResponse_nav_2eproto.base,
  &scc_info_MoveEvent_nav_2eproto.base,
  &scc_info_MoveRequest_nav_2eproto.base,
  &scc_info_MoveResponse_nav_2eproto.base,
  &scc_info_NavEvent_nav_2eproto.base,
  &scc_info_NavRoaming_nav_2eproto.base,
  &scc_info_NavStopRequest_nav_2eproto.base,
  &scc_info_NavStopResponse_nav_2eproto.base,
  &scc_info_NavTarget_nav_2eproto.base,
  &scc_info_NavToRequest_nav_2eproto.base,
  &scc_info_NavToResponse_nav_2eproto.base,
  &scc_info_NewRouteRequest_nav_2eproto.base,
  &scc_info_NewRouteResponse_nav_2eproto.base,
  &scc_info_OnNavEventChangeRequest_nav_2eproto.base,
  &scc_info_OnNavEventChangeResponse_nav_2eproto.base,
  &scc_info_RotateEvent_nav_2eproto.base,
  &scc_info_RotateRequest_nav_2eproto.base,
  &scc_info_RotateResponse_nav_2eproto.base,
  &scc_info_Route_nav_2eproto.base,
  &scc_info_RoutePoint_nav_2eproto.base,
  &scc_info_UpdateRouteRequest_nav_2eproto.base,
  &scc_info_UpdateRouteResponse_nav_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_nav_2eproto_once;
static bool descriptor_table_nav_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_nav_2eproto = {
  &descriptor_table_nav_2eproto_initialized, descriptor_table_protodef_nav_2eproto, "nav.proto", 4391,
  &descriptor_table_nav_2eproto_once, descriptor_table_nav_2eproto_sccs, descriptor_table_nav_2eproto_deps, 30, 2,
  schemas, file_default_instances, TableStruct_nav_2eproto::offsets,
  file_level_metadata_nav_2eproto, 30, file_level_enum_descriptors_nav_2eproto, file_level_service_descriptors_nav_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_nav_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_nav_2eproto), true);
namespace navService {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StatusCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_nav_2eproto);
  return file_level_enum_descriptors_nav_2eproto[0];
}
bool StatusCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 10:
    case 11:
    case 12:
    case 13:
    case 20:
    case 21:
    case 22:
    case 23:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MoveDirection_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_nav_2eproto);
  return file_level_enum_descriptors_nav_2eproto[1];
}
bool MoveDirection_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RoamingType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_nav_2eproto);
  return file_level_enum_descriptors_nav_2eproto[2];
}
bool RoamingType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChargeStatusCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_nav_2eproto);
  return file_level_enum_descriptors_nav_2eproto[3];
}
bool ChargeStatusCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NavEventType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_nav_2eproto);
  return file_level_enum_descriptors_nav_2eproto[4];
}
bool NavEventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void MoveRequest::InitAsDefaultInstance() {
}
class MoveRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MoveRequest::kSpeedFieldNumber;
const int MoveRequest::kRspeedFieldNumber;
const int MoveRequest::kDirectionFieldNumber;
const int MoveRequest::kModeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MoveRequest::MoveRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:navService.MoveRequest)
}
MoveRequest::MoveRequest(const MoveRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  mode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.mode().size() > 0) {
    mode_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.mode_);
  }
  ::memcpy(&speed_, &from.speed_,
    static_cast<size_t>(reinterpret_cast<char*>(&direction_) -
    reinterpret_cast<char*>(&speed_)) + sizeof(direction_));
  // @@protoc_insertion_point(copy_constructor:navService.MoveRequest)
}

void MoveRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MoveRequest_nav_2eproto.base);
  mode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&speed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&direction_) -
      reinterpret_cast<char*>(&speed_)) + sizeof(direction_));
}

MoveRequest::~MoveRequest() {
  // @@protoc_insertion_point(destructor:navService.MoveRequest)
  SharedDtor();
}

void MoveRequest::SharedDtor() {
  mode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MoveRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoveRequest& MoveRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoveRequest_nav_2eproto.base);
  return *internal_default_instance();
}


void MoveRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:navService.MoveRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mode_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&speed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&direction_) -
      reinterpret_cast<char*>(&speed_)) + sizeof(direction_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MoveRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 speed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 rspeed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          rspeed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .navService.MoveDirection direction = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_direction(static_cast<::navService::MoveDirection>(val));
        } else goto handle_unusual;
        continue;
      // string mode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_mode(), ptr, ctx, "navService.MoveRequest.mode");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MoveRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:navService.MoveRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 speed = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 rspeed = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rspeed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .navService.MoveDirection direction = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_direction(static_cast< ::navService::MoveDirection >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string mode = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_mode()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->mode().data(), static_cast<int>(this->mode().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "navService.MoveRequest.mode"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:navService.MoveRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:navService.MoveRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MoveRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:navService.MoveRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 speed = 1;
  if (this->speed() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->speed(), output);
  }

  // uint32 rspeed = 2;
  if (this->rspeed() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->rspeed(), output);
  }

  // .navService.MoveDirection direction = 3;
  if (this->direction() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->direction(), output);
  }

  // string mode = 4;
  if (this->mode().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->mode().data(), static_cast<int>(this->mode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "navService.MoveRequest.mode");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->mode(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:navService.MoveRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* MoveRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:navService.MoveRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 speed = 1;
  if (this->speed() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->speed(), target);
  }

  // uint32 rspeed = 2;
  if (this->rspeed() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->rspeed(), target);
  }

  // .navService.MoveDirection direction = 3;
  if (this->direction() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->direction(), target);
  }

  // string mode = 4;
  if (this->mode().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->mode().data(), static_cast<int>(this->mode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "navService.MoveRequest.mode");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->mode(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:navService.MoveRequest)
  return target;
}

size_t MoveRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:navService.MoveRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string mode = 4;
  if (this->mode().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->mode());
  }

  // uint32 speed = 1;
  if (this->speed() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->speed());
  }

  // uint32 rspeed = 2;
  if (this->rspeed() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->rspeed());
  }

  // .navService.MoveDirection direction = 3;
  if (this->direction() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->direction());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoveRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:navService.MoveRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MoveRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoveRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:navService.MoveRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:navService.MoveRequest)
    MergeFrom(*source);
  }
}

void MoveRequest::MergeFrom(const MoveRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:navService.MoveRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.mode().size() > 0) {

    mode_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.mode_);
  }
  if (from.speed() != 0) {
    set_speed(from.speed());
  }
  if (from.rspeed() != 0) {
    set_rspeed(from.rspeed());
  }
  if (from.direction() != 0) {
    set_direction(from.direction());
  }
}

void MoveRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:navService.MoveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveRequest::CopyFrom(const MoveRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:navService.MoveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveRequest::IsInitialized() const {
  return true;
}

void MoveRequest::Swap(MoveRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MoveRequest::InternalSwap(MoveRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  mode_.Swap(&other->mode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(speed_, other->speed_);
  swap(rspeed_, other->rspeed_);
  swap(direction_, other->direction_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MoveResponse::InitAsDefaultInstance() {
}
class MoveResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MoveResponse::kStatusCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MoveResponse::MoveResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:navService.MoveResponse)
}
MoveResponse::MoveResponse(const MoveResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_code_ = from.status_code_;
  // @@protoc_insertion_point(copy_constructor:navService.MoveResponse)
}

void MoveResponse::SharedCtor() {
  status_code_ = 0;
}

MoveResponse::~MoveResponse() {
  // @@protoc_insertion_point(destructor:navService.MoveResponse)
  SharedDtor();
}

void MoveResponse::SharedDtor() {
}

void MoveResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoveResponse& MoveResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoveResponse_nav_2eproto.base);
  return *internal_default_instance();
}


void MoveResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:navService.MoveResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_code_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MoveResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .navService.StatusCode status_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_status_code(static_cast<::navService::StatusCode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MoveResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:navService.MoveResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .navService.StatusCode status_code = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status_code(static_cast< ::navService::StatusCode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:navService.MoveResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:navService.MoveResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MoveResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:navService.MoveResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .navService.StatusCode status_code = 1;
  if (this->status_code() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->status_code(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:navService.MoveResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* MoveResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:navService.MoveResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .navService.StatusCode status_code = 1;
  if (this->status_code() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->status_code(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:navService.MoveResponse)
  return target;
}

size_t MoveResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:navService.MoveResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .navService.StatusCode status_code = 1;
  if (this->status_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->status_code());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoveResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:navService.MoveResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MoveResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoveResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:navService.MoveResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:navService.MoveResponse)
    MergeFrom(*source);
  }
}

void MoveResponse::MergeFrom(const MoveResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:navService.MoveResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status_code() != 0) {
    set_status_code(from.status_code());
  }
}

void MoveResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:navService.MoveResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveResponse::CopyFrom(const MoveResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:navService.MoveResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveResponse::IsInitialized() const {
  return true;
}

void MoveResponse::Swap(MoveResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MoveResponse::InternalSwap(MoveResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_code_, other->status_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NavTarget::InitAsDefaultInstance() {
}
class NavTarget::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NavTarget::kIndexFieldNumber;
const int NavTarget::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NavTarget::NavTarget()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:navService.NavTarget)
}
NavTarget::NavTarget(const NavTarget& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  index_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.index().size() > 0) {
    index_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.index_);
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:navService.NavTarget)
}

void NavTarget::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NavTarget_nav_2eproto.base);
  index_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

NavTarget::~NavTarget() {
  // @@protoc_insertion_point(destructor:navService.NavTarget)
  SharedDtor();
}

void NavTarget::SharedDtor() {
  index_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NavTarget::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NavTarget& NavTarget::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NavTarget_nav_2eproto.base);
  return *internal_default_instance();
}


void NavTarget::Clear() {
// @@protoc_insertion_point(message_clear_start:navService.NavTarget)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  index_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NavTarget::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_index(), ptr, ctx, "navService.NavTarget.index");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "navService.NavTarget.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NavTarget::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:navService.NavTarget)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string index = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_index()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->index().data(), static_cast<int>(this->index().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "navService.NavTarget.index"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "navService.NavTarget.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:navService.NavTarget)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:navService.NavTarget)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NavTarget::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:navService.NavTarget)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string index = 1;
  if (this->index().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->index().data(), static_cast<int>(this->index().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "navService.NavTarget.index");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->index(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "navService.NavTarget.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:navService.NavTarget)
}

::PROTOBUF_NAMESPACE_ID::uint8* NavTarget::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:navService.NavTarget)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string index = 1;
  if (this->index().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->index().data(), static_cast<int>(this->index().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "navService.NavTarget.index");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->index(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "navService.NavTarget.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:navService.NavTarget)
  return target;
}

size_t NavTarget::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:navService.NavTarget)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string index = 1;
  if (this->index().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->index());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NavTarget::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:navService.NavTarget)
  GOOGLE_DCHECK_NE(&from, this);
  const NavTarget* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NavTarget>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:navService.NavTarget)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:navService.NavTarget)
    MergeFrom(*source);
  }
}

void NavTarget::MergeFrom(const NavTarget& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:navService.NavTarget)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.index().size() > 0) {

    index_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.index_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void NavTarget::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:navService.NavTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NavTarget::CopyFrom(const NavTarget& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:navService.NavTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NavTarget::IsInitialized() const {
  return true;
}

void NavTarget::Swap(NavTarget* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NavTarget::InternalSwap(NavTarget* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  index_.Swap(&other->index_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata NavTarget::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NavRoaming::InitAsDefaultInstance() {
}
class NavRoaming::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NavRoaming::kNavRoamingTypeFieldNumber;
const int NavRoaming::kWaitSecFieldNumber;
const int NavRoaming::kRoamingTargetIndexesFieldNumber;
const int NavRoaming::kOrderLoopFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NavRoaming::NavRoaming()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:navService.NavRoaming)
}
NavRoaming::NavRoaming(const NavRoaming& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      roaming_target_indexes_(from.roaming_target_indexes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&nav_roaming_type_, &from.nav_roaming_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&order_loop_) -
    reinterpret_cast<char*>(&nav_roaming_type_)) + sizeof(order_loop_));
  // @@protoc_insertion_point(copy_constructor:navService.NavRoaming)
}

void NavRoaming::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NavRoaming_nav_2eproto.base);
  ::memset(&nav_roaming_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&order_loop_) -
      reinterpret_cast<char*>(&nav_roaming_type_)) + sizeof(order_loop_));
}

NavRoaming::~NavRoaming() {
  // @@protoc_insertion_point(destructor:navService.NavRoaming)
  SharedDtor();
}

void NavRoaming::SharedDtor() {
}

void NavRoaming::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NavRoaming& NavRoaming::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NavRoaming_nav_2eproto.base);
  return *internal_default_instance();
}


void NavRoaming::Clear() {
// @@protoc_insertion_point(message_clear_start:navService.NavRoaming)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roaming_target_indexes_.Clear();
  ::memset(&nav_roaming_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&order_loop_) -
      reinterpret_cast<char*>(&nav_roaming_type_)) + sizeof(order_loop_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NavRoaming::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .navService.RoamingType nav_roaming_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_nav_roaming_type(static_cast<::navService::RoamingType>(val));
        } else goto handle_unusual;
        continue;
      // int32 wait_sec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          wait_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string roaming_target_indexes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_roaming_target_indexes(), ptr, ctx, "navService.NavRoaming.roaming_target_indexes");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // bool order_loop = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          order_loop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NavRoaming::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:navService.NavRoaming)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .navService.RoamingType nav_roaming_type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_nav_roaming_type(static_cast< ::navService::RoamingType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 wait_sec = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &wait_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string roaming_target_indexes = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_roaming_target_indexes()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->roaming_target_indexes(this->roaming_target_indexes_size() - 1).data(),
            static_cast<int>(this->roaming_target_indexes(this->roaming_target_indexes_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "navService.NavRoaming.roaming_target_indexes"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool order_loop = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &order_loop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:navService.NavRoaming)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:navService.NavRoaming)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NavRoaming::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:navService.NavRoaming)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .navService.RoamingType nav_roaming_type = 1;
  if (this->nav_roaming_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->nav_roaming_type(), output);
  }

  // int32 wait_sec = 2;
  if (this->wait_sec() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->wait_sec(), output);
  }

  // repeated string roaming_target_indexes = 3;
  for (int i = 0, n = this->roaming_target_indexes_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->roaming_target_indexes(i).data(), static_cast<int>(this->roaming_target_indexes(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "navService.NavRoaming.roaming_target_indexes");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      3, this->roaming_target_indexes(i), output);
  }

  // bool order_loop = 4;
  if (this->order_loop() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->order_loop(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:navService.NavRoaming)
}

::PROTOBUF_NAMESPACE_ID::uint8* NavRoaming::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:navService.NavRoaming)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .navService.RoamingType nav_roaming_type = 1;
  if (this->nav_roaming_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->nav_roaming_type(), target);
  }

  // int32 wait_sec = 2;
  if (this->wait_sec() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->wait_sec(), target);
  }

  // repeated string roaming_target_indexes = 3;
  for (int i = 0, n = this->roaming_target_indexes_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->roaming_target_indexes(i).data(), static_cast<int>(this->roaming_target_indexes(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "navService.NavRoaming.roaming_target_indexes");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(3, this->roaming_target_indexes(i), target);
  }

  // bool order_loop = 4;
  if (this->order_loop() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->order_loop(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:navService.NavRoaming)
  return target;
}

size_t NavRoaming::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:navService.NavRoaming)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string roaming_target_indexes = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->roaming_target_indexes_size());
  for (int i = 0, n = this->roaming_target_indexes_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->roaming_target_indexes(i));
  }

  // .navService.RoamingType nav_roaming_type = 1;
  if (this->nav_roaming_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->nav_roaming_type());
  }

  // int32 wait_sec = 2;
  if (this->wait_sec() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->wait_sec());
  }

  // bool order_loop = 4;
  if (this->order_loop() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NavRoaming::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:navService.NavRoaming)
  GOOGLE_DCHECK_NE(&from, this);
  const NavRoaming* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NavRoaming>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:navService.NavRoaming)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:navService.NavRoaming)
    MergeFrom(*source);
  }
}

void NavRoaming::MergeFrom(const NavRoaming& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:navService.NavRoaming)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  roaming_target_indexes_.MergeFrom(from.roaming_target_indexes_);
  if (from.nav_roaming_type() != 0) {
    set_nav_roaming_type(from.nav_roaming_type());
  }
  if (from.wait_sec() != 0) {
    set_wait_sec(from.wait_sec());
  }
  if (from.order_loop() != 0) {
    set_order_loop(from.order_loop());
  }
}

void NavRoaming::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:navService.NavRoaming)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NavRoaming::CopyFrom(const NavRoaming& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:navService.NavRoaming)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NavRoaming::IsInitialized() const {
  return true;
}

void NavRoaming::Swap(NavRoaming* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NavRoaming::InternalSwap(NavRoaming* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  roaming_target_indexes_.InternalSwap(CastToBase(&other->roaming_target_indexes_));
  swap(nav_roaming_type_, other->nav_roaming_type_);
  swap(wait_sec_, other->wait_sec_);
  swap(order_loop_, other->order_loop_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NavRoaming::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NavToRequest::InitAsDefaultInstance() {
  ::navService::_NavToRequest_default_instance_.target_ = const_cast< ::navService::NavTarget*>(
      ::navService::NavTarget::internal_default_instance());
  ::navService::_NavToRequest_default_instance_.roaming_ = const_cast< ::navService::NavRoaming*>(
      ::navService::NavRoaming::internal_default_instance());
  ::navService::_NavToRequest_default_instance_.map_position_ = const_cast< ::navService::MapPosition*>(
      ::navService::MapPosition::internal_default_instance());
}
class NavToRequest::HasBitSetters {
 public:
  static const ::navService::NavTarget& target(const NavToRequest* msg);
  static const ::navService::NavRoaming& roaming(const NavToRequest* msg);
  static const ::navService::MapPosition& map_position(const NavToRequest* msg);
};

const ::navService::NavTarget&
NavToRequest::HasBitSetters::target(const NavToRequest* msg) {
  return *msg->target_oneof_.target_;
}
const ::navService::NavRoaming&
NavToRequest::HasBitSetters::roaming(const NavToRequest* msg) {
  return *msg->target_oneof_.roaming_;
}
const ::navService::MapPosition&
NavToRequest::HasBitSetters::map_position(const NavToRequest* msg) {
  return *msg->target_oneof_.map_position_;
}
void NavToRequest::set_allocated_target(::navService::NavTarget* target) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_target_oneof();
  if (target) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      target = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target, submessage_arena);
    }
    set_has_target();
    target_oneof_.target_ = target;
  }
  // @@protoc_insertion_point(field_set_allocated:navService.NavToRequest.target)
}
void NavToRequest::set_allocated_roaming(::navService::NavRoaming* roaming) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_target_oneof();
  if (roaming) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      roaming = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, roaming, submessage_arena);
    }
    set_has_roaming();
    target_oneof_.roaming_ = roaming;
  }
  // @@protoc_insertion_point(field_set_allocated:navService.NavToRequest.roaming)
}
void NavToRequest::set_allocated_map_position(::navService::MapPosition* map_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_target_oneof();
  if (map_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      map_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, map_position, submessage_arena);
    }
    set_has_map_position();
    target_oneof_.map_position_ = map_position;
  }
  // @@protoc_insertion_point(field_set_allocated:navService.NavToRequest.map_position)
}
void NavToRequest::clear_map_position() {
  if (has_map_position()) {
    delete target_oneof_.map_position_;
    clear_has_target_oneof();
  }
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NavToRequest::kTargetFieldNumber;
const int NavToRequest::kRoamingFieldNumber;
const int NavToRequest::kMapPositionFieldNumber;
const int NavToRequest::kSpeedFieldNumber;
const int NavToRequest::kSyncModeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NavToRequest::NavToRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:navService.NavToRequest)
}
NavToRequest::NavToRequest(const NavToRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&speed_, &from.speed_,
    static_cast<size_t>(reinterpret_cast<char*>(&sync_mode_) -
    reinterpret_cast<char*>(&speed_)) + sizeof(sync_mode_));
  clear_has_target_oneof();
  switch (from.target_oneof_case()) {
    case kTarget: {
      mutable_target()->::navService::NavTarget::MergeFrom(from.target());
      break;
    }
    case kRoaming: {
      mutable_roaming()->::navService::NavRoaming::MergeFrom(from.roaming());
      break;
    }
    case kMapPosition: {
      mutable_map_position()->::navService::MapPosition::MergeFrom(from.map_position());
      break;
    }
    case TARGET_ONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:navService.NavToRequest)
}

void NavToRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NavToRequest_nav_2eproto.base);
  ::memset(&speed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sync_mode_) -
      reinterpret_cast<char*>(&speed_)) + sizeof(sync_mode_));
  clear_has_target_oneof();
}

NavToRequest::~NavToRequest() {
  // @@protoc_insertion_point(destructor:navService.NavToRequest)
  SharedDtor();
}

void NavToRequest::SharedDtor() {
  if (has_target_oneof()) {
    clear_target_oneof();
  }
}

void NavToRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NavToRequest& NavToRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NavToRequest_nav_2eproto.base);
  return *internal_default_instance();
}


void NavToRequest::clear_target_oneof() {
// @@protoc_insertion_point(one_of_clear_start:navService.NavToRequest)
  switch (target_oneof_case()) {
    case kTarget: {
      delete target_oneof_.target_;
      break;
    }
    case kRoaming: {
      delete target_oneof_.roaming_;
      break;
    }
    case kMapPosition: {
      delete target_oneof_.map_position_;
      break;
    }
    case TARGET_ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TARGET_ONEOF_NOT_SET;
}


void NavToRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:navService.NavToRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&speed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sync_mode_) -
      reinterpret_cast<char*>(&speed_)) + sizeof(sync_mode_));
  clear_target_oneof();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NavToRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .navService.NavTarget target = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_target(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 speed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .navService.NavRoaming roaming = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_roaming(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool sync_mode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          sync_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .navService.MapPosition map_position = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_map_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NavToRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:navService.NavToRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .navService.NavTarget target = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_target()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 speed = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .navService.NavRoaming roaming = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_roaming()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool sync_mode = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sync_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .navService.MapPosition map_position = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_map_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:navService.NavToRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:navService.NavToRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NavToRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:navService.NavToRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .navService.NavTarget target = 1;
  if (has_target()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::target(this), output);
  }

  // uint32 speed = 2;
  if (this->speed() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->speed(), output);
  }

  // .navService.NavRoaming roaming = 3;
  if (has_roaming()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::roaming(this), output);
  }

  // bool sync_mode = 4;
  if (this->sync_mode() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->sync_mode(), output);
  }

  // .navService.MapPosition map_position = 5;
  if (has_map_position()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::map_position(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:navService.NavToRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* NavToRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:navService.NavToRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .navService.NavTarget target = 1;
  if (has_target()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::target(this), target);
  }

  // uint32 speed = 2;
  if (this->speed() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->speed(), target);
  }

  // .navService.NavRoaming roaming = 3;
  if (has_roaming()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::roaming(this), target);
  }

  // bool sync_mode = 4;
  if (this->sync_mode() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->sync_mode(), target);
  }

  // .navService.MapPosition map_position = 5;
  if (has_map_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::map_position(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:navService.NavToRequest)
  return target;
}

size_t NavToRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:navService.NavToRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 speed = 2;
  if (this->speed() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->speed());
  }

  // bool sync_mode = 4;
  if (this->sync_mode() != 0) {
    total_size += 1 + 1;
  }

  switch (target_oneof_case()) {
    // .navService.NavTarget target = 1;
    case kTarget: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *target_oneof_.target_);
      break;
    }
    // .navService.NavRoaming roaming = 3;
    case kRoaming: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *target_oneof_.roaming_);
      break;
    }
    // .navService.MapPosition map_position = 5;
    case kMapPosition: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *target_oneof_.map_position_);
      break;
    }
    case TARGET_ONEOF_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NavToRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:navService.NavToRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const NavToRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NavToRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:navService.NavToRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:navService.NavToRequest)
    MergeFrom(*source);
  }
}

void NavToRequest::MergeFrom(const NavToRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:navService.NavToRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.speed() != 0) {
    set_speed(from.speed());
  }
  if (from.sync_mode() != 0) {
    set_sync_mode(from.sync_mode());
  }
  switch (from.target_oneof_case()) {
    case kTarget: {
      mutable_target()->::navService::NavTarget::MergeFrom(from.target());
      break;
    }
    case kRoaming: {
      mutable_roaming()->::navService::NavRoaming::MergeFrom(from.roaming());
      break;
    }
    case kMapPosition: {
      mutable_map_position()->::navService::MapPosition::MergeFrom(from.map_position());
      break;
    }
    case TARGET_ONEOF_NOT_SET: {
      break;
    }
  }
}

void NavToRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:navService.NavToRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NavToRequest::CopyFrom(const NavToRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:navService.NavToRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NavToRequest::IsInitialized() const {
  return true;
}

void NavToRequest::Swap(NavToRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NavToRequest::InternalSwap(NavToRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(speed_, other->speed_);
  swap(sync_mode_, other->sync_mode_);
  swap(target_oneof_, other->target_oneof_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata NavToRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NavToResponse::InitAsDefaultInstance() {
  ::navService::_NavToResponse_default_instance_.target_ = const_cast< ::navService::NavTarget*>(
      ::navService::NavTarget::internal_default_instance());
  ::navService::_NavToResponse_default_instance_.is_roaming_ = false;
  ::navService::_NavToResponse_default_instance_.map_position_ = const_cast< ::navService::MapPosition*>(
      ::navService::MapPosition::internal_default_instance());
}
class NavToResponse::HasBitSetters {
 public:
  static const ::navService::NavTarget& target(const NavToResponse* msg);
  static const ::navService::MapPosition& map_position(const NavToResponse* msg);
};

const ::navService::NavTarget&
NavToResponse::HasBitSetters::target(const NavToResponse* msg) {
  return *msg->target_oneof_.target_;
}
const ::navService::MapPosition&
NavToResponse::HasBitSetters::map_position(const NavToResponse* msg) {
  return *msg->target_oneof_.map_position_;
}
void NavToResponse::set_allocated_target(::navService::NavTarget* target) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_target_oneof();
  if (target) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      target = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target, submessage_arena);
    }
    set_has_target();
    target_oneof_.target_ = target;
  }
  // @@protoc_insertion_point(field_set_allocated:navService.NavToResponse.target)
}
void NavToResponse::set_allocated_map_position(::navService::MapPosition* map_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_target_oneof();
  if (map_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      map_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, map_position, submessage_arena);
    }
    set_has_map_position();
    target_oneof_.map_position_ = map_position;
  }
  // @@protoc_insertion_point(field_set_allocated:navService.NavToResponse.map_position)
}
void NavToResponse::clear_map_position() {
  if (has_map_position()) {
    delete target_oneof_.map_position_;
    clear_has_target_oneof();
  }
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NavToResponse::kStatusCodeFieldNumber;
const int NavToResponse::kTargetFieldNumber;
const int NavToResponse::kIsRoamingFieldNumber;
const int NavToResponse::kMapPositionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NavToResponse::NavToResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:navService.NavToResponse)
}
NavToResponse::NavToResponse(const NavToResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_code_ = from.status_code_;
  clear_has_target_oneof();
  switch (from.target_oneof_case()) {
    case kTarget: {
      mutable_target()->::navService::NavTarget::MergeFrom(from.target());
      break;
    }
    case kIsRoaming: {
      set_is_roaming(from.is_roaming());
      break;
    }
    case kMapPosition: {
      mutable_map_position()->::navService::MapPosition::MergeFrom(from.map_position());
      break;
    }
    case TARGET_ONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:navService.NavToResponse)
}

void NavToResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NavToResponse_nav_2eproto.base);
  status_code_ = 0;
  clear_has_target_oneof();
}

NavToResponse::~NavToResponse() {
  // @@protoc_insertion_point(destructor:navService.NavToResponse)
  SharedDtor();
}

void NavToResponse::SharedDtor() {
  if (has_target_oneof()) {
    clear_target_oneof();
  }
}

void NavToResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NavToResponse& NavToResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NavToResponse_nav_2eproto.base);
  return *internal_default_instance();
}


void NavToResponse::clear_target_oneof() {
// @@protoc_insertion_point(one_of_clear_start:navService.NavToResponse)
  switch (target_oneof_case()) {
    case kTarget: {
      delete target_oneof_.target_;
      break;
    }
    case kIsRoaming: {
      // No need to clear
      break;
    }
    case kMapPosition: {
      delete target_oneof_.map_position_;
      break;
    }
    case TARGET_ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TARGET_ONEOF_NOT_SET;
}


void NavToResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:navService.NavToResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_code_ = 0;
  clear_target_oneof();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NavToResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .navService.StatusCode status_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_status_code(static_cast<::navService::StatusCode>(val));
        } else goto handle_unusual;
        continue;
      // .navService.NavTarget target = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_target(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_roaming = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          set_is_roaming(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .navService.MapPosition map_position = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_map_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NavToResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:navService.NavToResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .navService.StatusCode status_code = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status_code(static_cast< ::navService::StatusCode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .navService.NavTarget target = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_target()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_roaming = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          clear_target_oneof();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &target_oneof_.is_roaming_)));
          set_has_is_roaming();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .navService.MapPosition map_position = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_map_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:navService.NavToResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:navService.NavToResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NavToResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:navService.NavToResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .navService.StatusCode status_code = 1;
  if (this->status_code() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->status_code(), output);
  }

  // .navService.NavTarget target = 2;
  if (has_target()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::target(this), output);
  }

  // bool is_roaming = 3;
  if (has_is_roaming()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->is_roaming(), output);
  }

  // .navService.MapPosition map_position = 4;
  if (has_map_position()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::map_position(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:navService.NavToResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* NavToResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:navService.NavToResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .navService.StatusCode status_code = 1;
  if (this->status_code() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->status_code(), target);
  }

  // .navService.NavTarget target = 2;
  if (has_target()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::target(this), target);
  }

  // bool is_roaming = 3;
  if (has_is_roaming()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->is_roaming(), target);
  }

  // .navService.MapPosition map_position = 4;
  if (has_map_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::map_position(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:navService.NavToResponse)
  return target;
}

size_t NavToResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:navService.NavToResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .navService.StatusCode status_code = 1;
  if (this->status_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->status_code());
  }

  switch (target_oneof_case()) {
    // .navService.NavTarget target = 2;
    case kTarget: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *target_oneof_.target_);
      break;
    }
    // bool is_roaming = 3;
    case kIsRoaming: {
      total_size += 1 + 1;
      break;
    }
    // .navService.MapPosition map_position = 4;
    case kMapPosition: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *target_oneof_.map_position_);
      break;
    }
    case TARGET_ONEOF_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NavToResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:navService.NavToResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const NavToResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NavToResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:navService.NavToResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:navService.NavToResponse)
    MergeFrom(*source);
  }
}

void NavToResponse::MergeFrom(const NavToResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:navService.NavToResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status_code() != 0) {
    set_status_code(from.status_code());
  }
  switch (from.target_oneof_case()) {
    case kTarget: {
      mutable_target()->::navService::NavTarget::MergeFrom(from.target());
      break;
    }
    case kIsRoaming: {
      set_is_roaming(from.is_roaming());
      break;
    }
    case kMapPosition: {
      mutable_map_position()->::navService::MapPosition::MergeFrom(from.map_position());
      break;
    }
    case TARGET_ONEOF_NOT_SET: {
      break;
    }
  }
}

void NavToResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:navService.NavToResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NavToResponse::CopyFrom(const NavToResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:navService.NavToResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NavToResponse::IsInitialized() const {
  return true;
}

void NavToResponse::Swap(NavToResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NavToResponse::InternalSwap(NavToResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_code_, other->status_code_);
  swap(target_oneof_, other->target_oneof_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata NavToResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NavStopRequest::InitAsDefaultInstance() {
}
class NavStopRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NavStopRequest::NavStopRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:navService.NavStopRequest)
}
NavStopRequest::NavStopRequest(const NavStopRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:navService.NavStopRequest)
}

void NavStopRequest::SharedCtor() {
}

NavStopRequest::~NavStopRequest() {
  // @@protoc_insertion_point(destructor:navService.NavStopRequest)
  SharedDtor();
}

void NavStopRequest::SharedDtor() {
}

void NavStopRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NavStopRequest& NavStopRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NavStopRequest_nav_2eproto.base);
  return *internal_default_instance();
}


void NavStopRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:navService.NavStopRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NavStopRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NavStopRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:navService.NavStopRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:navService.NavStopRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:navService.NavStopRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NavStopRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:navService.NavStopRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:navService.NavStopRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* NavStopRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:navService.NavStopRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:navService.NavStopRequest)
  return target;
}

size_t NavStopRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:navService.NavStopRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NavStopRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:navService.NavStopRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const NavStopRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NavStopRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:navService.NavStopRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:navService.NavStopRequest)
    MergeFrom(*source);
  }
}

void NavStopRequest::MergeFrom(const NavStopRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:navService.NavStopRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void NavStopRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:navService.NavStopRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NavStopRequest::CopyFrom(const NavStopRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:navService.NavStopRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NavStopRequest::IsInitialized() const {
  return true;
}

void NavStopRequest::Swap(NavStopRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NavStopRequest::InternalSwap(NavStopRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NavStopRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NavStopResponse::InitAsDefaultInstance() {
}
class NavStopResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NavStopResponse::kStatusCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NavStopResponse::NavStopResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:navService.NavStopResponse)
}
NavStopResponse::NavStopResponse(const NavStopResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_code_ = from.status_code_;
  // @@protoc_insertion_point(copy_constructor:navService.NavStopResponse)
}

void NavStopResponse::SharedCtor() {
  status_code_ = 0;
}

NavStopResponse::~NavStopResponse() {
  // @@protoc_insertion_point(destructor:navService.NavStopResponse)
  SharedDtor();
}

void NavStopResponse::SharedDtor() {
}

void NavStopResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NavStopResponse& NavStopResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NavStopResponse_nav_2eproto.base);
  return *internal_default_instance();
}


void NavStopResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:navService.NavStopResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_code_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NavStopResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .navService.StatusCode status_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_status_code(static_cast<::navService::StatusCode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NavStopResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:navService.NavStopResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .navService.StatusCode status_code = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status_code(static_cast< ::navService::StatusCode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:navService.NavStopResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:navService.NavStopResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NavStopResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:navService.NavStopResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .navService.StatusCode status_code = 1;
  if (this->status_code() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->status_code(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:navService.NavStopResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* NavStopResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:navService.NavStopResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .navService.StatusCode status_code = 1;
  if (this->status_code() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->status_code(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:navService.NavStopResponse)
  return target;
}

size_t NavStopResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:navService.NavStopResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .navService.StatusCode status_code = 1;
  if (this->status_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->status_code());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NavStopResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:navService.NavStopResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const NavStopResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NavStopResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:navService.NavStopResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:navService.NavStopResponse)
    MergeFrom(*source);
  }
}

void NavStopResponse::MergeFrom(const NavStopResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:navService.NavStopResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status_code() != 0) {
    set_status_code(from.status_code());
  }
}

void NavStopResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:navService.NavStopResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NavStopResponse::CopyFrom(const NavStopResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:navService.NavStopResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NavStopResponse::IsInitialized() const {
  return true;
}

void NavStopResponse::Swap(NavStopResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NavStopResponse::InternalSwap(NavStopResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_code_, other->status_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NavStopResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AutoChargeRequest::InitAsDefaultInstance() {
  ::navService::_AutoChargeRequest_default_instance_.charge_ = false;
  ::navService::_AutoChargeRequest_default_instance_.cancel_ = false;
  ::navService::_AutoChargeRequest_default_instance_.charge_preset_ = false;
}
class AutoChargeRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AutoChargeRequest::kChargeFieldNumber;
const int AutoChargeRequest::kCancelFieldNumber;
const int AutoChargeRequest::kChargePresetFieldNumber;
const int AutoChargeRequest::kTimeoutSecFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AutoChargeRequest::AutoChargeRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:navService.AutoChargeRequest)
}
AutoChargeRequest::AutoChargeRequest(const AutoChargeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  timeout_sec_ = from.timeout_sec_;
  clear_has_charge_option_oneof();
  switch (from.charge_option_oneof_case()) {
    case kCharge: {
      set_charge(from.charge());
      break;
    }
    case kCancel: {
      set_cancel(from.cancel());
      break;
    }
    case kChargePreset: {
      set_charge_preset(from.charge_preset());
      break;
    }
    case CHARGE_OPTION_ONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:navService.AutoChargeRequest)
}

void AutoChargeRequest::SharedCtor() {
  timeout_sec_ = 0u;
  clear_has_charge_option_oneof();
}

AutoChargeRequest::~AutoChargeRequest() {
  // @@protoc_insertion_point(destructor:navService.AutoChargeRequest)
  SharedDtor();
}

void AutoChargeRequest::SharedDtor() {
  if (has_charge_option_oneof()) {
    clear_charge_option_oneof();
  }
}

void AutoChargeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AutoChargeRequest& AutoChargeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AutoChargeRequest_nav_2eproto.base);
  return *internal_default_instance();
}


void AutoChargeRequest::clear_charge_option_oneof() {
// @@protoc_insertion_point(one_of_clear_start:navService.AutoChargeRequest)
  switch (charge_option_oneof_case()) {
    case kCharge: {
      // No need to clear
      break;
    }
    case kCancel: {
      // No need to clear
      break;
    }
    case kChargePreset: {
      // No need to clear
      break;
    }
    case CHARGE_OPTION_ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CHARGE_OPTION_ONEOF_NOT_SET;
}


void AutoChargeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:navService.AutoChargeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  timeout_sec_ = 0u;
  clear_charge_option_oneof();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AutoChargeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool charge = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          set_charge(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool cancel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          set_cancel(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool charge_preset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          set_charge_preset(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 timeout_sec = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          timeout_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AutoChargeRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:navService.AutoChargeRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool charge = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          clear_charge_option_oneof();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &charge_option_oneof_.charge_)));
          set_has_charge();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool cancel = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          clear_charge_option_oneof();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &charge_option_oneof_.cancel_)));
          set_has_cancel();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool charge_preset = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          clear_charge_option_oneof();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &charge_option_oneof_.charge_preset_)));
          set_has_charge_preset();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 timeout_sec = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeout_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:navService.AutoChargeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:navService.AutoChargeRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AutoChargeRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:navService.AutoChargeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool charge = 1;
  if (has_charge()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->charge(), output);
  }

  // bool cancel = 2;
  if (has_cancel()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->cancel(), output);
  }

  // bool charge_preset = 3;
  if (has_charge_preset()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->charge_preset(), output);
  }

  // uint32 timeout_sec = 4;
  if (this->timeout_sec() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(4, this->timeout_sec(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:navService.AutoChargeRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* AutoChargeRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:navService.AutoChargeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool charge = 1;
  if (has_charge()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->charge(), target);
  }

  // bool cancel = 2;
  if (has_cancel()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->cancel(), target);
  }

  // bool charge_preset = 3;
  if (has_charge_preset()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->charge_preset(), target);
  }

  // uint32 timeout_sec = 4;
  if (this->timeout_sec() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->timeout_sec(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:navService.AutoChargeRequest)
  return target;
}

size_t AutoChargeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:navService.AutoChargeRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 timeout_sec = 4;
  if (this->timeout_sec() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->timeout_sec());
  }

  switch (charge_option_oneof_case()) {
    // bool charge = 1;
    case kCharge: {
      total_size += 1 + 1;
      break;
    }
    // bool cancel = 2;
    case kCancel: {
      total_size += 1 + 1;
      break;
    }
    // bool charge_preset = 3;
    case kChargePreset: {
      total_size += 1 + 1;
      break;
    }
    case CHARGE_OPTION_ONEOF_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AutoChargeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:navService.AutoChargeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AutoChargeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AutoChargeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:navService.AutoChargeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:navService.AutoChargeRequest)
    MergeFrom(*source);
  }
}

void AutoChargeRequest::MergeFrom(const AutoChargeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:navService.AutoChargeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.timeout_sec() != 0) {
    set_timeout_sec(from.timeout_sec());
  }
  switch (from.charge_option_oneof_case()) {
    case kCharge: {
      set_charge(from.charge());
      break;
    }
    case kCancel: {
      set_cancel(from.cancel());
      break;
    }
    case kChargePreset: {
      set_charge_preset(from.charge_preset());
      break;
    }
    case CHARGE_OPTION_ONEOF_NOT_SET: {
      break;
    }
  }
}

void AutoChargeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:navService.AutoChargeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AutoChargeRequest::CopyFrom(const AutoChargeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:navService.AutoChargeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutoChargeRequest::IsInitialized() const {
  return true;
}

void AutoChargeRequest::Swap(AutoChargeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AutoChargeRequest::InternalSwap(AutoChargeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(timeout_sec_, other->timeout_sec_);
  swap(charge_option_oneof_, other->charge_option_oneof_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata AutoChargeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AutoChargeResponse::InitAsDefaultInstance() {
}
class AutoChargeResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AutoChargeResponse::kChargeStatusCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AutoChargeResponse::AutoChargeResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:navService.AutoChargeResponse)
}
AutoChargeResponse::AutoChargeResponse(const AutoChargeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  charge_status_code_ = from.charge_status_code_;
  // @@protoc_insertion_point(copy_constructor:navService.AutoChargeResponse)
}

void AutoChargeResponse::SharedCtor() {
  charge_status_code_ = 0;
}

AutoChargeResponse::~AutoChargeResponse() {
  // @@protoc_insertion_point(destructor:navService.AutoChargeResponse)
  SharedDtor();
}

void AutoChargeResponse::SharedDtor() {
}

void AutoChargeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AutoChargeResponse& AutoChargeResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AutoChargeResponse_nav_2eproto.base);
  return *internal_default_instance();
}


void AutoChargeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:navService.AutoChargeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  charge_status_code_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AutoChargeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .navService.ChargeStatusCode charge_status_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_charge_status_code(static_cast<::navService::ChargeStatusCode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AutoChargeResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:navService.AutoChargeResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .navService.ChargeStatusCode charge_status_code = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_charge_status_code(static_cast< ::navService::ChargeStatusCode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:navService.AutoChargeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:navService.AutoChargeResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AutoChargeResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:navService.AutoChargeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .navService.ChargeStatusCode charge_status_code = 1;
  if (this->charge_status_code() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->charge_status_code(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:navService.AutoChargeResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* AutoChargeResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:navService.AutoChargeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .navService.ChargeStatusCode charge_status_code = 1;
  if (this->charge_status_code() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->charge_status_code(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:navService.AutoChargeResponse)
  return target;
}

size_t AutoChargeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:navService.AutoChargeResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .navService.ChargeStatusCode charge_status_code = 1;
  if (this->charge_status_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->charge_status_code());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AutoChargeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:navService.AutoChargeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AutoChargeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AutoChargeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:navService.AutoChargeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:navService.AutoChargeResponse)
    MergeFrom(*source);
  }
}

void AutoChargeResponse::MergeFrom(const AutoChargeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:navService.AutoChargeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.charge_status_code() != 0) {
    set_charge_status_code(from.charge_status_code());
  }
}

void AutoChargeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:navService.AutoChargeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AutoChargeResponse::CopyFrom(const AutoChargeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:navService.AutoChargeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutoChargeResponse::IsInitialized() const {
  return true;
}

void AutoChargeResponse::Swap(AutoChargeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AutoChargeResponse::InternalSwap(AutoChargeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(charge_status_code_, other->charge_status_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AutoChargeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RotateRequest::InitAsDefaultInstance() {
  ::navService::_RotateRequest_default_instance_.angle_ = 0;
  ::navService::_RotateRequest_default_instance_.rollback_ = false;
}
class RotateRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RotateRequest::kAngleFieldNumber;
const int RotateRequest::kRollbackFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RotateRequest::RotateRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:navService.RotateRequest)
}
RotateRequest::RotateRequest(const RotateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_rotate_oneof();
  switch (from.rotate_oneof_case()) {
    case kAngle: {
      set_angle(from.angle());
      break;
    }
    case kRollback: {
      set_rollback(from.rollback());
      break;
    }
    case ROTATE_ONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:navService.RotateRequest)
}

void RotateRequest::SharedCtor() {
  clear_has_rotate_oneof();
}

RotateRequest::~RotateRequest() {
  // @@protoc_insertion_point(destructor:navService.RotateRequest)
  SharedDtor();
}

void RotateRequest::SharedDtor() {
  if (has_rotate_oneof()) {
    clear_rotate_oneof();
  }
}

void RotateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RotateRequest& RotateRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RotateRequest_nav_2eproto.base);
  return *internal_default_instance();
}


void RotateRequest::clear_rotate_oneof() {
// @@protoc_insertion_point(one_of_clear_start:navService.RotateRequest)
  switch (rotate_oneof_case()) {
    case kAngle: {
      // No need to clear
      break;
    }
    case kRollback: {
      // No need to clear
      break;
    }
    case ROTATE_ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ROTATE_ONEOF_NOT_SET;
}


void RotateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:navService.RotateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_rotate_oneof();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RotateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 angle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          set_angle(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool rollback = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          set_rollback(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RotateRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:navService.RotateRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 angle = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          clear_rotate_oneof();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &rotate_oneof_.angle_)));
          set_has_angle();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool rollback = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          clear_rotate_oneof();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rotate_oneof_.rollback_)));
          set_has_rollback();
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:navService.RotateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:navService.RotateRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RotateRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:navService.RotateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 angle = 1;
  if (has_angle()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->angle(), output);
  }

  // bool rollback = 2;
  if (has_rollback()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->rollback(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:navService.RotateRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* RotateRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:navService.RotateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 angle = 1;
  if (has_angle()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->angle(), target);
  }

  // bool rollback = 2;
  if (has_rollback()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->rollback(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:navService.RotateRequest)
  return target;
}

size_t RotateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:navService.RotateRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (rotate_oneof_case()) {
    // int32 angle = 1;
    case kAngle: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->angle());
      break;
    }
    // bool rollback = 2;
    case kRollback: {
      total_size += 1 + 1;
      break;
    }
    case ROTATE_ONEOF_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RotateRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:navService.RotateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RotateRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RotateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:navService.RotateRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:navService.RotateRequest)
    MergeFrom(*source);
  }
}

void RotateRequest::MergeFrom(const RotateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:navService.RotateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.rotate_oneof_case()) {
    case kAngle: {
      set_angle(from.angle());
      break;
    }
    case kRollback: {
      set_rollback(from.rollback());
      break;
    }
    case ROTATE_ONEOF_NOT_SET: {
      break;
    }
  }
}

void RotateRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:navService.RotateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RotateRequest::CopyFrom(const RotateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:navService.RotateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RotateRequest::IsInitialized() const {
  return true;
}

void RotateRequest::Swap(RotateRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RotateRequest::InternalSwap(RotateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(rotate_oneof_, other->rotate_oneof_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata RotateRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RotateResponse::InitAsDefaultInstance() {
}
class RotateResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RotateResponse::kStatusCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RotateResponse::RotateResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:navService.RotateResponse)
}
RotateResponse::RotateResponse(const RotateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_code_ = from.status_code_;
  // @@protoc_insertion_point(copy_constructor:navService.RotateResponse)
}

void RotateResponse::SharedCtor() {
  status_code_ = 0;
}

RotateResponse::~RotateResponse() {
  // @@protoc_insertion_point(destructor:navService.RotateResponse)
  SharedDtor();
}

void RotateResponse::SharedDtor() {
}

void RotateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RotateResponse& RotateResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RotateResponse_nav_2eproto.base);
  return *internal_default_instance();
}


void RotateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:navService.RotateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_code_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RotateResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .navService.StatusCode status_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_status_code(static_cast<::navService::StatusCode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RotateResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:navService.RotateResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .navService.StatusCode status_code = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status_code(static_cast< ::navService::StatusCode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:navService.RotateResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:navService.RotateResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RotateResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:navService.RotateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .navService.StatusCode status_code = 1;
  if (this->status_code() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->status_code(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:navService.RotateResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* RotateResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:navService.RotateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .navService.StatusCode status_code = 1;
  if (this->status_code() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->status_code(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:navService.RotateResponse)
  return target;
}

size_t RotateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:navService.RotateResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .navService.StatusCode status_code = 1;
  if (this->status_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->status_code());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RotateResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:navService.RotateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RotateResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RotateResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:navService.RotateResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:navService.RotateResponse)
    MergeFrom(*source);
  }
}

void RotateResponse::MergeFrom(const RotateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:navService.RotateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status_code() != 0) {
    set_status_code(from.status_code());
  }
}

void RotateResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:navService.RotateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RotateResponse::CopyFrom(const RotateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:navService.RotateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RotateResponse::IsInitialized() const {
  return true;
}

void RotateResponse::Swap(RotateResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RotateResponse::InternalSwap(RotateResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_code_, other->status_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RotateResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OnNavEventChangeRequest::InitAsDefaultInstance() {
}
class OnNavEventChangeRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OnNavEventChangeRequest::OnNavEventChangeRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:navService.OnNavEventChangeRequest)
}
OnNavEventChangeRequest::OnNavEventChangeRequest(const OnNavEventChangeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:navService.OnNavEventChangeRequest)
}

void OnNavEventChangeRequest::SharedCtor() {
}

OnNavEventChangeRequest::~OnNavEventChangeRequest() {
  // @@protoc_insertion_point(destructor:navService.OnNavEventChangeRequest)
  SharedDtor();
}

void OnNavEventChangeRequest::SharedDtor() {
}

void OnNavEventChangeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OnNavEventChangeRequest& OnNavEventChangeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OnNavEventChangeRequest_nav_2eproto.base);
  return *internal_default_instance();
}


void OnNavEventChangeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:navService.OnNavEventChangeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* OnNavEventChangeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool OnNavEventChangeRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:navService.OnNavEventChangeRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:navService.OnNavEventChangeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:navService.OnNavEventChangeRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void OnNavEventChangeRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:navService.OnNavEventChangeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:navService.OnNavEventChangeRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* OnNavEventChangeRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:navService.OnNavEventChangeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:navService.OnNavEventChangeRequest)
  return target;
}

size_t OnNavEventChangeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:navService.OnNavEventChangeRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OnNavEventChangeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:navService.OnNavEventChangeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const OnNavEventChangeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OnNavEventChangeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:navService.OnNavEventChangeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:navService.OnNavEventChangeRequest)
    MergeFrom(*source);
  }
}

void OnNavEventChangeRequest::MergeFrom(const OnNavEventChangeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:navService.OnNavEventChangeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void OnNavEventChangeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:navService.OnNavEventChangeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OnNavEventChangeRequest::CopyFrom(const OnNavEventChangeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:navService.OnNavEventChangeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OnNavEventChangeRequest::IsInitialized() const {
  return true;
}

void OnNavEventChangeRequest::Swap(OnNavEventChangeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OnNavEventChangeRequest::InternalSwap(OnNavEventChangeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OnNavEventChangeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MoveEvent::InitAsDefaultInstance() {
}
class MoveEvent::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MoveEvent::kStatusCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MoveEvent::MoveEvent()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:navService.MoveEvent)
}
MoveEvent::MoveEvent(const MoveEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_code_ = from.status_code_;
  // @@protoc_insertion_point(copy_constructor:navService.MoveEvent)
}

void MoveEvent::SharedCtor() {
  status_code_ = 0;
}

MoveEvent::~MoveEvent() {
  // @@protoc_insertion_point(destructor:navService.MoveEvent)
  SharedDtor();
}

void MoveEvent::SharedDtor() {
}

void MoveEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoveEvent& MoveEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoveEvent_nav_2eproto.base);
  return *internal_default_instance();
}


void MoveEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:navService.MoveEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_code_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MoveEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .navService.StatusCode status_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_status_code(static_cast<::navService::StatusCode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MoveEvent::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:navService.MoveEvent)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .navService.StatusCode status_code = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status_code(static_cast< ::navService::StatusCode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:navService.MoveEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:navService.MoveEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MoveEvent::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:navService.MoveEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .navService.StatusCode status_code = 1;
  if (this->status_code() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->status_code(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:navService.MoveEvent)
}

::PROTOBUF_NAMESPACE_ID::uint8* MoveEvent::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:navService.MoveEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .navService.StatusCode status_code = 1;
  if (this->status_code() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->status_code(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:navService.MoveEvent)
  return target;
}

size_t MoveEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:navService.MoveEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .navService.StatusCode status_code = 1;
  if (this->status_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->status_code());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoveEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:navService.MoveEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const MoveEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoveEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:navService.MoveEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:navService.MoveEvent)
    MergeFrom(*source);
  }
}

void MoveEvent::MergeFrom(const MoveEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:navService.MoveEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status_code() != 0) {
    set_status_code(from.status_code());
  }
}

void MoveEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:navService.MoveEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveEvent::CopyFrom(const MoveEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:navService.MoveEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveEvent::IsInitialized() const {
  return true;
}

void MoveEvent::Swap(MoveEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MoveEvent::InternalSwap(MoveEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_code_, other->status_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NavEvent::InitAsDefaultInstance() {
  ::navService::_NavEvent_default_instance_._instance.get_mutable()->nav_target_ = const_cast< ::navService::NavTarget*>(
      ::navService::NavTarget::internal_default_instance());
}
class NavEvent::HasBitSetters {
 public:
  static const ::navService::NavTarget& nav_target(const NavEvent* msg);
};

const ::navService::NavTarget&
NavEvent::HasBitSetters::nav_target(const NavEvent* msg) {
  return *msg->nav_target_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NavEvent::kStatusCodeFieldNumber;
const int NavEvent::kNavTargetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NavEvent::NavEvent()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:navService.NavEvent)
}
NavEvent::NavEvent(const NavEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_nav_target()) {
    nav_target_ = new ::navService::NavTarget(*from.nav_target_);
  } else {
    nav_target_ = nullptr;
  }
  status_code_ = from.status_code_;
  // @@protoc_insertion_point(copy_constructor:navService.NavEvent)
}

void NavEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NavEvent_nav_2eproto.base);
  ::memset(&nav_target_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_code_) -
      reinterpret_cast<char*>(&nav_target_)) + sizeof(status_code_));
}

NavEvent::~NavEvent() {
  // @@protoc_insertion_point(destructor:navService.NavEvent)
  SharedDtor();
}

void NavEvent::SharedDtor() {
  if (this != internal_default_instance()) delete nav_target_;
}

void NavEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NavEvent& NavEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NavEvent_nav_2eproto.base);
  return *internal_default_instance();
}


void NavEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:navService.NavEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && nav_target_ != nullptr) {
    delete nav_target_;
  }
  nav_target_ = nullptr;
  status_code_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NavEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .navService.StatusCode status_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_status_code(static_cast<::navService::StatusCode>(val));
        } else goto handle_unusual;
        continue;
      // .navService.NavTarget nav_target = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_nav_target(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NavEvent::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:navService.NavEvent)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .navService.StatusCode status_code = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status_code(static_cast< ::navService::StatusCode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .navService.NavTarget nav_target = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_nav_target()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:navService.NavEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:navService.NavEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NavEvent::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:navService.NavEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .navService.StatusCode status_code = 1;
  if (this->status_code() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->status_code(), output);
  }

  // .navService.NavTarget nav_target = 2;
  if (this->has_nav_target()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::nav_target(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:navService.NavEvent)
}

::PROTOBUF_NAMESPACE_ID::uint8* NavEvent::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:navService.NavEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .navService.StatusCode status_code = 1;
  if (this->status_code() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->status_code(), target);
  }

  // .navService.NavTarget nav_target = 2;
  if (this->has_nav_target()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::nav_target(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:navService.NavEvent)
  return target;
}

size_t NavEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:navService.NavEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .navService.NavTarget nav_target = 2;
  if (this->has_nav_target()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *nav_target_);
  }

  // .navService.StatusCode status_code = 1;
  if (this->status_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->status_code());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NavEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:navService.NavEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const NavEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NavEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:navService.NavEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:navService.NavEvent)
    MergeFrom(*source);
  }
}

void NavEvent::MergeFrom(const NavEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:navService.NavEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_nav_target()) {
    mutable_nav_target()->::navService::NavTarget::MergeFrom(from.nav_target());
  }
  if (from.status_code() != 0) {
    set_status_code(from.status_code());
  }
}

void NavEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:navService.NavEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NavEvent::CopyFrom(const NavEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:navService.NavEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NavEvent::IsInitialized() const {
  return true;
}

void NavEvent::Swap(NavEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NavEvent::InternalSwap(NavEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(nav_target_, other->nav_target_);
  swap(status_code_, other->status_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NavEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AutoChargeEvent::InitAsDefaultInstance() {
}
class AutoChargeEvent::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AutoChargeEvent::kChargeStatusCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AutoChargeEvent::AutoChargeEvent()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:navService.AutoChargeEvent)
}
AutoChargeEvent::AutoChargeEvent(const AutoChargeEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  charge_status_code_ = from.charge_status_code_;
  // @@protoc_insertion_point(copy_constructor:navService.AutoChargeEvent)
}

void AutoChargeEvent::SharedCtor() {
  charge_status_code_ = 0;
}

AutoChargeEvent::~AutoChargeEvent() {
  // @@protoc_insertion_point(destructor:navService.AutoChargeEvent)
  SharedDtor();
}

void AutoChargeEvent::SharedDtor() {
}

void AutoChargeEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AutoChargeEvent& AutoChargeEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AutoChargeEvent_nav_2eproto.base);
  return *internal_default_instance();
}


void AutoChargeEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:navService.AutoChargeEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  charge_status_code_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AutoChargeEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .navService.ChargeStatusCode charge_status_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_charge_status_code(static_cast<::navService::ChargeStatusCode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AutoChargeEvent::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:navService.AutoChargeEvent)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .navService.ChargeStatusCode charge_status_code = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_charge_status_code(static_cast< ::navService::ChargeStatusCode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:navService.AutoChargeEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:navService.AutoChargeEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AutoChargeEvent::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:navService.AutoChargeEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .navService.ChargeStatusCode charge_status_code = 1;
  if (this->charge_status_code() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->charge_status_code(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:navService.AutoChargeEvent)
}

::PROTOBUF_NAMESPACE_ID::uint8* AutoChargeEvent::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:navService.AutoChargeEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .navService.ChargeStatusCode charge_status_code = 1;
  if (this->charge_status_code() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->charge_status_code(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:navService.AutoChargeEvent)
  return target;
}

size_t AutoChargeEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:navService.AutoChargeEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .navService.ChargeStatusCode charge_status_code = 1;
  if (this->charge_status_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->charge_status_code());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AutoChargeEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:navService.AutoChargeEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const AutoChargeEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AutoChargeEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:navService.AutoChargeEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:navService.AutoChargeEvent)
    MergeFrom(*source);
  }
}

void AutoChargeEvent::MergeFrom(const AutoChargeEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:navService.AutoChargeEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.charge_status_code() != 0) {
    set_charge_status_code(from.charge_status_code());
  }
}

void AutoChargeEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:navService.AutoChargeEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AutoChargeEvent::CopyFrom(const AutoChargeEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:navService.AutoChargeEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutoChargeEvent::IsInitialized() const {
  return true;
}

void AutoChargeEvent::Swap(AutoChargeEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AutoChargeEvent::InternalSwap(AutoChargeEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(charge_status_code_, other->charge_status_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AutoChargeEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RotateEvent::InitAsDefaultInstance() {
}
class RotateEvent::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RotateEvent::kStatusCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RotateEvent::RotateEvent()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:navService.RotateEvent)
}
RotateEvent::RotateEvent(const RotateEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_code_ = from.status_code_;
  // @@protoc_insertion_point(copy_constructor:navService.RotateEvent)
}

void RotateEvent::SharedCtor() {
  status_code_ = 0;
}

RotateEvent::~RotateEvent() {
  // @@protoc_insertion_point(destructor:navService.RotateEvent)
  SharedDtor();
}

void RotateEvent::SharedDtor() {
}

void RotateEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RotateEvent& RotateEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RotateEvent_nav_2eproto.base);
  return *internal_default_instance();
}


void RotateEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:navService.RotateEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_code_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RotateEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .navService.StatusCode status_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_status_code(static_cast<::navService::StatusCode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RotateEvent::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:navService.RotateEvent)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .navService.StatusCode status_code = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status_code(static_cast< ::navService::StatusCode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:navService.RotateEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:navService.RotateEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RotateEvent::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:navService.RotateEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .navService.StatusCode status_code = 1;
  if (this->status_code() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->status_code(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:navService.RotateEvent)
}

::PROTOBUF_NAMESPACE_ID::uint8* RotateEvent::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:navService.RotateEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .navService.StatusCode status_code = 1;
  if (this->status_code() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->status_code(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:navService.RotateEvent)
  return target;
}

size_t RotateEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:navService.RotateEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .navService.StatusCode status_code = 1;
  if (this->status_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->status_code());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RotateEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:navService.RotateEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const RotateEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RotateEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:navService.RotateEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:navService.RotateEvent)
    MergeFrom(*source);
  }
}

void RotateEvent::MergeFrom(const RotateEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:navService.RotateEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status_code() != 0) {
    set_status_code(from.status_code());
  }
}

void RotateEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:navService.RotateEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RotateEvent::CopyFrom(const RotateEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:navService.RotateEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RotateEvent::IsInitialized() const {
  return true;
}

void RotateEvent::Swap(RotateEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RotateEvent::InternalSwap(RotateEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_code_, other->status_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RotateEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OnNavEventChangeResponse::InitAsDefaultInstance() {
  ::navService::_OnNavEventChangeResponse_default_instance_.move_event_ = const_cast< ::navService::MoveEvent*>(
      ::navService::MoveEvent::internal_default_instance());
  ::navService::_OnNavEventChangeResponse_default_instance_.nav_event_ = const_cast< ::navService::NavEvent*>(
      ::navService::NavEvent::internal_default_instance());
  ::navService::_OnNavEventChangeResponse_default_instance_.rotate_event_ = const_cast< ::navService::RotateEvent*>(
      ::navService::RotateEvent::internal_default_instance());
  ::navService::_OnNavEventChangeResponse_default_instance_.auto_charge_event_ = const_cast< ::navService::AutoChargeEvent*>(
      ::navService::AutoChargeEvent::internal_default_instance());
}
class OnNavEventChangeResponse::HasBitSetters {
 public:
  static const ::navService::MoveEvent& move_event(const OnNavEventChangeResponse* msg);
  static const ::navService::NavEvent& nav_event(const OnNavEventChangeResponse* msg);
  static const ::navService::RotateEvent& rotate_event(const OnNavEventChangeResponse* msg);
  static const ::navService::AutoChargeEvent& auto_charge_event(const OnNavEventChangeResponse* msg);
};

const ::navService::MoveEvent&
OnNavEventChangeResponse::HasBitSetters::move_event(const OnNavEventChangeResponse* msg) {
  return *msg->change_oneof_.move_event_;
}
const ::navService::NavEvent&
OnNavEventChangeResponse::HasBitSetters::nav_event(const OnNavEventChangeResponse* msg) {
  return *msg->change_oneof_.nav_event_;
}
const ::navService::RotateEvent&
OnNavEventChangeResponse::HasBitSetters::rotate_event(const OnNavEventChangeResponse* msg) {
  return *msg->change_oneof_.rotate_event_;
}
const ::navService::AutoChargeEvent&
OnNavEventChangeResponse::HasBitSetters::auto_charge_event(const OnNavEventChangeResponse* msg) {
  return *msg->change_oneof_.auto_charge_event_;
}
void OnNavEventChangeResponse::set_allocated_move_event(::navService::MoveEvent* move_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_change_oneof();
  if (move_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      move_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, move_event, submessage_arena);
    }
    set_has_move_event();
    change_oneof_.move_event_ = move_event;
  }
  // @@protoc_insertion_point(field_set_allocated:navService.OnNavEventChangeResponse.move_event)
}
void OnNavEventChangeResponse::set_allocated_nav_event(::navService::NavEvent* nav_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_change_oneof();
  if (nav_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      nav_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nav_event, submessage_arena);
    }
    set_has_nav_event();
    change_oneof_.nav_event_ = nav_event;
  }
  // @@protoc_insertion_point(field_set_allocated:navService.OnNavEventChangeResponse.nav_event)
}
void OnNavEventChangeResponse::set_allocated_rotate_event(::navService::RotateEvent* rotate_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_change_oneof();
  if (rotate_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rotate_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotate_event, submessage_arena);
    }
    set_has_rotate_event();
    change_oneof_.rotate_event_ = rotate_event;
  }
  // @@protoc_insertion_point(field_set_allocated:navService.OnNavEventChangeResponse.rotate_event)
}
void OnNavEventChangeResponse::set_allocated_auto_charge_event(::navService::AutoChargeEvent* auto_charge_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_change_oneof();
  if (auto_charge_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      auto_charge_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, auto_charge_event, submessage_arena);
    }
    set_has_auto_charge_event();
    change_oneof_.auto_charge_event_ = auto_charge_event;
  }
  // @@protoc_insertion_point(field_set_allocated:navService.OnNavEventChangeResponse.auto_charge_event)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OnNavEventChangeResponse::kNavEventTypeFieldNumber;
const int OnNavEventChangeResponse::kMoveEventFieldNumber;
const int OnNavEventChangeResponse::kNavEventFieldNumber;
const int OnNavEventChangeResponse::kRotateEventFieldNumber;
const int OnNavEventChangeResponse::kAutoChargeEventFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OnNavEventChangeResponse::OnNavEventChangeResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:navService.OnNavEventChangeResponse)
}
OnNavEventChangeResponse::OnNavEventChangeResponse(const OnNavEventChangeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nav_event_type_ = from.nav_event_type_;
  clear_has_change_oneof();
  switch (from.change_oneof_case()) {
    case kMoveEvent: {
      mutable_move_event()->::navService::MoveEvent::MergeFrom(from.move_event());
      break;
    }
    case kNavEvent: {
      mutable_nav_event()->::navService::NavEvent::MergeFrom(from.nav_event());
      break;
    }
    case kRotateEvent: {
      mutable_rotate_event()->::navService::RotateEvent::MergeFrom(from.rotate_event());
      break;
    }
    case kAutoChargeEvent: {
      mutable_auto_charge_event()->::navService::AutoChargeEvent::MergeFrom(from.auto_charge_event());
      break;
    }
    case CHANGE_ONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:navService.OnNavEventChangeResponse)
}

void OnNavEventChangeResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OnNavEventChangeResponse_nav_2eproto.base);
  nav_event_type_ = 0;
  clear_has_change_oneof();
}

OnNavEventChangeResponse::~OnNavEventChangeResponse() {
  // @@protoc_insertion_point(destructor:navService.OnNavEventChangeResponse)
  SharedDtor();
}

void OnNavEventChangeResponse::SharedDtor() {
  if (has_change_oneof()) {
    clear_change_oneof();
  }
}

void OnNavEventChangeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OnNavEventChangeResponse& OnNavEventChangeResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OnNavEventChangeResponse_nav_2eproto.base);
  return *internal_default_instance();
}


void OnNavEventChangeResponse::clear_change_oneof() {
// @@protoc_insertion_point(one_of_clear_start:navService.OnNavEventChangeResponse)
  switch (change_oneof_case()) {
    case kMoveEvent: {
      delete change_oneof_.move_event_;
      break;
    }
    case kNavEvent: {
      delete change_oneof_.nav_event_;
      break;
    }
    case kRotateEvent: {
      delete change_oneof_.rotate_event_;
      break;
    }
    case kAutoChargeEvent: {
      delete change_oneof_.auto_charge_event_;
      break;
    }
    case CHANGE_ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CHANGE_ONEOF_NOT_SET;
}


void OnNavEventChangeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:navService.OnNavEventChangeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nav_event_type_ = 0;
  clear_change_oneof();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* OnNavEventChangeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .navService.NavEventType nav_event_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_nav_event_type(static_cast<::navService::NavEventType>(val));
        } else goto handle_unusual;
        continue;
      // .navService.MoveEvent move_event = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_move_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .navService.NavEvent nav_event = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_nav_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .navService.RotateEvent rotate_event = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_rotate_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .navService.AutoChargeEvent auto_charge_event = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_auto_charge_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool OnNavEventChangeResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:navService.OnNavEventChangeResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .navService.NavEventType nav_event_type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_nav_event_type(static_cast< ::navService::NavEventType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .navService.MoveEvent move_event = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_move_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .navService.NavEvent nav_event = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_nav_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .navService.RotateEvent rotate_event = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_rotate_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .navService.AutoChargeEvent auto_charge_event = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_auto_charge_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:navService.OnNavEventChangeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:navService.OnNavEventChangeResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void OnNavEventChangeResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:navService.OnNavEventChangeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .navService.NavEventType nav_event_type = 1;
  if (this->nav_event_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->nav_event_type(), output);
  }

  // .navService.MoveEvent move_event = 2;
  if (has_move_event()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::move_event(this), output);
  }

  // .navService.NavEvent nav_event = 3;
  if (has_nav_event()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::nav_event(this), output);
  }

  // .navService.RotateEvent rotate_event = 4;
  if (has_rotate_event()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::rotate_event(this), output);
  }

  // .navService.AutoChargeEvent auto_charge_event = 5;
  if (has_auto_charge_event()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::auto_charge_event(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:navService.OnNavEventChangeResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* OnNavEventChangeResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:navService.OnNavEventChangeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .navService.NavEventType nav_event_type = 1;
  if (this->nav_event_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->nav_event_type(), target);
  }

  // .navService.MoveEvent move_event = 2;
  if (has_move_event()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::move_event(this), target);
  }

  // .navService.NavEvent nav_event = 3;
  if (has_nav_event()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::nav_event(this), target);
  }

  // .navService.RotateEvent rotate_event = 4;
  if (has_rotate_event()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::rotate_event(this), target);
  }

  // .navService.AutoChargeEvent auto_charge_event = 5;
  if (has_auto_charge_event()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::auto_charge_event(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:navService.OnNavEventChangeResponse)
  return target;
}

size_t OnNavEventChangeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:navService.OnNavEventChangeResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .navService.NavEventType nav_event_type = 1;
  if (this->nav_event_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->nav_event_type());
  }

  switch (change_oneof_case()) {
    // .navService.MoveEvent move_event = 2;
    case kMoveEvent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *change_oneof_.move_event_);
      break;
    }
    // .navService.NavEvent nav_event = 3;
    case kNavEvent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *change_oneof_.nav_event_);
      break;
    }
    // .navService.RotateEvent rotate_event = 4;
    case kRotateEvent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *change_oneof_.rotate_event_);
      break;
    }
    // .navService.AutoChargeEvent auto_charge_event = 5;
    case kAutoChargeEvent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *change_oneof_.auto_charge_event_);
      break;
    }
    case CHANGE_ONEOF_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OnNavEventChangeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:navService.OnNavEventChangeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const OnNavEventChangeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OnNavEventChangeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:navService.OnNavEventChangeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:navService.OnNavEventChangeResponse)
    MergeFrom(*source);
  }
}

void OnNavEventChangeResponse::MergeFrom(const OnNavEventChangeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:navService.OnNavEventChangeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.nav_event_type() != 0) {
    set_nav_event_type(from.nav_event_type());
  }
  switch (from.change_oneof_case()) {
    case kMoveEvent: {
      mutable_move_event()->::navService::MoveEvent::MergeFrom(from.move_event());
      break;
    }
    case kNavEvent: {
      mutable_nav_event()->::navService::NavEvent::MergeFrom(from.nav_event());
      break;
    }
    case kRotateEvent: {
      mutable_rotate_event()->::navService::RotateEvent::MergeFrom(from.rotate_event());
      break;
    }
    case kAutoChargeEvent: {
      mutable_auto_charge_event()->::navService::AutoChargeEvent::MergeFrom(from.auto_charge_event());
      break;
    }
    case CHANGE_ONEOF_NOT_SET: {
      break;
    }
  }
}

void OnNavEventChangeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:navService.OnNavEventChangeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OnNavEventChangeResponse::CopyFrom(const OnNavEventChangeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:navService.OnNavEventChangeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OnNavEventChangeResponse::IsInitialized() const {
  return true;
}

void OnNavEventChangeResponse::Swap(OnNavEventChangeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OnNavEventChangeResponse::InternalSwap(OnNavEventChangeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(nav_event_type_, other->nav_event_type_);
  swap(change_oneof_, other->change_oneof_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata OnNavEventChangeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Route::InitAsDefaultInstance() {
}
class Route::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Route::kIdFieldNumber;
const int Route::kNameFieldNumber;
const int Route::kIsActiveFieldNumber;
const int Route::kRoutePointsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Route::Route()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:navService.Route)
}
Route::Route(const Route& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      route_points_(from.route_points_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  is_active_ = from.is_active_;
  // @@protoc_insertion_point(copy_constructor:navService.Route)
}

void Route::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Route_nav_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  is_active_ = false;
}

Route::~Route() {
  // @@protoc_insertion_point(destructor:navService.Route)
  SharedDtor();
}

void Route::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Route::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Route& Route::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Route_nav_2eproto.base);
  return *internal_default_instance();
}


void Route::Clear() {
// @@protoc_insertion_point(message_clear_start:navService.Route)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  route_points_.Clear();
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  is_active_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Route::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_id(), ptr, ctx, "navService.Route.id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "navService.Route.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_active = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          is_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .navService.RoutePoint route_points = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_route_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Route::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:navService.Route)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "navService.Route.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "navService.Route.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_active = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_active_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .navService.RoutePoint route_points = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_route_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:navService.Route)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:navService.Route)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Route::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:navService.Route)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "navService.Route.id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "navService.Route.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // bool is_active = 3;
  if (this->is_active() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->is_active(), output);
  }

  // repeated .navService.RoutePoint route_points = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->route_points_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->route_points(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:navService.Route)
}

::PROTOBUF_NAMESPACE_ID::uint8* Route::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:navService.Route)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "navService.Route.id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "navService.Route.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // bool is_active = 3;
  if (this->is_active() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->is_active(), target);
  }

  // repeated .navService.RoutePoint route_points = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->route_points_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->route_points(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:navService.Route)
  return target;
}

size_t Route::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:navService.Route)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .navService.RoutePoint route_points = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->route_points_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->route_points(static_cast<int>(i)));
    }
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  // bool is_active = 3;
  if (this->is_active() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Route::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:navService.Route)
  GOOGLE_DCHECK_NE(&from, this);
  const Route* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Route>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:navService.Route)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:navService.Route)
    MergeFrom(*source);
  }
}

void Route::MergeFrom(const Route& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:navService.Route)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  route_points_.MergeFrom(from.route_points_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.is_active() != 0) {
    set_is_active(from.is_active());
  }
}

void Route::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:navService.Route)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Route::CopyFrom(const Route& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:navService.Route)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Route::IsInitialized() const {
  return true;
}

void Route::Swap(Route* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Route::InternalSwap(Route* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&route_points_)->InternalSwap(CastToBase(&other->route_points_));
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(is_active_, other->is_active_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Route::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RoutePoint::InitAsDefaultInstance() {
}
class RoutePoint::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoutePoint::kNameFieldNumber;
const int RoutePoint::kRotateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoutePoint::RoutePoint()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:navService.RoutePoint)
}
RoutePoint::RoutePoint(const RoutePoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  rotate_ = from.rotate_;
  // @@protoc_insertion_point(copy_constructor:navService.RoutePoint)
}

void RoutePoint::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RoutePoint_nav_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rotate_ = 0u;
}

RoutePoint::~RoutePoint() {
  // @@protoc_insertion_point(destructor:navService.RoutePoint)
  SharedDtor();
}

void RoutePoint::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RoutePoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoutePoint& RoutePoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoutePoint_nav_2eproto.base);
  return *internal_default_instance();
}


void RoutePoint::Clear() {
// @@protoc_insertion_point(message_clear_start:navService.RoutePoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rotate_ = 0u;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RoutePoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "navService.RoutePoint.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 rotate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          rotate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RoutePoint::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:navService.RoutePoint)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "navService.RoutePoint.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 rotate = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rotate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:navService.RoutePoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:navService.RoutePoint)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RoutePoint::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:navService.RoutePoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "navService.RoutePoint.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // uint32 rotate = 2;
  if (this->rotate() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->rotate(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:navService.RoutePoint)
}

::PROTOBUF_NAMESPACE_ID::uint8* RoutePoint::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:navService.RoutePoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "navService.RoutePoint.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // uint32 rotate = 2;
  if (this->rotate() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->rotate(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:navService.RoutePoint)
  return target;
}

size_t RoutePoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:navService.RoutePoint)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  // uint32 rotate = 2;
  if (this->rotate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->rotate());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoutePoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:navService.RoutePoint)
  GOOGLE_DCHECK_NE(&from, this);
  const RoutePoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoutePoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:navService.RoutePoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:navService.RoutePoint)
    MergeFrom(*source);
  }
}

void RoutePoint::MergeFrom(const RoutePoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:navService.RoutePoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.rotate() != 0) {
    set_rotate(from.rotate());
  }
}

void RoutePoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:navService.RoutePoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoutePoint::CopyFrom(const RoutePoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:navService.RoutePoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoutePoint::IsInitialized() const {
  return true;
}

void RoutePoint::Swap(RoutePoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoutePoint::InternalSwap(RoutePoint* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(rotate_, other->rotate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoutePoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NewRouteRequest::InitAsDefaultInstance() {
  ::navService::_NewRouteRequest_default_instance_._instance.get_mutable()->route_ = const_cast< ::navService::Route*>(
      ::navService::Route::internal_default_instance());
}
class NewRouteRequest::HasBitSetters {
 public:
  static const ::navService::Route& route(const NewRouteRequest* msg);
};

const ::navService::Route&
NewRouteRequest::HasBitSetters::route(const NewRouteRequest* msg) {
  return *msg->route_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NewRouteRequest::kRouteFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NewRouteRequest::NewRouteRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:navService.NewRouteRequest)
}
NewRouteRequest::NewRouteRequest(const NewRouteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_route()) {
    route_ = new ::navService::Route(*from.route_);
  } else {
    route_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:navService.NewRouteRequest)
}

void NewRouteRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NewRouteRequest_nav_2eproto.base);
  route_ = nullptr;
}

NewRouteRequest::~NewRouteRequest() {
  // @@protoc_insertion_point(destructor:navService.NewRouteRequest)
  SharedDtor();
}

void NewRouteRequest::SharedDtor() {
  if (this != internal_default_instance()) delete route_;
}

void NewRouteRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NewRouteRequest& NewRouteRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NewRouteRequest_nav_2eproto.base);
  return *internal_default_instance();
}


void NewRouteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:navService.NewRouteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && route_ != nullptr) {
    delete route_;
  }
  route_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NewRouteRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .navService.Route route = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_route(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NewRouteRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:navService.NewRouteRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .navService.Route route = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_route()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:navService.NewRouteRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:navService.NewRouteRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NewRouteRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:navService.NewRouteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .navService.Route route = 1;
  if (this->has_route()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::route(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:navService.NewRouteRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* NewRouteRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:navService.NewRouteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .navService.Route route = 1;
  if (this->has_route()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::route(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:navService.NewRouteRequest)
  return target;
}

size_t NewRouteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:navService.NewRouteRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .navService.Route route = 1;
  if (this->has_route()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *route_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NewRouteRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:navService.NewRouteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const NewRouteRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NewRouteRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:navService.NewRouteRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:navService.NewRouteRequest)
    MergeFrom(*source);
  }
}

void NewRouteRequest::MergeFrom(const NewRouteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:navService.NewRouteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_route()) {
    mutable_route()->::navService::Route::MergeFrom(from.route());
  }
}

void NewRouteRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:navService.NewRouteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewRouteRequest::CopyFrom(const NewRouteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:navService.NewRouteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewRouteRequest::IsInitialized() const {
  return true;
}

void NewRouteRequest::Swap(NewRouteRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NewRouteRequest::InternalSwap(NewRouteRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(route_, other->route_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NewRouteRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NewRouteResponse::InitAsDefaultInstance() {
  ::navService::_NewRouteResponse_default_instance_._instance.get_mutable()->route_ = const_cast< ::navService::Route*>(
      ::navService::Route::internal_default_instance());
}
class NewRouteResponse::HasBitSetters {
 public:
  static const ::navService::Route& route(const NewRouteResponse* msg);
};

const ::navService::Route&
NewRouteResponse::HasBitSetters::route(const NewRouteResponse* msg) {
  return *msg->route_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NewRouteResponse::kRouteFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NewRouteResponse::NewRouteResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:navService.NewRouteResponse)
}
NewRouteResponse::NewRouteResponse(const NewRouteResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_route()) {
    route_ = new ::navService::Route(*from.route_);
  } else {
    route_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:navService.NewRouteResponse)
}

void NewRouteResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NewRouteResponse_nav_2eproto.base);
  route_ = nullptr;
}

NewRouteResponse::~NewRouteResponse() {
  // @@protoc_insertion_point(destructor:navService.NewRouteResponse)
  SharedDtor();
}

void NewRouteResponse::SharedDtor() {
  if (this != internal_default_instance()) delete route_;
}

void NewRouteResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NewRouteResponse& NewRouteResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NewRouteResponse_nav_2eproto.base);
  return *internal_default_instance();
}


void NewRouteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:navService.NewRouteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && route_ != nullptr) {
    delete route_;
  }
  route_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NewRouteResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .navService.Route route = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_route(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NewRouteResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:navService.NewRouteResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .navService.Route route = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_route()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:navService.NewRouteResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:navService.NewRouteResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NewRouteResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:navService.NewRouteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .navService.Route route = 1;
  if (this->has_route()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::route(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:navService.NewRouteResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* NewRouteResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:navService.NewRouteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .navService.Route route = 1;
  if (this->has_route()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::route(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:navService.NewRouteResponse)
  return target;
}

size_t NewRouteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:navService.NewRouteResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .navService.Route route = 1;
  if (this->has_route()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *route_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NewRouteResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:navService.NewRouteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const NewRouteResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NewRouteResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:navService.NewRouteResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:navService.NewRouteResponse)
    MergeFrom(*source);
  }
}

void NewRouteResponse::MergeFrom(const NewRouteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:navService.NewRouteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_route()) {
    mutable_route()->::navService::Route::MergeFrom(from.route());
  }
}

void NewRouteResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:navService.NewRouteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewRouteResponse::CopyFrom(const NewRouteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:navService.NewRouteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewRouteResponse::IsInitialized() const {
  return true;
}

void NewRouteResponse::Swap(NewRouteResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NewRouteResponse::InternalSwap(NewRouteResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(route_, other->route_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NewRouteResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListRoutesRequest::InitAsDefaultInstance() {
}
class ListRoutesRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListRoutesRequest::ListRoutesRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:navService.ListRoutesRequest)
}
ListRoutesRequest::ListRoutesRequest(const ListRoutesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:navService.ListRoutesRequest)
}

void ListRoutesRequest::SharedCtor() {
}

ListRoutesRequest::~ListRoutesRequest() {
  // @@protoc_insertion_point(destructor:navService.ListRoutesRequest)
  SharedDtor();
}

void ListRoutesRequest::SharedDtor() {
}

void ListRoutesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListRoutesRequest& ListRoutesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListRoutesRequest_nav_2eproto.base);
  return *internal_default_instance();
}


void ListRoutesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:navService.ListRoutesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ListRoutesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ListRoutesRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:navService.ListRoutesRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:navService.ListRoutesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:navService.ListRoutesRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ListRoutesRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:navService.ListRoutesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:navService.ListRoutesRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* ListRoutesRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:navService.ListRoutesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:navService.ListRoutesRequest)
  return target;
}

size_t ListRoutesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:navService.ListRoutesRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListRoutesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:navService.ListRoutesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListRoutesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListRoutesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:navService.ListRoutesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:navService.ListRoutesRequest)
    MergeFrom(*source);
  }
}

void ListRoutesRequest::MergeFrom(const ListRoutesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:navService.ListRoutesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ListRoutesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:navService.ListRoutesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListRoutesRequest::CopyFrom(const ListRoutesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:navService.ListRoutesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListRoutesRequest::IsInitialized() const {
  return true;
}

void ListRoutesRequest::Swap(ListRoutesRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListRoutesRequest::InternalSwap(ListRoutesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListRoutesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListRoutesResponse::InitAsDefaultInstance() {
}
class ListRoutesResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListRoutesResponse::kRoutesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListRoutesResponse::ListRoutesResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:navService.ListRoutesResponse)
}
ListRoutesResponse::ListRoutesResponse(const ListRoutesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      routes_(from.routes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:navService.ListRoutesResponse)
}

void ListRoutesResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListRoutesResponse_nav_2eproto.base);
}

ListRoutesResponse::~ListRoutesResponse() {
  // @@protoc_insertion_point(destructor:navService.ListRoutesResponse)
  SharedDtor();
}

void ListRoutesResponse::SharedDtor() {
}

void ListRoutesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListRoutesResponse& ListRoutesResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListRoutesResponse_nav_2eproto.base);
  return *internal_default_instance();
}


void ListRoutesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:navService.ListRoutesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  routes_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ListRoutesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .navService.Route routes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_routes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ListRoutesResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:navService.ListRoutesResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .navService.Route routes = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_routes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:navService.ListRoutesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:navService.ListRoutesResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ListRoutesResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:navService.ListRoutesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .navService.Route routes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->routes_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->routes(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:navService.ListRoutesResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* ListRoutesResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:navService.ListRoutesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .navService.Route routes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->routes_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->routes(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:navService.ListRoutesResponse)
  return target;
}

size_t ListRoutesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:navService.ListRoutesResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .navService.Route routes = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->routes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->routes(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListRoutesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:navService.ListRoutesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListRoutesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListRoutesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:navService.ListRoutesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:navService.ListRoutesResponse)
    MergeFrom(*source);
  }
}

void ListRoutesResponse::MergeFrom(const ListRoutesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:navService.ListRoutesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  routes_.MergeFrom(from.routes_);
}

void ListRoutesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:navService.ListRoutesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListRoutesResponse::CopyFrom(const ListRoutesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:navService.ListRoutesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListRoutesResponse::IsInitialized() const {
  return true;
}

void ListRoutesResponse::Swap(ListRoutesResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListRoutesResponse::InternalSwap(ListRoutesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&routes_)->InternalSwap(CastToBase(&other->routes_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListRoutesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetRouteRequest::InitAsDefaultInstance() {
}
class GetRouteRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetRouteRequest::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetRouteRequest::GetRouteRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:navService.GetRouteRequest)
}
GetRouteRequest::GetRouteRequest(const GetRouteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  // @@protoc_insertion_point(copy_constructor:navService.GetRouteRequest)
}

void GetRouteRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetRouteRequest_nav_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetRouteRequest::~GetRouteRequest() {
  // @@protoc_insertion_point(destructor:navService.GetRouteRequest)
  SharedDtor();
}

void GetRouteRequest::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetRouteRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetRouteRequest& GetRouteRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetRouteRequest_nav_2eproto.base);
  return *internal_default_instance();
}


void GetRouteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:navService.GetRouteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetRouteRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_id(), ptr, ctx, "navService.GetRouteRequest.id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetRouteRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:navService.GetRouteRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "navService.GetRouteRequest.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:navService.GetRouteRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:navService.GetRouteRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetRouteRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:navService.GetRouteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "navService.GetRouteRequest.id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:navService.GetRouteRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetRouteRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:navService.GetRouteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "navService.GetRouteRequest.id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:navService.GetRouteRequest)
  return target;
}

size_t GetRouteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:navService.GetRouteRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetRouteRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:navService.GetRouteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetRouteRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetRouteRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:navService.GetRouteRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:navService.GetRouteRequest)
    MergeFrom(*source);
  }
}

void GetRouteRequest::MergeFrom(const GetRouteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:navService.GetRouteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
}

void GetRouteRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:navService.GetRouteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRouteRequest::CopyFrom(const GetRouteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:navService.GetRouteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRouteRequest::IsInitialized() const {
  return true;
}

void GetRouteRequest::Swap(GetRouteRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetRouteRequest::InternalSwap(GetRouteRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetRouteRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetRouteResponse::InitAsDefaultInstance() {
  ::navService::_GetRouteResponse_default_instance_._instance.get_mutable()->route_ = const_cast< ::navService::Route*>(
      ::navService::Route::internal_default_instance());
}
class GetRouteResponse::HasBitSetters {
 public:
  static const ::navService::Route& route(const GetRouteResponse* msg);
};

const ::navService::Route&
GetRouteResponse::HasBitSetters::route(const GetRouteResponse* msg) {
  return *msg->route_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetRouteResponse::kRouteFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetRouteResponse::GetRouteResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:navService.GetRouteResponse)
}
GetRouteResponse::GetRouteResponse(const GetRouteResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_route()) {
    route_ = new ::navService::Route(*from.route_);
  } else {
    route_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:navService.GetRouteResponse)
}

void GetRouteResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetRouteResponse_nav_2eproto.base);
  route_ = nullptr;
}

GetRouteResponse::~GetRouteResponse() {
  // @@protoc_insertion_point(destructor:navService.GetRouteResponse)
  SharedDtor();
}

void GetRouteResponse::SharedDtor() {
  if (this != internal_default_instance()) delete route_;
}

void GetRouteResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetRouteResponse& GetRouteResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetRouteResponse_nav_2eproto.base);
  return *internal_default_instance();
}


void GetRouteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:navService.GetRouteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && route_ != nullptr) {
    delete route_;
  }
  route_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetRouteResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .navService.Route route = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_route(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetRouteResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:navService.GetRouteResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .navService.Route route = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_route()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:navService.GetRouteResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:navService.GetRouteResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetRouteResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:navService.GetRouteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .navService.Route route = 1;
  if (this->has_route()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::route(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:navService.GetRouteResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetRouteResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:navService.GetRouteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .navService.Route route = 1;
  if (this->has_route()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::route(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:navService.GetRouteResponse)
  return target;
}

size_t GetRouteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:navService.GetRouteResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .navService.Route route = 1;
  if (this->has_route()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *route_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetRouteResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:navService.GetRouteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetRouteResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetRouteResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:navService.GetRouteResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:navService.GetRouteResponse)
    MergeFrom(*source);
  }
}

void GetRouteResponse::MergeFrom(const GetRouteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:navService.GetRouteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_route()) {
    mutable_route()->::navService::Route::MergeFrom(from.route());
  }
}

void GetRouteResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:navService.GetRouteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRouteResponse::CopyFrom(const GetRouteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:navService.GetRouteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRouteResponse::IsInitialized() const {
  return true;
}

void GetRouteResponse::Swap(GetRouteResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetRouteResponse::InternalSwap(GetRouteResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(route_, other->route_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetRouteResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateRouteRequest::InitAsDefaultInstance() {
  ::navService::_UpdateRouteRequest_default_instance_._instance.get_mutable()->route_ = const_cast< ::navService::Route*>(
      ::navService::Route::internal_default_instance());
}
class UpdateRouteRequest::HasBitSetters {
 public:
  static const ::navService::Route& route(const UpdateRouteRequest* msg);
};

const ::navService::Route&
UpdateRouteRequest::HasBitSetters::route(const UpdateRouteRequest* msg) {
  return *msg->route_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateRouteRequest::kRouteFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateRouteRequest::UpdateRouteRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:navService.UpdateRouteRequest)
}
UpdateRouteRequest::UpdateRouteRequest(const UpdateRouteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_route()) {
    route_ = new ::navService::Route(*from.route_);
  } else {
    route_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:navService.UpdateRouteRequest)
}

void UpdateRouteRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateRouteRequest_nav_2eproto.base);
  route_ = nullptr;
}

UpdateRouteRequest::~UpdateRouteRequest() {
  // @@protoc_insertion_point(destructor:navService.UpdateRouteRequest)
  SharedDtor();
}

void UpdateRouteRequest::SharedDtor() {
  if (this != internal_default_instance()) delete route_;
}

void UpdateRouteRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateRouteRequest& UpdateRouteRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateRouteRequest_nav_2eproto.base);
  return *internal_default_instance();
}


void UpdateRouteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:navService.UpdateRouteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && route_ != nullptr) {
    delete route_;
  }
  route_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UpdateRouteRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .navService.Route route = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_route(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UpdateRouteRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:navService.UpdateRouteRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .navService.Route route = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_route()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:navService.UpdateRouteRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:navService.UpdateRouteRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UpdateRouteRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:navService.UpdateRouteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .navService.Route route = 1;
  if (this->has_route()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::route(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:navService.UpdateRouteRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateRouteRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:navService.UpdateRouteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .navService.Route route = 1;
  if (this->has_route()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::route(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:navService.UpdateRouteRequest)
  return target;
}

size_t UpdateRouteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:navService.UpdateRouteRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .navService.Route route = 1;
  if (this->has_route()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *route_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateRouteRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:navService.UpdateRouteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateRouteRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateRouteRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:navService.UpdateRouteRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:navService.UpdateRouteRequest)
    MergeFrom(*source);
  }
}

void UpdateRouteRequest::MergeFrom(const UpdateRouteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:navService.UpdateRouteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_route()) {
    mutable_route()->::navService::Route::MergeFrom(from.route());
  }
}

void UpdateRouteRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:navService.UpdateRouteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateRouteRequest::CopyFrom(const UpdateRouteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:navService.UpdateRouteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateRouteRequest::IsInitialized() const {
  return true;
}

void UpdateRouteRequest::Swap(UpdateRouteRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateRouteRequest::InternalSwap(UpdateRouteRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(route_, other->route_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateRouteRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateRouteResponse::InitAsDefaultInstance() {
  ::navService::_UpdateRouteResponse_default_instance_._instance.get_mutable()->route_ = const_cast< ::navService::Route*>(
      ::navService::Route::internal_default_instance());
}
class UpdateRouteResponse::HasBitSetters {
 public:
  static const ::navService::Route& route(const UpdateRouteResponse* msg);
};

const ::navService::Route&
UpdateRouteResponse::HasBitSetters::route(const UpdateRouteResponse* msg) {
  return *msg->route_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateRouteResponse::kRouteFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateRouteResponse::UpdateRouteResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:navService.UpdateRouteResponse)
}
UpdateRouteResponse::UpdateRouteResponse(const UpdateRouteResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_route()) {
    route_ = new ::navService::Route(*from.route_);
  } else {
    route_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:navService.UpdateRouteResponse)
}

void UpdateRouteResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateRouteResponse_nav_2eproto.base);
  route_ = nullptr;
}

UpdateRouteResponse::~UpdateRouteResponse() {
  // @@protoc_insertion_point(destructor:navService.UpdateRouteResponse)
  SharedDtor();
}

void UpdateRouteResponse::SharedDtor() {
  if (this != internal_default_instance()) delete route_;
}

void UpdateRouteResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateRouteResponse& UpdateRouteResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateRouteResponse_nav_2eproto.base);
  return *internal_default_instance();
}


void UpdateRouteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:navService.UpdateRouteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && route_ != nullptr) {
    delete route_;
  }
  route_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UpdateRouteResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .navService.Route route = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_route(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UpdateRouteResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:navService.UpdateRouteResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .navService.Route route = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_route()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:navService.UpdateRouteResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:navService.UpdateRouteResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UpdateRouteResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:navService.UpdateRouteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .navService.Route route = 1;
  if (this->has_route()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::route(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:navService.UpdateRouteResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateRouteResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:navService.UpdateRouteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .navService.Route route = 1;
  if (this->has_route()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::route(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:navService.UpdateRouteResponse)
  return target;
}

size_t UpdateRouteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:navService.UpdateRouteResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .navService.Route route = 1;
  if (this->has_route()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *route_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateRouteResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:navService.UpdateRouteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateRouteResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateRouteResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:navService.UpdateRouteResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:navService.UpdateRouteResponse)
    MergeFrom(*source);
  }
}

void UpdateRouteResponse::MergeFrom(const UpdateRouteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:navService.UpdateRouteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_route()) {
    mutable_route()->::navService::Route::MergeFrom(from.route());
  }
}

void UpdateRouteResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:navService.UpdateRouteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateRouteResponse::CopyFrom(const UpdateRouteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:navService.UpdateRouteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateRouteResponse::IsInitialized() const {
  return true;
}

void UpdateRouteResponse::Swap(UpdateRouteResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateRouteResponse::InternalSwap(UpdateRouteResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(route_, other->route_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateRouteResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteRoutesRequest::InitAsDefaultInstance() {
}
class DeleteRoutesRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeleteRoutesRequest::kRoutesIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteRoutesRequest::DeleteRoutesRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:navService.DeleteRoutesRequest)
}
DeleteRoutesRequest::DeleteRoutesRequest(const DeleteRoutesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      routes_id_(from.routes_id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:navService.DeleteRoutesRequest)
}

void DeleteRoutesRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteRoutesRequest_nav_2eproto.base);
}

DeleteRoutesRequest::~DeleteRoutesRequest() {
  // @@protoc_insertion_point(destructor:navService.DeleteRoutesRequest)
  SharedDtor();
}

void DeleteRoutesRequest::SharedDtor() {
}

void DeleteRoutesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteRoutesRequest& DeleteRoutesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteRoutesRequest_nav_2eproto.base);
  return *internal_default_instance();
}


void DeleteRoutesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:navService.DeleteRoutesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  routes_id_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeleteRoutesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string routes_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_routes_id(), ptr, ctx, "navService.DeleteRoutesRequest.routes_id");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeleteRoutesRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:navService.DeleteRoutesRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string routes_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_routes_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->routes_id(this->routes_id_size() - 1).data(),
            static_cast<int>(this->routes_id(this->routes_id_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "navService.DeleteRoutesRequest.routes_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:navService.DeleteRoutesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:navService.DeleteRoutesRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeleteRoutesRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:navService.DeleteRoutesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string routes_id = 1;
  for (int i = 0, n = this->routes_id_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->routes_id(i).data(), static_cast<int>(this->routes_id(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "navService.DeleteRoutesRequest.routes_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      1, this->routes_id(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:navService.DeleteRoutesRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteRoutesRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:navService.DeleteRoutesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string routes_id = 1;
  for (int i = 0, n = this->routes_id_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->routes_id(i).data(), static_cast<int>(this->routes_id(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "navService.DeleteRoutesRequest.routes_id");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(1, this->routes_id(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:navService.DeleteRoutesRequest)
  return target;
}

size_t DeleteRoutesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:navService.DeleteRoutesRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string routes_id = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->routes_id_size());
  for (int i = 0, n = this->routes_id_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->routes_id(i));
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteRoutesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:navService.DeleteRoutesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteRoutesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteRoutesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:navService.DeleteRoutesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:navService.DeleteRoutesRequest)
    MergeFrom(*source);
  }
}

void DeleteRoutesRequest::MergeFrom(const DeleteRoutesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:navService.DeleteRoutesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  routes_id_.MergeFrom(from.routes_id_);
}

void DeleteRoutesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:navService.DeleteRoutesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteRoutesRequest::CopyFrom(const DeleteRoutesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:navService.DeleteRoutesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteRoutesRequest::IsInitialized() const {
  return true;
}

void DeleteRoutesRequest::Swap(DeleteRoutesRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteRoutesRequest::InternalSwap(DeleteRoutesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  routes_id_.InternalSwap(CastToBase(&other->routes_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteRoutesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteRoutesResponse::InitAsDefaultInstance() {
}
class DeleteRoutesResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteRoutesResponse::DeleteRoutesResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:navService.DeleteRoutesResponse)
}
DeleteRoutesResponse::DeleteRoutesResponse(const DeleteRoutesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:navService.DeleteRoutesResponse)
}

void DeleteRoutesResponse::SharedCtor() {
}

DeleteRoutesResponse::~DeleteRoutesResponse() {
  // @@protoc_insertion_point(destructor:navService.DeleteRoutesResponse)
  SharedDtor();
}

void DeleteRoutesResponse::SharedDtor() {
}

void DeleteRoutesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteRoutesResponse& DeleteRoutesResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteRoutesResponse_nav_2eproto.base);
  return *internal_default_instance();
}


void DeleteRoutesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:navService.DeleteRoutesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeleteRoutesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeleteRoutesResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:navService.DeleteRoutesResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:navService.DeleteRoutesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:navService.DeleteRoutesResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeleteRoutesResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:navService.DeleteRoutesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:navService.DeleteRoutesResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteRoutesResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:navService.DeleteRoutesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:navService.DeleteRoutesResponse)
  return target;
}

size_t DeleteRoutesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:navService.DeleteRoutesResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteRoutesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:navService.DeleteRoutesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteRoutesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteRoutesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:navService.DeleteRoutesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:navService.DeleteRoutesResponse)
    MergeFrom(*source);
  }
}

void DeleteRoutesResponse::MergeFrom(const DeleteRoutesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:navService.DeleteRoutesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DeleteRoutesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:navService.DeleteRoutesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteRoutesResponse::CopyFrom(const DeleteRoutesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:navService.DeleteRoutesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteRoutesResponse::IsInitialized() const {
  return true;
}

void DeleteRoutesResponse::Swap(DeleteRoutesResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteRoutesResponse::InternalSwap(DeleteRoutesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteRoutesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace navService
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::navService::MoveRequest* Arena::CreateMaybeMessage< ::navService::MoveRequest >(Arena* arena) {
  return Arena::CreateInternal< ::navService::MoveRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::navService::MoveResponse* Arena::CreateMaybeMessage< ::navService::MoveResponse >(Arena* arena) {
  return Arena::CreateInternal< ::navService::MoveResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::navService::NavTarget* Arena::CreateMaybeMessage< ::navService::NavTarget >(Arena* arena) {
  return Arena::CreateInternal< ::navService::NavTarget >(arena);
}
template<> PROTOBUF_NOINLINE ::navService::NavRoaming* Arena::CreateMaybeMessage< ::navService::NavRoaming >(Arena* arena) {
  return Arena::CreateInternal< ::navService::NavRoaming >(arena);
}
template<> PROTOBUF_NOINLINE ::navService::NavToRequest* Arena::CreateMaybeMessage< ::navService::NavToRequest >(Arena* arena) {
  return Arena::CreateInternal< ::navService::NavToRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::navService::NavToResponse* Arena::CreateMaybeMessage< ::navService::NavToResponse >(Arena* arena) {
  return Arena::CreateInternal< ::navService::NavToResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::navService::NavStopRequest* Arena::CreateMaybeMessage< ::navService::NavStopRequest >(Arena* arena) {
  return Arena::CreateInternal< ::navService::NavStopRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::navService::NavStopResponse* Arena::CreateMaybeMessage< ::navService::NavStopResponse >(Arena* arena) {
  return Arena::CreateInternal< ::navService::NavStopResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::navService::AutoChargeRequest* Arena::CreateMaybeMessage< ::navService::AutoChargeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::navService::AutoChargeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::navService::AutoChargeResponse* Arena::CreateMaybeMessage< ::navService::AutoChargeResponse >(Arena* arena) {
  return Arena::CreateInternal< ::navService::AutoChargeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::navService::RotateRequest* Arena::CreateMaybeMessage< ::navService::RotateRequest >(Arena* arena) {
  return Arena::CreateInternal< ::navService::RotateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::navService::RotateResponse* Arena::CreateMaybeMessage< ::navService::RotateResponse >(Arena* arena) {
  return Arena::CreateInternal< ::navService::RotateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::navService::OnNavEventChangeRequest* Arena::CreateMaybeMessage< ::navService::OnNavEventChangeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::navService::OnNavEventChangeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::navService::MoveEvent* Arena::CreateMaybeMessage< ::navService::MoveEvent >(Arena* arena) {
  return Arena::CreateInternal< ::navService::MoveEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::navService::NavEvent* Arena::CreateMaybeMessage< ::navService::NavEvent >(Arena* arena) {
  return Arena::CreateInternal< ::navService::NavEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::navService::AutoChargeEvent* Arena::CreateMaybeMessage< ::navService::AutoChargeEvent >(Arena* arena) {
  return Arena::CreateInternal< ::navService::AutoChargeEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::navService::RotateEvent* Arena::CreateMaybeMessage< ::navService::RotateEvent >(Arena* arena) {
  return Arena::CreateInternal< ::navService::RotateEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::navService::OnNavEventChangeResponse* Arena::CreateMaybeMessage< ::navService::OnNavEventChangeResponse >(Arena* arena) {
  return Arena::CreateInternal< ::navService::OnNavEventChangeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::navService::Route* Arena::CreateMaybeMessage< ::navService::Route >(Arena* arena) {
  return Arena::CreateInternal< ::navService::Route >(arena);
}
template<> PROTOBUF_NOINLINE ::navService::RoutePoint* Arena::CreateMaybeMessage< ::navService::RoutePoint >(Arena* arena) {
  return Arena::CreateInternal< ::navService::RoutePoint >(arena);
}
template<> PROTOBUF_NOINLINE ::navService::NewRouteRequest* Arena::CreateMaybeMessage< ::navService::NewRouteRequest >(Arena* arena) {
  return Arena::CreateInternal< ::navService::NewRouteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::navService::NewRouteResponse* Arena::CreateMaybeMessage< ::navService::NewRouteResponse >(Arena* arena) {
  return Arena::CreateInternal< ::navService::NewRouteResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::navService::ListRoutesRequest* Arena::CreateMaybeMessage< ::navService::ListRoutesRequest >(Arena* arena) {
  return Arena::CreateInternal< ::navService::ListRoutesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::navService::ListRoutesResponse* Arena::CreateMaybeMessage< ::navService::ListRoutesResponse >(Arena* arena) {
  return Arena::CreateInternal< ::navService::ListRoutesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::navService::GetRouteRequest* Arena::CreateMaybeMessage< ::navService::GetRouteRequest >(Arena* arena) {
  return Arena::CreateInternal< ::navService::GetRouteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::navService::GetRouteResponse* Arena::CreateMaybeMessage< ::navService::GetRouteResponse >(Arena* arena) {
  return Arena::CreateInternal< ::navService::GetRouteResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::navService::UpdateRouteRequest* Arena::CreateMaybeMessage< ::navService::UpdateRouteRequest >(Arena* arena) {
  return Arena::CreateInternal< ::navService::UpdateRouteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::navService::UpdateRouteResponse* Arena::CreateMaybeMessage< ::navService::UpdateRouteResponse >(Arena* arena) {
  return Arena::CreateInternal< ::navService::UpdateRouteResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::navService::DeleteRoutesRequest* Arena::CreateMaybeMessage< ::navService::DeleteRoutesRequest >(Arena* arena) {
  return Arena::CreateInternal< ::navService::DeleteRoutesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::navService::DeleteRoutesResponse* Arena::CreateMaybeMessage< ::navService::DeleteRoutesResponse >(Arena* arena) {
  return Arena::CreateInternal< ::navService::DeleteRoutesResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
