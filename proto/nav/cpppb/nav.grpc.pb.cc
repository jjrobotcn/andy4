// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: nav.proto

#include "nav.pb.h"
#include "nav.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace navService {

static const char* NavController_method_names[] = {
  "/navService.NavController/Move",
  "/navService.NavController/NavTo",
  "/navService.NavController/NavStop",
  "/navService.NavController/AutoCharge",
  "/navService.NavController/Rotate",
  "/navService.NavController/OnNavEventChange",
  "/navService.NavController/LocationReset",
  "/navService.NavController/NewRoute",
  "/navService.NavController/ListRoutes",
  "/navService.NavController/UpdateRoute",
  "/navService.NavController/DeleteRoutes",
};

std::unique_ptr< NavController::Stub> NavController::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< NavController::Stub> stub(new NavController::Stub(channel));
  return stub;
}

NavController::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Move_(NavController_method_names[0], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_NavTo_(NavController_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_NavStop_(NavController_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AutoCharge_(NavController_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Rotate_(NavController_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_OnNavEventChange_(NavController_method_names[5], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_LocationReset_(NavController_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_NewRoute_(NavController_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListRoutes_(NavController_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateRoute_(NavController_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteRoutes_(NavController_method_names[10], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::ClientReaderWriter< ::navService::MoveRequest, ::navService::MoveResponse>* NavController::Stub::MoveRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::navService::MoveRequest, ::navService::MoveResponse>::Create(channel_.get(), rpcmethod_Move_, context);
}

void NavController::Stub::experimental_async::Move(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::navService::MoveRequest,::navService::MoveResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::navService::MoveRequest,::navService::MoveResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_Move_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::navService::MoveRequest, ::navService::MoveResponse>* NavController::Stub::AsyncMoveRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::navService::MoveRequest, ::navService::MoveResponse>::Create(channel_.get(), cq, rpcmethod_Move_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::navService::MoveRequest, ::navService::MoveResponse>* NavController::Stub::PrepareAsyncMoveRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::navService::MoveRequest, ::navService::MoveResponse>::Create(channel_.get(), cq, rpcmethod_Move_, context, false, nullptr);
}

::grpc::Status NavController::Stub::NavTo(::grpc::ClientContext* context, const ::navService::NavToRequest& request, ::navService::NavToResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_NavTo_, context, request, response);
}

void NavController::Stub::experimental_async::NavTo(::grpc::ClientContext* context, const ::navService::NavToRequest* request, ::navService::NavToResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_NavTo_, context, request, response, std::move(f));
}

void NavController::Stub::experimental_async::NavTo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::navService::NavToResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_NavTo_, context, request, response, std::move(f));
}

void NavController::Stub::experimental_async::NavTo(::grpc::ClientContext* context, const ::navService::NavToRequest* request, ::navService::NavToResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_NavTo_, context, request, response, reactor);
}

void NavController::Stub::experimental_async::NavTo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::navService::NavToResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_NavTo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::navService::NavToResponse>* NavController::Stub::AsyncNavToRaw(::grpc::ClientContext* context, const ::navService::NavToRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::navService::NavToResponse>::Create(channel_.get(), cq, rpcmethod_NavTo_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::navService::NavToResponse>* NavController::Stub::PrepareAsyncNavToRaw(::grpc::ClientContext* context, const ::navService::NavToRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::navService::NavToResponse>::Create(channel_.get(), cq, rpcmethod_NavTo_, context, request, false);
}

::grpc::Status NavController::Stub::NavStop(::grpc::ClientContext* context, const ::navService::NavStopRequest& request, ::navService::NavStopResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_NavStop_, context, request, response);
}

void NavController::Stub::experimental_async::NavStop(::grpc::ClientContext* context, const ::navService::NavStopRequest* request, ::navService::NavStopResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_NavStop_, context, request, response, std::move(f));
}

void NavController::Stub::experimental_async::NavStop(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::navService::NavStopResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_NavStop_, context, request, response, std::move(f));
}

void NavController::Stub::experimental_async::NavStop(::grpc::ClientContext* context, const ::navService::NavStopRequest* request, ::navService::NavStopResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_NavStop_, context, request, response, reactor);
}

void NavController::Stub::experimental_async::NavStop(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::navService::NavStopResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_NavStop_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::navService::NavStopResponse>* NavController::Stub::AsyncNavStopRaw(::grpc::ClientContext* context, const ::navService::NavStopRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::navService::NavStopResponse>::Create(channel_.get(), cq, rpcmethod_NavStop_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::navService::NavStopResponse>* NavController::Stub::PrepareAsyncNavStopRaw(::grpc::ClientContext* context, const ::navService::NavStopRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::navService::NavStopResponse>::Create(channel_.get(), cq, rpcmethod_NavStop_, context, request, false);
}

::grpc::Status NavController::Stub::AutoCharge(::grpc::ClientContext* context, const ::navService::AutoChargeRequest& request, ::navService::AutoChargeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AutoCharge_, context, request, response);
}

void NavController::Stub::experimental_async::AutoCharge(::grpc::ClientContext* context, const ::navService::AutoChargeRequest* request, ::navService::AutoChargeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AutoCharge_, context, request, response, std::move(f));
}

void NavController::Stub::experimental_async::AutoCharge(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::navService::AutoChargeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AutoCharge_, context, request, response, std::move(f));
}

void NavController::Stub::experimental_async::AutoCharge(::grpc::ClientContext* context, const ::navService::AutoChargeRequest* request, ::navService::AutoChargeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AutoCharge_, context, request, response, reactor);
}

void NavController::Stub::experimental_async::AutoCharge(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::navService::AutoChargeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AutoCharge_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::navService::AutoChargeResponse>* NavController::Stub::AsyncAutoChargeRaw(::grpc::ClientContext* context, const ::navService::AutoChargeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::navService::AutoChargeResponse>::Create(channel_.get(), cq, rpcmethod_AutoCharge_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::navService::AutoChargeResponse>* NavController::Stub::PrepareAsyncAutoChargeRaw(::grpc::ClientContext* context, const ::navService::AutoChargeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::navService::AutoChargeResponse>::Create(channel_.get(), cq, rpcmethod_AutoCharge_, context, request, false);
}

::grpc::Status NavController::Stub::Rotate(::grpc::ClientContext* context, const ::navService::RotateRequest& request, ::navService::RotateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Rotate_, context, request, response);
}

void NavController::Stub::experimental_async::Rotate(::grpc::ClientContext* context, const ::navService::RotateRequest* request, ::navService::RotateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Rotate_, context, request, response, std::move(f));
}

void NavController::Stub::experimental_async::Rotate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::navService::RotateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Rotate_, context, request, response, std::move(f));
}

void NavController::Stub::experimental_async::Rotate(::grpc::ClientContext* context, const ::navService::RotateRequest* request, ::navService::RotateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Rotate_, context, request, response, reactor);
}

void NavController::Stub::experimental_async::Rotate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::navService::RotateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Rotate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::navService::RotateResponse>* NavController::Stub::AsyncRotateRaw(::grpc::ClientContext* context, const ::navService::RotateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::navService::RotateResponse>::Create(channel_.get(), cq, rpcmethod_Rotate_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::navService::RotateResponse>* NavController::Stub::PrepareAsyncRotateRaw(::grpc::ClientContext* context, const ::navService::RotateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::navService::RotateResponse>::Create(channel_.get(), cq, rpcmethod_Rotate_, context, request, false);
}

::grpc::ClientReader< ::navService::OnNavEventChangeResponse>* NavController::Stub::OnNavEventChangeRaw(::grpc::ClientContext* context, const ::navService::OnNavEventChangeRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::navService::OnNavEventChangeResponse>::Create(channel_.get(), rpcmethod_OnNavEventChange_, context, request);
}

void NavController::Stub::experimental_async::OnNavEventChange(::grpc::ClientContext* context, ::navService::OnNavEventChangeRequest* request, ::grpc::experimental::ClientReadReactor< ::navService::OnNavEventChangeResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::navService::OnNavEventChangeResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_OnNavEventChange_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::navService::OnNavEventChangeResponse>* NavController::Stub::AsyncOnNavEventChangeRaw(::grpc::ClientContext* context, const ::navService::OnNavEventChangeRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::navService::OnNavEventChangeResponse>::Create(channel_.get(), cq, rpcmethod_OnNavEventChange_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::navService::OnNavEventChangeResponse>* NavController::Stub::PrepareAsyncOnNavEventChangeRaw(::grpc::ClientContext* context, const ::navService::OnNavEventChangeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::navService::OnNavEventChangeResponse>::Create(channel_.get(), cq, rpcmethod_OnNavEventChange_, context, request, false, nullptr);
}

::grpc::Status NavController::Stub::LocationReset(::grpc::ClientContext* context, const ::navService::LocationResetRequest& request, ::navService::LocationResetResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_LocationReset_, context, request, response);
}

void NavController::Stub::experimental_async::LocationReset(::grpc::ClientContext* context, const ::navService::LocationResetRequest* request, ::navService::LocationResetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_LocationReset_, context, request, response, std::move(f));
}

void NavController::Stub::experimental_async::LocationReset(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::navService::LocationResetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_LocationReset_, context, request, response, std::move(f));
}

void NavController::Stub::experimental_async::LocationReset(::grpc::ClientContext* context, const ::navService::LocationResetRequest* request, ::navService::LocationResetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_LocationReset_, context, request, response, reactor);
}

void NavController::Stub::experimental_async::LocationReset(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::navService::LocationResetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_LocationReset_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::navService::LocationResetResponse>* NavController::Stub::AsyncLocationResetRaw(::grpc::ClientContext* context, const ::navService::LocationResetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::navService::LocationResetResponse>::Create(channel_.get(), cq, rpcmethod_LocationReset_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::navService::LocationResetResponse>* NavController::Stub::PrepareAsyncLocationResetRaw(::grpc::ClientContext* context, const ::navService::LocationResetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::navService::LocationResetResponse>::Create(channel_.get(), cq, rpcmethod_LocationReset_, context, request, false);
}

::grpc::Status NavController::Stub::NewRoute(::grpc::ClientContext* context, const ::navService::NewRouteRequest& request, ::navService::NewRouteResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_NewRoute_, context, request, response);
}

void NavController::Stub::experimental_async::NewRoute(::grpc::ClientContext* context, const ::navService::NewRouteRequest* request, ::navService::NewRouteResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_NewRoute_, context, request, response, std::move(f));
}

void NavController::Stub::experimental_async::NewRoute(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::navService::NewRouteResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_NewRoute_, context, request, response, std::move(f));
}

void NavController::Stub::experimental_async::NewRoute(::grpc::ClientContext* context, const ::navService::NewRouteRequest* request, ::navService::NewRouteResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_NewRoute_, context, request, response, reactor);
}

void NavController::Stub::experimental_async::NewRoute(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::navService::NewRouteResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_NewRoute_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::navService::NewRouteResponse>* NavController::Stub::AsyncNewRouteRaw(::grpc::ClientContext* context, const ::navService::NewRouteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::navService::NewRouteResponse>::Create(channel_.get(), cq, rpcmethod_NewRoute_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::navService::NewRouteResponse>* NavController::Stub::PrepareAsyncNewRouteRaw(::grpc::ClientContext* context, const ::navService::NewRouteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::navService::NewRouteResponse>::Create(channel_.get(), cq, rpcmethod_NewRoute_, context, request, false);
}

::grpc::Status NavController::Stub::ListRoutes(::grpc::ClientContext* context, const ::navService::ListRoutesRequest& request, ::navService::ListRoutesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListRoutes_, context, request, response);
}

void NavController::Stub::experimental_async::ListRoutes(::grpc::ClientContext* context, const ::navService::ListRoutesRequest* request, ::navService::ListRoutesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListRoutes_, context, request, response, std::move(f));
}

void NavController::Stub::experimental_async::ListRoutes(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::navService::ListRoutesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListRoutes_, context, request, response, std::move(f));
}

void NavController::Stub::experimental_async::ListRoutes(::grpc::ClientContext* context, const ::navService::ListRoutesRequest* request, ::navService::ListRoutesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListRoutes_, context, request, response, reactor);
}

void NavController::Stub::experimental_async::ListRoutes(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::navService::ListRoutesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListRoutes_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::navService::ListRoutesResponse>* NavController::Stub::AsyncListRoutesRaw(::grpc::ClientContext* context, const ::navService::ListRoutesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::navService::ListRoutesResponse>::Create(channel_.get(), cq, rpcmethod_ListRoutes_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::navService::ListRoutesResponse>* NavController::Stub::PrepareAsyncListRoutesRaw(::grpc::ClientContext* context, const ::navService::ListRoutesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::navService::ListRoutesResponse>::Create(channel_.get(), cq, rpcmethod_ListRoutes_, context, request, false);
}

::grpc::Status NavController::Stub::UpdateRoute(::grpc::ClientContext* context, const ::navService::UpdateRouteRequest& request, ::navService::UpdateRouteResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateRoute_, context, request, response);
}

void NavController::Stub::experimental_async::UpdateRoute(::grpc::ClientContext* context, const ::navService::UpdateRouteRequest* request, ::navService::UpdateRouteResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateRoute_, context, request, response, std::move(f));
}

void NavController::Stub::experimental_async::UpdateRoute(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::navService::UpdateRouteResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateRoute_, context, request, response, std::move(f));
}

void NavController::Stub::experimental_async::UpdateRoute(::grpc::ClientContext* context, const ::navService::UpdateRouteRequest* request, ::navService::UpdateRouteResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UpdateRoute_, context, request, response, reactor);
}

void NavController::Stub::experimental_async::UpdateRoute(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::navService::UpdateRouteResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UpdateRoute_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::navService::UpdateRouteResponse>* NavController::Stub::AsyncUpdateRouteRaw(::grpc::ClientContext* context, const ::navService::UpdateRouteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::navService::UpdateRouteResponse>::Create(channel_.get(), cq, rpcmethod_UpdateRoute_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::navService::UpdateRouteResponse>* NavController::Stub::PrepareAsyncUpdateRouteRaw(::grpc::ClientContext* context, const ::navService::UpdateRouteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::navService::UpdateRouteResponse>::Create(channel_.get(), cq, rpcmethod_UpdateRoute_, context, request, false);
}

::grpc::Status NavController::Stub::DeleteRoutes(::grpc::ClientContext* context, const ::navService::DeleteRoutesRequest& request, ::navService::DeleteRoutesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteRoutes_, context, request, response);
}

void NavController::Stub::experimental_async::DeleteRoutes(::grpc::ClientContext* context, const ::navService::DeleteRoutesRequest* request, ::navService::DeleteRoutesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteRoutes_, context, request, response, std::move(f));
}

void NavController::Stub::experimental_async::DeleteRoutes(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::navService::DeleteRoutesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteRoutes_, context, request, response, std::move(f));
}

void NavController::Stub::experimental_async::DeleteRoutes(::grpc::ClientContext* context, const ::navService::DeleteRoutesRequest* request, ::navService::DeleteRoutesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteRoutes_, context, request, response, reactor);
}

void NavController::Stub::experimental_async::DeleteRoutes(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::navService::DeleteRoutesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteRoutes_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::navService::DeleteRoutesResponse>* NavController::Stub::AsyncDeleteRoutesRaw(::grpc::ClientContext* context, const ::navService::DeleteRoutesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::navService::DeleteRoutesResponse>::Create(channel_.get(), cq, rpcmethod_DeleteRoutes_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::navService::DeleteRoutesResponse>* NavController::Stub::PrepareAsyncDeleteRoutesRaw(::grpc::ClientContext* context, const ::navService::DeleteRoutesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::navService::DeleteRoutesResponse>::Create(channel_.get(), cq, rpcmethod_DeleteRoutes_, context, request, false);
}

NavController::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NavController_method_names[0],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< NavController::Service, ::navService::MoveRequest, ::navService::MoveResponse>(
          std::mem_fn(&NavController::Service::Move), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NavController_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NavController::Service, ::navService::NavToRequest, ::navService::NavToResponse>(
          std::mem_fn(&NavController::Service::NavTo), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NavController_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NavController::Service, ::navService::NavStopRequest, ::navService::NavStopResponse>(
          std::mem_fn(&NavController::Service::NavStop), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NavController_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NavController::Service, ::navService::AutoChargeRequest, ::navService::AutoChargeResponse>(
          std::mem_fn(&NavController::Service::AutoCharge), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NavController_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NavController::Service, ::navService::RotateRequest, ::navService::RotateResponse>(
          std::mem_fn(&NavController::Service::Rotate), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NavController_method_names[5],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< NavController::Service, ::navService::OnNavEventChangeRequest, ::navService::OnNavEventChangeResponse>(
          std::mem_fn(&NavController::Service::OnNavEventChange), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NavController_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NavController::Service, ::navService::LocationResetRequest, ::navService::LocationResetResponse>(
          std::mem_fn(&NavController::Service::LocationReset), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NavController_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NavController::Service, ::navService::NewRouteRequest, ::navService::NewRouteResponse>(
          std::mem_fn(&NavController::Service::NewRoute), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NavController_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NavController::Service, ::navService::ListRoutesRequest, ::navService::ListRoutesResponse>(
          std::mem_fn(&NavController::Service::ListRoutes), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NavController_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NavController::Service, ::navService::UpdateRouteRequest, ::navService::UpdateRouteResponse>(
          std::mem_fn(&NavController::Service::UpdateRoute), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NavController_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NavController::Service, ::navService::DeleteRoutesRequest, ::navService::DeleteRoutesResponse>(
          std::mem_fn(&NavController::Service::DeleteRoutes), this)));
}

NavController::Service::~Service() {
}

::grpc::Status NavController::Service::Move(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::navService::MoveResponse, ::navService::MoveRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NavController::Service::NavTo(::grpc::ServerContext* context, const ::navService::NavToRequest* request, ::navService::NavToResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NavController::Service::NavStop(::grpc::ServerContext* context, const ::navService::NavStopRequest* request, ::navService::NavStopResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NavController::Service::AutoCharge(::grpc::ServerContext* context, const ::navService::AutoChargeRequest* request, ::navService::AutoChargeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NavController::Service::Rotate(::grpc::ServerContext* context, const ::navService::RotateRequest* request, ::navService::RotateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NavController::Service::OnNavEventChange(::grpc::ServerContext* context, const ::navService::OnNavEventChangeRequest* request, ::grpc::ServerWriter< ::navService::OnNavEventChangeResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NavController::Service::LocationReset(::grpc::ServerContext* context, const ::navService::LocationResetRequest* request, ::navService::LocationResetResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NavController::Service::NewRoute(::grpc::ServerContext* context, const ::navService::NewRouteRequest* request, ::navService::NewRouteResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NavController::Service::ListRoutes(::grpc::ServerContext* context, const ::navService::ListRoutesRequest* request, ::navService::ListRoutesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NavController::Service::UpdateRoute(::grpc::ServerContext* context, const ::navService::UpdateRouteRequest* request, ::navService::UpdateRouteResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NavController::Service::DeleteRoutes(::grpc::ServerContext* context, const ::navService::DeleteRoutesRequest* request, ::navService::DeleteRoutesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace navService

