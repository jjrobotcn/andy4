// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: map.proto

#include "map.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_map_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetMapInfoResponse_MapImage_map_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_map_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetMapInfoResponse_MapPoint_map_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_map_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MapPosition_map_2eproto;
namespace navService {
class MapPositionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MapPosition> _instance;
} _MapPosition_default_instance_;
class GetMapInfoRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetMapInfoRequest> _instance;
} _GetMapInfoRequest_default_instance_;
class GetMapInfoResponse_MapImageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetMapInfoResponse_MapImage> _instance;
} _GetMapInfoResponse_MapImage_default_instance_;
class GetMapInfoResponse_MapPointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetMapInfoResponse_MapPoint> _instance;
} _GetMapInfoResponse_MapPoint_default_instance_;
class GetMapInfoResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetMapInfoResponse> _instance;
} _GetMapInfoResponse_default_instance_;
class MapPositionStreamRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MapPositionStreamRequest> _instance;
} _MapPositionStreamRequest_default_instance_;
class MapPositionStreamResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MapPositionStreamResponse> _instance;
} _MapPositionStreamResponse_default_instance_;
class LocationResetRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LocationResetRequest> _instance;
} _LocationResetRequest_default_instance_;
class LocationResetResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LocationResetResponse> _instance;
} _LocationResetResponse_default_instance_;
}  // namespace navService
static void InitDefaultsscc_info_GetMapInfoRequest_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::navService::_GetMapInfoRequest_default_instance_;
    new (ptr) ::navService::GetMapInfoRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::navService::GetMapInfoRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetMapInfoRequest_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GetMapInfoRequest_map_2eproto}, {}};

static void InitDefaultsscc_info_GetMapInfoResponse_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::navService::_GetMapInfoResponse_default_instance_;
    new (ptr) ::navService::GetMapInfoResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::navService::GetMapInfoResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetMapInfoResponse_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_GetMapInfoResponse_map_2eproto}, {
      &scc_info_GetMapInfoResponse_MapImage_map_2eproto.base,
      &scc_info_GetMapInfoResponse_MapPoint_map_2eproto.base,}};

static void InitDefaultsscc_info_GetMapInfoResponse_MapImage_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::navService::_GetMapInfoResponse_MapImage_default_instance_;
    new (ptr) ::navService::GetMapInfoResponse_MapImage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::navService::GetMapInfoResponse_MapImage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetMapInfoResponse_MapImage_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GetMapInfoResponse_MapImage_map_2eproto}, {}};

static void InitDefaultsscc_info_GetMapInfoResponse_MapPoint_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::navService::_GetMapInfoResponse_MapPoint_default_instance_;
    new (ptr) ::navService::GetMapInfoResponse_MapPoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::navService::GetMapInfoResponse_MapPoint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetMapInfoResponse_MapPoint_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GetMapInfoResponse_MapPoint_map_2eproto}, {
      &scc_info_MapPosition_map_2eproto.base,}};

static void InitDefaultsscc_info_LocationResetRequest_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::navService::_LocationResetRequest_default_instance_;
    new (ptr) ::navService::LocationResetRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::navService::LocationResetRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LocationResetRequest_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_LocationResetRequest_map_2eproto}, {}};

static void InitDefaultsscc_info_LocationResetResponse_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::navService::_LocationResetResponse_default_instance_;
    new (ptr) ::navService::LocationResetResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::navService::LocationResetResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LocationResetResponse_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_LocationResetResponse_map_2eproto}, {}};

static void InitDefaultsscc_info_MapPosition_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::navService::_MapPosition_default_instance_;
    new (ptr) ::navService::MapPosition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::navService::MapPosition::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MapPosition_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MapPosition_map_2eproto}, {}};

static void InitDefaultsscc_info_MapPositionStreamRequest_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::navService::_MapPositionStreamRequest_default_instance_;
    new (ptr) ::navService::MapPositionStreamRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::navService::MapPositionStreamRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MapPositionStreamRequest_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MapPositionStreamRequest_map_2eproto}, {}};

static void InitDefaultsscc_info_MapPositionStreamResponse_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::navService::_MapPositionStreamResponse_default_instance_;
    new (ptr) ::navService::MapPositionStreamResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::navService::MapPositionStreamResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MapPositionStreamResponse_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_MapPositionStreamResponse_map_2eproto}, {
      &scc_info_MapPosition_map_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_map_2eproto[9];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_map_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_map_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_map_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::navService::MapPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::navService::MapPosition, x_),
  PROTOBUF_FIELD_OFFSET(::navService::MapPosition, y_),
  PROTOBUF_FIELD_OFFSET(::navService::MapPosition, angle_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::navService::GetMapInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::navService::GetMapInfoRequest, no_map_image_),
  PROTOBUF_FIELD_OFFSET(::navService::GetMapInfoRequest, no_map_points_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::navService::GetMapInfoResponse_MapImage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::navService::GetMapInfoResponse_MapImage, width_),
  PROTOBUF_FIELD_OFFSET(::navService::GetMapInfoResponse_MapImage, height_),
  PROTOBUF_FIELD_OFFSET(::navService::GetMapInfoResponse_MapImage, image_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::navService::GetMapInfoResponse_MapPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::navService::GetMapInfoResponse_MapPoint, name_),
  PROTOBUF_FIELD_OFFSET(::navService::GetMapInfoResponse_MapPoint, position_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::navService::GetMapInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::navService::GetMapInfoResponse, id_),
  PROTOBUF_FIELD_OFFSET(::navService::GetMapInfoResponse, name_),
  PROTOBUF_FIELD_OFFSET(::navService::GetMapInfoResponse, map_image_),
  PROTOBUF_FIELD_OFFSET(::navService::GetMapInfoResponse, map_points_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::navService::MapPositionStreamRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::navService::MapPositionStreamResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::navService::MapPositionStreamResponse, position_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::navService::LocationResetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::navService::LocationResetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::navService::MapPosition)},
  { 8, -1, sizeof(::navService::GetMapInfoRequest)},
  { 15, -1, sizeof(::navService::GetMapInfoResponse_MapImage)},
  { 23, -1, sizeof(::navService::GetMapInfoResponse_MapPoint)},
  { 30, -1, sizeof(::navService::GetMapInfoResponse)},
  { 39, -1, sizeof(::navService::MapPositionStreamRequest)},
  { 44, -1, sizeof(::navService::MapPositionStreamResponse)},
  { 50, -1, sizeof(::navService::LocationResetRequest)},
  { 55, -1, sizeof(::navService::LocationResetResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::navService::_MapPosition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::navService::_GetMapInfoRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::navService::_GetMapInfoResponse_MapImage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::navService::_GetMapInfoResponse_MapPoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::navService::_GetMapInfoResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::navService::_MapPositionStreamRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::navService::_MapPositionStreamResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::navService::_LocationResetRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::navService::_LocationResetResponse_default_instance_),
};

const char descriptor_table_protodef_map_2eproto[] =
  "\n\tmap.proto\022\nnavService\032\034google/api/anno"
  "tations.proto\"2\n\013MapPosition\022\t\n\001x\030\001 \001(\r\022"
  "\t\n\001y\030\002 \001(\r\022\r\n\005angle\030\003 \001(\r\"@\n\021GetMapInfoR"
  "equest\022\024\n\014no_map_image\030\001 \001(\010\022\025\n\rno_map_p"
  "oints\030\002 \001(\010\"\246\002\n\022GetMapInfoResponse\022\n\n\002id"
  "\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022:\n\tmap_image\030\003 \001(\0132"
  "\'.navService.GetMapInfoResponse.MapImage"
  "\022;\n\nmap_points\030\004 \003(\0132\'.navService.GetMap"
  "InfoResponse.MapPoint\0328\n\010MapImage\022\r\n\005wid"
  "th\030\001 \001(\r\022\016\n\006height\030\002 \001(\r\022\r\n\005image\030\003 \001(\014\032"
  "C\n\010MapPoint\022\014\n\004name\030\001 \001(\t\022)\n\010position\030\002 "
  "\001(\0132\027.navService.MapPosition\"\032\n\030MapPosit"
  "ionStreamRequest\"F\n\031MapPositionStreamRes"
  "ponse\022)\n\010position\030\001 \001(\0132\027.navService.Map"
  "Position\"\026\n\024LocationResetRequest\"\027\n\025Loca"
  "tionResetResponse2\377\002\n\003Map\022m\n\nGetMapInfo\022"
  "\035.navService.GetMapInfoRequest\032\036.navServ"
  "ice.GetMapInfoResponse\" \202\323\344\223\002\032\022\030/api/v2/"
  "nav/get_map_info\022\213\001\n\021MapPositionStream\022$"
  ".navService.MapPositionStreamRequest\032%.n"
  "avService.MapPositionStreamResponse\"\'\202\323\344"
  "\223\002!\022\037/api/v2/nav/map_position_stream0\001\022{"
  "\n\rLocationReset\022 .navService.LocationRes"
  "etRequest\032!.navService.LocationResetResp"
  "onse\"%\202\323\344\223\002\037\"\032/api/v2/nav/location_reset"
  ":\001*b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_map_2eproto_deps[1] = {
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_map_2eproto_sccs[9] = {
  &scc_info_GetMapInfoRequest_map_2eproto.base,
  &scc_info_GetMapInfoResponse_map_2eproto.base,
  &scc_info_GetMapInfoResponse_MapImage_map_2eproto.base,
  &scc_info_GetMapInfoResponse_MapPoint_map_2eproto.base,
  &scc_info_LocationResetRequest_map_2eproto.base,
  &scc_info_LocationResetResponse_map_2eproto.base,
  &scc_info_MapPosition_map_2eproto.base,
  &scc_info_MapPositionStreamRequest_map_2eproto.base,
  &scc_info_MapPositionStreamResponse_map_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_map_2eproto_once;
static bool descriptor_table_map_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_map_2eproto = {
  &descriptor_table_map_2eproto_initialized, descriptor_table_protodef_map_2eproto, "map.proto", 1011,
  &descriptor_table_map_2eproto_once, descriptor_table_map_2eproto_sccs, descriptor_table_map_2eproto_deps, 9, 1,
  schemas, file_default_instances, TableStruct_map_2eproto::offsets,
  file_level_metadata_map_2eproto, 9, file_level_enum_descriptors_map_2eproto, file_level_service_descriptors_map_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_map_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_map_2eproto), true);
namespace navService {

// ===================================================================

void MapPosition::InitAsDefaultInstance() {
}
class MapPosition::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MapPosition::kXFieldNumber;
const int MapPosition::kYFieldNumber;
const int MapPosition::kAngleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MapPosition::MapPosition()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:navService.MapPosition)
}
MapPosition::MapPosition(const MapPosition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&angle_) -
    reinterpret_cast<char*>(&x_)) + sizeof(angle_));
  // @@protoc_insertion_point(copy_constructor:navService.MapPosition)
}

void MapPosition::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&angle_) -
      reinterpret_cast<char*>(&x_)) + sizeof(angle_));
}

MapPosition::~MapPosition() {
  // @@protoc_insertion_point(destructor:navService.MapPosition)
  SharedDtor();
}

void MapPosition::SharedDtor() {
}

void MapPosition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MapPosition& MapPosition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MapPosition_map_2eproto.base);
  return *internal_default_instance();
}


void MapPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:navService.MapPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&angle_) -
      reinterpret_cast<char*>(&x_)) + sizeof(angle_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MapPosition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 angle = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          angle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MapPosition::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:navService.MapPosition)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 x = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 y = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 angle = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:navService.MapPosition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:navService.MapPosition)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MapPosition::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:navService.MapPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 x = 1;
  if (this->x() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->x(), output);
  }

  // uint32 y = 2;
  if (this->y() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->y(), output);
  }

  // uint32 angle = 3;
  if (this->angle() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->angle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:navService.MapPosition)
}

::PROTOBUF_NAMESPACE_ID::uint8* MapPosition::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:navService.MapPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 x = 1;
  if (this->x() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->x(), target);
  }

  // uint32 y = 2;
  if (this->y() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->y(), target);
  }

  // uint32 angle = 3;
  if (this->angle() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->angle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:navService.MapPosition)
  return target;
}

size_t MapPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:navService.MapPosition)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 x = 1;
  if (this->x() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->x());
  }

  // uint32 y = 2;
  if (this->y() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->y());
  }

  // uint32 angle = 3;
  if (this->angle() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->angle());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapPosition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:navService.MapPosition)
  GOOGLE_DCHECK_NE(&from, this);
  const MapPosition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MapPosition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:navService.MapPosition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:navService.MapPosition)
    MergeFrom(*source);
  }
}

void MapPosition::MergeFrom(const MapPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:navService.MapPosition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.angle() != 0) {
    set_angle(from.angle());
  }
}

void MapPosition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:navService.MapPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapPosition::CopyFrom(const MapPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:navService.MapPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapPosition::IsInitialized() const {
  return true;
}

void MapPosition::Swap(MapPosition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MapPosition::InternalSwap(MapPosition* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(angle_, other->angle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MapPosition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetMapInfoRequest::InitAsDefaultInstance() {
}
class GetMapInfoRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetMapInfoRequest::kNoMapImageFieldNumber;
const int GetMapInfoRequest::kNoMapPointsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetMapInfoRequest::GetMapInfoRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:navService.GetMapInfoRequest)
}
GetMapInfoRequest::GetMapInfoRequest(const GetMapInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&no_map_image_, &from.no_map_image_,
    static_cast<size_t>(reinterpret_cast<char*>(&no_map_points_) -
    reinterpret_cast<char*>(&no_map_image_)) + sizeof(no_map_points_));
  // @@protoc_insertion_point(copy_constructor:navService.GetMapInfoRequest)
}

void GetMapInfoRequest::SharedCtor() {
  ::memset(&no_map_image_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&no_map_points_) -
      reinterpret_cast<char*>(&no_map_image_)) + sizeof(no_map_points_));
}

GetMapInfoRequest::~GetMapInfoRequest() {
  // @@protoc_insertion_point(destructor:navService.GetMapInfoRequest)
  SharedDtor();
}

void GetMapInfoRequest::SharedDtor() {
}

void GetMapInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetMapInfoRequest& GetMapInfoRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetMapInfoRequest_map_2eproto.base);
  return *internal_default_instance();
}


void GetMapInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:navService.GetMapInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&no_map_image_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&no_map_points_) -
      reinterpret_cast<char*>(&no_map_image_)) + sizeof(no_map_points_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetMapInfoRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool no_map_image = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          no_map_image_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool no_map_points = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          no_map_points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetMapInfoRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:navService.GetMapInfoRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool no_map_image = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &no_map_image_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool no_map_points = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &no_map_points_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:navService.GetMapInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:navService.GetMapInfoRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetMapInfoRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:navService.GetMapInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool no_map_image = 1;
  if (this->no_map_image() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->no_map_image(), output);
  }

  // bool no_map_points = 2;
  if (this->no_map_points() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->no_map_points(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:navService.GetMapInfoRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetMapInfoRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:navService.GetMapInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool no_map_image = 1;
  if (this->no_map_image() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->no_map_image(), target);
  }

  // bool no_map_points = 2;
  if (this->no_map_points() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->no_map_points(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:navService.GetMapInfoRequest)
  return target;
}

size_t GetMapInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:navService.GetMapInfoRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool no_map_image = 1;
  if (this->no_map_image() != 0) {
    total_size += 1 + 1;
  }

  // bool no_map_points = 2;
  if (this->no_map_points() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetMapInfoRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:navService.GetMapInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetMapInfoRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetMapInfoRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:navService.GetMapInfoRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:navService.GetMapInfoRequest)
    MergeFrom(*source);
  }
}

void GetMapInfoRequest::MergeFrom(const GetMapInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:navService.GetMapInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.no_map_image() != 0) {
    set_no_map_image(from.no_map_image());
  }
  if (from.no_map_points() != 0) {
    set_no_map_points(from.no_map_points());
  }
}

void GetMapInfoRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:navService.GetMapInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMapInfoRequest::CopyFrom(const GetMapInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:navService.GetMapInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMapInfoRequest::IsInitialized() const {
  return true;
}

void GetMapInfoRequest::Swap(GetMapInfoRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetMapInfoRequest::InternalSwap(GetMapInfoRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(no_map_image_, other->no_map_image_);
  swap(no_map_points_, other->no_map_points_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetMapInfoRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetMapInfoResponse_MapImage::InitAsDefaultInstance() {
}
class GetMapInfoResponse_MapImage::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetMapInfoResponse_MapImage::kWidthFieldNumber;
const int GetMapInfoResponse_MapImage::kHeightFieldNumber;
const int GetMapInfoResponse_MapImage::kImageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetMapInfoResponse_MapImage::GetMapInfoResponse_MapImage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:navService.GetMapInfoResponse.MapImage)
}
GetMapInfoResponse_MapImage::GetMapInfoResponse_MapImage(const GetMapInfoResponse_MapImage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.image().size() > 0) {
    image_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.image_);
  }
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:navService.GetMapInfoResponse.MapImage)
}

void GetMapInfoResponse_MapImage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetMapInfoResponse_MapImage_map_2eproto.base);
  image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&width_)) + sizeof(height_));
}

GetMapInfoResponse_MapImage::~GetMapInfoResponse_MapImage() {
  // @@protoc_insertion_point(destructor:navService.GetMapInfoResponse.MapImage)
  SharedDtor();
}

void GetMapInfoResponse_MapImage::SharedDtor() {
  image_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetMapInfoResponse_MapImage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetMapInfoResponse_MapImage& GetMapInfoResponse_MapImage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetMapInfoResponse_MapImage_map_2eproto.base);
  return *internal_default_instance();
}


void GetMapInfoResponse_MapImage::Clear() {
// @@protoc_insertion_point(message_clear_start:navService.GetMapInfoResponse.MapImage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  image_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&width_)) + sizeof(height_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetMapInfoResponse_MapImage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes image = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_image(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetMapInfoResponse_MapImage::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:navService.GetMapInfoResponse.MapImage)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 width = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 height = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes image = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_image()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:navService.GetMapInfoResponse.MapImage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:navService.GetMapInfoResponse.MapImage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetMapInfoResponse_MapImage::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:navService.GetMapInfoResponse.MapImage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 width = 1;
  if (this->width() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->width(), output);
  }

  // uint32 height = 2;
  if (this->height() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->height(), output);
  }

  // bytes image = 3;
  if (this->image().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->image(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:navService.GetMapInfoResponse.MapImage)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetMapInfoResponse_MapImage::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:navService.GetMapInfoResponse.MapImage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 width = 1;
  if (this->width() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->width(), target);
  }

  // uint32 height = 2;
  if (this->height() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->height(), target);
  }

  // bytes image = 3;
  if (this->image().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        3, this->image(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:navService.GetMapInfoResponse.MapImage)
  return target;
}

size_t GetMapInfoResponse_MapImage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:navService.GetMapInfoResponse.MapImage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes image = 3;
  if (this->image().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->image());
  }

  // uint32 width = 1;
  if (this->width() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->width());
  }

  // uint32 height = 2;
  if (this->height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->height());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetMapInfoResponse_MapImage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:navService.GetMapInfoResponse.MapImage)
  GOOGLE_DCHECK_NE(&from, this);
  const GetMapInfoResponse_MapImage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetMapInfoResponse_MapImage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:navService.GetMapInfoResponse.MapImage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:navService.GetMapInfoResponse.MapImage)
    MergeFrom(*source);
  }
}

void GetMapInfoResponse_MapImage::MergeFrom(const GetMapInfoResponse_MapImage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:navService.GetMapInfoResponse.MapImage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.image().size() > 0) {

    image_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.image_);
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
}

void GetMapInfoResponse_MapImage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:navService.GetMapInfoResponse.MapImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMapInfoResponse_MapImage::CopyFrom(const GetMapInfoResponse_MapImage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:navService.GetMapInfoResponse.MapImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMapInfoResponse_MapImage::IsInitialized() const {
  return true;
}

void GetMapInfoResponse_MapImage::Swap(GetMapInfoResponse_MapImage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetMapInfoResponse_MapImage::InternalSwap(GetMapInfoResponse_MapImage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  image_.Swap(&other->image_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(width_, other->width_);
  swap(height_, other->height_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetMapInfoResponse_MapImage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetMapInfoResponse_MapPoint::InitAsDefaultInstance() {
  ::navService::_GetMapInfoResponse_MapPoint_default_instance_._instance.get_mutable()->position_ = const_cast< ::navService::MapPosition*>(
      ::navService::MapPosition::internal_default_instance());
}
class GetMapInfoResponse_MapPoint::HasBitSetters {
 public:
  static const ::navService::MapPosition& position(const GetMapInfoResponse_MapPoint* msg);
};

const ::navService::MapPosition&
GetMapInfoResponse_MapPoint::HasBitSetters::position(const GetMapInfoResponse_MapPoint* msg) {
  return *msg->position_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetMapInfoResponse_MapPoint::kNameFieldNumber;
const int GetMapInfoResponse_MapPoint::kPositionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetMapInfoResponse_MapPoint::GetMapInfoResponse_MapPoint()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:navService.GetMapInfoResponse.MapPoint)
}
GetMapInfoResponse_MapPoint::GetMapInfoResponse_MapPoint(const GetMapInfoResponse_MapPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_position()) {
    position_ = new ::navService::MapPosition(*from.position_);
  } else {
    position_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:navService.GetMapInfoResponse.MapPoint)
}

void GetMapInfoResponse_MapPoint::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetMapInfoResponse_MapPoint_map_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  position_ = nullptr;
}

GetMapInfoResponse_MapPoint::~GetMapInfoResponse_MapPoint() {
  // @@protoc_insertion_point(destructor:navService.GetMapInfoResponse.MapPoint)
  SharedDtor();
}

void GetMapInfoResponse_MapPoint::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete position_;
}

void GetMapInfoResponse_MapPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetMapInfoResponse_MapPoint& GetMapInfoResponse_MapPoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetMapInfoResponse_MapPoint_map_2eproto.base);
  return *internal_default_instance();
}


void GetMapInfoResponse_MapPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:navService.GetMapInfoResponse.MapPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetMapInfoResponse_MapPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "navService.GetMapInfoResponse.MapPoint.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .navService.MapPosition position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetMapInfoResponse_MapPoint::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:navService.GetMapInfoResponse.MapPoint)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "navService.GetMapInfoResponse.MapPoint.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .navService.MapPosition position = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:navService.GetMapInfoResponse.MapPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:navService.GetMapInfoResponse.MapPoint)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetMapInfoResponse_MapPoint::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:navService.GetMapInfoResponse.MapPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "navService.GetMapInfoResponse.MapPoint.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .navService.MapPosition position = 2;
  if (this->has_position()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::position(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:navService.GetMapInfoResponse.MapPoint)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetMapInfoResponse_MapPoint::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:navService.GetMapInfoResponse.MapPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "navService.GetMapInfoResponse.MapPoint.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // .navService.MapPosition position = 2;
  if (this->has_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::position(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:navService.GetMapInfoResponse.MapPoint)
  return target;
}

size_t GetMapInfoResponse_MapPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:navService.GetMapInfoResponse.MapPoint)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .navService.MapPosition position = 2;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetMapInfoResponse_MapPoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:navService.GetMapInfoResponse.MapPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const GetMapInfoResponse_MapPoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetMapInfoResponse_MapPoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:navService.GetMapInfoResponse.MapPoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:navService.GetMapInfoResponse.MapPoint)
    MergeFrom(*source);
  }
}

void GetMapInfoResponse_MapPoint::MergeFrom(const GetMapInfoResponse_MapPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:navService.GetMapInfoResponse.MapPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_position()) {
    mutable_position()->::navService::MapPosition::MergeFrom(from.position());
  }
}

void GetMapInfoResponse_MapPoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:navService.GetMapInfoResponse.MapPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMapInfoResponse_MapPoint::CopyFrom(const GetMapInfoResponse_MapPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:navService.GetMapInfoResponse.MapPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMapInfoResponse_MapPoint::IsInitialized() const {
  return true;
}

void GetMapInfoResponse_MapPoint::Swap(GetMapInfoResponse_MapPoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetMapInfoResponse_MapPoint::InternalSwap(GetMapInfoResponse_MapPoint* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(position_, other->position_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetMapInfoResponse_MapPoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetMapInfoResponse::InitAsDefaultInstance() {
  ::navService::_GetMapInfoResponse_default_instance_._instance.get_mutable()->map_image_ = const_cast< ::navService::GetMapInfoResponse_MapImage*>(
      ::navService::GetMapInfoResponse_MapImage::internal_default_instance());
}
class GetMapInfoResponse::HasBitSetters {
 public:
  static const ::navService::GetMapInfoResponse_MapImage& map_image(const GetMapInfoResponse* msg);
};

const ::navService::GetMapInfoResponse_MapImage&
GetMapInfoResponse::HasBitSetters::map_image(const GetMapInfoResponse* msg) {
  return *msg->map_image_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetMapInfoResponse::kIdFieldNumber;
const int GetMapInfoResponse::kNameFieldNumber;
const int GetMapInfoResponse::kMapImageFieldNumber;
const int GetMapInfoResponse::kMapPointsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetMapInfoResponse::GetMapInfoResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:navService.GetMapInfoResponse)
}
GetMapInfoResponse::GetMapInfoResponse(const GetMapInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      map_points_(from.map_points_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_map_image()) {
    map_image_ = new ::navService::GetMapInfoResponse_MapImage(*from.map_image_);
  } else {
    map_image_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:navService.GetMapInfoResponse)
}

void GetMapInfoResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetMapInfoResponse_map_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  map_image_ = nullptr;
}

GetMapInfoResponse::~GetMapInfoResponse() {
  // @@protoc_insertion_point(destructor:navService.GetMapInfoResponse)
  SharedDtor();
}

void GetMapInfoResponse::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete map_image_;
}

void GetMapInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetMapInfoResponse& GetMapInfoResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetMapInfoResponse_map_2eproto.base);
  return *internal_default_instance();
}


void GetMapInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:navService.GetMapInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  map_points_.Clear();
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && map_image_ != nullptr) {
    delete map_image_;
  }
  map_image_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetMapInfoResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_id(), ptr, ctx, "navService.GetMapInfoResponse.id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "navService.GetMapInfoResponse.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .navService.GetMapInfoResponse.MapImage map_image = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_map_image(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .navService.GetMapInfoResponse.MapPoint map_points = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_map_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetMapInfoResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:navService.GetMapInfoResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "navService.GetMapInfoResponse.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "navService.GetMapInfoResponse.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .navService.GetMapInfoResponse.MapImage map_image = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_map_image()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .navService.GetMapInfoResponse.MapPoint map_points = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_map_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:navService.GetMapInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:navService.GetMapInfoResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetMapInfoResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:navService.GetMapInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "navService.GetMapInfoResponse.id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "navService.GetMapInfoResponse.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // .navService.GetMapInfoResponse.MapImage map_image = 3;
  if (this->has_map_image()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::map_image(this), output);
  }

  // repeated .navService.GetMapInfoResponse.MapPoint map_points = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->map_points_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->map_points(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:navService.GetMapInfoResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetMapInfoResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:navService.GetMapInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "navService.GetMapInfoResponse.id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "navService.GetMapInfoResponse.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // .navService.GetMapInfoResponse.MapImage map_image = 3;
  if (this->has_map_image()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::map_image(this), target);
  }

  // repeated .navService.GetMapInfoResponse.MapPoint map_points = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->map_points_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->map_points(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:navService.GetMapInfoResponse)
  return target;
}

size_t GetMapInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:navService.GetMapInfoResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .navService.GetMapInfoResponse.MapPoint map_points = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->map_points_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->map_points(static_cast<int>(i)));
    }
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .navService.GetMapInfoResponse.MapImage map_image = 3;
  if (this->has_map_image()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *map_image_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetMapInfoResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:navService.GetMapInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetMapInfoResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetMapInfoResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:navService.GetMapInfoResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:navService.GetMapInfoResponse)
    MergeFrom(*source);
  }
}

void GetMapInfoResponse::MergeFrom(const GetMapInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:navService.GetMapInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  map_points_.MergeFrom(from.map_points_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_map_image()) {
    mutable_map_image()->::navService::GetMapInfoResponse_MapImage::MergeFrom(from.map_image());
  }
}

void GetMapInfoResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:navService.GetMapInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMapInfoResponse::CopyFrom(const GetMapInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:navService.GetMapInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMapInfoResponse::IsInitialized() const {
  return true;
}

void GetMapInfoResponse::Swap(GetMapInfoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetMapInfoResponse::InternalSwap(GetMapInfoResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&map_points_)->InternalSwap(CastToBase(&other->map_points_));
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(map_image_, other->map_image_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetMapInfoResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MapPositionStreamRequest::InitAsDefaultInstance() {
}
class MapPositionStreamRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MapPositionStreamRequest::MapPositionStreamRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:navService.MapPositionStreamRequest)
}
MapPositionStreamRequest::MapPositionStreamRequest(const MapPositionStreamRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:navService.MapPositionStreamRequest)
}

void MapPositionStreamRequest::SharedCtor() {
}

MapPositionStreamRequest::~MapPositionStreamRequest() {
  // @@protoc_insertion_point(destructor:navService.MapPositionStreamRequest)
  SharedDtor();
}

void MapPositionStreamRequest::SharedDtor() {
}

void MapPositionStreamRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MapPositionStreamRequest& MapPositionStreamRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MapPositionStreamRequest_map_2eproto.base);
  return *internal_default_instance();
}


void MapPositionStreamRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:navService.MapPositionStreamRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MapPositionStreamRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MapPositionStreamRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:navService.MapPositionStreamRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:navService.MapPositionStreamRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:navService.MapPositionStreamRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MapPositionStreamRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:navService.MapPositionStreamRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:navService.MapPositionStreamRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* MapPositionStreamRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:navService.MapPositionStreamRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:navService.MapPositionStreamRequest)
  return target;
}

size_t MapPositionStreamRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:navService.MapPositionStreamRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapPositionStreamRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:navService.MapPositionStreamRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MapPositionStreamRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MapPositionStreamRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:navService.MapPositionStreamRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:navService.MapPositionStreamRequest)
    MergeFrom(*source);
  }
}

void MapPositionStreamRequest::MergeFrom(const MapPositionStreamRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:navService.MapPositionStreamRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MapPositionStreamRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:navService.MapPositionStreamRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapPositionStreamRequest::CopyFrom(const MapPositionStreamRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:navService.MapPositionStreamRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapPositionStreamRequest::IsInitialized() const {
  return true;
}

void MapPositionStreamRequest::Swap(MapPositionStreamRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MapPositionStreamRequest::InternalSwap(MapPositionStreamRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MapPositionStreamRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MapPositionStreamResponse::InitAsDefaultInstance() {
  ::navService::_MapPositionStreamResponse_default_instance_._instance.get_mutable()->position_ = const_cast< ::navService::MapPosition*>(
      ::navService::MapPosition::internal_default_instance());
}
class MapPositionStreamResponse::HasBitSetters {
 public:
  static const ::navService::MapPosition& position(const MapPositionStreamResponse* msg);
};

const ::navService::MapPosition&
MapPositionStreamResponse::HasBitSetters::position(const MapPositionStreamResponse* msg) {
  return *msg->position_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MapPositionStreamResponse::kPositionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MapPositionStreamResponse::MapPositionStreamResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:navService.MapPositionStreamResponse)
}
MapPositionStreamResponse::MapPositionStreamResponse(const MapPositionStreamResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_position()) {
    position_ = new ::navService::MapPosition(*from.position_);
  } else {
    position_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:navService.MapPositionStreamResponse)
}

void MapPositionStreamResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MapPositionStreamResponse_map_2eproto.base);
  position_ = nullptr;
}

MapPositionStreamResponse::~MapPositionStreamResponse() {
  // @@protoc_insertion_point(destructor:navService.MapPositionStreamResponse)
  SharedDtor();
}

void MapPositionStreamResponse::SharedDtor() {
  if (this != internal_default_instance()) delete position_;
}

void MapPositionStreamResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MapPositionStreamResponse& MapPositionStreamResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MapPositionStreamResponse_map_2eproto.base);
  return *internal_default_instance();
}


void MapPositionStreamResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:navService.MapPositionStreamResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MapPositionStreamResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .navService.MapPosition position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MapPositionStreamResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:navService.MapPositionStreamResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .navService.MapPosition position = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:navService.MapPositionStreamResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:navService.MapPositionStreamResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MapPositionStreamResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:navService.MapPositionStreamResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .navService.MapPosition position = 1;
  if (this->has_position()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::position(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:navService.MapPositionStreamResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* MapPositionStreamResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:navService.MapPositionStreamResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .navService.MapPosition position = 1;
  if (this->has_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::position(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:navService.MapPositionStreamResponse)
  return target;
}

size_t MapPositionStreamResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:navService.MapPositionStreamResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .navService.MapPosition position = 1;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapPositionStreamResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:navService.MapPositionStreamResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MapPositionStreamResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MapPositionStreamResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:navService.MapPositionStreamResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:navService.MapPositionStreamResponse)
    MergeFrom(*source);
  }
}

void MapPositionStreamResponse::MergeFrom(const MapPositionStreamResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:navService.MapPositionStreamResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_position()) {
    mutable_position()->::navService::MapPosition::MergeFrom(from.position());
  }
}

void MapPositionStreamResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:navService.MapPositionStreamResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapPositionStreamResponse::CopyFrom(const MapPositionStreamResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:navService.MapPositionStreamResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapPositionStreamResponse::IsInitialized() const {
  return true;
}

void MapPositionStreamResponse::Swap(MapPositionStreamResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MapPositionStreamResponse::InternalSwap(MapPositionStreamResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(position_, other->position_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MapPositionStreamResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LocationResetRequest::InitAsDefaultInstance() {
}
class LocationResetRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LocationResetRequest::LocationResetRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:navService.LocationResetRequest)
}
LocationResetRequest::LocationResetRequest(const LocationResetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:navService.LocationResetRequest)
}

void LocationResetRequest::SharedCtor() {
}

LocationResetRequest::~LocationResetRequest() {
  // @@protoc_insertion_point(destructor:navService.LocationResetRequest)
  SharedDtor();
}

void LocationResetRequest::SharedDtor() {
}

void LocationResetRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LocationResetRequest& LocationResetRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LocationResetRequest_map_2eproto.base);
  return *internal_default_instance();
}


void LocationResetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:navService.LocationResetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LocationResetRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LocationResetRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:navService.LocationResetRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:navService.LocationResetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:navService.LocationResetRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LocationResetRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:navService.LocationResetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:navService.LocationResetRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* LocationResetRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:navService.LocationResetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:navService.LocationResetRequest)
  return target;
}

size_t LocationResetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:navService.LocationResetRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LocationResetRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:navService.LocationResetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LocationResetRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LocationResetRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:navService.LocationResetRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:navService.LocationResetRequest)
    MergeFrom(*source);
  }
}

void LocationResetRequest::MergeFrom(const LocationResetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:navService.LocationResetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void LocationResetRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:navService.LocationResetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocationResetRequest::CopyFrom(const LocationResetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:navService.LocationResetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocationResetRequest::IsInitialized() const {
  return true;
}

void LocationResetRequest::Swap(LocationResetRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LocationResetRequest::InternalSwap(LocationResetRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LocationResetRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LocationResetResponse::InitAsDefaultInstance() {
}
class LocationResetResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LocationResetResponse::LocationResetResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:navService.LocationResetResponse)
}
LocationResetResponse::LocationResetResponse(const LocationResetResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:navService.LocationResetResponse)
}

void LocationResetResponse::SharedCtor() {
}

LocationResetResponse::~LocationResetResponse() {
  // @@protoc_insertion_point(destructor:navService.LocationResetResponse)
  SharedDtor();
}

void LocationResetResponse::SharedDtor() {
}

void LocationResetResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LocationResetResponse& LocationResetResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LocationResetResponse_map_2eproto.base);
  return *internal_default_instance();
}


void LocationResetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:navService.LocationResetResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LocationResetResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LocationResetResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:navService.LocationResetResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:navService.LocationResetResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:navService.LocationResetResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LocationResetResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:navService.LocationResetResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:navService.LocationResetResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* LocationResetResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:navService.LocationResetResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:navService.LocationResetResponse)
  return target;
}

size_t LocationResetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:navService.LocationResetResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LocationResetResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:navService.LocationResetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const LocationResetResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LocationResetResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:navService.LocationResetResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:navService.LocationResetResponse)
    MergeFrom(*source);
  }
}

void LocationResetResponse::MergeFrom(const LocationResetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:navService.LocationResetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void LocationResetResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:navService.LocationResetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocationResetResponse::CopyFrom(const LocationResetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:navService.LocationResetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocationResetResponse::IsInitialized() const {
  return true;
}

void LocationResetResponse::Swap(LocationResetResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LocationResetResponse::InternalSwap(LocationResetResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LocationResetResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace navService
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::navService::MapPosition* Arena::CreateMaybeMessage< ::navService::MapPosition >(Arena* arena) {
  return Arena::CreateInternal< ::navService::MapPosition >(arena);
}
template<> PROTOBUF_NOINLINE ::navService::GetMapInfoRequest* Arena::CreateMaybeMessage< ::navService::GetMapInfoRequest >(Arena* arena) {
  return Arena::CreateInternal< ::navService::GetMapInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::navService::GetMapInfoResponse_MapImage* Arena::CreateMaybeMessage< ::navService::GetMapInfoResponse_MapImage >(Arena* arena) {
  return Arena::CreateInternal< ::navService::GetMapInfoResponse_MapImage >(arena);
}
template<> PROTOBUF_NOINLINE ::navService::GetMapInfoResponse_MapPoint* Arena::CreateMaybeMessage< ::navService::GetMapInfoResponse_MapPoint >(Arena* arena) {
  return Arena::CreateInternal< ::navService::GetMapInfoResponse_MapPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::navService::GetMapInfoResponse* Arena::CreateMaybeMessage< ::navService::GetMapInfoResponse >(Arena* arena) {
  return Arena::CreateInternal< ::navService::GetMapInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::navService::MapPositionStreamRequest* Arena::CreateMaybeMessage< ::navService::MapPositionStreamRequest >(Arena* arena) {
  return Arena::CreateInternal< ::navService::MapPositionStreamRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::navService::MapPositionStreamResponse* Arena::CreateMaybeMessage< ::navService::MapPositionStreamResponse >(Arena* arena) {
  return Arena::CreateInternal< ::navService::MapPositionStreamResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::navService::LocationResetRequest* Arena::CreateMaybeMessage< ::navService::LocationResetRequest >(Arena* arena) {
  return Arena::CreateInternal< ::navService::LocationResetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::navService::LocationResetResponse* Arena::CreateMaybeMessage< ::navService::LocationResetResponse >(Arena* arena) {
  return Arena::CreateInternal< ::navService::LocationResetResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
