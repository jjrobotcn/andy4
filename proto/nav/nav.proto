syntax = "proto3";

package navService;

import "google/api/annotations.proto";

service NavController {
    // 遥控移动
    // 当机器人处于非空闲及遥控移动状态时， 当前链接将被强制关闭, 错误描述为: "[naving|charging|rotating] reject"
    // 当机器人处于 *其它用户* 的遥控移动状态时， *你* 将收到MoveStatusResponse状态码REJ_MOVING
    // 当机器人处于 *你* 的遥控移动状态时, 请在500ms内持续发送遥控指令， 超时将自动停止移动
    // 当机器人处于 *你* 的遥控移动状态时, 若5秒后无遥控指令的更新, *你* 将接收到MoveStatusResponse状态码RELEASED，
    // 此时遥控移动控制权交由抢占的 *其它用户* 或其它类型目标的操作
    rpc Move (stream MoveRequest) returns (stream MoveResponse) {
        option (google.api.http) = {
            // e.g. [Websocket] ws://10.10.10.2:81/api/v2/nav/move
            get: "/api/v2/nav/move"
        };
}

    // 导航
    // 当机器人处理遥控移动中|充电中|旋转中时, 错误描述为: "[moving|charging|rotating] reject"
    // 当机器人处理空闲或导航状态时, 将收到导航的目标NavTarget与导航或失败状态
    // 使用目标导航时支持同步异步模式, 参考NavToRequest.sync_mode的参数描述
    rpc NavTo (NavToRequest) returns (NavToResponse) {
        option (google.api.http) = {
            post: "/api/v2/nav/nav_to"
            body: "*"
        };
    }

    // 停止
    // 静止: 立即返回STOPPED
    // 旋转中: 返回旋转状态, STOPPED或CANCEL, 超时3秒
    // 其它: 错误描述为: "[moving|charging] reject"
    rpc NavStop (NavStopRequest) returns (NavStopResponse) {
        option (google.api.http) = {
            post: "/api/v2/nav/nav_stop"
            body: "*"
        };
    }

    // 自动充电
    // 当前为充电中|充电连接中: 请求类型为charge|charge_preset等待状态为CHARGE_STATUS_CHARGING|CHARGE_STATUS_CONNECTING|CHARGE_STATUS_RELEASED后返回
    // 当前为充电中|充电连接中: 请求类型为cancel等待状态为CHARGE_STATUS_RELEASED后返回
    // 当前为已释放: 请求类型为cancel将直接返回CHARGE_STATUS_RELEASED
    // 当前为已释放: 请求类型为charge|charge_preset等待状态为CHARGE_STATUS_CHARGING后返回
    // 超时错误: 发送请求后默认60秒后未收到状态更新返回错误描述, 超时时间可在AutoChargeRequest中自定义配置
    rpc AutoCharge (AutoChargeRequest) returns (AutoChargeResponse) {
        option (google.api.http) = {
            post: "/api/v2/nav/auto_charge"
            body: "*"
        };
    }

    // 原地旋转
    // 当旋转完成后返回STOPPED
    // 当用户使用NavStop中止时将返回CANCEL
    // 若超时30秒未执行完毕将返回超时错误
    rpc Rotate (RotateRequest) returns (RotateResponse) {
        option (google.api.http) = {
            post: "/api/v2/nav/rotate"
            body: "*"
        };
    }

    // 导航事件监听
    // 监听导航模块中各类事件的变动更新
    rpc OnNavEventChange (OnNavEventChangeRequest) returns (stream OnNavEventChangeResponse) {
        option (google.api.http) = {
            // e.g. [Websocket] ws://10.10.10.2:81/api/v2/nav/on_nav_event_change
            get: "/api/v2/nav/on_nav_event_change"
        };
}

    // >=2.2.0
    // 重置当前定位
    // 用于发生定位异常/错误状态，重新初始化导航定位
    // 重定位错误：定位状态超时|无地图|UWB错误
    // 重定位超时判断: 默认3s，仅在非错误状态下重置
    // *目前仅支持无线导航版本，磁导航版本中将直接返回成功状态
    rpc LocationReset(LocationResetRequest) returns (LocationResetResponse) {
        option (google.api.http) = {
            post: "/api/v2/nav/location_reset"
            body: "*"
        };
    }

    // 新建线路
    rpc NewRoute (NewRouteRequest) returns (NewRouteResponse) {
        option (google.api.http) = {
            post: "/api/v2/nav/new_route"
            body: "*"
        };
    }

    // 获取线路
    rpc ListRoutes (ListRoutesRequest) returns (ListRoutesResponse) {
        option (google.api.http) = {
            post: "/api/v2/nav/list_routes"
            body: "*"
        };
    }

    // 更新线路信息
    rpc UpdateRoute (UpdateRouteRequest) returns (UpdateRouteResponse) {
        option (google.api.http) = {
            post: "/api/v2/nav/update_route"
            body: "*"
        };
    }

    // 删除线路
    rpc DeleteRoutes (DeleteRoutesRequest) returns (DeleteRoutesResponse) {
        option (google.api.http) = {
            post: "/api/v2/nav/delete_routes"
            body: "*"
        };
    }

}

enum StatusCode {
    // 状态零值, 不使用
    UNKNOWN = 0;

    // 停止状态
    // 遥控移动状态: 已停止
    // 导航状态: 导航结束
    // 旋转状态: 旋转结束
    STOPPED = 1;

    // 移动中状态
    // 遥控移动状态: 遥控移动中
    // 导航状态: 导航移动中
    // 旋转状态: 旋转中
    MOVING = 2;

    // 准备状态
    // 导航状态: 导航准备中
    // 旋转状态: 旋转准备中
    PREPARING = 3;

    // 用户取消状态
    // 导航状态: 导航被中止
    // 旋转状态: 旋转被中止
    CANCEL = 4;

    // 遥控控制权释放状态
    // 遥控移动状态: 遥控权限超时释放,
    // 其它遥控端可接管遥控控制权,
    // 其它类型操作可接管
    RELEASED = 5;

    // 遇到障碍物
    // 遥控移动状态: 遥控移动遇到障碍物
    // 导航状态: 导航过程中遇到障碍(自动导航方式支持自动避障)
    ERR_OBSTACLE = 10;

    // 未就绪状态
    ERR_NOT_READY = 11;

    // 电机错误
    ERR_MOTOR_FAIL = 12;

    // 导航目标错误
    ERR_WRONG_TARGET = 13;

    // 操作被拒绝， 当前遥控移动中
    REJ_MOVING = 20;

    // 操作被拒绝， 当前导航中
    REJ_NAVING = 21;

    // 操作被拒绝， 当前充电中
    REJ_CHARGING = 22;

    // 操作被拒绝， 当前旋转中
    REJ_ROTATING = 23;
}

// 移动方向
enum MoveDirection {
    RELEASE = 0; // 释放方向, 空值
    FORWARD = 1;
    BACKWARD = 2;
    LEFT = 3;
    RIGHT = 4;
    LEFT_FORWARD = 5;
    RIGHT_FORWARD = 6;
    LEFT_BACKWARD = 7;
    RIGHT_BACKWARD = 8;
}

message MoveRequest {
    uint32 speed = 1; // 移动速度 0-100
    uint32 rspeed = 2; // 旋转速度 0-10 默认3* 仅前后方向时此数值无效
    MoveDirection direction = 3; // 移动方向
    string mode = 4; // 移动模式(safe*|force)
}

message MoveResponse {
    StatusCode status_code = 1;
}

// 导航目标信息
// 判断顺序为index>name
message NavTarget {
    string index = 1; // 激活线路中线路点序号
    string name = 2; // 激活线路中线路点名
}

message NavRoaming {
    RoamingType nav_roaming_type = 1;
    int32 wait_sec = 2; // 到达漫游点后等待时间， -1为无限等待可通过ROAMING_TYPE_CONTINUE继续， 0为不等待(默认)
    repeated string roaming_target_indexes = 3; // 漫游点索引， 为空时将漫游全部点
    bool order_loop = 4; // 是否循环(仅有序巡航)
}

// 导航漫游方式
enum RoamingType {
    ROAMING_TYPE_CONTINUE = 0; // 继续上次NavStop中断的漫游
    ROAMING_TYPE_ORDER = 1; // 有序漫游
    ROAMING_TYPE_RANDOM = 2; // 随机漫游
}

// 导航请求
message NavToRequest {
    oneof target_oneof {
        NavTarget target = 1; // 导航请求目标
        NavRoaming roaming = 3; // 导航漫游(需底盘类型支持)
    }
    uint32 speed = 2; // 导航移动速度(需底盘类型支持)

    // 同步模式标识
    // *false: 当导航开始时立即返回PREPARING, 漫游模式强制为异步
    // true: 目标模式下当导航STOPPED|CANCEL|ERR*时返回
    bool sync_mode = 4;
}

// 导航状态
message NavToResponse {
    StatusCode status_code = 1;
    oneof target_oneof {
        NavTarget target = 2; // 导航请求目标
        bool is_roaming = 3; // 漫游模式
    }
}

// 导航停止请求
message NavStopRequest {
}

// 导航停止状态
message NavStopResponse {
    StatusCode status_code = 1;
}

// 充电请求
message AutoChargeRequest {
    oneof charge_option_oneof {
        // 当前已在充电桩附近, 直接开始充电
        bool charge = 1;
        // 取消充电
        bool cancel = 2;
        // 至设置的第一个预设充电点充电
        bool charge_preset = 3;
    }

    // 等待充电状态为CHARGE_STATUS_CHARGING的超时配置(秒), 默认60s
    uint32 timeout_sec = 4;
}

// 充电状态码
enum ChargeStatusCode {
    // 状态零值
    CHARGE_STATUS_UNKNOWN = 0;

    // 准备中
    // 充电导航: 导航开始/CHARGE_STATUS_NAV_OBSTACLE导航恢复
    CHARGE_STATUS_PREPARING = 1;

    // 已释放
    // 充电断开结束完成与未充电时为此状态
    CHARGE_STATUS_RELEASED = 2;

    // 充电连接中
    CHARGE_STATUS_CONNECTING = 3;

    // 充电中
    CHARGE_STATUS_CHARGING = 4;

    // 充电断开中
    CHARGE_STATUS_DISCONNECTING = 5;

    // 连接失败
    CHARGE_CONNECT_FAIL = 6;

    // 充电导航过程遇到障碍
    // 2.2.7新增
    CHARGE_STATUS_NAV_OBSTACLE = 7;
}

// 充电状态反馈
message AutoChargeResponse {
    ChargeStatusCode charge_status_code = 1;
}

// 原地旋转请求
message RotateRequest {
    oneof rotate_oneof {
        // 基于当前角度的旋转角度参数 左:-180 ~ 右:180
        int32 angle = 1;

        // 回滚旋转角度
        // 回滚角度的记录为更新angle角度值时的当前角度，
        // 若在旋转过程中更新新角度或再次回滚， 下次回滚角度将记录为当前角度
        bool rollback = 2;
    }
}

message RotateResponse {
    StatusCode status_code = 1;
}

// 导航事件
enum NavEventType {
    NAV_EVENT_REVERSED = 0; // 事件零值(不使用)
    MOVE_EVENT = 1; // 移动事件
    NAV_EVENT = 2; // 导航事件
    AUTO_CHARGE_EVENT = 3; // 自动充电事件
    ROTATE_EVENT = 4; // 旋转状态事件
}


message OnNavEventChangeRequest {

}

message MoveEvent {
    StatusCode status_code = 1;
}

message NavEvent {
    StatusCode status_code = 1;
    NavTarget nav_target = 2;
}

message AutoChargeEvent {
    ChargeStatusCode charge_status_code = 1;
}

message RotateEvent {
    StatusCode status_code = 1;
}

message OnNavEventChangeResponse {
    NavEventType nav_event_type = 1;
    oneof change_oneof {
        MoveEvent move_event = 2;
        NavEvent nav_event = 3;
        RotateEvent rotate_event = 4;
        AutoChargeEvent auto_charge_event = 5;
    }
}

message LocationResetRequest {

}

message LocationResetResponse {

}

// 线路数据
message Route {
    string id = 1; // 线路id
    string name = 2; // 线路名
    bool is_active = 3; // 当前线路被激活, 导航功能需要匹配激活线路使用
    repeated RoutePoint route_points = 4; // 线路点
}

// 线路点数据
message RoutePoint {
    string name = 1; // 线路点名 创建时若为空将生成随机名
    uint32 rotate = 2; // 线路点角度
}

// 创建线路请求
// route.name为空时将创建随机名
// route.is_active仅允许唯一激活, 若创建线路指定为激活将自动设置此线路为激活
// route.route_points若为空将自动创建默认数量线路点
message NewRouteRequest {
    Route route = 1;
}

message NewRouteResponse {
    Route route = 1;
}

message ListRoutesRequest {

}

message ListRoutesResponse {
    repeated Route routes = 1;
}

message GetRouteRequest {
    string id = 1;
}

message GetRouteResponse {
    Route route = 1;
}

// 更新线路请求
// route.id根据此id获取线路
// route.name不可为空
// route.route_points不可为空
message UpdateRouteRequest {
    Route route = 1;
}

message UpdateRouteResponse {
    Route route = 1;
}

message DeleteRoutesRequest {
    repeated string routes_id = 1;
}

message DeleteRoutesResponse {

}
