syntax = "proto3";

package navService;

option go_package = "navpb";

option java_package = "com.jjrobot.andy4.navpb";
option java_outer_classname = "NavControllerPB";

import "map.proto";

// navService.NavController 导航控制器
//
// 导航控制器以充电为最高优先级，处于充电相关时，一切其它控制请求均返回Reject错误，
// 需取得控制权时，请取消充电以恢复控制。
//
// 开发管理平台功能参考: http://10.10.10.2/nav
service NavController {
    // Move 遥控移动
    //
    // 遥控移动需持续发送移动指令，通常为300ms
    rpc Move (stream MoveRequest) returns (stream MoveResponse) {}

    // NavTo 导航
    rpc NavTo (NavToRequest) returns (NavToResponse) {}

    // NavStop 中止
    //
    // 支持导航、旋转的中止
    //
    // 导航中止后，可通过NavTo中CONTINUE恢复该目标导航
    rpc NavStop (NavStopRequest) returns (NavStopResponse) {}

    // AutoCharge 自动充电
    //
    // 开发管理平台功能参考: http://10.10.10.2/power
    rpc AutoCharge (AutoChargeRequest) returns (AutoChargeResponse) {}

    // Rotate 原地旋转
    rpc Rotate (RotateRequest) returns (RotateResponse) {}

    // OnNavEventChange 导航事件监听
    //
    // 监听导航模块中各类事件的变动更新，详见OnNavEventChangeResponse
    rpc OnNavEventChange (OnNavEventChangeRequest) returns (stream OnNavEventChangeResponse) {}

    // NewRoute 新建线路
    //
    // 无线导航不支持通过此方法构建
    rpc NewRoute (NewRouteRequest) returns (NewRouteResponse) {}

    // ListRoutes 获取线路列表
    //
    // 无线导航此数据为地图数据的预设点数据，
    // 可通过navService.Map获取更明细数据
    rpc ListRoutes (ListRoutesRequest) returns (ListRoutesResponse) {}

    // UpdateRoute 更新线路信息
    //
    // 无线导航不支持通过此方法更新
    rpc UpdateRoute (UpdateRouteRequest) returns (UpdateRouteResponse) {}

    // DeleteRoutes 删除多个线路
    //
    // 无线导航不支持通过此方法删除
    rpc DeleteRoutes (DeleteRoutesRequest) returns (DeleteRoutesResponse) {}
}

enum StatusCode {
    // 状态零值, 不使用
    UNKNOWN = 0;

    // 停止状态
    // 遥控移动状态: 已停止
    // 导航状态: 导航结束
    // 旋转状态: 旋转结束
    STOPPED = 1;

    // 移动中状态
    // 遥控移动状态: 遥控移动中
    // 导航状态: 导航移动中
    // 旋转状态: 旋转中
    MOVING = 2;

    // 准备状态
    // 导航状态: 导航准备中
    // 旋转状态: 旋转准备中
    PREPARING = 3;

    // 用户取消状态
    // 导航状态: 导航被中止
    // 旋转状态: 旋转被中止
    CANCEL = 4;

    // 遥控控制权释放状态
    // 遥控移动状态: 遥控权限超时释放,
    // 其它遥控端可接管遥控控制权,
    // 其它类型操作可接管
    RELEASED = 5;

    // 遇到障碍物
    // 遥控移动状态: 遥控移动遇到障碍物
    // 导航状态: 导航过程中遇到障碍(自动导航方式支持自动避障)
    ERR_OBSTACLE = 10;

    // 未就绪状态
    ERR_NOT_READY = 11;

    // 电机错误
    ERR_MOTOR_FAIL = 12;

    // 导航目标错误
    ERR_WRONG_TARGET = 13;

    // 操作被拒绝， 当前遥控移动中
    REJ_MOVING = 20;

    // 操作被拒绝， 当前导航中
    REJ_NAVING = 21;

    // 操作被拒绝， 当前充电中
    REJ_CHARGING = 22;

    // 操作被拒绝， 当前旋转中
    REJ_ROTATING = 23;
}

// 移动方向
enum MoveDirection {
    // 释放, 空值
    RELEASE = 0;
    // 前进
    FORWARD = 1;
    // 后退
    BACKWARD = 2;
    // 左
    LEFT = 3;
    // 右
    RIGHT = 4;
    // 左前
    LEFT_FORWARD = 5;
    // 右前
    RIGHT_FORWARD = 6;
    // 左后
    LEFT_BACKWARD = 7;
    // 右后
    RIGHT_BACKWARD = 8;
}

message MoveRequest {
    // 移动速度 0-100
    uint32 speed = 1;

    // 旋转速度 0-10 默认3* 仅前后方向时此数值无效
    uint32 rspeed = 2;

    // 移动方向
    MoveDirection direction = 3;

    // 移动模式(safe|force)
    // 默认为safe
    //
    // 在移动过程中附近有障碍物时，移动指令可能无效，
    // 使用force模式可强制移动，请自行确保移动安全
    string mode = 4;
}

message MoveResponse {
    StatusCode status_code = 1;
}

// 导航目标信息
message NavTarget {
    string index = 1; // 激活线路中线路点序号
    string name = 2; // 激活线路中线路点名
}

message NavRoaming {
    // 漫游类型
    RoamingType nav_roaming_type = 1;

    // 到达漫游点后等待时间
    // 0为不等待(默认)
    // -1为无限等待可通过ROAMING_TYPE_CONTINUE继续
    int32 wait_sec = 2;

    // 漫游点索引， 为空时将漫游全部点
    // 仅在有序漫游中有效
    //
    // 索引点配置后将根据配置的路径漫游
    //    e.g. ["0", "3", "1", "2", "3", "0"]
    repeated string roaming_target_indexes = 3;

    // 是否循环漫游
    //
    // 仅在有序漫游中有效
    //
    // 此参数用于标识漫游的结束判断，
    // e.g. ["0", "1", "2"]
    // true: ["0", "1", "2", "0", "1", "2"...]
    // false: ["0", "1", "2", "0"]
    bool order_loop = 4;
}

// 导航漫游方式
enum RoamingType {
    // 继续漫游
    ROAMING_TYPE_CONTINUE = 0;

    // 有序漫游
    ROAMING_TYPE_ORDER = 1;

    // 随机漫游
    ROAMING_TYPE_RANDOM = 2;
}

// 导航请求
message NavToRequest {
    oneof target_oneof {
        // 导航请求目标
        //
        // 支持仅通过配置index或name进行请求
        NavTarget target = 1;

        // 导航漫游
        NavRoaming roaming = 3;

        // 导航地图坐标(仅支持无线导航类型)
        //
        // 详见navService.Map
        MapPosition map_position = 5;
    }

    // 导航移动速度
    //
    // 无线导航不支持动态配置
    uint32 speed = 2;

    // 同步模式标识
    //
    // 此标识用于请求结果是否等待导航的结束（成功/失败）
    // 漫游模式下此参数强制为false
    //
    // *false:
    //    不等待导航结果，需关注导航过程应通过OnNavEventChange
    //
    // true:
    //    等待导航完成结束（成功/失败）
    bool sync_mode = 4;
}

// 导航状态
message NavToResponse {
    StatusCode status_code = 1;
    oneof target_oneof {
        // 导航目标
        NavTarget target = 2;
        // 是否为漫游模式
        bool is_roaming = 3;
        // 地图位置目标
        MapPosition map_position = 4;
    }
}

// 导航停止请求
message NavStopRequest {}

// 导航停止状态
message NavStopResponse {
    StatusCode status_code = 1;
}

// 充电请求
message AutoChargeRequest {
    oneof charge_option_oneof {
        // 当前已在充电桩附近, 直接开始充电
        bool charge = 1;
        // 取消充电
        bool cancel = 2;
        // 至设置的第一个预设充电点充电
        bool charge_preset = 3;
    }

    // 等待充电状态为CHARGE_STATUS_CHARGING的超时配置(秒), 默认60s
    uint32 timeout_sec = 4;
}

// 充电状态码
enum ChargeStatusCode {
    // 状态零值
    CHARGE_STATUS_UNKNOWN = 0;

    // 准备中
    // 充电导航: 导航开始/CHARGE_STATUS_NAV_OBSTACLE导航恢复
    CHARGE_STATUS_PREPARING = 1;

    // 已释放
    // 充电断开结束完成与未充电时为此状态
    CHARGE_STATUS_RELEASED = 2;

    // 充电连接中
    CHARGE_STATUS_CONNECTING = 3;

    // 充电中
    CHARGE_STATUS_CHARGING = 4;

    // 充电断开中
    CHARGE_STATUS_DISCONNECTING = 5;

    // 连接失败
    CHARGE_CONNECT_FAIL = 6;

    // 充电导航过程遇到障碍
    CHARGE_STATUS_NAV_OBSTACLE = 7;
}

// 充电状态反馈
message AutoChargeResponse {
    ChargeStatusCode charge_status_code = 1;
}

// 原地旋转请求
message RotateRequest {
    oneof rotate_oneof {
        // 基于当前角度的旋转角度参数 左:-180 ~ 右:180
        int32 angle = 1;

        // 回滚旋转角度
        // 回滚角度的记录为更新angle角度值时的当前角度，
        // 若在旋转过程中更新新角度或再次回滚， 下次回滚角度将记录为当前角度
        bool rollback = 2;
    }
}

message RotateResponse {
    StatusCode status_code = 1;
}

// 导航事件
enum NavEventType {
    // 事件零值(不使用)
    NAV_EVENT_REVERSED = 0;
    // 移动事件
    MOVE_EVENT = 1;
    // 导航事件
    NAV_EVENT = 2;
    // 自动充电事件
    AUTO_CHARGE_EVENT = 3;
    // 旋转状态事件
    ROTATE_EVENT = 4;
}

message OnNavEventChangeRequest {}

// 移动事件
message MoveEvent {
    StatusCode status_code = 1;
}

// 导航事件
message NavEvent {
    StatusCode status_code = 1;
    NavTarget nav_target = 2;
}

// 自动充电事件
message AutoChargeEvent {
    ChargeStatusCode charge_status_code = 1;
}

// 旋转事件
message RotateEvent {
    StatusCode status_code = 1;
}

message OnNavEventChangeResponse {
    NavEventType nav_event_type = 1;
    oneof change_oneof {
        MoveEvent move_event = 2;
        NavEvent nav_event = 3;
        RotateEvent rotate_event = 4;
        AutoChargeEvent auto_charge_event = 5;
    }
}

// 线路数据
message Route {
    string id = 1; // 线路id
    string name = 2; // 线路名
    bool is_active = 3; // 当前线路被激活, 导航功能需要匹配激活线路使用
    repeated RoutePoint route_points = 4; // 线路点
}

// 线路点数据
message RoutePoint {
    string name = 1; // 线路点名 创建时若为空将生成随机名
    uint32 rotate = 2; // 线路点角度
}

// 创建线路请求
// route.name为空时将创建随机名
// route.is_active仅允许唯一激活, 若创建线路指定为激活将自动设置此线路为激活
// route.route_points若为空将自动创建默认数量线路点
message NewRouteRequest {
    Route route = 1;
}

message NewRouteResponse {
    Route route = 1;
}

message ListRoutesRequest {}

message ListRoutesResponse {
    repeated Route routes = 1;
}

message GetRouteRequest {
    string id = 1;
}

message GetRouteResponse {
    Route route = 1;
}

// 更新线路请求
// route.id根据此id获取线路
// route.name不可为空
// route.route_points不可为空
message UpdateRouteRequest {
    Route route = 1;
}

message UpdateRouteResponse {
    Route route = 1;
}

message DeleteRoutesRequest {
    repeated string routes_id = 1;
}

message DeleteRoutesResponse {}
