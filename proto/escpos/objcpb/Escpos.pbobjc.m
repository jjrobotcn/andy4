// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: escpos.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "Escpos.pbobjc.h"
#import "google/api/Annotations.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - EscposRoot

@implementation EscposRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    registry = [[GPBExtensionRegistry alloc] init];
    // Merge in the imports (direct or indirect) that defined extensions.
    [registry addExtensions:[GAPIAnnotationsRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - EscposRoot_FileDescriptor

static GPBFileDescriptor *EscposRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"escposService"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum ElementType

GPBEnumDescriptor *ElementType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Text\000Image\000";
    static const int32_t values[] = {
        ElementType_Text,
        ElementType_Image,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(ElementType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:ElementType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL ElementType_IsValidValue(int32_t value__) {
  switch (value__) {
    case ElementType_Text:
    case ElementType_Image:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum ElementSize

GPBEnumDescriptor *ElementSize_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Default\000Small\000Normal\000Large\000Huge\000";
    static const int32_t values[] = {
        ElementSize_Default,
        ElementSize_Small,
        ElementSize_Normal,
        ElementSize_Large,
        ElementSize_Huge,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(ElementSize)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:ElementSize_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL ElementSize_IsValidValue(int32_t value__) {
  switch (value__) {
    case ElementSize_Default:
    case ElementSize_Small:
    case ElementSize_Normal:
    case ElementSize_Large:
    case ElementSize_Huge:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum ElementAlign

GPBEnumDescriptor *ElementAlign_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Left\000Center\000Right\000";
    static const int32_t values[] = {
        ElementAlign_Left,
        ElementAlign_Center,
        ElementAlign_Right,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(ElementAlign)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:ElementAlign_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL ElementAlign_IsValidValue(int32_t value__) {
  switch (value__) {
    case ElementAlign_Left:
    case ElementAlign_Center:
    case ElementAlign_Right:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - PrintRawRequest

@implementation PrintRawRequest

@dynamic raw;

typedef struct PrintRawRequest__storage_ {
  uint32_t _has_storage_[1];
  NSData *raw;
} PrintRawRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "raw",
        .dataTypeSpecific.className = NULL,
        .number = PrintRawRequest_FieldNumber_Raw,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PrintRawRequest__storage_, raw),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PrintRawRequest class]
                                     rootClass:[EscposRoot class]
                                          file:EscposRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PrintRawRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PrintRawResponse

@implementation PrintRawResponse


typedef struct PrintRawResponse__storage_ {
  uint32_t _has_storage_[1];
} PrintRawResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PrintRawResponse class]
                                     rootClass:[EscposRoot class]
                                          file:EscposRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PrintRawResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Element

@implementation Element

@dynamic etype;
@dynamic contentText;
@dynamic contentImage;
@dynamic imageContentType;
@dynamic size;

typedef struct Element__storage_ {
  uint32_t _has_storage_[1];
  ElementType etype;
  ElementSize size;
  NSString *contentText;
  NSData *contentImage;
  NSString *imageContentType;
} Element__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "etype",
        .dataTypeSpecific.enumDescFunc = ElementType_EnumDescriptor,
        .number = Element_FieldNumber_Etype,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Element__storage_, etype),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "contentText",
        .dataTypeSpecific.className = NULL,
        .number = Element_FieldNumber_ContentText,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Element__storage_, contentText),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "contentImage",
        .dataTypeSpecific.className = NULL,
        .number = Element_FieldNumber_ContentImage,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Element__storage_, contentImage),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "size",
        .dataTypeSpecific.enumDescFunc = ElementSize_EnumDescriptor,
        .number = Element_FieldNumber_Size,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Element__storage_, size),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "imageContentType",
        .dataTypeSpecific.className = NULL,
        .number = Element_FieldNumber_ImageContentType,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Element__storage_, imageContentType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Element class]
                                     rootClass:[EscposRoot class]
                                          file:EscposRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Element__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t Element_Etype_RawValue(Element *message) {
  GPBDescriptor *descriptor = [Element descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Element_FieldNumber_Etype];
  return GPBGetMessageInt32Field(message, field);
}

void SetElement_Etype_RawValue(Element *message, int32_t value) {
  GPBDescriptor *descriptor = [Element descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Element_FieldNumber_Etype];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t Element_Size_RawValue(Element *message) {
  GPBDescriptor *descriptor = [Element descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Element_FieldNumber_Size];
  return GPBGetMessageInt32Field(message, field);
}

void SetElement_Size_RawValue(Element *message, int32_t value) {
  GPBDescriptor *descriptor = [Element descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Element_FieldNumber_Size];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - ElementRow

@implementation ElementRow

@dynamic elementsArray, elementsArray_Count;
@dynamic align;

typedef struct ElementRow__storage_ {
  uint32_t _has_storage_[1];
  ElementAlign align;
  NSMutableArray *elementsArray;
} ElementRow__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "elementsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Element),
        .number = ElementRow_FieldNumber_ElementsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ElementRow__storage_, elementsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "align",
        .dataTypeSpecific.enumDescFunc = ElementAlign_EnumDescriptor,
        .number = ElementRow_FieldNumber_Align,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ElementRow__storage_, align),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ElementRow class]
                                     rootClass:[EscposRoot class]
                                          file:EscposRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ElementRow__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t ElementRow_Align_RawValue(ElementRow *message) {
  GPBDescriptor *descriptor = [ElementRow descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ElementRow_FieldNumber_Align];
  return GPBGetMessageInt32Field(message, field);
}

void SetElementRow_Align_RawValue(ElementRow *message, int32_t value) {
  GPBDescriptor *descriptor = [ElementRow descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ElementRow_FieldNumber_Align];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PrintElementsRequest

@implementation PrintElementsRequest

@dynamic elementRowsArray, elementRowsArray_Count;
@dynamic cut;

typedef struct PrintElementsRequest__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *elementRowsArray;
} PrintElementsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "elementRowsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ElementRow),
        .number = PrintElementsRequest_FieldNumber_ElementRowsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PrintElementsRequest__storage_, elementRowsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "cut",
        .dataTypeSpecific.className = NULL,
        .number = PrintElementsRequest_FieldNumber_Cut,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PrintElementsRequest class]
                                     rootClass:[EscposRoot class]
                                          file:EscposRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PrintElementsRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PrintElementsResponse

@implementation PrintElementsResponse


typedef struct PrintElementsResponse__storage_ {
  uint32_t _has_storage_[1];
} PrintElementsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PrintElementsResponse class]
                                     rootClass:[EscposRoot class]
                                          file:EscposRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PrintElementsResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PrintHtmlTemplateRequest

@implementation PrintHtmlTemplateRequest

@dynamic id_p;
@dynamic name;
@dynamic params, params_Count;
@dynamic cut;

typedef struct PrintHtmlTemplateRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
  NSString *name;
  NSMutableDictionary *params;
} PrintHtmlTemplateRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PrintHtmlTemplateRequest_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PrintHtmlTemplateRequest__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = PrintHtmlTemplateRequest_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PrintHtmlTemplateRequest__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "params",
        .dataTypeSpecific.className = NULL,
        .number = PrintHtmlTemplateRequest_FieldNumber_Params,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PrintHtmlTemplateRequest__storage_, params),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cut",
        .dataTypeSpecific.className = NULL,
        .number = PrintHtmlTemplateRequest_FieldNumber_Cut,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PrintHtmlTemplateRequest class]
                                     rootClass:[EscposRoot class]
                                          file:EscposRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PrintHtmlTemplateRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PrintHtmlTemplateResponse

@implementation PrintHtmlTemplateResponse


typedef struct PrintHtmlTemplateResponse__storage_ {
  uint32_t _has_storage_[1];
} PrintHtmlTemplateResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PrintHtmlTemplateResponse class]
                                     rootClass:[EscposRoot class]
                                          file:EscposRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PrintHtmlTemplateResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - HtmlTemplate

@implementation HtmlTemplate

@dynamic id_p;
@dynamic name;
@dynamic content;

typedef struct HtmlTemplate__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
  NSString *name;
  NSString *content;
} HtmlTemplate__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = HtmlTemplate_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(HtmlTemplate__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = HtmlTemplate_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(HtmlTemplate__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "content",
        .dataTypeSpecific.className = NULL,
        .number = HtmlTemplate_FieldNumber_Content,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(HtmlTemplate__storage_, content),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[HtmlTemplate class]
                                     rootClass:[EscposRoot class]
                                          file:EscposRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(HtmlTemplate__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - NewHtmlTemplateRequest

@implementation NewHtmlTemplateRequest

@dynamic hasHtmlTemplate, htmlTemplate;

typedef struct NewHtmlTemplateRequest__storage_ {
  uint32_t _has_storage_[1];
  HtmlTemplate *htmlTemplate;
} NewHtmlTemplateRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "htmlTemplate",
        .dataTypeSpecific.className = GPBStringifySymbol(HtmlTemplate),
        .number = NewHtmlTemplateRequest_FieldNumber_HtmlTemplate,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(NewHtmlTemplateRequest__storage_, htmlTemplate),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[NewHtmlTemplateRequest class]
                                     rootClass:[EscposRoot class]
                                          file:EscposRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(NewHtmlTemplateRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - NewHtmlTemplateResponse

@implementation NewHtmlTemplateResponse

@dynamic hasHtmlTemplate, htmlTemplate;

typedef struct NewHtmlTemplateResponse__storage_ {
  uint32_t _has_storage_[1];
  HtmlTemplate *htmlTemplate;
} NewHtmlTemplateResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "htmlTemplate",
        .dataTypeSpecific.className = GPBStringifySymbol(HtmlTemplate),
        .number = NewHtmlTemplateResponse_FieldNumber_HtmlTemplate,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(NewHtmlTemplateResponse__storage_, htmlTemplate),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[NewHtmlTemplateResponse class]
                                     rootClass:[EscposRoot class]
                                          file:EscposRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(NewHtmlTemplateResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ListHtmlTemplatesRequest

@implementation ListHtmlTemplatesRequest


typedef struct ListHtmlTemplatesRequest__storage_ {
  uint32_t _has_storage_[1];
} ListHtmlTemplatesRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ListHtmlTemplatesRequest class]
                                     rootClass:[EscposRoot class]
                                          file:EscposRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(ListHtmlTemplatesRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ListHtmlTemplatesResponse

@implementation ListHtmlTemplatesResponse

@dynamic htmlTemplatesArray, htmlTemplatesArray_Count;

typedef struct ListHtmlTemplatesResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *htmlTemplatesArray;
} ListHtmlTemplatesResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "htmlTemplatesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(HtmlTemplate),
        .number = ListHtmlTemplatesResponse_FieldNumber_HtmlTemplatesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ListHtmlTemplatesResponse__storage_, htmlTemplatesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ListHtmlTemplatesResponse class]
                                     rootClass:[EscposRoot class]
                                          file:EscposRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ListHtmlTemplatesResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetHtmlTemplateRequest

@implementation GetHtmlTemplateRequest

@dynamic id_p;

typedef struct GetHtmlTemplateRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
} GetHtmlTemplateRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = GetHtmlTemplateRequest_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetHtmlTemplateRequest__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetHtmlTemplateRequest class]
                                     rootClass:[EscposRoot class]
                                          file:EscposRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetHtmlTemplateRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetHtmlTemplateResponse

@implementation GetHtmlTemplateResponse

@dynamic hasHtmlTemplate, htmlTemplate;

typedef struct GetHtmlTemplateResponse__storage_ {
  uint32_t _has_storage_[1];
  HtmlTemplate *htmlTemplate;
} GetHtmlTemplateResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "htmlTemplate",
        .dataTypeSpecific.className = GPBStringifySymbol(HtmlTemplate),
        .number = GetHtmlTemplateResponse_FieldNumber_HtmlTemplate,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetHtmlTemplateResponse__storage_, htmlTemplate),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetHtmlTemplateResponse class]
                                     rootClass:[EscposRoot class]
                                          file:EscposRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetHtmlTemplateResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UpdateHtmlTemplateRequest

@implementation UpdateHtmlTemplateRequest

@dynamic hasHtmlTemplate, htmlTemplate;

typedef struct UpdateHtmlTemplateRequest__storage_ {
  uint32_t _has_storage_[1];
  HtmlTemplate *htmlTemplate;
} UpdateHtmlTemplateRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "htmlTemplate",
        .dataTypeSpecific.className = GPBStringifySymbol(HtmlTemplate),
        .number = UpdateHtmlTemplateRequest_FieldNumber_HtmlTemplate,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UpdateHtmlTemplateRequest__storage_, htmlTemplate),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UpdateHtmlTemplateRequest class]
                                     rootClass:[EscposRoot class]
                                          file:EscposRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UpdateHtmlTemplateRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UpdateHtmlTemplateResponse

@implementation UpdateHtmlTemplateResponse

@dynamic hasHtmlTemplate, htmlTemplate;

typedef struct UpdateHtmlTemplateResponse__storage_ {
  uint32_t _has_storage_[1];
  HtmlTemplate *htmlTemplate;
} UpdateHtmlTemplateResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "htmlTemplate",
        .dataTypeSpecific.className = GPBStringifySymbol(HtmlTemplate),
        .number = UpdateHtmlTemplateResponse_FieldNumber_HtmlTemplate,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UpdateHtmlTemplateResponse__storage_, htmlTemplate),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UpdateHtmlTemplateResponse class]
                                     rootClass:[EscposRoot class]
                                          file:EscposRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UpdateHtmlTemplateResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DeleteHtmlTemplatesRequest

@implementation DeleteHtmlTemplatesRequest

@dynamic htmlTemplatesIdArray, htmlTemplatesIdArray_Count;

typedef struct DeleteHtmlTemplatesRequest__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *htmlTemplatesIdArray;
} DeleteHtmlTemplatesRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "htmlTemplatesIdArray",
        .dataTypeSpecific.className = NULL,
        .number = DeleteHtmlTemplatesRequest_FieldNumber_HtmlTemplatesIdArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(DeleteHtmlTemplatesRequest__storage_, htmlTemplatesIdArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DeleteHtmlTemplatesRequest class]
                                     rootClass:[EscposRoot class]
                                          file:EscposRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DeleteHtmlTemplatesRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DeleteHtmlTemplatesResponse

@implementation DeleteHtmlTemplatesResponse


typedef struct DeleteHtmlTemplatesResponse__storage_ {
  uint32_t _has_storage_[1];
} DeleteHtmlTemplatesResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DeleteHtmlTemplatesResponse class]
                                     rootClass:[EscposRoot class]
                                          file:EscposRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(DeleteHtmlTemplatesResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
