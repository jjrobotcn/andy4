// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: escpos.proto

#include "escpos.pb.h"
#include "escpos.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace escposService {

static const char* EscPosService_method_names[] = {
  "/escposService.EscPosService/PrintRaw",
  "/escposService.EscPosService/PrintElements",
  "/escposService.EscPosService/PrintHtmlTemplate",
  "/escposService.EscPosService/NewHtmlTemplate",
  "/escposService.EscPosService/ListHtmlTemplates",
  "/escposService.EscPosService/GetHtmlTemplate",
  "/escposService.EscPosService/UpdateHtmlTemplate",
  "/escposService.EscPosService/DeleteHtmlTemplates",
};

std::unique_ptr< EscPosService::Stub> EscPosService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< EscPosService::Stub> stub(new EscPosService::Stub(channel));
  return stub;
}

EscPosService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_PrintRaw_(EscPosService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PrintElements_(EscPosService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PrintHtmlTemplate_(EscPosService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_NewHtmlTemplate_(EscPosService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListHtmlTemplates_(EscPosService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetHtmlTemplate_(EscPosService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateHtmlTemplate_(EscPosService_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteHtmlTemplates_(EscPosService_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status EscPosService::Stub::PrintRaw(::grpc::ClientContext* context, const ::escposService::PrintRawRequest& request, ::escposService::PrintRawResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PrintRaw_, context, request, response);
}

void EscPosService::Stub::experimental_async::PrintRaw(::grpc::ClientContext* context, const ::escposService::PrintRawRequest* request, ::escposService::PrintRawResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PrintRaw_, context, request, response, std::move(f));
}

void EscPosService::Stub::experimental_async::PrintRaw(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::escposService::PrintRawResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PrintRaw_, context, request, response, std::move(f));
}

void EscPosService::Stub::experimental_async::PrintRaw(::grpc::ClientContext* context, const ::escposService::PrintRawRequest* request, ::escposService::PrintRawResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PrintRaw_, context, request, response, reactor);
}

void EscPosService::Stub::experimental_async::PrintRaw(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::escposService::PrintRawResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PrintRaw_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::escposService::PrintRawResponse>* EscPosService::Stub::AsyncPrintRawRaw(::grpc::ClientContext* context, const ::escposService::PrintRawRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::escposService::PrintRawResponse>::Create(channel_.get(), cq, rpcmethod_PrintRaw_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::escposService::PrintRawResponse>* EscPosService::Stub::PrepareAsyncPrintRawRaw(::grpc::ClientContext* context, const ::escposService::PrintRawRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::escposService::PrintRawResponse>::Create(channel_.get(), cq, rpcmethod_PrintRaw_, context, request, false);
}

::grpc::Status EscPosService::Stub::PrintElements(::grpc::ClientContext* context, const ::escposService::PrintElementsRequest& request, ::escposService::PrintElementsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PrintElements_, context, request, response);
}

void EscPosService::Stub::experimental_async::PrintElements(::grpc::ClientContext* context, const ::escposService::PrintElementsRequest* request, ::escposService::PrintElementsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PrintElements_, context, request, response, std::move(f));
}

void EscPosService::Stub::experimental_async::PrintElements(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::escposService::PrintElementsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PrintElements_, context, request, response, std::move(f));
}

void EscPosService::Stub::experimental_async::PrintElements(::grpc::ClientContext* context, const ::escposService::PrintElementsRequest* request, ::escposService::PrintElementsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PrintElements_, context, request, response, reactor);
}

void EscPosService::Stub::experimental_async::PrintElements(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::escposService::PrintElementsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PrintElements_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::escposService::PrintElementsResponse>* EscPosService::Stub::AsyncPrintElementsRaw(::grpc::ClientContext* context, const ::escposService::PrintElementsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::escposService::PrintElementsResponse>::Create(channel_.get(), cq, rpcmethod_PrintElements_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::escposService::PrintElementsResponse>* EscPosService::Stub::PrepareAsyncPrintElementsRaw(::grpc::ClientContext* context, const ::escposService::PrintElementsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::escposService::PrintElementsResponse>::Create(channel_.get(), cq, rpcmethod_PrintElements_, context, request, false);
}

::grpc::Status EscPosService::Stub::PrintHtmlTemplate(::grpc::ClientContext* context, const ::escposService::PrintHtmlTemplateRequest& request, ::escposService::PrintHtmlTemplateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PrintHtmlTemplate_, context, request, response);
}

void EscPosService::Stub::experimental_async::PrintHtmlTemplate(::grpc::ClientContext* context, const ::escposService::PrintHtmlTemplateRequest* request, ::escposService::PrintHtmlTemplateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PrintHtmlTemplate_, context, request, response, std::move(f));
}

void EscPosService::Stub::experimental_async::PrintHtmlTemplate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::escposService::PrintHtmlTemplateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PrintHtmlTemplate_, context, request, response, std::move(f));
}

void EscPosService::Stub::experimental_async::PrintHtmlTemplate(::grpc::ClientContext* context, const ::escposService::PrintHtmlTemplateRequest* request, ::escposService::PrintHtmlTemplateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PrintHtmlTemplate_, context, request, response, reactor);
}

void EscPosService::Stub::experimental_async::PrintHtmlTemplate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::escposService::PrintHtmlTemplateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PrintHtmlTemplate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::escposService::PrintHtmlTemplateResponse>* EscPosService::Stub::AsyncPrintHtmlTemplateRaw(::grpc::ClientContext* context, const ::escposService::PrintHtmlTemplateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::escposService::PrintHtmlTemplateResponse>::Create(channel_.get(), cq, rpcmethod_PrintHtmlTemplate_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::escposService::PrintHtmlTemplateResponse>* EscPosService::Stub::PrepareAsyncPrintHtmlTemplateRaw(::grpc::ClientContext* context, const ::escposService::PrintHtmlTemplateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::escposService::PrintHtmlTemplateResponse>::Create(channel_.get(), cq, rpcmethod_PrintHtmlTemplate_, context, request, false);
}

::grpc::Status EscPosService::Stub::NewHtmlTemplate(::grpc::ClientContext* context, const ::escposService::NewHtmlTemplateRequest& request, ::escposService::NewHtmlTemplateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_NewHtmlTemplate_, context, request, response);
}

void EscPosService::Stub::experimental_async::NewHtmlTemplate(::grpc::ClientContext* context, const ::escposService::NewHtmlTemplateRequest* request, ::escposService::NewHtmlTemplateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_NewHtmlTemplate_, context, request, response, std::move(f));
}

void EscPosService::Stub::experimental_async::NewHtmlTemplate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::escposService::NewHtmlTemplateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_NewHtmlTemplate_, context, request, response, std::move(f));
}

void EscPosService::Stub::experimental_async::NewHtmlTemplate(::grpc::ClientContext* context, const ::escposService::NewHtmlTemplateRequest* request, ::escposService::NewHtmlTemplateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_NewHtmlTemplate_, context, request, response, reactor);
}

void EscPosService::Stub::experimental_async::NewHtmlTemplate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::escposService::NewHtmlTemplateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_NewHtmlTemplate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::escposService::NewHtmlTemplateResponse>* EscPosService::Stub::AsyncNewHtmlTemplateRaw(::grpc::ClientContext* context, const ::escposService::NewHtmlTemplateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::escposService::NewHtmlTemplateResponse>::Create(channel_.get(), cq, rpcmethod_NewHtmlTemplate_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::escposService::NewHtmlTemplateResponse>* EscPosService::Stub::PrepareAsyncNewHtmlTemplateRaw(::grpc::ClientContext* context, const ::escposService::NewHtmlTemplateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::escposService::NewHtmlTemplateResponse>::Create(channel_.get(), cq, rpcmethod_NewHtmlTemplate_, context, request, false);
}

::grpc::Status EscPosService::Stub::ListHtmlTemplates(::grpc::ClientContext* context, const ::escposService::ListHtmlTemplatesRequest& request, ::escposService::ListHtmlTemplatesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListHtmlTemplates_, context, request, response);
}

void EscPosService::Stub::experimental_async::ListHtmlTemplates(::grpc::ClientContext* context, const ::escposService::ListHtmlTemplatesRequest* request, ::escposService::ListHtmlTemplatesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListHtmlTemplates_, context, request, response, std::move(f));
}

void EscPosService::Stub::experimental_async::ListHtmlTemplates(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::escposService::ListHtmlTemplatesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListHtmlTemplates_, context, request, response, std::move(f));
}

void EscPosService::Stub::experimental_async::ListHtmlTemplates(::grpc::ClientContext* context, const ::escposService::ListHtmlTemplatesRequest* request, ::escposService::ListHtmlTemplatesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListHtmlTemplates_, context, request, response, reactor);
}

void EscPosService::Stub::experimental_async::ListHtmlTemplates(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::escposService::ListHtmlTemplatesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListHtmlTemplates_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::escposService::ListHtmlTemplatesResponse>* EscPosService::Stub::AsyncListHtmlTemplatesRaw(::grpc::ClientContext* context, const ::escposService::ListHtmlTemplatesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::escposService::ListHtmlTemplatesResponse>::Create(channel_.get(), cq, rpcmethod_ListHtmlTemplates_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::escposService::ListHtmlTemplatesResponse>* EscPosService::Stub::PrepareAsyncListHtmlTemplatesRaw(::grpc::ClientContext* context, const ::escposService::ListHtmlTemplatesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::escposService::ListHtmlTemplatesResponse>::Create(channel_.get(), cq, rpcmethod_ListHtmlTemplates_, context, request, false);
}

::grpc::Status EscPosService::Stub::GetHtmlTemplate(::grpc::ClientContext* context, const ::escposService::GetHtmlTemplateRequest& request, ::escposService::GetHtmlTemplateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetHtmlTemplate_, context, request, response);
}

void EscPosService::Stub::experimental_async::GetHtmlTemplate(::grpc::ClientContext* context, const ::escposService::GetHtmlTemplateRequest* request, ::escposService::GetHtmlTemplateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetHtmlTemplate_, context, request, response, std::move(f));
}

void EscPosService::Stub::experimental_async::GetHtmlTemplate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::escposService::GetHtmlTemplateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetHtmlTemplate_, context, request, response, std::move(f));
}

void EscPosService::Stub::experimental_async::GetHtmlTemplate(::grpc::ClientContext* context, const ::escposService::GetHtmlTemplateRequest* request, ::escposService::GetHtmlTemplateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetHtmlTemplate_, context, request, response, reactor);
}

void EscPosService::Stub::experimental_async::GetHtmlTemplate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::escposService::GetHtmlTemplateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetHtmlTemplate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::escposService::GetHtmlTemplateResponse>* EscPosService::Stub::AsyncGetHtmlTemplateRaw(::grpc::ClientContext* context, const ::escposService::GetHtmlTemplateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::escposService::GetHtmlTemplateResponse>::Create(channel_.get(), cq, rpcmethod_GetHtmlTemplate_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::escposService::GetHtmlTemplateResponse>* EscPosService::Stub::PrepareAsyncGetHtmlTemplateRaw(::grpc::ClientContext* context, const ::escposService::GetHtmlTemplateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::escposService::GetHtmlTemplateResponse>::Create(channel_.get(), cq, rpcmethod_GetHtmlTemplate_, context, request, false);
}

::grpc::Status EscPosService::Stub::UpdateHtmlTemplate(::grpc::ClientContext* context, const ::escposService::UpdateHtmlTemplateRequest& request, ::escposService::UpdateHtmlTemplateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateHtmlTemplate_, context, request, response);
}

void EscPosService::Stub::experimental_async::UpdateHtmlTemplate(::grpc::ClientContext* context, const ::escposService::UpdateHtmlTemplateRequest* request, ::escposService::UpdateHtmlTemplateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateHtmlTemplate_, context, request, response, std::move(f));
}

void EscPosService::Stub::experimental_async::UpdateHtmlTemplate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::escposService::UpdateHtmlTemplateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateHtmlTemplate_, context, request, response, std::move(f));
}

void EscPosService::Stub::experimental_async::UpdateHtmlTemplate(::grpc::ClientContext* context, const ::escposService::UpdateHtmlTemplateRequest* request, ::escposService::UpdateHtmlTemplateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UpdateHtmlTemplate_, context, request, response, reactor);
}

void EscPosService::Stub::experimental_async::UpdateHtmlTemplate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::escposService::UpdateHtmlTemplateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UpdateHtmlTemplate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::escposService::UpdateHtmlTemplateResponse>* EscPosService::Stub::AsyncUpdateHtmlTemplateRaw(::grpc::ClientContext* context, const ::escposService::UpdateHtmlTemplateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::escposService::UpdateHtmlTemplateResponse>::Create(channel_.get(), cq, rpcmethod_UpdateHtmlTemplate_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::escposService::UpdateHtmlTemplateResponse>* EscPosService::Stub::PrepareAsyncUpdateHtmlTemplateRaw(::grpc::ClientContext* context, const ::escposService::UpdateHtmlTemplateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::escposService::UpdateHtmlTemplateResponse>::Create(channel_.get(), cq, rpcmethod_UpdateHtmlTemplate_, context, request, false);
}

::grpc::Status EscPosService::Stub::DeleteHtmlTemplates(::grpc::ClientContext* context, const ::escposService::DeleteHtmlTemplatesRequest& request, ::escposService::DeleteHtmlTemplatesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteHtmlTemplates_, context, request, response);
}

void EscPosService::Stub::experimental_async::DeleteHtmlTemplates(::grpc::ClientContext* context, const ::escposService::DeleteHtmlTemplatesRequest* request, ::escposService::DeleteHtmlTemplatesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteHtmlTemplates_, context, request, response, std::move(f));
}

void EscPosService::Stub::experimental_async::DeleteHtmlTemplates(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::escposService::DeleteHtmlTemplatesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteHtmlTemplates_, context, request, response, std::move(f));
}

void EscPosService::Stub::experimental_async::DeleteHtmlTemplates(::grpc::ClientContext* context, const ::escposService::DeleteHtmlTemplatesRequest* request, ::escposService::DeleteHtmlTemplatesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteHtmlTemplates_, context, request, response, reactor);
}

void EscPosService::Stub::experimental_async::DeleteHtmlTemplates(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::escposService::DeleteHtmlTemplatesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteHtmlTemplates_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::escposService::DeleteHtmlTemplatesResponse>* EscPosService::Stub::AsyncDeleteHtmlTemplatesRaw(::grpc::ClientContext* context, const ::escposService::DeleteHtmlTemplatesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::escposService::DeleteHtmlTemplatesResponse>::Create(channel_.get(), cq, rpcmethod_DeleteHtmlTemplates_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::escposService::DeleteHtmlTemplatesResponse>* EscPosService::Stub::PrepareAsyncDeleteHtmlTemplatesRaw(::grpc::ClientContext* context, const ::escposService::DeleteHtmlTemplatesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::escposService::DeleteHtmlTemplatesResponse>::Create(channel_.get(), cq, rpcmethod_DeleteHtmlTemplates_, context, request, false);
}

EscPosService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EscPosService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EscPosService::Service, ::escposService::PrintRawRequest, ::escposService::PrintRawResponse>(
          std::mem_fn(&EscPosService::Service::PrintRaw), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EscPosService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EscPosService::Service, ::escposService::PrintElementsRequest, ::escposService::PrintElementsResponse>(
          std::mem_fn(&EscPosService::Service::PrintElements), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EscPosService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EscPosService::Service, ::escposService::PrintHtmlTemplateRequest, ::escposService::PrintHtmlTemplateResponse>(
          std::mem_fn(&EscPosService::Service::PrintHtmlTemplate), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EscPosService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EscPosService::Service, ::escposService::NewHtmlTemplateRequest, ::escposService::NewHtmlTemplateResponse>(
          std::mem_fn(&EscPosService::Service::NewHtmlTemplate), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EscPosService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EscPosService::Service, ::escposService::ListHtmlTemplatesRequest, ::escposService::ListHtmlTemplatesResponse>(
          std::mem_fn(&EscPosService::Service::ListHtmlTemplates), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EscPosService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EscPosService::Service, ::escposService::GetHtmlTemplateRequest, ::escposService::GetHtmlTemplateResponse>(
          std::mem_fn(&EscPosService::Service::GetHtmlTemplate), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EscPosService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EscPosService::Service, ::escposService::UpdateHtmlTemplateRequest, ::escposService::UpdateHtmlTemplateResponse>(
          std::mem_fn(&EscPosService::Service::UpdateHtmlTemplate), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EscPosService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EscPosService::Service, ::escposService::DeleteHtmlTemplatesRequest, ::escposService::DeleteHtmlTemplatesResponse>(
          std::mem_fn(&EscPosService::Service::DeleteHtmlTemplates), this)));
}

EscPosService::Service::~Service() {
}

::grpc::Status EscPosService::Service::PrintRaw(::grpc::ServerContext* context, const ::escposService::PrintRawRequest* request, ::escposService::PrintRawResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EscPosService::Service::PrintElements(::grpc::ServerContext* context, const ::escposService::PrintElementsRequest* request, ::escposService::PrintElementsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EscPosService::Service::PrintHtmlTemplate(::grpc::ServerContext* context, const ::escposService::PrintHtmlTemplateRequest* request, ::escposService::PrintHtmlTemplateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EscPosService::Service::NewHtmlTemplate(::grpc::ServerContext* context, const ::escposService::NewHtmlTemplateRequest* request, ::escposService::NewHtmlTemplateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EscPosService::Service::ListHtmlTemplates(::grpc::ServerContext* context, const ::escposService::ListHtmlTemplatesRequest* request, ::escposService::ListHtmlTemplatesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EscPosService::Service::GetHtmlTemplate(::grpc::ServerContext* context, const ::escposService::GetHtmlTemplateRequest* request, ::escposService::GetHtmlTemplateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EscPosService::Service::UpdateHtmlTemplate(::grpc::ServerContext* context, const ::escposService::UpdateHtmlTemplateRequest* request, ::escposService::UpdateHtmlTemplateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EscPosService::Service::DeleteHtmlTemplates(::grpc::ServerContext* context, const ::escposService::DeleteHtmlTemplatesRequest* request, ::escposService::DeleteHtmlTemplatesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace escposService

