// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: escpos.proto

#ifndef PROTOBUF_INCLUDED_escpos_2eproto
#define PROTOBUF_INCLUDED_escpos_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_escpos_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_escpos_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[20]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_escpos_2eproto();
namespace escposService {
class DeleteHtmlTemplatesRequest;
class DeleteHtmlTemplatesRequestDefaultTypeInternal;
extern DeleteHtmlTemplatesRequestDefaultTypeInternal _DeleteHtmlTemplatesRequest_default_instance_;
class DeleteHtmlTemplatesResponse;
class DeleteHtmlTemplatesResponseDefaultTypeInternal;
extern DeleteHtmlTemplatesResponseDefaultTypeInternal _DeleteHtmlTemplatesResponse_default_instance_;
class Element;
class ElementDefaultTypeInternal;
extern ElementDefaultTypeInternal _Element_default_instance_;
class ElementRow;
class ElementRowDefaultTypeInternal;
extern ElementRowDefaultTypeInternal _ElementRow_default_instance_;
class GetHtmlTemplateRequest;
class GetHtmlTemplateRequestDefaultTypeInternal;
extern GetHtmlTemplateRequestDefaultTypeInternal _GetHtmlTemplateRequest_default_instance_;
class GetHtmlTemplateResponse;
class GetHtmlTemplateResponseDefaultTypeInternal;
extern GetHtmlTemplateResponseDefaultTypeInternal _GetHtmlTemplateResponse_default_instance_;
class HtmlTemplate;
class HtmlTemplateDefaultTypeInternal;
extern HtmlTemplateDefaultTypeInternal _HtmlTemplate_default_instance_;
class ListHtmlTemplatesRequest;
class ListHtmlTemplatesRequestDefaultTypeInternal;
extern ListHtmlTemplatesRequestDefaultTypeInternal _ListHtmlTemplatesRequest_default_instance_;
class ListHtmlTemplatesResponse;
class ListHtmlTemplatesResponseDefaultTypeInternal;
extern ListHtmlTemplatesResponseDefaultTypeInternal _ListHtmlTemplatesResponse_default_instance_;
class NewHtmlTemplateRequest;
class NewHtmlTemplateRequestDefaultTypeInternal;
extern NewHtmlTemplateRequestDefaultTypeInternal _NewHtmlTemplateRequest_default_instance_;
class NewHtmlTemplateResponse;
class NewHtmlTemplateResponseDefaultTypeInternal;
extern NewHtmlTemplateResponseDefaultTypeInternal _NewHtmlTemplateResponse_default_instance_;
class PrintElementsRequest;
class PrintElementsRequestDefaultTypeInternal;
extern PrintElementsRequestDefaultTypeInternal _PrintElementsRequest_default_instance_;
class PrintElementsResponse;
class PrintElementsResponseDefaultTypeInternal;
extern PrintElementsResponseDefaultTypeInternal _PrintElementsResponse_default_instance_;
class PrintHtmlTemplateRequest;
class PrintHtmlTemplateRequestDefaultTypeInternal;
extern PrintHtmlTemplateRequestDefaultTypeInternal _PrintHtmlTemplateRequest_default_instance_;
class PrintHtmlTemplateRequest_ParamsEntry_DoNotUse;
class PrintHtmlTemplateRequest_ParamsEntry_DoNotUseDefaultTypeInternal;
extern PrintHtmlTemplateRequest_ParamsEntry_DoNotUseDefaultTypeInternal _PrintHtmlTemplateRequest_ParamsEntry_DoNotUse_default_instance_;
class PrintHtmlTemplateResponse;
class PrintHtmlTemplateResponseDefaultTypeInternal;
extern PrintHtmlTemplateResponseDefaultTypeInternal _PrintHtmlTemplateResponse_default_instance_;
class PrintRawRequest;
class PrintRawRequestDefaultTypeInternal;
extern PrintRawRequestDefaultTypeInternal _PrintRawRequest_default_instance_;
class PrintRawResponse;
class PrintRawResponseDefaultTypeInternal;
extern PrintRawResponseDefaultTypeInternal _PrintRawResponse_default_instance_;
class UpdateHtmlTemplateRequest;
class UpdateHtmlTemplateRequestDefaultTypeInternal;
extern UpdateHtmlTemplateRequestDefaultTypeInternal _UpdateHtmlTemplateRequest_default_instance_;
class UpdateHtmlTemplateResponse;
class UpdateHtmlTemplateResponseDefaultTypeInternal;
extern UpdateHtmlTemplateResponseDefaultTypeInternal _UpdateHtmlTemplateResponse_default_instance_;
}  // namespace escposService
namespace google {
namespace protobuf {
template<> ::escposService::DeleteHtmlTemplatesRequest* Arena::CreateMaybeMessage<::escposService::DeleteHtmlTemplatesRequest>(Arena*);
template<> ::escposService::DeleteHtmlTemplatesResponse* Arena::CreateMaybeMessage<::escposService::DeleteHtmlTemplatesResponse>(Arena*);
template<> ::escposService::Element* Arena::CreateMaybeMessage<::escposService::Element>(Arena*);
template<> ::escposService::ElementRow* Arena::CreateMaybeMessage<::escposService::ElementRow>(Arena*);
template<> ::escposService::GetHtmlTemplateRequest* Arena::CreateMaybeMessage<::escposService::GetHtmlTemplateRequest>(Arena*);
template<> ::escposService::GetHtmlTemplateResponse* Arena::CreateMaybeMessage<::escposService::GetHtmlTemplateResponse>(Arena*);
template<> ::escposService::HtmlTemplate* Arena::CreateMaybeMessage<::escposService::HtmlTemplate>(Arena*);
template<> ::escposService::ListHtmlTemplatesRequest* Arena::CreateMaybeMessage<::escposService::ListHtmlTemplatesRequest>(Arena*);
template<> ::escposService::ListHtmlTemplatesResponse* Arena::CreateMaybeMessage<::escposService::ListHtmlTemplatesResponse>(Arena*);
template<> ::escposService::NewHtmlTemplateRequest* Arena::CreateMaybeMessage<::escposService::NewHtmlTemplateRequest>(Arena*);
template<> ::escposService::NewHtmlTemplateResponse* Arena::CreateMaybeMessage<::escposService::NewHtmlTemplateResponse>(Arena*);
template<> ::escposService::PrintElementsRequest* Arena::CreateMaybeMessage<::escposService::PrintElementsRequest>(Arena*);
template<> ::escposService::PrintElementsResponse* Arena::CreateMaybeMessage<::escposService::PrintElementsResponse>(Arena*);
template<> ::escposService::PrintHtmlTemplateRequest* Arena::CreateMaybeMessage<::escposService::PrintHtmlTemplateRequest>(Arena*);
template<> ::escposService::PrintHtmlTemplateRequest_ParamsEntry_DoNotUse* Arena::CreateMaybeMessage<::escposService::PrintHtmlTemplateRequest_ParamsEntry_DoNotUse>(Arena*);
template<> ::escposService::PrintHtmlTemplateResponse* Arena::CreateMaybeMessage<::escposService::PrintHtmlTemplateResponse>(Arena*);
template<> ::escposService::PrintRawRequest* Arena::CreateMaybeMessage<::escposService::PrintRawRequest>(Arena*);
template<> ::escposService::PrintRawResponse* Arena::CreateMaybeMessage<::escposService::PrintRawResponse>(Arena*);
template<> ::escposService::UpdateHtmlTemplateRequest* Arena::CreateMaybeMessage<::escposService::UpdateHtmlTemplateRequest>(Arena*);
template<> ::escposService::UpdateHtmlTemplateResponse* Arena::CreateMaybeMessage<::escposService::UpdateHtmlTemplateResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace escposService {

enum ElementType {
  TEXT = 0,
  IMAGE = 1,
  ElementType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  ElementType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool ElementType_IsValid(int value);
const ElementType ElementType_MIN = TEXT;
const ElementType ElementType_MAX = IMAGE;
const int ElementType_ARRAYSIZE = ElementType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ElementType_descriptor();
inline const ::std::string& ElementType_Name(ElementType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ElementType_descriptor(), value);
}
inline bool ElementType_Parse(
    const ::std::string& name, ElementType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ElementType>(
    ElementType_descriptor(), name, value);
}
enum ElementSize {
  DEFAULT = 0,
  SMALL = 1,
  NORMAL = 2,
  LARGE = 3,
  HUGE = 4,
  ElementSize_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  ElementSize_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool ElementSize_IsValid(int value);
const ElementSize ElementSize_MIN = DEFAULT;
const ElementSize ElementSize_MAX = HUGE;
const int ElementSize_ARRAYSIZE = ElementSize_MAX + 1;

const ::google::protobuf::EnumDescriptor* ElementSize_descriptor();
inline const ::std::string& ElementSize_Name(ElementSize value) {
  return ::google::protobuf::internal::NameOfEnum(
    ElementSize_descriptor(), value);
}
inline bool ElementSize_Parse(
    const ::std::string& name, ElementSize* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ElementSize>(
    ElementSize_descriptor(), name, value);
}
enum ElementAlign {
  LEFT = 0,
  CENTER = 1,
  RIGHT = 2,
  ElementAlign_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  ElementAlign_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool ElementAlign_IsValid(int value);
const ElementAlign ElementAlign_MIN = LEFT;
const ElementAlign ElementAlign_MAX = RIGHT;
const int ElementAlign_ARRAYSIZE = ElementAlign_MAX + 1;

const ::google::protobuf::EnumDescriptor* ElementAlign_descriptor();
inline const ::std::string& ElementAlign_Name(ElementAlign value) {
  return ::google::protobuf::internal::NameOfEnum(
    ElementAlign_descriptor(), value);
}
inline bool ElementAlign_Parse(
    const ::std::string& name, ElementAlign* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ElementAlign>(
    ElementAlign_descriptor(), name, value);
}
// ===================================================================

class PrintRawRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:escposService.PrintRawRequest) */ {
 public:
  PrintRawRequest();
  virtual ~PrintRawRequest();

  PrintRawRequest(const PrintRawRequest& from);

  inline PrintRawRequest& operator=(const PrintRawRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PrintRawRequest(PrintRawRequest&& from) noexcept
    : PrintRawRequest() {
    *this = ::std::move(from);
  }

  inline PrintRawRequest& operator=(PrintRawRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const PrintRawRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrintRawRequest* internal_default_instance() {
    return reinterpret_cast<const PrintRawRequest*>(
               &_PrintRawRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(PrintRawRequest* other);
  friend void swap(PrintRawRequest& a, PrintRawRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PrintRawRequest* New() const final {
    return CreateMaybeMessage<PrintRawRequest>(nullptr);
  }

  PrintRawRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PrintRawRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PrintRawRequest& from);
  void MergeFrom(const PrintRawRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrintRawRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes raw = 1;
  void clear_raw();
  static const int kRawFieldNumber = 1;
  const ::std::string& raw() const;
  void set_raw(const ::std::string& value);
  #if LANG_CXX11
  void set_raw(::std::string&& value);
  #endif
  void set_raw(const char* value);
  void set_raw(const void* value, size_t size);
  ::std::string* mutable_raw();
  ::std::string* release_raw();
  void set_allocated_raw(::std::string* raw);

  // @@protoc_insertion_point(class_scope:escposService.PrintRawRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr raw_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_escpos_2eproto;
};
// -------------------------------------------------------------------

class PrintRawResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:escposService.PrintRawResponse) */ {
 public:
  PrintRawResponse();
  virtual ~PrintRawResponse();

  PrintRawResponse(const PrintRawResponse& from);

  inline PrintRawResponse& operator=(const PrintRawResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PrintRawResponse(PrintRawResponse&& from) noexcept
    : PrintRawResponse() {
    *this = ::std::move(from);
  }

  inline PrintRawResponse& operator=(PrintRawResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const PrintRawResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrintRawResponse* internal_default_instance() {
    return reinterpret_cast<const PrintRawResponse*>(
               &_PrintRawResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(PrintRawResponse* other);
  friend void swap(PrintRawResponse& a, PrintRawResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PrintRawResponse* New() const final {
    return CreateMaybeMessage<PrintRawResponse>(nullptr);
  }

  PrintRawResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PrintRawResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PrintRawResponse& from);
  void MergeFrom(const PrintRawResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrintRawResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:escposService.PrintRawResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_escpos_2eproto;
};
// -------------------------------------------------------------------

class Element final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:escposService.Element) */ {
 public:
  Element();
  virtual ~Element();

  Element(const Element& from);

  inline Element& operator=(const Element& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Element(Element&& from) noexcept
    : Element() {
    *this = ::std::move(from);
  }

  inline Element& operator=(Element&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Element& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Element* internal_default_instance() {
    return reinterpret_cast<const Element*>(
               &_Element_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Element* other);
  friend void swap(Element& a, Element& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Element* New() const final {
    return CreateMaybeMessage<Element>(nullptr);
  }

  Element* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Element>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Element& from);
  void MergeFrom(const Element& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Element* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string content_text = 2;
  void clear_content_text();
  static const int kContentTextFieldNumber = 2;
  const ::std::string& content_text() const;
  void set_content_text(const ::std::string& value);
  #if LANG_CXX11
  void set_content_text(::std::string&& value);
  #endif
  void set_content_text(const char* value);
  void set_content_text(const char* value, size_t size);
  ::std::string* mutable_content_text();
  ::std::string* release_content_text();
  void set_allocated_content_text(::std::string* content_text);

  // bytes content_image = 3;
  void clear_content_image();
  static const int kContentImageFieldNumber = 3;
  const ::std::string& content_image() const;
  void set_content_image(const ::std::string& value);
  #if LANG_CXX11
  void set_content_image(::std::string&& value);
  #endif
  void set_content_image(const char* value);
  void set_content_image(const void* value, size_t size);
  ::std::string* mutable_content_image();
  ::std::string* release_content_image();
  void set_allocated_content_image(::std::string* content_image);

  // string image_content_type = 5;
  void clear_image_content_type();
  static const int kImageContentTypeFieldNumber = 5;
  const ::std::string& image_content_type() const;
  void set_image_content_type(const ::std::string& value);
  #if LANG_CXX11
  void set_image_content_type(::std::string&& value);
  #endif
  void set_image_content_type(const char* value);
  void set_image_content_type(const char* value, size_t size);
  ::std::string* mutable_image_content_type();
  ::std::string* release_image_content_type();
  void set_allocated_image_content_type(::std::string* image_content_type);

  // .escposService.ElementType etype = 1;
  void clear_etype();
  static const int kEtypeFieldNumber = 1;
  ::escposService::ElementType etype() const;
  void set_etype(::escposService::ElementType value);

  // .escposService.ElementSize size = 4;
  void clear_size();
  static const int kSizeFieldNumber = 4;
  ::escposService::ElementSize size() const;
  void set_size(::escposService::ElementSize value);

  // @@protoc_insertion_point(class_scope:escposService.Element)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr content_text_;
  ::google::protobuf::internal::ArenaStringPtr content_image_;
  ::google::protobuf::internal::ArenaStringPtr image_content_type_;
  int etype_;
  int size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_escpos_2eproto;
};
// -------------------------------------------------------------------

class ElementRow final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:escposService.ElementRow) */ {
 public:
  ElementRow();
  virtual ~ElementRow();

  ElementRow(const ElementRow& from);

  inline ElementRow& operator=(const ElementRow& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ElementRow(ElementRow&& from) noexcept
    : ElementRow() {
    *this = ::std::move(from);
  }

  inline ElementRow& operator=(ElementRow&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ElementRow& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ElementRow* internal_default_instance() {
    return reinterpret_cast<const ElementRow*>(
               &_ElementRow_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ElementRow* other);
  friend void swap(ElementRow& a, ElementRow& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ElementRow* New() const final {
    return CreateMaybeMessage<ElementRow>(nullptr);
  }

  ElementRow* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ElementRow>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ElementRow& from);
  void MergeFrom(const ElementRow& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ElementRow* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .escposService.Element elements = 1;
  int elements_size() const;
  void clear_elements();
  static const int kElementsFieldNumber = 1;
  ::escposService::Element* mutable_elements(int index);
  ::google::protobuf::RepeatedPtrField< ::escposService::Element >*
      mutable_elements();
  const ::escposService::Element& elements(int index) const;
  ::escposService::Element* add_elements();
  const ::google::protobuf::RepeatedPtrField< ::escposService::Element >&
      elements() const;

  // .escposService.ElementAlign align = 2;
  void clear_align();
  static const int kAlignFieldNumber = 2;
  ::escposService::ElementAlign align() const;
  void set_align(::escposService::ElementAlign value);

  // @@protoc_insertion_point(class_scope:escposService.ElementRow)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::escposService::Element > elements_;
  int align_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_escpos_2eproto;
};
// -------------------------------------------------------------------

class PrintElementsRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:escposService.PrintElementsRequest) */ {
 public:
  PrintElementsRequest();
  virtual ~PrintElementsRequest();

  PrintElementsRequest(const PrintElementsRequest& from);

  inline PrintElementsRequest& operator=(const PrintElementsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PrintElementsRequest(PrintElementsRequest&& from) noexcept
    : PrintElementsRequest() {
    *this = ::std::move(from);
  }

  inline PrintElementsRequest& operator=(PrintElementsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const PrintElementsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrintElementsRequest* internal_default_instance() {
    return reinterpret_cast<const PrintElementsRequest*>(
               &_PrintElementsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(PrintElementsRequest* other);
  friend void swap(PrintElementsRequest& a, PrintElementsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PrintElementsRequest* New() const final {
    return CreateMaybeMessage<PrintElementsRequest>(nullptr);
  }

  PrintElementsRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PrintElementsRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PrintElementsRequest& from);
  void MergeFrom(const PrintElementsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrintElementsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .escposService.ElementRow element_rows = 1;
  int element_rows_size() const;
  void clear_element_rows();
  static const int kElementRowsFieldNumber = 1;
  ::escposService::ElementRow* mutable_element_rows(int index);
  ::google::protobuf::RepeatedPtrField< ::escposService::ElementRow >*
      mutable_element_rows();
  const ::escposService::ElementRow& element_rows(int index) const;
  ::escposService::ElementRow* add_element_rows();
  const ::google::protobuf::RepeatedPtrField< ::escposService::ElementRow >&
      element_rows() const;

  // bool cut = 2;
  void clear_cut();
  static const int kCutFieldNumber = 2;
  bool cut() const;
  void set_cut(bool value);

  // @@protoc_insertion_point(class_scope:escposService.PrintElementsRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::escposService::ElementRow > element_rows_;
  bool cut_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_escpos_2eproto;
};
// -------------------------------------------------------------------

class PrintElementsResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:escposService.PrintElementsResponse) */ {
 public:
  PrintElementsResponse();
  virtual ~PrintElementsResponse();

  PrintElementsResponse(const PrintElementsResponse& from);

  inline PrintElementsResponse& operator=(const PrintElementsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PrintElementsResponse(PrintElementsResponse&& from) noexcept
    : PrintElementsResponse() {
    *this = ::std::move(from);
  }

  inline PrintElementsResponse& operator=(PrintElementsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const PrintElementsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrintElementsResponse* internal_default_instance() {
    return reinterpret_cast<const PrintElementsResponse*>(
               &_PrintElementsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(PrintElementsResponse* other);
  friend void swap(PrintElementsResponse& a, PrintElementsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PrintElementsResponse* New() const final {
    return CreateMaybeMessage<PrintElementsResponse>(nullptr);
  }

  PrintElementsResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PrintElementsResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PrintElementsResponse& from);
  void MergeFrom(const PrintElementsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrintElementsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:escposService.PrintElementsResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_escpos_2eproto;
};
// -------------------------------------------------------------------

class PrintHtmlTemplateRequest_ParamsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<PrintHtmlTemplateRequest_ParamsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
static bool _ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  typedef ::google::protobuf::internal::MapEntry<PrintHtmlTemplateRequest_ParamsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  PrintHtmlTemplateRequest_ParamsEntry_DoNotUse();
  PrintHtmlTemplateRequest_ParamsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const PrintHtmlTemplateRequest_ParamsEntry_DoNotUse& other);
  static const PrintHtmlTemplateRequest_ParamsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const PrintHtmlTemplateRequest_ParamsEntry_DoNotUse*>(&_PrintHtmlTemplateRequest_ParamsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class PrintHtmlTemplateRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:escposService.PrintHtmlTemplateRequest) */ {
 public:
  PrintHtmlTemplateRequest();
  virtual ~PrintHtmlTemplateRequest();

  PrintHtmlTemplateRequest(const PrintHtmlTemplateRequest& from);

  inline PrintHtmlTemplateRequest& operator=(const PrintHtmlTemplateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PrintHtmlTemplateRequest(PrintHtmlTemplateRequest&& from) noexcept
    : PrintHtmlTemplateRequest() {
    *this = ::std::move(from);
  }

  inline PrintHtmlTemplateRequest& operator=(PrintHtmlTemplateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const PrintHtmlTemplateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrintHtmlTemplateRequest* internal_default_instance() {
    return reinterpret_cast<const PrintHtmlTemplateRequest*>(
               &_PrintHtmlTemplateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(PrintHtmlTemplateRequest* other);
  friend void swap(PrintHtmlTemplateRequest& a, PrintHtmlTemplateRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PrintHtmlTemplateRequest* New() const final {
    return CreateMaybeMessage<PrintHtmlTemplateRequest>(nullptr);
  }

  PrintHtmlTemplateRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PrintHtmlTemplateRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PrintHtmlTemplateRequest& from);
  void MergeFrom(const PrintHtmlTemplateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrintHtmlTemplateRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> params = 3;
  int params_size() const;
  void clear_params();
  static const int kParamsFieldNumber = 3;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      params() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_params();

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // bool cut = 4;
  void clear_cut();
  static const int kCutFieldNumber = 4;
  bool cut() const;
  void set_cut(bool value);

  // @@protoc_insertion_point(class_scope:escposService.PrintHtmlTemplateRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      PrintHtmlTemplateRequest_ParamsEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > params_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  bool cut_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_escpos_2eproto;
};
// -------------------------------------------------------------------

class PrintHtmlTemplateResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:escposService.PrintHtmlTemplateResponse) */ {
 public:
  PrintHtmlTemplateResponse();
  virtual ~PrintHtmlTemplateResponse();

  PrintHtmlTemplateResponse(const PrintHtmlTemplateResponse& from);

  inline PrintHtmlTemplateResponse& operator=(const PrintHtmlTemplateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PrintHtmlTemplateResponse(PrintHtmlTemplateResponse&& from) noexcept
    : PrintHtmlTemplateResponse() {
    *this = ::std::move(from);
  }

  inline PrintHtmlTemplateResponse& operator=(PrintHtmlTemplateResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const PrintHtmlTemplateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrintHtmlTemplateResponse* internal_default_instance() {
    return reinterpret_cast<const PrintHtmlTemplateResponse*>(
               &_PrintHtmlTemplateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(PrintHtmlTemplateResponse* other);
  friend void swap(PrintHtmlTemplateResponse& a, PrintHtmlTemplateResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PrintHtmlTemplateResponse* New() const final {
    return CreateMaybeMessage<PrintHtmlTemplateResponse>(nullptr);
  }

  PrintHtmlTemplateResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PrintHtmlTemplateResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PrintHtmlTemplateResponse& from);
  void MergeFrom(const PrintHtmlTemplateResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrintHtmlTemplateResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:escposService.PrintHtmlTemplateResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_escpos_2eproto;
};
// -------------------------------------------------------------------

class HtmlTemplate final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:escposService.HtmlTemplate) */ {
 public:
  HtmlTemplate();
  virtual ~HtmlTemplate();

  HtmlTemplate(const HtmlTemplate& from);

  inline HtmlTemplate& operator=(const HtmlTemplate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HtmlTemplate(HtmlTemplate&& from) noexcept
    : HtmlTemplate() {
    *this = ::std::move(from);
  }

  inline HtmlTemplate& operator=(HtmlTemplate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const HtmlTemplate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HtmlTemplate* internal_default_instance() {
    return reinterpret_cast<const HtmlTemplate*>(
               &_HtmlTemplate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(HtmlTemplate* other);
  friend void swap(HtmlTemplate& a, HtmlTemplate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HtmlTemplate* New() const final {
    return CreateMaybeMessage<HtmlTemplate>(nullptr);
  }

  HtmlTemplate* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<HtmlTemplate>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const HtmlTemplate& from);
  void MergeFrom(const HtmlTemplate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HtmlTemplate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string content = 3;
  void clear_content();
  static const int kContentFieldNumber = 3;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:escposService.HtmlTemplate)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_escpos_2eproto;
};
// -------------------------------------------------------------------

class NewHtmlTemplateRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:escposService.NewHtmlTemplateRequest) */ {
 public:
  NewHtmlTemplateRequest();
  virtual ~NewHtmlTemplateRequest();

  NewHtmlTemplateRequest(const NewHtmlTemplateRequest& from);

  inline NewHtmlTemplateRequest& operator=(const NewHtmlTemplateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NewHtmlTemplateRequest(NewHtmlTemplateRequest&& from) noexcept
    : NewHtmlTemplateRequest() {
    *this = ::std::move(from);
  }

  inline NewHtmlTemplateRequest& operator=(NewHtmlTemplateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const NewHtmlTemplateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NewHtmlTemplateRequest* internal_default_instance() {
    return reinterpret_cast<const NewHtmlTemplateRequest*>(
               &_NewHtmlTemplateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(NewHtmlTemplateRequest* other);
  friend void swap(NewHtmlTemplateRequest& a, NewHtmlTemplateRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NewHtmlTemplateRequest* New() const final {
    return CreateMaybeMessage<NewHtmlTemplateRequest>(nullptr);
  }

  NewHtmlTemplateRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NewHtmlTemplateRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NewHtmlTemplateRequest& from);
  void MergeFrom(const NewHtmlTemplateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NewHtmlTemplateRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .escposService.HtmlTemplate html_template = 1;
  bool has_html_template() const;
  void clear_html_template();
  static const int kHtmlTemplateFieldNumber = 1;
  const ::escposService::HtmlTemplate& html_template() const;
  ::escposService::HtmlTemplate* release_html_template();
  ::escposService::HtmlTemplate* mutable_html_template();
  void set_allocated_html_template(::escposService::HtmlTemplate* html_template);

  // @@protoc_insertion_point(class_scope:escposService.NewHtmlTemplateRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::escposService::HtmlTemplate* html_template_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_escpos_2eproto;
};
// -------------------------------------------------------------------

class NewHtmlTemplateResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:escposService.NewHtmlTemplateResponse) */ {
 public:
  NewHtmlTemplateResponse();
  virtual ~NewHtmlTemplateResponse();

  NewHtmlTemplateResponse(const NewHtmlTemplateResponse& from);

  inline NewHtmlTemplateResponse& operator=(const NewHtmlTemplateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NewHtmlTemplateResponse(NewHtmlTemplateResponse&& from) noexcept
    : NewHtmlTemplateResponse() {
    *this = ::std::move(from);
  }

  inline NewHtmlTemplateResponse& operator=(NewHtmlTemplateResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const NewHtmlTemplateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NewHtmlTemplateResponse* internal_default_instance() {
    return reinterpret_cast<const NewHtmlTemplateResponse*>(
               &_NewHtmlTemplateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(NewHtmlTemplateResponse* other);
  friend void swap(NewHtmlTemplateResponse& a, NewHtmlTemplateResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NewHtmlTemplateResponse* New() const final {
    return CreateMaybeMessage<NewHtmlTemplateResponse>(nullptr);
  }

  NewHtmlTemplateResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NewHtmlTemplateResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NewHtmlTemplateResponse& from);
  void MergeFrom(const NewHtmlTemplateResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NewHtmlTemplateResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .escposService.HtmlTemplate html_template = 1;
  bool has_html_template() const;
  void clear_html_template();
  static const int kHtmlTemplateFieldNumber = 1;
  const ::escposService::HtmlTemplate& html_template() const;
  ::escposService::HtmlTemplate* release_html_template();
  ::escposService::HtmlTemplate* mutable_html_template();
  void set_allocated_html_template(::escposService::HtmlTemplate* html_template);

  // @@protoc_insertion_point(class_scope:escposService.NewHtmlTemplateResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::escposService::HtmlTemplate* html_template_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_escpos_2eproto;
};
// -------------------------------------------------------------------

class ListHtmlTemplatesRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:escposService.ListHtmlTemplatesRequest) */ {
 public:
  ListHtmlTemplatesRequest();
  virtual ~ListHtmlTemplatesRequest();

  ListHtmlTemplatesRequest(const ListHtmlTemplatesRequest& from);

  inline ListHtmlTemplatesRequest& operator=(const ListHtmlTemplatesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListHtmlTemplatesRequest(ListHtmlTemplatesRequest&& from) noexcept
    : ListHtmlTemplatesRequest() {
    *this = ::std::move(from);
  }

  inline ListHtmlTemplatesRequest& operator=(ListHtmlTemplatesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ListHtmlTemplatesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListHtmlTemplatesRequest* internal_default_instance() {
    return reinterpret_cast<const ListHtmlTemplatesRequest*>(
               &_ListHtmlTemplatesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(ListHtmlTemplatesRequest* other);
  friend void swap(ListHtmlTemplatesRequest& a, ListHtmlTemplatesRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListHtmlTemplatesRequest* New() const final {
    return CreateMaybeMessage<ListHtmlTemplatesRequest>(nullptr);
  }

  ListHtmlTemplatesRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListHtmlTemplatesRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListHtmlTemplatesRequest& from);
  void MergeFrom(const ListHtmlTemplatesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListHtmlTemplatesRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:escposService.ListHtmlTemplatesRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_escpos_2eproto;
};
// -------------------------------------------------------------------

class ListHtmlTemplatesResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:escposService.ListHtmlTemplatesResponse) */ {
 public:
  ListHtmlTemplatesResponse();
  virtual ~ListHtmlTemplatesResponse();

  ListHtmlTemplatesResponse(const ListHtmlTemplatesResponse& from);

  inline ListHtmlTemplatesResponse& operator=(const ListHtmlTemplatesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListHtmlTemplatesResponse(ListHtmlTemplatesResponse&& from) noexcept
    : ListHtmlTemplatesResponse() {
    *this = ::std::move(from);
  }

  inline ListHtmlTemplatesResponse& operator=(ListHtmlTemplatesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ListHtmlTemplatesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListHtmlTemplatesResponse* internal_default_instance() {
    return reinterpret_cast<const ListHtmlTemplatesResponse*>(
               &_ListHtmlTemplatesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(ListHtmlTemplatesResponse* other);
  friend void swap(ListHtmlTemplatesResponse& a, ListHtmlTemplatesResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListHtmlTemplatesResponse* New() const final {
    return CreateMaybeMessage<ListHtmlTemplatesResponse>(nullptr);
  }

  ListHtmlTemplatesResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListHtmlTemplatesResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListHtmlTemplatesResponse& from);
  void MergeFrom(const ListHtmlTemplatesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListHtmlTemplatesResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .escposService.HtmlTemplate html_templates = 1;
  int html_templates_size() const;
  void clear_html_templates();
  static const int kHtmlTemplatesFieldNumber = 1;
  ::escposService::HtmlTemplate* mutable_html_templates(int index);
  ::google::protobuf::RepeatedPtrField< ::escposService::HtmlTemplate >*
      mutable_html_templates();
  const ::escposService::HtmlTemplate& html_templates(int index) const;
  ::escposService::HtmlTemplate* add_html_templates();
  const ::google::protobuf::RepeatedPtrField< ::escposService::HtmlTemplate >&
      html_templates() const;

  // @@protoc_insertion_point(class_scope:escposService.ListHtmlTemplatesResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::escposService::HtmlTemplate > html_templates_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_escpos_2eproto;
};
// -------------------------------------------------------------------

class GetHtmlTemplateRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:escposService.GetHtmlTemplateRequest) */ {
 public:
  GetHtmlTemplateRequest();
  virtual ~GetHtmlTemplateRequest();

  GetHtmlTemplateRequest(const GetHtmlTemplateRequest& from);

  inline GetHtmlTemplateRequest& operator=(const GetHtmlTemplateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetHtmlTemplateRequest(GetHtmlTemplateRequest&& from) noexcept
    : GetHtmlTemplateRequest() {
    *this = ::std::move(from);
  }

  inline GetHtmlTemplateRequest& operator=(GetHtmlTemplateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GetHtmlTemplateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetHtmlTemplateRequest* internal_default_instance() {
    return reinterpret_cast<const GetHtmlTemplateRequest*>(
               &_GetHtmlTemplateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(GetHtmlTemplateRequest* other);
  friend void swap(GetHtmlTemplateRequest& a, GetHtmlTemplateRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetHtmlTemplateRequest* New() const final {
    return CreateMaybeMessage<GetHtmlTemplateRequest>(nullptr);
  }

  GetHtmlTemplateRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetHtmlTemplateRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetHtmlTemplateRequest& from);
  void MergeFrom(const GetHtmlTemplateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetHtmlTemplateRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // @@protoc_insertion_point(class_scope:escposService.GetHtmlTemplateRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_escpos_2eproto;
};
// -------------------------------------------------------------------

class GetHtmlTemplateResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:escposService.GetHtmlTemplateResponse) */ {
 public:
  GetHtmlTemplateResponse();
  virtual ~GetHtmlTemplateResponse();

  GetHtmlTemplateResponse(const GetHtmlTemplateResponse& from);

  inline GetHtmlTemplateResponse& operator=(const GetHtmlTemplateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetHtmlTemplateResponse(GetHtmlTemplateResponse&& from) noexcept
    : GetHtmlTemplateResponse() {
    *this = ::std::move(from);
  }

  inline GetHtmlTemplateResponse& operator=(GetHtmlTemplateResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GetHtmlTemplateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetHtmlTemplateResponse* internal_default_instance() {
    return reinterpret_cast<const GetHtmlTemplateResponse*>(
               &_GetHtmlTemplateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(GetHtmlTemplateResponse* other);
  friend void swap(GetHtmlTemplateResponse& a, GetHtmlTemplateResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetHtmlTemplateResponse* New() const final {
    return CreateMaybeMessage<GetHtmlTemplateResponse>(nullptr);
  }

  GetHtmlTemplateResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetHtmlTemplateResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetHtmlTemplateResponse& from);
  void MergeFrom(const GetHtmlTemplateResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetHtmlTemplateResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .escposService.HtmlTemplate html_template = 1;
  bool has_html_template() const;
  void clear_html_template();
  static const int kHtmlTemplateFieldNumber = 1;
  const ::escposService::HtmlTemplate& html_template() const;
  ::escposService::HtmlTemplate* release_html_template();
  ::escposService::HtmlTemplate* mutable_html_template();
  void set_allocated_html_template(::escposService::HtmlTemplate* html_template);

  // @@protoc_insertion_point(class_scope:escposService.GetHtmlTemplateResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::escposService::HtmlTemplate* html_template_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_escpos_2eproto;
};
// -------------------------------------------------------------------

class UpdateHtmlTemplateRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:escposService.UpdateHtmlTemplateRequest) */ {
 public:
  UpdateHtmlTemplateRequest();
  virtual ~UpdateHtmlTemplateRequest();

  UpdateHtmlTemplateRequest(const UpdateHtmlTemplateRequest& from);

  inline UpdateHtmlTemplateRequest& operator=(const UpdateHtmlTemplateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateHtmlTemplateRequest(UpdateHtmlTemplateRequest&& from) noexcept
    : UpdateHtmlTemplateRequest() {
    *this = ::std::move(from);
  }

  inline UpdateHtmlTemplateRequest& operator=(UpdateHtmlTemplateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const UpdateHtmlTemplateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateHtmlTemplateRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateHtmlTemplateRequest*>(
               &_UpdateHtmlTemplateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(UpdateHtmlTemplateRequest* other);
  friend void swap(UpdateHtmlTemplateRequest& a, UpdateHtmlTemplateRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateHtmlTemplateRequest* New() const final {
    return CreateMaybeMessage<UpdateHtmlTemplateRequest>(nullptr);
  }

  UpdateHtmlTemplateRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UpdateHtmlTemplateRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UpdateHtmlTemplateRequest& from);
  void MergeFrom(const UpdateHtmlTemplateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateHtmlTemplateRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .escposService.HtmlTemplate html_template = 1;
  bool has_html_template() const;
  void clear_html_template();
  static const int kHtmlTemplateFieldNumber = 1;
  const ::escposService::HtmlTemplate& html_template() const;
  ::escposService::HtmlTemplate* release_html_template();
  ::escposService::HtmlTemplate* mutable_html_template();
  void set_allocated_html_template(::escposService::HtmlTemplate* html_template);

  // @@protoc_insertion_point(class_scope:escposService.UpdateHtmlTemplateRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::escposService::HtmlTemplate* html_template_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_escpos_2eproto;
};
// -------------------------------------------------------------------

class UpdateHtmlTemplateResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:escposService.UpdateHtmlTemplateResponse) */ {
 public:
  UpdateHtmlTemplateResponse();
  virtual ~UpdateHtmlTemplateResponse();

  UpdateHtmlTemplateResponse(const UpdateHtmlTemplateResponse& from);

  inline UpdateHtmlTemplateResponse& operator=(const UpdateHtmlTemplateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateHtmlTemplateResponse(UpdateHtmlTemplateResponse&& from) noexcept
    : UpdateHtmlTemplateResponse() {
    *this = ::std::move(from);
  }

  inline UpdateHtmlTemplateResponse& operator=(UpdateHtmlTemplateResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const UpdateHtmlTemplateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateHtmlTemplateResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateHtmlTemplateResponse*>(
               &_UpdateHtmlTemplateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(UpdateHtmlTemplateResponse* other);
  friend void swap(UpdateHtmlTemplateResponse& a, UpdateHtmlTemplateResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateHtmlTemplateResponse* New() const final {
    return CreateMaybeMessage<UpdateHtmlTemplateResponse>(nullptr);
  }

  UpdateHtmlTemplateResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UpdateHtmlTemplateResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UpdateHtmlTemplateResponse& from);
  void MergeFrom(const UpdateHtmlTemplateResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateHtmlTemplateResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .escposService.HtmlTemplate html_template = 1;
  bool has_html_template() const;
  void clear_html_template();
  static const int kHtmlTemplateFieldNumber = 1;
  const ::escposService::HtmlTemplate& html_template() const;
  ::escposService::HtmlTemplate* release_html_template();
  ::escposService::HtmlTemplate* mutable_html_template();
  void set_allocated_html_template(::escposService::HtmlTemplate* html_template);

  // @@protoc_insertion_point(class_scope:escposService.UpdateHtmlTemplateResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::escposService::HtmlTemplate* html_template_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_escpos_2eproto;
};
// -------------------------------------------------------------------

class DeleteHtmlTemplatesRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:escposService.DeleteHtmlTemplatesRequest) */ {
 public:
  DeleteHtmlTemplatesRequest();
  virtual ~DeleteHtmlTemplatesRequest();

  DeleteHtmlTemplatesRequest(const DeleteHtmlTemplatesRequest& from);

  inline DeleteHtmlTemplatesRequest& operator=(const DeleteHtmlTemplatesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteHtmlTemplatesRequest(DeleteHtmlTemplatesRequest&& from) noexcept
    : DeleteHtmlTemplatesRequest() {
    *this = ::std::move(from);
  }

  inline DeleteHtmlTemplatesRequest& operator=(DeleteHtmlTemplatesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DeleteHtmlTemplatesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteHtmlTemplatesRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteHtmlTemplatesRequest*>(
               &_DeleteHtmlTemplatesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(DeleteHtmlTemplatesRequest* other);
  friend void swap(DeleteHtmlTemplatesRequest& a, DeleteHtmlTemplatesRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteHtmlTemplatesRequest* New() const final {
    return CreateMaybeMessage<DeleteHtmlTemplatesRequest>(nullptr);
  }

  DeleteHtmlTemplatesRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeleteHtmlTemplatesRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeleteHtmlTemplatesRequest& from);
  void MergeFrom(const DeleteHtmlTemplatesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteHtmlTemplatesRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string html_templates_id = 1;
  int html_templates_id_size() const;
  void clear_html_templates_id();
  static const int kHtmlTemplatesIdFieldNumber = 1;
  const ::std::string& html_templates_id(int index) const;
  ::std::string* mutable_html_templates_id(int index);
  void set_html_templates_id(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_html_templates_id(int index, ::std::string&& value);
  #endif
  void set_html_templates_id(int index, const char* value);
  void set_html_templates_id(int index, const char* value, size_t size);
  ::std::string* add_html_templates_id();
  void add_html_templates_id(const ::std::string& value);
  #if LANG_CXX11
  void add_html_templates_id(::std::string&& value);
  #endif
  void add_html_templates_id(const char* value);
  void add_html_templates_id(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& html_templates_id() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_html_templates_id();

  // @@protoc_insertion_point(class_scope:escposService.DeleteHtmlTemplatesRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> html_templates_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_escpos_2eproto;
};
// -------------------------------------------------------------------

class DeleteHtmlTemplatesResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:escposService.DeleteHtmlTemplatesResponse) */ {
 public:
  DeleteHtmlTemplatesResponse();
  virtual ~DeleteHtmlTemplatesResponse();

  DeleteHtmlTemplatesResponse(const DeleteHtmlTemplatesResponse& from);

  inline DeleteHtmlTemplatesResponse& operator=(const DeleteHtmlTemplatesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteHtmlTemplatesResponse(DeleteHtmlTemplatesResponse&& from) noexcept
    : DeleteHtmlTemplatesResponse() {
    *this = ::std::move(from);
  }

  inline DeleteHtmlTemplatesResponse& operator=(DeleteHtmlTemplatesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DeleteHtmlTemplatesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteHtmlTemplatesResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteHtmlTemplatesResponse*>(
               &_DeleteHtmlTemplatesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(DeleteHtmlTemplatesResponse* other);
  friend void swap(DeleteHtmlTemplatesResponse& a, DeleteHtmlTemplatesResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteHtmlTemplatesResponse* New() const final {
    return CreateMaybeMessage<DeleteHtmlTemplatesResponse>(nullptr);
  }

  DeleteHtmlTemplatesResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeleteHtmlTemplatesResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeleteHtmlTemplatesResponse& from);
  void MergeFrom(const DeleteHtmlTemplatesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteHtmlTemplatesResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:escposService.DeleteHtmlTemplatesResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_escpos_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PrintRawRequest

// bytes raw = 1;
inline void PrintRawRequest::clear_raw() {
  raw_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PrintRawRequest::raw() const {
  // @@protoc_insertion_point(field_get:escposService.PrintRawRequest.raw)
  return raw_.GetNoArena();
}
inline void PrintRawRequest::set_raw(const ::std::string& value) {
  
  raw_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:escposService.PrintRawRequest.raw)
}
#if LANG_CXX11
inline void PrintRawRequest::set_raw(::std::string&& value) {
  
  raw_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:escposService.PrintRawRequest.raw)
}
#endif
inline void PrintRawRequest::set_raw(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  raw_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:escposService.PrintRawRequest.raw)
}
inline void PrintRawRequest::set_raw(const void* value, size_t size) {
  
  raw_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:escposService.PrintRawRequest.raw)
}
inline ::std::string* PrintRawRequest::mutable_raw() {
  
  // @@protoc_insertion_point(field_mutable:escposService.PrintRawRequest.raw)
  return raw_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PrintRawRequest::release_raw() {
  // @@protoc_insertion_point(field_release:escposService.PrintRawRequest.raw)
  
  return raw_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PrintRawRequest::set_allocated_raw(::std::string* raw) {
  if (raw != nullptr) {
    
  } else {
    
  }
  raw_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), raw);
  // @@protoc_insertion_point(field_set_allocated:escposService.PrintRawRequest.raw)
}

// -------------------------------------------------------------------

// PrintRawResponse

// -------------------------------------------------------------------

// Element

// .escposService.ElementType etype = 1;
inline void Element::clear_etype() {
  etype_ = 0;
}
inline ::escposService::ElementType Element::etype() const {
  // @@protoc_insertion_point(field_get:escposService.Element.etype)
  return static_cast< ::escposService::ElementType >(etype_);
}
inline void Element::set_etype(::escposService::ElementType value) {
  
  etype_ = value;
  // @@protoc_insertion_point(field_set:escposService.Element.etype)
}

// string content_text = 2;
inline void Element::clear_content_text() {
  content_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Element::content_text() const {
  // @@protoc_insertion_point(field_get:escposService.Element.content_text)
  return content_text_.GetNoArena();
}
inline void Element::set_content_text(const ::std::string& value) {
  
  content_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:escposService.Element.content_text)
}
#if LANG_CXX11
inline void Element::set_content_text(::std::string&& value) {
  
  content_text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:escposService.Element.content_text)
}
#endif
inline void Element::set_content_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:escposService.Element.content_text)
}
inline void Element::set_content_text(const char* value, size_t size) {
  
  content_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:escposService.Element.content_text)
}
inline ::std::string* Element::mutable_content_text() {
  
  // @@protoc_insertion_point(field_mutable:escposService.Element.content_text)
  return content_text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Element::release_content_text() {
  // @@protoc_insertion_point(field_release:escposService.Element.content_text)
  
  return content_text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Element::set_allocated_content_text(::std::string* content_text) {
  if (content_text != nullptr) {
    
  } else {
    
  }
  content_text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content_text);
  // @@protoc_insertion_point(field_set_allocated:escposService.Element.content_text)
}

// bytes content_image = 3;
inline void Element::clear_content_image() {
  content_image_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Element::content_image() const {
  // @@protoc_insertion_point(field_get:escposService.Element.content_image)
  return content_image_.GetNoArena();
}
inline void Element::set_content_image(const ::std::string& value) {
  
  content_image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:escposService.Element.content_image)
}
#if LANG_CXX11
inline void Element::set_content_image(::std::string&& value) {
  
  content_image_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:escposService.Element.content_image)
}
#endif
inline void Element::set_content_image(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:escposService.Element.content_image)
}
inline void Element::set_content_image(const void* value, size_t size) {
  
  content_image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:escposService.Element.content_image)
}
inline ::std::string* Element::mutable_content_image() {
  
  // @@protoc_insertion_point(field_mutable:escposService.Element.content_image)
  return content_image_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Element::release_content_image() {
  // @@protoc_insertion_point(field_release:escposService.Element.content_image)
  
  return content_image_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Element::set_allocated_content_image(::std::string* content_image) {
  if (content_image != nullptr) {
    
  } else {
    
  }
  content_image_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content_image);
  // @@protoc_insertion_point(field_set_allocated:escposService.Element.content_image)
}

// string image_content_type = 5;
inline void Element::clear_image_content_type() {
  image_content_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Element::image_content_type() const {
  // @@protoc_insertion_point(field_get:escposService.Element.image_content_type)
  return image_content_type_.GetNoArena();
}
inline void Element::set_image_content_type(const ::std::string& value) {
  
  image_content_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:escposService.Element.image_content_type)
}
#if LANG_CXX11
inline void Element::set_image_content_type(::std::string&& value) {
  
  image_content_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:escposService.Element.image_content_type)
}
#endif
inline void Element::set_image_content_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  image_content_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:escposService.Element.image_content_type)
}
inline void Element::set_image_content_type(const char* value, size_t size) {
  
  image_content_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:escposService.Element.image_content_type)
}
inline ::std::string* Element::mutable_image_content_type() {
  
  // @@protoc_insertion_point(field_mutable:escposService.Element.image_content_type)
  return image_content_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Element::release_image_content_type() {
  // @@protoc_insertion_point(field_release:escposService.Element.image_content_type)
  
  return image_content_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Element::set_allocated_image_content_type(::std::string* image_content_type) {
  if (image_content_type != nullptr) {
    
  } else {
    
  }
  image_content_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image_content_type);
  // @@protoc_insertion_point(field_set_allocated:escposService.Element.image_content_type)
}

// .escposService.ElementSize size = 4;
inline void Element::clear_size() {
  size_ = 0;
}
inline ::escposService::ElementSize Element::size() const {
  // @@protoc_insertion_point(field_get:escposService.Element.size)
  return static_cast< ::escposService::ElementSize >(size_);
}
inline void Element::set_size(::escposService::ElementSize value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:escposService.Element.size)
}

// -------------------------------------------------------------------

// ElementRow

// repeated .escposService.Element elements = 1;
inline int ElementRow::elements_size() const {
  return elements_.size();
}
inline void ElementRow::clear_elements() {
  elements_.Clear();
}
inline ::escposService::Element* ElementRow::mutable_elements(int index) {
  // @@protoc_insertion_point(field_mutable:escposService.ElementRow.elements)
  return elements_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::escposService::Element >*
ElementRow::mutable_elements() {
  // @@protoc_insertion_point(field_mutable_list:escposService.ElementRow.elements)
  return &elements_;
}
inline const ::escposService::Element& ElementRow::elements(int index) const {
  // @@protoc_insertion_point(field_get:escposService.ElementRow.elements)
  return elements_.Get(index);
}
inline ::escposService::Element* ElementRow::add_elements() {
  // @@protoc_insertion_point(field_add:escposService.ElementRow.elements)
  return elements_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::escposService::Element >&
ElementRow::elements() const {
  // @@protoc_insertion_point(field_list:escposService.ElementRow.elements)
  return elements_;
}

// .escposService.ElementAlign align = 2;
inline void ElementRow::clear_align() {
  align_ = 0;
}
inline ::escposService::ElementAlign ElementRow::align() const {
  // @@protoc_insertion_point(field_get:escposService.ElementRow.align)
  return static_cast< ::escposService::ElementAlign >(align_);
}
inline void ElementRow::set_align(::escposService::ElementAlign value) {
  
  align_ = value;
  // @@protoc_insertion_point(field_set:escposService.ElementRow.align)
}

// -------------------------------------------------------------------

// PrintElementsRequest

// repeated .escposService.ElementRow element_rows = 1;
inline int PrintElementsRequest::element_rows_size() const {
  return element_rows_.size();
}
inline void PrintElementsRequest::clear_element_rows() {
  element_rows_.Clear();
}
inline ::escposService::ElementRow* PrintElementsRequest::mutable_element_rows(int index) {
  // @@protoc_insertion_point(field_mutable:escposService.PrintElementsRequest.element_rows)
  return element_rows_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::escposService::ElementRow >*
PrintElementsRequest::mutable_element_rows() {
  // @@protoc_insertion_point(field_mutable_list:escposService.PrintElementsRequest.element_rows)
  return &element_rows_;
}
inline const ::escposService::ElementRow& PrintElementsRequest::element_rows(int index) const {
  // @@protoc_insertion_point(field_get:escposService.PrintElementsRequest.element_rows)
  return element_rows_.Get(index);
}
inline ::escposService::ElementRow* PrintElementsRequest::add_element_rows() {
  // @@protoc_insertion_point(field_add:escposService.PrintElementsRequest.element_rows)
  return element_rows_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::escposService::ElementRow >&
PrintElementsRequest::element_rows() const {
  // @@protoc_insertion_point(field_list:escposService.PrintElementsRequest.element_rows)
  return element_rows_;
}

// bool cut = 2;
inline void PrintElementsRequest::clear_cut() {
  cut_ = false;
}
inline bool PrintElementsRequest::cut() const {
  // @@protoc_insertion_point(field_get:escposService.PrintElementsRequest.cut)
  return cut_;
}
inline void PrintElementsRequest::set_cut(bool value) {
  
  cut_ = value;
  // @@protoc_insertion_point(field_set:escposService.PrintElementsRequest.cut)
}

// -------------------------------------------------------------------

// PrintElementsResponse

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// PrintHtmlTemplateRequest

// string id = 1;
inline void PrintHtmlTemplateRequest::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PrintHtmlTemplateRequest::id() const {
  // @@protoc_insertion_point(field_get:escposService.PrintHtmlTemplateRequest.id)
  return id_.GetNoArena();
}
inline void PrintHtmlTemplateRequest::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:escposService.PrintHtmlTemplateRequest.id)
}
#if LANG_CXX11
inline void PrintHtmlTemplateRequest::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:escposService.PrintHtmlTemplateRequest.id)
}
#endif
inline void PrintHtmlTemplateRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:escposService.PrintHtmlTemplateRequest.id)
}
inline void PrintHtmlTemplateRequest::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:escposService.PrintHtmlTemplateRequest.id)
}
inline ::std::string* PrintHtmlTemplateRequest::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:escposService.PrintHtmlTemplateRequest.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PrintHtmlTemplateRequest::release_id() {
  // @@protoc_insertion_point(field_release:escposService.PrintHtmlTemplateRequest.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PrintHtmlTemplateRequest::set_allocated_id(::std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:escposService.PrintHtmlTemplateRequest.id)
}

// string name = 2;
inline void PrintHtmlTemplateRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PrintHtmlTemplateRequest::name() const {
  // @@protoc_insertion_point(field_get:escposService.PrintHtmlTemplateRequest.name)
  return name_.GetNoArena();
}
inline void PrintHtmlTemplateRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:escposService.PrintHtmlTemplateRequest.name)
}
#if LANG_CXX11
inline void PrintHtmlTemplateRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:escposService.PrintHtmlTemplateRequest.name)
}
#endif
inline void PrintHtmlTemplateRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:escposService.PrintHtmlTemplateRequest.name)
}
inline void PrintHtmlTemplateRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:escposService.PrintHtmlTemplateRequest.name)
}
inline ::std::string* PrintHtmlTemplateRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:escposService.PrintHtmlTemplateRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PrintHtmlTemplateRequest::release_name() {
  // @@protoc_insertion_point(field_release:escposService.PrintHtmlTemplateRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PrintHtmlTemplateRequest::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:escposService.PrintHtmlTemplateRequest.name)
}

// map<string, string> params = 3;
inline int PrintHtmlTemplateRequest::params_size() const {
  return params_.size();
}
inline void PrintHtmlTemplateRequest::clear_params() {
  params_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
PrintHtmlTemplateRequest::params() const {
  // @@protoc_insertion_point(field_map:escposService.PrintHtmlTemplateRequest.params)
  return params_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
PrintHtmlTemplateRequest::mutable_params() {
  // @@protoc_insertion_point(field_mutable_map:escposService.PrintHtmlTemplateRequest.params)
  return params_.MutableMap();
}

// bool cut = 4;
inline void PrintHtmlTemplateRequest::clear_cut() {
  cut_ = false;
}
inline bool PrintHtmlTemplateRequest::cut() const {
  // @@protoc_insertion_point(field_get:escposService.PrintHtmlTemplateRequest.cut)
  return cut_;
}
inline void PrintHtmlTemplateRequest::set_cut(bool value) {
  
  cut_ = value;
  // @@protoc_insertion_point(field_set:escposService.PrintHtmlTemplateRequest.cut)
}

// -------------------------------------------------------------------

// PrintHtmlTemplateResponse

// -------------------------------------------------------------------

// HtmlTemplate

// string id = 1;
inline void HtmlTemplate::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HtmlTemplate::id() const {
  // @@protoc_insertion_point(field_get:escposService.HtmlTemplate.id)
  return id_.GetNoArena();
}
inline void HtmlTemplate::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:escposService.HtmlTemplate.id)
}
#if LANG_CXX11
inline void HtmlTemplate::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:escposService.HtmlTemplate.id)
}
#endif
inline void HtmlTemplate::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:escposService.HtmlTemplate.id)
}
inline void HtmlTemplate::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:escposService.HtmlTemplate.id)
}
inline ::std::string* HtmlTemplate::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:escposService.HtmlTemplate.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HtmlTemplate::release_id() {
  // @@protoc_insertion_point(field_release:escposService.HtmlTemplate.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HtmlTemplate::set_allocated_id(::std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:escposService.HtmlTemplate.id)
}

// string name = 2;
inline void HtmlTemplate::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HtmlTemplate::name() const {
  // @@protoc_insertion_point(field_get:escposService.HtmlTemplate.name)
  return name_.GetNoArena();
}
inline void HtmlTemplate::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:escposService.HtmlTemplate.name)
}
#if LANG_CXX11
inline void HtmlTemplate::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:escposService.HtmlTemplate.name)
}
#endif
inline void HtmlTemplate::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:escposService.HtmlTemplate.name)
}
inline void HtmlTemplate::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:escposService.HtmlTemplate.name)
}
inline ::std::string* HtmlTemplate::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:escposService.HtmlTemplate.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HtmlTemplate::release_name() {
  // @@protoc_insertion_point(field_release:escposService.HtmlTemplate.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HtmlTemplate::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:escposService.HtmlTemplate.name)
}

// string content = 3;
inline void HtmlTemplate::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HtmlTemplate::content() const {
  // @@protoc_insertion_point(field_get:escposService.HtmlTemplate.content)
  return content_.GetNoArena();
}
inline void HtmlTemplate::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:escposService.HtmlTemplate.content)
}
#if LANG_CXX11
inline void HtmlTemplate::set_content(::std::string&& value) {
  
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:escposService.HtmlTemplate.content)
}
#endif
inline void HtmlTemplate::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:escposService.HtmlTemplate.content)
}
inline void HtmlTemplate::set_content(const char* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:escposService.HtmlTemplate.content)
}
inline ::std::string* HtmlTemplate::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:escposService.HtmlTemplate.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HtmlTemplate::release_content() {
  // @@protoc_insertion_point(field_release:escposService.HtmlTemplate.content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HtmlTemplate::set_allocated_content(::std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:escposService.HtmlTemplate.content)
}

// -------------------------------------------------------------------

// NewHtmlTemplateRequest

// .escposService.HtmlTemplate html_template = 1;
inline bool NewHtmlTemplateRequest::has_html_template() const {
  return this != internal_default_instance() && html_template_ != nullptr;
}
inline void NewHtmlTemplateRequest::clear_html_template() {
  if (GetArenaNoVirtual() == nullptr && html_template_ != nullptr) {
    delete html_template_;
  }
  html_template_ = nullptr;
}
inline const ::escposService::HtmlTemplate& NewHtmlTemplateRequest::html_template() const {
  const ::escposService::HtmlTemplate* p = html_template_;
  // @@protoc_insertion_point(field_get:escposService.NewHtmlTemplateRequest.html_template)
  return p != nullptr ? *p : *reinterpret_cast<const ::escposService::HtmlTemplate*>(
      &::escposService::_HtmlTemplate_default_instance_);
}
inline ::escposService::HtmlTemplate* NewHtmlTemplateRequest::release_html_template() {
  // @@protoc_insertion_point(field_release:escposService.NewHtmlTemplateRequest.html_template)
  
  ::escposService::HtmlTemplate* temp = html_template_;
  html_template_ = nullptr;
  return temp;
}
inline ::escposService::HtmlTemplate* NewHtmlTemplateRequest::mutable_html_template() {
  
  if (html_template_ == nullptr) {
    auto* p = CreateMaybeMessage<::escposService::HtmlTemplate>(GetArenaNoVirtual());
    html_template_ = p;
  }
  // @@protoc_insertion_point(field_mutable:escposService.NewHtmlTemplateRequest.html_template)
  return html_template_;
}
inline void NewHtmlTemplateRequest::set_allocated_html_template(::escposService::HtmlTemplate* html_template) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete html_template_;
  }
  if (html_template) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      html_template = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, html_template, submessage_arena);
    }
    
  } else {
    
  }
  html_template_ = html_template;
  // @@protoc_insertion_point(field_set_allocated:escposService.NewHtmlTemplateRequest.html_template)
}

// -------------------------------------------------------------------

// NewHtmlTemplateResponse

// .escposService.HtmlTemplate html_template = 1;
inline bool NewHtmlTemplateResponse::has_html_template() const {
  return this != internal_default_instance() && html_template_ != nullptr;
}
inline void NewHtmlTemplateResponse::clear_html_template() {
  if (GetArenaNoVirtual() == nullptr && html_template_ != nullptr) {
    delete html_template_;
  }
  html_template_ = nullptr;
}
inline const ::escposService::HtmlTemplate& NewHtmlTemplateResponse::html_template() const {
  const ::escposService::HtmlTemplate* p = html_template_;
  // @@protoc_insertion_point(field_get:escposService.NewHtmlTemplateResponse.html_template)
  return p != nullptr ? *p : *reinterpret_cast<const ::escposService::HtmlTemplate*>(
      &::escposService::_HtmlTemplate_default_instance_);
}
inline ::escposService::HtmlTemplate* NewHtmlTemplateResponse::release_html_template() {
  // @@protoc_insertion_point(field_release:escposService.NewHtmlTemplateResponse.html_template)
  
  ::escposService::HtmlTemplate* temp = html_template_;
  html_template_ = nullptr;
  return temp;
}
inline ::escposService::HtmlTemplate* NewHtmlTemplateResponse::mutable_html_template() {
  
  if (html_template_ == nullptr) {
    auto* p = CreateMaybeMessage<::escposService::HtmlTemplate>(GetArenaNoVirtual());
    html_template_ = p;
  }
  // @@protoc_insertion_point(field_mutable:escposService.NewHtmlTemplateResponse.html_template)
  return html_template_;
}
inline void NewHtmlTemplateResponse::set_allocated_html_template(::escposService::HtmlTemplate* html_template) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete html_template_;
  }
  if (html_template) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      html_template = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, html_template, submessage_arena);
    }
    
  } else {
    
  }
  html_template_ = html_template;
  // @@protoc_insertion_point(field_set_allocated:escposService.NewHtmlTemplateResponse.html_template)
}

// -------------------------------------------------------------------

// ListHtmlTemplatesRequest

// -------------------------------------------------------------------

// ListHtmlTemplatesResponse

// repeated .escposService.HtmlTemplate html_templates = 1;
inline int ListHtmlTemplatesResponse::html_templates_size() const {
  return html_templates_.size();
}
inline void ListHtmlTemplatesResponse::clear_html_templates() {
  html_templates_.Clear();
}
inline ::escposService::HtmlTemplate* ListHtmlTemplatesResponse::mutable_html_templates(int index) {
  // @@protoc_insertion_point(field_mutable:escposService.ListHtmlTemplatesResponse.html_templates)
  return html_templates_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::escposService::HtmlTemplate >*
ListHtmlTemplatesResponse::mutable_html_templates() {
  // @@protoc_insertion_point(field_mutable_list:escposService.ListHtmlTemplatesResponse.html_templates)
  return &html_templates_;
}
inline const ::escposService::HtmlTemplate& ListHtmlTemplatesResponse::html_templates(int index) const {
  // @@protoc_insertion_point(field_get:escposService.ListHtmlTemplatesResponse.html_templates)
  return html_templates_.Get(index);
}
inline ::escposService::HtmlTemplate* ListHtmlTemplatesResponse::add_html_templates() {
  // @@protoc_insertion_point(field_add:escposService.ListHtmlTemplatesResponse.html_templates)
  return html_templates_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::escposService::HtmlTemplate >&
ListHtmlTemplatesResponse::html_templates() const {
  // @@protoc_insertion_point(field_list:escposService.ListHtmlTemplatesResponse.html_templates)
  return html_templates_;
}

// -------------------------------------------------------------------

// GetHtmlTemplateRequest

// string id = 1;
inline void GetHtmlTemplateRequest::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetHtmlTemplateRequest::id() const {
  // @@protoc_insertion_point(field_get:escposService.GetHtmlTemplateRequest.id)
  return id_.GetNoArena();
}
inline void GetHtmlTemplateRequest::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:escposService.GetHtmlTemplateRequest.id)
}
#if LANG_CXX11
inline void GetHtmlTemplateRequest::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:escposService.GetHtmlTemplateRequest.id)
}
#endif
inline void GetHtmlTemplateRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:escposService.GetHtmlTemplateRequest.id)
}
inline void GetHtmlTemplateRequest::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:escposService.GetHtmlTemplateRequest.id)
}
inline ::std::string* GetHtmlTemplateRequest::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:escposService.GetHtmlTemplateRequest.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetHtmlTemplateRequest::release_id() {
  // @@protoc_insertion_point(field_release:escposService.GetHtmlTemplateRequest.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetHtmlTemplateRequest::set_allocated_id(::std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:escposService.GetHtmlTemplateRequest.id)
}

// -------------------------------------------------------------------

// GetHtmlTemplateResponse

// .escposService.HtmlTemplate html_template = 1;
inline bool GetHtmlTemplateResponse::has_html_template() const {
  return this != internal_default_instance() && html_template_ != nullptr;
}
inline void GetHtmlTemplateResponse::clear_html_template() {
  if (GetArenaNoVirtual() == nullptr && html_template_ != nullptr) {
    delete html_template_;
  }
  html_template_ = nullptr;
}
inline const ::escposService::HtmlTemplate& GetHtmlTemplateResponse::html_template() const {
  const ::escposService::HtmlTemplate* p = html_template_;
  // @@protoc_insertion_point(field_get:escposService.GetHtmlTemplateResponse.html_template)
  return p != nullptr ? *p : *reinterpret_cast<const ::escposService::HtmlTemplate*>(
      &::escposService::_HtmlTemplate_default_instance_);
}
inline ::escposService::HtmlTemplate* GetHtmlTemplateResponse::release_html_template() {
  // @@protoc_insertion_point(field_release:escposService.GetHtmlTemplateResponse.html_template)
  
  ::escposService::HtmlTemplate* temp = html_template_;
  html_template_ = nullptr;
  return temp;
}
inline ::escposService::HtmlTemplate* GetHtmlTemplateResponse::mutable_html_template() {
  
  if (html_template_ == nullptr) {
    auto* p = CreateMaybeMessage<::escposService::HtmlTemplate>(GetArenaNoVirtual());
    html_template_ = p;
  }
  // @@protoc_insertion_point(field_mutable:escposService.GetHtmlTemplateResponse.html_template)
  return html_template_;
}
inline void GetHtmlTemplateResponse::set_allocated_html_template(::escposService::HtmlTemplate* html_template) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete html_template_;
  }
  if (html_template) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      html_template = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, html_template, submessage_arena);
    }
    
  } else {
    
  }
  html_template_ = html_template;
  // @@protoc_insertion_point(field_set_allocated:escposService.GetHtmlTemplateResponse.html_template)
}

// -------------------------------------------------------------------

// UpdateHtmlTemplateRequest

// .escposService.HtmlTemplate html_template = 1;
inline bool UpdateHtmlTemplateRequest::has_html_template() const {
  return this != internal_default_instance() && html_template_ != nullptr;
}
inline void UpdateHtmlTemplateRequest::clear_html_template() {
  if (GetArenaNoVirtual() == nullptr && html_template_ != nullptr) {
    delete html_template_;
  }
  html_template_ = nullptr;
}
inline const ::escposService::HtmlTemplate& UpdateHtmlTemplateRequest::html_template() const {
  const ::escposService::HtmlTemplate* p = html_template_;
  // @@protoc_insertion_point(field_get:escposService.UpdateHtmlTemplateRequest.html_template)
  return p != nullptr ? *p : *reinterpret_cast<const ::escposService::HtmlTemplate*>(
      &::escposService::_HtmlTemplate_default_instance_);
}
inline ::escposService::HtmlTemplate* UpdateHtmlTemplateRequest::release_html_template() {
  // @@protoc_insertion_point(field_release:escposService.UpdateHtmlTemplateRequest.html_template)
  
  ::escposService::HtmlTemplate* temp = html_template_;
  html_template_ = nullptr;
  return temp;
}
inline ::escposService::HtmlTemplate* UpdateHtmlTemplateRequest::mutable_html_template() {
  
  if (html_template_ == nullptr) {
    auto* p = CreateMaybeMessage<::escposService::HtmlTemplate>(GetArenaNoVirtual());
    html_template_ = p;
  }
  // @@protoc_insertion_point(field_mutable:escposService.UpdateHtmlTemplateRequest.html_template)
  return html_template_;
}
inline void UpdateHtmlTemplateRequest::set_allocated_html_template(::escposService::HtmlTemplate* html_template) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete html_template_;
  }
  if (html_template) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      html_template = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, html_template, submessage_arena);
    }
    
  } else {
    
  }
  html_template_ = html_template;
  // @@protoc_insertion_point(field_set_allocated:escposService.UpdateHtmlTemplateRequest.html_template)
}

// -------------------------------------------------------------------

// UpdateHtmlTemplateResponse

// .escposService.HtmlTemplate html_template = 1;
inline bool UpdateHtmlTemplateResponse::has_html_template() const {
  return this != internal_default_instance() && html_template_ != nullptr;
}
inline void UpdateHtmlTemplateResponse::clear_html_template() {
  if (GetArenaNoVirtual() == nullptr && html_template_ != nullptr) {
    delete html_template_;
  }
  html_template_ = nullptr;
}
inline const ::escposService::HtmlTemplate& UpdateHtmlTemplateResponse::html_template() const {
  const ::escposService::HtmlTemplate* p = html_template_;
  // @@protoc_insertion_point(field_get:escposService.UpdateHtmlTemplateResponse.html_template)
  return p != nullptr ? *p : *reinterpret_cast<const ::escposService::HtmlTemplate*>(
      &::escposService::_HtmlTemplate_default_instance_);
}
inline ::escposService::HtmlTemplate* UpdateHtmlTemplateResponse::release_html_template() {
  // @@protoc_insertion_point(field_release:escposService.UpdateHtmlTemplateResponse.html_template)
  
  ::escposService::HtmlTemplate* temp = html_template_;
  html_template_ = nullptr;
  return temp;
}
inline ::escposService::HtmlTemplate* UpdateHtmlTemplateResponse::mutable_html_template() {
  
  if (html_template_ == nullptr) {
    auto* p = CreateMaybeMessage<::escposService::HtmlTemplate>(GetArenaNoVirtual());
    html_template_ = p;
  }
  // @@protoc_insertion_point(field_mutable:escposService.UpdateHtmlTemplateResponse.html_template)
  return html_template_;
}
inline void UpdateHtmlTemplateResponse::set_allocated_html_template(::escposService::HtmlTemplate* html_template) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete html_template_;
  }
  if (html_template) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      html_template = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, html_template, submessage_arena);
    }
    
  } else {
    
  }
  html_template_ = html_template;
  // @@protoc_insertion_point(field_set_allocated:escposService.UpdateHtmlTemplateResponse.html_template)
}

// -------------------------------------------------------------------

// DeleteHtmlTemplatesRequest

// repeated string html_templates_id = 1;
inline int DeleteHtmlTemplatesRequest::html_templates_id_size() const {
  return html_templates_id_.size();
}
inline void DeleteHtmlTemplatesRequest::clear_html_templates_id() {
  html_templates_id_.Clear();
}
inline const ::std::string& DeleteHtmlTemplatesRequest::html_templates_id(int index) const {
  // @@protoc_insertion_point(field_get:escposService.DeleteHtmlTemplatesRequest.html_templates_id)
  return html_templates_id_.Get(index);
}
inline ::std::string* DeleteHtmlTemplatesRequest::mutable_html_templates_id(int index) {
  // @@protoc_insertion_point(field_mutable:escposService.DeleteHtmlTemplatesRequest.html_templates_id)
  return html_templates_id_.Mutable(index);
}
inline void DeleteHtmlTemplatesRequest::set_html_templates_id(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:escposService.DeleteHtmlTemplatesRequest.html_templates_id)
  html_templates_id_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void DeleteHtmlTemplatesRequest::set_html_templates_id(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:escposService.DeleteHtmlTemplatesRequest.html_templates_id)
  html_templates_id_.Mutable(index)->assign(std::move(value));
}
#endif
inline void DeleteHtmlTemplatesRequest::set_html_templates_id(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  html_templates_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:escposService.DeleteHtmlTemplatesRequest.html_templates_id)
}
inline void DeleteHtmlTemplatesRequest::set_html_templates_id(int index, const char* value, size_t size) {
  html_templates_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:escposService.DeleteHtmlTemplatesRequest.html_templates_id)
}
inline ::std::string* DeleteHtmlTemplatesRequest::add_html_templates_id() {
  // @@protoc_insertion_point(field_add_mutable:escposService.DeleteHtmlTemplatesRequest.html_templates_id)
  return html_templates_id_.Add();
}
inline void DeleteHtmlTemplatesRequest::add_html_templates_id(const ::std::string& value) {
  html_templates_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:escposService.DeleteHtmlTemplatesRequest.html_templates_id)
}
#if LANG_CXX11
inline void DeleteHtmlTemplatesRequest::add_html_templates_id(::std::string&& value) {
  html_templates_id_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:escposService.DeleteHtmlTemplatesRequest.html_templates_id)
}
#endif
inline void DeleteHtmlTemplatesRequest::add_html_templates_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  html_templates_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:escposService.DeleteHtmlTemplatesRequest.html_templates_id)
}
inline void DeleteHtmlTemplatesRequest::add_html_templates_id(const char* value, size_t size) {
  html_templates_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:escposService.DeleteHtmlTemplatesRequest.html_templates_id)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
DeleteHtmlTemplatesRequest::html_templates_id() const {
  // @@protoc_insertion_point(field_list:escposService.DeleteHtmlTemplatesRequest.html_templates_id)
  return html_templates_id_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
DeleteHtmlTemplatesRequest::mutable_html_templates_id() {
  // @@protoc_insertion_point(field_mutable_list:escposService.DeleteHtmlTemplatesRequest.html_templates_id)
  return &html_templates_id_;
}

// -------------------------------------------------------------------

// DeleteHtmlTemplatesResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace escposService

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::escposService::ElementType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::escposService::ElementType>() {
  return ::escposService::ElementType_descriptor();
}
template <> struct is_proto_enum< ::escposService::ElementSize> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::escposService::ElementSize>() {
  return ::escposService::ElementSize_descriptor();
}
template <> struct is_proto_enum< ::escposService::ElementAlign> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::escposService::ElementAlign>() {
  return ::escposService::ElementAlign_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_escpos_2eproto
