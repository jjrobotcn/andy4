// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: escpos.proto

#include "escpos.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_escpos_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Element_escpos_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_escpos_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_HtmlTemplate_escpos_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_escpos_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PrintHtmlTemplateRequest_ParamsEntry_DoNotUse_escpos_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_escpos_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ElementRow_escpos_2eproto;
namespace escposService {
class PrintRawRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PrintRawRequest> _instance;
} _PrintRawRequest_default_instance_;
class PrintRawResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PrintRawResponse> _instance;
} _PrintRawResponse_default_instance_;
class ElementDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Element> _instance;
} _Element_default_instance_;
class ElementRowDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ElementRow> _instance;
} _ElementRow_default_instance_;
class PrintElementsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PrintElementsRequest> _instance;
} _PrintElementsRequest_default_instance_;
class PrintElementsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PrintElementsResponse> _instance;
} _PrintElementsResponse_default_instance_;
class PrintHtmlTemplateRequest_ParamsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PrintHtmlTemplateRequest_ParamsEntry_DoNotUse> _instance;
} _PrintHtmlTemplateRequest_ParamsEntry_DoNotUse_default_instance_;
class PrintHtmlTemplateRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PrintHtmlTemplateRequest> _instance;
} _PrintHtmlTemplateRequest_default_instance_;
class PrintHtmlTemplateResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PrintHtmlTemplateResponse> _instance;
} _PrintHtmlTemplateResponse_default_instance_;
class HtmlTemplateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HtmlTemplate> _instance;
} _HtmlTemplate_default_instance_;
class NewHtmlTemplateRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NewHtmlTemplateRequest> _instance;
} _NewHtmlTemplateRequest_default_instance_;
class NewHtmlTemplateResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NewHtmlTemplateResponse> _instance;
} _NewHtmlTemplateResponse_default_instance_;
class ListHtmlTemplatesRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ListHtmlTemplatesRequest> _instance;
} _ListHtmlTemplatesRequest_default_instance_;
class ListHtmlTemplatesResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ListHtmlTemplatesResponse> _instance;
} _ListHtmlTemplatesResponse_default_instance_;
class GetHtmlTemplateRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetHtmlTemplateRequest> _instance;
} _GetHtmlTemplateRequest_default_instance_;
class GetHtmlTemplateResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetHtmlTemplateResponse> _instance;
} _GetHtmlTemplateResponse_default_instance_;
class UpdateHtmlTemplateRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UpdateHtmlTemplateRequest> _instance;
} _UpdateHtmlTemplateRequest_default_instance_;
class UpdateHtmlTemplateResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UpdateHtmlTemplateResponse> _instance;
} _UpdateHtmlTemplateResponse_default_instance_;
class DeleteHtmlTemplatesRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeleteHtmlTemplatesRequest> _instance;
} _DeleteHtmlTemplatesRequest_default_instance_;
class DeleteHtmlTemplatesResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeleteHtmlTemplatesResponse> _instance;
} _DeleteHtmlTemplatesResponse_default_instance_;
}  // namespace escposService
static void InitDefaultsPrintRawRequest_escpos_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::escposService::_PrintRawRequest_default_instance_;
    new (ptr) ::escposService::PrintRawRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::escposService::PrintRawRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PrintRawRequest_escpos_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPrintRawRequest_escpos_2eproto}, {}};

static void InitDefaultsPrintRawResponse_escpos_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::escposService::_PrintRawResponse_default_instance_;
    new (ptr) ::escposService::PrintRawResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::escposService::PrintRawResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PrintRawResponse_escpos_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPrintRawResponse_escpos_2eproto}, {}};

static void InitDefaultsElement_escpos_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::escposService::_Element_default_instance_;
    new (ptr) ::escposService::Element();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::escposService::Element::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Element_escpos_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsElement_escpos_2eproto}, {}};

static void InitDefaultsElementRow_escpos_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::escposService::_ElementRow_default_instance_;
    new (ptr) ::escposService::ElementRow();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::escposService::ElementRow::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ElementRow_escpos_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsElementRow_escpos_2eproto}, {
      &scc_info_Element_escpos_2eproto.base,}};

static void InitDefaultsPrintElementsRequest_escpos_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::escposService::_PrintElementsRequest_default_instance_;
    new (ptr) ::escposService::PrintElementsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::escposService::PrintElementsRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PrintElementsRequest_escpos_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPrintElementsRequest_escpos_2eproto}, {
      &scc_info_ElementRow_escpos_2eproto.base,}};

static void InitDefaultsPrintElementsResponse_escpos_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::escposService::_PrintElementsResponse_default_instance_;
    new (ptr) ::escposService::PrintElementsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::escposService::PrintElementsResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PrintElementsResponse_escpos_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPrintElementsResponse_escpos_2eproto}, {}};

static void InitDefaultsPrintHtmlTemplateRequest_ParamsEntry_DoNotUse_escpos_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::escposService::_PrintHtmlTemplateRequest_ParamsEntry_DoNotUse_default_instance_;
    new (ptr) ::escposService::PrintHtmlTemplateRequest_ParamsEntry_DoNotUse();
  }
  ::escposService::PrintHtmlTemplateRequest_ParamsEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PrintHtmlTemplateRequest_ParamsEntry_DoNotUse_escpos_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPrintHtmlTemplateRequest_ParamsEntry_DoNotUse_escpos_2eproto}, {}};

static void InitDefaultsPrintHtmlTemplateRequest_escpos_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::escposService::_PrintHtmlTemplateRequest_default_instance_;
    new (ptr) ::escposService::PrintHtmlTemplateRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::escposService::PrintHtmlTemplateRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PrintHtmlTemplateRequest_escpos_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPrintHtmlTemplateRequest_escpos_2eproto}, {
      &scc_info_PrintHtmlTemplateRequest_ParamsEntry_DoNotUse_escpos_2eproto.base,}};

static void InitDefaultsPrintHtmlTemplateResponse_escpos_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::escposService::_PrintHtmlTemplateResponse_default_instance_;
    new (ptr) ::escposService::PrintHtmlTemplateResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::escposService::PrintHtmlTemplateResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PrintHtmlTemplateResponse_escpos_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPrintHtmlTemplateResponse_escpos_2eproto}, {}};

static void InitDefaultsHtmlTemplate_escpos_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::escposService::_HtmlTemplate_default_instance_;
    new (ptr) ::escposService::HtmlTemplate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::escposService::HtmlTemplate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_HtmlTemplate_escpos_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHtmlTemplate_escpos_2eproto}, {}};

static void InitDefaultsNewHtmlTemplateRequest_escpos_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::escposService::_NewHtmlTemplateRequest_default_instance_;
    new (ptr) ::escposService::NewHtmlTemplateRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::escposService::NewHtmlTemplateRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_NewHtmlTemplateRequest_escpos_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsNewHtmlTemplateRequest_escpos_2eproto}, {
      &scc_info_HtmlTemplate_escpos_2eproto.base,}};

static void InitDefaultsNewHtmlTemplateResponse_escpos_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::escposService::_NewHtmlTemplateResponse_default_instance_;
    new (ptr) ::escposService::NewHtmlTemplateResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::escposService::NewHtmlTemplateResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_NewHtmlTemplateResponse_escpos_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsNewHtmlTemplateResponse_escpos_2eproto}, {
      &scc_info_HtmlTemplate_escpos_2eproto.base,}};

static void InitDefaultsListHtmlTemplatesRequest_escpos_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::escposService::_ListHtmlTemplatesRequest_default_instance_;
    new (ptr) ::escposService::ListHtmlTemplatesRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::escposService::ListHtmlTemplatesRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ListHtmlTemplatesRequest_escpos_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsListHtmlTemplatesRequest_escpos_2eproto}, {}};

static void InitDefaultsListHtmlTemplatesResponse_escpos_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::escposService::_ListHtmlTemplatesResponse_default_instance_;
    new (ptr) ::escposService::ListHtmlTemplatesResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::escposService::ListHtmlTemplatesResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ListHtmlTemplatesResponse_escpos_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsListHtmlTemplatesResponse_escpos_2eproto}, {
      &scc_info_HtmlTemplate_escpos_2eproto.base,}};

static void InitDefaultsGetHtmlTemplateRequest_escpos_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::escposService::_GetHtmlTemplateRequest_default_instance_;
    new (ptr) ::escposService::GetHtmlTemplateRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::escposService::GetHtmlTemplateRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetHtmlTemplateRequest_escpos_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetHtmlTemplateRequest_escpos_2eproto}, {}};

static void InitDefaultsGetHtmlTemplateResponse_escpos_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::escposService::_GetHtmlTemplateResponse_default_instance_;
    new (ptr) ::escposService::GetHtmlTemplateResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::escposService::GetHtmlTemplateResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GetHtmlTemplateResponse_escpos_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGetHtmlTemplateResponse_escpos_2eproto}, {
      &scc_info_HtmlTemplate_escpos_2eproto.base,}};

static void InitDefaultsUpdateHtmlTemplateRequest_escpos_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::escposService::_UpdateHtmlTemplateRequest_default_instance_;
    new (ptr) ::escposService::UpdateHtmlTemplateRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::escposService::UpdateHtmlTemplateRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_UpdateHtmlTemplateRequest_escpos_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsUpdateHtmlTemplateRequest_escpos_2eproto}, {
      &scc_info_HtmlTemplate_escpos_2eproto.base,}};

static void InitDefaultsUpdateHtmlTemplateResponse_escpos_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::escposService::_UpdateHtmlTemplateResponse_default_instance_;
    new (ptr) ::escposService::UpdateHtmlTemplateResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::escposService::UpdateHtmlTemplateResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_UpdateHtmlTemplateResponse_escpos_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsUpdateHtmlTemplateResponse_escpos_2eproto}, {
      &scc_info_HtmlTemplate_escpos_2eproto.base,}};

static void InitDefaultsDeleteHtmlTemplatesRequest_escpos_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::escposService::_DeleteHtmlTemplatesRequest_default_instance_;
    new (ptr) ::escposService::DeleteHtmlTemplatesRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::escposService::DeleteHtmlTemplatesRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DeleteHtmlTemplatesRequest_escpos_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDeleteHtmlTemplatesRequest_escpos_2eproto}, {}};

static void InitDefaultsDeleteHtmlTemplatesResponse_escpos_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::escposService::_DeleteHtmlTemplatesResponse_default_instance_;
    new (ptr) ::escposService::DeleteHtmlTemplatesResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::escposService::DeleteHtmlTemplatesResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DeleteHtmlTemplatesResponse_escpos_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDeleteHtmlTemplatesResponse_escpos_2eproto}, {}};

void InitDefaults_escpos_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_PrintRawRequest_escpos_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PrintRawResponse_escpos_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Element_escpos_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ElementRow_escpos_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PrintElementsRequest_escpos_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PrintElementsResponse_escpos_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PrintHtmlTemplateRequest_ParamsEntry_DoNotUse_escpos_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PrintHtmlTemplateRequest_escpos_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PrintHtmlTemplateResponse_escpos_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HtmlTemplate_escpos_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NewHtmlTemplateRequest_escpos_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NewHtmlTemplateResponse_escpos_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ListHtmlTemplatesRequest_escpos_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ListHtmlTemplatesResponse_escpos_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetHtmlTemplateRequest_escpos_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetHtmlTemplateResponse_escpos_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UpdateHtmlTemplateRequest_escpos_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UpdateHtmlTemplateResponse_escpos_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DeleteHtmlTemplatesRequest_escpos_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DeleteHtmlTemplatesResponse_escpos_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_escpos_2eproto[20];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_escpos_2eproto[3];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_escpos_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_escpos_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::escposService::PrintRawRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::escposService::PrintRawRequest, raw_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::escposService::PrintRawResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::escposService::Element, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::escposService::Element, etype_),
  PROTOBUF_FIELD_OFFSET(::escposService::Element, content_text_),
  PROTOBUF_FIELD_OFFSET(::escposService::Element, content_image_),
  PROTOBUF_FIELD_OFFSET(::escposService::Element, image_content_type_),
  PROTOBUF_FIELD_OFFSET(::escposService::Element, size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::escposService::ElementRow, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::escposService::ElementRow, elements_),
  PROTOBUF_FIELD_OFFSET(::escposService::ElementRow, align_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::escposService::PrintElementsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::escposService::PrintElementsRequest, element_rows_),
  PROTOBUF_FIELD_OFFSET(::escposService::PrintElementsRequest, cut_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::escposService::PrintElementsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::escposService::PrintHtmlTemplateRequest_ParamsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::escposService::PrintHtmlTemplateRequest_ParamsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::escposService::PrintHtmlTemplateRequest_ParamsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::escposService::PrintHtmlTemplateRequest_ParamsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::escposService::PrintHtmlTemplateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::escposService::PrintHtmlTemplateRequest, id_),
  PROTOBUF_FIELD_OFFSET(::escposService::PrintHtmlTemplateRequest, name_),
  PROTOBUF_FIELD_OFFSET(::escposService::PrintHtmlTemplateRequest, params_),
  PROTOBUF_FIELD_OFFSET(::escposService::PrintHtmlTemplateRequest, cut_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::escposService::PrintHtmlTemplateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::escposService::HtmlTemplate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::escposService::HtmlTemplate, id_),
  PROTOBUF_FIELD_OFFSET(::escposService::HtmlTemplate, name_),
  PROTOBUF_FIELD_OFFSET(::escposService::HtmlTemplate, content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::escposService::NewHtmlTemplateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::escposService::NewHtmlTemplateRequest, html_template_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::escposService::NewHtmlTemplateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::escposService::NewHtmlTemplateResponse, html_template_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::escposService::ListHtmlTemplatesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::escposService::ListHtmlTemplatesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::escposService::ListHtmlTemplatesResponse, html_templates_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::escposService::GetHtmlTemplateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::escposService::GetHtmlTemplateRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::escposService::GetHtmlTemplateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::escposService::GetHtmlTemplateResponse, html_template_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::escposService::UpdateHtmlTemplateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::escposService::UpdateHtmlTemplateRequest, html_template_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::escposService::UpdateHtmlTemplateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::escposService::UpdateHtmlTemplateResponse, html_template_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::escposService::DeleteHtmlTemplatesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::escposService::DeleteHtmlTemplatesRequest, html_templates_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::escposService::DeleteHtmlTemplatesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::escposService::PrintRawRequest)},
  { 6, -1, sizeof(::escposService::PrintRawResponse)},
  { 11, -1, sizeof(::escposService::Element)},
  { 21, -1, sizeof(::escposService::ElementRow)},
  { 28, -1, sizeof(::escposService::PrintElementsRequest)},
  { 35, -1, sizeof(::escposService::PrintElementsResponse)},
  { 40, 47, sizeof(::escposService::PrintHtmlTemplateRequest_ParamsEntry_DoNotUse)},
  { 49, -1, sizeof(::escposService::PrintHtmlTemplateRequest)},
  { 58, -1, sizeof(::escposService::PrintHtmlTemplateResponse)},
  { 63, -1, sizeof(::escposService::HtmlTemplate)},
  { 71, -1, sizeof(::escposService::NewHtmlTemplateRequest)},
  { 77, -1, sizeof(::escposService::NewHtmlTemplateResponse)},
  { 83, -1, sizeof(::escposService::ListHtmlTemplatesRequest)},
  { 88, -1, sizeof(::escposService::ListHtmlTemplatesResponse)},
  { 94, -1, sizeof(::escposService::GetHtmlTemplateRequest)},
  { 100, -1, sizeof(::escposService::GetHtmlTemplateResponse)},
  { 106, -1, sizeof(::escposService::UpdateHtmlTemplateRequest)},
  { 112, -1, sizeof(::escposService::UpdateHtmlTemplateResponse)},
  { 118, -1, sizeof(::escposService::DeleteHtmlTemplatesRequest)},
  { 124, -1, sizeof(::escposService::DeleteHtmlTemplatesResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::escposService::_PrintRawRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::escposService::_PrintRawResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::escposService::_Element_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::escposService::_ElementRow_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::escposService::_PrintElementsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::escposService::_PrintElementsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::escposService::_PrintHtmlTemplateRequest_ParamsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::escposService::_PrintHtmlTemplateRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::escposService::_PrintHtmlTemplateResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::escposService::_HtmlTemplate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::escposService::_NewHtmlTemplateRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::escposService::_NewHtmlTemplateResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::escposService::_ListHtmlTemplatesRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::escposService::_ListHtmlTemplatesResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::escposService::_GetHtmlTemplateRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::escposService::_GetHtmlTemplateResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::escposService::_UpdateHtmlTemplateRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::escposService::_UpdateHtmlTemplateResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::escposService::_DeleteHtmlTemplatesRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::escposService::_DeleteHtmlTemplatesResponse_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_escpos_2eproto = {
  {}, AddDescriptors_escpos_2eproto, "escpos.proto", schemas,
  file_default_instances, TableStruct_escpos_2eproto::offsets,
  file_level_metadata_escpos_2eproto, 20, file_level_enum_descriptors_escpos_2eproto, file_level_service_descriptors_escpos_2eproto,
};

const char descriptor_table_protodef_escpos_2eproto[] =
  "\n\014escpos.proto\022\rescposService\032\034google/ap"
  "i/annotations.proto\"\036\n\017PrintRawRequest\022\013"
  "\n\003raw\030\001 \001(\014\"\022\n\020PrintRawResponse\"\247\001\n\007Elem"
  "ent\022)\n\005etype\030\001 \001(\0162\032.escposService.Eleme"
  "ntType\022\024\n\014content_text\030\002 \001(\t\022\025\n\rcontent_"
  "image\030\003 \001(\014\022\032\n\022image_content_type\030\005 \001(\t\022"
  "(\n\004size\030\004 \001(\0162\032.escposService.ElementSiz"
  "e\"b\n\nElementRow\022(\n\010elements\030\001 \003(\0132\026.escp"
  "osService.Element\022*\n\005align\030\002 \001(\0162\033.escpo"
  "sService.ElementAlign\"T\n\024PrintElementsRe"
  "quest\022/\n\014element_rows\030\001 \003(\0132\031.escposServ"
  "ice.ElementRow\022\013\n\003cut\030\002 \001(\010\"\027\n\025PrintElem"
  "entsResponse\"\265\001\n\030PrintHtmlTemplateReques"
  "t\022\n\n\002id\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022C\n\006params\030\003 "
  "\003(\01323.escposService.PrintHtmlTemplateReq"
  "uest.ParamsEntry\022\013\n\003cut\030\004 \001(\010\032-\n\013ParamsE"
  "ntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\033\n\031"
  "PrintHtmlTemplateResponse\"9\n\014HtmlTemplat"
  "e\022\n\n\002id\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022\017\n\007content\030\003"
  " \001(\t\"L\n\026NewHtmlTemplateRequest\0222\n\rhtml_t"
  "emplate\030\001 \001(\0132\033.escposService.HtmlTempla"
  "te\"M\n\027NewHtmlTemplateResponse\0222\n\rhtml_te"
  "mplate\030\001 \001(\0132\033.escposService.HtmlTemplat"
  "e\"\032\n\030ListHtmlTemplatesRequest\"P\n\031ListHtm"
  "lTemplatesResponse\0223\n\016html_templates\030\001 \003"
  "(\0132\033.escposService.HtmlTemplate\"$\n\026GetHt"
  "mlTemplateRequest\022\n\n\002id\030\001 \001(\t\"M\n\027GetHtml"
  "TemplateResponse\0222\n\rhtml_template\030\001 \001(\0132"
  "\033.escposService.HtmlTemplate\"O\n\031UpdateHt"
  "mlTemplateRequest\0222\n\rhtml_template\030\001 \001(\013"
  "2\033.escposService.HtmlTemplate\"P\n\032UpdateH"
  "tmlTemplateResponse\0222\n\rhtml_template\030\001 \001"
  "(\0132\033.escposService.HtmlTemplate\"7\n\032Delet"
  "eHtmlTemplatesRequest\022\031\n\021html_templates_"
  "id\030\001 \003(\t\"\035\n\033DeleteHtmlTemplatesResponse*"
  "\"\n\013ElementType\022\010\n\004TEXT\020\000\022\t\n\005IMAGE\020\001*F\n\013E"
  "lementSize\022\013\n\007DEFAULT\020\000\022\t\n\005SMALL\020\001\022\n\n\006NO"
  "RMAL\020\002\022\t\n\005LARGE\020\003\022\010\n\004HUGE\020\004*/\n\014ElementAl"
  "ign\022\010\n\004LEFT\020\000\022\n\n\006CENTER\020\001\022\t\n\005RIGHT\020\0022\234\t\n"
  "\rEscPosService\022q\n\010PrintRaw\022\036.escposServi"
  "ce.PrintRawRequest\032\037.escposService.Print"
  "RawResponse\"$\202\323\344\223\002\036\"\031/api/v2/esc_pos/pri"
  "nt_raw:\001*\022\205\001\n\rPrintElements\022#.escposServ"
  "ice.PrintElementsRequest\032$.escposService"
  ".PrintElementsResponse\")\202\323\344\223\002#\"\036/api/v2/"
  "esc_pos/print_elements:\001*\022\226\001\n\021PrintHtmlT"
  "emplate\022\'.escposService.PrintHtmlTemplat"
  "eRequest\032(.escposService.PrintHtmlTempla"
  "teResponse\".\202\323\344\223\002(\"#/api/v2/esc_pos/prin"
  "t_html_template:\001*\022\216\001\n\017NewHtmlTemplate\022%"
  ".escposService.NewHtmlTemplateRequest\032&."
  "escposService.NewHtmlTemplateResponse\",\202"
  "\323\344\223\002&\"!/api/v2/esc_pos/new_html_template"
  ":\001*\022\226\001\n\021ListHtmlTemplates\022\'.escposServic"
  "e.ListHtmlTemplatesRequest\032(.escposServi"
  "ce.ListHtmlTemplatesResponse\".\202\323\344\223\002(\"#/a"
  "pi/v2/esc_pos/list_html_templates:\001*\022\216\001\n"
  "\017GetHtmlTemplate\022%.escposService.GetHtml"
  "TemplateRequest\032&.escposService.GetHtmlT"
  "emplateResponse\",\202\323\344\223\002&\"!/api/v2/esc_pos"
  "/get_html_template:\001*\022\232\001\n\022UpdateHtmlTemp"
  "late\022(.escposService.UpdateHtmlTemplateR"
  "equest\032).escposService.UpdateHtmlTemplat"
  "eResponse\"/\202\323\344\223\002)\"$/api/v2/esc_pos/updat"
  "e_html_template:\001*\022\236\001\n\023DeleteHtmlTemplat"
  "es\022).escposService.DeleteHtmlTemplatesRe"
  "quest\032*.escposService.DeleteHtmlTemplate"
  "sResponse\"0\202\323\344\223\002*\"%/api/v2/esc_pos/delet"
  "e_html_templates:\001*b\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_escpos_2eproto = {
  false, InitDefaults_escpos_2eproto, 
  descriptor_table_protodef_escpos_2eproto,
  "escpos.proto", &assign_descriptors_table_escpos_2eproto, 2747,
};

void AddDescriptors_escpos_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
    ::AddDescriptors_google_2fapi_2fannotations_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_escpos_2eproto, deps, 1);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_escpos_2eproto = []() { AddDescriptors_escpos_2eproto(); return true; }();
namespace escposService {
const ::google::protobuf::EnumDescriptor* ElementType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_escpos_2eproto);
  return file_level_enum_descriptors_escpos_2eproto[0];
}
bool ElementType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ElementSize_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_escpos_2eproto);
  return file_level_enum_descriptors_escpos_2eproto[1];
}
bool ElementSize_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ElementAlign_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_escpos_2eproto);
  return file_level_enum_descriptors_escpos_2eproto[2];
}
bool ElementAlign_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void PrintRawRequest::InitAsDefaultInstance() {
}
class PrintRawRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PrintRawRequest::kRawFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PrintRawRequest::PrintRawRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:escposService.PrintRawRequest)
}
PrintRawRequest::PrintRawRequest(const PrintRawRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  raw_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.raw().size() > 0) {
    raw_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.raw_);
  }
  // @@protoc_insertion_point(copy_constructor:escposService.PrintRawRequest)
}

void PrintRawRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PrintRawRequest_escpos_2eproto.base);
  raw_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PrintRawRequest::~PrintRawRequest() {
  // @@protoc_insertion_point(destructor:escposService.PrintRawRequest)
  SharedDtor();
}

void PrintRawRequest::SharedDtor() {
  raw_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PrintRawRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PrintRawRequest& PrintRawRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PrintRawRequest_escpos_2eproto.base);
  return *internal_default_instance();
}


void PrintRawRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:escposService.PrintRawRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  raw_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PrintRawRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PrintRawRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bytes raw = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_raw();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PrintRawRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:escposService.PrintRawRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes raw = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_raw()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:escposService.PrintRawRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:escposService.PrintRawRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PrintRawRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:escposService.PrintRawRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes raw = 1;
  if (this->raw().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->raw(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:escposService.PrintRawRequest)
}

::google::protobuf::uint8* PrintRawRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:escposService.PrintRawRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes raw = 1;
  if (this->raw().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->raw(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:escposService.PrintRawRequest)
  return target;
}

size_t PrintRawRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:escposService.PrintRawRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes raw = 1;
  if (this->raw().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->raw());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrintRawRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:escposService.PrintRawRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PrintRawRequest* source =
      ::google::protobuf::DynamicCastToGenerated<PrintRawRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:escposService.PrintRawRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:escposService.PrintRawRequest)
    MergeFrom(*source);
  }
}

void PrintRawRequest::MergeFrom(const PrintRawRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:escposService.PrintRawRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.raw().size() > 0) {

    raw_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.raw_);
  }
}

void PrintRawRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:escposService.PrintRawRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrintRawRequest::CopyFrom(const PrintRawRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:escposService.PrintRawRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrintRawRequest::IsInitialized() const {
  return true;
}

void PrintRawRequest::Swap(PrintRawRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PrintRawRequest::InternalSwap(PrintRawRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  raw_.Swap(&other->raw_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata PrintRawRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_escpos_2eproto);
  return ::file_level_metadata_escpos_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PrintRawResponse::InitAsDefaultInstance() {
}
class PrintRawResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PrintRawResponse::PrintRawResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:escposService.PrintRawResponse)
}
PrintRawResponse::PrintRawResponse(const PrintRawResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:escposService.PrintRawResponse)
}

void PrintRawResponse::SharedCtor() {
}

PrintRawResponse::~PrintRawResponse() {
  // @@protoc_insertion_point(destructor:escposService.PrintRawResponse)
  SharedDtor();
}

void PrintRawResponse::SharedDtor() {
}

void PrintRawResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PrintRawResponse& PrintRawResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PrintRawResponse_escpos_2eproto.base);
  return *internal_default_instance();
}


void PrintRawResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:escposService.PrintRawResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PrintRawResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PrintRawResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PrintRawResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:escposService.PrintRawResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:escposService.PrintRawResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:escposService.PrintRawResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PrintRawResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:escposService.PrintRawResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:escposService.PrintRawResponse)
}

::google::protobuf::uint8* PrintRawResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:escposService.PrintRawResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:escposService.PrintRawResponse)
  return target;
}

size_t PrintRawResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:escposService.PrintRawResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrintRawResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:escposService.PrintRawResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PrintRawResponse* source =
      ::google::protobuf::DynamicCastToGenerated<PrintRawResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:escposService.PrintRawResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:escposService.PrintRawResponse)
    MergeFrom(*source);
  }
}

void PrintRawResponse::MergeFrom(const PrintRawResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:escposService.PrintRawResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PrintRawResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:escposService.PrintRawResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrintRawResponse::CopyFrom(const PrintRawResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:escposService.PrintRawResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrintRawResponse::IsInitialized() const {
  return true;
}

void PrintRawResponse::Swap(PrintRawResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PrintRawResponse::InternalSwap(PrintRawResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PrintRawResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_escpos_2eproto);
  return ::file_level_metadata_escpos_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Element::InitAsDefaultInstance() {
}
class Element::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Element::kEtypeFieldNumber;
const int Element::kContentTextFieldNumber;
const int Element::kContentImageFieldNumber;
const int Element::kImageContentTypeFieldNumber;
const int Element::kSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Element::Element()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:escposService.Element)
}
Element::Element(const Element& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  content_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.content_text().size() > 0) {
    content_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_text_);
  }
  content_image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.content_image().size() > 0) {
    content_image_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_image_);
  }
  image_content_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.image_content_type().size() > 0) {
    image_content_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_content_type_);
  }
  ::memcpy(&etype_, &from.etype_,
    static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&etype_)) + sizeof(size_));
  // @@protoc_insertion_point(copy_constructor:escposService.Element)
}

void Element::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Element_escpos_2eproto.base);
  content_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_content_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&etype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&etype_)) + sizeof(size_));
}

Element::~Element() {
  // @@protoc_insertion_point(destructor:escposService.Element)
  SharedDtor();
}

void Element::SharedDtor() {
  content_text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_image_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_content_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Element::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Element& Element::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Element_escpos_2eproto.base);
  return *internal_default_instance();
}


void Element::Clear() {
// @@protoc_insertion_point(message_clear_start:escposService.Element)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  content_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_image_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_content_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&etype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&etype_)) + sizeof(size_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Element::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Element*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .escposService.ElementType etype = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_etype(static_cast<::escposService::ElementType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string content_text = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("escposService.Element.content_text");
        object = msg->mutable_content_text();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bytes content_image = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_content_image();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .escposService.ElementSize size = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_size(static_cast<::escposService::ElementSize>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string image_content_type = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("escposService.Element.image_content_type");
        object = msg->mutable_image_content_type();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Element::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:escposService.Element)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .escposService.ElementType etype = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_etype(static_cast< ::escposService::ElementType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string content_text = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content_text()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->content_text().data(), static_cast<int>(this->content_text().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "escposService.Element.content_text"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes content_image = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content_image()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .escposService.ElementSize size = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_size(static_cast< ::escposService::ElementSize >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string image_content_type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image_content_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->image_content_type().data(), static_cast<int>(this->image_content_type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "escposService.Element.image_content_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:escposService.Element)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:escposService.Element)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Element::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:escposService.Element)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .escposService.ElementType etype = 1;
  if (this->etype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->etype(), output);
  }

  // string content_text = 2;
  if (this->content_text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->content_text().data(), static_cast<int>(this->content_text().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "escposService.Element.content_text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->content_text(), output);
  }

  // bytes content_image = 3;
  if (this->content_image().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->content_image(), output);
  }

  // .escposService.ElementSize size = 4;
  if (this->size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->size(), output);
  }

  // string image_content_type = 5;
  if (this->image_content_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->image_content_type().data(), static_cast<int>(this->image_content_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "escposService.Element.image_content_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->image_content_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:escposService.Element)
}

::google::protobuf::uint8* Element::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:escposService.Element)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .escposService.ElementType etype = 1;
  if (this->etype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->etype(), target);
  }

  // string content_text = 2;
  if (this->content_text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->content_text().data(), static_cast<int>(this->content_text().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "escposService.Element.content_text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->content_text(), target);
  }

  // bytes content_image = 3;
  if (this->content_image().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->content_image(), target);
  }

  // .escposService.ElementSize size = 4;
  if (this->size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->size(), target);
  }

  // string image_content_type = 5;
  if (this->image_content_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->image_content_type().data(), static_cast<int>(this->image_content_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "escposService.Element.image_content_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->image_content_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:escposService.Element)
  return target;
}

size_t Element::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:escposService.Element)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string content_text = 2;
  if (this->content_text().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->content_text());
  }

  // bytes content_image = 3;
  if (this->content_image().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->content_image());
  }

  // string image_content_type = 5;
  if (this->image_content_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->image_content_type());
  }

  // .escposService.ElementType etype = 1;
  if (this->etype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->etype());
  }

  // .escposService.ElementSize size = 4;
  if (this->size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Element::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:escposService.Element)
  GOOGLE_DCHECK_NE(&from, this);
  const Element* source =
      ::google::protobuf::DynamicCastToGenerated<Element>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:escposService.Element)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:escposService.Element)
    MergeFrom(*source);
  }
}

void Element::MergeFrom(const Element& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:escposService.Element)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.content_text().size() > 0) {

    content_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_text_);
  }
  if (from.content_image().size() > 0) {

    content_image_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_image_);
  }
  if (from.image_content_type().size() > 0) {

    image_content_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_content_type_);
  }
  if (from.etype() != 0) {
    set_etype(from.etype());
  }
  if (from.size() != 0) {
    set_size(from.size());
  }
}

void Element::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:escposService.Element)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Element::CopyFrom(const Element& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:escposService.Element)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Element::IsInitialized() const {
  return true;
}

void Element::Swap(Element* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Element::InternalSwap(Element* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  content_text_.Swap(&other->content_text_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  content_image_.Swap(&other->content_image_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  image_content_type_.Swap(&other->image_content_type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(etype_, other->etype_);
  swap(size_, other->size_);
}

::google::protobuf::Metadata Element::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_escpos_2eproto);
  return ::file_level_metadata_escpos_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ElementRow::InitAsDefaultInstance() {
}
class ElementRow::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ElementRow::kElementsFieldNumber;
const int ElementRow::kAlignFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ElementRow::ElementRow()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:escposService.ElementRow)
}
ElementRow::ElementRow(const ElementRow& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      elements_(from.elements_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  align_ = from.align_;
  // @@protoc_insertion_point(copy_constructor:escposService.ElementRow)
}

void ElementRow::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ElementRow_escpos_2eproto.base);
  align_ = 0;
}

ElementRow::~ElementRow() {
  // @@protoc_insertion_point(destructor:escposService.ElementRow)
  SharedDtor();
}

void ElementRow::SharedDtor() {
}

void ElementRow::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ElementRow& ElementRow::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ElementRow_escpos_2eproto.base);
  return *internal_default_instance();
}


void ElementRow::Clear() {
// @@protoc_insertion_point(message_clear_start:escposService.ElementRow)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  elements_.Clear();
  align_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ElementRow::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ElementRow*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .escposService.Element elements = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::escposService::Element::_InternalParse;
          object = msg->add_elements();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // .escposService.ElementAlign align = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_align(static_cast<::escposService::ElementAlign>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ElementRow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:escposService.ElementRow)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .escposService.Element elements = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_elements()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .escposService.ElementAlign align = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_align(static_cast< ::escposService::ElementAlign >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:escposService.ElementRow)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:escposService.ElementRow)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ElementRow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:escposService.ElementRow)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .escposService.Element elements = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->elements_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->elements(static_cast<int>(i)),
      output);
  }

  // .escposService.ElementAlign align = 2;
  if (this->align() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->align(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:escposService.ElementRow)
}

::google::protobuf::uint8* ElementRow::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:escposService.ElementRow)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .escposService.Element elements = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->elements_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->elements(static_cast<int>(i)), target);
  }

  // .escposService.ElementAlign align = 2;
  if (this->align() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->align(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:escposService.ElementRow)
  return target;
}

size_t ElementRow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:escposService.ElementRow)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .escposService.Element elements = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->elements_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->elements(static_cast<int>(i)));
    }
  }

  // .escposService.ElementAlign align = 2;
  if (this->align() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->align());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ElementRow::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:escposService.ElementRow)
  GOOGLE_DCHECK_NE(&from, this);
  const ElementRow* source =
      ::google::protobuf::DynamicCastToGenerated<ElementRow>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:escposService.ElementRow)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:escposService.ElementRow)
    MergeFrom(*source);
  }
}

void ElementRow::MergeFrom(const ElementRow& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:escposService.ElementRow)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  elements_.MergeFrom(from.elements_);
  if (from.align() != 0) {
    set_align(from.align());
  }
}

void ElementRow::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:escposService.ElementRow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ElementRow::CopyFrom(const ElementRow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:escposService.ElementRow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ElementRow::IsInitialized() const {
  return true;
}

void ElementRow::Swap(ElementRow* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ElementRow::InternalSwap(ElementRow* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&elements_)->InternalSwap(CastToBase(&other->elements_));
  swap(align_, other->align_);
}

::google::protobuf::Metadata ElementRow::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_escpos_2eproto);
  return ::file_level_metadata_escpos_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PrintElementsRequest::InitAsDefaultInstance() {
}
class PrintElementsRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PrintElementsRequest::kElementRowsFieldNumber;
const int PrintElementsRequest::kCutFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PrintElementsRequest::PrintElementsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:escposService.PrintElementsRequest)
}
PrintElementsRequest::PrintElementsRequest(const PrintElementsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      element_rows_(from.element_rows_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cut_ = from.cut_;
  // @@protoc_insertion_point(copy_constructor:escposService.PrintElementsRequest)
}

void PrintElementsRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PrintElementsRequest_escpos_2eproto.base);
  cut_ = false;
}

PrintElementsRequest::~PrintElementsRequest() {
  // @@protoc_insertion_point(destructor:escposService.PrintElementsRequest)
  SharedDtor();
}

void PrintElementsRequest::SharedDtor() {
}

void PrintElementsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PrintElementsRequest& PrintElementsRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PrintElementsRequest_escpos_2eproto.base);
  return *internal_default_instance();
}


void PrintElementsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:escposService.PrintElementsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  element_rows_.Clear();
  cut_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PrintElementsRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PrintElementsRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .escposService.ElementRow element_rows = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::escposService::ElementRow::_InternalParse;
          object = msg->add_element_rows();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // bool cut = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_cut(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PrintElementsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:escposService.PrintElementsRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .escposService.ElementRow element_rows = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_element_rows()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool cut = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cut_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:escposService.PrintElementsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:escposService.PrintElementsRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PrintElementsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:escposService.PrintElementsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .escposService.ElementRow element_rows = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->element_rows_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->element_rows(static_cast<int>(i)),
      output);
  }

  // bool cut = 2;
  if (this->cut() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->cut(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:escposService.PrintElementsRequest)
}

::google::protobuf::uint8* PrintElementsRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:escposService.PrintElementsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .escposService.ElementRow element_rows = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->element_rows_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->element_rows(static_cast<int>(i)), target);
  }

  // bool cut = 2;
  if (this->cut() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->cut(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:escposService.PrintElementsRequest)
  return target;
}

size_t PrintElementsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:escposService.PrintElementsRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .escposService.ElementRow element_rows = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->element_rows_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->element_rows(static_cast<int>(i)));
    }
  }

  // bool cut = 2;
  if (this->cut() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrintElementsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:escposService.PrintElementsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PrintElementsRequest* source =
      ::google::protobuf::DynamicCastToGenerated<PrintElementsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:escposService.PrintElementsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:escposService.PrintElementsRequest)
    MergeFrom(*source);
  }
}

void PrintElementsRequest::MergeFrom(const PrintElementsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:escposService.PrintElementsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  element_rows_.MergeFrom(from.element_rows_);
  if (from.cut() != 0) {
    set_cut(from.cut());
  }
}

void PrintElementsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:escposService.PrintElementsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrintElementsRequest::CopyFrom(const PrintElementsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:escposService.PrintElementsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrintElementsRequest::IsInitialized() const {
  return true;
}

void PrintElementsRequest::Swap(PrintElementsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PrintElementsRequest::InternalSwap(PrintElementsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&element_rows_)->InternalSwap(CastToBase(&other->element_rows_));
  swap(cut_, other->cut_);
}

::google::protobuf::Metadata PrintElementsRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_escpos_2eproto);
  return ::file_level_metadata_escpos_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PrintElementsResponse::InitAsDefaultInstance() {
}
class PrintElementsResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PrintElementsResponse::PrintElementsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:escposService.PrintElementsResponse)
}
PrintElementsResponse::PrintElementsResponse(const PrintElementsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:escposService.PrintElementsResponse)
}

void PrintElementsResponse::SharedCtor() {
}

PrintElementsResponse::~PrintElementsResponse() {
  // @@protoc_insertion_point(destructor:escposService.PrintElementsResponse)
  SharedDtor();
}

void PrintElementsResponse::SharedDtor() {
}

void PrintElementsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PrintElementsResponse& PrintElementsResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PrintElementsResponse_escpos_2eproto.base);
  return *internal_default_instance();
}


void PrintElementsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:escposService.PrintElementsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PrintElementsResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PrintElementsResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PrintElementsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:escposService.PrintElementsResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:escposService.PrintElementsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:escposService.PrintElementsResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PrintElementsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:escposService.PrintElementsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:escposService.PrintElementsResponse)
}

::google::protobuf::uint8* PrintElementsResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:escposService.PrintElementsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:escposService.PrintElementsResponse)
  return target;
}

size_t PrintElementsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:escposService.PrintElementsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrintElementsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:escposService.PrintElementsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PrintElementsResponse* source =
      ::google::protobuf::DynamicCastToGenerated<PrintElementsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:escposService.PrintElementsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:escposService.PrintElementsResponse)
    MergeFrom(*source);
  }
}

void PrintElementsResponse::MergeFrom(const PrintElementsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:escposService.PrintElementsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PrintElementsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:escposService.PrintElementsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrintElementsResponse::CopyFrom(const PrintElementsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:escposService.PrintElementsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrintElementsResponse::IsInitialized() const {
  return true;
}

void PrintElementsResponse::Swap(PrintElementsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PrintElementsResponse::InternalSwap(PrintElementsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PrintElementsResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_escpos_2eproto);
  return ::file_level_metadata_escpos_2eproto[kIndexInFileMessages];
}


// ===================================================================

PrintHtmlTemplateRequest_ParamsEntry_DoNotUse::PrintHtmlTemplateRequest_ParamsEntry_DoNotUse() {}
PrintHtmlTemplateRequest_ParamsEntry_DoNotUse::PrintHtmlTemplateRequest_ParamsEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void PrintHtmlTemplateRequest_ParamsEntry_DoNotUse::MergeFrom(const PrintHtmlTemplateRequest_ParamsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata PrintHtmlTemplateRequest_ParamsEntry_DoNotUse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_escpos_2eproto);
  return ::file_level_metadata_escpos_2eproto[6];
}
void PrintHtmlTemplateRequest_ParamsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PrintHtmlTemplateRequest_ParamsEntry_DoNotUse::_ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx) {
  using MF = ::google::protobuf::internal::MapField<
      PrintHtmlTemplateRequest_ParamsEntry_DoNotUse, EntryKeyType, EntryValueType,
      kEntryKeyFieldType, kEntryValueFieldType,
      kEntryDefaultEnumValue>;
  auto mf = static_cast<MF*>(object);
  Parser<MF, ::google::protobuf::Map<EntryKeyType, EntryValueType>> parser(mf);
#define DO_(x) if (!(x)) return false
  DO_(parser.ParseMap(begin, end));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.key().data(), static_cast<int>(parser.key().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "escposService.PrintHtmlTemplateRequest.ParamsEntry.key"));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.value().data(), static_cast<int>(parser.value().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "escposService.PrintHtmlTemplateRequest.ParamsEntry.value"));
#undef DO_
  return true;
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER


// ===================================================================

void PrintHtmlTemplateRequest::InitAsDefaultInstance() {
}
class PrintHtmlTemplateRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PrintHtmlTemplateRequest::kIdFieldNumber;
const int PrintHtmlTemplateRequest::kNameFieldNumber;
const int PrintHtmlTemplateRequest::kParamsFieldNumber;
const int PrintHtmlTemplateRequest::kCutFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PrintHtmlTemplateRequest::PrintHtmlTemplateRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:escposService.PrintHtmlTemplateRequest)
}
PrintHtmlTemplateRequest::PrintHtmlTemplateRequest(const PrintHtmlTemplateRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  params_.MergeFrom(from.params_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  cut_ = from.cut_;
  // @@protoc_insertion_point(copy_constructor:escposService.PrintHtmlTemplateRequest)
}

void PrintHtmlTemplateRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PrintHtmlTemplateRequest_escpos_2eproto.base);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cut_ = false;
}

PrintHtmlTemplateRequest::~PrintHtmlTemplateRequest() {
  // @@protoc_insertion_point(destructor:escposService.PrintHtmlTemplateRequest)
  SharedDtor();
}

void PrintHtmlTemplateRequest::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PrintHtmlTemplateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PrintHtmlTemplateRequest& PrintHtmlTemplateRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PrintHtmlTemplateRequest_escpos_2eproto.base);
  return *internal_default_instance();
}


void PrintHtmlTemplateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:escposService.PrintHtmlTemplateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  params_.Clear();
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cut_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PrintHtmlTemplateRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PrintHtmlTemplateRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("escposService.PrintHtmlTemplateRequest.id");
        object = msg->mutable_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("escposService.PrintHtmlTemplateRequest.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // map<string, string> params = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::SlowMapEntryParser;
          auto parse_map = ::escposService::PrintHtmlTemplateRequest_ParamsEntry_DoNotUse::_ParseMap;
          ctx->extra_parse_data().payload.clear();
          ctx->extra_parse_data().parse_map = parse_map;
          object = &msg->params_;
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(parse_map(ptr, newend, object, ctx));
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      // bool cut = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_cut(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PrintHtmlTemplateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:escposService.PrintHtmlTemplateRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "escposService.PrintHtmlTemplateRequest.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "escposService.PrintHtmlTemplateRequest.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> params = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          PrintHtmlTemplateRequest_ParamsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              PrintHtmlTemplateRequest_ParamsEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&params_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "escposService.PrintHtmlTemplateRequest.ParamsEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "escposService.PrintHtmlTemplateRequest.ParamsEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool cut = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cut_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:escposService.PrintHtmlTemplateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:escposService.PrintHtmlTemplateRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PrintHtmlTemplateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:escposService.PrintHtmlTemplateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "escposService.PrintHtmlTemplateRequest.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "escposService.PrintHtmlTemplateRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // map<string, string> params = 3;
  if (!this->params().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "escposService.PrintHtmlTemplateRequest.ParamsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "escposService.PrintHtmlTemplateRequest.ParamsEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->params().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->params().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->params().begin();
          it != this->params().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<PrintHtmlTemplateRequest_ParamsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(params_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(3, *entry, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<PrintHtmlTemplateRequest_ParamsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->params().begin();
          it != this->params().end(); ++it) {
        entry.reset(params_.NewEntryWrapper(it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(3, *entry, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // bool cut = 4;
  if (this->cut() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->cut(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:escposService.PrintHtmlTemplateRequest)
}

::google::protobuf::uint8* PrintHtmlTemplateRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:escposService.PrintHtmlTemplateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "escposService.PrintHtmlTemplateRequest.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "escposService.PrintHtmlTemplateRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // map<string, string> params = 3;
  if (!this->params().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "escposService.PrintHtmlTemplateRequest.ParamsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "escposService.PrintHtmlTemplateRequest.ParamsEntry.value");
      }
    };

    if (false &&
        this->params().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->params().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->params().begin();
          it != this->params().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<PrintHtmlTemplateRequest_ParamsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(params_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(3, *entry, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<PrintHtmlTemplateRequest_ParamsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->params().begin();
          it != this->params().end(); ++it) {
        entry.reset(params_.NewEntryWrapper(it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(3, *entry, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // bool cut = 4;
  if (this->cut() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->cut(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:escposService.PrintHtmlTemplateRequest)
  return target;
}

size_t PrintHtmlTemplateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:escposService.PrintHtmlTemplateRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> params = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->params_size());
  {
    ::std::unique_ptr<PrintHtmlTemplateRequest_ParamsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->params().begin();
        it != this->params().end(); ++it) {
      entry.reset(params_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // bool cut = 4;
  if (this->cut() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrintHtmlTemplateRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:escposService.PrintHtmlTemplateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PrintHtmlTemplateRequest* source =
      ::google::protobuf::DynamicCastToGenerated<PrintHtmlTemplateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:escposService.PrintHtmlTemplateRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:escposService.PrintHtmlTemplateRequest)
    MergeFrom(*source);
  }
}

void PrintHtmlTemplateRequest::MergeFrom(const PrintHtmlTemplateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:escposService.PrintHtmlTemplateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  params_.MergeFrom(from.params_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.cut() != 0) {
    set_cut(from.cut());
  }
}

void PrintHtmlTemplateRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:escposService.PrintHtmlTemplateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrintHtmlTemplateRequest::CopyFrom(const PrintHtmlTemplateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:escposService.PrintHtmlTemplateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrintHtmlTemplateRequest::IsInitialized() const {
  return true;
}

void PrintHtmlTemplateRequest::Swap(PrintHtmlTemplateRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PrintHtmlTemplateRequest::InternalSwap(PrintHtmlTemplateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  params_.Swap(&other->params_);
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(cut_, other->cut_);
}

::google::protobuf::Metadata PrintHtmlTemplateRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_escpos_2eproto);
  return ::file_level_metadata_escpos_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PrintHtmlTemplateResponse::InitAsDefaultInstance() {
}
class PrintHtmlTemplateResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PrintHtmlTemplateResponse::PrintHtmlTemplateResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:escposService.PrintHtmlTemplateResponse)
}
PrintHtmlTemplateResponse::PrintHtmlTemplateResponse(const PrintHtmlTemplateResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:escposService.PrintHtmlTemplateResponse)
}

void PrintHtmlTemplateResponse::SharedCtor() {
}

PrintHtmlTemplateResponse::~PrintHtmlTemplateResponse() {
  // @@protoc_insertion_point(destructor:escposService.PrintHtmlTemplateResponse)
  SharedDtor();
}

void PrintHtmlTemplateResponse::SharedDtor() {
}

void PrintHtmlTemplateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PrintHtmlTemplateResponse& PrintHtmlTemplateResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PrintHtmlTemplateResponse_escpos_2eproto.base);
  return *internal_default_instance();
}


void PrintHtmlTemplateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:escposService.PrintHtmlTemplateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PrintHtmlTemplateResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PrintHtmlTemplateResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PrintHtmlTemplateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:escposService.PrintHtmlTemplateResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:escposService.PrintHtmlTemplateResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:escposService.PrintHtmlTemplateResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PrintHtmlTemplateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:escposService.PrintHtmlTemplateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:escposService.PrintHtmlTemplateResponse)
}

::google::protobuf::uint8* PrintHtmlTemplateResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:escposService.PrintHtmlTemplateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:escposService.PrintHtmlTemplateResponse)
  return target;
}

size_t PrintHtmlTemplateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:escposService.PrintHtmlTemplateResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrintHtmlTemplateResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:escposService.PrintHtmlTemplateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PrintHtmlTemplateResponse* source =
      ::google::protobuf::DynamicCastToGenerated<PrintHtmlTemplateResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:escposService.PrintHtmlTemplateResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:escposService.PrintHtmlTemplateResponse)
    MergeFrom(*source);
  }
}

void PrintHtmlTemplateResponse::MergeFrom(const PrintHtmlTemplateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:escposService.PrintHtmlTemplateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PrintHtmlTemplateResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:escposService.PrintHtmlTemplateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrintHtmlTemplateResponse::CopyFrom(const PrintHtmlTemplateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:escposService.PrintHtmlTemplateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrintHtmlTemplateResponse::IsInitialized() const {
  return true;
}

void PrintHtmlTemplateResponse::Swap(PrintHtmlTemplateResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PrintHtmlTemplateResponse::InternalSwap(PrintHtmlTemplateResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PrintHtmlTemplateResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_escpos_2eproto);
  return ::file_level_metadata_escpos_2eproto[kIndexInFileMessages];
}


// ===================================================================

void HtmlTemplate::InitAsDefaultInstance() {
}
class HtmlTemplate::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HtmlTemplate::kIdFieldNumber;
const int HtmlTemplate::kNameFieldNumber;
const int HtmlTemplate::kContentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HtmlTemplate::HtmlTemplate()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:escposService.HtmlTemplate)
}
HtmlTemplate::HtmlTemplate(const HtmlTemplate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.content().size() > 0) {
    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  // @@protoc_insertion_point(copy_constructor:escposService.HtmlTemplate)
}

void HtmlTemplate::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_HtmlTemplate_escpos_2eproto.base);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

HtmlTemplate::~HtmlTemplate() {
  // @@protoc_insertion_point(destructor:escposService.HtmlTemplate)
  SharedDtor();
}

void HtmlTemplate::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void HtmlTemplate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HtmlTemplate& HtmlTemplate::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_HtmlTemplate_escpos_2eproto.base);
  return *internal_default_instance();
}


void HtmlTemplate::Clear() {
// @@protoc_insertion_point(message_clear_start:escposService.HtmlTemplate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HtmlTemplate::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<HtmlTemplate*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("escposService.HtmlTemplate.id");
        object = msg->mutable_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("escposService.HtmlTemplate.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string content = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("escposService.HtmlTemplate.content");
        object = msg->mutable_content();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HtmlTemplate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:escposService.HtmlTemplate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "escposService.HtmlTemplate.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "escposService.HtmlTemplate.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string content = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->content().data(), static_cast<int>(this->content().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "escposService.HtmlTemplate.content"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:escposService.HtmlTemplate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:escposService.HtmlTemplate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HtmlTemplate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:escposService.HtmlTemplate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "escposService.HtmlTemplate.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "escposService.HtmlTemplate.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // string content = 3;
  if (this->content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->content().data(), static_cast<int>(this->content().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "escposService.HtmlTemplate.content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->content(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:escposService.HtmlTemplate)
}

::google::protobuf::uint8* HtmlTemplate::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:escposService.HtmlTemplate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "escposService.HtmlTemplate.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "escposService.HtmlTemplate.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // string content = 3;
  if (this->content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->content().data(), static_cast<int>(this->content().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "escposService.HtmlTemplate.content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->content(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:escposService.HtmlTemplate)
  return target;
}

size_t HtmlTemplate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:escposService.HtmlTemplate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string content = 3;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->content());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HtmlTemplate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:escposService.HtmlTemplate)
  GOOGLE_DCHECK_NE(&from, this);
  const HtmlTemplate* source =
      ::google::protobuf::DynamicCastToGenerated<HtmlTemplate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:escposService.HtmlTemplate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:escposService.HtmlTemplate)
    MergeFrom(*source);
  }
}

void HtmlTemplate::MergeFrom(const HtmlTemplate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:escposService.HtmlTemplate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.content().size() > 0) {

    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
}

void HtmlTemplate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:escposService.HtmlTemplate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HtmlTemplate::CopyFrom(const HtmlTemplate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:escposService.HtmlTemplate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HtmlTemplate::IsInitialized() const {
  return true;
}

void HtmlTemplate::Swap(HtmlTemplate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HtmlTemplate::InternalSwap(HtmlTemplate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  content_.Swap(&other->content_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata HtmlTemplate::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_escpos_2eproto);
  return ::file_level_metadata_escpos_2eproto[kIndexInFileMessages];
}


// ===================================================================

void NewHtmlTemplateRequest::InitAsDefaultInstance() {
  ::escposService::_NewHtmlTemplateRequest_default_instance_._instance.get_mutable()->html_template_ = const_cast< ::escposService::HtmlTemplate*>(
      ::escposService::HtmlTemplate::internal_default_instance());
}
class NewHtmlTemplateRequest::HasBitSetters {
 public:
  static const ::escposService::HtmlTemplate& html_template(const NewHtmlTemplateRequest* msg);
};

const ::escposService::HtmlTemplate&
NewHtmlTemplateRequest::HasBitSetters::html_template(const NewHtmlTemplateRequest* msg) {
  return *msg->html_template_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NewHtmlTemplateRequest::kHtmlTemplateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NewHtmlTemplateRequest::NewHtmlTemplateRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:escposService.NewHtmlTemplateRequest)
}
NewHtmlTemplateRequest::NewHtmlTemplateRequest(const NewHtmlTemplateRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_html_template()) {
    html_template_ = new ::escposService::HtmlTemplate(*from.html_template_);
  } else {
    html_template_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:escposService.NewHtmlTemplateRequest)
}

void NewHtmlTemplateRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_NewHtmlTemplateRequest_escpos_2eproto.base);
  html_template_ = nullptr;
}

NewHtmlTemplateRequest::~NewHtmlTemplateRequest() {
  // @@protoc_insertion_point(destructor:escposService.NewHtmlTemplateRequest)
  SharedDtor();
}

void NewHtmlTemplateRequest::SharedDtor() {
  if (this != internal_default_instance()) delete html_template_;
}

void NewHtmlTemplateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NewHtmlTemplateRequest& NewHtmlTemplateRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_NewHtmlTemplateRequest_escpos_2eproto.base);
  return *internal_default_instance();
}


void NewHtmlTemplateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:escposService.NewHtmlTemplateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && html_template_ != nullptr) {
    delete html_template_;
  }
  html_template_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NewHtmlTemplateRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<NewHtmlTemplateRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .escposService.HtmlTemplate html_template = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::escposService::HtmlTemplate::_InternalParse;
        object = msg->mutable_html_template();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NewHtmlTemplateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:escposService.NewHtmlTemplateRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .escposService.HtmlTemplate html_template = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_html_template()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:escposService.NewHtmlTemplateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:escposService.NewHtmlTemplateRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NewHtmlTemplateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:escposService.NewHtmlTemplateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .escposService.HtmlTemplate html_template = 1;
  if (this->has_html_template()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::html_template(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:escposService.NewHtmlTemplateRequest)
}

::google::protobuf::uint8* NewHtmlTemplateRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:escposService.NewHtmlTemplateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .escposService.HtmlTemplate html_template = 1;
  if (this->has_html_template()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::html_template(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:escposService.NewHtmlTemplateRequest)
  return target;
}

size_t NewHtmlTemplateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:escposService.NewHtmlTemplateRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .escposService.HtmlTemplate html_template = 1;
  if (this->has_html_template()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *html_template_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NewHtmlTemplateRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:escposService.NewHtmlTemplateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const NewHtmlTemplateRequest* source =
      ::google::protobuf::DynamicCastToGenerated<NewHtmlTemplateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:escposService.NewHtmlTemplateRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:escposService.NewHtmlTemplateRequest)
    MergeFrom(*source);
  }
}

void NewHtmlTemplateRequest::MergeFrom(const NewHtmlTemplateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:escposService.NewHtmlTemplateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_html_template()) {
    mutable_html_template()->::escposService::HtmlTemplate::MergeFrom(from.html_template());
  }
}

void NewHtmlTemplateRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:escposService.NewHtmlTemplateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewHtmlTemplateRequest::CopyFrom(const NewHtmlTemplateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:escposService.NewHtmlTemplateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewHtmlTemplateRequest::IsInitialized() const {
  return true;
}

void NewHtmlTemplateRequest::Swap(NewHtmlTemplateRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NewHtmlTemplateRequest::InternalSwap(NewHtmlTemplateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(html_template_, other->html_template_);
}

::google::protobuf::Metadata NewHtmlTemplateRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_escpos_2eproto);
  return ::file_level_metadata_escpos_2eproto[kIndexInFileMessages];
}


// ===================================================================

void NewHtmlTemplateResponse::InitAsDefaultInstance() {
  ::escposService::_NewHtmlTemplateResponse_default_instance_._instance.get_mutable()->html_template_ = const_cast< ::escposService::HtmlTemplate*>(
      ::escposService::HtmlTemplate::internal_default_instance());
}
class NewHtmlTemplateResponse::HasBitSetters {
 public:
  static const ::escposService::HtmlTemplate& html_template(const NewHtmlTemplateResponse* msg);
};

const ::escposService::HtmlTemplate&
NewHtmlTemplateResponse::HasBitSetters::html_template(const NewHtmlTemplateResponse* msg) {
  return *msg->html_template_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NewHtmlTemplateResponse::kHtmlTemplateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NewHtmlTemplateResponse::NewHtmlTemplateResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:escposService.NewHtmlTemplateResponse)
}
NewHtmlTemplateResponse::NewHtmlTemplateResponse(const NewHtmlTemplateResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_html_template()) {
    html_template_ = new ::escposService::HtmlTemplate(*from.html_template_);
  } else {
    html_template_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:escposService.NewHtmlTemplateResponse)
}

void NewHtmlTemplateResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_NewHtmlTemplateResponse_escpos_2eproto.base);
  html_template_ = nullptr;
}

NewHtmlTemplateResponse::~NewHtmlTemplateResponse() {
  // @@protoc_insertion_point(destructor:escposService.NewHtmlTemplateResponse)
  SharedDtor();
}

void NewHtmlTemplateResponse::SharedDtor() {
  if (this != internal_default_instance()) delete html_template_;
}

void NewHtmlTemplateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NewHtmlTemplateResponse& NewHtmlTemplateResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_NewHtmlTemplateResponse_escpos_2eproto.base);
  return *internal_default_instance();
}


void NewHtmlTemplateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:escposService.NewHtmlTemplateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && html_template_ != nullptr) {
    delete html_template_;
  }
  html_template_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NewHtmlTemplateResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<NewHtmlTemplateResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .escposService.HtmlTemplate html_template = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::escposService::HtmlTemplate::_InternalParse;
        object = msg->mutable_html_template();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NewHtmlTemplateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:escposService.NewHtmlTemplateResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .escposService.HtmlTemplate html_template = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_html_template()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:escposService.NewHtmlTemplateResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:escposService.NewHtmlTemplateResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NewHtmlTemplateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:escposService.NewHtmlTemplateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .escposService.HtmlTemplate html_template = 1;
  if (this->has_html_template()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::html_template(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:escposService.NewHtmlTemplateResponse)
}

::google::protobuf::uint8* NewHtmlTemplateResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:escposService.NewHtmlTemplateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .escposService.HtmlTemplate html_template = 1;
  if (this->has_html_template()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::html_template(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:escposService.NewHtmlTemplateResponse)
  return target;
}

size_t NewHtmlTemplateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:escposService.NewHtmlTemplateResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .escposService.HtmlTemplate html_template = 1;
  if (this->has_html_template()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *html_template_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NewHtmlTemplateResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:escposService.NewHtmlTemplateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const NewHtmlTemplateResponse* source =
      ::google::protobuf::DynamicCastToGenerated<NewHtmlTemplateResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:escposService.NewHtmlTemplateResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:escposService.NewHtmlTemplateResponse)
    MergeFrom(*source);
  }
}

void NewHtmlTemplateResponse::MergeFrom(const NewHtmlTemplateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:escposService.NewHtmlTemplateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_html_template()) {
    mutable_html_template()->::escposService::HtmlTemplate::MergeFrom(from.html_template());
  }
}

void NewHtmlTemplateResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:escposService.NewHtmlTemplateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewHtmlTemplateResponse::CopyFrom(const NewHtmlTemplateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:escposService.NewHtmlTemplateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewHtmlTemplateResponse::IsInitialized() const {
  return true;
}

void NewHtmlTemplateResponse::Swap(NewHtmlTemplateResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NewHtmlTemplateResponse::InternalSwap(NewHtmlTemplateResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(html_template_, other->html_template_);
}

::google::protobuf::Metadata NewHtmlTemplateResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_escpos_2eproto);
  return ::file_level_metadata_escpos_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ListHtmlTemplatesRequest::InitAsDefaultInstance() {
}
class ListHtmlTemplatesRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListHtmlTemplatesRequest::ListHtmlTemplatesRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:escposService.ListHtmlTemplatesRequest)
}
ListHtmlTemplatesRequest::ListHtmlTemplatesRequest(const ListHtmlTemplatesRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:escposService.ListHtmlTemplatesRequest)
}

void ListHtmlTemplatesRequest::SharedCtor() {
}

ListHtmlTemplatesRequest::~ListHtmlTemplatesRequest() {
  // @@protoc_insertion_point(destructor:escposService.ListHtmlTemplatesRequest)
  SharedDtor();
}

void ListHtmlTemplatesRequest::SharedDtor() {
}

void ListHtmlTemplatesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListHtmlTemplatesRequest& ListHtmlTemplatesRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ListHtmlTemplatesRequest_escpos_2eproto.base);
  return *internal_default_instance();
}


void ListHtmlTemplatesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:escposService.ListHtmlTemplatesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ListHtmlTemplatesRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ListHtmlTemplatesRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ListHtmlTemplatesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:escposService.ListHtmlTemplatesRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:escposService.ListHtmlTemplatesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:escposService.ListHtmlTemplatesRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ListHtmlTemplatesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:escposService.ListHtmlTemplatesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:escposService.ListHtmlTemplatesRequest)
}

::google::protobuf::uint8* ListHtmlTemplatesRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:escposService.ListHtmlTemplatesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:escposService.ListHtmlTemplatesRequest)
  return target;
}

size_t ListHtmlTemplatesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:escposService.ListHtmlTemplatesRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListHtmlTemplatesRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:escposService.ListHtmlTemplatesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListHtmlTemplatesRequest* source =
      ::google::protobuf::DynamicCastToGenerated<ListHtmlTemplatesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:escposService.ListHtmlTemplatesRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:escposService.ListHtmlTemplatesRequest)
    MergeFrom(*source);
  }
}

void ListHtmlTemplatesRequest::MergeFrom(const ListHtmlTemplatesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:escposService.ListHtmlTemplatesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ListHtmlTemplatesRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:escposService.ListHtmlTemplatesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListHtmlTemplatesRequest::CopyFrom(const ListHtmlTemplatesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:escposService.ListHtmlTemplatesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListHtmlTemplatesRequest::IsInitialized() const {
  return true;
}

void ListHtmlTemplatesRequest::Swap(ListHtmlTemplatesRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListHtmlTemplatesRequest::InternalSwap(ListHtmlTemplatesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ListHtmlTemplatesRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_escpos_2eproto);
  return ::file_level_metadata_escpos_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ListHtmlTemplatesResponse::InitAsDefaultInstance() {
}
class ListHtmlTemplatesResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListHtmlTemplatesResponse::kHtmlTemplatesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListHtmlTemplatesResponse::ListHtmlTemplatesResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:escposService.ListHtmlTemplatesResponse)
}
ListHtmlTemplatesResponse::ListHtmlTemplatesResponse(const ListHtmlTemplatesResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      html_templates_(from.html_templates_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:escposService.ListHtmlTemplatesResponse)
}

void ListHtmlTemplatesResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ListHtmlTemplatesResponse_escpos_2eproto.base);
}

ListHtmlTemplatesResponse::~ListHtmlTemplatesResponse() {
  // @@protoc_insertion_point(destructor:escposService.ListHtmlTemplatesResponse)
  SharedDtor();
}

void ListHtmlTemplatesResponse::SharedDtor() {
}

void ListHtmlTemplatesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListHtmlTemplatesResponse& ListHtmlTemplatesResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ListHtmlTemplatesResponse_escpos_2eproto.base);
  return *internal_default_instance();
}


void ListHtmlTemplatesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:escposService.ListHtmlTemplatesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  html_templates_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ListHtmlTemplatesResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ListHtmlTemplatesResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .escposService.HtmlTemplate html_templates = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::escposService::HtmlTemplate::_InternalParse;
          object = msg->add_html_templates();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ListHtmlTemplatesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:escposService.ListHtmlTemplatesResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .escposService.HtmlTemplate html_templates = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_html_templates()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:escposService.ListHtmlTemplatesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:escposService.ListHtmlTemplatesResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ListHtmlTemplatesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:escposService.ListHtmlTemplatesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .escposService.HtmlTemplate html_templates = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->html_templates_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->html_templates(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:escposService.ListHtmlTemplatesResponse)
}

::google::protobuf::uint8* ListHtmlTemplatesResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:escposService.ListHtmlTemplatesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .escposService.HtmlTemplate html_templates = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->html_templates_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->html_templates(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:escposService.ListHtmlTemplatesResponse)
  return target;
}

size_t ListHtmlTemplatesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:escposService.ListHtmlTemplatesResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .escposService.HtmlTemplate html_templates = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->html_templates_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->html_templates(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListHtmlTemplatesResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:escposService.ListHtmlTemplatesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListHtmlTemplatesResponse* source =
      ::google::protobuf::DynamicCastToGenerated<ListHtmlTemplatesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:escposService.ListHtmlTemplatesResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:escposService.ListHtmlTemplatesResponse)
    MergeFrom(*source);
  }
}

void ListHtmlTemplatesResponse::MergeFrom(const ListHtmlTemplatesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:escposService.ListHtmlTemplatesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  html_templates_.MergeFrom(from.html_templates_);
}

void ListHtmlTemplatesResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:escposService.ListHtmlTemplatesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListHtmlTemplatesResponse::CopyFrom(const ListHtmlTemplatesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:escposService.ListHtmlTemplatesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListHtmlTemplatesResponse::IsInitialized() const {
  return true;
}

void ListHtmlTemplatesResponse::Swap(ListHtmlTemplatesResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListHtmlTemplatesResponse::InternalSwap(ListHtmlTemplatesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&html_templates_)->InternalSwap(CastToBase(&other->html_templates_));
}

::google::protobuf::Metadata ListHtmlTemplatesResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_escpos_2eproto);
  return ::file_level_metadata_escpos_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GetHtmlTemplateRequest::InitAsDefaultInstance() {
}
class GetHtmlTemplateRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetHtmlTemplateRequest::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetHtmlTemplateRequest::GetHtmlTemplateRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:escposService.GetHtmlTemplateRequest)
}
GetHtmlTemplateRequest::GetHtmlTemplateRequest(const GetHtmlTemplateRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  // @@protoc_insertion_point(copy_constructor:escposService.GetHtmlTemplateRequest)
}

void GetHtmlTemplateRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GetHtmlTemplateRequest_escpos_2eproto.base);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GetHtmlTemplateRequest::~GetHtmlTemplateRequest() {
  // @@protoc_insertion_point(destructor:escposService.GetHtmlTemplateRequest)
  SharedDtor();
}

void GetHtmlTemplateRequest::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetHtmlTemplateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetHtmlTemplateRequest& GetHtmlTemplateRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetHtmlTemplateRequest_escpos_2eproto.base);
  return *internal_default_instance();
}


void GetHtmlTemplateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:escposService.GetHtmlTemplateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetHtmlTemplateRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetHtmlTemplateRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("escposService.GetHtmlTemplateRequest.id");
        object = msg->mutable_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetHtmlTemplateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:escposService.GetHtmlTemplateRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "escposService.GetHtmlTemplateRequest.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:escposService.GetHtmlTemplateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:escposService.GetHtmlTemplateRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetHtmlTemplateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:escposService.GetHtmlTemplateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "escposService.GetHtmlTemplateRequest.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:escposService.GetHtmlTemplateRequest)
}

::google::protobuf::uint8* GetHtmlTemplateRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:escposService.GetHtmlTemplateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "escposService.GetHtmlTemplateRequest.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:escposService.GetHtmlTemplateRequest)
  return target;
}

size_t GetHtmlTemplateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:escposService.GetHtmlTemplateRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetHtmlTemplateRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:escposService.GetHtmlTemplateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetHtmlTemplateRequest* source =
      ::google::protobuf::DynamicCastToGenerated<GetHtmlTemplateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:escposService.GetHtmlTemplateRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:escposService.GetHtmlTemplateRequest)
    MergeFrom(*source);
  }
}

void GetHtmlTemplateRequest::MergeFrom(const GetHtmlTemplateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:escposService.GetHtmlTemplateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
}

void GetHtmlTemplateRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:escposService.GetHtmlTemplateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetHtmlTemplateRequest::CopyFrom(const GetHtmlTemplateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:escposService.GetHtmlTemplateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetHtmlTemplateRequest::IsInitialized() const {
  return true;
}

void GetHtmlTemplateRequest::Swap(GetHtmlTemplateRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetHtmlTemplateRequest::InternalSwap(GetHtmlTemplateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata GetHtmlTemplateRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_escpos_2eproto);
  return ::file_level_metadata_escpos_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GetHtmlTemplateResponse::InitAsDefaultInstance() {
  ::escposService::_GetHtmlTemplateResponse_default_instance_._instance.get_mutable()->html_template_ = const_cast< ::escposService::HtmlTemplate*>(
      ::escposService::HtmlTemplate::internal_default_instance());
}
class GetHtmlTemplateResponse::HasBitSetters {
 public:
  static const ::escposService::HtmlTemplate& html_template(const GetHtmlTemplateResponse* msg);
};

const ::escposService::HtmlTemplate&
GetHtmlTemplateResponse::HasBitSetters::html_template(const GetHtmlTemplateResponse* msg) {
  return *msg->html_template_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetHtmlTemplateResponse::kHtmlTemplateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetHtmlTemplateResponse::GetHtmlTemplateResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:escposService.GetHtmlTemplateResponse)
}
GetHtmlTemplateResponse::GetHtmlTemplateResponse(const GetHtmlTemplateResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_html_template()) {
    html_template_ = new ::escposService::HtmlTemplate(*from.html_template_);
  } else {
    html_template_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:escposService.GetHtmlTemplateResponse)
}

void GetHtmlTemplateResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GetHtmlTemplateResponse_escpos_2eproto.base);
  html_template_ = nullptr;
}

GetHtmlTemplateResponse::~GetHtmlTemplateResponse() {
  // @@protoc_insertion_point(destructor:escposService.GetHtmlTemplateResponse)
  SharedDtor();
}

void GetHtmlTemplateResponse::SharedDtor() {
  if (this != internal_default_instance()) delete html_template_;
}

void GetHtmlTemplateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetHtmlTemplateResponse& GetHtmlTemplateResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetHtmlTemplateResponse_escpos_2eproto.base);
  return *internal_default_instance();
}


void GetHtmlTemplateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:escposService.GetHtmlTemplateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && html_template_ != nullptr) {
    delete html_template_;
  }
  html_template_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetHtmlTemplateResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetHtmlTemplateResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .escposService.HtmlTemplate html_template = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::escposService::HtmlTemplate::_InternalParse;
        object = msg->mutable_html_template();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetHtmlTemplateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:escposService.GetHtmlTemplateResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .escposService.HtmlTemplate html_template = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_html_template()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:escposService.GetHtmlTemplateResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:escposService.GetHtmlTemplateResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetHtmlTemplateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:escposService.GetHtmlTemplateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .escposService.HtmlTemplate html_template = 1;
  if (this->has_html_template()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::html_template(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:escposService.GetHtmlTemplateResponse)
}

::google::protobuf::uint8* GetHtmlTemplateResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:escposService.GetHtmlTemplateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .escposService.HtmlTemplate html_template = 1;
  if (this->has_html_template()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::html_template(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:escposService.GetHtmlTemplateResponse)
  return target;
}

size_t GetHtmlTemplateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:escposService.GetHtmlTemplateResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .escposService.HtmlTemplate html_template = 1;
  if (this->has_html_template()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *html_template_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetHtmlTemplateResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:escposService.GetHtmlTemplateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetHtmlTemplateResponse* source =
      ::google::protobuf::DynamicCastToGenerated<GetHtmlTemplateResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:escposService.GetHtmlTemplateResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:escposService.GetHtmlTemplateResponse)
    MergeFrom(*source);
  }
}

void GetHtmlTemplateResponse::MergeFrom(const GetHtmlTemplateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:escposService.GetHtmlTemplateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_html_template()) {
    mutable_html_template()->::escposService::HtmlTemplate::MergeFrom(from.html_template());
  }
}

void GetHtmlTemplateResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:escposService.GetHtmlTemplateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetHtmlTemplateResponse::CopyFrom(const GetHtmlTemplateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:escposService.GetHtmlTemplateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetHtmlTemplateResponse::IsInitialized() const {
  return true;
}

void GetHtmlTemplateResponse::Swap(GetHtmlTemplateResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetHtmlTemplateResponse::InternalSwap(GetHtmlTemplateResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(html_template_, other->html_template_);
}

::google::protobuf::Metadata GetHtmlTemplateResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_escpos_2eproto);
  return ::file_level_metadata_escpos_2eproto[kIndexInFileMessages];
}


// ===================================================================

void UpdateHtmlTemplateRequest::InitAsDefaultInstance() {
  ::escposService::_UpdateHtmlTemplateRequest_default_instance_._instance.get_mutable()->html_template_ = const_cast< ::escposService::HtmlTemplate*>(
      ::escposService::HtmlTemplate::internal_default_instance());
}
class UpdateHtmlTemplateRequest::HasBitSetters {
 public:
  static const ::escposService::HtmlTemplate& html_template(const UpdateHtmlTemplateRequest* msg);
};

const ::escposService::HtmlTemplate&
UpdateHtmlTemplateRequest::HasBitSetters::html_template(const UpdateHtmlTemplateRequest* msg) {
  return *msg->html_template_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateHtmlTemplateRequest::kHtmlTemplateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateHtmlTemplateRequest::UpdateHtmlTemplateRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:escposService.UpdateHtmlTemplateRequest)
}
UpdateHtmlTemplateRequest::UpdateHtmlTemplateRequest(const UpdateHtmlTemplateRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_html_template()) {
    html_template_ = new ::escposService::HtmlTemplate(*from.html_template_);
  } else {
    html_template_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:escposService.UpdateHtmlTemplateRequest)
}

void UpdateHtmlTemplateRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_UpdateHtmlTemplateRequest_escpos_2eproto.base);
  html_template_ = nullptr;
}

UpdateHtmlTemplateRequest::~UpdateHtmlTemplateRequest() {
  // @@protoc_insertion_point(destructor:escposService.UpdateHtmlTemplateRequest)
  SharedDtor();
}

void UpdateHtmlTemplateRequest::SharedDtor() {
  if (this != internal_default_instance()) delete html_template_;
}

void UpdateHtmlTemplateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateHtmlTemplateRequest& UpdateHtmlTemplateRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_UpdateHtmlTemplateRequest_escpos_2eproto.base);
  return *internal_default_instance();
}


void UpdateHtmlTemplateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:escposService.UpdateHtmlTemplateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && html_template_ != nullptr) {
    delete html_template_;
  }
  html_template_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UpdateHtmlTemplateRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<UpdateHtmlTemplateRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .escposService.HtmlTemplate html_template = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::escposService::HtmlTemplate::_InternalParse;
        object = msg->mutable_html_template();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UpdateHtmlTemplateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:escposService.UpdateHtmlTemplateRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .escposService.HtmlTemplate html_template = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_html_template()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:escposService.UpdateHtmlTemplateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:escposService.UpdateHtmlTemplateRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UpdateHtmlTemplateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:escposService.UpdateHtmlTemplateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .escposService.HtmlTemplate html_template = 1;
  if (this->has_html_template()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::html_template(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:escposService.UpdateHtmlTemplateRequest)
}

::google::protobuf::uint8* UpdateHtmlTemplateRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:escposService.UpdateHtmlTemplateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .escposService.HtmlTemplate html_template = 1;
  if (this->has_html_template()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::html_template(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:escposService.UpdateHtmlTemplateRequest)
  return target;
}

size_t UpdateHtmlTemplateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:escposService.UpdateHtmlTemplateRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .escposService.HtmlTemplate html_template = 1;
  if (this->has_html_template()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *html_template_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateHtmlTemplateRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:escposService.UpdateHtmlTemplateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateHtmlTemplateRequest* source =
      ::google::protobuf::DynamicCastToGenerated<UpdateHtmlTemplateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:escposService.UpdateHtmlTemplateRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:escposService.UpdateHtmlTemplateRequest)
    MergeFrom(*source);
  }
}

void UpdateHtmlTemplateRequest::MergeFrom(const UpdateHtmlTemplateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:escposService.UpdateHtmlTemplateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_html_template()) {
    mutable_html_template()->::escposService::HtmlTemplate::MergeFrom(from.html_template());
  }
}

void UpdateHtmlTemplateRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:escposService.UpdateHtmlTemplateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateHtmlTemplateRequest::CopyFrom(const UpdateHtmlTemplateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:escposService.UpdateHtmlTemplateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateHtmlTemplateRequest::IsInitialized() const {
  return true;
}

void UpdateHtmlTemplateRequest::Swap(UpdateHtmlTemplateRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateHtmlTemplateRequest::InternalSwap(UpdateHtmlTemplateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(html_template_, other->html_template_);
}

::google::protobuf::Metadata UpdateHtmlTemplateRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_escpos_2eproto);
  return ::file_level_metadata_escpos_2eproto[kIndexInFileMessages];
}


// ===================================================================

void UpdateHtmlTemplateResponse::InitAsDefaultInstance() {
  ::escposService::_UpdateHtmlTemplateResponse_default_instance_._instance.get_mutable()->html_template_ = const_cast< ::escposService::HtmlTemplate*>(
      ::escposService::HtmlTemplate::internal_default_instance());
}
class UpdateHtmlTemplateResponse::HasBitSetters {
 public:
  static const ::escposService::HtmlTemplate& html_template(const UpdateHtmlTemplateResponse* msg);
};

const ::escposService::HtmlTemplate&
UpdateHtmlTemplateResponse::HasBitSetters::html_template(const UpdateHtmlTemplateResponse* msg) {
  return *msg->html_template_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateHtmlTemplateResponse::kHtmlTemplateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateHtmlTemplateResponse::UpdateHtmlTemplateResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:escposService.UpdateHtmlTemplateResponse)
}
UpdateHtmlTemplateResponse::UpdateHtmlTemplateResponse(const UpdateHtmlTemplateResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_html_template()) {
    html_template_ = new ::escposService::HtmlTemplate(*from.html_template_);
  } else {
    html_template_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:escposService.UpdateHtmlTemplateResponse)
}

void UpdateHtmlTemplateResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_UpdateHtmlTemplateResponse_escpos_2eproto.base);
  html_template_ = nullptr;
}

UpdateHtmlTemplateResponse::~UpdateHtmlTemplateResponse() {
  // @@protoc_insertion_point(destructor:escposService.UpdateHtmlTemplateResponse)
  SharedDtor();
}

void UpdateHtmlTemplateResponse::SharedDtor() {
  if (this != internal_default_instance()) delete html_template_;
}

void UpdateHtmlTemplateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateHtmlTemplateResponse& UpdateHtmlTemplateResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_UpdateHtmlTemplateResponse_escpos_2eproto.base);
  return *internal_default_instance();
}


void UpdateHtmlTemplateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:escposService.UpdateHtmlTemplateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && html_template_ != nullptr) {
    delete html_template_;
  }
  html_template_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UpdateHtmlTemplateResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<UpdateHtmlTemplateResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .escposService.HtmlTemplate html_template = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::escposService::HtmlTemplate::_InternalParse;
        object = msg->mutable_html_template();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UpdateHtmlTemplateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:escposService.UpdateHtmlTemplateResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .escposService.HtmlTemplate html_template = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_html_template()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:escposService.UpdateHtmlTemplateResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:escposService.UpdateHtmlTemplateResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UpdateHtmlTemplateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:escposService.UpdateHtmlTemplateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .escposService.HtmlTemplate html_template = 1;
  if (this->has_html_template()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::html_template(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:escposService.UpdateHtmlTemplateResponse)
}

::google::protobuf::uint8* UpdateHtmlTemplateResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:escposService.UpdateHtmlTemplateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .escposService.HtmlTemplate html_template = 1;
  if (this->has_html_template()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::html_template(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:escposService.UpdateHtmlTemplateResponse)
  return target;
}

size_t UpdateHtmlTemplateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:escposService.UpdateHtmlTemplateResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .escposService.HtmlTemplate html_template = 1;
  if (this->has_html_template()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *html_template_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateHtmlTemplateResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:escposService.UpdateHtmlTemplateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateHtmlTemplateResponse* source =
      ::google::protobuf::DynamicCastToGenerated<UpdateHtmlTemplateResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:escposService.UpdateHtmlTemplateResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:escposService.UpdateHtmlTemplateResponse)
    MergeFrom(*source);
  }
}

void UpdateHtmlTemplateResponse::MergeFrom(const UpdateHtmlTemplateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:escposService.UpdateHtmlTemplateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_html_template()) {
    mutable_html_template()->::escposService::HtmlTemplate::MergeFrom(from.html_template());
  }
}

void UpdateHtmlTemplateResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:escposService.UpdateHtmlTemplateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateHtmlTemplateResponse::CopyFrom(const UpdateHtmlTemplateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:escposService.UpdateHtmlTemplateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateHtmlTemplateResponse::IsInitialized() const {
  return true;
}

void UpdateHtmlTemplateResponse::Swap(UpdateHtmlTemplateResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateHtmlTemplateResponse::InternalSwap(UpdateHtmlTemplateResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(html_template_, other->html_template_);
}

::google::protobuf::Metadata UpdateHtmlTemplateResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_escpos_2eproto);
  return ::file_level_metadata_escpos_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DeleteHtmlTemplatesRequest::InitAsDefaultInstance() {
}
class DeleteHtmlTemplatesRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeleteHtmlTemplatesRequest::kHtmlTemplatesIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteHtmlTemplatesRequest::DeleteHtmlTemplatesRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:escposService.DeleteHtmlTemplatesRequest)
}
DeleteHtmlTemplatesRequest::DeleteHtmlTemplatesRequest(const DeleteHtmlTemplatesRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      html_templates_id_(from.html_templates_id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:escposService.DeleteHtmlTemplatesRequest)
}

void DeleteHtmlTemplatesRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_DeleteHtmlTemplatesRequest_escpos_2eproto.base);
}

DeleteHtmlTemplatesRequest::~DeleteHtmlTemplatesRequest() {
  // @@protoc_insertion_point(destructor:escposService.DeleteHtmlTemplatesRequest)
  SharedDtor();
}

void DeleteHtmlTemplatesRequest::SharedDtor() {
}

void DeleteHtmlTemplatesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteHtmlTemplatesRequest& DeleteHtmlTemplatesRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DeleteHtmlTemplatesRequest_escpos_2eproto.base);
  return *internal_default_instance();
}


void DeleteHtmlTemplatesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:escposService.DeleteHtmlTemplatesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  html_templates_id_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeleteHtmlTemplatesRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DeleteHtmlTemplatesRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated string html_templates_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("escposService.DeleteHtmlTemplatesRequest.html_templates_id");
          object = msg->add_html_templates_id();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeleteHtmlTemplatesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:escposService.DeleteHtmlTemplatesRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string html_templates_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_html_templates_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->html_templates_id(this->html_templates_id_size() - 1).data(),
            static_cast<int>(this->html_templates_id(this->html_templates_id_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "escposService.DeleteHtmlTemplatesRequest.html_templates_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:escposService.DeleteHtmlTemplatesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:escposService.DeleteHtmlTemplatesRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeleteHtmlTemplatesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:escposService.DeleteHtmlTemplatesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string html_templates_id = 1;
  for (int i = 0, n = this->html_templates_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->html_templates_id(i).data(), static_cast<int>(this->html_templates_id(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "escposService.DeleteHtmlTemplatesRequest.html_templates_id");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->html_templates_id(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:escposService.DeleteHtmlTemplatesRequest)
}

::google::protobuf::uint8* DeleteHtmlTemplatesRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:escposService.DeleteHtmlTemplatesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string html_templates_id = 1;
  for (int i = 0, n = this->html_templates_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->html_templates_id(i).data(), static_cast<int>(this->html_templates_id(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "escposService.DeleteHtmlTemplatesRequest.html_templates_id");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->html_templates_id(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:escposService.DeleteHtmlTemplatesRequest)
  return target;
}

size_t DeleteHtmlTemplatesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:escposService.DeleteHtmlTemplatesRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string html_templates_id = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->html_templates_id_size());
  for (int i = 0, n = this->html_templates_id_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->html_templates_id(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteHtmlTemplatesRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:escposService.DeleteHtmlTemplatesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteHtmlTemplatesRequest* source =
      ::google::protobuf::DynamicCastToGenerated<DeleteHtmlTemplatesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:escposService.DeleteHtmlTemplatesRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:escposService.DeleteHtmlTemplatesRequest)
    MergeFrom(*source);
  }
}

void DeleteHtmlTemplatesRequest::MergeFrom(const DeleteHtmlTemplatesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:escposService.DeleteHtmlTemplatesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  html_templates_id_.MergeFrom(from.html_templates_id_);
}

void DeleteHtmlTemplatesRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:escposService.DeleteHtmlTemplatesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteHtmlTemplatesRequest::CopyFrom(const DeleteHtmlTemplatesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:escposService.DeleteHtmlTemplatesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteHtmlTemplatesRequest::IsInitialized() const {
  return true;
}

void DeleteHtmlTemplatesRequest::Swap(DeleteHtmlTemplatesRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteHtmlTemplatesRequest::InternalSwap(DeleteHtmlTemplatesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  html_templates_id_.InternalSwap(CastToBase(&other->html_templates_id_));
}

::google::protobuf::Metadata DeleteHtmlTemplatesRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_escpos_2eproto);
  return ::file_level_metadata_escpos_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DeleteHtmlTemplatesResponse::InitAsDefaultInstance() {
}
class DeleteHtmlTemplatesResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteHtmlTemplatesResponse::DeleteHtmlTemplatesResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:escposService.DeleteHtmlTemplatesResponse)
}
DeleteHtmlTemplatesResponse::DeleteHtmlTemplatesResponse(const DeleteHtmlTemplatesResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:escposService.DeleteHtmlTemplatesResponse)
}

void DeleteHtmlTemplatesResponse::SharedCtor() {
}

DeleteHtmlTemplatesResponse::~DeleteHtmlTemplatesResponse() {
  // @@protoc_insertion_point(destructor:escposService.DeleteHtmlTemplatesResponse)
  SharedDtor();
}

void DeleteHtmlTemplatesResponse::SharedDtor() {
}

void DeleteHtmlTemplatesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteHtmlTemplatesResponse& DeleteHtmlTemplatesResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DeleteHtmlTemplatesResponse_escpos_2eproto.base);
  return *internal_default_instance();
}


void DeleteHtmlTemplatesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:escposService.DeleteHtmlTemplatesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeleteHtmlTemplatesResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DeleteHtmlTemplatesResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeleteHtmlTemplatesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:escposService.DeleteHtmlTemplatesResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:escposService.DeleteHtmlTemplatesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:escposService.DeleteHtmlTemplatesResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeleteHtmlTemplatesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:escposService.DeleteHtmlTemplatesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:escposService.DeleteHtmlTemplatesResponse)
}

::google::protobuf::uint8* DeleteHtmlTemplatesResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:escposService.DeleteHtmlTemplatesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:escposService.DeleteHtmlTemplatesResponse)
  return target;
}

size_t DeleteHtmlTemplatesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:escposService.DeleteHtmlTemplatesResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteHtmlTemplatesResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:escposService.DeleteHtmlTemplatesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteHtmlTemplatesResponse* source =
      ::google::protobuf::DynamicCastToGenerated<DeleteHtmlTemplatesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:escposService.DeleteHtmlTemplatesResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:escposService.DeleteHtmlTemplatesResponse)
    MergeFrom(*source);
  }
}

void DeleteHtmlTemplatesResponse::MergeFrom(const DeleteHtmlTemplatesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:escposService.DeleteHtmlTemplatesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DeleteHtmlTemplatesResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:escposService.DeleteHtmlTemplatesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteHtmlTemplatesResponse::CopyFrom(const DeleteHtmlTemplatesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:escposService.DeleteHtmlTemplatesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteHtmlTemplatesResponse::IsInitialized() const {
  return true;
}

void DeleteHtmlTemplatesResponse::Swap(DeleteHtmlTemplatesResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteHtmlTemplatesResponse::InternalSwap(DeleteHtmlTemplatesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DeleteHtmlTemplatesResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_escpos_2eproto);
  return ::file_level_metadata_escpos_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace escposService
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::escposService::PrintRawRequest* Arena::CreateMaybeMessage< ::escposService::PrintRawRequest >(Arena* arena) {
  return Arena::CreateInternal< ::escposService::PrintRawRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::escposService::PrintRawResponse* Arena::CreateMaybeMessage< ::escposService::PrintRawResponse >(Arena* arena) {
  return Arena::CreateInternal< ::escposService::PrintRawResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::escposService::Element* Arena::CreateMaybeMessage< ::escposService::Element >(Arena* arena) {
  return Arena::CreateInternal< ::escposService::Element >(arena);
}
template<> PROTOBUF_NOINLINE ::escposService::ElementRow* Arena::CreateMaybeMessage< ::escposService::ElementRow >(Arena* arena) {
  return Arena::CreateInternal< ::escposService::ElementRow >(arena);
}
template<> PROTOBUF_NOINLINE ::escposService::PrintElementsRequest* Arena::CreateMaybeMessage< ::escposService::PrintElementsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::escposService::PrintElementsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::escposService::PrintElementsResponse* Arena::CreateMaybeMessage< ::escposService::PrintElementsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::escposService::PrintElementsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::escposService::PrintHtmlTemplateRequest_ParamsEntry_DoNotUse* Arena::CreateMaybeMessage< ::escposService::PrintHtmlTemplateRequest_ParamsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::escposService::PrintHtmlTemplateRequest_ParamsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::escposService::PrintHtmlTemplateRequest* Arena::CreateMaybeMessage< ::escposService::PrintHtmlTemplateRequest >(Arena* arena) {
  return Arena::CreateInternal< ::escposService::PrintHtmlTemplateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::escposService::PrintHtmlTemplateResponse* Arena::CreateMaybeMessage< ::escposService::PrintHtmlTemplateResponse >(Arena* arena) {
  return Arena::CreateInternal< ::escposService::PrintHtmlTemplateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::escposService::HtmlTemplate* Arena::CreateMaybeMessage< ::escposService::HtmlTemplate >(Arena* arena) {
  return Arena::CreateInternal< ::escposService::HtmlTemplate >(arena);
}
template<> PROTOBUF_NOINLINE ::escposService::NewHtmlTemplateRequest* Arena::CreateMaybeMessage< ::escposService::NewHtmlTemplateRequest >(Arena* arena) {
  return Arena::CreateInternal< ::escposService::NewHtmlTemplateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::escposService::NewHtmlTemplateResponse* Arena::CreateMaybeMessage< ::escposService::NewHtmlTemplateResponse >(Arena* arena) {
  return Arena::CreateInternal< ::escposService::NewHtmlTemplateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::escposService::ListHtmlTemplatesRequest* Arena::CreateMaybeMessage< ::escposService::ListHtmlTemplatesRequest >(Arena* arena) {
  return Arena::CreateInternal< ::escposService::ListHtmlTemplatesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::escposService::ListHtmlTemplatesResponse* Arena::CreateMaybeMessage< ::escposService::ListHtmlTemplatesResponse >(Arena* arena) {
  return Arena::CreateInternal< ::escposService::ListHtmlTemplatesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::escposService::GetHtmlTemplateRequest* Arena::CreateMaybeMessage< ::escposService::GetHtmlTemplateRequest >(Arena* arena) {
  return Arena::CreateInternal< ::escposService::GetHtmlTemplateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::escposService::GetHtmlTemplateResponse* Arena::CreateMaybeMessage< ::escposService::GetHtmlTemplateResponse >(Arena* arena) {
  return Arena::CreateInternal< ::escposService::GetHtmlTemplateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::escposService::UpdateHtmlTemplateRequest* Arena::CreateMaybeMessage< ::escposService::UpdateHtmlTemplateRequest >(Arena* arena) {
  return Arena::CreateInternal< ::escposService::UpdateHtmlTemplateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::escposService::UpdateHtmlTemplateResponse* Arena::CreateMaybeMessage< ::escposService::UpdateHtmlTemplateResponse >(Arena* arena) {
  return Arena::CreateInternal< ::escposService::UpdateHtmlTemplateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::escposService::DeleteHtmlTemplatesRequest* Arena::CreateMaybeMessage< ::escposService::DeleteHtmlTemplatesRequest >(Arena* arena) {
  return Arena::CreateInternal< ::escposService::DeleteHtmlTemplatesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::escposService::DeleteHtmlTemplatesResponse* Arena::CreateMaybeMessage< ::escposService::DeleteHtmlTemplatesResponse >(Arena* arena) {
  return Arena::CreateInternal< ::escposService::DeleteHtmlTemplatesResponse >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
