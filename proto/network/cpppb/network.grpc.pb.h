// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: network.proto
#ifndef GRPC_network_2eproto__INCLUDED
#define GRPC_network_2eproto__INCLUDED

#include "network.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc_impl {
class Channel;
class CompletionQueue;
class ServerCompletionQueue;
}  // namespace grpc_impl

namespace grpc {
namespace experimental {
template <typename RequestT, typename ResponseT>
class MessageAllocator;
}  // namespace experimental
}  // namespace grpc_impl

namespace grpc {
class ServerContext;
}  // namespace grpc

namespace networkService {

class NetworkService final {
 public:
  static constexpr char const* service_full_name() {
    return "networkService.NetworkService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // 获取网络扫描结果流
    // 扫描结果每30秒自动更新, 首次获取将返回记录中最新记录
    std::unique_ptr< ::grpc::ClientReaderInterface< ::networkService::ListNetworksResponse>> ListNetworks(::grpc::ClientContext* context, const ::networkService::ListNetworksRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::networkService::ListNetworksResponse>>(ListNetworksRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::networkService::ListNetworksResponse>> AsyncListNetworks(::grpc::ClientContext* context, const ::networkService::ListNetworksRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::networkService::ListNetworksResponse>>(AsyncListNetworksRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::networkService::ListNetworksResponse>> PrepareAsyncListNetworks(::grpc::ClientContext* context, const ::networkService::ListNetworksRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::networkService::ListNetworksResponse>>(PrepareAsyncListNetworksRaw(context, request, cq));
    }
    // 连接至指定网络
    // 连接失败将立即返回错误
    // 若30秒后成功获取状态将返回超时失败
    virtual ::grpc::Status Connect(::grpc::ClientContext* context, const ::networkService::ConnectRequest& request, ::networkService::ConnectResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::networkService::ConnectResponse>> AsyncConnect(::grpc::ClientContext* context, const ::networkService::ConnectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::networkService::ConnectResponse>>(AsyncConnectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::networkService::ConnectResponse>> PrepareAsyncConnect(::grpc::ClientContext* context, const ::networkService::ConnectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::networkService::ConnectResponse>>(PrepareAsyncConnectRaw(context, request, cq));
    }
    // 获取连接状态流
    // 在连接开始时立即返回当前最新的扫描数据
    // 并持续在网络数据更新时接收新数据
    std::unique_ptr< ::grpc::ClientReaderInterface< ::networkService::GetStatusResponse>> GetStatus(::grpc::ClientContext* context, const ::networkService::GetStatusRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::networkService::GetStatusResponse>>(GetStatusRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::networkService::GetStatusResponse>> AsyncGetStatus(::grpc::ClientContext* context, const ::networkService::GetStatusRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::networkService::GetStatusResponse>>(AsyncGetStatusRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::networkService::GetStatusResponse>> PrepareAsyncGetStatus(::grpc::ClientContext* context, const ::networkService::GetStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::networkService::GetStatusResponse>>(PrepareAsyncGetStatusRaw(context, request, cq));
    }
    // 获取网络设备相关信息
    // v1.1.0
    virtual ::grpc::Status GetNetworkDeviceInfo(::grpc::ClientContext* context, const ::networkService::GetNetworkDeviceInfoRequest& request, ::networkService::GetNetworkDeviceInfoResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::networkService::GetNetworkDeviceInfoResponse>> AsyncGetNetworkDeviceInfo(::grpc::ClientContext* context, const ::networkService::GetNetworkDeviceInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::networkService::GetNetworkDeviceInfoResponse>>(AsyncGetNetworkDeviceInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::networkService::GetNetworkDeviceInfoResponse>> PrepareAsyncGetNetworkDeviceInfo(::grpc::ClientContext* context, const ::networkService::GetNetworkDeviceInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::networkService::GetNetworkDeviceInfoResponse>>(PrepareAsyncGetNetworkDeviceInfoRaw(context, request, cq));
    }
    // 修改网络设备相关信息
    // v1.1.0
    virtual ::grpc::Status UpdateNetworkDeviceInfo(::grpc::ClientContext* context, const ::networkService::UpdateNetworkDeviceInfoRequest& request, ::networkService::UpdateNetworkDeviceInfoResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::networkService::UpdateNetworkDeviceInfoResponse>> AsyncUpdateNetworkDeviceInfo(::grpc::ClientContext* context, const ::networkService::UpdateNetworkDeviceInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::networkService::UpdateNetworkDeviceInfoResponse>>(AsyncUpdateNetworkDeviceInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::networkService::UpdateNetworkDeviceInfoResponse>> PrepareAsyncUpdateNetworkDeviceInfo(::grpc::ClientContext* context, const ::networkService::UpdateNetworkDeviceInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::networkService::UpdateNetworkDeviceInfoResponse>>(PrepareAsyncUpdateNetworkDeviceInfoRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // 获取网络扫描结果流
      // 扫描结果每30秒自动更新, 首次获取将返回记录中最新记录
      virtual void ListNetworks(::grpc::ClientContext* context, ::networkService::ListNetworksRequest* request, ::grpc::experimental::ClientReadReactor< ::networkService::ListNetworksResponse>* reactor) = 0;
      // 连接至指定网络
      // 连接失败将立即返回错误
      // 若30秒后成功获取状态将返回超时失败
      virtual void Connect(::grpc::ClientContext* context, const ::networkService::ConnectRequest* request, ::networkService::ConnectResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Connect(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::networkService::ConnectResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Connect(::grpc::ClientContext* context, const ::networkService::ConnectRequest* request, ::networkService::ConnectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Connect(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::networkService::ConnectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // 获取连接状态流
      // 在连接开始时立即返回当前最新的扫描数据
      // 并持续在网络数据更新时接收新数据
      virtual void GetStatus(::grpc::ClientContext* context, ::networkService::GetStatusRequest* request, ::grpc::experimental::ClientReadReactor< ::networkService::GetStatusResponse>* reactor) = 0;
      // 获取网络设备相关信息
      // v1.1.0
      virtual void GetNetworkDeviceInfo(::grpc::ClientContext* context, const ::networkService::GetNetworkDeviceInfoRequest* request, ::networkService::GetNetworkDeviceInfoResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetNetworkDeviceInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::networkService::GetNetworkDeviceInfoResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetNetworkDeviceInfo(::grpc::ClientContext* context, const ::networkService::GetNetworkDeviceInfoRequest* request, ::networkService::GetNetworkDeviceInfoResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetNetworkDeviceInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::networkService::GetNetworkDeviceInfoResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // 修改网络设备相关信息
      // v1.1.0
      virtual void UpdateNetworkDeviceInfo(::grpc::ClientContext* context, const ::networkService::UpdateNetworkDeviceInfoRequest* request, ::networkService::UpdateNetworkDeviceInfoResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateNetworkDeviceInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::networkService::UpdateNetworkDeviceInfoResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateNetworkDeviceInfo(::grpc::ClientContext* context, const ::networkService::UpdateNetworkDeviceInfoRequest* request, ::networkService::UpdateNetworkDeviceInfoResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void UpdateNetworkDeviceInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::networkService::UpdateNetworkDeviceInfoResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientReaderInterface< ::networkService::ListNetworksResponse>* ListNetworksRaw(::grpc::ClientContext* context, const ::networkService::ListNetworksRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::networkService::ListNetworksResponse>* AsyncListNetworksRaw(::grpc::ClientContext* context, const ::networkService::ListNetworksRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::networkService::ListNetworksResponse>* PrepareAsyncListNetworksRaw(::grpc::ClientContext* context, const ::networkService::ListNetworksRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::networkService::ConnectResponse>* AsyncConnectRaw(::grpc::ClientContext* context, const ::networkService::ConnectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::networkService::ConnectResponse>* PrepareAsyncConnectRaw(::grpc::ClientContext* context, const ::networkService::ConnectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::networkService::GetStatusResponse>* GetStatusRaw(::grpc::ClientContext* context, const ::networkService::GetStatusRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::networkService::GetStatusResponse>* AsyncGetStatusRaw(::grpc::ClientContext* context, const ::networkService::GetStatusRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::networkService::GetStatusResponse>* PrepareAsyncGetStatusRaw(::grpc::ClientContext* context, const ::networkService::GetStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::networkService::GetNetworkDeviceInfoResponse>* AsyncGetNetworkDeviceInfoRaw(::grpc::ClientContext* context, const ::networkService::GetNetworkDeviceInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::networkService::GetNetworkDeviceInfoResponse>* PrepareAsyncGetNetworkDeviceInfoRaw(::grpc::ClientContext* context, const ::networkService::GetNetworkDeviceInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::networkService::UpdateNetworkDeviceInfoResponse>* AsyncUpdateNetworkDeviceInfoRaw(::grpc::ClientContext* context, const ::networkService::UpdateNetworkDeviceInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::networkService::UpdateNetworkDeviceInfoResponse>* PrepareAsyncUpdateNetworkDeviceInfoRaw(::grpc::ClientContext* context, const ::networkService::UpdateNetworkDeviceInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    std::unique_ptr< ::grpc::ClientReader< ::networkService::ListNetworksResponse>> ListNetworks(::grpc::ClientContext* context, const ::networkService::ListNetworksRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::networkService::ListNetworksResponse>>(ListNetworksRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::networkService::ListNetworksResponse>> AsyncListNetworks(::grpc::ClientContext* context, const ::networkService::ListNetworksRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::networkService::ListNetworksResponse>>(AsyncListNetworksRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::networkService::ListNetworksResponse>> PrepareAsyncListNetworks(::grpc::ClientContext* context, const ::networkService::ListNetworksRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::networkService::ListNetworksResponse>>(PrepareAsyncListNetworksRaw(context, request, cq));
    }
    ::grpc::Status Connect(::grpc::ClientContext* context, const ::networkService::ConnectRequest& request, ::networkService::ConnectResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::networkService::ConnectResponse>> AsyncConnect(::grpc::ClientContext* context, const ::networkService::ConnectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::networkService::ConnectResponse>>(AsyncConnectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::networkService::ConnectResponse>> PrepareAsyncConnect(::grpc::ClientContext* context, const ::networkService::ConnectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::networkService::ConnectResponse>>(PrepareAsyncConnectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::networkService::GetStatusResponse>> GetStatus(::grpc::ClientContext* context, const ::networkService::GetStatusRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::networkService::GetStatusResponse>>(GetStatusRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::networkService::GetStatusResponse>> AsyncGetStatus(::grpc::ClientContext* context, const ::networkService::GetStatusRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::networkService::GetStatusResponse>>(AsyncGetStatusRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::networkService::GetStatusResponse>> PrepareAsyncGetStatus(::grpc::ClientContext* context, const ::networkService::GetStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::networkService::GetStatusResponse>>(PrepareAsyncGetStatusRaw(context, request, cq));
    }
    ::grpc::Status GetNetworkDeviceInfo(::grpc::ClientContext* context, const ::networkService::GetNetworkDeviceInfoRequest& request, ::networkService::GetNetworkDeviceInfoResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::networkService::GetNetworkDeviceInfoResponse>> AsyncGetNetworkDeviceInfo(::grpc::ClientContext* context, const ::networkService::GetNetworkDeviceInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::networkService::GetNetworkDeviceInfoResponse>>(AsyncGetNetworkDeviceInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::networkService::GetNetworkDeviceInfoResponse>> PrepareAsyncGetNetworkDeviceInfo(::grpc::ClientContext* context, const ::networkService::GetNetworkDeviceInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::networkService::GetNetworkDeviceInfoResponse>>(PrepareAsyncGetNetworkDeviceInfoRaw(context, request, cq));
    }
    ::grpc::Status UpdateNetworkDeviceInfo(::grpc::ClientContext* context, const ::networkService::UpdateNetworkDeviceInfoRequest& request, ::networkService::UpdateNetworkDeviceInfoResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::networkService::UpdateNetworkDeviceInfoResponse>> AsyncUpdateNetworkDeviceInfo(::grpc::ClientContext* context, const ::networkService::UpdateNetworkDeviceInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::networkService::UpdateNetworkDeviceInfoResponse>>(AsyncUpdateNetworkDeviceInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::networkService::UpdateNetworkDeviceInfoResponse>> PrepareAsyncUpdateNetworkDeviceInfo(::grpc::ClientContext* context, const ::networkService::UpdateNetworkDeviceInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::networkService::UpdateNetworkDeviceInfoResponse>>(PrepareAsyncUpdateNetworkDeviceInfoRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void ListNetworks(::grpc::ClientContext* context, ::networkService::ListNetworksRequest* request, ::grpc::experimental::ClientReadReactor< ::networkService::ListNetworksResponse>* reactor) override;
      void Connect(::grpc::ClientContext* context, const ::networkService::ConnectRequest* request, ::networkService::ConnectResponse* response, std::function<void(::grpc::Status)>) override;
      void Connect(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::networkService::ConnectResponse* response, std::function<void(::grpc::Status)>) override;
      void Connect(::grpc::ClientContext* context, const ::networkService::ConnectRequest* request, ::networkService::ConnectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Connect(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::networkService::ConnectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetStatus(::grpc::ClientContext* context, ::networkService::GetStatusRequest* request, ::grpc::experimental::ClientReadReactor< ::networkService::GetStatusResponse>* reactor) override;
      void GetNetworkDeviceInfo(::grpc::ClientContext* context, const ::networkService::GetNetworkDeviceInfoRequest* request, ::networkService::GetNetworkDeviceInfoResponse* response, std::function<void(::grpc::Status)>) override;
      void GetNetworkDeviceInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::networkService::GetNetworkDeviceInfoResponse* response, std::function<void(::grpc::Status)>) override;
      void GetNetworkDeviceInfo(::grpc::ClientContext* context, const ::networkService::GetNetworkDeviceInfoRequest* request, ::networkService::GetNetworkDeviceInfoResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetNetworkDeviceInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::networkService::GetNetworkDeviceInfoResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void UpdateNetworkDeviceInfo(::grpc::ClientContext* context, const ::networkService::UpdateNetworkDeviceInfoRequest* request, ::networkService::UpdateNetworkDeviceInfoResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateNetworkDeviceInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::networkService::UpdateNetworkDeviceInfoResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateNetworkDeviceInfo(::grpc::ClientContext* context, const ::networkService::UpdateNetworkDeviceInfoRequest* request, ::networkService::UpdateNetworkDeviceInfoResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void UpdateNetworkDeviceInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::networkService::UpdateNetworkDeviceInfoResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientReader< ::networkService::ListNetworksResponse>* ListNetworksRaw(::grpc::ClientContext* context, const ::networkService::ListNetworksRequest& request) override;
    ::grpc::ClientAsyncReader< ::networkService::ListNetworksResponse>* AsyncListNetworksRaw(::grpc::ClientContext* context, const ::networkService::ListNetworksRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::networkService::ListNetworksResponse>* PrepareAsyncListNetworksRaw(::grpc::ClientContext* context, const ::networkService::ListNetworksRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::networkService::ConnectResponse>* AsyncConnectRaw(::grpc::ClientContext* context, const ::networkService::ConnectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::networkService::ConnectResponse>* PrepareAsyncConnectRaw(::grpc::ClientContext* context, const ::networkService::ConnectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::networkService::GetStatusResponse>* GetStatusRaw(::grpc::ClientContext* context, const ::networkService::GetStatusRequest& request) override;
    ::grpc::ClientAsyncReader< ::networkService::GetStatusResponse>* AsyncGetStatusRaw(::grpc::ClientContext* context, const ::networkService::GetStatusRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::networkService::GetStatusResponse>* PrepareAsyncGetStatusRaw(::grpc::ClientContext* context, const ::networkService::GetStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::networkService::GetNetworkDeviceInfoResponse>* AsyncGetNetworkDeviceInfoRaw(::grpc::ClientContext* context, const ::networkService::GetNetworkDeviceInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::networkService::GetNetworkDeviceInfoResponse>* PrepareAsyncGetNetworkDeviceInfoRaw(::grpc::ClientContext* context, const ::networkService::GetNetworkDeviceInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::networkService::UpdateNetworkDeviceInfoResponse>* AsyncUpdateNetworkDeviceInfoRaw(::grpc::ClientContext* context, const ::networkService::UpdateNetworkDeviceInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::networkService::UpdateNetworkDeviceInfoResponse>* PrepareAsyncUpdateNetworkDeviceInfoRaw(::grpc::ClientContext* context, const ::networkService::UpdateNetworkDeviceInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ListNetworks_;
    const ::grpc::internal::RpcMethod rpcmethod_Connect_;
    const ::grpc::internal::RpcMethod rpcmethod_GetStatus_;
    const ::grpc::internal::RpcMethod rpcmethod_GetNetworkDeviceInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateNetworkDeviceInfo_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // 获取网络扫描结果流
    // 扫描结果每30秒自动更新, 首次获取将返回记录中最新记录
    virtual ::grpc::Status ListNetworks(::grpc::ServerContext* context, const ::networkService::ListNetworksRequest* request, ::grpc::ServerWriter< ::networkService::ListNetworksResponse>* writer);
    // 连接至指定网络
    // 连接失败将立即返回错误
    // 若30秒后成功获取状态将返回超时失败
    virtual ::grpc::Status Connect(::grpc::ServerContext* context, const ::networkService::ConnectRequest* request, ::networkService::ConnectResponse* response);
    // 获取连接状态流
    // 在连接开始时立即返回当前最新的扫描数据
    // 并持续在网络数据更新时接收新数据
    virtual ::grpc::Status GetStatus(::grpc::ServerContext* context, const ::networkService::GetStatusRequest* request, ::grpc::ServerWriter< ::networkService::GetStatusResponse>* writer);
    // 获取网络设备相关信息
    // v1.1.0
    virtual ::grpc::Status GetNetworkDeviceInfo(::grpc::ServerContext* context, const ::networkService::GetNetworkDeviceInfoRequest* request, ::networkService::GetNetworkDeviceInfoResponse* response);
    // 修改网络设备相关信息
    // v1.1.0
    virtual ::grpc::Status UpdateNetworkDeviceInfo(::grpc::ServerContext* context, const ::networkService::UpdateNetworkDeviceInfoRequest* request, ::networkService::UpdateNetworkDeviceInfoResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ListNetworks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListNetworks() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ListNetworks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListNetworks(::grpc::ServerContext* context, const ::networkService::ListNetworksRequest* request, ::grpc::ServerWriter< ::networkService::ListNetworksResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListNetworks(::grpc::ServerContext* context, ::networkService::ListNetworksRequest* request, ::grpc::ServerAsyncWriter< ::networkService::ListNetworksResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Connect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Connect() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Connect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Connect(::grpc::ServerContext* context, const ::networkService::ConnectRequest* request, ::networkService::ConnectResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestConnect(::grpc::ServerContext* context, ::networkService::ConnectRequest* request, ::grpc::ServerAsyncResponseWriter< ::networkService::ConnectResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetStatus() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStatus(::grpc::ServerContext* context, const ::networkService::GetStatusRequest* request, ::grpc::ServerWriter< ::networkService::GetStatusResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetStatus(::grpc::ServerContext* context, ::networkService::GetStatusRequest* request, ::grpc::ServerAsyncWriter< ::networkService::GetStatusResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetNetworkDeviceInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetNetworkDeviceInfo() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetNetworkDeviceInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNetworkDeviceInfo(::grpc::ServerContext* context, const ::networkService::GetNetworkDeviceInfoRequest* request, ::networkService::GetNetworkDeviceInfoResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNetworkDeviceInfo(::grpc::ServerContext* context, ::networkService::GetNetworkDeviceInfoRequest* request, ::grpc::ServerAsyncResponseWriter< ::networkService::GetNetworkDeviceInfoResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateNetworkDeviceInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_UpdateNetworkDeviceInfo() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_UpdateNetworkDeviceInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateNetworkDeviceInfo(::grpc::ServerContext* context, const ::networkService::UpdateNetworkDeviceInfoRequest* request, ::networkService::UpdateNetworkDeviceInfoResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateNetworkDeviceInfo(::grpc::ServerContext* context, ::networkService::UpdateNetworkDeviceInfoRequest* request, ::grpc::ServerAsyncResponseWriter< ::networkService::UpdateNetworkDeviceInfoResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ListNetworks<WithAsyncMethod_Connect<WithAsyncMethod_GetStatus<WithAsyncMethod_GetNetworkDeviceInfo<WithAsyncMethod_UpdateNetworkDeviceInfo<Service > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ListNetworks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_ListNetworks() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackServerStreamingHandler< ::networkService::ListNetworksRequest, ::networkService::ListNetworksResponse>(
          [this] { return this->ListNetworks(); }));
    }
    ~ExperimentalWithCallbackMethod_ListNetworks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListNetworks(::grpc::ServerContext* context, const ::networkService::ListNetworksRequest* request, ::grpc::ServerWriter< ::networkService::ListNetworksResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::networkService::ListNetworksRequest, ::networkService::ListNetworksResponse>* ListNetworks() {
      return new ::grpc::internal::UnimplementedWriteReactor<
        ::networkService::ListNetworksRequest, ::networkService::ListNetworksResponse>;}
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Connect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Connect() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::networkService::ConnectRequest, ::networkService::ConnectResponse>(
          [this](::grpc::ServerContext* context,
                 const ::networkService::ConnectRequest* request,
                 ::networkService::ConnectResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Connect(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_Connect(
        ::grpc::experimental::MessageAllocator< ::networkService::ConnectRequest, ::networkService::ConnectResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::networkService::ConnectRequest, ::networkService::ConnectResponse>*>(
          ::grpc::Service::experimental().GetHandler(1))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Connect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Connect(::grpc::ServerContext* context, const ::networkService::ConnectRequest* request, ::networkService::ConnectResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Connect(::grpc::ServerContext* context, const ::networkService::ConnectRequest* request, ::networkService::ConnectResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GetStatus() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc::internal::CallbackServerStreamingHandler< ::networkService::GetStatusRequest, ::networkService::GetStatusResponse>(
          [this] { return this->GetStatus(); }));
    }
    ~ExperimentalWithCallbackMethod_GetStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStatus(::grpc::ServerContext* context, const ::networkService::GetStatusRequest* request, ::grpc::ServerWriter< ::networkService::GetStatusResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::networkService::GetStatusRequest, ::networkService::GetStatusResponse>* GetStatus() {
      return new ::grpc::internal::UnimplementedWriteReactor<
        ::networkService::GetStatusRequest, ::networkService::GetStatusResponse>;}
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetNetworkDeviceInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GetNetworkDeviceInfo() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::networkService::GetNetworkDeviceInfoRequest, ::networkService::GetNetworkDeviceInfoResponse>(
          [this](::grpc::ServerContext* context,
                 const ::networkService::GetNetworkDeviceInfoRequest* request,
                 ::networkService::GetNetworkDeviceInfoResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetNetworkDeviceInfo(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_GetNetworkDeviceInfo(
        ::grpc::experimental::MessageAllocator< ::networkService::GetNetworkDeviceInfoRequest, ::networkService::GetNetworkDeviceInfoResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::networkService::GetNetworkDeviceInfoRequest, ::networkService::GetNetworkDeviceInfoResponse>*>(
          ::grpc::Service::experimental().GetHandler(3))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetNetworkDeviceInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNetworkDeviceInfo(::grpc::ServerContext* context, const ::networkService::GetNetworkDeviceInfoRequest* request, ::networkService::GetNetworkDeviceInfoResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetNetworkDeviceInfo(::grpc::ServerContext* context, const ::networkService::GetNetworkDeviceInfoRequest* request, ::networkService::GetNetworkDeviceInfoResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_UpdateNetworkDeviceInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_UpdateNetworkDeviceInfo() {
      ::grpc::Service::experimental().MarkMethodCallback(4,
        new ::grpc::internal::CallbackUnaryHandler< ::networkService::UpdateNetworkDeviceInfoRequest, ::networkService::UpdateNetworkDeviceInfoResponse>(
          [this](::grpc::ServerContext* context,
                 const ::networkService::UpdateNetworkDeviceInfoRequest* request,
                 ::networkService::UpdateNetworkDeviceInfoResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->UpdateNetworkDeviceInfo(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_UpdateNetworkDeviceInfo(
        ::grpc::experimental::MessageAllocator< ::networkService::UpdateNetworkDeviceInfoRequest, ::networkService::UpdateNetworkDeviceInfoResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::networkService::UpdateNetworkDeviceInfoRequest, ::networkService::UpdateNetworkDeviceInfoResponse>*>(
          ::grpc::Service::experimental().GetHandler(4))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_UpdateNetworkDeviceInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateNetworkDeviceInfo(::grpc::ServerContext* context, const ::networkService::UpdateNetworkDeviceInfoRequest* request, ::networkService::UpdateNetworkDeviceInfoResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void UpdateNetworkDeviceInfo(::grpc::ServerContext* context, const ::networkService::UpdateNetworkDeviceInfoRequest* request, ::networkService::UpdateNetworkDeviceInfoResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_ListNetworks<ExperimentalWithCallbackMethod_Connect<ExperimentalWithCallbackMethod_GetStatus<ExperimentalWithCallbackMethod_GetNetworkDeviceInfo<ExperimentalWithCallbackMethod_UpdateNetworkDeviceInfo<Service > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_ListNetworks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListNetworks() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ListNetworks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListNetworks(::grpc::ServerContext* context, const ::networkService::ListNetworksRequest* request, ::grpc::ServerWriter< ::networkService::ListNetworksResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Connect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Connect() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Connect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Connect(::grpc::ServerContext* context, const ::networkService::ConnectRequest* request, ::networkService::ConnectResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetStatus() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStatus(::grpc::ServerContext* context, const ::networkService::GetStatusRequest* request, ::grpc::ServerWriter< ::networkService::GetStatusResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetNetworkDeviceInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetNetworkDeviceInfo() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetNetworkDeviceInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNetworkDeviceInfo(::grpc::ServerContext* context, const ::networkService::GetNetworkDeviceInfoRequest* request, ::networkService::GetNetworkDeviceInfoResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateNetworkDeviceInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_UpdateNetworkDeviceInfo() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_UpdateNetworkDeviceInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateNetworkDeviceInfo(::grpc::ServerContext* context, const ::networkService::UpdateNetworkDeviceInfoRequest* request, ::networkService::UpdateNetworkDeviceInfoResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListNetworks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ListNetworks() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ListNetworks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListNetworks(::grpc::ServerContext* context, const ::networkService::ListNetworksRequest* request, ::grpc::ServerWriter< ::networkService::ListNetworksResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListNetworks(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Connect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Connect() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Connect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Connect(::grpc::ServerContext* context, const ::networkService::ConnectRequest* request, ::networkService::ConnectResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestConnect(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetStatus() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStatus(::grpc::ServerContext* context, const ::networkService::GetStatusRequest* request, ::grpc::ServerWriter< ::networkService::GetStatusResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetNetworkDeviceInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetNetworkDeviceInfo() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetNetworkDeviceInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNetworkDeviceInfo(::grpc::ServerContext* context, const ::networkService::GetNetworkDeviceInfoRequest* request, ::networkService::GetNetworkDeviceInfoResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNetworkDeviceInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateNetworkDeviceInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_UpdateNetworkDeviceInfo() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_UpdateNetworkDeviceInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateNetworkDeviceInfo(::grpc::ServerContext* context, const ::networkService::UpdateNetworkDeviceInfoRequest* request, ::networkService::UpdateNetworkDeviceInfoResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateNetworkDeviceInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ListNetworks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_ListNetworks() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this] { return this->ListNetworks(); }));
    }
    ~ExperimentalWithRawCallbackMethod_ListNetworks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListNetworks(::grpc::ServerContext* context, const ::networkService::ListNetworksRequest* request, ::grpc::ServerWriter< ::networkService::ListNetworksResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* ListNetworks() {
      return new ::grpc::internal::UnimplementedWriteReactor<
        ::grpc::ByteBuffer, ::grpc::ByteBuffer>;}
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Connect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Connect() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Connect(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Connect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Connect(::grpc::ServerContext* context, const ::networkService::ConnectRequest* request, ::networkService::ConnectResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Connect(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GetStatus() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this] { return this->GetStatus(); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStatus(::grpc::ServerContext* context, const ::networkService::GetStatusRequest* request, ::grpc::ServerWriter< ::networkService::GetStatusResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* GetStatus() {
      return new ::grpc::internal::UnimplementedWriteReactor<
        ::grpc::ByteBuffer, ::grpc::ByteBuffer>;}
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetNetworkDeviceInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GetNetworkDeviceInfo() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetNetworkDeviceInfo(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetNetworkDeviceInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNetworkDeviceInfo(::grpc::ServerContext* context, const ::networkService::GetNetworkDeviceInfoRequest* request, ::networkService::GetNetworkDeviceInfoResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetNetworkDeviceInfo(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_UpdateNetworkDeviceInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_UpdateNetworkDeviceInfo() {
      ::grpc::Service::experimental().MarkMethodRawCallback(4,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->UpdateNetworkDeviceInfo(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_UpdateNetworkDeviceInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateNetworkDeviceInfo(::grpc::ServerContext* context, const ::networkService::UpdateNetworkDeviceInfoRequest* request, ::networkService::UpdateNetworkDeviceInfoResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void UpdateNetworkDeviceInfo(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Connect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Connect() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::networkService::ConnectRequest, ::networkService::ConnectResponse>(std::bind(&WithStreamedUnaryMethod_Connect<BaseClass>::StreamedConnect, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Connect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Connect(::grpc::ServerContext* context, const ::networkService::ConnectRequest* request, ::networkService::ConnectResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedConnect(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::networkService::ConnectRequest,::networkService::ConnectResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetNetworkDeviceInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetNetworkDeviceInfo() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::networkService::GetNetworkDeviceInfoRequest, ::networkService::GetNetworkDeviceInfoResponse>(std::bind(&WithStreamedUnaryMethod_GetNetworkDeviceInfo<BaseClass>::StreamedGetNetworkDeviceInfo, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetNetworkDeviceInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetNetworkDeviceInfo(::grpc::ServerContext* context, const ::networkService::GetNetworkDeviceInfoRequest* request, ::networkService::GetNetworkDeviceInfoResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetNetworkDeviceInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::networkService::GetNetworkDeviceInfoRequest,::networkService::GetNetworkDeviceInfoResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateNetworkDeviceInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_UpdateNetworkDeviceInfo() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::networkService::UpdateNetworkDeviceInfoRequest, ::networkService::UpdateNetworkDeviceInfoResponse>(std::bind(&WithStreamedUnaryMethod_UpdateNetworkDeviceInfo<BaseClass>::StreamedUpdateNetworkDeviceInfo, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UpdateNetworkDeviceInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateNetworkDeviceInfo(::grpc::ServerContext* context, const ::networkService::UpdateNetworkDeviceInfoRequest* request, ::networkService::UpdateNetworkDeviceInfoResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateNetworkDeviceInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::networkService::UpdateNetworkDeviceInfoRequest,::networkService::UpdateNetworkDeviceInfoResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Connect<WithStreamedUnaryMethod_GetNetworkDeviceInfo<WithStreamedUnaryMethod_UpdateNetworkDeviceInfo<Service > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_ListNetworks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_ListNetworks() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::SplitServerStreamingHandler< ::networkService::ListNetworksRequest, ::networkService::ListNetworksResponse>(std::bind(&WithSplitStreamingMethod_ListNetworks<BaseClass>::StreamedListNetworks, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_ListNetworks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListNetworks(::grpc::ServerContext* context, const ::networkService::ListNetworksRequest* request, ::grpc::ServerWriter< ::networkService::ListNetworksResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedListNetworks(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::networkService::ListNetworksRequest,::networkService::ListNetworksResponse>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_GetStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_GetStatus() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::SplitServerStreamingHandler< ::networkService::GetStatusRequest, ::networkService::GetStatusResponse>(std::bind(&WithSplitStreamingMethod_GetStatus<BaseClass>::StreamedGetStatus, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_GetStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetStatus(::grpc::ServerContext* context, const ::networkService::GetStatusRequest* request, ::grpc::ServerWriter< ::networkService::GetStatusResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetStatus(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::networkService::GetStatusRequest,::networkService::GetStatusResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_ListNetworks<WithSplitStreamingMethod_GetStatus<Service > > SplitStreamedService;
  typedef WithSplitStreamingMethod_ListNetworks<WithStreamedUnaryMethod_Connect<WithSplitStreamingMethod_GetStatus<WithStreamedUnaryMethod_GetNetworkDeviceInfo<WithStreamedUnaryMethod_UpdateNetworkDeviceInfo<Service > > > > > StreamedService;
};

}  // namespace networkService


#endif  // GRPC_network_2eproto__INCLUDED
