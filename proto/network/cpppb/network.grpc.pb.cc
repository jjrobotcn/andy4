// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: network.proto

#include "network.pb.h"
#include "network.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace networkService {

static const char* NetworkService_method_names[] = {
  "/networkService.NetworkService/ListNetworks",
  "/networkService.NetworkService/Connect",
  "/networkService.NetworkService/GetStatus",
  "/networkService.NetworkService/GetNetworkDeviceInfo",
  "/networkService.NetworkService/UpdateNetworkDeviceInfo",
};

std::unique_ptr< NetworkService::Stub> NetworkService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< NetworkService::Stub> stub(new NetworkService::Stub(channel));
  return stub;
}

NetworkService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_ListNetworks_(NetworkService_method_names[0], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_Connect_(NetworkService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetStatus_(NetworkService_method_names[2], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_GetNetworkDeviceInfo_(NetworkService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateNetworkDeviceInfo_(NetworkService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::ClientReader< ::networkService::ListNetworksResponse>* NetworkService::Stub::ListNetworksRaw(::grpc::ClientContext* context, const ::networkService::ListNetworksRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::networkService::ListNetworksResponse>::Create(channel_.get(), rpcmethod_ListNetworks_, context, request);
}

void NetworkService::Stub::experimental_async::ListNetworks(::grpc::ClientContext* context, ::networkService::ListNetworksRequest* request, ::grpc::experimental::ClientReadReactor< ::networkService::ListNetworksResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::networkService::ListNetworksResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_ListNetworks_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::networkService::ListNetworksResponse>* NetworkService::Stub::AsyncListNetworksRaw(::grpc::ClientContext* context, const ::networkService::ListNetworksRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::networkService::ListNetworksResponse>::Create(channel_.get(), cq, rpcmethod_ListNetworks_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::networkService::ListNetworksResponse>* NetworkService::Stub::PrepareAsyncListNetworksRaw(::grpc::ClientContext* context, const ::networkService::ListNetworksRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::networkService::ListNetworksResponse>::Create(channel_.get(), cq, rpcmethod_ListNetworks_, context, request, false, nullptr);
}

::grpc::Status NetworkService::Stub::Connect(::grpc::ClientContext* context, const ::networkService::ConnectRequest& request, ::networkService::ConnectResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Connect_, context, request, response);
}

void NetworkService::Stub::experimental_async::Connect(::grpc::ClientContext* context, const ::networkService::ConnectRequest* request, ::networkService::ConnectResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Connect_, context, request, response, std::move(f));
}

void NetworkService::Stub::experimental_async::Connect(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::networkService::ConnectResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Connect_, context, request, response, std::move(f));
}

void NetworkService::Stub::experimental_async::Connect(::grpc::ClientContext* context, const ::networkService::ConnectRequest* request, ::networkService::ConnectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Connect_, context, request, response, reactor);
}

void NetworkService::Stub::experimental_async::Connect(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::networkService::ConnectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Connect_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::networkService::ConnectResponse>* NetworkService::Stub::AsyncConnectRaw(::grpc::ClientContext* context, const ::networkService::ConnectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::networkService::ConnectResponse>::Create(channel_.get(), cq, rpcmethod_Connect_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::networkService::ConnectResponse>* NetworkService::Stub::PrepareAsyncConnectRaw(::grpc::ClientContext* context, const ::networkService::ConnectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::networkService::ConnectResponse>::Create(channel_.get(), cq, rpcmethod_Connect_, context, request, false);
}

::grpc::ClientReader< ::networkService::GetStatusResponse>* NetworkService::Stub::GetStatusRaw(::grpc::ClientContext* context, const ::networkService::GetStatusRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::networkService::GetStatusResponse>::Create(channel_.get(), rpcmethod_GetStatus_, context, request);
}

void NetworkService::Stub::experimental_async::GetStatus(::grpc::ClientContext* context, ::networkService::GetStatusRequest* request, ::grpc::experimental::ClientReadReactor< ::networkService::GetStatusResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::networkService::GetStatusResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_GetStatus_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::networkService::GetStatusResponse>* NetworkService::Stub::AsyncGetStatusRaw(::grpc::ClientContext* context, const ::networkService::GetStatusRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::networkService::GetStatusResponse>::Create(channel_.get(), cq, rpcmethod_GetStatus_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::networkService::GetStatusResponse>* NetworkService::Stub::PrepareAsyncGetStatusRaw(::grpc::ClientContext* context, const ::networkService::GetStatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::networkService::GetStatusResponse>::Create(channel_.get(), cq, rpcmethod_GetStatus_, context, request, false, nullptr);
}

::grpc::Status NetworkService::Stub::GetNetworkDeviceInfo(::grpc::ClientContext* context, const ::networkService::GetNetworkDeviceInfoRequest& request, ::networkService::GetNetworkDeviceInfoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetNetworkDeviceInfo_, context, request, response);
}

void NetworkService::Stub::experimental_async::GetNetworkDeviceInfo(::grpc::ClientContext* context, const ::networkService::GetNetworkDeviceInfoRequest* request, ::networkService::GetNetworkDeviceInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetNetworkDeviceInfo_, context, request, response, std::move(f));
}

void NetworkService::Stub::experimental_async::GetNetworkDeviceInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::networkService::GetNetworkDeviceInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetNetworkDeviceInfo_, context, request, response, std::move(f));
}

void NetworkService::Stub::experimental_async::GetNetworkDeviceInfo(::grpc::ClientContext* context, const ::networkService::GetNetworkDeviceInfoRequest* request, ::networkService::GetNetworkDeviceInfoResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetNetworkDeviceInfo_, context, request, response, reactor);
}

void NetworkService::Stub::experimental_async::GetNetworkDeviceInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::networkService::GetNetworkDeviceInfoResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetNetworkDeviceInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::networkService::GetNetworkDeviceInfoResponse>* NetworkService::Stub::AsyncGetNetworkDeviceInfoRaw(::grpc::ClientContext* context, const ::networkService::GetNetworkDeviceInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::networkService::GetNetworkDeviceInfoResponse>::Create(channel_.get(), cq, rpcmethod_GetNetworkDeviceInfo_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::networkService::GetNetworkDeviceInfoResponse>* NetworkService::Stub::PrepareAsyncGetNetworkDeviceInfoRaw(::grpc::ClientContext* context, const ::networkService::GetNetworkDeviceInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::networkService::GetNetworkDeviceInfoResponse>::Create(channel_.get(), cq, rpcmethod_GetNetworkDeviceInfo_, context, request, false);
}

::grpc::Status NetworkService::Stub::UpdateNetworkDeviceInfo(::grpc::ClientContext* context, const ::networkService::UpdateNetworkDeviceInfoRequest& request, ::networkService::UpdateNetworkDeviceInfoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateNetworkDeviceInfo_, context, request, response);
}

void NetworkService::Stub::experimental_async::UpdateNetworkDeviceInfo(::grpc::ClientContext* context, const ::networkService::UpdateNetworkDeviceInfoRequest* request, ::networkService::UpdateNetworkDeviceInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateNetworkDeviceInfo_, context, request, response, std::move(f));
}

void NetworkService::Stub::experimental_async::UpdateNetworkDeviceInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::networkService::UpdateNetworkDeviceInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateNetworkDeviceInfo_, context, request, response, std::move(f));
}

void NetworkService::Stub::experimental_async::UpdateNetworkDeviceInfo(::grpc::ClientContext* context, const ::networkService::UpdateNetworkDeviceInfoRequest* request, ::networkService::UpdateNetworkDeviceInfoResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UpdateNetworkDeviceInfo_, context, request, response, reactor);
}

void NetworkService::Stub::experimental_async::UpdateNetworkDeviceInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::networkService::UpdateNetworkDeviceInfoResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UpdateNetworkDeviceInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::networkService::UpdateNetworkDeviceInfoResponse>* NetworkService::Stub::AsyncUpdateNetworkDeviceInfoRaw(::grpc::ClientContext* context, const ::networkService::UpdateNetworkDeviceInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::networkService::UpdateNetworkDeviceInfoResponse>::Create(channel_.get(), cq, rpcmethod_UpdateNetworkDeviceInfo_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::networkService::UpdateNetworkDeviceInfoResponse>* NetworkService::Stub::PrepareAsyncUpdateNetworkDeviceInfoRaw(::grpc::ClientContext* context, const ::networkService::UpdateNetworkDeviceInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::networkService::UpdateNetworkDeviceInfoResponse>::Create(channel_.get(), cq, rpcmethod_UpdateNetworkDeviceInfo_, context, request, false);
}

NetworkService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NetworkService_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< NetworkService::Service, ::networkService::ListNetworksRequest, ::networkService::ListNetworksResponse>(
          std::mem_fn(&NetworkService::Service::ListNetworks), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NetworkService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NetworkService::Service, ::networkService::ConnectRequest, ::networkService::ConnectResponse>(
          std::mem_fn(&NetworkService::Service::Connect), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NetworkService_method_names[2],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< NetworkService::Service, ::networkService::GetStatusRequest, ::networkService::GetStatusResponse>(
          std::mem_fn(&NetworkService::Service::GetStatus), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NetworkService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NetworkService::Service, ::networkService::GetNetworkDeviceInfoRequest, ::networkService::GetNetworkDeviceInfoResponse>(
          std::mem_fn(&NetworkService::Service::GetNetworkDeviceInfo), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NetworkService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NetworkService::Service, ::networkService::UpdateNetworkDeviceInfoRequest, ::networkService::UpdateNetworkDeviceInfoResponse>(
          std::mem_fn(&NetworkService::Service::UpdateNetworkDeviceInfo), this)));
}

NetworkService::Service::~Service() {
}

::grpc::Status NetworkService::Service::ListNetworks(::grpc::ServerContext* context, const ::networkService::ListNetworksRequest* request, ::grpc::ServerWriter< ::networkService::ListNetworksResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NetworkService::Service::Connect(::grpc::ServerContext* context, const ::networkService::ConnectRequest* request, ::networkService::ConnectResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NetworkService::Service::GetStatus(::grpc::ServerContext* context, const ::networkService::GetStatusRequest* request, ::grpc::ServerWriter< ::networkService::GetStatusResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NetworkService::Service::GetNetworkDeviceInfo(::grpc::ServerContext* context, const ::networkService::GetNetworkDeviceInfoRequest* request, ::networkService::GetNetworkDeviceInfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NetworkService::Service::UpdateNetworkDeviceInfo(::grpc::ServerContext* context, const ::networkService::UpdateNetworkDeviceInfoRequest* request, ::networkService::UpdateNetworkDeviceInfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace networkService

