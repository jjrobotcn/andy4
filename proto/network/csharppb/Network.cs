// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: network.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace NetworkService {

  /// <summary>Holder for reflection information generated from network.proto</summary>
  public static partial class NetworkReflection {

    #region Descriptor
    /// <summary>File descriptor for network.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static NetworkReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1uZXR3b3JrLnByb3RvEg5uZXR3b3JrU2VydmljZRocZ29vZ2xlL2FwaS9h",
            "bm5vdGF0aW9ucy5wcm90byJHCgtOZXR3b3JrSW5mbxIMCgRuYW1lGAEgASgJ",
            "EgsKA21hYxgCIAEoCRIPCgdjaGFubmVsGAMgASgNEgwKBHJzc2kYBCABKA0i",
            "FQoTTGlzdE5ldHdvcmtzUmVxdWVzdCJKChRMaXN0TmV0d29ya3NSZXNwb25z",
            "ZRIyCg1uZXR3b3Jrc19pbmZvGAEgAygLMhsubmV0d29ya1NlcnZpY2UuTmV0",
            "d29ya0luZm8ikwEKDkNvbm5lY3RSZXF1ZXN0EjUKDG5ldHdvcmtfaW5mbxgB",
            "IAEoCzIbLm5ldHdvcmtTZXJ2aWNlLk5ldHdvcmtJbmZvQgIYARIMCgRzc2lk",
            "GAMgASgJEgsKA3B3ZBgCIAEoCRISCgprZWVwX2FsaXZlGAQgASgIEhsKE2tl",
            "ZXBfYWxpdmVfaW50ZXJ2YWwYBSABKA0iiAEKDU5ldHdvcmtTdGF0dXMSJgoG",
            "c3RhdHVzGAEgASgOMhYubmV0d29ya1NlcnZpY2UuU3RhdHVzEgwKBG5hbWUY",
            "AiABKAkSEQoJcHVibGljX2lwGAMgASgJEgwKBHJzc2kYBCABKA0SDgoGdXBs",
            "b2FkGAUgASgNEhAKCGRvd25sb2FkGAYgASgNIhEKD0Nvbm5lY3RSZXNwb25z",
            "ZSISChBHZXRTdGF0dXNSZXF1ZXN0IkoKEUdldFN0YXR1c1Jlc3BvbnNlEjUK",
            "Dm5ldHdvcmtfc3RhdHVzGAEgASgLMh0ubmV0d29ya1NlcnZpY2UuTmV0d29y",
            "a1N0YXR1cyI1ChFOZXR3b3JrRGV2aWNlSW5mbxIMCgRzc2lkGAEgASgJEhIK",
            "CmNyZWRlbnRpYWwYAiABKAkiNgobR2V0TmV0d29ya0RldmljZUluZm9SZXF1",
            "ZXN0EhcKD3dpdGhfY3JlZGVudGlhbBgBIAEoCCJeChxHZXROZXR3b3JrRGV2",
            "aWNlSW5mb1Jlc3BvbnNlEj4KE25ldHdvcmtfZGV2aWNlX2luZm8YASABKAsy",
            "IS5uZXR3b3JrU2VydmljZS5OZXR3b3JrRGV2aWNlSW5mbyJgCh5VcGRhdGVO",
            "ZXR3b3JrRGV2aWNlSW5mb1JlcXVlc3QSPgoTbmV0d29ya19kZXZpY2VfaW5m",
            "bxgBIAEoCzIhLm5ldHdvcmtTZXJ2aWNlLk5ldHdvcmtEZXZpY2VJbmZvIiEK",
            "H1VwZGF0ZU5ldHdvcmtEZXZpY2VJbmZvUmVzcG9uc2UqRgoGU3RhdHVzEgsK",
            "B1VOS05PV04QABIQCgxESVNDT05ORUNURUQQARIOCgpDT05ORUNUSU5HEAIS",
            "DQoJQ09OTkVDVEVEEAMykQUKDk5ldHdvcmtTZXJ2aWNlEl0KDExpc3ROZXR3",
            "b3JrcxIjLm5ldHdvcmtTZXJ2aWNlLkxpc3ROZXR3b3Jrc1JlcXVlc3QaJC5u",
            "ZXR3b3JrU2VydmljZS5MaXN0TmV0d29ya3NSZXNwb25zZSIAMAESbgoHQ29u",
            "bmVjdBIeLm5ldHdvcmtTZXJ2aWNlLkNvbm5lY3RSZXF1ZXN0Gh8ubmV0d29y",
            "a1NlcnZpY2UuQ29ubmVjdFJlc3BvbnNlIiKC0+STAhwiFy9hcGkvdjIvbmV0",
            "d29yay9jb25uZWN0OgEqElQKCUdldFN0YXR1cxIgLm5ldHdvcmtTZXJ2aWNl",
            "LkdldFN0YXR1c1JlcXVlc3QaIS5uZXR3b3JrU2VydmljZS5HZXRTdGF0dXNS",
            "ZXNwb25zZSIAMAESpQEKFEdldE5ldHdvcmtEZXZpY2VJbmZvEisubmV0d29y",
            "a1NlcnZpY2UuR2V0TmV0d29ya0RldmljZUluZm9SZXF1ZXN0GiwubmV0d29y",
            "a1NlcnZpY2UuR2V0TmV0d29ya0RldmljZUluZm9SZXNwb25zZSIygtPkkwIs",
            "IicvYXBpL3YyL25ldHdvcmsvZ2V0X25ldHdvcmtfZGV2aWNlX2luZm86ASoS",
            "sQEKF1VwZGF0ZU5ldHdvcmtEZXZpY2VJbmZvEi4ubmV0d29ya1NlcnZpY2Uu",
            "VXBkYXRlTmV0d29ya0RldmljZUluZm9SZXF1ZXN0Gi8ubmV0d29ya1NlcnZp",
            "Y2UuVXBkYXRlTmV0d29ya0RldmljZUluZm9SZXNwb25zZSI1gtPkkwIvIiov",
            "YXBpL3YyL25ldHdvcmsvdXBkYXRlX25ldHdvcmtfZGV2aWNlX2luZm86ASpi",
            "BnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Api.AnnotationsReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::NetworkService.Status), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::NetworkService.NetworkInfo), global::NetworkService.NetworkInfo.Parser, new[]{ "Name", "Mac", "Channel", "Rssi" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetworkService.ListNetworksRequest), global::NetworkService.ListNetworksRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetworkService.ListNetworksResponse), global::NetworkService.ListNetworksResponse.Parser, new[]{ "NetworksInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetworkService.ConnectRequest), global::NetworkService.ConnectRequest.Parser, new[]{ "NetworkInfo", "Ssid", "Pwd", "KeepAlive", "KeepAliveInterval" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetworkService.NetworkStatus), global::NetworkService.NetworkStatus.Parser, new[]{ "Status", "Name", "PublicIp", "Rssi", "Upload", "Download" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetworkService.ConnectResponse), global::NetworkService.ConnectResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetworkService.GetStatusRequest), global::NetworkService.GetStatusRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetworkService.GetStatusResponse), global::NetworkService.GetStatusResponse.Parser, new[]{ "NetworkStatus" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetworkService.NetworkDeviceInfo), global::NetworkService.NetworkDeviceInfo.Parser, new[]{ "Ssid", "Credential" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetworkService.GetNetworkDeviceInfoRequest), global::NetworkService.GetNetworkDeviceInfoRequest.Parser, new[]{ "WithCredential" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetworkService.GetNetworkDeviceInfoResponse), global::NetworkService.GetNetworkDeviceInfoResponse.Parser, new[]{ "NetworkDeviceInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetworkService.UpdateNetworkDeviceInfoRequest), global::NetworkService.UpdateNetworkDeviceInfoRequest.Parser, new[]{ "NetworkDeviceInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetworkService.UpdateNetworkDeviceInfoResponse), global::NetworkService.UpdateNetworkDeviceInfoResponse.Parser, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// 连接状态
  /// </summary>
  public enum Status {
    /// <summary>
    /// 保留数据
    /// </summary>
    [pbr::OriginalName("UNKNOWN")] Unknown = 0,
    /// <summary>
    /// 连接断开
    /// </summary>
    [pbr::OriginalName("DISCONNECTED")] Disconnected = 1,
    /// <summary>
    /// 连接中
    /// </summary>
    [pbr::OriginalName("CONNECTING")] Connecting = 2,
    /// <summary>
    /// 已连接
    /// </summary>
    [pbr::OriginalName("CONNECTED")] Connected = 3,
  }

  #endregion

  #region Messages
  /// <summary>
  /// 网络信息
  /// </summary>
  public sealed partial class NetworkInfo : pb::IMessage<NetworkInfo> {
    private static readonly pb::MessageParser<NetworkInfo> _parser = new pb::MessageParser<NetworkInfo>(() => new NetworkInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetworkInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetworkService.NetworkReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkInfo(NetworkInfo other) : this() {
      name_ = other.name_;
      mac_ = other.mac_;
      channel_ = other.channel_;
      rssi_ = other.rssi_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkInfo Clone() {
      return new NetworkInfo(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// wifi名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mac" field.</summary>
    public const int MacFieldNumber = 2;
    private string mac_ = "";
    /// <summary>
    /// mac地址
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Mac {
      get { return mac_; }
      set {
        mac_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "channel" field.</summary>
    public const int ChannelFieldNumber = 3;
    private uint channel_;
    /// <summary>
    /// 网络信道
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Channel {
      get { return channel_; }
      set {
        channel_ = value;
      }
    }

    /// <summary>Field number for the "rssi" field.</summary>
    public const int RssiFieldNumber = 4;
    private uint rssi_;
    /// <summary>
    /// 信号强度 0-100
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Rssi {
      get { return rssi_; }
      set {
        rssi_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NetworkInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NetworkInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Mac != other.Mac) return false;
      if (Channel != other.Channel) return false;
      if (Rssi != other.Rssi) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Mac.Length != 0) hash ^= Mac.GetHashCode();
      if (Channel != 0) hash ^= Channel.GetHashCode();
      if (Rssi != 0) hash ^= Rssi.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Mac.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Mac);
      }
      if (Channel != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Channel);
      }
      if (Rssi != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Rssi);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Mac.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Mac);
      }
      if (Channel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Channel);
      }
      if (Rssi != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Rssi);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NetworkInfo other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Mac.Length != 0) {
        Mac = other.Mac;
      }
      if (other.Channel != 0) {
        Channel = other.Channel;
      }
      if (other.Rssi != 0) {
        Rssi = other.Rssi;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Mac = input.ReadString();
            break;
          }
          case 24: {
            Channel = input.ReadUInt32();
            break;
          }
          case 32: {
            Rssi = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 获取网络扫描结果流请求
  /// </summary>
  public sealed partial class ListNetworksRequest : pb::IMessage<ListNetworksRequest> {
    private static readonly pb::MessageParser<ListNetworksRequest> _parser = new pb::MessageParser<ListNetworksRequest>(() => new ListNetworksRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListNetworksRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetworkService.NetworkReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListNetworksRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListNetworksRequest(ListNetworksRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListNetworksRequest Clone() {
      return new ListNetworksRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListNetworksRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListNetworksRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListNetworksRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// 获取网络扫描结果流结果
  /// </summary>
  public sealed partial class ListNetworksResponse : pb::IMessage<ListNetworksResponse> {
    private static readonly pb::MessageParser<ListNetworksResponse> _parser = new pb::MessageParser<ListNetworksResponse>(() => new ListNetworksResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListNetworksResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetworkService.NetworkReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListNetworksResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListNetworksResponse(ListNetworksResponse other) : this() {
      networksInfo_ = other.networksInfo_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListNetworksResponse Clone() {
      return new ListNetworksResponse(this);
    }

    /// <summary>Field number for the "networks_info" field.</summary>
    public const int NetworksInfoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::NetworkService.NetworkInfo> _repeated_networksInfo_codec
        = pb::FieldCodec.ForMessage(10, global::NetworkService.NetworkInfo.Parser);
    private readonly pbc::RepeatedField<global::NetworkService.NetworkInfo> networksInfo_ = new pbc::RepeatedField<global::NetworkService.NetworkInfo>();
    /// <summary>
    /// 网络信息列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NetworkService.NetworkInfo> NetworksInfo {
      get { return networksInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListNetworksResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListNetworksResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!networksInfo_.Equals(other.networksInfo_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= networksInfo_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      networksInfo_.WriteTo(output, _repeated_networksInfo_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += networksInfo_.CalculateSize(_repeated_networksInfo_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListNetworksResponse other) {
      if (other == null) {
        return;
      }
      networksInfo_.Add(other.networksInfo_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            networksInfo_.AddEntriesFrom(input, _repeated_networksInfo_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 连接至指定网络请求
  /// </summary>
  public sealed partial class ConnectRequest : pb::IMessage<ConnectRequest> {
    private static readonly pb::MessageParser<ConnectRequest> _parser = new pb::MessageParser<ConnectRequest>(() => new ConnectRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConnectRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetworkService.NetworkReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectRequest(ConnectRequest other) : this() {
      networkInfo_ = other.networkInfo_ != null ? other.networkInfo_.Clone() : null;
      ssid_ = other.ssid_;
      pwd_ = other.pwd_;
      keepAlive_ = other.keepAlive_;
      keepAliveInterval_ = other.keepAliveInterval_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectRequest Clone() {
      return new ConnectRequest(this);
    }

    /// <summary>Field number for the "network_info" field.</summary>
    public const int NetworkInfoFieldNumber = 1;
    private global::NetworkService.NetworkInfo networkInfo_;
    /// <summary>
    /// !!! >=v1.2.0可不再使用此NetworkInfo请求，此参数声明作废，请使用更为精简的ssid作为连接目标参数
    /// 目标网络信息
    /// 此对象应由ListNetworks.ListNetworksResponse.NetworkInfo中获取
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NetworkService.NetworkInfo NetworkInfo {
      get { return networkInfo_; }
      set {
        networkInfo_ = value;
      }
    }

    /// <summary>Field number for the "ssid" field.</summary>
    public const int SsidFieldNumber = 3;
    private string ssid_ = "";
    /// <summary>
    /// >=v1.2.0
    /// 目标网络ssid
    /// 自动获取当前的NetworkInfo信息中首个匹配ssid，
    /// 若匹配失败将直接返回连接错误
    /// 不支持隐藏ssid的链接
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ssid {
      get { return ssid_; }
      set {
        ssid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pwd" field.</summary>
    public const int PwdFieldNumber = 2;
    private string pwd_ = "";
    /// <summary>
    /// wifi密码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Pwd {
      get { return pwd_; }
      set {
        pwd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "keep_alive" field.</summary>
    public const int KeepAliveFieldNumber = 4;
    private bool keepAlive_;
    /// <summary>
    /// >=v1.2.0
    /// 保持当前外部连接
    /// 配置此参数后将立即启动状态监听。
    /// 若出现DISCONNECTED状态且keep_alive_interval间隔时间内，
    /// 状态持续为DISCONNECTED状态将自动发起ConnectRequest。
    /// 在等待期间出现非DISCONNECTED的任意状态切换，
    /// keep_alive_interval都将重新计算。
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool KeepAlive {
      get { return keepAlive_; }
      set {
        keepAlive_ = value;
      }
    }

    /// <summary>Field number for the "keep_alive_interval" field.</summary>
    public const int KeepAliveIntervalFieldNumber = 5;
    private uint keepAliveInterval_;
    /// <summary>
    /// >=v1.2.0
    /// 保持当前连接判断间隔, 默认及最小为30s
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint KeepAliveInterval {
      get { return keepAliveInterval_; }
      set {
        keepAliveInterval_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConnectRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConnectRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(NetworkInfo, other.NetworkInfo)) return false;
      if (Ssid != other.Ssid) return false;
      if (Pwd != other.Pwd) return false;
      if (KeepAlive != other.KeepAlive) return false;
      if (KeepAliveInterval != other.KeepAliveInterval) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (networkInfo_ != null) hash ^= NetworkInfo.GetHashCode();
      if (Ssid.Length != 0) hash ^= Ssid.GetHashCode();
      if (Pwd.Length != 0) hash ^= Pwd.GetHashCode();
      if (KeepAlive != false) hash ^= KeepAlive.GetHashCode();
      if (KeepAliveInterval != 0) hash ^= KeepAliveInterval.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (networkInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(NetworkInfo);
      }
      if (Pwd.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Pwd);
      }
      if (Ssid.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Ssid);
      }
      if (KeepAlive != false) {
        output.WriteRawTag(32);
        output.WriteBool(KeepAlive);
      }
      if (KeepAliveInterval != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(KeepAliveInterval);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (networkInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NetworkInfo);
      }
      if (Ssid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ssid);
      }
      if (Pwd.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Pwd);
      }
      if (KeepAlive != false) {
        size += 1 + 1;
      }
      if (KeepAliveInterval != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(KeepAliveInterval);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConnectRequest other) {
      if (other == null) {
        return;
      }
      if (other.networkInfo_ != null) {
        if (networkInfo_ == null) {
          NetworkInfo = new global::NetworkService.NetworkInfo();
        }
        NetworkInfo.MergeFrom(other.NetworkInfo);
      }
      if (other.Ssid.Length != 0) {
        Ssid = other.Ssid;
      }
      if (other.Pwd.Length != 0) {
        Pwd = other.Pwd;
      }
      if (other.KeepAlive != false) {
        KeepAlive = other.KeepAlive;
      }
      if (other.KeepAliveInterval != 0) {
        KeepAliveInterval = other.KeepAliveInterval;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (networkInfo_ == null) {
              NetworkInfo = new global::NetworkService.NetworkInfo();
            }
            input.ReadMessage(NetworkInfo);
            break;
          }
          case 18: {
            Pwd = input.ReadString();
            break;
          }
          case 26: {
            Ssid = input.ReadString();
            break;
          }
          case 32: {
            KeepAlive = input.ReadBool();
            break;
          }
          case 40: {
            KeepAliveInterval = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 网络状态
  /// </summary>
  public sealed partial class NetworkStatus : pb::IMessage<NetworkStatus> {
    private static readonly pb::MessageParser<NetworkStatus> _parser = new pb::MessageParser<NetworkStatus>(() => new NetworkStatus());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetworkStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetworkService.NetworkReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkStatus(NetworkStatus other) : this() {
      status_ = other.status_;
      name_ = other.name_;
      publicIp_ = other.publicIp_;
      rssi_ = other.rssi_;
      upload_ = other.upload_;
      download_ = other.download_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkStatus Clone() {
      return new NetworkStatus(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::NetworkService.Status status_ = 0;
    /// <summary>
    /// 连接状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NetworkService.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// 连接的上级网络ssid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "public_ip" field.</summary>
    public const int PublicIpFieldNumber = 3;
    private string publicIp_ = "";
    /// <summary>
    /// 连接的上级网络ip
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PublicIp {
      get { return publicIp_; }
      set {
        publicIp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "rssi" field.</summary>
    public const int RssiFieldNumber = 4;
    private uint rssi_;
    /// <summary>
    /// 当前信号强度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Rssi {
      get { return rssi_; }
      set {
        rssi_ = value;
      }
    }

    /// <summary>Field number for the "upload" field.</summary>
    public const int UploadFieldNumber = 5;
    private uint upload_;
    /// <summary>
    /// 当前上传速度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Upload {
      get { return upload_; }
      set {
        upload_ = value;
      }
    }

    /// <summary>Field number for the "download" field.</summary>
    public const int DownloadFieldNumber = 6;
    private uint download_;
    /// <summary>
    /// 当前下载速度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Download {
      get { return download_; }
      set {
        download_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NetworkStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NetworkStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (Name != other.Name) return false;
      if (PublicIp != other.PublicIp) return false;
      if (Rssi != other.Rssi) return false;
      if (Upload != other.Upload) return false;
      if (Download != other.Download) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (PublicIp.Length != 0) hash ^= PublicIp.GetHashCode();
      if (Rssi != 0) hash ^= Rssi.GetHashCode();
      if (Upload != 0) hash ^= Upload.GetHashCode();
      if (Download != 0) hash ^= Download.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (PublicIp.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PublicIp);
      }
      if (Rssi != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Rssi);
      }
      if (Upload != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Upload);
      }
      if (Download != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Download);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (PublicIp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PublicIp);
      }
      if (Rssi != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Rssi);
      }
      if (Upload != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Upload);
      }
      if (Download != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Download);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NetworkStatus other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.PublicIp.Length != 0) {
        PublicIp = other.PublicIp;
      }
      if (other.Rssi != 0) {
        Rssi = other.Rssi;
      }
      if (other.Upload != 0) {
        Upload = other.Upload;
      }
      if (other.Download != 0) {
        Download = other.Download;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Status = (global::NetworkService.Status) input.ReadEnum();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            PublicIp = input.ReadString();
            break;
          }
          case 32: {
            Rssi = input.ReadUInt32();
            break;
          }
          case 40: {
            Upload = input.ReadUInt32();
            break;
          }
          case 48: {
            Download = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 连接至指定网络请求结果
  /// </summary>
  public sealed partial class ConnectResponse : pb::IMessage<ConnectResponse> {
    private static readonly pb::MessageParser<ConnectResponse> _parser = new pb::MessageParser<ConnectResponse>(() => new ConnectResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConnectResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetworkService.NetworkReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectResponse(ConnectResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectResponse Clone() {
      return new ConnectResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConnectResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConnectResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConnectResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// 获取连接状态流请求
  /// </summary>
  public sealed partial class GetStatusRequest : pb::IMessage<GetStatusRequest> {
    private static readonly pb::MessageParser<GetStatusRequest> _parser = new pb::MessageParser<GetStatusRequest>(() => new GetStatusRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetStatusRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetworkService.NetworkReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetStatusRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetStatusRequest(GetStatusRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetStatusRequest Clone() {
      return new GetStatusRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetStatusRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetStatusRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetStatusRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// 获取连接状态流结果
  /// </summary>
  public sealed partial class GetStatusResponse : pb::IMessage<GetStatusResponse> {
    private static readonly pb::MessageParser<GetStatusResponse> _parser = new pb::MessageParser<GetStatusResponse>(() => new GetStatusResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetStatusResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetworkService.NetworkReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetStatusResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetStatusResponse(GetStatusResponse other) : this() {
      networkStatus_ = other.networkStatus_ != null ? other.networkStatus_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetStatusResponse Clone() {
      return new GetStatusResponse(this);
    }

    /// <summary>Field number for the "network_status" field.</summary>
    public const int NetworkStatusFieldNumber = 1;
    private global::NetworkService.NetworkStatus networkStatus_;
    /// <summary>
    /// 网络状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NetworkService.NetworkStatus NetworkStatus {
      get { return networkStatus_; }
      set {
        networkStatus_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetStatusResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetStatusResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(NetworkStatus, other.NetworkStatus)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (networkStatus_ != null) hash ^= NetworkStatus.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (networkStatus_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(NetworkStatus);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (networkStatus_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NetworkStatus);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetStatusResponse other) {
      if (other == null) {
        return;
      }
      if (other.networkStatus_ != null) {
        if (networkStatus_ == null) {
          NetworkStatus = new global::NetworkService.NetworkStatus();
        }
        NetworkStatus.MergeFrom(other.NetworkStatus);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (networkStatus_ == null) {
              NetworkStatus = new global::NetworkService.NetworkStatus();
            }
            input.ReadMessage(NetworkStatus);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 网络设备信息
  /// </summary>
  public sealed partial class NetworkDeviceInfo : pb::IMessage<NetworkDeviceInfo> {
    private static readonly pb::MessageParser<NetworkDeviceInfo> _parser = new pb::MessageParser<NetworkDeviceInfo>(() => new NetworkDeviceInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetworkDeviceInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetworkService.NetworkReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkDeviceInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkDeviceInfo(NetworkDeviceInfo other) : this() {
      ssid_ = other.ssid_;
      credential_ = other.credential_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkDeviceInfo Clone() {
      return new NetworkDeviceInfo(this);
    }

    /// <summary>Field number for the "ssid" field.</summary>
    public const int SsidFieldNumber = 1;
    private string ssid_ = "";
    /// <summary>
    /// wifi名
    /// 5G网络名为(2.4G)-5G
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ssid {
      get { return ssid_; }
      set {
        ssid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "credential" field.</summary>
    public const int CredentialFieldNumber = 2;
    private string credential_ = "";
    /// <summary>
    /// 密码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Credential {
      get { return credential_; }
      set {
        credential_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NetworkDeviceInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NetworkDeviceInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ssid != other.Ssid) return false;
      if (Credential != other.Credential) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ssid.Length != 0) hash ^= Ssid.GetHashCode();
      if (Credential.Length != 0) hash ^= Credential.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ssid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Ssid);
      }
      if (Credential.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Credential);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ssid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ssid);
      }
      if (Credential.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Credential);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NetworkDeviceInfo other) {
      if (other == null) {
        return;
      }
      if (other.Ssid.Length != 0) {
        Ssid = other.Ssid;
      }
      if (other.Credential.Length != 0) {
        Credential = other.Credential;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Ssid = input.ReadString();
            break;
          }
          case 18: {
            Credential = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 获取网络设备相关信息请求
  /// </summary>
  public sealed partial class GetNetworkDeviceInfoRequest : pb::IMessage<GetNetworkDeviceInfoRequest> {
    private static readonly pb::MessageParser<GetNetworkDeviceInfoRequest> _parser = new pb::MessageParser<GetNetworkDeviceInfoRequest>(() => new GetNetworkDeviceInfoRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetNetworkDeviceInfoRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetworkService.NetworkReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetNetworkDeviceInfoRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetNetworkDeviceInfoRequest(GetNetworkDeviceInfoRequest other) : this() {
      withCredential_ = other.withCredential_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetNetworkDeviceInfoRequest Clone() {
      return new GetNetworkDeviceInfoRequest(this);
    }

    /// <summary>Field number for the "with_credential" field.</summary>
    public const int WithCredentialFieldNumber = 1;
    private bool withCredential_;
    /// <summary>
    /// 是否获取密码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool WithCredential {
      get { return withCredential_; }
      set {
        withCredential_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetNetworkDeviceInfoRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetNetworkDeviceInfoRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WithCredential != other.WithCredential) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WithCredential != false) hash ^= WithCredential.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (WithCredential != false) {
        output.WriteRawTag(8);
        output.WriteBool(WithCredential);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WithCredential != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetNetworkDeviceInfoRequest other) {
      if (other == null) {
        return;
      }
      if (other.WithCredential != false) {
        WithCredential = other.WithCredential;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            WithCredential = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 获取网络设备相关信息结果
  /// </summary>
  public sealed partial class GetNetworkDeviceInfoResponse : pb::IMessage<GetNetworkDeviceInfoResponse> {
    private static readonly pb::MessageParser<GetNetworkDeviceInfoResponse> _parser = new pb::MessageParser<GetNetworkDeviceInfoResponse>(() => new GetNetworkDeviceInfoResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetNetworkDeviceInfoResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetworkService.NetworkReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetNetworkDeviceInfoResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetNetworkDeviceInfoResponse(GetNetworkDeviceInfoResponse other) : this() {
      networkDeviceInfo_ = other.networkDeviceInfo_ != null ? other.networkDeviceInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetNetworkDeviceInfoResponse Clone() {
      return new GetNetworkDeviceInfoResponse(this);
    }

    /// <summary>Field number for the "network_device_info" field.</summary>
    public const int NetworkDeviceInfoFieldNumber = 1;
    private global::NetworkService.NetworkDeviceInfo networkDeviceInfo_;
    /// <summary>
    /// 网络设备信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NetworkService.NetworkDeviceInfo NetworkDeviceInfo {
      get { return networkDeviceInfo_; }
      set {
        networkDeviceInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetNetworkDeviceInfoResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetNetworkDeviceInfoResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(NetworkDeviceInfo, other.NetworkDeviceInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (networkDeviceInfo_ != null) hash ^= NetworkDeviceInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (networkDeviceInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(NetworkDeviceInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (networkDeviceInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NetworkDeviceInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetNetworkDeviceInfoResponse other) {
      if (other == null) {
        return;
      }
      if (other.networkDeviceInfo_ != null) {
        if (networkDeviceInfo_ == null) {
          NetworkDeviceInfo = new global::NetworkService.NetworkDeviceInfo();
        }
        NetworkDeviceInfo.MergeFrom(other.NetworkDeviceInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (networkDeviceInfo_ == null) {
              NetworkDeviceInfo = new global::NetworkService.NetworkDeviceInfo();
            }
            input.ReadMessage(NetworkDeviceInfo);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 修改网络设备相关信息请求
  /// </summary>
  public sealed partial class UpdateNetworkDeviceInfoRequest : pb::IMessage<UpdateNetworkDeviceInfoRequest> {
    private static readonly pb::MessageParser<UpdateNetworkDeviceInfoRequest> _parser = new pb::MessageParser<UpdateNetworkDeviceInfoRequest>(() => new UpdateNetworkDeviceInfoRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateNetworkDeviceInfoRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetworkService.NetworkReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateNetworkDeviceInfoRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateNetworkDeviceInfoRequest(UpdateNetworkDeviceInfoRequest other) : this() {
      networkDeviceInfo_ = other.networkDeviceInfo_ != null ? other.networkDeviceInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateNetworkDeviceInfoRequest Clone() {
      return new UpdateNetworkDeviceInfoRequest(this);
    }

    /// <summary>Field number for the "network_device_info" field.</summary>
    public const int NetworkDeviceInfoFieldNumber = 1;
    private global::NetworkService.NetworkDeviceInfo networkDeviceInfo_;
    /// <summary>
    /// 网络设备信息
    /// NetworkInfo中留空为不更新
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NetworkService.NetworkDeviceInfo NetworkDeviceInfo {
      get { return networkDeviceInfo_; }
      set {
        networkDeviceInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateNetworkDeviceInfoRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateNetworkDeviceInfoRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(NetworkDeviceInfo, other.NetworkDeviceInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (networkDeviceInfo_ != null) hash ^= NetworkDeviceInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (networkDeviceInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(NetworkDeviceInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (networkDeviceInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NetworkDeviceInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateNetworkDeviceInfoRequest other) {
      if (other == null) {
        return;
      }
      if (other.networkDeviceInfo_ != null) {
        if (networkDeviceInfo_ == null) {
          NetworkDeviceInfo = new global::NetworkService.NetworkDeviceInfo();
        }
        NetworkDeviceInfo.MergeFrom(other.NetworkDeviceInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (networkDeviceInfo_ == null) {
              NetworkDeviceInfo = new global::NetworkService.NetworkDeviceInfo();
            }
            input.ReadMessage(NetworkDeviceInfo);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 修改网络设备相关信息结果
  /// </summary>
  public sealed partial class UpdateNetworkDeviceInfoResponse : pb::IMessage<UpdateNetworkDeviceInfoResponse> {
    private static readonly pb::MessageParser<UpdateNetworkDeviceInfoResponse> _parser = new pb::MessageParser<UpdateNetworkDeviceInfoResponse>(() => new UpdateNetworkDeviceInfoResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateNetworkDeviceInfoResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetworkService.NetworkReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateNetworkDeviceInfoResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateNetworkDeviceInfoResponse(UpdateNetworkDeviceInfoResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateNetworkDeviceInfoResponse Clone() {
      return new UpdateNetworkDeviceInfoResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateNetworkDeviceInfoResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateNetworkDeviceInfoResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateNetworkDeviceInfoResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
