// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: network.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace NetworkService {
  public static partial class NetworkService
  {
    static readonly string __ServiceName = "networkService.NetworkService";

    static readonly grpc::Marshaller<global::NetworkService.ListNetworksRequest> __Marshaller_networkService_ListNetworksRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::NetworkService.ListNetworksRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::NetworkService.ListNetworksResponse> __Marshaller_networkService_ListNetworksResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::NetworkService.ListNetworksResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::NetworkService.ConnectRequest> __Marshaller_networkService_ConnectRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::NetworkService.ConnectRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::NetworkService.ConnectResponse> __Marshaller_networkService_ConnectResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::NetworkService.ConnectResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::NetworkService.GetStatusRequest> __Marshaller_networkService_GetStatusRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::NetworkService.GetStatusRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::NetworkService.GetStatusResponse> __Marshaller_networkService_GetStatusResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::NetworkService.GetStatusResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::NetworkService.GetNetworkDeviceInfoRequest> __Marshaller_networkService_GetNetworkDeviceInfoRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::NetworkService.GetNetworkDeviceInfoRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::NetworkService.GetNetworkDeviceInfoResponse> __Marshaller_networkService_GetNetworkDeviceInfoResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::NetworkService.GetNetworkDeviceInfoResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::NetworkService.UpdateNetworkDeviceInfoRequest> __Marshaller_networkService_UpdateNetworkDeviceInfoRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::NetworkService.UpdateNetworkDeviceInfoRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::NetworkService.UpdateNetworkDeviceInfoResponse> __Marshaller_networkService_UpdateNetworkDeviceInfoResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::NetworkService.UpdateNetworkDeviceInfoResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::NetworkService.ListNetworksRequest, global::NetworkService.ListNetworksResponse> __Method_ListNetworks = new grpc::Method<global::NetworkService.ListNetworksRequest, global::NetworkService.ListNetworksResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "ListNetworks",
        __Marshaller_networkService_ListNetworksRequest,
        __Marshaller_networkService_ListNetworksResponse);

    static readonly grpc::Method<global::NetworkService.ConnectRequest, global::NetworkService.ConnectResponse> __Method_Connect = new grpc::Method<global::NetworkService.ConnectRequest, global::NetworkService.ConnectResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Connect",
        __Marshaller_networkService_ConnectRequest,
        __Marshaller_networkService_ConnectResponse);

    static readonly grpc::Method<global::NetworkService.GetStatusRequest, global::NetworkService.GetStatusResponse> __Method_GetStatus = new grpc::Method<global::NetworkService.GetStatusRequest, global::NetworkService.GetStatusResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetStatus",
        __Marshaller_networkService_GetStatusRequest,
        __Marshaller_networkService_GetStatusResponse);

    static readonly grpc::Method<global::NetworkService.GetNetworkDeviceInfoRequest, global::NetworkService.GetNetworkDeviceInfoResponse> __Method_GetNetworkDeviceInfo = new grpc::Method<global::NetworkService.GetNetworkDeviceInfoRequest, global::NetworkService.GetNetworkDeviceInfoResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetNetworkDeviceInfo",
        __Marshaller_networkService_GetNetworkDeviceInfoRequest,
        __Marshaller_networkService_GetNetworkDeviceInfoResponse);

    static readonly grpc::Method<global::NetworkService.UpdateNetworkDeviceInfoRequest, global::NetworkService.UpdateNetworkDeviceInfoResponse> __Method_UpdateNetworkDeviceInfo = new grpc::Method<global::NetworkService.UpdateNetworkDeviceInfoRequest, global::NetworkService.UpdateNetworkDeviceInfoResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateNetworkDeviceInfo",
        __Marshaller_networkService_UpdateNetworkDeviceInfoRequest,
        __Marshaller_networkService_UpdateNetworkDeviceInfoResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::NetworkService.NetworkReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of NetworkService</summary>
    [grpc::BindServiceMethod(typeof(NetworkService), "BindService")]
    public abstract partial class NetworkServiceBase
    {
      /// <summary>
      /// 获取网络扫描结果流
      /// 扫描结果每30秒自动更新, 首次获取将返回记录中最新记录
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task ListNetworks(global::NetworkService.ListNetworksRequest request, grpc::IServerStreamWriter<global::NetworkService.ListNetworksResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 连接至指定网络
      /// 连接失败将立即返回错误
      /// 若30秒后成功获取状态将返回超时失败
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::NetworkService.ConnectResponse> Connect(global::NetworkService.ConnectRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 获取连接状态流
      /// 在连接开始时立即返回当前最新的扫描数据
      /// 并持续在网络数据更新时接收新数据
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task GetStatus(global::NetworkService.GetStatusRequest request, grpc::IServerStreamWriter<global::NetworkService.GetStatusResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 获取网络设备相关信息
      /// v1.1.0
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::NetworkService.GetNetworkDeviceInfoResponse> GetNetworkDeviceInfo(global::NetworkService.GetNetworkDeviceInfoRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 修改网络设备相关信息
      /// v1.1.0
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::NetworkService.UpdateNetworkDeviceInfoResponse> UpdateNetworkDeviceInfo(global::NetworkService.UpdateNetworkDeviceInfoRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for NetworkService</summary>
    public partial class NetworkServiceClient : grpc::ClientBase<NetworkServiceClient>
    {
      /// <summary>Creates a new client for NetworkService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public NetworkServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for NetworkService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public NetworkServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected NetworkServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected NetworkServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// 获取网络扫描结果流
      /// 扫描结果每30秒自动更新, 首次获取将返回记录中最新记录
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::NetworkService.ListNetworksResponse> ListNetworks(global::NetworkService.ListNetworksRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListNetworks(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 获取网络扫描结果流
      /// 扫描结果每30秒自动更新, 首次获取将返回记录中最新记录
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::NetworkService.ListNetworksResponse> ListNetworks(global::NetworkService.ListNetworksRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_ListNetworks, null, options, request);
      }
      /// <summary>
      /// 连接至指定网络
      /// 连接失败将立即返回错误
      /// 若30秒后成功获取状态将返回超时失败
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::NetworkService.ConnectResponse Connect(global::NetworkService.ConnectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Connect(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 连接至指定网络
      /// 连接失败将立即返回错误
      /// 若30秒后成功获取状态将返回超时失败
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::NetworkService.ConnectResponse Connect(global::NetworkService.ConnectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Connect, null, options, request);
      }
      /// <summary>
      /// 连接至指定网络
      /// 连接失败将立即返回错误
      /// 若30秒后成功获取状态将返回超时失败
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::NetworkService.ConnectResponse> ConnectAsync(global::NetworkService.ConnectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ConnectAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 连接至指定网络
      /// 连接失败将立即返回错误
      /// 若30秒后成功获取状态将返回超时失败
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::NetworkService.ConnectResponse> ConnectAsync(global::NetworkService.ConnectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Connect, null, options, request);
      }
      /// <summary>
      /// 获取连接状态流
      /// 在连接开始时立即返回当前最新的扫描数据
      /// 并持续在网络数据更新时接收新数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::NetworkService.GetStatusResponse> GetStatus(global::NetworkService.GetStatusRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetStatus(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 获取连接状态流
      /// 在连接开始时立即返回当前最新的扫描数据
      /// 并持续在网络数据更新时接收新数据
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::NetworkService.GetStatusResponse> GetStatus(global::NetworkService.GetStatusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetStatus, null, options, request);
      }
      /// <summary>
      /// 获取网络设备相关信息
      /// v1.1.0
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::NetworkService.GetNetworkDeviceInfoResponse GetNetworkDeviceInfo(global::NetworkService.GetNetworkDeviceInfoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNetworkDeviceInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 获取网络设备相关信息
      /// v1.1.0
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::NetworkService.GetNetworkDeviceInfoResponse GetNetworkDeviceInfo(global::NetworkService.GetNetworkDeviceInfoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetNetworkDeviceInfo, null, options, request);
      }
      /// <summary>
      /// 获取网络设备相关信息
      /// v1.1.0
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::NetworkService.GetNetworkDeviceInfoResponse> GetNetworkDeviceInfoAsync(global::NetworkService.GetNetworkDeviceInfoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNetworkDeviceInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 获取网络设备相关信息
      /// v1.1.0
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::NetworkService.GetNetworkDeviceInfoResponse> GetNetworkDeviceInfoAsync(global::NetworkService.GetNetworkDeviceInfoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetNetworkDeviceInfo, null, options, request);
      }
      /// <summary>
      /// 修改网络设备相关信息
      /// v1.1.0
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::NetworkService.UpdateNetworkDeviceInfoResponse UpdateNetworkDeviceInfo(global::NetworkService.UpdateNetworkDeviceInfoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateNetworkDeviceInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 修改网络设备相关信息
      /// v1.1.0
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::NetworkService.UpdateNetworkDeviceInfoResponse UpdateNetworkDeviceInfo(global::NetworkService.UpdateNetworkDeviceInfoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateNetworkDeviceInfo, null, options, request);
      }
      /// <summary>
      /// 修改网络设备相关信息
      /// v1.1.0
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::NetworkService.UpdateNetworkDeviceInfoResponse> UpdateNetworkDeviceInfoAsync(global::NetworkService.UpdateNetworkDeviceInfoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateNetworkDeviceInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 修改网络设备相关信息
      /// v1.1.0
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::NetworkService.UpdateNetworkDeviceInfoResponse> UpdateNetworkDeviceInfoAsync(global::NetworkService.UpdateNetworkDeviceInfoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateNetworkDeviceInfo, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override NetworkServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new NetworkServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(NetworkServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_ListNetworks, serviceImpl.ListNetworks)
          .AddMethod(__Method_Connect, serviceImpl.Connect)
          .AddMethod(__Method_GetStatus, serviceImpl.GetStatus)
          .AddMethod(__Method_GetNetworkDeviceInfo, serviceImpl.GetNetworkDeviceInfo)
          .AddMethod(__Method_UpdateNetworkDeviceInfo, serviceImpl.UpdateNetworkDeviceInfo).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, NetworkServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_ListNetworks, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::NetworkService.ListNetworksRequest, global::NetworkService.ListNetworksResponse>(serviceImpl.ListNetworks));
      serviceBinder.AddMethod(__Method_Connect, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::NetworkService.ConnectRequest, global::NetworkService.ConnectResponse>(serviceImpl.Connect));
      serviceBinder.AddMethod(__Method_GetStatus, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::NetworkService.GetStatusRequest, global::NetworkService.GetStatusResponse>(serviceImpl.GetStatus));
      serviceBinder.AddMethod(__Method_GetNetworkDeviceInfo, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::NetworkService.GetNetworkDeviceInfoRequest, global::NetworkService.GetNetworkDeviceInfoResponse>(serviceImpl.GetNetworkDeviceInfo));
      serviceBinder.AddMethod(__Method_UpdateNetworkDeviceInfo, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::NetworkService.UpdateNetworkDeviceInfoRequest, global::NetworkService.UpdateNetworkDeviceInfoResponse>(serviceImpl.UpdateNetworkDeviceInfo));
    }

  }
}
#endregion
