// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: network.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30002
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30002 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class NetworkDeviceInfo;
@class NetworkInfo;
@class NetworkStatus;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum Status

/** 连接状态 */
typedef GPB_ENUM(Status) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  Status_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  /** 保留数据 */
  Status_Unknown = 0,

  /** 连接断开 */
  Status_Disconnected = 1,

  /** 连接中 */
  Status_Connecting = 2,

  /** 已连接 */
  Status_Connected = 3,
};

GPBEnumDescriptor *Status_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL Status_IsValidValue(int32_t value);

#pragma mark - NetworkRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
@interface NetworkRoot : GPBRootObject
@end

#pragma mark - NetworkInfo

typedef GPB_ENUM(NetworkInfo_FieldNumber) {
  NetworkInfo_FieldNumber_Name = 1,
  NetworkInfo_FieldNumber_Mac = 2,
  NetworkInfo_FieldNumber_Channel = 3,
  NetworkInfo_FieldNumber_Rssi = 4,
};

/**
 * 网络信息
 **/
@interface NetworkInfo : GPBMessage

/** wifi名 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *name;

/** mac地址 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *mac;

/** 网络信道 */
@property(nonatomic, readwrite) uint32_t channel;

/** 信号强度 0-100 */
@property(nonatomic, readwrite) uint32_t rssi;

@end

#pragma mark - ListNetworksRequest

/**
 * 获取网络扫描结果流请求
 **/
@interface ListNetworksRequest : GPBMessage

@end

#pragma mark - ListNetworksResponse

typedef GPB_ENUM(ListNetworksResponse_FieldNumber) {
  ListNetworksResponse_FieldNumber_NetworksInfoArray = 1,
};

/**
 * 获取网络扫描结果流结果
 **/
@interface ListNetworksResponse : GPBMessage

/** 网络信息列表 */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NetworkInfo*> *networksInfoArray;
/** The number of items in @c networksInfoArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger networksInfoArray_Count;

@end

#pragma mark - ConnectRequest

typedef GPB_ENUM(ConnectRequest_FieldNumber) {
  ConnectRequest_FieldNumber_NetworkInfo = 1,
  ConnectRequest_FieldNumber_Pwd = 2,
  ConnectRequest_FieldNumber_Ssid = 3,
  ConnectRequest_FieldNumber_KeepAlive = 4,
  ConnectRequest_FieldNumber_KeepAliveInterval = 5,
};

/**
 * 连接至指定网络请求
 **/
@interface ConnectRequest : GPBMessage

/**
 * !!! >=v1.2.0可不再使用此NetworkInfo请求，此参数声明作废，请使用更为精简的ssid作为连接目标参数
 * 目标网络信息
 * 此对象应由ListNetworks.ListNetworksResponse.NetworkInfo中获取
 **/
@property(nonatomic, readwrite, strong, null_resettable) NetworkInfo *networkInfo GPB_DEPRECATED_MSG("networkService.ConnectRequest.network_info is deprecated (see network.proto).");
/** Test to see if @c networkInfo has been set. */
@property(nonatomic, readwrite) BOOL hasNetworkInfo GPB_DEPRECATED_MSG("networkService.ConnectRequest.network_info is deprecated (see network.proto).");

/**
 * >=v1.2.0
 * 目标网络ssid
 * 自动获取当前的NetworkInfo信息中首个匹配ssid，
 * 若匹配失败将直接返回连接错误
 * 不支持隐藏ssid的链接
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *ssid;

/** wifi密码 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *pwd;

/**
 * >=v1.2.0
 * 保持当前外部连接
 * 配置此参数后将立即启动状态监听。
 * 若出现DISCONNECTED状态且keep_alive_interval间隔时间内，
 * 状态持续为DISCONNECTED状态将自动发起ConnectRequest。
 * 在等待期间出现非DISCONNECTED的任意状态切换，
 * keep_alive_interval都将重新计算。
 **/
@property(nonatomic, readwrite) BOOL keepAlive;

/**
 * >=v1.2.0
 * 保持当前连接判断间隔, 默认及最小为30s
 **/
@property(nonatomic, readwrite) uint32_t keepAliveInterval;

@end

#pragma mark - NetworkStatus

typedef GPB_ENUM(NetworkStatus_FieldNumber) {
  NetworkStatus_FieldNumber_Status = 1,
  NetworkStatus_FieldNumber_Name = 2,
  NetworkStatus_FieldNumber_PublicIp = 3,
  NetworkStatus_FieldNumber_Rssi = 4,
  NetworkStatus_FieldNumber_Upload = 5,
  NetworkStatus_FieldNumber_Download = 6,
};

/**
 * 网络状态
 **/
@interface NetworkStatus : GPBMessage

/** 连接状态 */
@property(nonatomic, readwrite) Status status;

/** 连接的上级网络ssid */
@property(nonatomic, readwrite, copy, null_resettable) NSString *name;

/** 连接的上级网络ip */
@property(nonatomic, readwrite, copy, null_resettable) NSString *publicIp;

/** 当前信号强度 */
@property(nonatomic, readwrite) uint32_t rssi;

/** 当前上传速度 */
@property(nonatomic, readwrite) uint32_t upload;

/** 当前下载速度 */
@property(nonatomic, readwrite) uint32_t download;

@end

/**
 * Fetches the raw value of a @c NetworkStatus's @c status property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t NetworkStatus_Status_RawValue(NetworkStatus *message);
/**
 * Sets the raw value of an @c NetworkStatus's @c status property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetNetworkStatus_Status_RawValue(NetworkStatus *message, int32_t value);

#pragma mark - ConnectResponse

/**
 * 连接至指定网络请求结果
 **/
@interface ConnectResponse : GPBMessage

@end

#pragma mark - GetStatusRequest

/**
 * 获取连接状态流请求
 **/
@interface GetStatusRequest : GPBMessage

@end

#pragma mark - GetStatusResponse

typedef GPB_ENUM(GetStatusResponse_FieldNumber) {
  GetStatusResponse_FieldNumber_NetworkStatus = 1,
};

/**
 * 获取连接状态流结果
 **/
@interface GetStatusResponse : GPBMessage

/** 网络状态 */
@property(nonatomic, readwrite, strong, null_resettable) NetworkStatus *networkStatus;
/** Test to see if @c networkStatus has been set. */
@property(nonatomic, readwrite) BOOL hasNetworkStatus;

@end

#pragma mark - NetworkDeviceInfo

typedef GPB_ENUM(NetworkDeviceInfo_FieldNumber) {
  NetworkDeviceInfo_FieldNumber_Ssid = 1,
  NetworkDeviceInfo_FieldNumber_Credential = 2,
};

/**
 * 网络设备信息
 **/
@interface NetworkDeviceInfo : GPBMessage

/**
 * wifi名
 * 5G网络名为(2.4G)-5G
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *ssid;

/** 密码 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *credential;

@end

#pragma mark - GetNetworkDeviceInfoRequest

typedef GPB_ENUM(GetNetworkDeviceInfoRequest_FieldNumber) {
  GetNetworkDeviceInfoRequest_FieldNumber_WithCredential = 1,
};

/**
 * 获取网络设备相关信息请求
 **/
@interface GetNetworkDeviceInfoRequest : GPBMessage

/** 是否获取密码 */
@property(nonatomic, readwrite) BOOL withCredential;

@end

#pragma mark - GetNetworkDeviceInfoResponse

typedef GPB_ENUM(GetNetworkDeviceInfoResponse_FieldNumber) {
  GetNetworkDeviceInfoResponse_FieldNumber_NetworkDeviceInfo = 1,
};

/**
 * 获取网络设备相关信息结果
 **/
@interface GetNetworkDeviceInfoResponse : GPBMessage

/** 网络设备信息 */
@property(nonatomic, readwrite, strong, null_resettable) NetworkDeviceInfo *networkDeviceInfo;
/** Test to see if @c networkDeviceInfo has been set. */
@property(nonatomic, readwrite) BOOL hasNetworkDeviceInfo;

@end

#pragma mark - UpdateNetworkDeviceInfoRequest

typedef GPB_ENUM(UpdateNetworkDeviceInfoRequest_FieldNumber) {
  UpdateNetworkDeviceInfoRequest_FieldNumber_NetworkDeviceInfo = 1,
};

/**
 * 修改网络设备相关信息请求
 **/
@interface UpdateNetworkDeviceInfoRequest : GPBMessage

/**
 * 网络设备信息
 * NetworkInfo中留空为不更新
 **/
@property(nonatomic, readwrite, strong, null_resettable) NetworkDeviceInfo *networkDeviceInfo;
/** Test to see if @c networkDeviceInfo has been set. */
@property(nonatomic, readwrite) BOOL hasNetworkDeviceInfo;

@end

#pragma mark - UpdateNetworkDeviceInfoResponse

/**
 * 修改网络设备相关信息结果
 **/
@interface UpdateNetworkDeviceInfoResponse : GPBMessage

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
