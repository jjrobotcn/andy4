// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: storage.proto

#include "storage.pb.h"
#include "storage.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace cameraService {

static const char* Storage_method_names[] = {
  "/cameraService.Storage/ListDates",
  "/cameraService.Storage/ListVideos",
  "/cameraService.Storage/GetVideoFile",
  "/cameraService.Storage/DeleteVideoFiles",
};

std::unique_ptr< Storage::Stub> Storage::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Storage::Stub> stub(new Storage::Stub(channel));
  return stub;
}

Storage::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_ListDates_(Storage_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListVideos_(Storage_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetVideoFile_(Storage_method_names[2], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_DeleteVideoFiles_(Storage_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Storage::Stub::ListDates(::grpc::ClientContext* context, const ::cameraService::ListDatesRequest& request, ::cameraService::ListDatesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListDates_, context, request, response);
}

void Storage::Stub::experimental_async::ListDates(::grpc::ClientContext* context, const ::cameraService::ListDatesRequest* request, ::cameraService::ListDatesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListDates_, context, request, response, std::move(f));
}

void Storage::Stub::experimental_async::ListDates(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::cameraService::ListDatesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListDates_, context, request, response, std::move(f));
}

void Storage::Stub::experimental_async::ListDates(::grpc::ClientContext* context, const ::cameraService::ListDatesRequest* request, ::cameraService::ListDatesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListDates_, context, request, response, reactor);
}

void Storage::Stub::experimental_async::ListDates(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::cameraService::ListDatesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListDates_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cameraService::ListDatesResponse>* Storage::Stub::AsyncListDatesRaw(::grpc::ClientContext* context, const ::cameraService::ListDatesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::cameraService::ListDatesResponse>::Create(channel_.get(), cq, rpcmethod_ListDates_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::cameraService::ListDatesResponse>* Storage::Stub::PrepareAsyncListDatesRaw(::grpc::ClientContext* context, const ::cameraService::ListDatesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::cameraService::ListDatesResponse>::Create(channel_.get(), cq, rpcmethod_ListDates_, context, request, false);
}

::grpc::Status Storage::Stub::ListVideos(::grpc::ClientContext* context, const ::cameraService::ListVideosRequest& request, ::cameraService::ListVideosResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListVideos_, context, request, response);
}

void Storage::Stub::experimental_async::ListVideos(::grpc::ClientContext* context, const ::cameraService::ListVideosRequest* request, ::cameraService::ListVideosResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListVideos_, context, request, response, std::move(f));
}

void Storage::Stub::experimental_async::ListVideos(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::cameraService::ListVideosResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListVideos_, context, request, response, std::move(f));
}

void Storage::Stub::experimental_async::ListVideos(::grpc::ClientContext* context, const ::cameraService::ListVideosRequest* request, ::cameraService::ListVideosResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListVideos_, context, request, response, reactor);
}

void Storage::Stub::experimental_async::ListVideos(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::cameraService::ListVideosResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListVideos_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cameraService::ListVideosResponse>* Storage::Stub::AsyncListVideosRaw(::grpc::ClientContext* context, const ::cameraService::ListVideosRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::cameraService::ListVideosResponse>::Create(channel_.get(), cq, rpcmethod_ListVideos_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::cameraService::ListVideosResponse>* Storage::Stub::PrepareAsyncListVideosRaw(::grpc::ClientContext* context, const ::cameraService::ListVideosRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::cameraService::ListVideosResponse>::Create(channel_.get(), cq, rpcmethod_ListVideos_, context, request, false);
}

::grpc::ClientReader< ::cameraService::GetVideoFileResponse>* Storage::Stub::GetVideoFileRaw(::grpc::ClientContext* context, const ::cameraService::GetVideoFileRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::cameraService::GetVideoFileResponse>::Create(channel_.get(), rpcmethod_GetVideoFile_, context, request);
}

void Storage::Stub::experimental_async::GetVideoFile(::grpc::ClientContext* context, ::cameraService::GetVideoFileRequest* request, ::grpc::experimental::ClientReadReactor< ::cameraService::GetVideoFileResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::cameraService::GetVideoFileResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_GetVideoFile_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::cameraService::GetVideoFileResponse>* Storage::Stub::AsyncGetVideoFileRaw(::grpc::ClientContext* context, const ::cameraService::GetVideoFileRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::cameraService::GetVideoFileResponse>::Create(channel_.get(), cq, rpcmethod_GetVideoFile_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::cameraService::GetVideoFileResponse>* Storage::Stub::PrepareAsyncGetVideoFileRaw(::grpc::ClientContext* context, const ::cameraService::GetVideoFileRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::cameraService::GetVideoFileResponse>::Create(channel_.get(), cq, rpcmethod_GetVideoFile_, context, request, false, nullptr);
}

::grpc::Status Storage::Stub::DeleteVideoFiles(::grpc::ClientContext* context, const ::cameraService::DeleteVideoFilesRequest& request, ::cameraService::DeleteVideoFilesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteVideoFiles_, context, request, response);
}

void Storage::Stub::experimental_async::DeleteVideoFiles(::grpc::ClientContext* context, const ::cameraService::DeleteVideoFilesRequest* request, ::cameraService::DeleteVideoFilesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteVideoFiles_, context, request, response, std::move(f));
}

void Storage::Stub::experimental_async::DeleteVideoFiles(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::cameraService::DeleteVideoFilesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteVideoFiles_, context, request, response, std::move(f));
}

void Storage::Stub::experimental_async::DeleteVideoFiles(::grpc::ClientContext* context, const ::cameraService::DeleteVideoFilesRequest* request, ::cameraService::DeleteVideoFilesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteVideoFiles_, context, request, response, reactor);
}

void Storage::Stub::experimental_async::DeleteVideoFiles(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::cameraService::DeleteVideoFilesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteVideoFiles_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cameraService::DeleteVideoFilesResponse>* Storage::Stub::AsyncDeleteVideoFilesRaw(::grpc::ClientContext* context, const ::cameraService::DeleteVideoFilesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::cameraService::DeleteVideoFilesResponse>::Create(channel_.get(), cq, rpcmethod_DeleteVideoFiles_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::cameraService::DeleteVideoFilesResponse>* Storage::Stub::PrepareAsyncDeleteVideoFilesRaw(::grpc::ClientContext* context, const ::cameraService::DeleteVideoFilesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::cameraService::DeleteVideoFilesResponse>::Create(channel_.get(), cq, rpcmethod_DeleteVideoFiles_, context, request, false);
}

Storage::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Storage_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Storage::Service, ::cameraService::ListDatesRequest, ::cameraService::ListDatesResponse>(
          std::mem_fn(&Storage::Service::ListDates), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Storage_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Storage::Service, ::cameraService::ListVideosRequest, ::cameraService::ListVideosResponse>(
          std::mem_fn(&Storage::Service::ListVideos), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Storage_method_names[2],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Storage::Service, ::cameraService::GetVideoFileRequest, ::cameraService::GetVideoFileResponse>(
          std::mem_fn(&Storage::Service::GetVideoFile), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Storage_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Storage::Service, ::cameraService::DeleteVideoFilesRequest, ::cameraService::DeleteVideoFilesResponse>(
          std::mem_fn(&Storage::Service::DeleteVideoFiles), this)));
}

Storage::Service::~Service() {
}

::grpc::Status Storage::Service::ListDates(::grpc::ServerContext* context, const ::cameraService::ListDatesRequest* request, ::cameraService::ListDatesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Storage::Service::ListVideos(::grpc::ServerContext* context, const ::cameraService::ListVideosRequest* request, ::cameraService::ListVideosResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Storage::Service::GetVideoFile(::grpc::ServerContext* context, const ::cameraService::GetVideoFileRequest* request, ::grpc::ServerWriter< ::cameraService::GetVideoFileResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Storage::Service::DeleteVideoFiles(::grpc::ServerContext* context, const ::cameraService::DeleteVideoFilesRequest* request, ::cameraService::DeleteVideoFilesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace cameraService

