// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: camera.proto
#ifndef GRPC_camera_2eproto__INCLUDED
#define GRPC_camera_2eproto__INCLUDED

#include "camera.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc_impl {
class CompletionQueue;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc_impl

namespace grpc {
namespace experimental {
template <typename RequestT, typename ResponseT>
class MessageAllocator;
}  // namespace experimental
}  // namespace grpc

namespace cameraService {

class CameraService final {
 public:
  static constexpr char const* service_full_name() {
    return "cameraService.CameraService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // 直播流数据, 数据为h264 nal单元
    std::unique_ptr< ::grpc::ClientReaderInterface< ::cameraService::LiveH264StreamResponse>> LiveH264Stream(::grpc::ClientContext* context, const ::cameraService::LiveH264StreamRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::cameraService::LiveH264StreamResponse>>(LiveH264StreamRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::cameraService::LiveH264StreamResponse>> AsyncLiveH264Stream(::grpc::ClientContext* context, const ::cameraService::LiveH264StreamRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::cameraService::LiveH264StreamResponse>>(AsyncLiveH264StreamRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::cameraService::LiveH264StreamResponse>> PrepareAsyncLiveH264Stream(::grpc::ClientContext* context, const ::cameraService::LiveH264StreamRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::cameraService::LiveH264StreamResponse>>(PrepareAsyncLiveH264StreamRaw(context, request, cq));
    }
    // 获取当前最新图片jpg
    // 图片更新时间周期为1s
    virtual ::grpc::Status LatestImage(::grpc::ClientContext* context, const ::cameraService::LatestImageRequest& request, ::cameraService::LatestImageResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cameraService::LatestImageResponse>> AsyncLatestImage(::grpc::ClientContext* context, const ::cameraService::LatestImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cameraService::LatestImageResponse>>(AsyncLatestImageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cameraService::LatestImageResponse>> PrepareAsyncLatestImage(::grpc::ClientContext* context, const ::cameraService::LatestImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cameraService::LatestImageResponse>>(PrepareAsyncLatestImageRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // 直播流数据, 数据为h264 nal单元
      virtual void LiveH264Stream(::grpc::ClientContext* context, ::cameraService::LiveH264StreamRequest* request, ::grpc::experimental::ClientReadReactor< ::cameraService::LiveH264StreamResponse>* reactor) = 0;
      // 获取当前最新图片jpg
      // 图片更新时间周期为1s
      virtual void LatestImage(::grpc::ClientContext* context, const ::cameraService::LatestImageRequest* request, ::cameraService::LatestImageResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void LatestImage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::cameraService::LatestImageResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void LatestImage(::grpc::ClientContext* context, const ::cameraService::LatestImageRequest* request, ::cameraService::LatestImageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void LatestImage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::cameraService::LatestImageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientReaderInterface< ::cameraService::LiveH264StreamResponse>* LiveH264StreamRaw(::grpc::ClientContext* context, const ::cameraService::LiveH264StreamRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::cameraService::LiveH264StreamResponse>* AsyncLiveH264StreamRaw(::grpc::ClientContext* context, const ::cameraService::LiveH264StreamRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::cameraService::LiveH264StreamResponse>* PrepareAsyncLiveH264StreamRaw(::grpc::ClientContext* context, const ::cameraService::LiveH264StreamRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cameraService::LatestImageResponse>* AsyncLatestImageRaw(::grpc::ClientContext* context, const ::cameraService::LatestImageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cameraService::LatestImageResponse>* PrepareAsyncLatestImageRaw(::grpc::ClientContext* context, const ::cameraService::LatestImageRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    std::unique_ptr< ::grpc::ClientReader< ::cameraService::LiveH264StreamResponse>> LiveH264Stream(::grpc::ClientContext* context, const ::cameraService::LiveH264StreamRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::cameraService::LiveH264StreamResponse>>(LiveH264StreamRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::cameraService::LiveH264StreamResponse>> AsyncLiveH264Stream(::grpc::ClientContext* context, const ::cameraService::LiveH264StreamRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::cameraService::LiveH264StreamResponse>>(AsyncLiveH264StreamRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::cameraService::LiveH264StreamResponse>> PrepareAsyncLiveH264Stream(::grpc::ClientContext* context, const ::cameraService::LiveH264StreamRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::cameraService::LiveH264StreamResponse>>(PrepareAsyncLiveH264StreamRaw(context, request, cq));
    }
    ::grpc::Status LatestImage(::grpc::ClientContext* context, const ::cameraService::LatestImageRequest& request, ::cameraService::LatestImageResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cameraService::LatestImageResponse>> AsyncLatestImage(::grpc::ClientContext* context, const ::cameraService::LatestImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cameraService::LatestImageResponse>>(AsyncLatestImageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cameraService::LatestImageResponse>> PrepareAsyncLatestImage(::grpc::ClientContext* context, const ::cameraService::LatestImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cameraService::LatestImageResponse>>(PrepareAsyncLatestImageRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void LiveH264Stream(::grpc::ClientContext* context, ::cameraService::LiveH264StreamRequest* request, ::grpc::experimental::ClientReadReactor< ::cameraService::LiveH264StreamResponse>* reactor) override;
      void LatestImage(::grpc::ClientContext* context, const ::cameraService::LatestImageRequest* request, ::cameraService::LatestImageResponse* response, std::function<void(::grpc::Status)>) override;
      void LatestImage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::cameraService::LatestImageResponse* response, std::function<void(::grpc::Status)>) override;
      void LatestImage(::grpc::ClientContext* context, const ::cameraService::LatestImageRequest* request, ::cameraService::LatestImageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void LatestImage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::cameraService::LatestImageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientReader< ::cameraService::LiveH264StreamResponse>* LiveH264StreamRaw(::grpc::ClientContext* context, const ::cameraService::LiveH264StreamRequest& request) override;
    ::grpc::ClientAsyncReader< ::cameraService::LiveH264StreamResponse>* AsyncLiveH264StreamRaw(::grpc::ClientContext* context, const ::cameraService::LiveH264StreamRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::cameraService::LiveH264StreamResponse>* PrepareAsyncLiveH264StreamRaw(::grpc::ClientContext* context, const ::cameraService::LiveH264StreamRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cameraService::LatestImageResponse>* AsyncLatestImageRaw(::grpc::ClientContext* context, const ::cameraService::LatestImageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cameraService::LatestImageResponse>* PrepareAsyncLatestImageRaw(::grpc::ClientContext* context, const ::cameraService::LatestImageRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_LiveH264Stream_;
    const ::grpc::internal::RpcMethod rpcmethod_LatestImage_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // 直播流数据, 数据为h264 nal单元
    virtual ::grpc::Status LiveH264Stream(::grpc::ServerContext* context, const ::cameraService::LiveH264StreamRequest* request, ::grpc::ServerWriter< ::cameraService::LiveH264StreamResponse>* writer);
    // 获取当前最新图片jpg
    // 图片更新时间周期为1s
    virtual ::grpc::Status LatestImage(::grpc::ServerContext* context, const ::cameraService::LatestImageRequest* request, ::cameraService::LatestImageResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_LiveH264Stream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_LiveH264Stream() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_LiveH264Stream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LiveH264Stream(::grpc::ServerContext* context, const ::cameraService::LiveH264StreamRequest* request, ::grpc::ServerWriter< ::cameraService::LiveH264StreamResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLiveH264Stream(::grpc::ServerContext* context, ::cameraService::LiveH264StreamRequest* request, ::grpc::ServerAsyncWriter< ::cameraService::LiveH264StreamResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_LatestImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_LatestImage() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_LatestImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LatestImage(::grpc::ServerContext* context, const ::cameraService::LatestImageRequest* request, ::cameraService::LatestImageResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLatestImage(::grpc::ServerContext* context, ::cameraService::LatestImageRequest* request, ::grpc::ServerAsyncResponseWriter< ::cameraService::LatestImageResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_LiveH264Stream<WithAsyncMethod_LatestImage<Service > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_LiveH264Stream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_LiveH264Stream() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackServerStreamingHandler< ::cameraService::LiveH264StreamRequest, ::cameraService::LiveH264StreamResponse>(
          [this] { return this->LiveH264Stream(); }));
    }
    ~ExperimentalWithCallbackMethod_LiveH264Stream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LiveH264Stream(::grpc::ServerContext* context, const ::cameraService::LiveH264StreamRequest* request, ::grpc::ServerWriter< ::cameraService::LiveH264StreamResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::cameraService::LiveH264StreamRequest, ::cameraService::LiveH264StreamResponse>* LiveH264Stream() {
      return new ::grpc::internal::UnimplementedWriteReactor<
        ::cameraService::LiveH264StreamRequest, ::cameraService::LiveH264StreamResponse>;}
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_LatestImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_LatestImage() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::cameraService::LatestImageRequest, ::cameraService::LatestImageResponse>(
          [this](::grpc::ServerContext* context,
                 const ::cameraService::LatestImageRequest* request,
                 ::cameraService::LatestImageResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->LatestImage(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_LatestImage(
        ::grpc::experimental::MessageAllocator< ::cameraService::LatestImageRequest, ::cameraService::LatestImageResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cameraService::LatestImageRequest, ::cameraService::LatestImageResponse>*>(
          ::grpc::Service::experimental().GetHandler(1))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_LatestImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LatestImage(::grpc::ServerContext* context, const ::cameraService::LatestImageRequest* request, ::cameraService::LatestImageResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void LatestImage(::grpc::ServerContext* context, const ::cameraService::LatestImageRequest* request, ::cameraService::LatestImageResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_LiveH264Stream<ExperimentalWithCallbackMethod_LatestImage<Service > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_LiveH264Stream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_LiveH264Stream() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_LiveH264Stream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LiveH264Stream(::grpc::ServerContext* context, const ::cameraService::LiveH264StreamRequest* request, ::grpc::ServerWriter< ::cameraService::LiveH264StreamResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_LatestImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_LatestImage() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_LatestImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LatestImage(::grpc::ServerContext* context, const ::cameraService::LatestImageRequest* request, ::cameraService::LatestImageResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_LiveH264Stream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_LiveH264Stream() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_LiveH264Stream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LiveH264Stream(::grpc::ServerContext* context, const ::cameraService::LiveH264StreamRequest* request, ::grpc::ServerWriter< ::cameraService::LiveH264StreamResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLiveH264Stream(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_LatestImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_LatestImage() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_LatestImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LatestImage(::grpc::ServerContext* context, const ::cameraService::LatestImageRequest* request, ::cameraService::LatestImageResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLatestImage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_LiveH264Stream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_LiveH264Stream() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this] { return this->LiveH264Stream(); }));
    }
    ~ExperimentalWithRawCallbackMethod_LiveH264Stream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LiveH264Stream(::grpc::ServerContext* context, const ::cameraService::LiveH264StreamRequest* request, ::grpc::ServerWriter< ::cameraService::LiveH264StreamResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* LiveH264Stream() {
      return new ::grpc::internal::UnimplementedWriteReactor<
        ::grpc::ByteBuffer, ::grpc::ByteBuffer>;}
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_LatestImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_LatestImage() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->LatestImage(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_LatestImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LatestImage(::grpc::ServerContext* context, const ::cameraService::LatestImageRequest* request, ::cameraService::LatestImageResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void LatestImage(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_LatestImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_LatestImage() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::cameraService::LatestImageRequest, ::cameraService::LatestImageResponse>(std::bind(&WithStreamedUnaryMethod_LatestImage<BaseClass>::StreamedLatestImage, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_LatestImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status LatestImage(::grpc::ServerContext* context, const ::cameraService::LatestImageRequest* request, ::cameraService::LatestImageResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLatestImage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cameraService::LatestImageRequest,::cameraService::LatestImageResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_LatestImage<Service > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_LiveH264Stream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_LiveH264Stream() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::SplitServerStreamingHandler< ::cameraService::LiveH264StreamRequest, ::cameraService::LiveH264StreamResponse>(std::bind(&WithSplitStreamingMethod_LiveH264Stream<BaseClass>::StreamedLiveH264Stream, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_LiveH264Stream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status LiveH264Stream(::grpc::ServerContext* context, const ::cameraService::LiveH264StreamRequest* request, ::grpc::ServerWriter< ::cameraService::LiveH264StreamResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedLiveH264Stream(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::cameraService::LiveH264StreamRequest,::cameraService::LiveH264StreamResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_LiveH264Stream<Service > SplitStreamedService;
  typedef WithSplitStreamingMethod_LiveH264Stream<WithStreamedUnaryMethod_LatestImage<Service > > StreamedService;
};

}  // namespace cameraService


#endif  // GRPC_camera_2eproto__INCLUDED
