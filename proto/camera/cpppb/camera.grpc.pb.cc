// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: camera.proto

#include "camera.pb.h"
#include "camera.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace cameraService {

static const char* CameraService_method_names[] = {
  "/cameraService.CameraService/LiveH264Stream",
  "/cameraService.CameraService/LatestImage",
};

std::unique_ptr< CameraService::Stub> CameraService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< CameraService::Stub> stub(new CameraService::Stub(channel));
  return stub;
}

CameraService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_LiveH264Stream_(CameraService_method_names[0], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_LatestImage_(CameraService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::ClientReader< ::cameraService::LiveH264StreamResponse>* CameraService::Stub::LiveH264StreamRaw(::grpc::ClientContext* context, const ::cameraService::LiveH264StreamRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::cameraService::LiveH264StreamResponse>::Create(channel_.get(), rpcmethod_LiveH264Stream_, context, request);
}

void CameraService::Stub::experimental_async::LiveH264Stream(::grpc::ClientContext* context, ::cameraService::LiveH264StreamRequest* request, ::grpc::experimental::ClientReadReactor< ::cameraService::LiveH264StreamResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::cameraService::LiveH264StreamResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_LiveH264Stream_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::cameraService::LiveH264StreamResponse>* CameraService::Stub::AsyncLiveH264StreamRaw(::grpc::ClientContext* context, const ::cameraService::LiveH264StreamRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::cameraService::LiveH264StreamResponse>::Create(channel_.get(), cq, rpcmethod_LiveH264Stream_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::cameraService::LiveH264StreamResponse>* CameraService::Stub::PrepareAsyncLiveH264StreamRaw(::grpc::ClientContext* context, const ::cameraService::LiveH264StreamRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::cameraService::LiveH264StreamResponse>::Create(channel_.get(), cq, rpcmethod_LiveH264Stream_, context, request, false, nullptr);
}

::grpc::Status CameraService::Stub::LatestImage(::grpc::ClientContext* context, const ::cameraService::LatestImageRequest& request, ::cameraService::LatestImageResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_LatestImage_, context, request, response);
}

void CameraService::Stub::experimental_async::LatestImage(::grpc::ClientContext* context, const ::cameraService::LatestImageRequest* request, ::cameraService::LatestImageResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_LatestImage_, context, request, response, std::move(f));
}

void CameraService::Stub::experimental_async::LatestImage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::cameraService::LatestImageResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_LatestImage_, context, request, response, std::move(f));
}

void CameraService::Stub::experimental_async::LatestImage(::grpc::ClientContext* context, const ::cameraService::LatestImageRequest* request, ::cameraService::LatestImageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_LatestImage_, context, request, response, reactor);
}

void CameraService::Stub::experimental_async::LatestImage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::cameraService::LatestImageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_LatestImage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cameraService::LatestImageResponse>* CameraService::Stub::AsyncLatestImageRaw(::grpc::ClientContext* context, const ::cameraService::LatestImageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::cameraService::LatestImageResponse>::Create(channel_.get(), cq, rpcmethod_LatestImage_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::cameraService::LatestImageResponse>* CameraService::Stub::PrepareAsyncLatestImageRaw(::grpc::ClientContext* context, const ::cameraService::LatestImageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::cameraService::LatestImageResponse>::Create(channel_.get(), cq, rpcmethod_LatestImage_, context, request, false);
}

CameraService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CameraService_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< CameraService::Service, ::cameraService::LiveH264StreamRequest, ::cameraService::LiveH264StreamResponse>(
          std::mem_fn(&CameraService::Service::LiveH264Stream), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CameraService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CameraService::Service, ::cameraService::LatestImageRequest, ::cameraService::LatestImageResponse>(
          std::mem_fn(&CameraService::Service::LatestImage), this)));
}

CameraService::Service::~Service() {
}

::grpc::Status CameraService::Service::LiveH264Stream(::grpc::ServerContext* context, const ::cameraService::LiveH264StreamRequest* request, ::grpc::ServerWriter< ::cameraService::LiveH264StreamResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CameraService::Service::LatestImage(::grpc::ServerContext* context, const ::cameraService::LatestImageRequest* request, ::cameraService::LatestImageResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace cameraService

