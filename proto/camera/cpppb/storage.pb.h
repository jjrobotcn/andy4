// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: storage.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_storage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_storage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_storage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_storage_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_storage_2eproto;
namespace cameraService {
class DeleteVideoFilesRequest;
class DeleteVideoFilesRequestDefaultTypeInternal;
extern DeleteVideoFilesRequestDefaultTypeInternal _DeleteVideoFilesRequest_default_instance_;
class DeleteVideoFilesResponse;
class DeleteVideoFilesResponseDefaultTypeInternal;
extern DeleteVideoFilesResponseDefaultTypeInternal _DeleteVideoFilesResponse_default_instance_;
class GetVideoFileRequest;
class GetVideoFileRequestDefaultTypeInternal;
extern GetVideoFileRequestDefaultTypeInternal _GetVideoFileRequest_default_instance_;
class GetVideoFileResponse;
class GetVideoFileResponseDefaultTypeInternal;
extern GetVideoFileResponseDefaultTypeInternal _GetVideoFileResponse_default_instance_;
class ListDatesRequest;
class ListDatesRequestDefaultTypeInternal;
extern ListDatesRequestDefaultTypeInternal _ListDatesRequest_default_instance_;
class ListDatesResponse;
class ListDatesResponseDefaultTypeInternal;
extern ListDatesResponseDefaultTypeInternal _ListDatesResponse_default_instance_;
class ListVideosRequest;
class ListVideosRequestDefaultTypeInternal;
extern ListVideosRequestDefaultTypeInternal _ListVideosRequest_default_instance_;
class ListVideosResponse;
class ListVideosResponseDefaultTypeInternal;
extern ListVideosResponseDefaultTypeInternal _ListVideosResponse_default_instance_;
}  // namespace cameraService
PROTOBUF_NAMESPACE_OPEN
template<> ::cameraService::DeleteVideoFilesRequest* Arena::CreateMaybeMessage<::cameraService::DeleteVideoFilesRequest>(Arena*);
template<> ::cameraService::DeleteVideoFilesResponse* Arena::CreateMaybeMessage<::cameraService::DeleteVideoFilesResponse>(Arena*);
template<> ::cameraService::GetVideoFileRequest* Arena::CreateMaybeMessage<::cameraService::GetVideoFileRequest>(Arena*);
template<> ::cameraService::GetVideoFileResponse* Arena::CreateMaybeMessage<::cameraService::GetVideoFileResponse>(Arena*);
template<> ::cameraService::ListDatesRequest* Arena::CreateMaybeMessage<::cameraService::ListDatesRequest>(Arena*);
template<> ::cameraService::ListDatesResponse* Arena::CreateMaybeMessage<::cameraService::ListDatesResponse>(Arena*);
template<> ::cameraService::ListVideosRequest* Arena::CreateMaybeMessage<::cameraService::ListVideosRequest>(Arena*);
template<> ::cameraService::ListVideosResponse* Arena::CreateMaybeMessage<::cameraService::ListVideosResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace cameraService {

// ===================================================================

class ListDatesRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cameraService.ListDatesRequest) */ {
 public:
  ListDatesRequest();
  virtual ~ListDatesRequest();

  ListDatesRequest(const ListDatesRequest& from);
  ListDatesRequest(ListDatesRequest&& from) noexcept
    : ListDatesRequest() {
    *this = ::std::move(from);
  }

  inline ListDatesRequest& operator=(const ListDatesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListDatesRequest& operator=(ListDatesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListDatesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListDatesRequest* internal_default_instance() {
    return reinterpret_cast<const ListDatesRequest*>(
               &_ListDatesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ListDatesRequest* other);
  friend void swap(ListDatesRequest& a, ListDatesRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListDatesRequest* New() const final {
    return CreateMaybeMessage<ListDatesRequest>(nullptr);
  }

  ListDatesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListDatesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListDatesRequest& from);
  void MergeFrom(const ListDatesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListDatesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cameraService.ListDatesRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_storage_2eproto);
    return ::descriptor_table_storage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:cameraService.ListDatesRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_storage_2eproto;
};
// -------------------------------------------------------------------

class ListDatesResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cameraService.ListDatesResponse) */ {
 public:
  ListDatesResponse();
  virtual ~ListDatesResponse();

  ListDatesResponse(const ListDatesResponse& from);
  ListDatesResponse(ListDatesResponse&& from) noexcept
    : ListDatesResponse() {
    *this = ::std::move(from);
  }

  inline ListDatesResponse& operator=(const ListDatesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListDatesResponse& operator=(ListDatesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListDatesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListDatesResponse* internal_default_instance() {
    return reinterpret_cast<const ListDatesResponse*>(
               &_ListDatesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ListDatesResponse* other);
  friend void swap(ListDatesResponse& a, ListDatesResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListDatesResponse* New() const final {
    return CreateMaybeMessage<ListDatesResponse>(nullptr);
  }

  ListDatesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListDatesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListDatesResponse& from);
  void MergeFrom(const ListDatesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListDatesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cameraService.ListDatesResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_storage_2eproto);
    return ::descriptor_table_storage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string dates = 1;
  int dates_size() const;
  void clear_dates();
  static const int kDatesFieldNumber = 1;
  const std::string& dates(int index) const;
  std::string* mutable_dates(int index);
  void set_dates(int index, const std::string& value);
  void set_dates(int index, std::string&& value);
  void set_dates(int index, const char* value);
  void set_dates(int index, const char* value, size_t size);
  std::string* add_dates();
  void add_dates(const std::string& value);
  void add_dates(std::string&& value);
  void add_dates(const char* value);
  void add_dates(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& dates() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_dates();

  // @@protoc_insertion_point(class_scope:cameraService.ListDatesResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> dates_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_storage_2eproto;
};
// -------------------------------------------------------------------

class ListVideosRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cameraService.ListVideosRequest) */ {
 public:
  ListVideosRequest();
  virtual ~ListVideosRequest();

  ListVideosRequest(const ListVideosRequest& from);
  ListVideosRequest(ListVideosRequest&& from) noexcept
    : ListVideosRequest() {
    *this = ::std::move(from);
  }

  inline ListVideosRequest& operator=(const ListVideosRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListVideosRequest& operator=(ListVideosRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListVideosRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListVideosRequest* internal_default_instance() {
    return reinterpret_cast<const ListVideosRequest*>(
               &_ListVideosRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ListVideosRequest* other);
  friend void swap(ListVideosRequest& a, ListVideosRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListVideosRequest* New() const final {
    return CreateMaybeMessage<ListVideosRequest>(nullptr);
  }

  ListVideosRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListVideosRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListVideosRequest& from);
  void MergeFrom(const ListVideosRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListVideosRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cameraService.ListVideosRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_storage_2eproto);
    return ::descriptor_table_storage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string start = 1;
  void clear_start();
  static const int kStartFieldNumber = 1;
  const std::string& start() const;
  void set_start(const std::string& value);
  void set_start(std::string&& value);
  void set_start(const char* value);
  void set_start(const char* value, size_t size);
  std::string* mutable_start();
  std::string* release_start();
  void set_allocated_start(std::string* start);

  // string end = 2;
  void clear_end();
  static const int kEndFieldNumber = 2;
  const std::string& end() const;
  void set_end(const std::string& value);
  void set_end(std::string&& value);
  void set_end(const char* value);
  void set_end(const char* value, size_t size);
  std::string* mutable_end();
  std::string* release_end();
  void set_allocated_end(std::string* end);

  // @@protoc_insertion_point(class_scope:cameraService.ListVideosRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr start_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr end_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_storage_2eproto;
};
// -------------------------------------------------------------------

class ListVideosResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cameraService.ListVideosResponse) */ {
 public:
  ListVideosResponse();
  virtual ~ListVideosResponse();

  ListVideosResponse(const ListVideosResponse& from);
  ListVideosResponse(ListVideosResponse&& from) noexcept
    : ListVideosResponse() {
    *this = ::std::move(from);
  }

  inline ListVideosResponse& operator=(const ListVideosResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListVideosResponse& operator=(ListVideosResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListVideosResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListVideosResponse* internal_default_instance() {
    return reinterpret_cast<const ListVideosResponse*>(
               &_ListVideosResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ListVideosResponse* other);
  friend void swap(ListVideosResponse& a, ListVideosResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListVideosResponse* New() const final {
    return CreateMaybeMessage<ListVideosResponse>(nullptr);
  }

  ListVideosResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListVideosResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListVideosResponse& from);
  void MergeFrom(const ListVideosResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListVideosResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cameraService.ListVideosResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_storage_2eproto);
    return ::descriptor_table_storage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string videos = 1;
  int videos_size() const;
  void clear_videos();
  static const int kVideosFieldNumber = 1;
  const std::string& videos(int index) const;
  std::string* mutable_videos(int index);
  void set_videos(int index, const std::string& value);
  void set_videos(int index, std::string&& value);
  void set_videos(int index, const char* value);
  void set_videos(int index, const char* value, size_t size);
  std::string* add_videos();
  void add_videos(const std::string& value);
  void add_videos(std::string&& value);
  void add_videos(const char* value);
  void add_videos(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& videos() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_videos();

  // @@protoc_insertion_point(class_scope:cameraService.ListVideosResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> videos_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_storage_2eproto;
};
// -------------------------------------------------------------------

class GetVideoFileRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cameraService.GetVideoFileRequest) */ {
 public:
  GetVideoFileRequest();
  virtual ~GetVideoFileRequest();

  GetVideoFileRequest(const GetVideoFileRequest& from);
  GetVideoFileRequest(GetVideoFileRequest&& from) noexcept
    : GetVideoFileRequest() {
    *this = ::std::move(from);
  }

  inline GetVideoFileRequest& operator=(const GetVideoFileRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetVideoFileRequest& operator=(GetVideoFileRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetVideoFileRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetVideoFileRequest* internal_default_instance() {
    return reinterpret_cast<const GetVideoFileRequest*>(
               &_GetVideoFileRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(GetVideoFileRequest* other);
  friend void swap(GetVideoFileRequest& a, GetVideoFileRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetVideoFileRequest* New() const final {
    return CreateMaybeMessage<GetVideoFileRequest>(nullptr);
  }

  GetVideoFileRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetVideoFileRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetVideoFileRequest& from);
  void MergeFrom(const GetVideoFileRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetVideoFileRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cameraService.GetVideoFileRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_storage_2eproto);
    return ::descriptor_table_storage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string video = 1;
  void clear_video();
  static const int kVideoFieldNumber = 1;
  const std::string& video() const;
  void set_video(const std::string& value);
  void set_video(std::string&& value);
  void set_video(const char* value);
  void set_video(const char* value, size_t size);
  std::string* mutable_video();
  std::string* release_video();
  void set_allocated_video(std::string* video);

  // @@protoc_insertion_point(class_scope:cameraService.GetVideoFileRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr video_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_storage_2eproto;
};
// -------------------------------------------------------------------

class GetVideoFileResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cameraService.GetVideoFileResponse) */ {
 public:
  GetVideoFileResponse();
  virtual ~GetVideoFileResponse();

  GetVideoFileResponse(const GetVideoFileResponse& from);
  GetVideoFileResponse(GetVideoFileResponse&& from) noexcept
    : GetVideoFileResponse() {
    *this = ::std::move(from);
  }

  inline GetVideoFileResponse& operator=(const GetVideoFileResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetVideoFileResponse& operator=(GetVideoFileResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetVideoFileResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetVideoFileResponse* internal_default_instance() {
    return reinterpret_cast<const GetVideoFileResponse*>(
               &_GetVideoFileResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(GetVideoFileResponse* other);
  friend void swap(GetVideoFileResponse& a, GetVideoFileResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetVideoFileResponse* New() const final {
    return CreateMaybeMessage<GetVideoFileResponse>(nullptr);
  }

  GetVideoFileResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetVideoFileResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetVideoFileResponse& from);
  void MergeFrom(const GetVideoFileResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetVideoFileResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cameraService.GetVideoFileResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_storage_2eproto);
    return ::descriptor_table_storage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes chunk = 1;
  void clear_chunk();
  static const int kChunkFieldNumber = 1;
  const std::string& chunk() const;
  void set_chunk(const std::string& value);
  void set_chunk(std::string&& value);
  void set_chunk(const char* value);
  void set_chunk(const void* value, size_t size);
  std::string* mutable_chunk();
  std::string* release_chunk();
  void set_allocated_chunk(std::string* chunk);

  // @@protoc_insertion_point(class_scope:cameraService.GetVideoFileResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chunk_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_storage_2eproto;
};
// -------------------------------------------------------------------

class DeleteVideoFilesRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cameraService.DeleteVideoFilesRequest) */ {
 public:
  DeleteVideoFilesRequest();
  virtual ~DeleteVideoFilesRequest();

  DeleteVideoFilesRequest(const DeleteVideoFilesRequest& from);
  DeleteVideoFilesRequest(DeleteVideoFilesRequest&& from) noexcept
    : DeleteVideoFilesRequest() {
    *this = ::std::move(from);
  }

  inline DeleteVideoFilesRequest& operator=(const DeleteVideoFilesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteVideoFilesRequest& operator=(DeleteVideoFilesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteVideoFilesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteVideoFilesRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteVideoFilesRequest*>(
               &_DeleteVideoFilesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(DeleteVideoFilesRequest* other);
  friend void swap(DeleteVideoFilesRequest& a, DeleteVideoFilesRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteVideoFilesRequest* New() const final {
    return CreateMaybeMessage<DeleteVideoFilesRequest>(nullptr);
  }

  DeleteVideoFilesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteVideoFilesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteVideoFilesRequest& from);
  void MergeFrom(const DeleteVideoFilesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteVideoFilesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cameraService.DeleteVideoFilesRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_storage_2eproto);
    return ::descriptor_table_storage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string videos = 1;
  int videos_size() const;
  void clear_videos();
  static const int kVideosFieldNumber = 1;
  const std::string& videos(int index) const;
  std::string* mutable_videos(int index);
  void set_videos(int index, const std::string& value);
  void set_videos(int index, std::string&& value);
  void set_videos(int index, const char* value);
  void set_videos(int index, const char* value, size_t size);
  std::string* add_videos();
  void add_videos(const std::string& value);
  void add_videos(std::string&& value);
  void add_videos(const char* value);
  void add_videos(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& videos() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_videos();

  // @@protoc_insertion_point(class_scope:cameraService.DeleteVideoFilesRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> videos_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_storage_2eproto;
};
// -------------------------------------------------------------------

class DeleteVideoFilesResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cameraService.DeleteVideoFilesResponse) */ {
 public:
  DeleteVideoFilesResponse();
  virtual ~DeleteVideoFilesResponse();

  DeleteVideoFilesResponse(const DeleteVideoFilesResponse& from);
  DeleteVideoFilesResponse(DeleteVideoFilesResponse&& from) noexcept
    : DeleteVideoFilesResponse() {
    *this = ::std::move(from);
  }

  inline DeleteVideoFilesResponse& operator=(const DeleteVideoFilesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteVideoFilesResponse& operator=(DeleteVideoFilesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteVideoFilesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteVideoFilesResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteVideoFilesResponse*>(
               &_DeleteVideoFilesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(DeleteVideoFilesResponse* other);
  friend void swap(DeleteVideoFilesResponse& a, DeleteVideoFilesResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteVideoFilesResponse* New() const final {
    return CreateMaybeMessage<DeleteVideoFilesResponse>(nullptr);
  }

  DeleteVideoFilesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteVideoFilesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteVideoFilesResponse& from);
  void MergeFrom(const DeleteVideoFilesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteVideoFilesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cameraService.DeleteVideoFilesResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_storage_2eproto);
    return ::descriptor_table_storage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:cameraService.DeleteVideoFilesResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_storage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ListDatesRequest

// -------------------------------------------------------------------

// ListDatesResponse

// repeated string dates = 1;
inline int ListDatesResponse::dates_size() const {
  return dates_.size();
}
inline void ListDatesResponse::clear_dates() {
  dates_.Clear();
}
inline const std::string& ListDatesResponse::dates(int index) const {
  // @@protoc_insertion_point(field_get:cameraService.ListDatesResponse.dates)
  return dates_.Get(index);
}
inline std::string* ListDatesResponse::mutable_dates(int index) {
  // @@protoc_insertion_point(field_mutable:cameraService.ListDatesResponse.dates)
  return dates_.Mutable(index);
}
inline void ListDatesResponse::set_dates(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:cameraService.ListDatesResponse.dates)
  dates_.Mutable(index)->assign(value);
}
inline void ListDatesResponse::set_dates(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:cameraService.ListDatesResponse.dates)
  dates_.Mutable(index)->assign(std::move(value));
}
inline void ListDatesResponse::set_dates(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  dates_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:cameraService.ListDatesResponse.dates)
}
inline void ListDatesResponse::set_dates(int index, const char* value, size_t size) {
  dates_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cameraService.ListDatesResponse.dates)
}
inline std::string* ListDatesResponse::add_dates() {
  // @@protoc_insertion_point(field_add_mutable:cameraService.ListDatesResponse.dates)
  return dates_.Add();
}
inline void ListDatesResponse::add_dates(const std::string& value) {
  dates_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:cameraService.ListDatesResponse.dates)
}
inline void ListDatesResponse::add_dates(std::string&& value) {
  dates_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:cameraService.ListDatesResponse.dates)
}
inline void ListDatesResponse::add_dates(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  dates_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:cameraService.ListDatesResponse.dates)
}
inline void ListDatesResponse::add_dates(const char* value, size_t size) {
  dates_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:cameraService.ListDatesResponse.dates)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ListDatesResponse::dates() const {
  // @@protoc_insertion_point(field_list:cameraService.ListDatesResponse.dates)
  return dates_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ListDatesResponse::mutable_dates() {
  // @@protoc_insertion_point(field_mutable_list:cameraService.ListDatesResponse.dates)
  return &dates_;
}

// -------------------------------------------------------------------

// ListVideosRequest

// string start = 1;
inline void ListVideosRequest::clear_start() {
  start_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ListVideosRequest::start() const {
  // @@protoc_insertion_point(field_get:cameraService.ListVideosRequest.start)
  return start_.GetNoArena();
}
inline void ListVideosRequest::set_start(const std::string& value) {
  
  start_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cameraService.ListVideosRequest.start)
}
inline void ListVideosRequest::set_start(std::string&& value) {
  
  start_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cameraService.ListVideosRequest.start)
}
inline void ListVideosRequest::set_start(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  start_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cameraService.ListVideosRequest.start)
}
inline void ListVideosRequest::set_start(const char* value, size_t size) {
  
  start_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cameraService.ListVideosRequest.start)
}
inline std::string* ListVideosRequest::mutable_start() {
  
  // @@protoc_insertion_point(field_mutable:cameraService.ListVideosRequest.start)
  return start_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ListVideosRequest::release_start() {
  // @@protoc_insertion_point(field_release:cameraService.ListVideosRequest.start)
  
  return start_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ListVideosRequest::set_allocated_start(std::string* start) {
  if (start != nullptr) {
    
  } else {
    
  }
  start_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), start);
  // @@protoc_insertion_point(field_set_allocated:cameraService.ListVideosRequest.start)
}

// string end = 2;
inline void ListVideosRequest::clear_end() {
  end_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ListVideosRequest::end() const {
  // @@protoc_insertion_point(field_get:cameraService.ListVideosRequest.end)
  return end_.GetNoArena();
}
inline void ListVideosRequest::set_end(const std::string& value) {
  
  end_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cameraService.ListVideosRequest.end)
}
inline void ListVideosRequest::set_end(std::string&& value) {
  
  end_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cameraService.ListVideosRequest.end)
}
inline void ListVideosRequest::set_end(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  end_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cameraService.ListVideosRequest.end)
}
inline void ListVideosRequest::set_end(const char* value, size_t size) {
  
  end_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cameraService.ListVideosRequest.end)
}
inline std::string* ListVideosRequest::mutable_end() {
  
  // @@protoc_insertion_point(field_mutable:cameraService.ListVideosRequest.end)
  return end_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ListVideosRequest::release_end() {
  // @@protoc_insertion_point(field_release:cameraService.ListVideosRequest.end)
  
  return end_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ListVideosRequest::set_allocated_end(std::string* end) {
  if (end != nullptr) {
    
  } else {
    
  }
  end_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), end);
  // @@protoc_insertion_point(field_set_allocated:cameraService.ListVideosRequest.end)
}

// -------------------------------------------------------------------

// ListVideosResponse

// repeated string videos = 1;
inline int ListVideosResponse::videos_size() const {
  return videos_.size();
}
inline void ListVideosResponse::clear_videos() {
  videos_.Clear();
}
inline const std::string& ListVideosResponse::videos(int index) const {
  // @@protoc_insertion_point(field_get:cameraService.ListVideosResponse.videos)
  return videos_.Get(index);
}
inline std::string* ListVideosResponse::mutable_videos(int index) {
  // @@protoc_insertion_point(field_mutable:cameraService.ListVideosResponse.videos)
  return videos_.Mutable(index);
}
inline void ListVideosResponse::set_videos(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:cameraService.ListVideosResponse.videos)
  videos_.Mutable(index)->assign(value);
}
inline void ListVideosResponse::set_videos(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:cameraService.ListVideosResponse.videos)
  videos_.Mutable(index)->assign(std::move(value));
}
inline void ListVideosResponse::set_videos(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  videos_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:cameraService.ListVideosResponse.videos)
}
inline void ListVideosResponse::set_videos(int index, const char* value, size_t size) {
  videos_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cameraService.ListVideosResponse.videos)
}
inline std::string* ListVideosResponse::add_videos() {
  // @@protoc_insertion_point(field_add_mutable:cameraService.ListVideosResponse.videos)
  return videos_.Add();
}
inline void ListVideosResponse::add_videos(const std::string& value) {
  videos_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:cameraService.ListVideosResponse.videos)
}
inline void ListVideosResponse::add_videos(std::string&& value) {
  videos_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:cameraService.ListVideosResponse.videos)
}
inline void ListVideosResponse::add_videos(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  videos_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:cameraService.ListVideosResponse.videos)
}
inline void ListVideosResponse::add_videos(const char* value, size_t size) {
  videos_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:cameraService.ListVideosResponse.videos)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ListVideosResponse::videos() const {
  // @@protoc_insertion_point(field_list:cameraService.ListVideosResponse.videos)
  return videos_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ListVideosResponse::mutable_videos() {
  // @@protoc_insertion_point(field_mutable_list:cameraService.ListVideosResponse.videos)
  return &videos_;
}

// -------------------------------------------------------------------

// GetVideoFileRequest

// string video = 1;
inline void GetVideoFileRequest::clear_video() {
  video_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetVideoFileRequest::video() const {
  // @@protoc_insertion_point(field_get:cameraService.GetVideoFileRequest.video)
  return video_.GetNoArena();
}
inline void GetVideoFileRequest::set_video(const std::string& value) {
  
  video_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cameraService.GetVideoFileRequest.video)
}
inline void GetVideoFileRequest::set_video(std::string&& value) {
  
  video_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cameraService.GetVideoFileRequest.video)
}
inline void GetVideoFileRequest::set_video(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  video_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cameraService.GetVideoFileRequest.video)
}
inline void GetVideoFileRequest::set_video(const char* value, size_t size) {
  
  video_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cameraService.GetVideoFileRequest.video)
}
inline std::string* GetVideoFileRequest::mutable_video() {
  
  // @@protoc_insertion_point(field_mutable:cameraService.GetVideoFileRequest.video)
  return video_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetVideoFileRequest::release_video() {
  // @@protoc_insertion_point(field_release:cameraService.GetVideoFileRequest.video)
  
  return video_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetVideoFileRequest::set_allocated_video(std::string* video) {
  if (video != nullptr) {
    
  } else {
    
  }
  video_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), video);
  // @@protoc_insertion_point(field_set_allocated:cameraService.GetVideoFileRequest.video)
}

// -------------------------------------------------------------------

// GetVideoFileResponse

// bytes chunk = 1;
inline void GetVideoFileResponse::clear_chunk() {
  chunk_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetVideoFileResponse::chunk() const {
  // @@protoc_insertion_point(field_get:cameraService.GetVideoFileResponse.chunk)
  return chunk_.GetNoArena();
}
inline void GetVideoFileResponse::set_chunk(const std::string& value) {
  
  chunk_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cameraService.GetVideoFileResponse.chunk)
}
inline void GetVideoFileResponse::set_chunk(std::string&& value) {
  
  chunk_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cameraService.GetVideoFileResponse.chunk)
}
inline void GetVideoFileResponse::set_chunk(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  chunk_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cameraService.GetVideoFileResponse.chunk)
}
inline void GetVideoFileResponse::set_chunk(const void* value, size_t size) {
  
  chunk_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cameraService.GetVideoFileResponse.chunk)
}
inline std::string* GetVideoFileResponse::mutable_chunk() {
  
  // @@protoc_insertion_point(field_mutable:cameraService.GetVideoFileResponse.chunk)
  return chunk_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetVideoFileResponse::release_chunk() {
  // @@protoc_insertion_point(field_release:cameraService.GetVideoFileResponse.chunk)
  
  return chunk_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetVideoFileResponse::set_allocated_chunk(std::string* chunk) {
  if (chunk != nullptr) {
    
  } else {
    
  }
  chunk_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chunk);
  // @@protoc_insertion_point(field_set_allocated:cameraService.GetVideoFileResponse.chunk)
}

// -------------------------------------------------------------------

// DeleteVideoFilesRequest

// repeated string videos = 1;
inline int DeleteVideoFilesRequest::videos_size() const {
  return videos_.size();
}
inline void DeleteVideoFilesRequest::clear_videos() {
  videos_.Clear();
}
inline const std::string& DeleteVideoFilesRequest::videos(int index) const {
  // @@protoc_insertion_point(field_get:cameraService.DeleteVideoFilesRequest.videos)
  return videos_.Get(index);
}
inline std::string* DeleteVideoFilesRequest::mutable_videos(int index) {
  // @@protoc_insertion_point(field_mutable:cameraService.DeleteVideoFilesRequest.videos)
  return videos_.Mutable(index);
}
inline void DeleteVideoFilesRequest::set_videos(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:cameraService.DeleteVideoFilesRequest.videos)
  videos_.Mutable(index)->assign(value);
}
inline void DeleteVideoFilesRequest::set_videos(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:cameraService.DeleteVideoFilesRequest.videos)
  videos_.Mutable(index)->assign(std::move(value));
}
inline void DeleteVideoFilesRequest::set_videos(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  videos_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:cameraService.DeleteVideoFilesRequest.videos)
}
inline void DeleteVideoFilesRequest::set_videos(int index, const char* value, size_t size) {
  videos_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cameraService.DeleteVideoFilesRequest.videos)
}
inline std::string* DeleteVideoFilesRequest::add_videos() {
  // @@protoc_insertion_point(field_add_mutable:cameraService.DeleteVideoFilesRequest.videos)
  return videos_.Add();
}
inline void DeleteVideoFilesRequest::add_videos(const std::string& value) {
  videos_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:cameraService.DeleteVideoFilesRequest.videos)
}
inline void DeleteVideoFilesRequest::add_videos(std::string&& value) {
  videos_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:cameraService.DeleteVideoFilesRequest.videos)
}
inline void DeleteVideoFilesRequest::add_videos(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  videos_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:cameraService.DeleteVideoFilesRequest.videos)
}
inline void DeleteVideoFilesRequest::add_videos(const char* value, size_t size) {
  videos_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:cameraService.DeleteVideoFilesRequest.videos)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DeleteVideoFilesRequest::videos() const {
  // @@protoc_insertion_point(field_list:cameraService.DeleteVideoFilesRequest.videos)
  return videos_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DeleteVideoFilesRequest::mutable_videos() {
  // @@protoc_insertion_point(field_mutable_list:cameraService.DeleteVideoFilesRequest.videos)
  return &videos_;
}

// -------------------------------------------------------------------

// DeleteVideoFilesResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace cameraService

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_storage_2eproto
