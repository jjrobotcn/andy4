// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: camera.proto

package cameraService

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type LiveH264StreamRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LiveH264StreamRequest) Reset()         { *m = LiveH264StreamRequest{} }
func (m *LiveH264StreamRequest) String() string { return proto.CompactTextString(m) }
func (*LiveH264StreamRequest) ProtoMessage()    {}
func (*LiveH264StreamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f444de3b23b55d1, []int{0}
}
func (m *LiveH264StreamRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LiveH264StreamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LiveH264StreamRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LiveH264StreamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiveH264StreamRequest.Merge(m, src)
}
func (m *LiveH264StreamRequest) XXX_Size() int {
	return m.Size()
}
func (m *LiveH264StreamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LiveH264StreamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LiveH264StreamRequest proto.InternalMessageInfo

type LiveH264StreamResponse struct {
	Frame                []byte   `protobuf:"bytes,1,opt,name=frame,proto3" json:"frame,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LiveH264StreamResponse) Reset()         { *m = LiveH264StreamResponse{} }
func (m *LiveH264StreamResponse) String() string { return proto.CompactTextString(m) }
func (*LiveH264StreamResponse) ProtoMessage()    {}
func (*LiveH264StreamResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f444de3b23b55d1, []int{1}
}
func (m *LiveH264StreamResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LiveH264StreamResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LiveH264StreamResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LiveH264StreamResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiveH264StreamResponse.Merge(m, src)
}
func (m *LiveH264StreamResponse) XXX_Size() int {
	return m.Size()
}
func (m *LiveH264StreamResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LiveH264StreamResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LiveH264StreamResponse proto.InternalMessageInfo

func (m *LiveH264StreamResponse) GetFrame() []byte {
	if m != nil {
		return m.Frame
	}
	return nil
}

type DvrListDatesRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DvrListDatesRequest) Reset()         { *m = DvrListDatesRequest{} }
func (m *DvrListDatesRequest) String() string { return proto.CompactTextString(m) }
func (*DvrListDatesRequest) ProtoMessage()    {}
func (*DvrListDatesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f444de3b23b55d1, []int{2}
}
func (m *DvrListDatesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DvrListDatesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DvrListDatesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DvrListDatesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DvrListDatesRequest.Merge(m, src)
}
func (m *DvrListDatesRequest) XXX_Size() int {
	return m.Size()
}
func (m *DvrListDatesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DvrListDatesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DvrListDatesRequest proto.InternalMessageInfo

type DvrListDatesResponse struct {
	DateList             []string `protobuf:"bytes,1,rep,name=date_list,json=dateList,proto3" json:"date_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DvrListDatesResponse) Reset()         { *m = DvrListDatesResponse{} }
func (m *DvrListDatesResponse) String() string { return proto.CompactTextString(m) }
func (*DvrListDatesResponse) ProtoMessage()    {}
func (*DvrListDatesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f444de3b23b55d1, []int{3}
}
func (m *DvrListDatesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DvrListDatesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DvrListDatesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DvrListDatesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DvrListDatesResponse.Merge(m, src)
}
func (m *DvrListDatesResponse) XXX_Size() int {
	return m.Size()
}
func (m *DvrListDatesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DvrListDatesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DvrListDatesResponse proto.InternalMessageInfo

func (m *DvrListDatesResponse) GetDateList() []string {
	if m != nil {
		return m.DateList
	}
	return nil
}

// 过滤参数
type DvrDateVideosFilter struct {
	// 过滤开始小时, 0为当日零点开始
	// 大于23将返回参数错误
	HourStart string `protobuf:"bytes,1,opt,name=hour_start,json=hourStart,proto3" json:"hour_start,omitempty"`
	// 过滤结束小时, 0为当日23点
	// 小于hour_start或大于23将返回参数错误
	HourEnd string `protobuf:"bytes,2,opt,name=hour_end,json=hourEnd,proto3" json:"hour_end,omitempty"`
	// 限制视频列表数量, 0为所有
	Limit                uint32   `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DvrDateVideosFilter) Reset()         { *m = DvrDateVideosFilter{} }
func (m *DvrDateVideosFilter) String() string { return proto.CompactTextString(m) }
func (*DvrDateVideosFilter) ProtoMessage()    {}
func (*DvrDateVideosFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f444de3b23b55d1, []int{4}
}
func (m *DvrDateVideosFilter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DvrDateVideosFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DvrDateVideosFilter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DvrDateVideosFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DvrDateVideosFilter.Merge(m, src)
}
func (m *DvrDateVideosFilter) XXX_Size() int {
	return m.Size()
}
func (m *DvrDateVideosFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_DvrDateVideosFilter.DiscardUnknown(m)
}

var xxx_messageInfo_DvrDateVideosFilter proto.InternalMessageInfo

func (m *DvrDateVideosFilter) GetHourStart() string {
	if m != nil {
		return m.HourStart
	}
	return ""
}

func (m *DvrDateVideosFilter) GetHourEnd() string {
	if m != nil {
		return m.HourEnd
	}
	return ""
}

func (m *DvrDateVideosFilter) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type DvrListDateVideosRequest struct {
	// 请求日期, 根据DvrListDatesResonse中日期
	Date string `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	// 过滤参数
	Filter               *DvrDateVideosFilter `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *DvrListDateVideosRequest) Reset()         { *m = DvrListDateVideosRequest{} }
func (m *DvrListDateVideosRequest) String() string { return proto.CompactTextString(m) }
func (*DvrListDateVideosRequest) ProtoMessage()    {}
func (*DvrListDateVideosRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f444de3b23b55d1, []int{5}
}
func (m *DvrListDateVideosRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DvrListDateVideosRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DvrListDateVideosRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DvrListDateVideosRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DvrListDateVideosRequest.Merge(m, src)
}
func (m *DvrListDateVideosRequest) XXX_Size() int {
	return m.Size()
}
func (m *DvrListDateVideosRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DvrListDateVideosRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DvrListDateVideosRequest proto.InternalMessageInfo

func (m *DvrListDateVideosRequest) GetDate() string {
	if m != nil {
		return m.Date
	}
	return ""
}

func (m *DvrListDateVideosRequest) GetFilter() *DvrDateVideosFilter {
	if m != nil {
		return m.Filter
	}
	return nil
}

type DvrListDateVideosResponse struct {
	// 监控文件静态文件地址列表
	VideosStatic         []string `protobuf:"bytes,1,rep,name=videos_static,json=videosStatic,proto3" json:"videos_static,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DvrListDateVideosResponse) Reset()         { *m = DvrListDateVideosResponse{} }
func (m *DvrListDateVideosResponse) String() string { return proto.CompactTextString(m) }
func (*DvrListDateVideosResponse) ProtoMessage()    {}
func (*DvrListDateVideosResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f444de3b23b55d1, []int{6}
}
func (m *DvrListDateVideosResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DvrListDateVideosResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DvrListDateVideosResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DvrListDateVideosResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DvrListDateVideosResponse.Merge(m, src)
}
func (m *DvrListDateVideosResponse) XXX_Size() int {
	return m.Size()
}
func (m *DvrListDateVideosResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DvrListDateVideosResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DvrListDateVideosResponse proto.InternalMessageInfo

func (m *DvrListDateVideosResponse) GetVideosStatic() []string {
	if m != nil {
		return m.VideosStatic
	}
	return nil
}

func init() {
	proto.RegisterType((*LiveH264StreamRequest)(nil), "cameraService.LiveH264StreamRequest")
	proto.RegisterType((*LiveH264StreamResponse)(nil), "cameraService.LiveH264StreamResponse")
	proto.RegisterType((*DvrListDatesRequest)(nil), "cameraService.DvrListDatesRequest")
	proto.RegisterType((*DvrListDatesResponse)(nil), "cameraService.DvrListDatesResponse")
	proto.RegisterType((*DvrDateVideosFilter)(nil), "cameraService.DvrDateVideosFilter")
	proto.RegisterType((*DvrListDateVideosRequest)(nil), "cameraService.DvrListDateVideosRequest")
	proto.RegisterType((*DvrListDateVideosResponse)(nil), "cameraService.DvrListDateVideosResponse")
}

func init() { proto.RegisterFile("camera.proto", fileDescriptor_2f444de3b23b55d1) }

var fileDescriptor_2f444de3b23b55d1 = []byte{
	// 447 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x93, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xc7, 0xd9, 0x06, 0x4a, 0x33, 0x38, 0x48, 0x2c, 0x2d, 0xb8, 0x81, 0x46, 0xd1, 0x06, 0x84,
	0xd5, 0x83, 0x83, 0x52, 0xc4, 0x21, 0x27, 0x04, 0x05, 0x71, 0xe8, 0xc9, 0x91, 0xb8, 0x46, 0x4b,
	0x3c, 0x2d, 0x8b, 0x6c, 0x6f, 0xd8, 0xdd, 0xfa, 0x0e, 0x2f, 0xc0, 0x01, 0x89, 0x67, 0xe2, 0x88,
	0xc4, 0x0b, 0xa0, 0x88, 0x07, 0x41, 0xfb, 0x81, 0x14, 0x07, 0xb7, 0xbd, 0x79, 0xfe, 0x3b, 0x1f,
	0xbf, 0x9d, 0xff, 0x1a, 0xa2, 0x05, 0x2f, 0x51, 0xf1, 0x74, 0xa9, 0xa4, 0x91, 0xb4, 0xe7, 0xa3,
	0x19, 0xaa, 0x5a, 0x2c, 0xb0, 0xff, 0xf0, 0x4c, 0xca, 0xb3, 0x02, 0xc7, 0x7c, 0x29, 0xc6, 0xbc,
	0xaa, 0xa4, 0xe1, 0x46, 0xc8, 0x4a, 0xfb, 0x64, 0x76, 0x1f, 0xf6, 0x4e, 0x44, 0x8d, 0x6f, 0x27,
	0xcf, 0x9f, 0xcd, 0x8c, 0x42, 0x5e, 0x66, 0xf8, 0xe9, 0x1c, 0xb5, 0x61, 0x29, 0xdc, 0xdb, 0x3c,
	0xd0, 0x4b, 0x59, 0x69, 0xa4, 0xbb, 0x70, 0xe3, 0x54, 0xf1, 0x12, 0x63, 0x32, 0x24, 0x49, 0x94,
	0xf9, 0x80, 0xed, 0xc1, 0xdd, 0xe3, 0x5a, 0x9d, 0x08, 0x6d, 0x8e, 0xb9, 0x41, 0xfd, 0xaf, 0xcd,
	0x11, 0xec, 0x36, 0xe5, 0xd0, 0xe4, 0x01, 0x74, 0x73, 0x6e, 0x70, 0x5e, 0x08, 0x6d, 0x62, 0x32,
	0xec, 0x24, 0xdd, 0x6c, 0xc7, 0x0a, 0x36, 0x93, 0xa1, 0xeb, 0x65, 0x0b, 0xde, 0x89, 0x1c, 0xa5,
	0x7e, 0x23, 0x0a, 0x83, 0x8a, 0x1e, 0x00, 0x7c, 0x90, 0xe7, 0x6a, 0xae, 0x0d, 0x57, 0xc6, 0x4d,
	0xef, 0x66, 0x5d, 0xab, 0xcc, 0xac, 0x40, 0xf7, 0x61, 0xc7, 0x1d, 0x63, 0x95, 0xc7, 0x5b, 0xee,
	0xf0, 0xa6, 0x8d, 0x5f, 0x57, 0xb9, 0x45, 0x2e, 0x44, 0x29, 0x4c, 0xdc, 0x19, 0x92, 0xa4, 0x97,
	0xf9, 0x80, 0x7d, 0x84, 0x78, 0x8d, 0xcd, 0x8f, 0x0a, 0xdc, 0x94, 0xc2, 0x75, 0x8b, 0x13, 0xa6,
	0xb8, 0x6f, 0x3a, 0x85, 0xed, 0x53, 0x47, 0xe2, 0xda, 0xdf, 0x9a, 0xb0, 0xb4, 0xb1, 0xe9, 0xb4,
	0x85, 0x39, 0x0b, 0x15, 0xec, 0x05, 0xec, 0xb7, 0xcc, 0x0a, 0xcb, 0x18, 0x41, 0xaf, 0x76, 0x8a,
	0xbd, 0x9a, 0x11, 0x8b, 0xb0, 0x90, 0xc8, 0x8b, 0x33, 0xa7, 0x4d, 0xbe, 0x76, 0xa0, 0xf7, 0x6a,
	0x7d, 0x1e, 0xe5, 0x70, 0xbb, 0x69, 0x11, 0x7d, 0xb4, 0x41, 0xd4, 0x6a, 0x6d, 0xff, 0xf1, 0x15,
	0x59, 0x9e, 0x8a, 0x5d, 0x7b, 0x4a, 0xe8, 0x67, 0x02, 0xd1, 0xba, 0x7f, 0xb4, 0xe5, 0xce, 0x9b,
	0x9e, 0xf7, 0x47, 0x97, 0xe6, 0x84, 0xee, 0xc9, 0x97, 0x5f, 0x7f, 0xbe, 0x6d, 0x31, 0x76, 0xe0,
	0x1e, 0x66, 0x3d, 0x19, 0xfb, 0x9a, 0x71, 0x5e, 0x2b, 0xf7, 0x28, 0xe6, 0x76, 0xe5, 0x7a, 0x4a,
	0x0e, 0xe9, 0x77, 0x02, 0x77, 0xfe, 0xdb, 0x1d, 0x7d, 0x72, 0xf1, 0x90, 0x86, 0x93, 0xfd, 0xe4,
	0xea, 0xc4, 0x80, 0x94, 0x3a, 0xa4, 0x84, 0x8d, 0x2e, 0x43, 0x9a, 0x7b, 0x53, 0xa6, 0xe4, 0xf0,
	0x65, 0xf4, 0x63, 0x35, 0x20, 0x3f, 0x57, 0x03, 0xf2, 0x7b, 0x35, 0x20, 0xef, 0xb7, 0xdd, 0x0f,
	0x75, 0xf4, 0x37, 0x00, 0x00, 0xff, 0xff, 0x6f, 0x7c, 0x00, 0x9c, 0x8d, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CameraServiceClient is the client API for CameraService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CameraServiceClient interface {
	// 直播流数据, 数据为h264 nal单元
	LiveH264Stream(ctx context.Context, in *LiveH264StreamRequest, opts ...grpc.CallOption) (CameraService_LiveH264StreamClient, error)
	// 获取监控数据日期列表
	DvrListDates(ctx context.Context, in *DvrListDatesRequest, opts ...grpc.CallOption) (*DvrListDatesResponse, error)
	// 获取监控数据指定日期视频文件列表
	DvrListDateVideos(ctx context.Context, in *DvrListDateVideosRequest, opts ...grpc.CallOption) (*DvrListDateVideosResponse, error)
}

type cameraServiceClient struct {
	cc *grpc.ClientConn
}

func NewCameraServiceClient(cc *grpc.ClientConn) CameraServiceClient {
	return &cameraServiceClient{cc}
}

func (c *cameraServiceClient) LiveH264Stream(ctx context.Context, in *LiveH264StreamRequest, opts ...grpc.CallOption) (CameraService_LiveH264StreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CameraService_serviceDesc.Streams[0], "/cameraService.CameraService/LiveH264Stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &cameraServiceLiveH264StreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CameraService_LiveH264StreamClient interface {
	Recv() (*LiveH264StreamResponse, error)
	grpc.ClientStream
}

type cameraServiceLiveH264StreamClient struct {
	grpc.ClientStream
}

func (x *cameraServiceLiveH264StreamClient) Recv() (*LiveH264StreamResponse, error) {
	m := new(LiveH264StreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cameraServiceClient) DvrListDates(ctx context.Context, in *DvrListDatesRequest, opts ...grpc.CallOption) (*DvrListDatesResponse, error) {
	out := new(DvrListDatesResponse)
	err := c.cc.Invoke(ctx, "/cameraService.CameraService/DvrListDates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraServiceClient) DvrListDateVideos(ctx context.Context, in *DvrListDateVideosRequest, opts ...grpc.CallOption) (*DvrListDateVideosResponse, error) {
	out := new(DvrListDateVideosResponse)
	err := c.cc.Invoke(ctx, "/cameraService.CameraService/DvrListDateVideos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CameraServiceServer is the server API for CameraService service.
type CameraServiceServer interface {
	// 直播流数据, 数据为h264 nal单元
	LiveH264Stream(*LiveH264StreamRequest, CameraService_LiveH264StreamServer) error
	// 获取监控数据日期列表
	DvrListDates(context.Context, *DvrListDatesRequest) (*DvrListDatesResponse, error)
	// 获取监控数据指定日期视频文件列表
	DvrListDateVideos(context.Context, *DvrListDateVideosRequest) (*DvrListDateVideosResponse, error)
}

// UnimplementedCameraServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCameraServiceServer struct {
}

func (*UnimplementedCameraServiceServer) LiveH264Stream(req *LiveH264StreamRequest, srv CameraService_LiveH264StreamServer) error {
	return status.Errorf(codes.Unimplemented, "method LiveH264Stream not implemented")
}
func (*UnimplementedCameraServiceServer) DvrListDates(ctx context.Context, req *DvrListDatesRequest) (*DvrListDatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DvrListDates not implemented")
}
func (*UnimplementedCameraServiceServer) DvrListDateVideos(ctx context.Context, req *DvrListDateVideosRequest) (*DvrListDateVideosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DvrListDateVideos not implemented")
}

func RegisterCameraServiceServer(s *grpc.Server, srv CameraServiceServer) {
	s.RegisterService(&_CameraService_serviceDesc, srv)
}

func _CameraService_LiveH264Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LiveH264StreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CameraServiceServer).LiveH264Stream(m, &cameraServiceLiveH264StreamServer{stream})
}

type CameraService_LiveH264StreamServer interface {
	Send(*LiveH264StreamResponse) error
	grpc.ServerStream
}

type cameraServiceLiveH264StreamServer struct {
	grpc.ServerStream
}

func (x *cameraServiceLiveH264StreamServer) Send(m *LiveH264StreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CameraService_DvrListDates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DvrListDatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServiceServer).DvrListDates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cameraService.CameraService/DvrListDates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServiceServer).DvrListDates(ctx, req.(*DvrListDatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CameraService_DvrListDateVideos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DvrListDateVideosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServiceServer).DvrListDateVideos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cameraService.CameraService/DvrListDateVideos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServiceServer).DvrListDateVideos(ctx, req.(*DvrListDateVideosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CameraService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cameraService.CameraService",
	HandlerType: (*CameraServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DvrListDates",
			Handler:    _CameraService_DvrListDates_Handler,
		},
		{
			MethodName: "DvrListDateVideos",
			Handler:    _CameraService_DvrListDateVideos_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "LiveH264Stream",
			Handler:       _CameraService_LiveH264Stream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "camera.proto",
}

func (m *LiveH264StreamRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LiveH264StreamRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *LiveH264StreamResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LiveH264StreamResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Frame) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCamera(dAtA, i, uint64(len(m.Frame)))
		i += copy(dAtA[i:], m.Frame)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DvrListDatesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DvrListDatesRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DvrListDatesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DvrListDatesResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.DateList) > 0 {
		for _, s := range m.DateList {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DvrDateVideosFilter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DvrDateVideosFilter) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.HourStart) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCamera(dAtA, i, uint64(len(m.HourStart)))
		i += copy(dAtA[i:], m.HourStart)
	}
	if len(m.HourEnd) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCamera(dAtA, i, uint64(len(m.HourEnd)))
		i += copy(dAtA[i:], m.HourEnd)
	}
	if m.Limit != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCamera(dAtA, i, uint64(m.Limit))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DvrListDateVideosRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DvrListDateVideosRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Date) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCamera(dAtA, i, uint64(len(m.Date)))
		i += copy(dAtA[i:], m.Date)
	}
	if m.Filter != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCamera(dAtA, i, uint64(m.Filter.Size()))
		n1, err1 := m.Filter.MarshalTo(dAtA[i:])
		if err1 != nil {
			return 0, err1
		}
		i += n1
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DvrListDateVideosResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DvrListDateVideosResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.VideosStatic) > 0 {
		for _, s := range m.VideosStatic {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintCamera(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *LiveH264StreamRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LiveH264StreamResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Frame)
	if l > 0 {
		n += 1 + l + sovCamera(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DvrListDatesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DvrListDatesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DateList) > 0 {
		for _, s := range m.DateList {
			l = len(s)
			n += 1 + l + sovCamera(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DvrDateVideosFilter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.HourStart)
	if l > 0 {
		n += 1 + l + sovCamera(uint64(l))
	}
	l = len(m.HourEnd)
	if l > 0 {
		n += 1 + l + sovCamera(uint64(l))
	}
	if m.Limit != 0 {
		n += 1 + sovCamera(uint64(m.Limit))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DvrListDateVideosRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Date)
	if l > 0 {
		n += 1 + l + sovCamera(uint64(l))
	}
	if m.Filter != nil {
		l = m.Filter.Size()
		n += 1 + l + sovCamera(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DvrListDateVideosResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.VideosStatic) > 0 {
		for _, s := range m.VideosStatic {
			l = len(s)
			n += 1 + l + sovCamera(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovCamera(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCamera(x uint64) (n int) {
	return sovCamera(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LiveH264StreamRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCamera
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LiveH264StreamRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LiveH264StreamRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCamera(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCamera
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCamera
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LiveH264StreamResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCamera
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LiveH264StreamResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LiveH264StreamResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Frame", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCamera
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCamera
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCamera
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Frame = append(m.Frame[:0], dAtA[iNdEx:postIndex]...)
			if m.Frame == nil {
				m.Frame = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCamera(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCamera
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCamera
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DvrListDatesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCamera
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DvrListDatesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DvrListDatesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCamera(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCamera
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCamera
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DvrListDatesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCamera
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DvrListDatesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DvrListDatesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DateList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCamera
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCamera
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCamera
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DateList = append(m.DateList, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCamera(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCamera
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCamera
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DvrDateVideosFilter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCamera
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DvrDateVideosFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DvrDateVideosFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HourStart", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCamera
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCamera
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCamera
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HourStart = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HourEnd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCamera
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCamera
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCamera
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HourEnd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCamera
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCamera(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCamera
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCamera
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DvrListDateVideosRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCamera
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DvrListDateVideosRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DvrListDateVideosRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCamera
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCamera
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCamera
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Date = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCamera
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCamera
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCamera
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Filter == nil {
				m.Filter = &DvrDateVideosFilter{}
			}
			if err := m.Filter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCamera(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCamera
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCamera
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DvrListDateVideosResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCamera
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DvrListDateVideosResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DvrListDateVideosResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VideosStatic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCamera
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCamera
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCamera
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VideosStatic = append(m.VideosStatic, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCamera(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCamera
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCamera
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCamera(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCamera
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCamera
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCamera
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCamera
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthCamera
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCamera
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCamera(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthCamera
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCamera = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCamera   = fmt.Errorf("proto: integer overflow")
)
