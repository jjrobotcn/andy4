// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: storage.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace CameraService {
  public static partial class Storage
  {
    static readonly string __ServiceName = "cameraService.Storage";

    static readonly grpc::Marshaller<global::CameraService.ListDatesRequest> __Marshaller_cameraService_ListDatesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::CameraService.ListDatesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::CameraService.ListDatesResponse> __Marshaller_cameraService_ListDatesResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::CameraService.ListDatesResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::CameraService.ListVideosRequest> __Marshaller_cameraService_ListVideosRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::CameraService.ListVideosRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::CameraService.ListVideosResponse> __Marshaller_cameraService_ListVideosResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::CameraService.ListVideosResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::CameraService.GetVideoFileRequest> __Marshaller_cameraService_GetVideoFileRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::CameraService.GetVideoFileRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::CameraService.GetVideoFileResponse> __Marshaller_cameraService_GetVideoFileResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::CameraService.GetVideoFileResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::CameraService.DeleteVideoFilesRequest> __Marshaller_cameraService_DeleteVideoFilesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::CameraService.DeleteVideoFilesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::CameraService.DeleteVideoFilesResponse> __Marshaller_cameraService_DeleteVideoFilesResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::CameraService.DeleteVideoFilesResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::CameraService.ListDatesRequest, global::CameraService.ListDatesResponse> __Method_ListDates = new grpc::Method<global::CameraService.ListDatesRequest, global::CameraService.ListDatesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListDates",
        __Marshaller_cameraService_ListDatesRequest,
        __Marshaller_cameraService_ListDatesResponse);

    static readonly grpc::Method<global::CameraService.ListVideosRequest, global::CameraService.ListVideosResponse> __Method_ListVideos = new grpc::Method<global::CameraService.ListVideosRequest, global::CameraService.ListVideosResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListVideos",
        __Marshaller_cameraService_ListVideosRequest,
        __Marshaller_cameraService_ListVideosResponse);

    static readonly grpc::Method<global::CameraService.GetVideoFileRequest, global::CameraService.GetVideoFileResponse> __Method_GetVideoFile = new grpc::Method<global::CameraService.GetVideoFileRequest, global::CameraService.GetVideoFileResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetVideoFile",
        __Marshaller_cameraService_GetVideoFileRequest,
        __Marshaller_cameraService_GetVideoFileResponse);

    static readonly grpc::Method<global::CameraService.DeleteVideoFilesRequest, global::CameraService.DeleteVideoFilesResponse> __Method_DeleteVideoFiles = new grpc::Method<global::CameraService.DeleteVideoFilesRequest, global::CameraService.DeleteVideoFilesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteVideoFiles",
        __Marshaller_cameraService_DeleteVideoFilesRequest,
        __Marshaller_cameraService_DeleteVideoFilesResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::CameraService.StorageReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Storage</summary>
    [grpc::BindServiceMethod(typeof(Storage), "BindService")]
    public abstract partial class StorageBase
    {
      /// <summary>
      /// 获取监控视频日期列表
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::CameraService.ListDatesResponse> ListDates(global::CameraService.ListDatesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 获取监控视频列表
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::CameraService.ListVideosResponse> ListVideos(global::CameraService.ListVideosRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 获取监控视频文件
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task GetVideoFile(global::CameraService.GetVideoFileRequest request, grpc::IServerStreamWriter<global::CameraService.GetVideoFileResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// 删除监控视频文件
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::CameraService.DeleteVideoFilesResponse> DeleteVideoFiles(global::CameraService.DeleteVideoFilesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Storage</summary>
    public partial class StorageClient : grpc::ClientBase<StorageClient>
    {
      /// <summary>Creates a new client for Storage</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public StorageClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Storage that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public StorageClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected StorageClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected StorageClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// 获取监控视频日期列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CameraService.ListDatesResponse ListDates(global::CameraService.ListDatesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListDates(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 获取监控视频日期列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CameraService.ListDatesResponse ListDates(global::CameraService.ListDatesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListDates, null, options, request);
      }
      /// <summary>
      /// 获取监控视频日期列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CameraService.ListDatesResponse> ListDatesAsync(global::CameraService.ListDatesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListDatesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 获取监控视频日期列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CameraService.ListDatesResponse> ListDatesAsync(global::CameraService.ListDatesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListDates, null, options, request);
      }
      /// <summary>
      /// 获取监控视频列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CameraService.ListVideosResponse ListVideos(global::CameraService.ListVideosRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListVideos(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 获取监控视频列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CameraService.ListVideosResponse ListVideos(global::CameraService.ListVideosRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListVideos, null, options, request);
      }
      /// <summary>
      /// 获取监控视频列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CameraService.ListVideosResponse> ListVideosAsync(global::CameraService.ListVideosRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListVideosAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 获取监控视频列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CameraService.ListVideosResponse> ListVideosAsync(global::CameraService.ListVideosRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListVideos, null, options, request);
      }
      /// <summary>
      /// 获取监控视频文件
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::CameraService.GetVideoFileResponse> GetVideoFile(global::CameraService.GetVideoFileRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetVideoFile(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 获取监控视频文件
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::CameraService.GetVideoFileResponse> GetVideoFile(global::CameraService.GetVideoFileRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetVideoFile, null, options, request);
      }
      /// <summary>
      /// 删除监控视频文件
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CameraService.DeleteVideoFilesResponse DeleteVideoFiles(global::CameraService.DeleteVideoFilesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteVideoFiles(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 删除监控视频文件
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CameraService.DeleteVideoFilesResponse DeleteVideoFiles(global::CameraService.DeleteVideoFilesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteVideoFiles, null, options, request);
      }
      /// <summary>
      /// 删除监控视频文件
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CameraService.DeleteVideoFilesResponse> DeleteVideoFilesAsync(global::CameraService.DeleteVideoFilesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteVideoFilesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 删除监控视频文件
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CameraService.DeleteVideoFilesResponse> DeleteVideoFilesAsync(global::CameraService.DeleteVideoFilesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteVideoFiles, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override StorageClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new StorageClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(StorageBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_ListDates, serviceImpl.ListDates)
          .AddMethod(__Method_ListVideos, serviceImpl.ListVideos)
          .AddMethod(__Method_GetVideoFile, serviceImpl.GetVideoFile)
          .AddMethod(__Method_DeleteVideoFiles, serviceImpl.DeleteVideoFiles).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, StorageBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_ListDates, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CameraService.ListDatesRequest, global::CameraService.ListDatesResponse>(serviceImpl.ListDates));
      serviceBinder.AddMethod(__Method_ListVideos, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CameraService.ListVideosRequest, global::CameraService.ListVideosResponse>(serviceImpl.ListVideos));
      serviceBinder.AddMethod(__Method_GetVideoFile, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::CameraService.GetVideoFileRequest, global::CameraService.GetVideoFileResponse>(serviceImpl.GetVideoFile));
      serviceBinder.AddMethod(__Method_DeleteVideoFiles, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CameraService.DeleteVideoFilesRequest, global::CameraService.DeleteVideoFilesResponse>(serviceImpl.DeleteVideoFiles));
    }

  }
}
#endregion
