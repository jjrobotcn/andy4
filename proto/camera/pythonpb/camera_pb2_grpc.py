# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import camera_pb2 as camera__pb2


class CameraServiceStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.LiveH264Stream = channel.unary_stream(
        '/cameraService.CameraService/LiveH264Stream',
        request_serializer=camera__pb2.LiveH264StreamRequest.SerializeToString,
        response_deserializer=camera__pb2.LiveH264StreamResponse.FromString,
        )
    self.LatestImage = channel.unary_unary(
        '/cameraService.CameraService/LatestImage',
        request_serializer=camera__pb2.LatestImageRequest.SerializeToString,
        response_deserializer=camera__pb2.LatestImageResponse.FromString,
        )


class CameraServiceServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def LiveH264Stream(self, request, context):
    """直播流数据, 数据为h264 nal单元
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def LatestImage(self, request, context):
    """获取当前最新图片jpg
    图片更新时间周期为1s
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_CameraServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'LiveH264Stream': grpc.unary_stream_rpc_method_handler(
          servicer.LiveH264Stream,
          request_deserializer=camera__pb2.LiveH264StreamRequest.FromString,
          response_serializer=camera__pb2.LiveH264StreamResponse.SerializeToString,
      ),
      'LatestImage': grpc.unary_unary_rpc_method_handler(
          servicer.LatestImage,
          request_deserializer=camera__pb2.LatestImageRequest.FromString,
          response_serializer=camera__pb2.LatestImageResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'cameraService.CameraService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
